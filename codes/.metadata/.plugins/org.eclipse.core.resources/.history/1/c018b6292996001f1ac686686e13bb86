/*
 * pid_motors.h
 *
 *  Created on: Oct 26, 2024
 *      Author: wyatt
 */

#ifndef INC_PID_MOTORS_H_
#define INC_PID_MOTORS_H_


#define UPDATE_RATE_MS      100
#define UPDATE_RATE         (UPDATE_RATE_MS/1000.0)
#define INTEGRATOR_MAX_SIZE 100

typedef struct pid_data_type {
	float fKp, fKi, fKd;         		// PID gains
	float fError_previous;       		// used in the derivative
	float fError_sum;            		// integrator cumulative error
	unsigned short usIntegratorSize; 	//integrator window size
	float fOutputSaturation;            // output saturation
} pid_data_type;

/* ************************************************ */
/* Method name:        vPidInit                     */
/* Method description: Initialize the PID controller*/
/* Input params:       n/a                          */
/* Output params:      n/a                          */
/* ************************************************ */
void vPidInit(float fKp, float fKi, float fKd, unsigned short usIntSizeMs, float fOutputSaturation, char motor);


/* ************************************************** */
/* Method name:        fPidUpdateData                 */
/* Method description: Update the control output      */
/*                     using the reference and sensor */
/*                     value                          */
/* Input params:       fSensorValue: Value read from  */
/*                     the sensor                     */
/*                     fReferenceValue: Value used as */
/*                     control reference              */
/* Output params:      float: New Control effort      */
/* ************************************************** */
float fPidUpdateData(float fSensorValue, float fSetValue, char motor);



#endif /* INC_PID_MOTORS_H_ */
