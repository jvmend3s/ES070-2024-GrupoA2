/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "i2c.h"
#include "usart.h"
#include "tim.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include <stdio.h>
#include <string.h>
#include "ultrassonico.h"
#include "lcd_hd44780_i2c.h"
#include "communication.h"
#include "motors.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum
{ Bit_RESET = 0,
  Bit_SET
}BitAction;


/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

//    Timer & Counters

TIM_HandleTypeDef * pTimerPWMTrigger = &htim20;
TIM_HandleTypeDef * pTimerEcoUltrassonicoFrontal = &htim3;
UART_HandleTypeDef * pBleCtrlMain = &huart3;
TIM_HandleTypeDef * pTimDurationMotor = &htim5;
TIM_HandleTypeDef * pTimPWMMotor = &htim1;

// encoders
TIM_HandleTypeDef* pTimFreqFixa_esq = &htim16;
TIM_HandleTypeDef* pTimFreqFixa_dir = &htim17;
uint32_t T1_esq, T2_esq;
uint32_t T1_dir, T2_dir;
unsigned int estorou_esq, estorou_dir;
unsigned long long int T11_esq, T11_dir;
float vel_esq, vel_dir;
long long int timea, timeb;



//   Ints
//flags
char CountMode=0;

uint16_t uiAuxDistanceUltrassonicoFrontal1=0;
uint16_t uiAuxDistanceUltrassonicoFrontal2=0;
//Floats

float fDistance=0;


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
//	unsigned char ucLCD0Msg[17], ucLCD1Msg[17];

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_LPUART1_UART_Init();
  MX_TIM3_Init();
  MX_TIM20_Init();
  MX_I2C2_Init();
  MX_TIM1_Init();
  MX_USART3_UART_Init();
  MX_TIM5_Init();
  MX_TIM16_Init();
  MX_TIM17_Init();
  /* USER CODE BEGIN 2 */

  lcdInit(&hi2c2, (uint8_t)0x27, (uint8_t)2, (uint8_t)16);

  vUltrassonicoInit(pTimerEcoUltrassonicoFrontal,pTimerPWMTrigger) ;
  vCommunicationInit();

  vMotorsInit(pTimPWMMotor, pTimDurationMotor);
  vBluetoothInit(pBleCtrlMain);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdSetCursorPosition(0, 0);
  HAL_TIM_Base_Start_IT(pTimDurationMotor);

  HAL_TIM_Base_Start_IT(pTimFreqFixa_esq);
  HAL_TIM_Base_Start_IT(pTimFreqFixa_dir);
  HAL_TIM_IC_Start_IT(pTimFreqFixa_esq, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(pTimFreqFixa_dir, TIM_CHANNEL_1);

//  sprintf((char *)ucLCD0Msg, "Distancia (cm)");
//  lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));






  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(200);
	  lcdSetCursorPosition(0, 1);
	  lcdPrintStr((uint8_t*)pCommunicationFloatToString(fDistance, 2), strlen((char *)pCommunicationFloatToString(fDistance, 2)));




  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
	if (htim == pTimDurationMotor)
	{
	vMotorsDurationCallback();
	}
	if (htim == pTimFreqFixa_esq){
//		timea = HAL_TIM_ReadCapturedValue(&htim16,  TIM_CHANNEL_1);
		estorou_esq++;
	}
	if (htim == pTimFreqFixa_dir){
//		timeb = HAL_TIM_ReadCapturedValue(&htim17,  TIM_CHANNEL_1);
		estorou_dir++;
	}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
  if(htim == pTimerEcoUltrassonicoFrontal){
	  if(0==CountMode){
		  uiAuxDistanceUltrassonicoFrontal1= HAL_TIM_ReadCapturedValue(pTimerEcoUltrassonicoFrontal,TIM_CHANNEL_1);
		  CountMode=1;
	  }else{
		  uiAuxDistanceUltrassonicoFrontal2 = HAL_TIM_ReadCapturedValue(pTimerEcoUltrassonicoFrontal,TIM_CHANNEL_1);
		  fDistance=fUltrassonicoGetDistance( uiAuxDistanceUltrassonicoFrontal1,uiAuxDistanceUltrassonicoFrontal2);
		  CountMode=0;
	  }
	  if(fDistance<0){
		  fDistance=fDistance*(-1);
	  }
  }
  if (htim == pTimFreqFixa_esq)
  	{
  		T1_esq =  HAL_TIM_ReadCapturedValue(htim,  TIM_CHANNEL_1);
  		if (estorou_esq != 0)
  			T11_esq = T1_esq + estorou_esq*10000;
  		else
  			T11_esq = T1_esq;
  		__HAL_TIM_SET_COUNTER(htim, 0);
  		estorou_esq = 0;
  		vel_esq = 10/(T11_esq/1000000); //velocidade em mm/s
  	}
  if (htim == pTimFreqFixa_dir)
  	{
  		T1_dir =  HAL_TIM_ReadCapturedValue(htim,  TIM_CHANNEL_1);
  		if (estorou_dir != 0)
  		{
  			T11_dir = T1_dir + estorou_dir*10000;
  		}
  		else
  		{
  			T11_dir = T1_dir;
  		}
  		__HAL_TIM_SET_COUNTER(htim, 0);
  		estorou_dir = 0;
  		vel_dir = 10/(T11_dir/1000000); //velocidade em mm/s
  	}
}




/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
