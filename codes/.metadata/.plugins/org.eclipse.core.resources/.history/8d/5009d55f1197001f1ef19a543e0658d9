//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//----------------------------------------------File Name----------------------------------------------//
//	communicationStateMachine.c
//----------------------------------------------Desciption---------------------------------------------//
//
//	This file explains the funcion os the state machine used on the communicantion system,
//	using the RxCpltCallback function to interrupt the system and treat these interruptions.
//	the other functions are made to set and return parameters.
//
//	The functions implemented on this file are:
//	-	HAL_UART_RxCpltCallback
//	-	vCommunicationStateMachineReturnParam
//	-	vCommunicationStateMachineSetParam
//
//
//-----------------------------------------------Author------------------------------------------------//
//	JoÃ£o Vitor Mendes
//	Vitor Akio Isawa
//-----------------------------------------------Version-----------------------------------------------//
//	Created on :									29/04/24
//	Revised on :									03/05/24
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//-----------------------------------------------Defines-----------------------------------------------//
#define _IDDLE   '0'
#define _READY   '1'
#define _CAR	 '2'
#define _GET     '3'
#define _SET     '4'
#define _PARAM   '5'
#define _VALUE   '6'

#define MAX_VALUE_LENGTH 7

//-----------------------------------------------Includes----------------------------------------------//
#include "commStateMachine.h"
#include "bleCmd.h"
#include "communication.h"

//----------------------------------------Variable and definitions-------------------------------------//
extern float fLeftSpeed; // l
extern float fRightSpeed; // r
extern float fLeftMotorKp; // a
extern float fLeftMotorKi; // b
extern float fRightMotorKp; // c
extern float fRightMotorKi; // d
extern float fSetPoint_left; //e
extern float fSetPoint_right; //f

static unsigned char ucValue[MAX_VALUE_LENGTH+1];

unsigned char ucState = _IDDLE;
unsigned char ucValueCount;
unsigned char ucDigit;
unsigned char ucTransmitVector[_MAX_NUMBER_OF_CHARS];
UART_HandleTypeDef *pBluetoothControllerUART;

//-----------------------------------------------Functions---------------------------------------------//


void vCommStateMachineInit(UART_HandleTypeDef *huart){
	pBluetoothControllerUART = huart;
	HAL_UART_Receive_IT(pBluetoothControllerUART, &ucDigit, 1);
}


//	Function name	: 	HAL_UART_RxCpltCallback
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	Makes the treatment when recieve one byte from the uart, making a
//		                state machine to pass trought any input
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucByte
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
    static unsigned char ucParam;


    if (huart == pBluetoothControllerUART){
        HAL_UART_Receive_IT(huart, &ucDigit, 1);

        if('#' == ucDigit){
            ucState = _READY;
        }
        else{
			if (ucState != _IDDLE){
				switch (ucState){
				case _READY:
					switch (ucDigit){
					case 'g':
						ucState = _GET;
						break;
					case 's':
						ucState = _SET;
						break;
					default:
						ucState = _IDDLE;
					}
					break;

				case _GET:
//					if ('t' == ucDigit || 'r' == ucDigit || 'h' == ucDigit || 'c' == ucDigit || 'p' == ucDigit || 'i' == ucDigit
//							|| 'd' == ucDigit || 's' == ucDigit || 'l' == ucDigit || 'o' == ucDigit){
					if ('v' == ucDigit || 'a' == ucDigit || 'b' == ucDigit || 'c' == ucDigit || 'd' == ucDigit || 'e' == ucDigit || 'f' == ucDigit){
					ucParam = ucDigit;
					ucState = _PARAM;
					}
					else
					ucState = _IDDLE;
					break;

				case _SET:
//					if ('r' == ucDigit || 'h' == ucDigit || 'c' == ucDigit || 'p' == ucDigit || 'i' == ucDigit || 'd' == ucDigit
//							|| 'l' == ucDigit || 'o' == ucDigit){
					if ('a' == ucDigit || 'b' == ucDigit || 'c' == ucDigit || 'd' == ucDigit || 'e' == ucDigit || 'f' == ucDigit){
					ucParam = ucDigit;
					ucValueCount = 0;
					ucState = _VALUE;
					}
					else
					ucState = _IDDLE;
					break;

				case _PARAM:
					if (';' == ucDigit){
						vCommStateMachineReturnParam(ucParam);
					}
					ucState = _IDDLE;
					break;

				case _VALUE:
					if ((ucDigit >= '0' && ucDigit <= '9') || ',' == ucDigit){
						if (ucValueCount < MAX_VALUE_LENGTH){
							ucValue[ucValueCount++] = ucDigit;
						}
					}
					else{
						if (';' == ucDigit){
							ucValue[ucValueCount] = '\0';
							vCommStateMachineSetParam(ucParam, ucValue);
						}
						ucState = _IDDLE;
					}
					break;
				}
			}
			else{
		        if(ucDigit == '1')
				    vBleCmdMotorForward();
				else if (ucDigit == '4')
					vBleCmdMotorLeftward();
				else if (ucDigit == '3')
					vBleCmdMotorRightward();
				else if (ucDigit == '2')
					vBleCmdMotorBackward();
			}
		}
    }
//    HAL_UART_Receive_IT(pBluetoothControllerUART, &ucDigit, 1);
}


//	Function name	: 	vCommStateMachineReturnParam
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	Returns the parameter indicated by the ucParam variable
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucParam
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineReturnParam(unsigned char ucParam){
	unsigned char ucValue[MAX_VALUE_LENGTH];
	char * pMessage;
    switch (ucParam){
        case 'v': //temp
        	pMessage = pCommunicationFloatToString(fSpeed, 2);
        	vCommunicationSendString(pMessage);
//        	vCommStateMachineFloatToString(fSpeed, 5, ucValue);
            break;
        case 'a': //kp left
        	pMessage = pCommunicationFloatToString(fLeftMotorKp, 4);
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
            break;
        case 'b': //ki left
        	pMessage = pCommunicationFloatToString(fLeftMotorKi, 4);
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
            break;
        case 'c': //kp right
        	pMessage = pCommunicationFloatToString(fRightMotorKp, 4);
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
            break;
        case 'd': //ki left
        	pMessage = pCommunicationFloatToString(fRightMotorKi, 4);
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
            break;
        case 'e': //setpoint left
        	pMessage = pCommunicationFloatToString(fSetPoint_left, 2);
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
            break;
        case 'f': //setpoint right
        	pMessage = pCommunicationFloatToString(fSetPoint_right, 2);
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
            break;

    }
}
//	Function name	: 	vCommunicationStateMachineSetParam
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	set the parameter indicated by the ucParam by ucValue
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucParam
//		                ucValue
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineSetParam(unsigned char ucParam, unsigned char ucValue){
	float fValue;
    switch (ucParam){
        case 'a': //left kp
        	fLeftMotorKp = fCommStateMachineStringToFloat(&ucValue);
            break;
        case 'b': //left ki
        	fLeftMotorKi = fCommStateMachineStringToFloat(&ucValue);
            break;
        case 'c': //right kp
    		fRightMotorKp = fCommStateMachineStringToFloat(&ucValue);
        	break;
        case 'd': //left ki
        	fRightMotorKi=fCommStateMachineStringToFloat(&ucValue);
            break;
        case 'e': //set left
        	fValue = fCommStateMachineStringToFloat(&ucValue);
        	if (fValue >= 0 && fValue<= 700){
				fSetPoint_left=fValue;
        	}
            break;
        case 'f': //set right
        	fValue = fCommStateMachineStringToFloat(&ucValue);
        	if (fValue >= 0 && fValue<= 700){
				fSetPoint_right=fValue;
        	}
            break;
    }
}

//	Function name	: 	fCommunicationStateMachineStringToFloat
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	Turns Strings to float using atof functon and set a "." instead a ","
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	unsigned char * ucInputNumber
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//float fCommunicationStateMachineStringToFloat(unsigned char * ucValue){
float fCommStateMachineStringToFloat(){
	float fInputNumber=0;
	int iPos=0;
	while (iPos >= 0){
		if ('\0'!=ucValue[iPos]){
			if (ucValue[iPos] == ','){
				ucValue[iPos] = '.';
			}
			iPos++;
		}
		else{
			iPos = -1;
		}
	}
	fInputNumber = atof (ucValue);
	return fInputNumber;
}

//	Function name	: 	vCommunicationStateMachineFloatToString
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	Turns Float to Strings using atof functon and set a "." instead a ","
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	float fInputNumber
//		                int iDigits
//		                unsigned char * ucOutputNumber
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineFloatToString(float num, int nCasasDec, unsigned char * pOutputString){
		float fAux = num;
		// Utilizado na quantidade de casas que a string vai ter
		int iN = nCasasDec;
		int iPos = 0;
		// "mapping" para facilitar na adicao de char na string
		char pNumberToChar[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};

		// Limpa a string global
		for (int i = 0; i < 100; i++)
			pOutputString[i] = 0;

		// Caso float negativo, adiciona '-' na string
		if (fAux < 0) {
			fAux = fAux*-1;
			pOutputString[iPos] = '-';
			iPos++;
		}

		// Caso menor que 1, adiciona 0 na string
		if (fAux < 1) {
			pOutputString[iPos] = '0';
			iPos++;
		}

		// Move a virgula do numero ate que fique menor que 1
		while (fAux >= 1) {
			fAux = fAux/10;
			iN++;
		}

		// Enquanto ainda nao tiver preenchido o numero de casas desejadas
		while (iN > 0) {
			fAux = fAux*10;
			// Seleciona o numero da enesima posicao
			int iNumber = floor(fmod(fAux, 10));
			// Adiciona virgula na posicao correta
			if (iN == nCasasDec) {
				pOutputString[iPos] = ',';
				iPos++;
			}

			// Adiciona char igual ao numero, na string de retorno
			pOutputString[iPos] = pNumberToChar[iNumber];
			iPos++;
			iN--;
		}
	}


//
//	gcvt(fInputNumber, iDigits, ucOutputNumber);
//	ucOutputNumber[MAX_VALUE_LENGTH-1] = '\000';
//	int iPos =0;
//	while (iPos >= 0){
//			if ('\000'!=ucOutputNumber[iPos]){
//				if (ucOutputNumber[iPos] == '.'){
//					ucOutputNumber[iPos] = ',';
//					ucOutputNumber[iPos+4]= '\000';
//				}
//				iPos++;
//			}
//			else{
//				iPos = -1;
//			}
//	}
//}

//	Function name	: 	vCommunicationStateMachineSendMessage
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	Send message to putty from HAL_UART_Transmit
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	UART_HandleTypeDef * huart
//		                unsigned char* ucMessage
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineSendMessage (UART_HandleTypeDef * huart, unsigned char* ucMessage){
	if(huart == pBluetoothControllerUART){
		int iPos = 0;
		while(iPos >= 0 && iPos < _MAX_NUMBER_OF_CHARS){
			if(ucMessage[iPos] =='\000'){
				iPos = -1;
			}
			else if(ucMessage[iPos] =='\n'){
				HAL_UART_Transmit(huart, &ucMessage[iPos], 1, 100);
				iPos = -1;
			}
			else{
				HAL_UART_Transmit(huart, &ucMessage[iPos], 1, 100);
				iPos ++;
			}
		}
	}
}

//---------------------------------------------Weak Functions------------------------------------------//
