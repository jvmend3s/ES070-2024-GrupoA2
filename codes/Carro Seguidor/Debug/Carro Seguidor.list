
Carro Seguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f594  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800f778  0800f778  00010778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc20  0800fc20  0001120c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc20  0800fc20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc28  0800fc28  0001120c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc28  0800fc28  00010c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc2c  0800fc2c  00010c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800fc30  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc0  20000210  0800fe3c  00011210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000dd0  0800fe3c  00011dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001120c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d642  00000000  00000000  0001123c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040da  00000000  00000000  0002e87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00032958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001242  00000000  00000000  000340f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a2f0  00000000  00000000  00035332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020269  00000000  00000000  0005f622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102663  00000000  00000000  0007f88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181eee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007568  00000000  00000000  00181f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0018949c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f75c 	.word	0x0800f75c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	0800f75c 	.word	0x0800f75c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_frsub>:
 8000cd8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cdc:	e002      	b.n	8000ce4 <__addsf3>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fsub>:
 8000ce0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ce4 <__addsf3>:
 8000ce4:	0042      	lsls	r2, r0, #1
 8000ce6:	bf1f      	itttt	ne
 8000ce8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cec:	ea92 0f03 	teqne	r2, r3
 8000cf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf8:	d06a      	beq.n	8000dd0 <__addsf3+0xec>
 8000cfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d02:	bfc1      	itttt	gt
 8000d04:	18d2      	addgt	r2, r2, r3
 8000d06:	4041      	eorgt	r1, r0
 8000d08:	4048      	eorgt	r0, r1
 8000d0a:	4041      	eorgt	r1, r0
 8000d0c:	bfb8      	it	lt
 8000d0e:	425b      	neglt	r3, r3
 8000d10:	2b19      	cmp	r3, #25
 8000d12:	bf88      	it	hi
 8000d14:	4770      	bxhi	lr
 8000d16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4240      	negne	r0, r0
 8000d26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d32:	bf18      	it	ne
 8000d34:	4249      	negne	r1, r1
 8000d36:	ea92 0f03 	teq	r2, r3
 8000d3a:	d03f      	beq.n	8000dbc <__addsf3+0xd8>
 8000d3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d40:	fa41 fc03 	asr.w	ip, r1, r3
 8000d44:	eb10 000c 	adds.w	r0, r0, ip
 8000d48:	f1c3 0320 	rsb	r3, r3, #32
 8000d4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__addsf3+0x78>
 8000d56:	4249      	negs	r1, r1
 8000d58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d60:	d313      	bcc.n	8000d8a <__addsf3+0xa6>
 8000d62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d66:	d306      	bcc.n	8000d76 <__addsf3+0x92>
 8000d68:	0840      	lsrs	r0, r0, #1
 8000d6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d6e:	f102 0201 	add.w	r2, r2, #1
 8000d72:	2afe      	cmp	r2, #254	@ 0xfe
 8000d74:	d251      	bcs.n	8000e1a <__addsf3+0x136>
 8000d76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7e:	bf08      	it	eq
 8000d80:	f020 0001 	biceq.w	r0, r0, #1
 8000d84:	ea40 0003 	orr.w	r0, r0, r3
 8000d88:	4770      	bx	lr
 8000d8a:	0049      	lsls	r1, r1, #1
 8000d8c:	eb40 0000 	adc.w	r0, r0, r0
 8000d90:	3a01      	subs	r2, #1
 8000d92:	bf28      	it	cs
 8000d94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d98:	d2ed      	bcs.n	8000d76 <__addsf3+0x92>
 8000d9a:	fab0 fc80 	clz	ip, r0
 8000d9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000da2:	ebb2 020c 	subs.w	r2, r2, ip
 8000da6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000daa:	bfaa      	itet	ge
 8000dac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000db0:	4252      	neglt	r2, r2
 8000db2:	4318      	orrge	r0, r3
 8000db4:	bfbc      	itt	lt
 8000db6:	40d0      	lsrlt	r0, r2
 8000db8:	4318      	orrlt	r0, r3
 8000dba:	4770      	bx	lr
 8000dbc:	f092 0f00 	teq	r2, #0
 8000dc0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dc4:	bf06      	itte	eq
 8000dc6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dca:	3201      	addeq	r2, #1
 8000dcc:	3b01      	subne	r3, #1
 8000dce:	e7b5      	b.n	8000d3c <__addsf3+0x58>
 8000dd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	bf18      	it	ne
 8000dda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dde:	d021      	beq.n	8000e24 <__addsf3+0x140>
 8000de0:	ea92 0f03 	teq	r2, r3
 8000de4:	d004      	beq.n	8000df0 <__addsf3+0x10c>
 8000de6:	f092 0f00 	teq	r2, #0
 8000dea:	bf08      	it	eq
 8000dec:	4608      	moveq	r0, r1
 8000dee:	4770      	bx	lr
 8000df0:	ea90 0f01 	teq	r0, r1
 8000df4:	bf1c      	itt	ne
 8000df6:	2000      	movne	r0, #0
 8000df8:	4770      	bxne	lr
 8000dfa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dfe:	d104      	bne.n	8000e0a <__addsf3+0x126>
 8000e00:	0040      	lsls	r0, r0, #1
 8000e02:	bf28      	it	cs
 8000e04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e08:	4770      	bx	lr
 8000e0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e0e:	bf3c      	itt	cc
 8000e10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bxcc	lr
 8000e16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e22:	4770      	bx	lr
 8000e24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e28:	bf16      	itet	ne
 8000e2a:	4608      	movne	r0, r1
 8000e2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e30:	4601      	movne	r1, r0
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	bf06      	itte	eq
 8000e36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e3a:	ea90 0f01 	teqeq	r0, r1
 8000e3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_ui2f>:
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e004      	b.n	8000e54 <__aeabi_i2f+0x8>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_i2f>:
 8000e4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e50:	bf48      	it	mi
 8000e52:	4240      	negmi	r0, r0
 8000e54:	ea5f 0c00 	movs.w	ip, r0
 8000e58:	bf08      	it	eq
 8000e5a:	4770      	bxeq	lr
 8000e5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e60:	4601      	mov	r1, r0
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	e01c      	b.n	8000ea2 <__aeabi_l2f+0x2a>

08000e68 <__aeabi_ul2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	e00a      	b.n	8000e8c <__aeabi_l2f+0x14>
 8000e76:	bf00      	nop

08000e78 <__aeabi_l2f>:
 8000e78:	ea50 0201 	orrs.w	r2, r0, r1
 8000e7c:	bf08      	it	eq
 8000e7e:	4770      	bxeq	lr
 8000e80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e84:	d502      	bpl.n	8000e8c <__aeabi_l2f+0x14>
 8000e86:	4240      	negs	r0, r0
 8000e88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e8c:	ea5f 0c01 	movs.w	ip, r1
 8000e90:	bf02      	ittt	eq
 8000e92:	4684      	moveq	ip, r0
 8000e94:	4601      	moveq	r1, r0
 8000e96:	2000      	moveq	r0, #0
 8000e98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e9c:	bf08      	it	eq
 8000e9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ea2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ea6:	fabc f28c 	clz	r2, ip
 8000eaa:	3a08      	subs	r2, #8
 8000eac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000eb0:	db10      	blt.n	8000ed4 <__aeabi_l2f+0x5c>
 8000eb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ec4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f102 0220 	add.w	r2, r2, #32
 8000ed8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000edc:	f1c2 0220 	rsb	r2, r2, #32
 8000ee0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ee4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee8:	eb43 0002 	adc.w	r0, r3, r2
 8000eec:	bf08      	it	eq
 8000eee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ef2:	4770      	bx	lr

08000ef4 <__aeabi_uldivmod>:
 8000ef4:	b953      	cbnz	r3, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef6:	b94a      	cbnz	r2, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	bf08      	it	eq
 8000efc:	2800      	cmpeq	r0, #0
 8000efe:	bf1c      	itt	ne
 8000f00:	f04f 31ff 	movne.w	r1, #4294967295
 8000f04:	f04f 30ff 	movne.w	r0, #4294967295
 8000f08:	f000 b9a0 	b.w	800124c <__aeabi_idiv0>
 8000f0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f14:	f000 f83c 	bl	8000f90 <__udivmoddi4>
 8000f18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_d2lz>:
 8000f24:	b538      	push	{r3, r4, r5, lr}
 8000f26:	2200      	movs	r2, #0
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	460d      	mov	r5, r1
 8000f2e:	f7ff fdfd 	bl	8000b2c <__aeabi_dcmplt>
 8000f32:	b928      	cbnz	r0, 8000f40 <__aeabi_d2lz+0x1c>
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f3c:	f000 b80a 	b.w	8000f54 <__aeabi_d2ulz>
 8000f40:	4620      	mov	r0, r4
 8000f42:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f46:	f000 f805 	bl	8000f54 <__aeabi_d2ulz>
 8000f4a:	4240      	negs	r0, r0
 8000f4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f50:	bd38      	pop	{r3, r4, r5, pc}
 8000f52:	bf00      	nop

08000f54 <__aeabi_d2ulz>:
 8000f54:	b5d0      	push	{r4, r6, r7, lr}
 8000f56:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <__aeabi_d2ulz+0x34>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4606      	mov	r6, r0
 8000f5c:	460f      	mov	r7, r1
 8000f5e:	f7ff fb73 	bl	8000648 <__aeabi_dmul>
 8000f62:	f7ff fe49 	bl	8000bf8 <__aeabi_d2uiz>
 8000f66:	4604      	mov	r4, r0
 8000f68:	f7ff faf4 	bl	8000554 <__aeabi_ui2d>
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <__aeabi_d2ulz+0x38>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f7ff fb6a 	bl	8000648 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4630      	mov	r0, r6
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	f7ff f9ac 	bl	80002d8 <__aeabi_dsub>
 8000f80:	f7ff fe3a 	bl	8000bf8 <__aeabi_d2uiz>
 8000f84:	4621      	mov	r1, r4
 8000f86:	bdd0      	pop	{r4, r6, r7, pc}
 8000f88:	3df00000 	.word	0x3df00000
 8000f8c:	41f00000 	.word	0x41f00000

08000f90 <__udivmoddi4>:
 8000f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f94:	9d08      	ldr	r5, [sp, #32]
 8000f96:	460c      	mov	r4, r1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d14e      	bne.n	800103a <__udivmoddi4+0xaa>
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	458c      	cmp	ip, r1
 8000fa0:	4686      	mov	lr, r0
 8000fa2:	fab2 f282 	clz	r2, r2
 8000fa6:	d962      	bls.n	800106e <__udivmoddi4+0xde>
 8000fa8:	b14a      	cbz	r2, 8000fbe <__udivmoddi4+0x2e>
 8000faa:	f1c2 0320 	rsb	r3, r2, #32
 8000fae:	4091      	lsls	r1, r2
 8000fb0:	fa20 f303 	lsr.w	r3, r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	4319      	orrs	r1, r3
 8000fba:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc2:	fa1f f68c 	uxth.w	r6, ip
 8000fc6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	d90a      	bls.n	8000ff4 <__udivmoddi4+0x64>
 8000fde:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fe6:	f080 8112 	bcs.w	800120e <__udivmoddi4+0x27e>
 8000fea:	4299      	cmp	r1, r3
 8000fec:	f240 810f 	bls.w	800120e <__udivmoddi4+0x27e>
 8000ff0:	3c02      	subs	r4, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1a59      	subs	r1, r3, r1
 8000ff6:	fa1f f38e 	uxth.w	r3, lr
 8000ffa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ffe:	fb07 1110 	mls	r1, r7, r0, r1
 8001002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001006:	fb00 f606 	mul.w	r6, r0, r6
 800100a:	429e      	cmp	r6, r3
 800100c:	d90a      	bls.n	8001024 <__udivmoddi4+0x94>
 800100e:	eb1c 0303 	adds.w	r3, ip, r3
 8001012:	f100 31ff 	add.w	r1, r0, #4294967295
 8001016:	f080 80fc 	bcs.w	8001212 <__udivmoddi4+0x282>
 800101a:	429e      	cmp	r6, r3
 800101c:	f240 80f9 	bls.w	8001212 <__udivmoddi4+0x282>
 8001020:	4463      	add	r3, ip
 8001022:	3802      	subs	r0, #2
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800102a:	2100      	movs	r1, #0
 800102c:	b11d      	cbz	r5, 8001036 <__udivmoddi4+0xa6>
 800102e:	40d3      	lsrs	r3, r2
 8001030:	2200      	movs	r2, #0
 8001032:	e9c5 3200 	strd	r3, r2, [r5]
 8001036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103a:	428b      	cmp	r3, r1
 800103c:	d905      	bls.n	800104a <__udivmoddi4+0xba>
 800103e:	b10d      	cbz	r5, 8001044 <__udivmoddi4+0xb4>
 8001040:	e9c5 0100 	strd	r0, r1, [r5]
 8001044:	2100      	movs	r1, #0
 8001046:	4608      	mov	r0, r1
 8001048:	e7f5      	b.n	8001036 <__udivmoddi4+0xa6>
 800104a:	fab3 f183 	clz	r1, r3
 800104e:	2900      	cmp	r1, #0
 8001050:	d146      	bne.n	80010e0 <__udivmoddi4+0x150>
 8001052:	42a3      	cmp	r3, r4
 8001054:	d302      	bcc.n	800105c <__udivmoddi4+0xcc>
 8001056:	4290      	cmp	r0, r2
 8001058:	f0c0 80f0 	bcc.w	800123c <__udivmoddi4+0x2ac>
 800105c:	1a86      	subs	r6, r0, r2
 800105e:	eb64 0303 	sbc.w	r3, r4, r3
 8001062:	2001      	movs	r0, #1
 8001064:	2d00      	cmp	r5, #0
 8001066:	d0e6      	beq.n	8001036 <__udivmoddi4+0xa6>
 8001068:	e9c5 6300 	strd	r6, r3, [r5]
 800106c:	e7e3      	b.n	8001036 <__udivmoddi4+0xa6>
 800106e:	2a00      	cmp	r2, #0
 8001070:	f040 8090 	bne.w	8001194 <__udivmoddi4+0x204>
 8001074:	eba1 040c 	sub.w	r4, r1, ip
 8001078:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800107c:	fa1f f78c 	uxth.w	r7, ip
 8001080:	2101      	movs	r1, #1
 8001082:	fbb4 f6f8 	udiv	r6, r4, r8
 8001086:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800108a:	fb08 4416 	mls	r4, r8, r6, r4
 800108e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001092:	fb07 f006 	mul.w	r0, r7, r6
 8001096:	4298      	cmp	r0, r3
 8001098:	d908      	bls.n	80010ac <__udivmoddi4+0x11c>
 800109a:	eb1c 0303 	adds.w	r3, ip, r3
 800109e:	f106 34ff 	add.w	r4, r6, #4294967295
 80010a2:	d202      	bcs.n	80010aa <__udivmoddi4+0x11a>
 80010a4:	4298      	cmp	r0, r3
 80010a6:	f200 80cd 	bhi.w	8001244 <__udivmoddi4+0x2b4>
 80010aa:	4626      	mov	r6, r4
 80010ac:	1a1c      	subs	r4, r3, r0
 80010ae:	fa1f f38e 	uxth.w	r3, lr
 80010b2:	fbb4 f0f8 	udiv	r0, r4, r8
 80010b6:	fb08 4410 	mls	r4, r8, r0, r4
 80010ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010be:	fb00 f707 	mul.w	r7, r0, r7
 80010c2:	429f      	cmp	r7, r3
 80010c4:	d908      	bls.n	80010d8 <__udivmoddi4+0x148>
 80010c6:	eb1c 0303 	adds.w	r3, ip, r3
 80010ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80010ce:	d202      	bcs.n	80010d6 <__udivmoddi4+0x146>
 80010d0:	429f      	cmp	r7, r3
 80010d2:	f200 80b0 	bhi.w	8001236 <__udivmoddi4+0x2a6>
 80010d6:	4620      	mov	r0, r4
 80010d8:	1bdb      	subs	r3, r3, r7
 80010da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010de:	e7a5      	b.n	800102c <__udivmoddi4+0x9c>
 80010e0:	f1c1 0620 	rsb	r6, r1, #32
 80010e4:	408b      	lsls	r3, r1
 80010e6:	fa22 f706 	lsr.w	r7, r2, r6
 80010ea:	431f      	orrs	r7, r3
 80010ec:	fa20 fc06 	lsr.w	ip, r0, r6
 80010f0:	fa04 f301 	lsl.w	r3, r4, r1
 80010f4:	ea43 030c 	orr.w	r3, r3, ip
 80010f8:	40f4      	lsrs	r4, r6
 80010fa:	fa00 f801 	lsl.w	r8, r0, r1
 80010fe:	0c38      	lsrs	r0, r7, #16
 8001100:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001104:	fbb4 fef0 	udiv	lr, r4, r0
 8001108:	fa1f fc87 	uxth.w	ip, r7
 800110c:	fb00 441e 	mls	r4, r0, lr, r4
 8001110:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001114:	fb0e f90c 	mul.w	r9, lr, ip
 8001118:	45a1      	cmp	r9, r4
 800111a:	fa02 f201 	lsl.w	r2, r2, r1
 800111e:	d90a      	bls.n	8001136 <__udivmoddi4+0x1a6>
 8001120:	193c      	adds	r4, r7, r4
 8001122:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001126:	f080 8084 	bcs.w	8001232 <__udivmoddi4+0x2a2>
 800112a:	45a1      	cmp	r9, r4
 800112c:	f240 8081 	bls.w	8001232 <__udivmoddi4+0x2a2>
 8001130:	f1ae 0e02 	sub.w	lr, lr, #2
 8001134:	443c      	add	r4, r7
 8001136:	eba4 0409 	sub.w	r4, r4, r9
 800113a:	fa1f f983 	uxth.w	r9, r3
 800113e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001142:	fb00 4413 	mls	r4, r0, r3, r4
 8001146:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800114a:	fb03 fc0c 	mul.w	ip, r3, ip
 800114e:	45a4      	cmp	ip, r4
 8001150:	d907      	bls.n	8001162 <__udivmoddi4+0x1d2>
 8001152:	193c      	adds	r4, r7, r4
 8001154:	f103 30ff 	add.w	r0, r3, #4294967295
 8001158:	d267      	bcs.n	800122a <__udivmoddi4+0x29a>
 800115a:	45a4      	cmp	ip, r4
 800115c:	d965      	bls.n	800122a <__udivmoddi4+0x29a>
 800115e:	3b02      	subs	r3, #2
 8001160:	443c      	add	r4, r7
 8001162:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001166:	fba0 9302 	umull	r9, r3, r0, r2
 800116a:	eba4 040c 	sub.w	r4, r4, ip
 800116e:	429c      	cmp	r4, r3
 8001170:	46ce      	mov	lr, r9
 8001172:	469c      	mov	ip, r3
 8001174:	d351      	bcc.n	800121a <__udivmoddi4+0x28a>
 8001176:	d04e      	beq.n	8001216 <__udivmoddi4+0x286>
 8001178:	b155      	cbz	r5, 8001190 <__udivmoddi4+0x200>
 800117a:	ebb8 030e 	subs.w	r3, r8, lr
 800117e:	eb64 040c 	sbc.w	r4, r4, ip
 8001182:	fa04 f606 	lsl.w	r6, r4, r6
 8001186:	40cb      	lsrs	r3, r1
 8001188:	431e      	orrs	r6, r3
 800118a:	40cc      	lsrs	r4, r1
 800118c:	e9c5 6400 	strd	r6, r4, [r5]
 8001190:	2100      	movs	r1, #0
 8001192:	e750      	b.n	8001036 <__udivmoddi4+0xa6>
 8001194:	f1c2 0320 	rsb	r3, r2, #32
 8001198:	fa20 f103 	lsr.w	r1, r0, r3
 800119c:	fa0c fc02 	lsl.w	ip, ip, r2
 80011a0:	fa24 f303 	lsr.w	r3, r4, r3
 80011a4:	4094      	lsls	r4, r2
 80011a6:	430c      	orrs	r4, r1
 80011a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80011b0:	fa1f f78c 	uxth.w	r7, ip
 80011b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80011b8:	fb08 3110 	mls	r1, r8, r0, r3
 80011bc:	0c23      	lsrs	r3, r4, #16
 80011be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011c2:	fb00 f107 	mul.w	r1, r0, r7
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d908      	bls.n	80011dc <__udivmoddi4+0x24c>
 80011ca:	eb1c 0303 	adds.w	r3, ip, r3
 80011ce:	f100 36ff 	add.w	r6, r0, #4294967295
 80011d2:	d22c      	bcs.n	800122e <__udivmoddi4+0x29e>
 80011d4:	4299      	cmp	r1, r3
 80011d6:	d92a      	bls.n	800122e <__udivmoddi4+0x29e>
 80011d8:	3802      	subs	r0, #2
 80011da:	4463      	add	r3, ip
 80011dc:	1a5b      	subs	r3, r3, r1
 80011de:	b2a4      	uxth	r4, r4
 80011e0:	fbb3 f1f8 	udiv	r1, r3, r8
 80011e4:	fb08 3311 	mls	r3, r8, r1, r3
 80011e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011ec:	fb01 f307 	mul.w	r3, r1, r7
 80011f0:	42a3      	cmp	r3, r4
 80011f2:	d908      	bls.n	8001206 <__udivmoddi4+0x276>
 80011f4:	eb1c 0404 	adds.w	r4, ip, r4
 80011f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80011fc:	d213      	bcs.n	8001226 <__udivmoddi4+0x296>
 80011fe:	42a3      	cmp	r3, r4
 8001200:	d911      	bls.n	8001226 <__udivmoddi4+0x296>
 8001202:	3902      	subs	r1, #2
 8001204:	4464      	add	r4, ip
 8001206:	1ae4      	subs	r4, r4, r3
 8001208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800120c:	e739      	b.n	8001082 <__udivmoddi4+0xf2>
 800120e:	4604      	mov	r4, r0
 8001210:	e6f0      	b.n	8000ff4 <__udivmoddi4+0x64>
 8001212:	4608      	mov	r0, r1
 8001214:	e706      	b.n	8001024 <__udivmoddi4+0x94>
 8001216:	45c8      	cmp	r8, r9
 8001218:	d2ae      	bcs.n	8001178 <__udivmoddi4+0x1e8>
 800121a:	ebb9 0e02 	subs.w	lr, r9, r2
 800121e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001222:	3801      	subs	r0, #1
 8001224:	e7a8      	b.n	8001178 <__udivmoddi4+0x1e8>
 8001226:	4631      	mov	r1, r6
 8001228:	e7ed      	b.n	8001206 <__udivmoddi4+0x276>
 800122a:	4603      	mov	r3, r0
 800122c:	e799      	b.n	8001162 <__udivmoddi4+0x1d2>
 800122e:	4630      	mov	r0, r6
 8001230:	e7d4      	b.n	80011dc <__udivmoddi4+0x24c>
 8001232:	46d6      	mov	lr, sl
 8001234:	e77f      	b.n	8001136 <__udivmoddi4+0x1a6>
 8001236:	4463      	add	r3, ip
 8001238:	3802      	subs	r0, #2
 800123a:	e74d      	b.n	80010d8 <__udivmoddi4+0x148>
 800123c:	4606      	mov	r6, r0
 800123e:	4623      	mov	r3, r4
 8001240:	4608      	mov	r0, r1
 8001242:	e70f      	b.n	8001064 <__udivmoddi4+0xd4>
 8001244:	3e02      	subs	r6, #2
 8001246:	4463      	add	r3, ip
 8001248:	e730      	b.n	80010ac <__udivmoddi4+0x11c>
 800124a:	bf00      	nop

0800124c <__aeabi_idiv0>:
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <vBleCmdMotorForward>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	This function command the robot to go forward								   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vBleCmdMotorForward(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	fSetPoint_left = 300;
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <vBleCmdMotorForward+0x34>)
 8001256:	4a0c      	ldr	r2, [pc, #48]	@ (8001288 <vBleCmdMotorForward+0x38>)
 8001258:	601a      	str	r2, [r3, #0]
	fSetPoint_right = 300;
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <vBleCmdMotorForward+0x3c>)
 800125c:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <vBleCmdMotorForward+0x38>)
 800125e:	601a      	str	r2, [r3, #0]
	vMotorsSetPWMTimer(left, 0.8, 1, 1000);
 8001260:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001264:	2101      	movs	r1, #1
 8001266:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001290 <vBleCmdMotorForward+0x40>
 800126a:	2000      	movs	r0, #0
 800126c:	f001 ff08 	bl	8003080 <vMotorsSetPWMTimer>
	vMotorsSetPWMTimer(right, 0.8, 1, 1000);
 8001270:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001274:	2101      	movs	r1, #1
 8001276:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001290 <vBleCmdMotorForward+0x40>
 800127a:	2001      	movs	r0, #1
 800127c:	f001 ff00 	bl	8003080 <vMotorsSetPWMTimer>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000079c 	.word	0x2000079c
 8001288:	43960000 	.word	0x43960000
 800128c:	200007a0 	.word	0x200007a0
 8001290:	3f4ccccd 	.word	0x3f4ccccd

08001294 <vBleCmdMotorLeftward>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	This function command the robot to go leftward								   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vBleCmdMotorLeftward(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	fSetPoint_left = 200;
 8001298:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <vBleCmdMotorLeftward+0x34>)
 800129a:	4a0c      	ldr	r2, [pc, #48]	@ (80012cc <vBleCmdMotorLeftward+0x38>)
 800129c:	601a      	str	r2, [r3, #0]
	fSetPoint_right = 450;
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <vBleCmdMotorLeftward+0x3c>)
 80012a0:	4a0c      	ldr	r2, [pc, #48]	@ (80012d4 <vBleCmdMotorLeftward+0x40>)
 80012a2:	601a      	str	r2, [r3, #0]
	vMotorsSetPWMTimer(left, 0.5, 1, 1000);
 80012a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012a8:	2101      	movs	r1, #1
 80012aa:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80012ae:	2000      	movs	r0, #0
 80012b0:	f001 fee6 	bl	8003080 <vMotorsSetPWMTimer>
	vMotorsSetPWMTimer(right, 0.8, 1, 1000);
 80012b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012b8:	2101      	movs	r1, #1
 80012ba:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80012d8 <vBleCmdMotorLeftward+0x44>
 80012be:	2001      	movs	r0, #1
 80012c0:	f001 fede 	bl	8003080 <vMotorsSetPWMTimer>
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000079c 	.word	0x2000079c
 80012cc:	43480000 	.word	0x43480000
 80012d0:	200007a0 	.word	0x200007a0
 80012d4:	43e10000 	.word	0x43e10000
 80012d8:	3f4ccccd 	.word	0x3f4ccccd

080012dc <vBleCmdMotorRightward>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	This function command the robot to go rightward								   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vBleCmdMotorRightward(){
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	fSetPoint_left = 450;
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <vBleCmdMotorRightward+0x34>)
 80012e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001314 <vBleCmdMotorRightward+0x38>)
 80012e4:	601a      	str	r2, [r3, #0]
	fSetPoint_right = 200;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <vBleCmdMotorRightward+0x3c>)
 80012e8:	4a0c      	ldr	r2, [pc, #48]	@ (800131c <vBleCmdMotorRightward+0x40>)
 80012ea:	601a      	str	r2, [r3, #0]
	vMotorsSetPWMTimer(left, 0.8, 1, 1000);
 80012ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012f0:	2101      	movs	r1, #1
 80012f2:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001320 <vBleCmdMotorRightward+0x44>
 80012f6:	2000      	movs	r0, #0
 80012f8:	f001 fec2 	bl	8003080 <vMotorsSetPWMTimer>
	vMotorsSetPWMTimer(right, 0.5, 1, 1000);
 80012fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001300:	2101      	movs	r1, #1
 8001302:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001306:	2001      	movs	r0, #1
 8001308:	f001 feba 	bl	8003080 <vMotorsSetPWMTimer>
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2000079c 	.word	0x2000079c
 8001314:	43e10000 	.word	0x43e10000
 8001318:	200007a0 	.word	0x200007a0
 800131c:	43480000 	.word	0x43480000
 8001320:	3f4ccccd 	.word	0x3f4ccccd

08001324 <vBleCmdMotorBackward>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	This function command the robot to go backward								   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vBleCmdMotorBackward(){
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	fSetPoint_left = -300;
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <vBleCmdMotorBackward+0x34>)
 800132a:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <vBleCmdMotorBackward+0x38>)
 800132c:	601a      	str	r2, [r3, #0]
	fSetPoint_right = -300;
 800132e:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <vBleCmdMotorBackward+0x3c>)
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <vBleCmdMotorBackward+0x38>)
 8001332:	601a      	str	r2, [r3, #0]
	vMotorsSetPWMTimer(left, 0.8, 0, 1000);
 8001334:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001338:	2100      	movs	r1, #0
 800133a:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001364 <vBleCmdMotorBackward+0x40>
 800133e:	2000      	movs	r0, #0
 8001340:	f001 fe9e 	bl	8003080 <vMotorsSetPWMTimer>
	vMotorsSetPWMTimer(right, 0.8, 0, 1000);
 8001344:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001348:	2100      	movs	r1, #0
 800134a:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001364 <vBleCmdMotorBackward+0x40>
 800134e:	2001      	movs	r0, #1
 8001350:	f001 fe96 	bl	8003080 <vMotorsSetPWMTimer>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000079c 	.word	0x2000079c
 800135c:	c3960000 	.word	0xc3960000
 8001360:	200007a0 	.word	0x200007a0
 8001364:	3f4ccccd 	.word	0x3f4ccccd

08001368 <vCommStateMachineInit>:
UART_HandleTypeDef *pV2VUART;

//-----------------------------------------------Functions---------------------------------------------//


void vCommStateMachineInit(UART_HandleTypeDef *huartcontrol, UART_HandleTypeDef *huartV2V){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
	pBluetoothControllerUART = huartcontrol;
 8001372:	4a0c      	ldr	r2, [pc, #48]	@ (80013a4 <vCommStateMachineInit+0x3c>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6013      	str	r3, [r2, #0]
	pV2VUART =huartV2V;
 8001378:	4a0b      	ldr	r2, [pc, #44]	@ (80013a8 <vCommStateMachineInit+0x40>)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(pBluetoothControllerUART, &ucDigit, 1);
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <vCommStateMachineInit+0x3c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2201      	movs	r2, #1
 8001384:	4909      	ldr	r1, [pc, #36]	@ (80013ac <vCommStateMachineInit+0x44>)
 8001386:	4618      	mov	r0, r3
 8001388:	f008 fffe 	bl	800a388 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(pV2VUART, &ucDigit, 1);
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <vCommStateMachineInit+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2201      	movs	r2, #1
 8001392:	4906      	ldr	r1, [pc, #24]	@ (80013ac <vCommStateMachineInit+0x44>)
 8001394:	4618      	mov	r0, r3
 8001396:	f008 fff7 	bl	800a388 <HAL_UART_Receive_IT>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000238 	.word	0x20000238
 80013a8:	2000023c 	.word	0x2000023c
 80013ac:	20000237 	.word	0x20000237

080013b0 <HAL_UART_RxCpltCallback>:
//	 Description	:	Makes the treatment when recieve one byte from the uart, making a
//		                state machine to pass trought any input
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucByte
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    static unsigned char ucParam;

    if (huart == pBluetoothControllerUART || huart == pV2VUART){
 80013b8:	4b86      	ldr	r3, [pc, #536]	@ (80015d4 <HAL_UART_RxCpltCallback+0x224>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d005      	beq.n	80013ce <HAL_UART_RxCpltCallback+0x1e>
 80013c2:	4b85      	ldr	r3, [pc, #532]	@ (80015d8 <HAL_UART_RxCpltCallback+0x228>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f040 8162 	bne.w	8001692 <HAL_UART_RxCpltCallback+0x2e2>
        HAL_UART_Receive_IT(huart, &ucDigit, 1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	4982      	ldr	r1, [pc, #520]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f008 ffd8 	bl	800a388 <HAL_UART_Receive_IT>

        if('#' == ucDigit){
 80013d8:	4b80      	ldr	r3, [pc, #512]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b23      	cmp	r3, #35	@ 0x23
 80013de:	d103      	bne.n	80013e8 <HAL_UART_RxCpltCallback+0x38>
            ucState = _CAR;
 80013e0:	4b7f      	ldr	r3, [pc, #508]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 80013e2:	2232      	movs	r2, #50	@ 0x32
 80013e4:	701a      	strb	r2, [r3, #0]
					vBleCmdMotorBackward();
			}
		}
    }
//    HAL_UART_Receive_IT(pBluetoothControllerUART, &ucDigit, 1);
}
 80013e6:	e154      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
			if (ucState != _IDDLE){
 80013e8:	4b7d      	ldr	r3, [pc, #500]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b30      	cmp	r3, #48	@ 0x30
 80013ee:	f000 8134 	beq.w	800165a <HAL_UART_RxCpltCallback+0x2aa>
				switch (ucState){
 80013f2:	4b7b      	ldr	r3, [pc, #492]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	3b31      	subs	r3, #49	@ 0x31
 80013f8:	2b06      	cmp	r3, #6
 80013fa:	f200 814a 	bhi.w	8001692 <HAL_UART_RxCpltCallback+0x2e2>
 80013fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001404 <HAL_UART_RxCpltCallback+0x54>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	08001455 	.word	0x08001455
 8001408:	08001421 	.word	0x08001421
 800140c:	0800147d 	.word	0x0800147d
 8001410:	080014dd 	.word	0x080014dd
 8001414:	08001543 	.word	0x08001543
 8001418:	08001573 	.word	0x08001573
 800141c:	080015f9 	.word	0x080015f9
					switch (ucDigit){
 8001420:	4b6e      	ldr	r3, [pc, #440]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b31      	cmp	r3, #49	@ 0x31
 8001426:	d002      	beq.n	800142e <HAL_UART_RxCpltCallback+0x7e>
 8001428:	2b32      	cmp	r3, #50	@ 0x32
 800142a:	d007      	beq.n	800143c <HAL_UART_RxCpltCallback+0x8c>
 800142c:	e00d      	b.n	800144a <HAL_UART_RxCpltCallback+0x9a>
						cCar = 0; //lider
 800142e:	4b6d      	ldr	r3, [pc, #436]	@ (80015e4 <HAL_UART_RxCpltCallback+0x234>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
						ucState = _READY;
 8001434:	4b6a      	ldr	r3, [pc, #424]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 8001436:	2231      	movs	r2, #49	@ 0x31
 8001438:	701a      	strb	r2, [r3, #0]
						break;
 800143a:	e00a      	b.n	8001452 <HAL_UART_RxCpltCallback+0xa2>
						cCar = 1; //seguidor
 800143c:	4b69      	ldr	r3, [pc, #420]	@ (80015e4 <HAL_UART_RxCpltCallback+0x234>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
						ucState = _READY;
 8001442:	4b67      	ldr	r3, [pc, #412]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 8001444:	2231      	movs	r2, #49	@ 0x31
 8001446:	701a      	strb	r2, [r3, #0]
						break;
 8001448:	e003      	b.n	8001452 <HAL_UART_RxCpltCallback+0xa2>
						ucState = _IDDLE;
 800144a:	4b65      	ldr	r3, [pc, #404]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 800144c:	2230      	movs	r2, #48	@ 0x30
 800144e:	701a      	strb	r2, [r3, #0]
					break;
 8001450:	e11f      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
 8001452:	e11e      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
					switch (ucDigit){
 8001454:	4b61      	ldr	r3, [pc, #388]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b67      	cmp	r3, #103	@ 0x67
 800145a:	d002      	beq.n	8001462 <HAL_UART_RxCpltCallback+0xb2>
 800145c:	2b73      	cmp	r3, #115	@ 0x73
 800145e:	d004      	beq.n	800146a <HAL_UART_RxCpltCallback+0xba>
 8001460:	e007      	b.n	8001472 <HAL_UART_RxCpltCallback+0xc2>
						ucState = _GET;
 8001462:	4b5f      	ldr	r3, [pc, #380]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 8001464:	2233      	movs	r2, #51	@ 0x33
 8001466:	701a      	strb	r2, [r3, #0]
						break;
 8001468:	e007      	b.n	800147a <HAL_UART_RxCpltCallback+0xca>
						ucState = _SET;
 800146a:	4b5d      	ldr	r3, [pc, #372]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 800146c:	2234      	movs	r2, #52	@ 0x34
 800146e:	701a      	strb	r2, [r3, #0]
						break;
 8001470:	e003      	b.n	800147a <HAL_UART_RxCpltCallback+0xca>
						ucState = _IDDLE;
 8001472:	4b5b      	ldr	r3, [pc, #364]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 8001474:	2230      	movs	r2, #48	@ 0x30
 8001476:	701a      	strb	r2, [r3, #0]
					break;
 8001478:	e10b      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
 800147a:	e10a      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
					if ('v' == ucDigit || 'a' == ucDigit || 'b' == ucDigit || 'c' == ucDigit || 'd' == ucDigit || 'e' == ucDigit || 'f' == ucDigit|| 'l' == ucDigit || 'r' == ucDigit){
 800147c:	4b57      	ldr	r3, [pc, #348]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b76      	cmp	r3, #118	@ 0x76
 8001482:	d01f      	beq.n	80014c4 <HAL_UART_RxCpltCallback+0x114>
 8001484:	4b55      	ldr	r3, [pc, #340]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b61      	cmp	r3, #97	@ 0x61
 800148a:	d01b      	beq.n	80014c4 <HAL_UART_RxCpltCallback+0x114>
 800148c:	4b53      	ldr	r3, [pc, #332]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b62      	cmp	r3, #98	@ 0x62
 8001492:	d017      	beq.n	80014c4 <HAL_UART_RxCpltCallback+0x114>
 8001494:	4b51      	ldr	r3, [pc, #324]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b63      	cmp	r3, #99	@ 0x63
 800149a:	d013      	beq.n	80014c4 <HAL_UART_RxCpltCallback+0x114>
 800149c:	4b4f      	ldr	r3, [pc, #316]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b64      	cmp	r3, #100	@ 0x64
 80014a2:	d00f      	beq.n	80014c4 <HAL_UART_RxCpltCallback+0x114>
 80014a4:	4b4d      	ldr	r3, [pc, #308]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b65      	cmp	r3, #101	@ 0x65
 80014aa:	d00b      	beq.n	80014c4 <HAL_UART_RxCpltCallback+0x114>
 80014ac:	4b4b      	ldr	r3, [pc, #300]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b66      	cmp	r3, #102	@ 0x66
 80014b2:	d007      	beq.n	80014c4 <HAL_UART_RxCpltCallback+0x114>
 80014b4:	4b49      	ldr	r3, [pc, #292]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b6c      	cmp	r3, #108	@ 0x6c
 80014ba:	d003      	beq.n	80014c4 <HAL_UART_RxCpltCallback+0x114>
 80014bc:	4b47      	ldr	r3, [pc, #284]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b72      	cmp	r3, #114	@ 0x72
 80014c2:	d107      	bne.n	80014d4 <HAL_UART_RxCpltCallback+0x124>
					ucParam = ucDigit;
 80014c4:	4b45      	ldr	r3, [pc, #276]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	4b47      	ldr	r3, [pc, #284]	@ (80015e8 <HAL_UART_RxCpltCallback+0x238>)
 80014ca:	701a      	strb	r2, [r3, #0]
					ucState = _PARAM;
 80014cc:	4b44      	ldr	r3, [pc, #272]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 80014ce:	2235      	movs	r2, #53	@ 0x35
 80014d0:	701a      	strb	r2, [r3, #0]
					break;
 80014d2:	e0de      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
					ucState = _IDDLE;
 80014d4:	4b42      	ldr	r3, [pc, #264]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 80014d6:	2230      	movs	r2, #48	@ 0x30
 80014d8:	701a      	strb	r2, [r3, #0]
					break;
 80014da:	e0da      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
					if ('v' == ucDigit || 'a' == ucDigit || 'b' == ucDigit || 'c' == ucDigit || 'd' == ucDigit || 'e' == ucDigit || 'f' == ucDigit || 'l' == ucDigit || 'r' == ucDigit){
 80014dc:	4b3f      	ldr	r3, [pc, #252]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b76      	cmp	r3, #118	@ 0x76
 80014e2:	d01f      	beq.n	8001524 <HAL_UART_RxCpltCallback+0x174>
 80014e4:	4b3d      	ldr	r3, [pc, #244]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b61      	cmp	r3, #97	@ 0x61
 80014ea:	d01b      	beq.n	8001524 <HAL_UART_RxCpltCallback+0x174>
 80014ec:	4b3b      	ldr	r3, [pc, #236]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b62      	cmp	r3, #98	@ 0x62
 80014f2:	d017      	beq.n	8001524 <HAL_UART_RxCpltCallback+0x174>
 80014f4:	4b39      	ldr	r3, [pc, #228]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b63      	cmp	r3, #99	@ 0x63
 80014fa:	d013      	beq.n	8001524 <HAL_UART_RxCpltCallback+0x174>
 80014fc:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b64      	cmp	r3, #100	@ 0x64
 8001502:	d00f      	beq.n	8001524 <HAL_UART_RxCpltCallback+0x174>
 8001504:	4b35      	ldr	r3, [pc, #212]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b65      	cmp	r3, #101	@ 0x65
 800150a:	d00b      	beq.n	8001524 <HAL_UART_RxCpltCallback+0x174>
 800150c:	4b33      	ldr	r3, [pc, #204]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b66      	cmp	r3, #102	@ 0x66
 8001512:	d007      	beq.n	8001524 <HAL_UART_RxCpltCallback+0x174>
 8001514:	4b31      	ldr	r3, [pc, #196]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b6c      	cmp	r3, #108	@ 0x6c
 800151a:	d003      	beq.n	8001524 <HAL_UART_RxCpltCallback+0x174>
 800151c:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b72      	cmp	r3, #114	@ 0x72
 8001522:	d10a      	bne.n	800153a <HAL_UART_RxCpltCallback+0x18a>
					ucParam = ucDigit;
 8001524:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	4b2f      	ldr	r3, [pc, #188]	@ (80015e8 <HAL_UART_RxCpltCallback+0x238>)
 800152a:	701a      	strb	r2, [r3, #0]
					ucValueCount = 0;
 800152c:	4b2f      	ldr	r3, [pc, #188]	@ (80015ec <HAL_UART_RxCpltCallback+0x23c>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
					ucState = _VALUE;
 8001532:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 8001534:	2236      	movs	r2, #54	@ 0x36
 8001536:	701a      	strb	r2, [r3, #0]
					break;
 8001538:	e0ab      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
					ucState = _IDDLE;
 800153a:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 800153c:	2230      	movs	r2, #48	@ 0x30
 800153e:	701a      	strb	r2, [r3, #0]
					break;
 8001540:	e0a7      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
					if (';' == ucDigit){
 8001542:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b3b      	cmp	r3, #59	@ 0x3b
 8001548:	d104      	bne.n	8001554 <HAL_UART_RxCpltCallback+0x1a4>
						vCommStateMachineReturnParam(ucParam);
 800154a:	4b27      	ldr	r3, [pc, #156]	@ (80015e8 <HAL_UART_RxCpltCallback+0x238>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f8ae 	bl	80016b0 <vCommStateMachineReturnParam>
					if(cWaitAnwser){
 8001554:	4b26      	ldr	r3, [pc, #152]	@ (80015f0 <HAL_UART_RxCpltCallback+0x240>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_UART_RxCpltCallback+0x1ba>
						ucState = _WAIT_VALUE;
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 800155e:	2237      	movs	r2, #55	@ 0x37
 8001560:	701a      	strb	r2, [r3, #0]
						ucValueCount = 0;
 8001562:	4b22      	ldr	r3, [pc, #136]	@ (80015ec <HAL_UART_RxCpltCallback+0x23c>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
					break;
 8001568:	e093      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
						ucState = _IDDLE;
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 800156c:	2230      	movs	r2, #48	@ 0x30
 800156e:	701a      	strb	r2, [r3, #0]
					break;
 8001570:	e08f      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
					if ((ucDigit >= '0' && ucDigit <= '9') || ',' == ucDigit){
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b2f      	cmp	r3, #47	@ 0x2f
 8001578:	d903      	bls.n	8001582 <HAL_UART_RxCpltCallback+0x1d2>
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b39      	cmp	r3, #57	@ 0x39
 8001580:	d903      	bls.n	800158a <HAL_UART_RxCpltCallback+0x1da>
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b2c      	cmp	r3, #44	@ 0x2c
 8001588:	d10f      	bne.n	80015aa <HAL_UART_RxCpltCallback+0x1fa>
						if (ucValueCount < MAX_VALUE_LENGTH){
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_UART_RxCpltCallback+0x23c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b06      	cmp	r3, #6
 8001590:	d81f      	bhi.n	80015d2 <HAL_UART_RxCpltCallback+0x222>
							ucValue[ucValueCount++] = ucDigit;
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <HAL_UART_RxCpltCallback+0x23c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	b2d1      	uxtb	r1, r2
 800159a:	4a14      	ldr	r2, [pc, #80]	@ (80015ec <HAL_UART_RxCpltCallback+0x23c>)
 800159c:	7011      	strb	r1, [r2, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80015a2:	7819      	ldrb	r1, [r3, #0]
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <HAL_UART_RxCpltCallback+0x244>)
 80015a6:	5499      	strb	r1, [r3, r2]
						if (ucValueCount < MAX_VALUE_LENGTH){
 80015a8:	e013      	b.n	80015d2 <HAL_UART_RxCpltCallback+0x222>
						if (';' == ucDigit){
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <HAL_UART_RxCpltCallback+0x22c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b3b      	cmp	r3, #59	@ 0x3b
 80015b0:	d10b      	bne.n	80015ca <HAL_UART_RxCpltCallback+0x21a>
							ucValue[ucValueCount] = '\0';
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_UART_RxCpltCallback+0x23c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <HAL_UART_RxCpltCallback+0x244>)
 80015ba:	2100      	movs	r1, #0
 80015bc:	5499      	strb	r1, [r3, r2]
							vCommStateMachineSetParam(ucParam, &ucValue);
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <HAL_UART_RxCpltCallback+0x238>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	490c      	ldr	r1, [pc, #48]	@ (80015f4 <HAL_UART_RxCpltCallback+0x244>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f9cf 	bl	8001968 <vCommStateMachineSetParam>
						ucState = _IDDLE;
 80015ca:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <HAL_UART_RxCpltCallback+0x230>)
 80015cc:	2230      	movs	r2, #48	@ 0x30
 80015ce:	701a      	strb	r2, [r3, #0]
					break;
 80015d0:	e05f      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
 80015d2:	e05e      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
 80015d4:	20000238 	.word	0x20000238
 80015d8:	2000023c 	.word	0x2000023c
 80015dc:	20000237 	.word	0x20000237
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000234 	.word	0x20000234
 80015e8:	20000240 	.word	0x20000240
 80015ec:	20000236 	.word	0x20000236
 80015f0:	20000235 	.word	0x20000235
 80015f4:	2000022c 	.word	0x2000022c
					if ((ucDigit >= '0' && ucDigit <= '9') || ',' == ucDigit){
 80015f8:	4b28      	ldr	r3, [pc, #160]	@ (800169c <HAL_UART_RxCpltCallback+0x2ec>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80015fe:	d903      	bls.n	8001608 <HAL_UART_RxCpltCallback+0x258>
 8001600:	4b26      	ldr	r3, [pc, #152]	@ (800169c <HAL_UART_RxCpltCallback+0x2ec>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b39      	cmp	r3, #57	@ 0x39
 8001606:	d903      	bls.n	8001610 <HAL_UART_RxCpltCallback+0x260>
 8001608:	4b24      	ldr	r3, [pc, #144]	@ (800169c <HAL_UART_RxCpltCallback+0x2ec>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b2c      	cmp	r3, #44	@ 0x2c
 800160e:	d10f      	bne.n	8001630 <HAL_UART_RxCpltCallback+0x280>
						if (ucValueCount < MAX_VALUE_LENGTH){
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <HAL_UART_RxCpltCallback+0x2f0>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b06      	cmp	r3, #6
 8001616:	d81f      	bhi.n	8001658 <HAL_UART_RxCpltCallback+0x2a8>
							ucValue[ucValueCount++] = ucDigit;
 8001618:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <HAL_UART_RxCpltCallback+0x2f0>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	b2d1      	uxtb	r1, r2
 8001620:	4a1f      	ldr	r2, [pc, #124]	@ (80016a0 <HAL_UART_RxCpltCallback+0x2f0>)
 8001622:	7011      	strb	r1, [r2, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <HAL_UART_RxCpltCallback+0x2ec>)
 8001628:	7819      	ldrb	r1, [r3, #0]
 800162a:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <HAL_UART_RxCpltCallback+0x2f4>)
 800162c:	5499      	strb	r1, [r3, r2]
						if (ucValueCount < MAX_VALUE_LENGTH){
 800162e:	e013      	b.n	8001658 <HAL_UART_RxCpltCallback+0x2a8>
						if (';' == ucDigit){
 8001630:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <HAL_UART_RxCpltCallback+0x2ec>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b3b      	cmp	r3, #59	@ 0x3b
 8001636:	d10b      	bne.n	8001650 <HAL_UART_RxCpltCallback+0x2a0>
							ucValue[ucValueCount] = '\0';
 8001638:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <HAL_UART_RxCpltCallback+0x2f0>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <HAL_UART_RxCpltCallback+0x2f4>)
 8001640:	2100      	movs	r1, #0
 8001642:	5499      	strb	r1, [r3, r2]
							vCommStateMachineSendMessage(pBluetoothControllerUART, &ucValue);
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <HAL_UART_RxCpltCallback+0x2f8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4916      	ldr	r1, [pc, #88]	@ (80016a4 <HAL_UART_RxCpltCallback+0x2f4>)
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fb1e 	bl	8001c8c <vCommStateMachineSendMessage>
						ucState = _IDDLE;
 8001650:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <HAL_UART_RxCpltCallback+0x2fc>)
 8001652:	2230      	movs	r2, #48	@ 0x30
 8001654:	701a      	strb	r2, [r3, #0]
					break;
 8001656:	e01c      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
 8001658:	e01b      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
		        if(ucDigit == '1')
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <HAL_UART_RxCpltCallback+0x2ec>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b31      	cmp	r3, #49	@ 0x31
 8001660:	d102      	bne.n	8001668 <HAL_UART_RxCpltCallback+0x2b8>
				    vBleCmdMotorForward();
 8001662:	f7ff fdf5 	bl	8001250 <vBleCmdMotorForward>
}
 8001666:	e014      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
				else if (ucDigit == '4')
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <HAL_UART_RxCpltCallback+0x2ec>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b34      	cmp	r3, #52	@ 0x34
 800166e:	d102      	bne.n	8001676 <HAL_UART_RxCpltCallback+0x2c6>
					vBleCmdMotorLeftward();
 8001670:	f7ff fe10 	bl	8001294 <vBleCmdMotorLeftward>
}
 8001674:	e00d      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
				else if (ucDigit == '3')
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_UART_RxCpltCallback+0x2ec>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b33      	cmp	r3, #51	@ 0x33
 800167c:	d102      	bne.n	8001684 <HAL_UART_RxCpltCallback+0x2d4>
					vBleCmdMotorRightward();
 800167e:	f7ff fe2d 	bl	80012dc <vBleCmdMotorRightward>
}
 8001682:	e006      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
				else if (ucDigit == '2')
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <HAL_UART_RxCpltCallback+0x2ec>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b32      	cmp	r3, #50	@ 0x32
 800168a:	d102      	bne.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
					vBleCmdMotorBackward();
 800168c:	f7ff fe4a 	bl	8001324 <vBleCmdMotorBackward>
}
 8001690:	e7ff      	b.n	8001692 <HAL_UART_RxCpltCallback+0x2e2>
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000237 	.word	0x20000237
 80016a0:	20000236 	.word	0x20000236
 80016a4:	2000022c 	.word	0x2000022c
 80016a8:	20000238 	.word	0x20000238
 80016ac:	20000000 	.word	0x20000000

080016b0 <vCommStateMachineReturnParam>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	Returns the parameter indicated by the ucParam variable
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucParam
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineReturnParam(unsigned char ucParam){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	unsigned char ucValue[MAX_VALUE_LENGTH];
	unsigned char ucValuev2v[MAX_VALUE_LENGTH];
	char * pMessage;
	//caso seja carro lider
	if(!cCar){
 80016ba:	4b96      	ldr	r3, [pc, #600]	@ (8001914 <vCommStateMachineReturnParam+0x264>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f040 80ac 	bne.w	800181c <vCommStateMachineReturnParam+0x16c>
		switch (ucParam){
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	3b61      	subs	r3, #97	@ 0x61
 80016c8:	2b11      	cmp	r3, #17
 80016ca:	f200 811e 	bhi.w	800190a <vCommStateMachineReturnParam+0x25a>
 80016ce:	a201      	add	r2, pc, #4	@ (adr r2, 80016d4 <vCommStateMachineReturnParam+0x24>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	0800175d 	.word	0x0800175d
 80016d8:	0800177d 	.word	0x0800177d
 80016dc:	0800179d 	.word	0x0800179d
 80016e0:	080017bd 	.word	0x080017bd
 80016e4:	080017dd 	.word	0x080017dd
 80016e8:	080017fd 	.word	0x080017fd
 80016ec:	0800190b 	.word	0x0800190b
 80016f0:	0800190b 	.word	0x0800190b
 80016f4:	0800190b 	.word	0x0800190b
 80016f8:	0800190b 	.word	0x0800190b
 80016fc:	0800190b 	.word	0x0800190b
 8001700:	0800171d 	.word	0x0800171d
 8001704:	0800190b 	.word	0x0800190b
 8001708:	0800190b 	.word	0x0800190b
 800170c:	0800190b 	.word	0x0800190b
 8001710:	0800190b 	.word	0x0800190b
 8001714:	0800190b 	.word	0x0800190b
 8001718:	0800173d 	.word	0x0800173d
			case 'l': //left speed
				pMessage = pCommunicationFloatToString(fLeftSpeed, 2);
 800171c:	4b7e      	ldr	r3, [pc, #504]	@ (8001918 <vCommStateMachineReturnParam+0x268>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	2002      	movs	r0, #2
 8001724:	eeb0 0a67 	vmov.f32	s0, s15
 8001728:	f000 fb12 	bl	8001d50 <pCommunicationFloatToString>
 800172c:	61f8      	str	r0, [r7, #28]
				vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 800172e:	4b7b      	ldr	r3, [pc, #492]	@ (800191c <vCommStateMachineReturnParam+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	69f9      	ldr	r1, [r7, #28]
 8001734:	4618      	mov	r0, r3
 8001736:	f000 faa9 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 800173a:	e0e6      	b.n	800190a <vCommStateMachineReturnParam+0x25a>
			case 'r': //right speed
				pMessage = pCommunicationFloatToString(fRightSpeed, 2);
 800173c:	4b78      	ldr	r3, [pc, #480]	@ (8001920 <vCommStateMachineReturnParam+0x270>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	2002      	movs	r0, #2
 8001744:	eeb0 0a67 	vmov.f32	s0, s15
 8001748:	f000 fb02 	bl	8001d50 <pCommunicationFloatToString>
 800174c:	61f8      	str	r0, [r7, #28]
				vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 800174e:	4b73      	ldr	r3, [pc, #460]	@ (800191c <vCommStateMachineReturnParam+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	69f9      	ldr	r1, [r7, #28]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fa99 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 800175a:	e0d6      	b.n	800190a <vCommStateMachineReturnParam+0x25a>
			case 'a': //kp left
				pMessage = pCommunicationFloatToString(fLeftMotorKp, 4);
 800175c:	4b71      	ldr	r3, [pc, #452]	@ (8001924 <vCommStateMachineReturnParam+0x274>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	2004      	movs	r0, #4
 8001764:	eeb0 0a67 	vmov.f32	s0, s15
 8001768:	f000 faf2 	bl	8001d50 <pCommunicationFloatToString>
 800176c:	61f8      	str	r0, [r7, #28]
				vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 800176e:	4b6b      	ldr	r3, [pc, #428]	@ (800191c <vCommStateMachineReturnParam+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	69f9      	ldr	r1, [r7, #28]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fa89 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 800177a:	e0c6      	b.n	800190a <vCommStateMachineReturnParam+0x25a>
			case 'b': //ki left
				pMessage = pCommunicationFloatToString(fLeftMotorKi, 4);
 800177c:	4b6a      	ldr	r3, [pc, #424]	@ (8001928 <vCommStateMachineReturnParam+0x278>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	2004      	movs	r0, #4
 8001784:	eeb0 0a67 	vmov.f32	s0, s15
 8001788:	f000 fae2 	bl	8001d50 <pCommunicationFloatToString>
 800178c:	61f8      	str	r0, [r7, #28]
				vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 800178e:	4b63      	ldr	r3, [pc, #396]	@ (800191c <vCommStateMachineReturnParam+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	69f9      	ldr	r1, [r7, #28]
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fa79 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 800179a:	e0b6      	b.n	800190a <vCommStateMachineReturnParam+0x25a>
			case 'c': //kp right
				pMessage = pCommunicationFloatToString(fRightMotorKp, 4);
 800179c:	4b63      	ldr	r3, [pc, #396]	@ (800192c <vCommStateMachineReturnParam+0x27c>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	2004      	movs	r0, #4
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	f000 fad2 	bl	8001d50 <pCommunicationFloatToString>
 80017ac:	61f8      	str	r0, [r7, #28]
				vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 80017ae:	4b5b      	ldr	r3, [pc, #364]	@ (800191c <vCommStateMachineReturnParam+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69f9      	ldr	r1, [r7, #28]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 fa69 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 80017ba:	e0a6      	b.n	800190a <vCommStateMachineReturnParam+0x25a>
			case 'd': //ki left
				pMessage = pCommunicationFloatToString(fRightMotorKi, 4);
 80017bc:	4b5c      	ldr	r3, [pc, #368]	@ (8001930 <vCommStateMachineReturnParam+0x280>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	2004      	movs	r0, #4
 80017c4:	eeb0 0a67 	vmov.f32	s0, s15
 80017c8:	f000 fac2 	bl	8001d50 <pCommunicationFloatToString>
 80017cc:	61f8      	str	r0, [r7, #28]
				vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 80017ce:	4b53      	ldr	r3, [pc, #332]	@ (800191c <vCommStateMachineReturnParam+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69f9      	ldr	r1, [r7, #28]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 fa59 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 80017da:	e096      	b.n	800190a <vCommStateMachineReturnParam+0x25a>
			case 'e': //setpoint left
				pMessage = pCommunicationFloatToString(fSetPoint_left, 2);
 80017dc:	4b55      	ldr	r3, [pc, #340]	@ (8001934 <vCommStateMachineReturnParam+0x284>)
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	2002      	movs	r0, #2
 80017e4:	eeb0 0a67 	vmov.f32	s0, s15
 80017e8:	f000 fab2 	bl	8001d50 <pCommunicationFloatToString>
 80017ec:	61f8      	str	r0, [r7, #28]
				vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 80017ee:	4b4b      	ldr	r3, [pc, #300]	@ (800191c <vCommStateMachineReturnParam+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	69f9      	ldr	r1, [r7, #28]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fa49 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 80017fa:	e086      	b.n	800190a <vCommStateMachineReturnParam+0x25a>
			case 'f': //setpoint right
				pMessage = pCommunicationFloatToString(fSetPoint_right, 2);
 80017fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001938 <vCommStateMachineReturnParam+0x288>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	2002      	movs	r0, #2
 8001804:	eeb0 0a67 	vmov.f32	s0, s15
 8001808:	f000 faa2 	bl	8001d50 <pCommunicationFloatToString>
 800180c:	61f8      	str	r0, [r7, #28]
				vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 800180e:	4b43      	ldr	r3, [pc, #268]	@ (800191c <vCommStateMachineReturnParam+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	69f9      	ldr	r1, [r7, #28]
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fa39 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 800181a:	e076      	b.n	800190a <vCommStateMachineReturnParam+0x25a>
    	}
	}
	else{
		switch (ucParam){
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	3b61      	subs	r3, #97	@ 0x61
 8001820:	2b15      	cmp	r3, #21
 8001822:	d86e      	bhi.n	8001902 <vCommStateMachineReturnParam+0x252>
 8001824:	a201      	add	r2, pc, #4	@ (adr r2, 800182c <vCommStateMachineReturnParam+0x17c>)
 8001826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182a:	bf00      	nop
 800182c:	080018a1 	.word	0x080018a1
 8001830:	080018af 	.word	0x080018af
 8001834:	080018bd 	.word	0x080018bd
 8001838:	080018cb 	.word	0x080018cb
 800183c:	080018d9 	.word	0x080018d9
 8001840:	080018e7 	.word	0x080018e7
 8001844:	08001903 	.word	0x08001903
 8001848:	08001903 	.word	0x08001903
 800184c:	08001903 	.word	0x08001903
 8001850:	08001903 	.word	0x08001903
 8001854:	08001903 	.word	0x08001903
 8001858:	08001885 	.word	0x08001885
 800185c:	08001903 	.word	0x08001903
 8001860:	08001903 	.word	0x08001903
 8001864:	08001903 	.word	0x08001903
 8001868:	08001903 	.word	0x08001903
 800186c:	08001903 	.word	0x08001903
 8001870:	08001893 	.word	0x08001893
 8001874:	08001903 	.word	0x08001903
 8001878:	08001903 	.word	0x08001903
 800187c:	08001903 	.word	0x08001903
 8001880:	080018f5 	.word	0x080018f5
			case 'l': //left speed
				vCommStateMachineSendMessage(pV2VUART, "#gl;");
 8001884:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <vCommStateMachineReturnParam+0x28c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	492d      	ldr	r1, [pc, #180]	@ (8001940 <vCommStateMachineReturnParam+0x290>)
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f9fe 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 8001890:	e037      	b.n	8001902 <vCommStateMachineReturnParam+0x252>
			case 'r': //right speed
				vCommStateMachineSendMessage(pV2VUART, "#gr;");
 8001892:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <vCommStateMachineReturnParam+0x28c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	492b      	ldr	r1, [pc, #172]	@ (8001944 <vCommStateMachineReturnParam+0x294>)
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f9f7 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 800189e:	e030      	b.n	8001902 <vCommStateMachineReturnParam+0x252>
			case 'a': //kp left
				vCommStateMachineSendMessage(pV2VUART, "#ga;");
 80018a0:	4b26      	ldr	r3, [pc, #152]	@ (800193c <vCommStateMachineReturnParam+0x28c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4928      	ldr	r1, [pc, #160]	@ (8001948 <vCommStateMachineReturnParam+0x298>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f9f0 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 80018ac:	e029      	b.n	8001902 <vCommStateMachineReturnParam+0x252>
			case 'b': //ki left
				vCommStateMachineSendMessage(pV2VUART, "#gb;");
 80018ae:	4b23      	ldr	r3, [pc, #140]	@ (800193c <vCommStateMachineReturnParam+0x28c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4926      	ldr	r1, [pc, #152]	@ (800194c <vCommStateMachineReturnParam+0x29c>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 f9e9 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 80018ba:	e022      	b.n	8001902 <vCommStateMachineReturnParam+0x252>
			case 'c': //kp right
				vCommStateMachineSendMessage(pV2VUART, "#gc;");
 80018bc:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <vCommStateMachineReturnParam+0x28c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4923      	ldr	r1, [pc, #140]	@ (8001950 <vCommStateMachineReturnParam+0x2a0>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f9e2 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 80018c8:	e01b      	b.n	8001902 <vCommStateMachineReturnParam+0x252>
			case 'd': //ki left
				vCommStateMachineSendMessage(pV2VUART, "#gd;");
 80018ca:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <vCommStateMachineReturnParam+0x28c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4921      	ldr	r1, [pc, #132]	@ (8001954 <vCommStateMachineReturnParam+0x2a4>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 f9db 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 80018d6:	e014      	b.n	8001902 <vCommStateMachineReturnParam+0x252>
			case 'e': //setpoint left
				vCommStateMachineSendMessage(pV2VUART, "#ge;");
 80018d8:	4b18      	ldr	r3, [pc, #96]	@ (800193c <vCommStateMachineReturnParam+0x28c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	491e      	ldr	r1, [pc, #120]	@ (8001958 <vCommStateMachineReturnParam+0x2a8>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f9d4 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 80018e4:	e00d      	b.n	8001902 <vCommStateMachineReturnParam+0x252>
			case 'f': //setpoint right
				vCommStateMachineSendMessage(pV2VUART, "#gf;");
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <vCommStateMachineReturnParam+0x28c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	491c      	ldr	r1, [pc, #112]	@ (800195c <vCommStateMachineReturnParam+0x2ac>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f9cd 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 80018f2:	e006      	b.n	8001902 <vCommStateMachineReturnParam+0x252>
			case 'v': //vMax
				vCommStateMachineSendMessage(pV2VUART, "#gv;");
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <vCommStateMachineReturnParam+0x28c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4919      	ldr	r1, [pc, #100]	@ (8001960 <vCommStateMachineReturnParam+0x2b0>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f9c6 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 8001900:	bf00      	nop
		}
		cWaitAnwser = 1;
 8001902:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <vCommStateMachineReturnParam+0x2b4>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
	}
}
 8001908:	e7ff      	b.n	800190a <vCommStateMachineReturnParam+0x25a>
 800190a:	bf00      	nop
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000234 	.word	0x20000234
 8001918:	20000400 	.word	0x20000400
 800191c:	20000238 	.word	0x20000238
 8001920:	20000404 	.word	0x20000404
 8001924:	20000028 	.word	0x20000028
 8001928:	2000002c 	.word	0x2000002c
 800192c:	20000030 	.word	0x20000030
 8001930:	20000034 	.word	0x20000034
 8001934:	2000079c 	.word	0x2000079c
 8001938:	200007a0 	.word	0x200007a0
 800193c:	2000023c 	.word	0x2000023c
 8001940:	0800f778 	.word	0x0800f778
 8001944:	0800f780 	.word	0x0800f780
 8001948:	0800f788 	.word	0x0800f788
 800194c:	0800f790 	.word	0x0800f790
 8001950:	0800f798 	.word	0x0800f798
 8001954:	0800f7a0 	.word	0x0800f7a0
 8001958:	0800f7a8 	.word	0x0800f7a8
 800195c:	0800f7b0 	.word	0x0800f7b0
 8001960:	0800f7b8 	.word	0x0800f7b8
 8001964:	20000235 	.word	0x20000235

08001968 <vCommStateMachineSetParam>:
//	 Description	:	set the parameter indicated by the ucParam by ucValue
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucParam
//		                ucValue
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineSetParam(unsigned char ucParam, unsigned char * pValue){
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
	float fValue;
	char cAux;
	if(cCar == 0){ // carro lider
 8001974:	4b97      	ldr	r3, [pc, #604]	@ (8001bd4 <vCommStateMachineSetParam+0x26c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d16d      	bne.n	8001a58 <vCommStateMachineSetParam+0xf0>
		switch (ucParam){
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	3b61      	subs	r3, #97	@ 0x61
 8001980:	2b05      	cmp	r3, #5
 8001982:	f200 8122 	bhi.w	8001bca <vCommStateMachineSetParam+0x262>
 8001986:	a201      	add	r2, pc, #4	@ (adr r2, 800198c <vCommStateMachineSetParam+0x24>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	080019a5 	.word	0x080019a5
 8001990:	080019b7 	.word	0x080019b7
 8001994:	080019c9 	.word	0x080019c9
 8001998:	080019db 	.word	0x080019db
 800199c:	080019ed 	.word	0x080019ed
 80019a0:	08001a23 	.word	0x08001a23
			case 'a': //left kp
				fLeftMotorKp = fCommStateMachineStringToFloat(pValue);
 80019a4:	6838      	ldr	r0, [r7, #0]
 80019a6:	f000 f937 	bl	8001c18 <fCommStateMachineStringToFloat>
 80019aa:	eef0 7a40 	vmov.f32	s15, s0
 80019ae:	4b8a      	ldr	r3, [pc, #552]	@ (8001bd8 <vCommStateMachineSetParam+0x270>)
 80019b0:	edc3 7a00 	vstr	s15, [r3]
				break;
 80019b4:	e109      	b.n	8001bca <vCommStateMachineSetParam+0x262>
			case 'b': //left ki
				fLeftMotorKi = fCommStateMachineStringToFloat(pValue);
 80019b6:	6838      	ldr	r0, [r7, #0]
 80019b8:	f000 f92e 	bl	8001c18 <fCommStateMachineStringToFloat>
 80019bc:	eef0 7a40 	vmov.f32	s15, s0
 80019c0:	4b86      	ldr	r3, [pc, #536]	@ (8001bdc <vCommStateMachineSetParam+0x274>)
 80019c2:	edc3 7a00 	vstr	s15, [r3]
				break;
 80019c6:	e100      	b.n	8001bca <vCommStateMachineSetParam+0x262>
			case 'c': //right kp
				fRightMotorKp = fCommStateMachineStringToFloat(pValue);
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f000 f925 	bl	8001c18 <fCommStateMachineStringToFloat>
 80019ce:	eef0 7a40 	vmov.f32	s15, s0
 80019d2:	4b83      	ldr	r3, [pc, #524]	@ (8001be0 <vCommStateMachineSetParam+0x278>)
 80019d4:	edc3 7a00 	vstr	s15, [r3]
				break;
 80019d8:	e0f7      	b.n	8001bca <vCommStateMachineSetParam+0x262>
			case 'd': //left ki
				fRightMotorKi=fCommStateMachineStringToFloat(pValue);
 80019da:	6838      	ldr	r0, [r7, #0]
 80019dc:	f000 f91c 	bl	8001c18 <fCommStateMachineStringToFloat>
 80019e0:	eef0 7a40 	vmov.f32	s15, s0
 80019e4:	4b7f      	ldr	r3, [pc, #508]	@ (8001be4 <vCommStateMachineSetParam+0x27c>)
 80019e6:	edc3 7a00 	vstr	s15, [r3]
				break;
 80019ea:	e0ee      	b.n	8001bca <vCommStateMachineSetParam+0x262>
			case 'e': //set left
				fValue = fCommStateMachineStringToFloat(pValue);
 80019ec:	6838      	ldr	r0, [r7, #0]
 80019ee:	f000 f913 	bl	8001c18 <fCommStateMachineStringToFloat>
 80019f2:	ed87 0a03 	vstr	s0, [r7, #12]
				if (fValue >= 0 && fValue<= 700){
 80019f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	da00      	bge.n	8001a06 <vCommStateMachineSetParam+0x9e>
					fSetPoint_left=fValue;
				}
				break;
 8001a04:	e0e1      	b.n	8001bca <vCommStateMachineSetParam+0x262>
				if (fValue >= 0 && fValue<= 700){
 8001a06:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a0a:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8001be8 <vCommStateMachineSetParam+0x280>
 8001a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	d900      	bls.n	8001a1a <vCommStateMachineSetParam+0xb2>
				break;
 8001a18:	e0d7      	b.n	8001bca <vCommStateMachineSetParam+0x262>
					fSetPoint_left=fValue;
 8001a1a:	4a74      	ldr	r2, [pc, #464]	@ (8001bec <vCommStateMachineSetParam+0x284>)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6013      	str	r3, [r2, #0]
				break;
 8001a20:	e0d3      	b.n	8001bca <vCommStateMachineSetParam+0x262>
			case 'f': //set right
				fValue = fCommStateMachineStringToFloat(pValue);
 8001a22:	6838      	ldr	r0, [r7, #0]
 8001a24:	f000 f8f8 	bl	8001c18 <fCommStateMachineStringToFloat>
 8001a28:	ed87 0a03 	vstr	s0, [r7, #12]
				if (fValue >= 0 && fValue<= 700){
 8001a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a38:	da00      	bge.n	8001a3c <vCommStateMachineSetParam+0xd4>
					fSetPoint_right=fValue;
				}
				break;
 8001a3a:	e0c6      	b.n	8001bca <vCommStateMachineSetParam+0x262>
				if (fValue >= 0 && fValue<= 700){
 8001a3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a40:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8001be8 <vCommStateMachineSetParam+0x280>
 8001a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	d900      	bls.n	8001a50 <vCommStateMachineSetParam+0xe8>
				break;
 8001a4e:	e0bc      	b.n	8001bca <vCommStateMachineSetParam+0x262>
					fSetPoint_right=fValue;
 8001a50:	4a67      	ldr	r2, [pc, #412]	@ (8001bf0 <vCommStateMachineSetParam+0x288>)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6013      	str	r3, [r2, #0]
				break;
 8001a56:	e0b8      	b.n	8001bca <vCommStateMachineSetParam+0x262>
		}
	}
	else{
		switch (ucParam){
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	3b61      	subs	r3, #97	@ 0x61
 8001a5c:	2b15      	cmp	r3, #21
 8001a5e:	f200 80b4 	bhi.w	8001bca <vCommStateMachineSetParam+0x262>
 8001a62:	a201      	add	r2, pc, #4	@ (adr r2, 8001a68 <vCommStateMachineSetParam+0x100>)
 8001a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a68:	08001ac1 	.word	0x08001ac1
 8001a6c:	08001ae7 	.word	0x08001ae7
 8001a70:	08001b0d 	.word	0x08001b0d
 8001a74:	08001b33 	.word	0x08001b33
 8001a78:	08001b59 	.word	0x08001b59
 8001a7c:	08001b7f 	.word	0x08001b7f
 8001a80:	08001bcb 	.word	0x08001bcb
 8001a84:	08001bcb 	.word	0x08001bcb
 8001a88:	08001bcb 	.word	0x08001bcb
 8001a8c:	08001bcb 	.word	0x08001bcb
 8001a90:	08001bcb 	.word	0x08001bcb
 8001a94:	08001bcb 	.word	0x08001bcb
 8001a98:	08001bcb 	.word	0x08001bcb
 8001a9c:	08001bcb 	.word	0x08001bcb
 8001aa0:	08001bcb 	.word	0x08001bcb
 8001aa4:	08001bcb 	.word	0x08001bcb
 8001aa8:	08001bcb 	.word	0x08001bcb
 8001aac:	08001bcb 	.word	0x08001bcb
 8001ab0:	08001bcb 	.word	0x08001bcb
 8001ab4:	08001bcb 	.word	0x08001bcb
 8001ab8:	08001bcb 	.word	0x08001bcb
 8001abc:	08001ba5 	.word	0x08001ba5

			case 'a': //left kp
				vCommStateMachineSendMessage(pV2VUART, "#sa");
 8001ac0:	4b4c      	ldr	r3, [pc, #304]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	494c      	ldr	r1, [pc, #304]	@ (8001bf8 <vCommStateMachineSetParam+0x290>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f8e0 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, pValue);
 8001acc:	4b49      	ldr	r3, [pc, #292]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f8da 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, ";");
 8001ad8:	4b46      	ldr	r3, [pc, #280]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4947      	ldr	r1, [pc, #284]	@ (8001bfc <vCommStateMachineSetParam+0x294>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f8d4 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 8001ae4:	e071      	b.n	8001bca <vCommStateMachineSetParam+0x262>
			case 'b': //left ki
				vCommStateMachineSendMessage(pV2VUART, "#sb");
 8001ae6:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4945      	ldr	r1, [pc, #276]	@ (8001c00 <vCommStateMachineSetParam+0x298>)
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f8cd 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, pValue);
 8001af2:	4b40      	ldr	r3, [pc, #256]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6839      	ldr	r1, [r7, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f8c7 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, ";");
 8001afe:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	493e      	ldr	r1, [pc, #248]	@ (8001bfc <vCommStateMachineSetParam+0x294>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 f8c1 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 8001b0a:	e05e      	b.n	8001bca <vCommStateMachineSetParam+0x262>
			case 'c': //right kp
				vCommStateMachineSendMessage(pV2VUART, "#sc");
 8001b0c:	4b39      	ldr	r3, [pc, #228]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	493c      	ldr	r1, [pc, #240]	@ (8001c04 <vCommStateMachineSetParam+0x29c>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f8ba 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, pValue);
 8001b18:	4b36      	ldr	r3, [pc, #216]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6839      	ldr	r1, [r7, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f8b4 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, ";");
 8001b24:	4b33      	ldr	r3, [pc, #204]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4934      	ldr	r1, [pc, #208]	@ (8001bfc <vCommStateMachineSetParam+0x294>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f8ae 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 8001b30:	e04b      	b.n	8001bca <vCommStateMachineSetParam+0x262>
			case 'd': //left ki
				vCommStateMachineSendMessage(pV2VUART, "#sd");
 8001b32:	4b30      	ldr	r3, [pc, #192]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4934      	ldr	r1, [pc, #208]	@ (8001c08 <vCommStateMachineSetParam+0x2a0>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 f8a7 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, pValue);
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6839      	ldr	r1, [r7, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 f8a1 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, ";");
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	492b      	ldr	r1, [pc, #172]	@ (8001bfc <vCommStateMachineSetParam+0x294>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 f89b 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 8001b56:	e038      	b.n	8001bca <vCommStateMachineSetParam+0x262>
			case 'e': //set left
				vCommStateMachineSendMessage(pV2VUART, "#se");
 8001b58:	4b26      	ldr	r3, [pc, #152]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	492b      	ldr	r1, [pc, #172]	@ (8001c0c <vCommStateMachineSetParam+0x2a4>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f894 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, pValue);
 8001b64:	4b23      	ldr	r3, [pc, #140]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6839      	ldr	r1, [r7, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f88e 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, ";");
 8001b70:	4b20      	ldr	r3, [pc, #128]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4921      	ldr	r1, [pc, #132]	@ (8001bfc <vCommStateMachineSetParam+0x294>)
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f888 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 8001b7c:	e025      	b.n	8001bca <vCommStateMachineSetParam+0x262>
			case 'f': //set right
				vCommStateMachineSendMessage(pV2VUART, "#sf");
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4923      	ldr	r1, [pc, #140]	@ (8001c10 <vCommStateMachineSetParam+0x2a8>)
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 f881 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, pValue);
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6839      	ldr	r1, [r7, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f87b 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, ";");
 8001b96:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4918      	ldr	r1, [pc, #96]	@ (8001bfc <vCommStateMachineSetParam+0x294>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 f875 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 8001ba2:	e012      	b.n	8001bca <vCommStateMachineSetParam+0x262>
			case 'v': //set right
				vCommStateMachineSendMessage(pV2VUART, "#sv");
 8001ba4:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	491a      	ldr	r1, [pc, #104]	@ (8001c14 <vCommStateMachineSetParam+0x2ac>)
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f86e 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, pValue);
 8001bb0:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6839      	ldr	r1, [r7, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f868 	bl	8001c8c <vCommStateMachineSendMessage>
				vCommStateMachineSendMessage(pV2VUART, ";");
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <vCommStateMachineSetParam+0x28c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	490e      	ldr	r1, [pc, #56]	@ (8001bfc <vCommStateMachineSetParam+0x294>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f862 	bl	8001c8c <vCommStateMachineSendMessage>
				break;
 8001bc8:	bf00      	nop

		}
	}
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000234 	.word	0x20000234
 8001bd8:	20000028 	.word	0x20000028
 8001bdc:	2000002c 	.word	0x2000002c
 8001be0:	20000030 	.word	0x20000030
 8001be4:	20000034 	.word	0x20000034
 8001be8:	442f0000 	.word	0x442f0000
 8001bec:	2000079c 	.word	0x2000079c
 8001bf0:	200007a0 	.word	0x200007a0
 8001bf4:	2000023c 	.word	0x2000023c
 8001bf8:	0800f7c0 	.word	0x0800f7c0
 8001bfc:	0800f7c4 	.word	0x0800f7c4
 8001c00:	0800f7c8 	.word	0x0800f7c8
 8001c04:	0800f7cc 	.word	0x0800f7cc
 8001c08:	0800f7d0 	.word	0x0800f7d0
 8001c0c:	0800f7d4 	.word	0x0800f7d4
 8001c10:	0800f7d8 	.word	0x0800f7d8
 8001c14:	0800f7dc 	.word	0x0800f7dc

08001c18 <fCommStateMachineStringToFloat>:
//	 Description	:	Turns Strings to float using atof functon and set a "." instead a ","
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	unsigned char * ucInputNumber
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//float fCommunicationStateMachineStringToFloat(unsigned char * ucValue){
float fCommStateMachineStringToFloat(){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
	float fInputNumber=0;
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	603b      	str	r3, [r7, #0]
	int iPos=0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
	while (iPos >= 0){
 8001c28:	e017      	b.n	8001c5a <fCommStateMachineStringToFloat+0x42>
		if ('\0'!=ucValue[iPos]){
 8001c2a:	4a17      	ldr	r2, [pc, #92]	@ (8001c88 <fCommStateMachineStringToFloat+0x70>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00e      	beq.n	8001c54 <fCommStateMachineStringToFloat+0x3c>
			if (ucValue[iPos] == ','){
 8001c36:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <fCommStateMachineStringToFloat+0x70>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001c40:	d104      	bne.n	8001c4c <fCommStateMachineStringToFloat+0x34>
				ucValue[iPos] = '.';
 8001c42:	4a11      	ldr	r2, [pc, #68]	@ (8001c88 <fCommStateMachineStringToFloat+0x70>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	222e      	movs	r2, #46	@ 0x2e
 8001c4a:	701a      	strb	r2, [r3, #0]
			}
			iPos++;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	e002      	b.n	8001c5a <fCommStateMachineStringToFloat+0x42>
		}
		else{
			iPos = -1;
 8001c54:	f04f 33ff 	mov.w	r3, #4294967295
 8001c58:	607b      	str	r3, [r7, #4]
	while (iPos >= 0){
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	dae4      	bge.n	8001c2a <fCommStateMachineStringToFloat+0x12>
		}
	}
	fInputNumber = atof (ucValue);
 8001c60:	4809      	ldr	r0, [pc, #36]	@ (8001c88 <fCommStateMachineStringToFloat+0x70>)
 8001c62:	f00a fc01 	bl	800c468 <atof>
 8001c66:	ec53 2b10 	vmov	r2, r3, d0
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe ffe3 	bl	8000c38 <__aeabi_d2f>
 8001c72:	4603      	mov	r3, r0
 8001c74:	603b      	str	r3, [r7, #0]
	return fInputNumber;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	ee07 3a90 	vmov	s15, r3
}
 8001c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000022c 	.word	0x2000022c

08001c8c <vCommStateMachineSendMessage>:
//	 Description	:	Send message to putty from HAL_UART_Transmit
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	UART_HandleTypeDef * huart
//		                unsigned char* ucMessage
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineSendMessage (UART_HandleTypeDef * huart, unsigned char* ucMessage){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
	int iPos = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
	unsigned char a;
	while(iPos >= 0 && iPos < _MAX_NUMBER_OF_CHARS){
 8001c9a:	e02b      	b.n	8001cf4 <vCommStateMachineSendMessage+0x68>
		a = ucMessage[iPos];
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	72fb      	strb	r3, [r7, #11]
		if(ucMessage[iPos] =='\000'){
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <vCommStateMachineSendMessage+0x2e>
			iPos = -1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e01c      	b.n	8001cf4 <vCommStateMachineSendMessage+0x68>
		}
		else if(ucMessage[iPos] =='\n'){
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d10b      	bne.n	8001cde <vCommStateMachineSendMessage+0x52>
			HAL_UART_Transmit(huart, &ucMessage[iPos], 1, 100);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	18d1      	adds	r1, r2, r3
 8001ccc:	2364      	movs	r3, #100	@ 0x64
 8001cce:	2201      	movs	r2, #1
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f008 facb 	bl	800a26c <HAL_UART_Transmit>
			iPos = -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e00a      	b.n	8001cf4 <vCommStateMachineSendMessage+0x68>
		}
		else{
			HAL_UART_Transmit(huart, &ucMessage[iPos], 1, 100);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	18d1      	adds	r1, r2, r3
 8001ce4:	2364      	movs	r3, #100	@ 0x64
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f008 fabf 	bl	800a26c <HAL_UART_Transmit>
			iPos ++;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
	while(iPos >= 0 && iPos < _MAX_NUMBER_OF_CHARS){
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db02      	blt.n	8001d00 <vCommStateMachineSendMessage+0x74>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b63      	cmp	r3, #99	@ 0x63
 8001cfe:	ddcd      	ble.n	8001c9c <vCommStateMachineSendMessage+0x10>
		}
	}
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <vCommunicationInit>:
//
// INPUT PARAMS: n/a
//
// OUTPUT PARAMS: n/a
// ********************************************** //
void vCommunicationInit(UART_HandleTypeDef * huartController) {
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	pControlComm = huartController;
 8001d10:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <vCommunicationInit+0x3c>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 10; i++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	e007      	b.n	8001d2c <vCommunicationInit+0x24>
		cNumeroString[i] = 0;
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <vCommunicationInit+0x40>)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4413      	add	r3, r2
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b09      	cmp	r3, #9
 8001d30:	ddf4      	ble.n	8001d1c <vCommunicationInit+0x14>

	ucInputChar = 0;
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <vCommunicationInit+0x44>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	200002b4 	.word	0x200002b4
 8001d48:	20000244 	.word	0x20000244
 8001d4c:	20000241 	.word	0x20000241

08001d50 <pCommunicationFloatToString>:
// INPUT PARAMS: num - numero a ser convertido
//               nCasasDec - numero de casas decimais a serem consideradas
//
// OUTPUT PARAMS: char* - string contendo o num
// ********************************************** //
char* pCommunicationFloatToString(float num, int nCasasDec) { // n casas decimais // para numeros < 1
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d5a:	6038      	str	r0, [r7, #0]
	float fAux = num;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
	// Utilizado na quantidade de casas que a string vai ter
	int iN = nCasasDec;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	623b      	str	r3, [r7, #32]
	int iPos = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
	// "mapping" para facilitar na adicao de char na string
	char pNumberToChar[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8001d68:	4a4f      	ldr	r2, [pc, #316]	@ (8001ea8 <pCommunicationFloatToString+0x158>)
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d70:	c303      	stmia	r3!, {r0, r1}
 8001d72:	801a      	strh	r2, [r3, #0]

	// Limpa a string global
	for (int i = 0; i < 100; i++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	e007      	b.n	8001d8a <pCommunicationFloatToString+0x3a>
		pOutputString[i] = 0;
 8001d7a:	4a4c      	ldr	r2, [pc, #304]	@ (8001eac <pCommunicationFloatToString+0x15c>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	4413      	add	r3, r2
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	3301      	adds	r3, #1
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2b63      	cmp	r3, #99	@ 0x63
 8001d8e:	ddf4      	ble.n	8001d7a <pCommunicationFloatToString+0x2a>

	// Caso float negativo, adiciona '-' na string
	if (fAux < 0) {
 8001d90:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9c:	d50d      	bpl.n	8001dba <pCommunicationFloatToString+0x6a>
		fAux = fAux*-1;
 8001d9e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001da2:	eef1 7a67 	vneg.f32	s15, s15
 8001da6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		pOutputString[iPos] = '-';
 8001daa:	4a40      	ldr	r2, [pc, #256]	@ (8001eac <pCommunicationFloatToString+0x15c>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	4413      	add	r3, r2
 8001db0:	222d      	movs	r2, #45	@ 0x2d
 8001db2:	701a      	strb	r2, [r3, #0]
		iPos++;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	3301      	adds	r3, #1
 8001db8:	61fb      	str	r3, [r7, #28]
	}

	// Caso menor que 1, adiciona 0 na string
	if (fAux < 1) {
 8001dba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001dbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	d507      	bpl.n	8001ddc <pCommunicationFloatToString+0x8c>
		pOutputString[iPos] = '0';
 8001dcc:	4a37      	ldr	r2, [pc, #220]	@ (8001eac <pCommunicationFloatToString+0x15c>)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	2230      	movs	r2, #48	@ 0x30
 8001dd4:	701a      	strb	r2, [r3, #0]
		iPos++;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
	}

	// Move a virgula do numero ate que fique menor que 1
	while (fAux >= 1) {
 8001ddc:	e00a      	b.n	8001df4 <pCommunicationFloatToString+0xa4>
		fAux = fAux/10;
 8001dde:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001de2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001de6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		iN++;
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	3301      	adds	r3, #1
 8001df2:	623b      	str	r3, [r7, #32]
	while (fAux >= 1) {
 8001df4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001df8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	daeb      	bge.n	8001dde <pCommunicationFloatToString+0x8e>
	}

	// Enquanto ainda nao tiver preenchido o numero de casas desejadas
	while (iN > 0) {
 8001e06:	e040      	b.n	8001e8a <pCommunicationFloatToString+0x13a>
		fAux = fAux*10;
 8001e08:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e0c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e14:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		// Seleciona o numero da enesima posicao
		int iNumber = floor(fmod(fAux, 10));
 8001e18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e1a:	f7fe fbbd 	bl	8000598 <__aeabi_f2d>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8001ea0 <pCommunicationFloatToString+0x150>
 8001e26:	ec43 2b10 	vmov	d0, r2, r3
 8001e2a:	f00d fae1 	bl	800f3f0 <fmod>
 8001e2e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e32:	eef0 7a60 	vmov.f32	s15, s1
 8001e36:	eeb0 0a47 	vmov.f32	s0, s14
 8001e3a:	eef0 0a67 	vmov.f32	s1, s15
 8001e3e:	f00d fb07 	bl	800f450 <floor>
 8001e42:	ec53 2b10 	vmov	r2, r3, d0
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fead 	bl	8000ba8 <__aeabi_d2iz>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	617b      	str	r3, [r7, #20]
		// Adiciona virgula na posicao correta
		if (iN == nCasasDec) {
 8001e52:	6a3a      	ldr	r2, [r7, #32]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d107      	bne.n	8001e6a <pCommunicationFloatToString+0x11a>
			pOutputString[iPos] = ',';
 8001e5a:	4a14      	ldr	r2, [pc, #80]	@ (8001eac <pCommunicationFloatToString+0x15c>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	4413      	add	r3, r2
 8001e60:	222c      	movs	r2, #44	@ 0x2c
 8001e62:	701a      	strb	r2, [r3, #0]
			iPos++;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	3301      	adds	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
		}

		// Adiciona char igual ao numero, na string de retorno
		pOutputString[iPos] = pNumberToChar[iNumber];
 8001e6a:	f107 0208 	add.w	r2, r7, #8
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	4413      	add	r3, r2
 8001e72:	7819      	ldrb	r1, [r3, #0]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <pCommunicationFloatToString+0x15c>)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	4413      	add	r3, r2
 8001e7a:	460a      	mov	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
		iPos++;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3301      	adds	r3, #1
 8001e82:	61fb      	str	r3, [r7, #28]
		iN--;
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	623b      	str	r3, [r7, #32]
	while (iN > 0) {
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	dcbb      	bgt.n	8001e08 <pCommunicationFloatToString+0xb8>
	}

	return &pOutputString;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <pCommunicationFloatToString+0x15c>)
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3728      	adds	r7, #40	@ 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	40240000 	.word	0x40240000
 8001ea8:	0800f7ec 	.word	0x0800f7ec
 8001eac:	20000250 	.word	0x20000250

08001eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001eb6:	4b16      	ldr	r3, [pc, #88]	@ (8001f10 <MX_DMA_Init+0x60>)
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eba:	4a15      	ldr	r2, [pc, #84]	@ (8001f10 <MX_DMA_Init+0x60>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ec2:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <MX_DMA_Init+0x60>)
 8001ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ece:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <MX_DMA_Init+0x60>)
 8001ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8001f10 <MX_DMA_Init+0x60>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001eda:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <MX_DMA_Init+0x60>)
 8001edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2105      	movs	r1, #5
 8001eea:	200d      	movs	r0, #13
 8001eec:	f002 fdc3 	bl	8004a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ef0:	200d      	movs	r0, #13
 8001ef2:	f002 fdda 	bl	8004aaa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2105      	movs	r1, #5
 8001efa:	200e      	movs	r0, #14
 8001efc:	f002 fdbb 	bl	8004a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f00:	200e      	movs	r0, #14
 8001f02:	f002 fdd2 	bl	8004aaa <HAL_NVIC_EnableIRQ>

}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000

08001f14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002018 <MX_GPIO_Init+0x104>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2e:	4a3a      	ldr	r2, [pc, #232]	@ (8002018 <MX_GPIO_Init+0x104>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f36:	4b38      	ldr	r3, [pc, #224]	@ (8002018 <MX_GPIO_Init+0x104>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f42:	4b35      	ldr	r3, [pc, #212]	@ (8002018 <MX_GPIO_Init+0x104>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f46:	4a34      	ldr	r2, [pc, #208]	@ (8002018 <MX_GPIO_Init+0x104>)
 8001f48:	f043 0320 	orr.w	r3, r3, #32
 8001f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f4e:	4b32      	ldr	r3, [pc, #200]	@ (8002018 <MX_GPIO_Init+0x104>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f52:	f003 0320 	and.w	r3, r3, #32
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002018 <MX_GPIO_Init+0x104>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8002018 <MX_GPIO_Init+0x104>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f66:	4b2c      	ldr	r3, [pc, #176]	@ (8002018 <MX_GPIO_Init+0x104>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f72:	4b29      	ldr	r3, [pc, #164]	@ (8002018 <MX_GPIO_Init+0x104>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f76:	4a28      	ldr	r2, [pc, #160]	@ (8002018 <MX_GPIO_Init+0x104>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f7e:	4b26      	ldr	r3, [pc, #152]	@ (8002018 <MX_GPIO_Init+0x104>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Motor_Dir_IN2_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 6142 	mov.w	r1, #3104	@ 0xc20
 8001f90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f94:	f003 fa74 	bl	8005480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Esq_IN3_Pin|Motor_Dir_IN1_Pin|Motor_Esq_IN4_Pin, GPIO_PIN_RESET);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f44f 5194 	mov.w	r1, #4736	@ 0x1280
 8001f9e:	481f      	ldr	r0, [pc, #124]	@ (800201c <MX_GPIO_Init+0x108>)
 8001fa0:	f003 fa6e 	bl	8005480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001faa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4819      	ldr	r0, [pc, #100]	@ (8002020 <MX_GPIO_Init+0x10c>)
 8001fbc:	f003 f8de 	bl	800517c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Motor_Dir_IN2_Pin|RED_LED_Pin;
 8001fc0:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8001fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fdc:	f003 f8ce 	bl	800517c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN3_Pin|Motor_Dir_IN1_Pin|Motor_Esq_IN4_Pin;
 8001fe0:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8001fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4808      	ldr	r0, [pc, #32]	@ (800201c <MX_GPIO_Init+0x108>)
 8001ffa:	f003 f8bf 	bl	800517c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2103      	movs	r1, #3
 8002002:	2028      	movs	r0, #40	@ 0x28
 8002004:	f002 fd37 	bl	8004a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002008:	2028      	movs	r0, #40	@ 0x28
 800200a:	f002 fd4e 	bl	8004aaa <HAL_NVIC_EnableIRQ>

}
 800200e:	bf00      	nop
 8002010:	3728      	adds	r7, #40	@ 0x28
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	48000400 	.word	0x48000400
 8002020:	48000800 	.word	0x48000800

08002024 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002028:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <MX_I2C2_Init+0x74>)
 800202a:	4a1c      	ldr	r2, [pc, #112]	@ (800209c <MX_I2C2_Init+0x78>)
 800202c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 800202e:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <MX_I2C2_Init+0x74>)
 8002030:	4a1b      	ldr	r2, [pc, #108]	@ (80020a0 <MX_I2C2_Init+0x7c>)
 8002032:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002034:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <MX_I2C2_Init+0x74>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800203a:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <MX_I2C2_Init+0x74>)
 800203c:	2201      	movs	r2, #1
 800203e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002040:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <MX_I2C2_Init+0x74>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002046:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <MX_I2C2_Init+0x74>)
 8002048:	2200      	movs	r2, #0
 800204a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800204c:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <MX_I2C2_Init+0x74>)
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002052:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <MX_I2C2_Init+0x74>)
 8002054:	2200      	movs	r2, #0
 8002056:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <MX_I2C2_Init+0x74>)
 800205a:	2200      	movs	r2, #0
 800205c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800205e:	480e      	ldr	r0, [pc, #56]	@ (8002098 <MX_I2C2_Init+0x74>)
 8002060:	f003 fa3e 	bl	80054e0 <HAL_I2C_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800206a:	f000 ff58 	bl	8002f1e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800206e:	2100      	movs	r1, #0
 8002070:	4809      	ldr	r0, [pc, #36]	@ (8002098 <MX_I2C2_Init+0x74>)
 8002072:	f005 f845 	bl	8007100 <HAL_I2CEx_ConfigAnalogFilter>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800207c:	f000 ff4f 	bl	8002f1e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002080:	2100      	movs	r1, #0
 8002082:	4805      	ldr	r0, [pc, #20]	@ (8002098 <MX_I2C2_Init+0x74>)
 8002084:	f005 f887 	bl	8007196 <HAL_I2CEx_ConfigDigitalFilter>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800208e:	f000 ff46 	bl	8002f1e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200002b8 	.word	0x200002b8
 800209c:	40005800 	.word	0x40005800
 80020a0:	30a0a7fb 	.word	0x30a0a7fb

080020a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b0a0      	sub	sp, #128	@ 0x80
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020bc:	f107 0318 	add.w	r3, r7, #24
 80020c0:	2254      	movs	r2, #84	@ 0x54
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f00b f908 	bl	800d2da <memset>
  if(i2cHandle->Instance==I2C2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a5f      	ldr	r2, [pc, #380]	@ (800224c <HAL_I2C_MspInit+0x1a8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	f040 80b6 	bne.w	8002242 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80020d6:	2380      	movs	r3, #128	@ 0x80
 80020d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80020da:	2300      	movs	r3, #0
 80020dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020de:	f107 0318 	add.w	r3, r7, #24
 80020e2:	4618      	mov	r0, r3
 80020e4:	f005 fe86 	bl	8007df4 <HAL_RCCEx_PeriphCLKConfig>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020ee:	f000 ff16 	bl	8002f1e <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f2:	4b57      	ldr	r3, [pc, #348]	@ (8002250 <HAL_I2C_MspInit+0x1ac>)
 80020f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f6:	4a56      	ldr	r2, [pc, #344]	@ (8002250 <HAL_I2C_MspInit+0x1ac>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020fe:	4b54      	ldr	r3, [pc, #336]	@ (8002250 <HAL_I2C_MspInit+0x1ac>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	4b51      	ldr	r3, [pc, #324]	@ (8002250 <HAL_I2C_MspInit+0x1ac>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	4a50      	ldr	r2, [pc, #320]	@ (8002250 <HAL_I2C_MspInit+0x1ac>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002116:	4b4e      	ldr	r3, [pc, #312]	@ (8002250 <HAL_I2C_MspInit+0x1ac>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002122:	2310      	movs	r3, #16
 8002124:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002126:	2312      	movs	r3, #18
 8002128:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002132:	2304      	movs	r3, #4
 8002134:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002136:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800213a:	4619      	mov	r1, r3
 800213c:	4845      	ldr	r0, [pc, #276]	@ (8002254 <HAL_I2C_MspInit+0x1b0>)
 800213e:	f003 f81d 	bl	800517c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002142:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002146:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002148:	2312      	movs	r3, #18
 800214a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002154:	2304      	movs	r3, #4
 8002156:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800215c:	4619      	mov	r1, r3
 800215e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002162:	f003 f80b 	bl	800517c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002166:	4b3a      	ldr	r3, [pc, #232]	@ (8002250 <HAL_I2C_MspInit+0x1ac>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216a:	4a39      	ldr	r2, [pc, #228]	@ (8002250 <HAL_I2C_MspInit+0x1ac>)
 800216c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002170:	6593      	str	r3, [r2, #88]	@ 0x58
 8002172:	4b37      	ldr	r3, [pc, #220]	@ (8002250 <HAL_I2C_MspInit+0x1ac>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel3;
 800217e:	4b36      	ldr	r3, [pc, #216]	@ (8002258 <HAL_I2C_MspInit+0x1b4>)
 8002180:	4a36      	ldr	r2, [pc, #216]	@ (800225c <HAL_I2C_MspInit+0x1b8>)
 8002182:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8002184:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <HAL_I2C_MspInit+0x1b4>)
 8002186:	2212      	movs	r2, #18
 8002188:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800218a:	4b33      	ldr	r3, [pc, #204]	@ (8002258 <HAL_I2C_MspInit+0x1b4>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002190:	4b31      	ldr	r3, [pc, #196]	@ (8002258 <HAL_I2C_MspInit+0x1b4>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002196:	4b30      	ldr	r3, [pc, #192]	@ (8002258 <HAL_I2C_MspInit+0x1b4>)
 8002198:	2280      	movs	r2, #128	@ 0x80
 800219a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219c:	4b2e      	ldr	r3, [pc, #184]	@ (8002258 <HAL_I2C_MspInit+0x1b4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002258 <HAL_I2C_MspInit+0x1b4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80021a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002258 <HAL_I2C_MspInit+0x1b4>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002258 <HAL_I2C_MspInit+0x1b4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80021b4:	4828      	ldr	r0, [pc, #160]	@ (8002258 <HAL_I2C_MspInit+0x1b4>)
 80021b6:	f002 fca1 	bl	8004afc <HAL_DMA_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 80021c0:	f000 fead 	bl	8002f1e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a24      	ldr	r2, [pc, #144]	@ (8002258 <HAL_I2C_MspInit+0x1b4>)
 80021c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021ca:	4a23      	ldr	r2, [pc, #140]	@ (8002258 <HAL_I2C_MspInit+0x1b4>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80021d0:	4b23      	ldr	r3, [pc, #140]	@ (8002260 <HAL_I2C_MspInit+0x1bc>)
 80021d2:	4a24      	ldr	r2, [pc, #144]	@ (8002264 <HAL_I2C_MspInit+0x1c0>)
 80021d4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 80021d6:	4b22      	ldr	r3, [pc, #136]	@ (8002260 <HAL_I2C_MspInit+0x1bc>)
 80021d8:	2213      	movs	r2, #19
 80021da:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021dc:	4b20      	ldr	r3, [pc, #128]	@ (8002260 <HAL_I2C_MspInit+0x1bc>)
 80021de:	2210      	movs	r2, #16
 80021e0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002260 <HAL_I2C_MspInit+0x1bc>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002260 <HAL_I2C_MspInit+0x1bc>)
 80021ea:	2280      	movs	r2, #128	@ 0x80
 80021ec:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002260 <HAL_I2C_MspInit+0x1bc>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <HAL_I2C_MspInit+0x1bc>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80021fa:	4b19      	ldr	r3, [pc, #100]	@ (8002260 <HAL_I2C_MspInit+0x1bc>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002200:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <HAL_I2C_MspInit+0x1bc>)
 8002202:	2200      	movs	r2, #0
 8002204:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002206:	4816      	ldr	r0, [pc, #88]	@ (8002260 <HAL_I2C_MspInit+0x1bc>)
 8002208:	f002 fc78 	bl	8004afc <HAL_DMA_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8002212:	f000 fe84 	bl	8002f1e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a11      	ldr	r2, [pc, #68]	@ (8002260 <HAL_I2C_MspInit+0x1bc>)
 800221a:	639a      	str	r2, [r3, #56]	@ 0x38
 800221c:	4a10      	ldr	r2, [pc, #64]	@ (8002260 <HAL_I2C_MspInit+0x1bc>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2105      	movs	r1, #5
 8002226:	2021      	movs	r0, #33	@ 0x21
 8002228:	f002 fc25 	bl	8004a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800222c:	2021      	movs	r0, #33	@ 0x21
 800222e:	f002 fc3c 	bl	8004aaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2105      	movs	r1, #5
 8002236:	2022      	movs	r0, #34	@ 0x22
 8002238:	f002 fc1d 	bl	8004a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800223c:	2022      	movs	r0, #34	@ 0x22
 800223e:	f002 fc34 	bl	8004aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002242:	bf00      	nop
 8002244:	3780      	adds	r7, #128	@ 0x80
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40005800 	.word	0x40005800
 8002250:	40021000 	.word	0x40021000
 8002254:	48000800 	.word	0x48000800
 8002258:	2000030c 	.word	0x2000030c
 800225c:	40020030 	.word	0x40020030
 8002260:	2000036c 	.word	0x2000036c
 8002264:	40020044 	.word	0x40020044

08002268 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         0 if success
 */
char lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	4608      	mov	r0, r1
 8002272:	4611      	mov	r1, r2
 8002274:	461a      	mov	r2, r3
 8002276:	4603      	mov	r3, r0
 8002278:	70fb      	strb	r3, [r7, #3]
 800227a:	460b      	mov	r3, r1
 800227c:	70bb      	strb	r3, [r7, #2]
 800227e:	4613      	mov	r3, r2
 8002280:	707b      	strb	r3, [r7, #1]

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8002282:	2300      	movs	r3, #0
 8002284:	733b      	strb	r3, [r7, #12]
    unsigned short usCont;

    lcdParams.hi2c      = hi2c;
 8002286:	4a53      	ldr	r2, [pc, #332]	@ (80023d4 <lcdInit+0x16c>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b50      	ldr	r3, [pc, #320]	@ (80023d4 <lcdInit+0x16c>)
 8002294:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8002296:	4a4f      	ldr	r2, [pc, #316]	@ (80023d4 <lcdInit+0x16c>)
 8002298:	78bb      	ldrb	r3, [r7, #2]
 800229a:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 800229c:	4a4d      	ldr	r2, [pc, #308]	@ (80023d4 <lcdInit+0x16c>)
 800229e:	787b      	ldrb	r3, [r7, #1]
 80022a0:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 80022a2:	4b4c      	ldr	r3, [pc, #304]	@ (80023d4 <lcdInit+0x16c>)
 80022a4:	2208      	movs	r2, #8
 80022a6:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 80022a8:	4b4b      	ldr	r3, [pc, #300]	@ (80023d8 <lcdInit+0x170>)
 80022aa:	2234      	movs	r2, #52	@ 0x34
 80022ac:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80022ae:	4b4a      	ldr	r3, [pc, #296]	@ (80023d8 <lcdInit+0x170>)
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	4b49      	ldr	r3, [pc, #292]	@ (80023d8 <lcdInit+0x170>)
 80022b4:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 80022b6:	4b48      	ldr	r3, [pc, #288]	@ (80023d8 <lcdInit+0x170>)
 80022b8:	2230      	movs	r2, #48	@ 0x30
 80022ba:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 80022bc:	2300      	movs	r3, #0
 80022be:	737b      	strb	r3, [r7, #13]
 80022c0:	e02f      	b.n	8002322 <lcdInit+0xba>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80022c2:	4b44      	ldr	r3, [pc, #272]	@ (80023d4 <lcdInit+0x16c>)
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	4b43      	ldr	r3, [pc, #268]	@ (80023d4 <lcdInit+0x16c>)
 80022c8:	799b      	ldrb	r3, [r3, #6]
 80022ca:	4619      	mov	r1, r3
 80022cc:	2303      	movs	r3, #3
 80022ce:	4a42      	ldr	r2, [pc, #264]	@ (80023d8 <lcdInit+0x170>)
 80022d0:	f003 f9a2 	bl	8005618 <HAL_I2C_Master_Transmit_DMA>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <lcdInit+0x76>
            return -1;
 80022da:	23ff      	movs	r3, #255	@ 0xff
 80022dc:	e076      	b.n	80023cc <lcdInit+0x164>
        }

        usCont = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	81fb      	strh	r3, [r7, #14]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80022e2:	e009      	b.n	80022f8 <lcdInit+0x90>
        	if(usCont++ == LCD_COMM_TIMEOUT)
 80022e4:	89fb      	ldrh	r3, [r7, #14]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	81fa      	strh	r2, [r7, #14]
 80022ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80022ec:	d101      	bne.n	80022f2 <lcdInit+0x8a>
        		return -1;
 80022ee:	23ff      	movs	r3, #255	@ 0xff
 80022f0:	e06c      	b.n	80023cc <lcdInit+0x164>
        	HAL_Delay(5);
 80022f2:	2005      	movs	r0, #5
 80022f4:	f002 fa9e 	bl	8004834 <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80022f8:	4b36      	ldr	r3, [pc, #216]	@ (80023d4 <lcdInit+0x16c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 fb7c 	bl	80059fa <HAL_I2C_GetState>
 8002302:	4603      	mov	r3, r0
 8002304:	2b20      	cmp	r3, #32
 8002306:	d1ed      	bne.n	80022e4 <lcdInit+0x7c>
        }

        if (i == 2) {
 8002308:	7b7b      	ldrb	r3, [r7, #13]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d103      	bne.n	8002316 <lcdInit+0xae>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
        	HAL_Delay(5);
 800230e:	2005      	movs	r0, #5
 8002310:	f002 fa90 	bl	8004834 <HAL_Delay>
 8002314:	e002      	b.n	800231c <lcdInit+0xb4>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
        	HAL_Delay(5);
 8002316:	2005      	movs	r0, #5
 8002318:	f002 fa8c 	bl	8004834 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 800231c:	7b7b      	ldrb	r3, [r7, #13]
 800231e:	3301      	adds	r3, #1
 8002320:	737b      	strb	r3, [r7, #13]
 8002322:	7b7b      	ldrb	r3, [r7, #13]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d9cc      	bls.n	80022c2 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8002328:	4b2b      	ldr	r3, [pc, #172]	@ (80023d8 <lcdInit+0x170>)
 800232a:	222c      	movs	r2, #44	@ 0x2c
 800232c:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 800232e:	4b2a      	ldr	r3, [pc, #168]	@ (80023d8 <lcdInit+0x170>)
 8002330:	781a      	ldrb	r2, [r3, #0]
 8002332:	4b29      	ldr	r3, [pc, #164]	@ (80023d8 <lcdInit+0x170>)
 8002334:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8002336:	4b28      	ldr	r3, [pc, #160]	@ (80023d8 <lcdInit+0x170>)
 8002338:	2228      	movs	r2, #40	@ 0x28
 800233a:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 800233c:	4b25      	ldr	r3, [pc, #148]	@ (80023d4 <lcdInit+0x16c>)
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <lcdInit+0x16c>)
 8002342:	799b      	ldrb	r3, [r3, #6]
 8002344:	4619      	mov	r1, r3
 8002346:	2303      	movs	r3, #3
 8002348:	4a23      	ldr	r2, [pc, #140]	@ (80023d8 <lcdInit+0x170>)
 800234a:	f003 f965 	bl	8005618 <HAL_I2C_Master_Transmit_DMA>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <lcdInit+0xf0>
        return -1;
 8002354:	23ff      	movs	r3, #255	@ 0xff
 8002356:	e039      	b.n	80023cc <lcdInit+0x164>
    }

    usCont = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800235c:	e009      	b.n	8002372 <lcdInit+0x10a>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 800235e:	89fb      	ldrh	r3, [r7, #14]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	81fa      	strh	r2, [r7, #14]
 8002364:	2bc8      	cmp	r3, #200	@ 0xc8
 8002366:	d101      	bne.n	800236c <lcdInit+0x104>
    		return -1;
 8002368:	23ff      	movs	r3, #255	@ 0xff
 800236a:	e02f      	b.n	80023cc <lcdInit+0x164>
    	HAL_Delay(5);
 800236c:	2005      	movs	r0, #5
 800236e:	f002 fa61 	bl	8004834 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8002372:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <lcdInit+0x16c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f003 fb3f 	bl	80059fa <HAL_I2C_GetState>
 800237c:	4603      	mov	r3, r0
 800237e:	2b20      	cmp	r3, #32
 8002380:	d1ed      	bne.n	800235e <lcdInit+0xf6>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8002382:	7b3b      	ldrb	r3, [r7, #12]
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	733b      	strb	r3, [r7, #12]

    if (lcdParams.lines > 1) {
 800238c:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <lcdInit+0x16c>)
 800238e:	791b      	ldrb	r3, [r3, #4]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d904      	bls.n	800239e <lcdInit+0x136>
        lcdData |= LCD_BIT_2LINE;
 8002394:	7b3b      	ldrb	r3, [r7, #12]
 8002396:	f043 0308 	orr.w	r3, r3, #8
 800239a:	b2db      	uxtb	r3, r3
 800239c:	733b      	strb	r3, [r7, #12]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	4619      	mov	r1, r3
 80023a4:	2000      	movs	r0, #0
 80023a6:	f000 f945 	bl	8002634 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 80023aa:	2101      	movs	r1, #1
 80023ac:	2001      	movs	r0, #1
 80023ae:	f000 f815 	bl	80023dc <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 80023b2:	2101      	movs	r1, #1
 80023b4:	2007      	movs	r0, #7
 80023b6:	f000 f811 	bl	80023dc <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 80023ba:	2101      	movs	r1, #1
 80023bc:	2002      	movs	r0, #2
 80023be:	f000 f80d 	bl	80023dc <lcdCommand>
    lcdCursorHome();
 80023c2:	2101      	movs	r1, #1
 80023c4:	2005      	movs	r0, #5
 80023c6:	f000 f809 	bl	80023dc <lcdCommand>

    return 0;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200003d4 	.word	0x200003d4
 80023d8:	200003cc 	.word	0x200003cc

080023dc <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          0 if success
 */
char lcdCommand(LCDCommands command, LCDParamsActions action) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	460a      	mov	r2, r1
 80023e6:	71fb      	strb	r3, [r7, #7]
 80023e8:	4613      	mov	r3, r2
 80023ea:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 80023f0:	79bb      	ldrb	r3, [r7, #6]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d064      	beq.n	80024c0 <lcdCommand+0xe4>
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	f040 80aa 	bne.w	8002550 <lcdCommand+0x174>
        case LCD_PARAM_SET:
            switch (command) {
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	3b01      	subs	r3, #1
 8002400:	2b07      	cmp	r3, #7
 8002402:	d85a      	bhi.n	80024ba <lcdCommand+0xde>
 8002404:	a201      	add	r2, pc, #4	@ (adr r2, 800240c <lcdCommand+0x30>)
 8002406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240a:	bf00      	nop
 800240c:	0800242d 	.word	0x0800242d
 8002410:	0800245d 	.word	0x0800245d
 8002414:	0800243d 	.word	0x0800243d
 8002418:	0800244d 	.word	0x0800244d
 800241c:	08002477 	.word	0x08002477
 8002420:	080024a1 	.word	0x080024a1
 8002424:	08002491 	.word	0x08002491
 8002428:	080024ab 	.word	0x080024ab
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 800242c:	4b5c      	ldr	r3, [pc, #368]	@ (80025a0 <lcdCommand+0x1c4>)
 800242e:	7a1b      	ldrb	r3, [r3, #8]
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b5a      	ldr	r3, [pc, #360]	@ (80025a0 <lcdCommand+0x1c4>)
 8002438:	721a      	strb	r2, [r3, #8]
                    break;
 800243a:	e040      	b.n	80024be <lcdCommand+0xe2>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 800243c:	4b58      	ldr	r3, [pc, #352]	@ (80025a0 <lcdCommand+0x1c4>)
 800243e:	7a1b      	ldrb	r3, [r3, #8]
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b56      	ldr	r3, [pc, #344]	@ (80025a0 <lcdCommand+0x1c4>)
 8002448:	721a      	strb	r2, [r3, #8]
                    break;
 800244a:	e038      	b.n	80024be <lcdCommand+0xe2>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 800244c:	4b54      	ldr	r3, [pc, #336]	@ (80025a0 <lcdCommand+0x1c4>)
 800244e:	7a1b      	ldrb	r3, [r3, #8]
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b52      	ldr	r3, [pc, #328]	@ (80025a0 <lcdCommand+0x1c4>)
 8002458:	721a      	strb	r2, [r3, #8]
                    break;
 800245a:	e030      	b.n	80024be <lcdCommand+0xe2>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8002460:	f107 030f 	add.w	r3, r7, #15
 8002464:	4619      	mov	r1, r3
 8002466:	2000      	movs	r0, #0
 8002468:	f000 f8e4 	bl	8002634 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(5);
 800246c:	2005      	movs	r0, #5
 800246e:	f002 f9e1 	bl	8004834 <HAL_Delay>
                        return 0;
 8002472:	2300      	movs	r3, #0
 8002474:	e090      	b.n	8002598 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8002476:	2302      	movs	r3, #2
 8002478:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 800247a:	f107 030f 	add.w	r3, r7, #15
 800247e:	4619      	mov	r1, r3
 8002480:	2000      	movs	r0, #0
 8002482:	f000 f8d7 	bl	8002634 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(5);
 8002486:	2005      	movs	r0, #5
 8002488:	f002 f9d4 	bl	8004834 <HAL_Delay>
                        return 0;
 800248c:	2300      	movs	r3, #0
 800248e:	e083      	b.n	8002598 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8002490:	4b43      	ldr	r3, [pc, #268]	@ (80025a0 <lcdCommand+0x1c4>)
 8002492:	7a5b      	ldrb	r3, [r3, #9]
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4b41      	ldr	r3, [pc, #260]	@ (80025a0 <lcdCommand+0x1c4>)
 800249c:	725a      	strb	r2, [r3, #9]
                    break;
 800249e:	e00e      	b.n	80024be <lcdCommand+0xe2>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 80024a0:	4b3f      	ldr	r3, [pc, #252]	@ (80025a0 <lcdCommand+0x1c4>)
 80024a2:	7a5a      	ldrb	r2, [r3, #9]
 80024a4:	4b3e      	ldr	r3, [pc, #248]	@ (80025a0 <lcdCommand+0x1c4>)
 80024a6:	725a      	strb	r2, [r3, #9]
                    break;
 80024a8:	e009      	b.n	80024be <lcdCommand+0xe2>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 80024aa:	4b3d      	ldr	r3, [pc, #244]	@ (80025a0 <lcdCommand+0x1c4>)
 80024ac:	7a5b      	ldrb	r3, [r3, #9]
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	4b3a      	ldr	r3, [pc, #232]	@ (80025a0 <lcdCommand+0x1c4>)
 80024b6:	725a      	strb	r2, [r3, #9]
                    break;
 80024b8:	e001      	b.n	80024be <lcdCommand+0xe2>

                default:
                    return -1;
 80024ba:	23ff      	movs	r3, #255	@ 0xff
 80024bc:	e06c      	b.n	8002598 <lcdCommand+0x1bc>
            }

            break;
 80024be:	e049      	b.n	8002554 <lcdCommand+0x178>

        case LCD_PARAM_UNSET:
            switch (command) {
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	2b07      	cmp	r3, #7
 80024c6:	d840      	bhi.n	800254a <lcdCommand+0x16e>
 80024c8:	a201      	add	r2, pc, #4	@ (adr r2, 80024d0 <lcdCommand+0xf4>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	080024f1 	.word	0x080024f1
 80024d4:	0800254b 	.word	0x0800254b
 80024d8:	08002501 	.word	0x08002501
 80024dc:	08002511 	.word	0x08002511
 80024e0:	0800254b 	.word	0x0800254b
 80024e4:	08002531 	.word	0x08002531
 80024e8:	08002521 	.word	0x08002521
 80024ec:	0800253b 	.word	0x0800253b
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 80024f0:	4b2b      	ldr	r3, [pc, #172]	@ (80025a0 <lcdCommand+0x1c4>)
 80024f2:	7a1b      	ldrb	r3, [r3, #8]
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b29      	ldr	r3, [pc, #164]	@ (80025a0 <lcdCommand+0x1c4>)
 80024fc:	721a      	strb	r2, [r3, #8]
                    break;
 80024fe:	e026      	b.n	800254e <lcdCommand+0x172>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8002500:	4b27      	ldr	r3, [pc, #156]	@ (80025a0 <lcdCommand+0x1c4>)
 8002502:	7a1b      	ldrb	r3, [r3, #8]
 8002504:	f023 0302 	bic.w	r3, r3, #2
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <lcdCommand+0x1c4>)
 800250c:	721a      	strb	r2, [r3, #8]
                    break;
 800250e:	e01e      	b.n	800254e <lcdCommand+0x172>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8002510:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <lcdCommand+0x1c4>)
 8002512:	7a1b      	ldrb	r3, [r3, #8]
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <lcdCommand+0x1c4>)
 800251c:	721a      	strb	r2, [r3, #8]
                    break;
 800251e:	e016      	b.n	800254e <lcdCommand+0x172>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8002520:	4b1f      	ldr	r3, [pc, #124]	@ (80025a0 <lcdCommand+0x1c4>)
 8002522:	7a5b      	ldrb	r3, [r3, #9]
 8002524:	f023 0302 	bic.w	r3, r3, #2
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b1d      	ldr	r3, [pc, #116]	@ (80025a0 <lcdCommand+0x1c4>)
 800252c:	725a      	strb	r2, [r3, #9]
                    break;
 800252e:	e00e      	b.n	800254e <lcdCommand+0x172>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8002530:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <lcdCommand+0x1c4>)
 8002532:	7a5a      	ldrb	r2, [r3, #9]
 8002534:	4b1a      	ldr	r3, [pc, #104]	@ (80025a0 <lcdCommand+0x1c4>)
 8002536:	725a      	strb	r2, [r3, #9]
                    break;
 8002538:	e009      	b.n	800254e <lcdCommand+0x172>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 800253a:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <lcdCommand+0x1c4>)
 800253c:	7a5b      	ldrb	r3, [r3, #9]
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b16      	ldr	r3, [pc, #88]	@ (80025a0 <lcdCommand+0x1c4>)
 8002546:	725a      	strb	r2, [r3, #9]
                    break;
 8002548:	e001      	b.n	800254e <lcdCommand+0x172>

                default:
                    return -1;
 800254a:	23ff      	movs	r3, #255	@ 0xff
 800254c:	e024      	b.n	8002598 <lcdCommand+0x1bc>
            }

            break;
 800254e:	e001      	b.n	8002554 <lcdCommand+0x178>

        default:
            return -1;
 8002550:	23ff      	movs	r3, #255	@ 0xff
 8002552:	e021      	b.n	8002598 <lcdCommand+0x1bc>
    }

    /* Now lets send the command */
    switch (command) {
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	2b08      	cmp	r3, #8
 8002558:	dc16      	bgt.n	8002588 <lcdCommand+0x1ac>
 800255a:	2b06      	cmp	r3, #6
 800255c:	da0d      	bge.n	800257a <lcdCommand+0x19e>
 800255e:	2b01      	cmp	r3, #1
 8002560:	d004      	beq.n	800256c <lcdCommand+0x190>
 8002562:	2b00      	cmp	r3, #0
 8002564:	dd10      	ble.n	8002588 <lcdCommand+0x1ac>
 8002566:	3b03      	subs	r3, #3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d80d      	bhi.n	8002588 <lcdCommand+0x1ac>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <lcdCommand+0x1c4>)
 800256e:	7a1b      	ldrb	r3, [r3, #8]
 8002570:	f043 0308 	orr.w	r3, r3, #8
 8002574:	b2db      	uxtb	r3, r3
 8002576:	73fb      	strb	r3, [r7, #15]
            break;
 8002578:	e007      	b.n	800258a <lcdCommand+0x1ae>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <lcdCommand+0x1c4>)
 800257c:	7a5b      	ldrb	r3, [r3, #9]
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	b2db      	uxtb	r3, r3
 8002584:	73fb      	strb	r3, [r7, #15]
            break;
 8002586:	e000      	b.n	800258a <lcdCommand+0x1ae>

        default:
            break;
 8002588:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 800258a:	f107 030f 	add.w	r3, r7, #15
 800258e:	4619      	mov	r1, r3
 8002590:	2000      	movs	r0, #0
 8002592:	f000 f84f 	bl	8002634 <lcdWriteByte>
 8002596:	4603      	mov	r3, r0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200003d4 	.word	0x200003d4

080025a4 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        0 if success
 */
char lcdSetCursorPosition(uint8_t column, uint8_t line) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	460a      	mov	r2, r1
 80025ae:	71fb      	strb	r3, [r7, #7]
 80025b0:	4613      	mov	r3, r2
 80025b2:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 80025b4:	4b0f      	ldr	r3, [pc, #60]	@ (80025f4 <lcdSetCursorPosition+0x50>)
 80025b6:	791b      	ldrb	r3, [r3, #4]
 80025b8:	79ba      	ldrb	r2, [r7, #6]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d303      	bcc.n	80025c6 <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 80025be:	4b0d      	ldr	r3, [pc, #52]	@ (80025f4 <lcdSetCursorPosition+0x50>)
 80025c0:	791b      	ldrb	r3, [r3, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 80025c6:	79bb      	ldrb	r3, [r7, #6]
 80025c8:	4a0b      	ldr	r2, [pc, #44]	@ (80025f8 <lcdSetCursorPosition+0x54>)
 80025ca:	5cd2      	ldrb	r2, [r2, r3]
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	4413      	add	r3, r2
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 80025de:	f107 030f 	add.w	r3, r7, #15
 80025e2:	4619      	mov	r1, r3
 80025e4:	2000      	movs	r0, #0
 80025e6:	f000 f825 	bl	8002634 <lcdWriteByte>
 80025ea:	4603      	mov	r3, r0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200003d4 	.word	0x200003d4
 80025f8:	0800f810 	.word	0x0800f810

080025fc <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        0 if success
 */
char lcdPrintStr(uint8_t * data, uint8_t length) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	e009      	b.n	8002622 <lcdPrintStr+0x26>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == -1) {
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	4619      	mov	r1, r3
 8002616:	2001      	movs	r0, #1
 8002618:	f000 f80c 	bl	8002634 <lcdWriteByte>
    for (uint8_t i = 0; i < length; ++i) {
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	3301      	adds	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	429a      	cmp	r2, r3
 8002628:	d3f1      	bcc.n	800260e <lcdPrintStr+0x12>
            return -1;
        }
    }

    return 0;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          0 if success
 */
static char lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
	unsigned short usCont;

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8002640:	4b38      	ldr	r3, [pc, #224]	@ (8002724 <lcdWriteByte+0xf0>)
 8002642:	79da      	ldrb	r2, [r3, #7]
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	4313      	orrs	r3, r2
 8002648:	b2da      	uxtb	r2, r3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f023 030f 	bic.w	r3, r3, #15
 8002652:	b2db      	uxtb	r3, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4b32      	ldr	r3, [pc, #200]	@ (8002728 <lcdWriteByte+0xf4>)
 8002660:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8002662:	4b31      	ldr	r3, [pc, #196]	@ (8002728 <lcdWriteByte+0xf4>)
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	4b30      	ldr	r3, [pc, #192]	@ (8002728 <lcdWriteByte+0xf4>)
 8002668:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 800266a:	4b2e      	ldr	r3, [pc, #184]	@ (8002724 <lcdWriteByte+0xf0>)
 800266c:	79da      	ldrb	r2, [r3, #7]
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	4313      	orrs	r3, r2
 8002672:	b2db      	uxtb	r3, r3
 8002674:	b25a      	sxtb	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b25b      	sxtb	r3, r3
 800267c:	f023 030f 	bic.w	r3, r3, #15
 8002680:	b25b      	sxtb	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b25b      	sxtb	r3, r3
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b27      	ldr	r3, [pc, #156]	@ (8002728 <lcdWriteByte+0xf4>)
 800268a:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 800268c:	4b25      	ldr	r3, [pc, #148]	@ (8002724 <lcdWriteByte+0xf0>)
 800268e:	79da      	ldrb	r2, [r3, #7]
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	4313      	orrs	r3, r2
 8002694:	b2da      	uxtb	r2, r3
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	b2db      	uxtb	r3, r3
 800269e:	4313      	orrs	r3, r2
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <lcdWriteByte+0xf4>)
 80026aa:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 80026ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002728 <lcdWriteByte+0xf4>)
 80026ae:	78da      	ldrb	r2, [r3, #3]
 80026b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002728 <lcdWriteByte+0xf4>)
 80026b2:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <lcdWriteByte+0xf0>)
 80026b6:	79da      	ldrb	r2, [r3, #7]
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	b25a      	sxtb	r2, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b25b      	sxtb	r3, r3
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4b16      	ldr	r3, [pc, #88]	@ (8002728 <lcdWriteByte+0xf4>)
 80026d0:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 80026d2:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <lcdWriteByte+0xf0>)
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <lcdWriteByte+0xf0>)
 80026d8:	799b      	ldrb	r3, [r3, #6]
 80026da:	4619      	mov	r1, r3
 80026dc:	2306      	movs	r3, #6
 80026de:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <lcdWriteByte+0xf4>)
 80026e0:	f002 ff9a 	bl	8005618 <HAL_I2C_Master_Transmit_DMA>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <lcdWriteByte+0xba>
        return -1;
 80026ea:	23ff      	movs	r3, #255	@ 0xff
 80026ec:	e015      	b.n	800271a <lcdWriteByte+0xe6>
    }

    usCont = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80026f2:	e009      	b.n	8002708 <lcdWriteByte+0xd4>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 80026f4:	89fb      	ldrh	r3, [r7, #14]
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	81fa      	strh	r2, [r7, #14]
 80026fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80026fc:	d101      	bne.n	8002702 <lcdWriteByte+0xce>
    		return -1;
 80026fe:	23ff      	movs	r3, #255	@ 0xff
 8002700:	e00b      	b.n	800271a <lcdWriteByte+0xe6>
    	HAL_Delay(1);
 8002702:	2001      	movs	r0, #1
 8002704:	f002 f896 	bl	8004834 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8002708:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <lcdWriteByte+0xf0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f003 f974 	bl	80059fa <HAL_I2C_GetState>
 8002712:	4603      	mov	r3, r0
 8002714:	2b20      	cmp	r3, #32
 8002716:	d1ed      	bne.n	80026f4 <lcdWriteByte+0xc0>
    }

    return 0;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200003d4 	.word	0x200003d4
 8002728:	200003cc 	.word	0x200003cc

0800272c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800272c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272e:	ed2d 8b02 	vpush	{d8}
 8002732:	f5ad 7d69 	sub.w	sp, sp, #932	@ 0x3a4
 8002736:	af6e      	add	r7, sp, #440	@ 0x1b8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002738:	f002 f80b 	bl	8004752 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800273c:	f000 f910 	bl	8002960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002740:	f7ff fbe8 	bl	8001f14 <MX_GPIO_Init>
  MX_DMA_Init();
 8002744:	f7ff fbb4 	bl	8001eb0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002748:	f001 fdda 	bl	8004300 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 800274c:	f001 f920 	bl	8003990 <MX_TIM3_Init>
  MX_TIM20_Init();
 8002750:	f001 faaa 	bl	8003ca8 <MX_TIM20_Init>
  MX_I2C2_Init();
 8002754:	f7ff fc66 	bl	8002024 <MX_I2C2_Init>
  MX_TIM1_Init();
 8002758:	f001 f82c 	bl	80037b4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800275c:	f001 fe66 	bl	800442c <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8002760:	f001 f988 	bl	8003a74 <MX_TIM5_Init>
  MX_TIM16_Init();
 8002764:	f001 fa0c 	bl	8003b80 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002768:	f001 fa54 	bl	8003c14 <MX_TIM17_Init>
  MX_TIM6_Init();
 800276c:	f001 f9d0 	bl	8003b10 <MX_TIM6_Init>
  MX_TIM2_Init();
 8002770:	f001 f8c0 	bl	80038f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002774:	f001 fe0e 	bl	8004394 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(&hi2c2, (uint8_t)0x27, (uint8_t)2, (uint8_t)16);
 8002778:	2310      	movs	r3, #16
 800277a:	2202      	movs	r2, #2
 800277c:	2127      	movs	r1, #39	@ 0x27
 800277e:	4865      	ldr	r0, [pc, #404]	@ (8002914 <main+0x1e8>)
 8002780:	f7ff fd72 	bl	8002268 <lcdInit>
  vUltrassonicoInit(pTimerEcoUltrassonicoFrontal,pTimerPWMTrigger) ;
 8002784:	4b64      	ldr	r3, [pc, #400]	@ (8002918 <main+0x1ec>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a64      	ldr	r2, [pc, #400]	@ (800291c <main+0x1f0>)
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f001 fd58 	bl	8004244 <vUltrassonicoInit>
  vCommunicationInit(pBleCtrlMain);
 8002794:	4b62      	ldr	r3, [pc, #392]	@ (8002920 <main+0x1f4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fab5 	bl	8001d08 <vCommunicationInit>

  vMotorsInit(pTimPWMMotor, pTimDurationMotor);
 800279e:	4b61      	ldr	r3, [pc, #388]	@ (8002924 <main+0x1f8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a61      	ldr	r2, [pc, #388]	@ (8002928 <main+0x1fc>)
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fbbf 	bl	8002f2c <vMotorsInit>
  vCommStateMachineInit(pBleCtrlMain, pV2V);
 80027ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002920 <main+0x1f4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a5e      	ldr	r2, [pc, #376]	@ (800292c <main+0x200>)
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe fdd5 	bl	8001368 <vCommStateMachineInit>

  vTimerInit();
 80027be:	f001 fcd5 	bl	800416c <vTimerInit>
  iSetTimer(100);
 80027c2:	2064      	movs	r0, #100	@ 0x64
 80027c4:	f001 fcf8 	bl	80041b8 <iSetTimer>

// lider
//  xPidMotorLeft = vPidInit(xPidMotorLeft, 0.005, 0.06, 0, 100, 1);
//  xPidMotorRight = vPidInit(xPidMotorRight, 0.005, 0.06, 0, 100, 1);
// seguidor
   xPidMotorLeft = vPidInit(xPidMotorLeft, fLeftMotorKp, fLeftMotorKi, 0, 100, 1);
 80027c8:	4b59      	ldr	r3, [pc, #356]	@ (8002930 <main+0x204>)
 80027ca:	ed93 8a00 	vldr	s16, [r3]
 80027ce:	4b59      	ldr	r3, [pc, #356]	@ (8002934 <main+0x208>)
 80027d0:	edd3 8a00 	vldr	s17, [r3]
 80027d4:	4e58      	ldr	r6, [pc, #352]	@ (8002938 <main+0x20c>)
 80027d6:	463d      	mov	r5, r7
 80027d8:	4c57      	ldr	r4, [pc, #348]	@ (8002938 <main+0x20c>)
 80027da:	2364      	movs	r3, #100	@ 0x64
 80027dc:	936c      	str	r3, [sp, #432]	@ 0x1b0
 80027de:	4668      	mov	r0, sp
 80027e0:	f104 030c 	add.w	r3, r4, #12
 80027e4:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80027e8:	4619      	mov	r1, r3
 80027ea:	f00a fe04 	bl	800d3f6 <memcpy>
 80027ee:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80027f2:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80027f6:	ed9f 1a51 	vldr	s2, [pc, #324]	@ 800293c <main+0x210>
 80027fa:	eef0 0a68 	vmov.f32	s1, s17
 80027fe:	eeb0 0a48 	vmov.f32	s0, s16
 8002802:	4628      	mov	r0, r5
 8002804:	f000 fd0c 	bl	8003220 <vPidInit>
 8002808:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800280c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002810:	4630      	mov	r0, r6
 8002812:	4619      	mov	r1, r3
 8002814:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 8002818:	461a      	mov	r2, r3
 800281a:	f00a fdec 	bl	800d3f6 <memcpy>
   xPidMotorRight = vPidInit(xPidMotorRight, fRightMotorKp, fRightMotorKi, 0, 100, 1);
 800281e:	4b48      	ldr	r3, [pc, #288]	@ (8002940 <main+0x214>)
 8002820:	ed93 8a00 	vldr	s16, [r3]
 8002824:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <main+0x218>)
 8002826:	edd3 8a00 	vldr	s17, [r3]
 800282a:	4e47      	ldr	r6, [pc, #284]	@ (8002948 <main+0x21c>)
 800282c:	463d      	mov	r5, r7
 800282e:	4c46      	ldr	r4, [pc, #280]	@ (8002948 <main+0x21c>)
 8002830:	2364      	movs	r3, #100	@ 0x64
 8002832:	936c      	str	r3, [sp, #432]	@ 0x1b0
 8002834:	4668      	mov	r0, sp
 8002836:	f104 030c 	add.w	r3, r4, #12
 800283a:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 800283e:	4619      	mov	r1, r3
 8002840:	f00a fdd9 	bl	800d3f6 <memcpy>
 8002844:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002848:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800284c:	ed9f 1a3b 	vldr	s2, [pc, #236]	@ 800293c <main+0x210>
 8002850:	eef0 0a68 	vmov.f32	s1, s17
 8002854:	eeb0 0a48 	vmov.f32	s0, s16
 8002858:	4628      	mov	r0, r5
 800285a:	f000 fce1 	bl	8003220 <vPidInit>
 800285e:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8002862:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002866:	4630      	mov	r0, r6
 8002868:	4619      	mov	r1, r3
 800286a:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 800286e:	461a      	mov	r2, r3
 8002870:	f00a fdc1 	bl	800d3f6 <memcpy>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(pTimDurationMotor);
 8002874:	4b2c      	ldr	r3, [pc, #176]	@ (8002928 <main+0x1fc>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f005 fd61 	bl	8008340 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(pTimFreqFixa_esq);
 800287e:	4b33      	ldr	r3, [pc, #204]	@ (800294c <main+0x220>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f005 fd5c 	bl	8008340 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(pTimFreqFixa_dir);
 8002888:	4b31      	ldr	r3, [pc, #196]	@ (8002950 <main+0x224>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f005 fd57 	bl	8008340 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(pTimerGeral);
 8002892:	4b30      	ldr	r3, [pc, #192]	@ (8002954 <main+0x228>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f005 fd52 	bl	8008340 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(pTimFreqFixa_esq, TIM_CHANNEL_1);
 800289c:	4b2b      	ldr	r3, [pc, #172]	@ (800294c <main+0x220>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f005 ff90 	bl	80087c8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(pTimFreqFixa_dir, TIM_CHANNEL_1);
 80028a8:	4b29      	ldr	r3, [pc, #164]	@ (8002950 <main+0x224>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f005 ff8a 	bl	80087c8 <HAL_TIM_IC_Start_IT>

  lcdSetCursorPosition(0, 0);
 80028b4:	2100      	movs	r1, #0
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7ff fe74 	bl	80025a4 <lcdSetCursorPosition>
  sprintf((char *)ucLCD0Msg, "Esq(mm/s):");
 80028bc:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 80028c0:	4925      	ldr	r1, [pc, #148]	@ (8002958 <main+0x22c>)
 80028c2:	4618      	mov	r0, r3
 80028c4:	f00a fca6 	bl	800d214 <siprintf>
  lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));
 80028c8:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fca7 	bl	8000220 <strlen>
 80028d2:	4603      	mov	r3, r0
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fe8d 	bl	80025fc <lcdPrintStr>
  lcdSetCursorPosition(0, 1);
 80028e2:	2101      	movs	r1, #1
 80028e4:	2000      	movs	r0, #0
 80028e6:	f7ff fe5d 	bl	80025a4 <lcdSetCursorPosition>
  sprintf((char *)ucLCD0Msg, "Dir(mm/s):");
 80028ea:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 80028ee:	491b      	ldr	r1, [pc, #108]	@ (800295c <main+0x230>)
 80028f0:	4618      	mov	r0, r3
 80028f2:	f00a fc8f 	bl	800d214 <siprintf>
  lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));
 80028f6:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fc90 	bl	8000220 <strlen>
 8002900:	4603      	mov	r3, r0
 8002902:	b2da      	uxtb	r2, r3
 8002904:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fe76 	bl	80025fc <lcdPrintStr>

  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <main+0x1e4>
 8002914:	200002b8 	.word	0x200002b8
 8002918:	20000008 	.word	0x20000008
 800291c:	20000004 	.word	0x20000004
 8002920:	2000000c 	.word	0x2000000c
 8002924:	20000018 	.word	0x20000018
 8002928:	20000014 	.word	0x20000014
 800292c:	20000010 	.word	0x20000010
 8002930:	20000028 	.word	0x20000028
 8002934:	2000002c 	.word	0x2000002c
 8002938:	200005d0 	.word	0x200005d0
 800293c:	00000000 	.word	0x00000000
 8002940:	20000030 	.word	0x20000030
 8002944:	20000034 	.word	0x20000034
 8002948:	20000414 	.word	0x20000414
 800294c:	20000020 	.word	0x20000020
 8002950:	20000024 	.word	0x20000024
 8002954:	2000001c 	.word	0x2000001c
 8002958:	0800f7f8 	.word	0x0800f7f8
 800295c:	0800f804 	.word	0x0800f804

08002960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b094      	sub	sp, #80	@ 0x50
 8002964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002966:	f107 0318 	add.w	r3, r7, #24
 800296a:	2238      	movs	r2, #56	@ 0x38
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f00a fcb3 	bl	800d2da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
 8002980:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002982:	2000      	movs	r0, #0
 8002984:	f004 fc54 	bl	8007230 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002988:	2302      	movs	r3, #2
 800298a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800298c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002992:	2340      	movs	r3, #64	@ 0x40
 8002994:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002996:	2302      	movs	r3, #2
 8002998:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800299a:	2302      	movs	r3, #2
 800299c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800299e:	2304      	movs	r3, #4
 80029a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80029a2:	2355      	movs	r3, #85	@ 0x55
 80029a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029a6:	2302      	movs	r3, #2
 80029a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029aa:	2302      	movs	r3, #2
 80029ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029ae:	2302      	movs	r3, #2
 80029b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029b2:	f107 0318 	add.w	r3, r7, #24
 80029b6:	4618      	mov	r0, r3
 80029b8:	f004 fcee 	bl	8007398 <HAL_RCC_OscConfig>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80029c2:	f000 faac 	bl	8002f1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c6:	230f      	movs	r3, #15
 80029c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ca:	2303      	movs	r3, #3
 80029cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	2104      	movs	r1, #4
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 ffec 	bl	80079bc <HAL_RCC_ClockConfig>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80029ea:	f000 fa98 	bl	8002f1e <Error_Handler>
  }
}
 80029ee:	bf00      	nop
 80029f0:	3750      	adds	r7, #80	@ 0x50
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <vPeriodicControlTask>:

/* USER CODE BEGIN 4 */


void vPeriodicControlTask(){
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	ed2d 8b02 	vpush	{d8}
 80029fe:	b0ed      	sub	sp, #436	@ 0x1b4
 8002a00:	af6c      	add	r7, sp, #432	@ 0x1b0
//
//	  fActuatorValue_right = fPidUpdateData(xPidMotorRight, fRightSpeed, 400);
//	  fActuatorValue_right = 0.46 + fActuatorValue_right*0.5;
//	  vMotorsSetPWM(right, fActuatorValue_right, 1);
	   //seguidor
	  fActuatorValue_left = fPidUpdateData(xPidMotorLeft,fLeftSpeed , abs(fSetPoint_left));
 8002a02:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf0 <vPeriodicControlTask+0x1f8>)
 8002a04:	ed93 8a00 	vldr	s16, [r3]
 8002a08:	4b7a      	ldr	r3, [pc, #488]	@ (8002bf4 <vPeriodicControlTask+0x1fc>)
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a12:	ee17 3a90 	vmov	r3, s15
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bfb8      	it	lt
 8002a1a:	425b      	neglt	r3, r3
 8002a1c:	ee07 3a90 	vmov	s15, r3
 8002a20:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8002a24:	4c74      	ldr	r4, [pc, #464]	@ (8002bf8 <vPeriodicControlTask+0x200>)
 8002a26:	4668      	mov	r0, sp
 8002a28:	f104 0310 	add.w	r3, r4, #16
 8002a2c:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8002a30:	4619      	mov	r1, r3
 8002a32:	f00a fce0 	bl	800d3f6 <memcpy>
 8002a36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a3a:	eef0 0a68 	vmov.f32	s1, s17
 8002a3e:	eeb0 0a48 	vmov.f32	s0, s16
 8002a42:	f000 fc49 	bl	80032d8 <fPidUpdateData>
 8002a46:	eef0 7a40 	vmov.f32	s15, s0
 8002a4a:	4b6c      	ldr	r3, [pc, #432]	@ (8002bfc <vPeriodicControlTask+0x204>)
 8002a4c:	edc3 7a00 	vstr	s15, [r3]
	  fActuatorValue_left = 0.3 + fActuatorValue_left*0.7;
 8002a50:	4b6a      	ldr	r3, [pc, #424]	@ (8002bfc <vPeriodicControlTask+0x204>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd9f 	bl	8000598 <__aeabi_f2d>
 8002a5a:	a361      	add	r3, pc, #388	@ (adr r3, 8002be0 <vPeriodicControlTask+0x1e8>)
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	f7fd fdf2 	bl	8000648 <__aeabi_dmul>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	a35e      	add	r3, pc, #376	@ (adr r3, 8002be8 <vPeriodicControlTask+0x1f0>)
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	f7fd fc33 	bl	80002dc <__adddf3>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f7fe f8db 	bl	8000c38 <__aeabi_d2f>
 8002a82:	4603      	mov	r3, r0
 8002a84:	4a5d      	ldr	r2, [pc, #372]	@ (8002bfc <vPeriodicControlTask+0x204>)
 8002a86:	6013      	str	r3, [r2, #0]
	  if (fSetPoint_left == 0)
 8002a88:	4b5a      	ldr	r3, [pc, #360]	@ (8002bf4 <vPeriodicControlTask+0x1fc>)
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a96:	d104      	bne.n	8002aa2 <vPeriodicControlTask+0xaa>
		  fActuatorValue_left = 0;
 8002a98:	4b58      	ldr	r3, [pc, #352]	@ (8002bfc <vPeriodicControlTask+0x204>)
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e022      	b.n	8002ae8 <vPeriodicControlTask+0xf0>
	  else if (fSetPoint_left < 0)
 8002aa2:	4b54      	ldr	r3, [pc, #336]	@ (8002bf4 <vPeriodicControlTask+0x1fc>)
 8002aa4:	edd3 7a00 	vldr	s15, [r3]
 8002aa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab0:	d509      	bpl.n	8002ac6 <vPeriodicControlTask+0xce>
		  vMotorsSetPWM(left, fActuatorValue_left, 0);
 8002ab2:	4b52      	ldr	r3, [pc, #328]	@ (8002bfc <vPeriodicControlTask+0x204>)
 8002ab4:	edd3 7a00 	vldr	s15, [r3]
 8002ab8:	2100      	movs	r1, #0
 8002aba:	eeb0 0a67 	vmov.f32	s0, s15
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f000 fa60 	bl	8002f84 <vMotorsSetPWM>
 8002ac4:	e010      	b.n	8002ae8 <vPeriodicControlTask+0xf0>
	  else if (fSetPoint_left>0)
 8002ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8002bf4 <vPeriodicControlTask+0x1fc>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad4:	dd08      	ble.n	8002ae8 <vPeriodicControlTask+0xf0>
		  vMotorsSetPWM(left, fActuatorValue_left, 1);
 8002ad6:	4b49      	ldr	r3, [pc, #292]	@ (8002bfc <vPeriodicControlTask+0x204>)
 8002ad8:	edd3 7a00 	vldr	s15, [r3]
 8002adc:	2101      	movs	r1, #1
 8002ade:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f000 fa4e 	bl	8002f84 <vMotorsSetPWM>


	  fActuatorValue_right = fPidUpdateData(xPidMotorRight,fRightSpeed , abs(fSetPoint_right));
 8002ae8:	4b45      	ldr	r3, [pc, #276]	@ (8002c00 <vPeriodicControlTask+0x208>)
 8002aea:	ed93 8a00 	vldr	s16, [r3]
 8002aee:	4b45      	ldr	r3, [pc, #276]	@ (8002c04 <vPeriodicControlTask+0x20c>)
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002af8:	ee17 3a90 	vmov	r3, s15
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bfb8      	it	lt
 8002b00:	425b      	neglt	r3, r3
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8002b0a:	4c3f      	ldr	r4, [pc, #252]	@ (8002c08 <vPeriodicControlTask+0x210>)
 8002b0c:	4668      	mov	r0, sp
 8002b0e:	f104 0310 	add.w	r3, r4, #16
 8002b12:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8002b16:	4619      	mov	r1, r3
 8002b18:	f00a fc6d 	bl	800d3f6 <memcpy>
 8002b1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b20:	eef0 0a68 	vmov.f32	s1, s17
 8002b24:	eeb0 0a48 	vmov.f32	s0, s16
 8002b28:	f000 fbd6 	bl	80032d8 <fPidUpdateData>
 8002b2c:	eef0 7a40 	vmov.f32	s15, s0
 8002b30:	4b36      	ldr	r3, [pc, #216]	@ (8002c0c <vPeriodicControlTask+0x214>)
 8002b32:	edc3 7a00 	vstr	s15, [r3]
	  fActuatorValue_right = 0.3 + fActuatorValue_right*0.7;
 8002b36:	4b35      	ldr	r3, [pc, #212]	@ (8002c0c <vPeriodicControlTask+0x214>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fd2c 	bl	8000598 <__aeabi_f2d>
 8002b40:	a327      	add	r3, pc, #156	@ (adr r3, 8002be0 <vPeriodicControlTask+0x1e8>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f7fd fd7f 	bl	8000648 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	a325      	add	r3, pc, #148	@ (adr r3, 8002be8 <vPeriodicControlTask+0x1f0>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	f7fd fbc0 	bl	80002dc <__adddf3>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	f7fe f868 	bl	8000c38 <__aeabi_d2f>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4a28      	ldr	r2, [pc, #160]	@ (8002c0c <vPeriodicControlTask+0x214>)
 8002b6c:	6013      	str	r3, [r2, #0]
	  if (fSetPoint_right == 0)
 8002b6e:	4b25      	ldr	r3, [pc, #148]	@ (8002c04 <vPeriodicControlTask+0x20c>)
 8002b70:	edd3 7a00 	vldr	s15, [r3]
 8002b74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7c:	d104      	bne.n	8002b88 <vPeriodicControlTask+0x190>
		  fActuatorValue_right = 0;
 8002b7e:	4b23      	ldr	r3, [pc, #140]	@ (8002c0c <vPeriodicControlTask+0x214>)
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
	  else if (fSetPoint_right < 0)
		  vMotorsSetPWM(right, fActuatorValue_right, 0);
	  else if (fSetPoint_right > 0)
		  vMotorsSetPWM(right, fActuatorValue_right, 1);
}
 8002b86:	e023      	b.n	8002bd0 <vPeriodicControlTask+0x1d8>
	  else if (fSetPoint_right < 0)
 8002b88:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <vPeriodicControlTask+0x20c>)
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b96:	d509      	bpl.n	8002bac <vPeriodicControlTask+0x1b4>
		  vMotorsSetPWM(right, fActuatorValue_right, 0);
 8002b98:	4b1c      	ldr	r3, [pc, #112]	@ (8002c0c <vPeriodicControlTask+0x214>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	f000 f9ed 	bl	8002f84 <vMotorsSetPWM>
}
 8002baa:	e011      	b.n	8002bd0 <vPeriodicControlTask+0x1d8>
	  else if (fSetPoint_right > 0)
 8002bac:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <vPeriodicControlTask+0x20c>)
 8002bae:	edd3 7a00 	vldr	s15, [r3]
 8002bb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bba:	dc00      	bgt.n	8002bbe <vPeriodicControlTask+0x1c6>
}
 8002bbc:	e008      	b.n	8002bd0 <vPeriodicControlTask+0x1d8>
		  vMotorsSetPWM(right, fActuatorValue_right, 1);
 8002bbe:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <vPeriodicControlTask+0x214>)
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f000 f9da 	bl	8002f84 <vMotorsSetPWM>
}
 8002bd0:	bf00      	nop
 8002bd2:	3704      	adds	r7, #4
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	ecbd 8b02 	vpop	{d8}
 8002bda:	bd90      	pop	{r4, r7, pc}
 8002bdc:	f3af 8000 	nop.w
 8002be0:	66666666 	.word	0x66666666
 8002be4:	3fe66666 	.word	0x3fe66666
 8002be8:	33333333 	.word	0x33333333
 8002bec:	3fd33333 	.word	0x3fd33333
 8002bf0:	20000400 	.word	0x20000400
 8002bf4:	2000079c 	.word	0x2000079c
 8002bf8:	200005d0 	.word	0x200005d0
 8002bfc:	2000078c 	.word	0x2000078c
 8002c00:	20000404 	.word	0x20000404
 8002c04:	200007a0 	.word	0x200007a0
 8002c08:	20000414 	.word	0x20000414
 8002c0c:	20000790 	.word	0x20000790

08002c10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	if (htim == pTimDurationMotor)
 8002c18:	4b31      	ldr	r3, [pc, #196]	@ (8002ce0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
	vMotorsDurationCallback();
 8002c22:	f000 fac7 	bl	80031b4 <vMotorsDurationCallback>
	}

	//conta 10 ms
	if (htim == pTimerGeral) {
 8002c26:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d126      	bne.n	8002c7e <HAL_TIM_PeriodElapsedCallback+0x6e>

		if (fRightSpeed > 700) {
 8002c30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002c32:	edd3 7a00 	vldr	s15, [r3]
 8002c36:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002cec <HAL_TIM_PeriodElapsedCallback+0xdc>
 8002c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c42:	dd04      	ble.n	8002c4e <HAL_TIM_PeriodElapsedCallback+0x3e>
			iContaOutlier_right++;
 8002c44:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	4a29      	ldr	r2, [pc, #164]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002c4c:	6013      	str	r3, [r2, #0]
		}

		if (fLeftSpeed > 700) {
 8002c4e:	4b29      	ldr	r3, [pc, #164]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002cec <HAL_TIM_PeriodElapsedCallback+0xdc>
 8002c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c60:	dd04      	ble.n	8002c6c <HAL_TIM_PeriodElapsedCallback+0x5c>
			iContaOutlier_left++;
 8002c62:	4b25      	ldr	r3, [pc, #148]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	4a23      	ldr	r2, [pc, #140]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002c6a:	6013      	str	r3, [r2, #0]
		}

		//conta 100 ms
		if (cCountTime(10, 0)) {
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	200a      	movs	r0, #10
 8002c70:	f001 fabe 	bl	80041f0 <cCountTime>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_TIM_PeriodElapsedCallback+0x6e>
			vPeriodicControlTask();
 8002c7a:	f7ff febd 	bl	80029f8 <vPeriodicControlTask>
		}

	}

	if (htim == pTimFreqFixa_esq){
 8002c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d110      	bne.n	8002caa <HAL_TIM_PeriodElapsedCallback+0x9a>
		if(uiLeftTimeBurst > 30){
 8002c88:	4b1d      	ldr	r3, [pc, #116]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b1e      	cmp	r3, #30
 8002c8e:	d907      	bls.n	8002ca0 <HAL_TIM_PeriodElapsedCallback+0x90>
			uiLeftTimeBurst = 1;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
			fLeftSpeed = 0;
 8002c96:	4b17      	ldr	r3, [pc, #92]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e004      	b.n	8002caa <HAL_TIM_PeriodElapsedCallback+0x9a>
		}else{
		uiLeftTimeBurst++;
 8002ca0:	4b17      	ldr	r3, [pc, #92]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	4a16      	ldr	r2, [pc, #88]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002ca8:	6013      	str	r3, [r2, #0]
		}
	}

	if (htim == pTimFreqFixa_dir){
 8002caa:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d110      	bne.n	8002cd6 <HAL_TIM_PeriodElapsedCallback+0xc6>
		if(uiRightTimeBurst > 30){
 8002cb4:	4b14      	ldr	r3, [pc, #80]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b1e      	cmp	r3, #30
 8002cba:	d907      	bls.n	8002ccc <HAL_TIM_PeriodElapsedCallback+0xbc>
			uiRightTimeBurst = 1;
 8002cbc:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
			fRightSpeed = 0;
 8002cc2:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e004      	b.n	8002cd6 <HAL_TIM_PeriodElapsedCallback+0xc6>
		}else{
		uiRightTimeBurst++;
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002cd4:	6013      	str	r3, [r2, #0]
	}

	if (htim == pTimerBuzzer){
//		vBuzzerStop();
	}
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000014 	.word	0x20000014
 8002ce4:	2000001c 	.word	0x2000001c
 8002ce8:	20000404 	.word	0x20000404
 8002cec:	442f0000 	.word	0x442f0000
 8002cf0:	20000798 	.word	0x20000798
 8002cf4:	20000400 	.word	0x20000400
 8002cf8:	20000794 	.word	0x20000794
 8002cfc:	20000020 	.word	0x20000020
 8002d00:	200003e8 	.word	0x200003e8
 8002d04:	20000024 	.word	0x20000024
 8002d08:	200003ec 	.word	0x200003ec

08002d0c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
 8002d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
//ENCODERS
  if (htim == pTimFreqFixa_esq)
 8002d16:	4b61      	ldr	r3, [pc, #388]	@ (8002e9c <HAL_TIM_IC_CaptureCallback+0x190>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d13f      	bne.n	8002da0 <HAL_TIM_IC_CaptureCallback+0x94>
  	{
  		uiLeftCapturedTime =  HAL_TIM_ReadCapturedValue(htim,  TIM_CHANNEL_1);
 8002d20:	2100      	movs	r1, #0
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f006 fab6 	bl	8009294 <HAL_TIM_ReadCapturedValue>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4a5d      	ldr	r2, [pc, #372]	@ (8002ea0 <HAL_TIM_IC_CaptureCallback+0x194>)
 8002d2c:	6013      	str	r3, [r2, #0]
  		if (uiLeftTimeBurst != 0)
 8002d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ea4 <HAL_TIM_IC_CaptureCallback+0x198>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d011      	beq.n	8002d5a <HAL_TIM_IC_CaptureCallback+0x4e>
  			ullLeftTimeRan = uiLeftCapturedTime + uiLeftTimeBurst*10000;
 8002d36:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea4 <HAL_TIM_IC_CaptureCallback+0x198>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002d3e:	fb03 f202 	mul.w	r2, r3, r2
 8002d42:	4b57      	ldr	r3, [pc, #348]	@ (8002ea0 <HAL_TIM_IC_CaptureCallback+0x194>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	2200      	movs	r2, #0
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	4b56      	ldr	r3, [pc, #344]	@ (8002ea8 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8002d50:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002d54:	e9c3 1200 	strd	r1, r2, [r3]
 8002d58:	e007      	b.n	8002d6a <HAL_TIM_IC_CaptureCallback+0x5e>
  		else
  			ullLeftTimeRan = uiLeftCapturedTime;
 8002d5a:	4b51      	ldr	r3, [pc, #324]	@ (8002ea0 <HAL_TIM_IC_CaptureCallback+0x194>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	469a      	mov	sl, r3
 8002d62:	4693      	mov	fp, r2
 8002d64:	4b50      	ldr	r3, [pc, #320]	@ (8002ea8 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8002d66:	e9c3 ab00 	strd	sl, fp, [r3]
  		__HAL_TIM_SET_COUNTER(htim, 0);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24
  		uiLeftTimeBurst = 0;
 8002d72:	4b4c      	ldr	r3, [pc, #304]	@ (8002ea4 <HAL_TIM_IC_CaptureCallback+0x198>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
  		fLeftSpeed = 10.0f/(ullLeftTimeRan/1000000.0f); //velocidade em mm/s
 8002d78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea8 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8002d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f7fe f871 	bl	8000e68 <__aeabi_ul2f>
 8002d86:	ee06 0a90 	vmov	s13, r0
 8002d8a:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8002eac <HAL_TIM_IC_CaptureCallback+0x1a0>
 8002d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d92:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d9a:	4b45      	ldr	r3, [pc, #276]	@ (8002eb0 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8002d9c:	edc3 7a00 	vstr	s15, [r3]
  	}

  if (htim == pTimFreqFixa_dir)
 8002da0:	4b44      	ldr	r3, [pc, #272]	@ (8002eb4 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d13d      	bne.n	8002e26 <HAL_TIM_IC_CaptureCallback+0x11a>
  	{
  		uiRightCapturedTime =  HAL_TIM_ReadCapturedValue(htim,  TIM_CHANNEL_1);
 8002daa:	2100      	movs	r1, #0
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f006 fa71 	bl	8009294 <HAL_TIM_ReadCapturedValue>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4a40      	ldr	r2, [pc, #256]	@ (8002eb8 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8002db6:	6013      	str	r3, [r2, #0]
  		if (uiRightTimeBurst != 0)
 8002db8:	4b40      	ldr	r3, [pc, #256]	@ (8002ebc <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00f      	beq.n	8002de0 <HAL_TIM_IC_CaptureCallback+0xd4>
  		{
  			ullRightTimeRan = uiRightCapturedTime + uiRightTimeBurst*10000;
 8002dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8002ebc <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002dc8:	fb03 f202 	mul.w	r2, r3, r2
 8002dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb8 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	4698      	mov	r8, r3
 8002dd6:	4691      	mov	r9, r2
 8002dd8:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8002dda:	e9c3 8900 	strd	r8, r9, [r3]
 8002dde:	e007      	b.n	8002df0 <HAL_TIM_IC_CaptureCallback+0xe4>
  		}
  		else
  		{
  			ullRightTimeRan = uiRightCapturedTime;
 8002de0:	4b35      	ldr	r3, [pc, #212]	@ (8002eb8 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2200      	movs	r2, #0
 8002de6:	461c      	mov	r4, r3
 8002de8:	4615      	mov	r5, r2
 8002dea:	4b35      	ldr	r3, [pc, #212]	@ (8002ec0 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8002dec:	e9c3 4500 	strd	r4, r5, [r3]
  		}
  		__HAL_TIM_SET_COUNTER(htim, 0);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2200      	movs	r2, #0
 8002df6:	625a      	str	r2, [r3, #36]	@ 0x24
  		uiRightTimeBurst = 0;
 8002df8:	4b30      	ldr	r3, [pc, #192]	@ (8002ebc <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
  		fRightSpeed = 10.0f/(ullRightTimeRan/1000000.0f); //velocidade em mm/s
 8002dfe:	4b30      	ldr	r3, [pc, #192]	@ (8002ec0 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8002e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	f7fe f82e 	bl	8000e68 <__aeabi_ul2f>
 8002e0c:	ee06 0a90 	vmov	s13, r0
 8002e10:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8002eac <HAL_TIM_IC_CaptureCallback+0x1a0>
 8002e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e18:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e20:	4b28      	ldr	r3, [pc, #160]	@ (8002ec4 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8002e22:	edc3 7a00 	vstr	s15, [r3]
  	}
  if(htim == pTimerEcoUltrassonicoFrontal){
 8002e26:	4b28      	ldr	r3, [pc, #160]	@ (8002ec8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d12f      	bne.n	8002e90 <HAL_TIM_IC_CaptureCallback+0x184>

	  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	7f1b      	ldrb	r3, [r3, #28]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d12b      	bne.n	8002e90 <HAL_TIM_IC_CaptureCallback+0x184>
  	      {
  		  if(0==CountModeF){
 8002e38:	4b24      	ldr	r3, [pc, #144]	@ (8002ecc <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10d      	bne.n	8002e5c <HAL_TIM_IC_CaptureCallback+0x150>
  			  uiAuxDistanceUltrassonicoFrontal1= HAL_TIM_ReadCapturedValue(pTimerEcoUltrassonicoFrontal,TIM_CHANNEL_1);
 8002e40:	4b21      	ldr	r3, [pc, #132]	@ (8002ec8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2100      	movs	r1, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f006 fa24 	bl	8009294 <HAL_TIM_ReadCapturedValue>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed0 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8002e52:	801a      	strh	r2, [r3, #0]
  			  CountModeF=1;
 8002e54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ecc <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
  			   fDistance=fUltrassonicoGetDistance( uiAuxDistanceUltrassonicoFrontal1 , uiAuxDistanceUltrassonicoFrontal2);
  			  CountModeF=0;
  		  }
  	 }
  }
}
 8002e5a:	e019      	b.n	8002e90 <HAL_TIM_IC_CaptureCallback+0x184>
  			  uiAuxDistanceUltrassonicoFrontal2 = HAL_TIM_ReadCapturedValue(pTimerEcoUltrassonicoFrontal,TIM_CHANNEL_1);
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f006 fa16 	bl	8009294 <HAL_TIM_ReadCapturedValue>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ed4 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8002e6e:	801a      	strh	r2, [r3, #0]
  			   fDistance=fUltrassonicoGetDistance( uiAuxDistanceUltrassonicoFrontal1 , uiAuxDistanceUltrassonicoFrontal2);
 8002e70:	4b17      	ldr	r3, [pc, #92]	@ (8002ed0 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	4a17      	ldr	r2, [pc, #92]	@ (8002ed4 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8002e76:	8812      	ldrh	r2, [r2, #0]
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 fa08 	bl	8004290 <fUltrassonicoGetDistance>
 8002e80:	eef0 7a40 	vmov.f32	s15, s0
 8002e84:	4b14      	ldr	r3, [pc, #80]	@ (8002ed8 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8002e86:	edc3 7a00 	vstr	s15, [r3]
  			  CountModeF=0;
 8002e8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ecc <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000020 	.word	0x20000020
 8002ea0:	200003e0 	.word	0x200003e0
 8002ea4:	200003e8 	.word	0x200003e8
 8002ea8:	200003f0 	.word	0x200003f0
 8002eac:	49742400 	.word	0x49742400
 8002eb0:	20000400 	.word	0x20000400
 8002eb4:	20000024 	.word	0x20000024
 8002eb8:	200003e4 	.word	0x200003e4
 8002ebc:	200003ec 	.word	0x200003ec
 8002ec0:	200003f8 	.word	0x200003f8
 8002ec4:	20000404 	.word	0x20000404
 8002ec8:	20000008 	.word	0x20000008
 8002ecc:	20000408 	.word	0x20000408
 8002ed0:	2000040a 	.word	0x2000040a
 8002ed4:	2000040c 	.word	0x2000040c
 8002ed8:	20000410 	.word	0x20000410

08002edc <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==GPIO_PIN_7){
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b80      	cmp	r3, #128	@ 0x80
 8002eea:	d10b      	bne.n	8002f04 <HAL_GPIO_EXTI_Callback+0x28>
		vMotorsSetPWM(left, 1, 1);
 8002eec:	2101      	movs	r1, #1
 8002eee:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f000 f846 	bl	8002f84 <vMotorsSetPWM>
		vMotorsSetPWM(right, 1, 0);
 8002ef8:	2100      	movs	r1, #0
 8002efa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002efe:	2001      	movs	r0, #1
 8002f00:	f000 f840 	bl	8002f84 <vMotorsSetPWM>
	}

	if(GPIO_Pin==GPIO_PIN_5){
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d105      	bne.n	8002f16 <HAL_GPIO_EXTI_Callback+0x3a>
		vMotorsSetOff(left);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f000 f91c 	bl	8003148 <vMotorsSetOff>
		vMotorsSetOff(right);
 8002f10:	2001      	movs	r0, #1
 8002f12:	f000 f919 	bl	8003148 <vMotorsSetOff>
	}

}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f22:	b672      	cpsid	i
}
 8002f24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f26:	bf00      	nop
 8002f28:	e7fd      	b.n	8002f26 <Error_Handler+0x8>
	...

08002f2c <vMotorsInit>:
unsigned char ucDurationCounter;
unsigned short int usTimeOn;
extern float fSetPoint_left; //e
extern float fSetPoint_right; //f

void vMotorsInit(TIM_HandleTypeDef* htimPWM, TIM_HandleTypeDef* htimTimer) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
	pTimPWM = htimPWM;
 8002f36:	4a0f      	ldr	r2, [pc, #60]	@ (8002f74 <vMotorsInit+0x48>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6013      	str	r3, [r2, #0]
	pTimDuration =htimPWM;
 8002f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f78 <vMotorsInit+0x4c>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pTimPWM, TIM_CHANNEL_1);
 8002f42:	4b0c      	ldr	r3, [pc, #48]	@ (8002f74 <vMotorsInit+0x48>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2100      	movs	r1, #0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f005 fac9 	bl	80084e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pTimPWM, TIM_CHANNEL_2);
 8002f4e:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <vMotorsInit+0x48>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2104      	movs	r1, #4
 8002f54:	4618      	mov	r0, r3
 8002f56:	f005 fac3 	bl	80084e0 <HAL_TIM_PWM_Start>
	//pTimPWM->Instance->CCR1 = 0;
	HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8002f5a:	2032      	movs	r0, #50	@ 0x32
 8002f5c:	f001 fdb3 	bl	8004ac6 <HAL_NVIC_DisableIRQ>

	ucDurationCounter = 0;
 8002f60:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <vMotorsInit+0x50>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
	usTimeOn =0;
 8002f66:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <vMotorsInit+0x54>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	801a      	strh	r2, [r3, #0]

}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	200007a4 	.word	0x200007a4
 8002f78:	200007a8 	.word	0x200007a8
 8002f7c:	200007ac 	.word	0x200007ac
 8002f80:	200007ae 	.word	0x200007ae

08002f84 <vMotorsSetPWM>:

//char: motor da direita ou esquerda
//float: PWM de 0 a 1
void vMotorsSetPWM(char motor, float PWM, char rotation) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	ed87 0a00 	vstr	s0, [r7]
 8002f90:	460a      	mov	r2, r1
 8002f92:	71fb      	strb	r3, [r7, #7]
 8002f94:	4613      	mov	r3, r2
 8002f96:	71bb      	strb	r3, [r7, #6]
	if (motor == left) {
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d131      	bne.n	8003002 <vMotorsSetPWM+0x7e>
		pTimPWM->Instance->CCR2 = (PWM*1000) - 1;
 8002f9e:	edd7 7a00 	vldr	s15, [r7]
 8002fa2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8003074 <vMotorsSetPWM+0xf0>
 8002fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002faa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fb2:	4b31      	ldr	r3, [pc, #196]	@ (8003078 <vMotorsSetPWM+0xf4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fbc:	ee17 2a90 	vmov	r2, s15
 8002fc0:	639a      	str	r2, [r3, #56]	@ 0x38

		if (rotation) {
 8002fc2:	79bb      	ldrb	r3, [r7, #6]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00c      	beq.n	8002fe2 <vMotorsSetPWM+0x5e>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 1);
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fce:	482b      	ldr	r0, [pc, #172]	@ (800307c <vMotorsSetPWM+0xf8>)
 8002fd0:	f002 fa56 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 0);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fda:	4828      	ldr	r0, [pc, #160]	@ (800307c <vMotorsSetPWM+0xf8>)
 8002fdc:	f002 fa50 	bl	8005480 <HAL_GPIO_WritePin>
		} else if (!rotation) {
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 1);
		}
	}
}
 8002fe0:	e043      	b.n	800306a <vMotorsSetPWM+0xe6>
		} else if (!rotation) {
 8002fe2:	79bb      	ldrb	r3, [r7, #6]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d140      	bne.n	800306a <vMotorsSetPWM+0xe6>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 0);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fee:	4823      	ldr	r0, [pc, #140]	@ (800307c <vMotorsSetPWM+0xf8>)
 8002ff0:	f002 fa46 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 1);
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ffa:	4820      	ldr	r0, [pc, #128]	@ (800307c <vMotorsSetPWM+0xf8>)
 8002ffc:	f002 fa40 	bl	8005480 <HAL_GPIO_WritePin>
}
 8003000:	e033      	b.n	800306a <vMotorsSetPWM+0xe6>
	} else if (motor == right) {
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d130      	bne.n	800306a <vMotorsSetPWM+0xe6>
		pTimPWM->Instance->CCR1 = (PWM*1000) - 1;
 8003008:	edd7 7a00 	vldr	s15, [r7]
 800300c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003074 <vMotorsSetPWM+0xf0>
 8003010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003014:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003018:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800301c:	4b16      	ldr	r3, [pc, #88]	@ (8003078 <vMotorsSetPWM+0xf4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003026:	ee17 2a90 	vmov	r2, s15
 800302a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (rotation) {
 800302c:	79bb      	ldrb	r3, [r7, #6]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00c      	beq.n	800304c <vMotorsSetPWM+0xc8>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 1);
 8003032:	2201      	movs	r2, #1
 8003034:	2180      	movs	r1, #128	@ 0x80
 8003036:	4811      	ldr	r0, [pc, #68]	@ (800307c <vMotorsSetPWM+0xf8>)
 8003038:	f002 fa22 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);
 800303c:	2200      	movs	r2, #0
 800303e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003042:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003046:	f002 fa1b 	bl	8005480 <HAL_GPIO_WritePin>
}
 800304a:	e00e      	b.n	800306a <vMotorsSetPWM+0xe6>
		} else if (!rotation) {
 800304c:	79bb      	ldrb	r3, [r7, #6]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10b      	bne.n	800306a <vMotorsSetPWM+0xe6>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	2180      	movs	r1, #128	@ 0x80
 8003056:	4809      	ldr	r0, [pc, #36]	@ (800307c <vMotorsSetPWM+0xf8>)
 8003058:	f002 fa12 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 1);
 800305c:	2201      	movs	r2, #1
 800305e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003062:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003066:	f002 fa0b 	bl	8005480 <HAL_GPIO_WritePin>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	447a0000 	.word	0x447a0000
 8003078:	200007a4 	.word	0x200007a4
 800307c:	48000400 	.word	0x48000400

08003080 <vMotorsSetPWMTimer>:
//						a pre-set time, it enable the interrupion that after some cycles defined by    //
//						duration input will stop the motor in vMotorsDurationCallback function         //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	char motor, float PWM, char rotation, unsigned int duration					   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vMotorsSetPWMTimer(char motor, float PWM, char rotation, unsigned int duration) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	ed87 0a02 	vstr	s0, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	460b      	mov	r3, r1
 8003092:	73bb      	strb	r3, [r7, #14]
	if (motor == left) {
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d11f      	bne.n	80030da <vMotorsSetPWMTimer+0x5a>
//		pTimPWM->Instance->CCR2 = (PWM*1000) - 1;

		if (rotation) {
 800309a:	7bbb      	ldrb	r3, [r7, #14]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00c      	beq.n	80030ba <vMotorsSetPWMTimer+0x3a>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 1);
 80030a0:	2201      	movs	r2, #1
 80030a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030a6:	4825      	ldr	r0, [pc, #148]	@ (800313c <vMotorsSetPWMTimer+0xbc>)
 80030a8:	f002 f9ea 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 0);
 80030ac:	2200      	movs	r2, #0
 80030ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80030b2:	4822      	ldr	r0, [pc, #136]	@ (800313c <vMotorsSetPWMTimer+0xbc>)
 80030b4:	f002 f9e4 	bl	8005480 <HAL_GPIO_WritePin>
 80030b8:	e031      	b.n	800311e <vMotorsSetPWMTimer+0x9e>
		} else if (!rotation) {
 80030ba:	7bbb      	ldrb	r3, [r7, #14]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d12e      	bne.n	800311e <vMotorsSetPWMTimer+0x9e>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 0);
 80030c0:	2200      	movs	r2, #0
 80030c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030c6:	481d      	ldr	r0, [pc, #116]	@ (800313c <vMotorsSetPWMTimer+0xbc>)
 80030c8:	f002 f9da 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 1);
 80030cc:	2201      	movs	r2, #1
 80030ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80030d2:	481a      	ldr	r0, [pc, #104]	@ (800313c <vMotorsSetPWMTimer+0xbc>)
 80030d4:	f002 f9d4 	bl	8005480 <HAL_GPIO_WritePin>
 80030d8:	e021      	b.n	800311e <vMotorsSetPWMTimer+0x9e>
		}

	} else if (motor == right) {
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d11e      	bne.n	800311e <vMotorsSetPWMTimer+0x9e>
//		pTimPWM->Instance->CCR1 = (PWM*1000) - 1;

		if (rotation) {
 80030e0:	7bbb      	ldrb	r3, [r7, #14]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00c      	beq.n	8003100 <vMotorsSetPWMTimer+0x80>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 1);
 80030e6:	2201      	movs	r2, #1
 80030e8:	2180      	movs	r1, #128	@ 0x80
 80030ea:	4814      	ldr	r0, [pc, #80]	@ (800313c <vMotorsSetPWMTimer+0xbc>)
 80030ec:	f002 f9c8 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);
 80030f0:	2200      	movs	r2, #0
 80030f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80030f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030fa:	f002 f9c1 	bl	8005480 <HAL_GPIO_WritePin>
 80030fe:	e00e      	b.n	800311e <vMotorsSetPWMTimer+0x9e>
		} else if (!rotation) {
 8003100:	7bbb      	ldrb	r3, [r7, #14]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <vMotorsSetPWMTimer+0x9e>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	2180      	movs	r1, #128	@ 0x80
 800310a:	480c      	ldr	r0, [pc, #48]	@ (800313c <vMotorsSetPWMTimer+0xbc>)
 800310c:	f002 f9b8 	bl	8005480 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 1);
 8003110:	2201      	movs	r2, #1
 8003112:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800311a:	f002 f9b1 	bl	8005480 <HAL_GPIO_WritePin>
		}
	}
	usTimeOn = duration;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	b29a      	uxth	r2, r3
 8003122:	4b07      	ldr	r3, [pc, #28]	@ (8003140 <vMotorsSetPWMTimer+0xc0>)
 8003124:	801a      	strh	r2, [r3, #0]
	ucDurationCounter = 0;
 8003126:	4b07      	ldr	r3, [pc, #28]	@ (8003144 <vMotorsSetPWMTimer+0xc4>)
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800312c:	2032      	movs	r0, #50	@ 0x32
 800312e:	f001 fcbc 	bl	8004aaa <HAL_NVIC_EnableIRQ>

//	vMotorsSetOff(motor);
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	48000400 	.word	0x48000400
 8003140:	200007ae 	.word	0x200007ae
 8003144:	200007ac 	.word	0x200007ac

08003148 <vMotorsSetOff>:

void vMotorsSetOff(char motor) {
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
	if (motor == left) {
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d111      	bne.n	800317c <vMotorsSetOff+0x34>
		pTimPWM->Instance->CCR2 = 0;
 8003158:	4b14      	ldr	r3, [pc, #80]	@ (80031ac <vMotorsSetOff+0x64>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	639a      	str	r2, [r3, #56]	@ 0x38

		HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003168:	4811      	ldr	r0, [pc, #68]	@ (80031b0 <vMotorsSetOff+0x68>)
 800316a:	f002 f989 	bl	8005480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003174:	480e      	ldr	r0, [pc, #56]	@ (80031b0 <vMotorsSetOff+0x68>)
 8003176:	f002 f983 	bl	8005480 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
		HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);

	}
}
 800317a:	e013      	b.n	80031a4 <vMotorsSetOff+0x5c>
	} else if (motor == right) {
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d110      	bne.n	80031a4 <vMotorsSetOff+0x5c>
		pTimPWM->Instance->CCR1 = 0;
 8003182:	4b0a      	ldr	r3, [pc, #40]	@ (80031ac <vMotorsSetOff+0x64>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2200      	movs	r2, #0
 800318a:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
 800318c:	2200      	movs	r2, #0
 800318e:	2180      	movs	r1, #128	@ 0x80
 8003190:	4807      	ldr	r0, [pc, #28]	@ (80031b0 <vMotorsSetOff+0x68>)
 8003192:	f002 f975 	bl	8005480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);
 8003196:	2200      	movs	r2, #0
 8003198:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800319c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031a0:	f002 f96e 	bl	8005480 <HAL_GPIO_WritePin>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	200007a4 	.word	0x200007a4
 80031b0:	48000400 	.word	0x48000400

080031b4 <vMotorsDurationCallback>:
//						many interruptions for stop the motor based on usTimeOn (duration set) then	   //
//						stops the motors.															   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vMotorsDurationCallback(){
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
	if((ucDurationCounter*10)==usTimeOn){
 80031b8:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <vMotorsDurationCallback+0x5c>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	461a      	mov	r2, r3
 80031c8:	4b12      	ldr	r3, [pc, #72]	@ (8003214 <vMotorsDurationCallback+0x60>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d117      	bne.n	8003200 <vMotorsDurationCallback+0x4c>
		fSetPoint_left = 0;
 80031d0:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <vMotorsDurationCallback+0x64>)
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
		fSetPoint_right = 0;
 80031d8:	4b10      	ldr	r3, [pc, #64]	@ (800321c <vMotorsDurationCallback+0x68>)
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
		vMotorsSetOff(left);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7ff ffb1 	bl	8003148 <vMotorsSetOff>
		vMotorsSetOff(right);
 80031e6:	2001      	movs	r0, #1
 80031e8:	f7ff ffae 	bl	8003148 <vMotorsSetOff>
		usTimeOn = 0;
 80031ec:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <vMotorsDurationCallback+0x60>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	801a      	strh	r2, [r3, #0]
		ucDurationCounter = 0;
 80031f2:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <vMotorsDurationCallback+0x5c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(TIM5_IRQn);
 80031f8:	2032      	movs	r0, #50	@ 0x32
 80031fa:	f001 fc64 	bl	8004ac6 <HAL_NVIC_DisableIRQ>
	}
	else
	{
		ucDurationCounter++;
	}
}
 80031fe:	e005      	b.n	800320c <vMotorsDurationCallback+0x58>
		ucDurationCounter++;
 8003200:	4b03      	ldr	r3, [pc, #12]	@ (8003210 <vMotorsDurationCallback+0x5c>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	b2da      	uxtb	r2, r3
 8003208:	4b01      	ldr	r3, [pc, #4]	@ (8003210 <vMotorsDurationCallback+0x5c>)
 800320a:	701a      	strb	r2, [r3, #0]
}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}
 8003210:	200007ac 	.word	0x200007ac
 8003214:	200007ae 	.word	0x200007ae
 8003218:	2000079c 	.word	0x2000079c
 800321c:	200007a0 	.word	0x200007a0

08003220 <vPidInit>:
/* Method description: Initialize the PID controller*/
/* Input params:       n/a                          */
/* Output params:      n/a                          */
/* ************************************************ */
pid_data_type vPidInit(pid_data_type xPidConfig, float fKp, float fKi, float fKd, unsigned short usIntSizeMs, float fOutputSaturation)
{
 8003220:	b084      	sub	sp, #16
 8003222:	b580      	push	{r7, lr}
 8003224:	b088      	sub	sp, #32
 8003226:	af00      	add	r7, sp, #0
 8003228:	6178      	str	r0, [r7, #20]
 800322a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800322e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003232:	ed87 0a04 	vstr	s0, [r7, #16]
 8003236:	edc7 0a03 	vstr	s1, [r7, #12]
 800323a:	ed87 1a02 	vstr	s2, [r7, #8]
 800323e:	edc7 1a01 	vstr	s3, [r7, #4]
	xPidConfig.fKp = fKp;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	62fb      	str	r3, [r7, #44]	@ 0x2c
	xPidConfig.fKd = fKd;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	637b      	str	r3, [r7, #52]	@ 0x34
	xPidConfig.fKi = fKi;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	633b      	str	r3, [r7, #48]	@ 0x30
	xPidConfig.fError_previous = 0;
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	63bb      	str	r3, [r7, #56]	@ 0x38
	xPidConfig.fError_sum = 0.0;
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// Saturates Integrator size (up to 10 s)
	if((usIntSizeMs/UPDATE_RATE_MS)> INTEGRATOR_MAX_SIZE)
 800325a:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 800325e:	f242 7273 	movw	r2, #10099	@ 0x2773
 8003262:	4293      	cmp	r3, r2
 8003264:	d903      	bls.n	800326e <vPidInit+0x4e>
	  usIntSizeMs = INTEGRATOR_MAX_SIZE * UPDATE_RATE_MS;
 8003266:	f242 7310 	movw	r3, #10000	@ 0x2710
 800326a:	f8a7 31e8 	strh.w	r3, [r7, #488]	@ 0x1e8

	xPidConfig.usIntegratorSize = usIntSizeMs/UPDATE_RATE_MS;
 800326e:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8003272:	4a17      	ldr	r2, [pc, #92]	@ (80032d0 <vPidInit+0xb0>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	b29b      	uxth	r3, r3
 800327c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

	xPidConfig.fOutputSaturation = fOutputSaturation;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	647b      	str	r3, [r7, #68]	@ 0x44
	xPidConfig.usIntegratorCount = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	for (int i =0; i<INTEGRATOR_MAX_SIZE; i++){
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	e00b      	b.n	80032a8 <vPidInit+0x88>
		xPidConfig.fIntegratorBuffer[i] = 0;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	330a      	adds	r3, #10
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	3328      	adds	r3, #40	@ 0x28
 8003298:	443b      	add	r3, r7
 800329a:	3308      	adds	r3, #8
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
	for (int i =0; i<INTEGRATOR_MAX_SIZE; i++){
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3301      	adds	r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b63      	cmp	r3, #99	@ 0x63
 80032ac:	ddf0      	ble.n	8003290 <vPidInit+0x70>
	}
	return xPidConfig;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032b6:	f44f 72de 	mov.w	r2, #444	@ 0x1bc
 80032ba:	4619      	mov	r1, r3
 80032bc:	f00a f89b 	bl	800d3f6 <memcpy>
}
 80032c0:	6978      	ldr	r0, [r7, #20]
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032ca:	b004      	add	sp, #16
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	51eb851f 	.word	0x51eb851f
 80032d4:	00000000 	.word	0x00000000

080032d8 <fPidUpdateData>:
/*                     fReferenceValue: Value used as */
/*                     control reference              */
/* Output params:      float: New Control effort      */
/* ************************************************** */
float fPidUpdateData(pid_data_type xPidConfig, float fSensorValue, float fSetValue)
{
 80032d8:	b084      	sub	sp, #16
 80032da:	b5b0      	push	{r4, r5, r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	f107 0418 	add.w	r4, r7, #24
 80032e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032e8:	ed87 0a01 	vstr	s0, [r7, #4]
 80032ec:	edc7 0a00 	vstr	s1, [r7]
//	float fError, fDifference, fOut;

	// Proportional error
	xPidConfig.fError = fSetValue - fSensorValue;
 80032f0:	ed97 7a00 	vldr	s14, [r7]
 80032f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80032f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	//Ingtegral error
	xPidConfig.fError_sum = xPidConfig.fError_sum - xPidConfig.fIntegratorBuffer[xPidConfig.usIntegratorCount] + xPidConfig.fError;
 8003300:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003304:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003308:	330a      	adds	r3, #10
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	3318      	adds	r3, #24
 800330e:	443b      	add	r3, r7
 8003310:	3304      	adds	r3, #4
 8003312:	edd3 7a00 	vldr	s15, [r3]
 8003316:	ee37 7a67 	vsub.f32	s14, s14, s15
 800331a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800331e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003322:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	xPidConfig.fIntegratorBuffer[xPidConfig.usIntegratorCount] = xPidConfig.fError;
 8003326:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800332a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800332c:	330a      	adds	r3, #10
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	3318      	adds	r3, #24
 8003332:	443b      	add	r3, r7
 8003334:	3304      	adds	r3, #4
 8003336:	601a      	str	r2, [r3, #0]

	if(++xPidConfig.usIntegratorCount >= xPidConfig.usIntegratorSize)
 8003338:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800333c:	3301      	adds	r3, #1
 800333e:	b29b      	uxth	r3, r3
 8003340:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003344:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8003348:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <fPidUpdateData+0x7c>
		xPidConfig.usIntegratorCount = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

	// Differential error
	xPidConfig.fDifference = (xPidConfig.fError - xPidConfig.fError_previous);
 8003354:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003358:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800335c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003360:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	xPidConfig.fOut = xPidConfig.fKp * xPidConfig.fError
 8003364:	ed97 7a06 	vldr	s14, [r7, #24]
 8003368:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800336c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003370:	ee17 0a90 	vmov	r0, s15
 8003374:	f7fd f910 	bl	8000598 <__aeabi_f2d>
 8003378:	4604      	mov	r4, r0
 800337a:	460d      	mov	r5, r1
		 + xPidConfig.fKi * xPidConfig.fError_sum * UPDATE_RATE
 800337c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003380:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003388:	ee17 0a90 	vmov	r0, s15
 800338c:	f7fd f904 	bl	8000598 <__aeabi_f2d>
 8003390:	a327      	add	r3, pc, #156	@ (adr r3, 8003430 <fPidUpdateData+0x158>)
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	f7fd f957 	bl	8000648 <__aeabi_dmul>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4620      	mov	r0, r4
 80033a0:	4629      	mov	r1, r5
 80033a2:	f7fc ff9b 	bl	80002dc <__adddf3>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4614      	mov	r4, r2
 80033ac:	461d      	mov	r5, r3
		 + xPidConfig.fKd * xPidConfig.fDifference / UPDATE_RATE;
 80033ae:	ed97 7a08 	vldr	s14, [r7, #32]
 80033b2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80033b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ba:	ee17 0a90 	vmov	r0, s15
 80033be:	f7fd f8eb 	bl	8000598 <__aeabi_f2d>
 80033c2:	a31b      	add	r3, pc, #108	@ (adr r3, 8003430 <fPidUpdateData+0x158>)
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f7fd fa68 	bl	800089c <__aeabi_ddiv>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4620      	mov	r0, r4
 80033d2:	4629      	mov	r1, r5
 80033d4:	f7fc ff82 	bl	80002dc <__adddf3>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	f7fd fc2a 	bl	8000c38 <__aeabi_d2f>
 80033e4:	4603      	mov	r3, r0
	xPidConfig.fOut = xPidConfig.fKp * xPidConfig.fError
 80033e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

	xPidConfig.fError_previous = xPidConfig.fError;
 80033e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24

    // Output Saturation
//	if(isnan(fOut))
//		fOut=0;
	if(xPidConfig.fOut > xPidConfig.fOutputSaturation)
 80033ec:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80033f0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80033f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fc:	dd02      	ble.n	8003404 <fPidUpdateData+0x12c>
		xPidConfig.fOut = xPidConfig.fOutputSaturation;
 80033fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003400:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003402:	e009      	b.n	8003418 <fPidUpdateData+0x140>
	else
		if (xPidConfig.fOut < 0)
 8003404:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800340c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003410:	d502      	bpl.n	8003418 <fPidUpdateData+0x140>
			xPidConfig.fOut = 0;
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	63fb      	str	r3, [r7, #60]	@ 0x3c

	return xPidConfig.fOut;
 8003418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800341a:	ee07 3a90 	vmov	s15, r3
}
 800341e:	eeb0 0a67 	vmov.f32	s0, s15
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800342a:	b004      	add	sp, #16
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	9999999a 	.word	0x9999999a
 8003434:	3fb99999 	.word	0x3fb99999

08003438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343e:	4b0f      	ldr	r3, [pc, #60]	@ (800347c <HAL_MspInit+0x44>)
 8003440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003442:	4a0e      	ldr	r2, [pc, #56]	@ (800347c <HAL_MspInit+0x44>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6613      	str	r3, [r2, #96]	@ 0x60
 800344a:	4b0c      	ldr	r3, [pc, #48]	@ (800347c <HAL_MspInit+0x44>)
 800344c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	607b      	str	r3, [r7, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003456:	4b09      	ldr	r3, [pc, #36]	@ (800347c <HAL_MspInit+0x44>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	4a08      	ldr	r2, [pc, #32]	@ (800347c <HAL_MspInit+0x44>)
 800345c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003460:	6593      	str	r3, [r2, #88]	@ 0x58
 8003462:	4b06      	ldr	r3, [pc, #24]	@ (800347c <HAL_MspInit+0x44>)
 8003464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800346e:	f003 ff83 	bl	8007378 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000

08003480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <NMI_Handler+0x4>

08003488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800348c:	bf00      	nop
 800348e:	e7fd      	b.n	800348c <HardFault_Handler+0x4>

08003490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003494:	bf00      	nop
 8003496:	e7fd      	b.n	8003494 <MemManage_Handler+0x4>

08003498 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800349c:	bf00      	nop
 800349e:	e7fd      	b.n	800349c <BusFault_Handler+0x4>

080034a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034a4:	bf00      	nop
 80034a6:	e7fd      	b.n	80034a4 <UsageFault_Handler+0x4>

080034a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034d6:	f001 f98f 	bl	80047f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80034e4:	4802      	ldr	r0, [pc, #8]	@ (80034f0 <DMA1_Channel3_IRQHandler+0x10>)
 80034e6:	f001 fcec 	bl	8004ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	2000030c 	.word	0x2000030c

080034f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80034f8:	4802      	ldr	r0, [pc, #8]	@ (8003504 <DMA1_Channel4_IRQHandler+0x10>)
 80034fa:	f001 fce2 	bl	8004ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	2000036c 	.word	0x2000036c

08003508 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800350c:	4803      	ldr	r0, [pc, #12]	@ (800351c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800350e:	f005 faab 	bl	8008a68 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003512:	4803      	ldr	r0, [pc, #12]	@ (8003520 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003514:	f005 faa8 	bl	8008a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}
 800351c:	200007b4 	.word	0x200007b4
 8003520:	20000930 	.word	0x20000930

08003524 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003528:	4803      	ldr	r0, [pc, #12]	@ (8003538 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800352a:	f005 fa9d 	bl	8008a68 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800352e:	4803      	ldr	r0, [pc, #12]	@ (800353c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8003530:	f005 fa9a 	bl	8008a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003534:	bf00      	nop
 8003536:	bd80      	pop	{r7, pc}
 8003538:	200007b4 	.word	0x200007b4
 800353c:	2000097c 	.word	0x2000097c

08003540 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003544:	4802      	ldr	r0, [pc, #8]	@ (8003550 <TIM2_IRQHandler+0x10>)
 8003546:	f005 fa8f 	bl	8008a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000800 	.word	0x20000800

08003554 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003558:	4802      	ldr	r0, [pc, #8]	@ (8003564 <TIM3_IRQHandler+0x10>)
 800355a:	f005 fa85 	bl	8008a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	2000084c 	.word	0x2000084c

08003568 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800356c:	4802      	ldr	r0, [pc, #8]	@ (8003578 <I2C2_EV_IRQHandler+0x10>)
 800356e:	f002 f967 	bl	8005840 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	200002b8 	.word	0x200002b8

0800357c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003580:	4802      	ldr	r0, [pc, #8]	@ (800358c <I2C2_ER_IRQHandler+0x10>)
 8003582:	f002 f977 	bl	8005874 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200002b8 	.word	0x200002b8

08003590 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003594:	4802      	ldr	r0, [pc, #8]	@ (80035a0 <USART1_IRQHandler+0x10>)
 8003596:	f006 ff43 	bl	800a420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000b58 	.word	0x20000b58

080035a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80035a8:	4802      	ldr	r0, [pc, #8]	@ (80035b4 <USART3_IRQHandler+0x10>)
 80035aa:	f006 ff39 	bl	800a420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000bec 	.word	0x20000bec

080035b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80035bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80035c0:	f001 ff76 	bl	80054b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035c4:	bf00      	nop
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80035cc:	4802      	ldr	r0, [pc, #8]	@ (80035d8 <TIM5_IRQHandler+0x10>)
 80035ce:	f005 fa4b 	bl	8008a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000898 	.word	0x20000898

080035dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035e0:	4802      	ldr	r0, [pc, #8]	@ (80035ec <TIM6_DAC_IRQHandler+0x10>)
 80035e2:	f005 fa41 	bl	8008a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200008e4 	.word	0x200008e4

080035f0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80035f4:	4802      	ldr	r0, [pc, #8]	@ (8003600 <LPUART1_IRQHandler+0x10>)
 80035f6:	f006 ff13 	bl	800a420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000ac4 	.word	0x20000ac4

08003604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  return 1;
 8003608:	2301      	movs	r3, #1
}
 800360a:	4618      	mov	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <_kill>:

int _kill(int pid, int sig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800361e:	f009 febd 	bl	800d39c <__errno>
 8003622:	4603      	mov	r3, r0
 8003624:	2216      	movs	r2, #22
 8003626:	601a      	str	r2, [r3, #0]
  return -1;
 8003628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <_exit>:

void _exit (int status)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800363c:	f04f 31ff 	mov.w	r1, #4294967295
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ffe7 	bl	8003614 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003646:	bf00      	nop
 8003648:	e7fd      	b.n	8003646 <_exit+0x12>

0800364a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	e00a      	b.n	8003672 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800365c:	f3af 8000 	nop.w
 8003660:	4601      	mov	r1, r0
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	60ba      	str	r2, [r7, #8]
 8003668:	b2ca      	uxtb	r2, r1
 800366a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3301      	adds	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	429a      	cmp	r2, r3
 8003678:	dbf0      	blt.n	800365c <_read+0x12>
  }

  return len;
 800367a:	687b      	ldr	r3, [r7, #4]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e009      	b.n	80036aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	60ba      	str	r2, [r7, #8]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	3301      	adds	r3, #1
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	dbf1      	blt.n	8003696 <_write+0x12>
  }
  return len;
 80036b2:	687b      	ldr	r3, [r7, #4]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <_close>:

int _close(int file)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036e4:	605a      	str	r2, [r3, #4]
  return 0;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <_isatty>:

int _isatty(int file)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036fc:	2301      	movs	r3, #1
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800372c:	4a14      	ldr	r2, [pc, #80]	@ (8003780 <_sbrk+0x5c>)
 800372e:	4b15      	ldr	r3, [pc, #84]	@ (8003784 <_sbrk+0x60>)
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003738:	4b13      	ldr	r3, [pc, #76]	@ (8003788 <_sbrk+0x64>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003740:	4b11      	ldr	r3, [pc, #68]	@ (8003788 <_sbrk+0x64>)
 8003742:	4a12      	ldr	r2, [pc, #72]	@ (800378c <_sbrk+0x68>)
 8003744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003746:	4b10      	ldr	r3, [pc, #64]	@ (8003788 <_sbrk+0x64>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	429a      	cmp	r2, r3
 8003752:	d207      	bcs.n	8003764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003754:	f009 fe22 	bl	800d39c <__errno>
 8003758:	4603      	mov	r3, r0
 800375a:	220c      	movs	r2, #12
 800375c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800375e:	f04f 33ff 	mov.w	r3, #4294967295
 8003762:	e009      	b.n	8003778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003764:	4b08      	ldr	r3, [pc, #32]	@ (8003788 <_sbrk+0x64>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800376a:	4b07      	ldr	r3, [pc, #28]	@ (8003788 <_sbrk+0x64>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	4a05      	ldr	r2, [pc, #20]	@ (8003788 <_sbrk+0x64>)
 8003774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003776:	68fb      	ldr	r3, [r7, #12]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20020000 	.word	0x20020000
 8003784:	00000400 	.word	0x00000400
 8003788:	200007b0 	.word	0x200007b0
 800378c:	20000dd0 	.word	0x20000dd0

08003790 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003794:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <SystemInit+0x20>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379a:	4a05      	ldr	r2, [pc, #20]	@ (80037b0 <SystemInit+0x20>)
 800379c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b098      	sub	sp, #96	@ 0x60
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	605a      	str	r2, [r3, #4]
 80037c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	609a      	str	r2, [r3, #8]
 80037d2:	60da      	str	r2, [r3, #12]
 80037d4:	611a      	str	r2, [r3, #16]
 80037d6:	615a      	str	r2, [r3, #20]
 80037d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037da:	1d3b      	adds	r3, r7, #4
 80037dc:	2234      	movs	r2, #52	@ 0x34
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f009 fd7a 	bl	800d2da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80037e6:	4b41      	ldr	r3, [pc, #260]	@ (80038ec <MX_TIM1_Init+0x138>)
 80037e8:	4a41      	ldr	r2, [pc, #260]	@ (80038f0 <MX_TIM1_Init+0x13c>)
 80037ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 85-1;
 80037ec:	4b3f      	ldr	r3, [pc, #252]	@ (80038ec <MX_TIM1_Init+0x138>)
 80037ee:	2254      	movs	r2, #84	@ 0x54
 80037f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f2:	4b3e      	ldr	r3, [pc, #248]	@ (80038ec <MX_TIM1_Init+0x138>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80037f8:	4b3c      	ldr	r3, [pc, #240]	@ (80038ec <MX_TIM1_Init+0x138>)
 80037fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80037fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003800:	4b3a      	ldr	r3, [pc, #232]	@ (80038ec <MX_TIM1_Init+0x138>)
 8003802:	2200      	movs	r2, #0
 8003804:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003806:	4b39      	ldr	r3, [pc, #228]	@ (80038ec <MX_TIM1_Init+0x138>)
 8003808:	2200      	movs	r2, #0
 800380a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800380c:	4b37      	ldr	r3, [pc, #220]	@ (80038ec <MX_TIM1_Init+0x138>)
 800380e:	2280      	movs	r2, #128	@ 0x80
 8003810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003812:	4836      	ldr	r0, [pc, #216]	@ (80038ec <MX_TIM1_Init+0x138>)
 8003814:	f004 fe0c 	bl	8008430 <HAL_TIM_PWM_Init>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800381e:	f7ff fb7e 	bl	8002f1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003822:	2300      	movs	r3, #0
 8003824:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800382a:	2300      	movs	r3, #0
 800382c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800382e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003832:	4619      	mov	r1, r3
 8003834:	482d      	ldr	r0, [pc, #180]	@ (80038ec <MX_TIM1_Init+0x138>)
 8003836:	f006 fb59 	bl	8009eec <HAL_TIMEx_MasterConfigSynchronization>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003840:	f7ff fb6d 	bl	8002f1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003844:	2360      	movs	r3, #96	@ 0x60
 8003846:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800384c:	2300      	movs	r3, #0
 800384e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003850:	2300      	movs	r3, #0
 8003852:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003854:	2300      	movs	r3, #0
 8003856:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003858:	2300      	movs	r3, #0
 800385a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800385c:	2300      	movs	r3, #0
 800385e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003860:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003864:	2200      	movs	r2, #0
 8003866:	4619      	mov	r1, r3
 8003868:	4820      	ldr	r0, [pc, #128]	@ (80038ec <MX_TIM1_Init+0x138>)
 800386a:	f005 fae9 	bl	8008e40 <HAL_TIM_PWM_ConfigChannel>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003874:	f7ff fb53 	bl	8002f1e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003878:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800387c:	2204      	movs	r2, #4
 800387e:	4619      	mov	r1, r3
 8003880:	481a      	ldr	r0, [pc, #104]	@ (80038ec <MX_TIM1_Init+0x138>)
 8003882:	f005 fadd 	bl	8008e40 <HAL_TIM_PWM_ConfigChannel>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800388c:	f7ff fb47 	bl	8002f1e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003890:	2300      	movs	r3, #0
 8003892:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003894:	2300      	movs	r3, #0
 8003896:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80038ae:	2300      	movs	r3, #0
 80038b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80038b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80038c0:	2300      	movs	r3, #0
 80038c2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80038c8:	1d3b      	adds	r3, r7, #4
 80038ca:	4619      	mov	r1, r3
 80038cc:	4807      	ldr	r0, [pc, #28]	@ (80038ec <MX_TIM1_Init+0x138>)
 80038ce:	f006 fba3 	bl	800a018 <HAL_TIMEx_ConfigBreakDeadTime>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80038d8:	f7ff fb21 	bl	8002f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80038dc:	4803      	ldr	r0, [pc, #12]	@ (80038ec <MX_TIM1_Init+0x138>)
 80038de:	f000 fbe7 	bl	80040b0 <HAL_TIM_MspPostInit>

}
 80038e2:	bf00      	nop
 80038e4:	3760      	adds	r7, #96	@ 0x60
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	200007b4 	.word	0x200007b4
 80038f0:	40012c00 	.word	0x40012c00

080038f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038fa:	f107 0310 	add.w	r3, r7, #16
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	605a      	str	r2, [r3, #4]
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003908:	1d3b      	adds	r3, r7, #4
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003912:	4b1e      	ldr	r3, [pc, #120]	@ (800398c <MX_TIM2_Init+0x98>)
 8003914:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003918:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 800391a:	4b1c      	ldr	r3, [pc, #112]	@ (800398c <MX_TIM2_Init+0x98>)
 800391c:	22a9      	movs	r2, #169	@ 0xa9
 800391e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003920:	4b1a      	ldr	r3, [pc, #104]	@ (800398c <MX_TIM2_Init+0x98>)
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8003926:	4b19      	ldr	r3, [pc, #100]	@ (800398c <MX_TIM2_Init+0x98>)
 8003928:	f242 7210 	movw	r2, #10000	@ 0x2710
 800392c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800392e:	4b17      	ldr	r3, [pc, #92]	@ (800398c <MX_TIM2_Init+0x98>)
 8003930:	2200      	movs	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003934:	4b15      	ldr	r3, [pc, #84]	@ (800398c <MX_TIM2_Init+0x98>)
 8003936:	2280      	movs	r2, #128	@ 0x80
 8003938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800393a:	4814      	ldr	r0, [pc, #80]	@ (800398c <MX_TIM2_Init+0x98>)
 800393c:	f004 fca8 	bl	8008290 <HAL_TIM_Base_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003946:	f7ff faea 	bl	8002f1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800394a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800394e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	4619      	mov	r1, r3
 8003956:	480d      	ldr	r0, [pc, #52]	@ (800398c <MX_TIM2_Init+0x98>)
 8003958:	f005 fb86 	bl	8009068 <HAL_TIM_ConfigClockSource>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003962:	f7ff fadc 	bl	8002f1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003966:	2300      	movs	r3, #0
 8003968:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4806      	ldr	r0, [pc, #24]	@ (800398c <MX_TIM2_Init+0x98>)
 8003974:	f006 faba 	bl	8009eec <HAL_TIMEx_MasterConfigSynchronization>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800397e:	f7ff face 	bl	8002f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003982:	bf00      	nop
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000800 	.word	0x20000800

08003990 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08c      	sub	sp, #48	@ 0x30
 8003994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003996:	f107 0320 	add.w	r3, r7, #32
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	609a      	str	r2, [r3, #8]
 80039a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	609a      	str	r2, [r3, #8]
 80039ba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039bc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a6c <MX_TIM3_Init+0xdc>)
 80039be:	4a2c      	ldr	r2, [pc, #176]	@ (8003a70 <MX_TIM3_Init+0xe0>)
 80039c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 260-1;
 80039c2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a6c <MX_TIM3_Init+0xdc>)
 80039c4:	f240 1203 	movw	r2, #259	@ 0x103
 80039c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ca:	4b28      	ldr	r3, [pc, #160]	@ (8003a6c <MX_TIM3_Init+0xdc>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80039d0:	4b26      	ldr	r3, [pc, #152]	@ (8003a6c <MX_TIM3_Init+0xdc>)
 80039d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d8:	4b24      	ldr	r3, [pc, #144]	@ (8003a6c <MX_TIM3_Init+0xdc>)
 80039da:	2200      	movs	r2, #0
 80039dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039de:	4b23      	ldr	r3, [pc, #140]	@ (8003a6c <MX_TIM3_Init+0xdc>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039e4:	4821      	ldr	r0, [pc, #132]	@ (8003a6c <MX_TIM3_Init+0xdc>)
 80039e6:	f004 fc53 	bl	8008290 <HAL_TIM_Base_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80039f0:	f7ff fa95 	bl	8002f1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039fa:	f107 0320 	add.w	r3, r7, #32
 80039fe:	4619      	mov	r1, r3
 8003a00:	481a      	ldr	r0, [pc, #104]	@ (8003a6c <MX_TIM3_Init+0xdc>)
 8003a02:	f005 fb31 	bl	8009068 <HAL_TIM_ConfigClockSource>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003a0c:	f7ff fa87 	bl	8002f1e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003a10:	4816      	ldr	r0, [pc, #88]	@ (8003a6c <MX_TIM3_Init+0xdc>)
 8003a12:	f004 fe77 	bl	8008704 <HAL_TIM_IC_Init>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003a1c:	f7ff fa7f 	bl	8002f1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	480f      	ldr	r0, [pc, #60]	@ (8003a6c <MX_TIM3_Init+0xdc>)
 8003a30:	f006 fa5c 	bl	8009eec <HAL_TIMEx_MasterConfigSynchronization>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003a3a:	f7ff fa70 	bl	8002f1e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003a3e:	230a      	movs	r3, #10
 8003a40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003a42:	2301      	movs	r3, #1
 8003a44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	2200      	movs	r2, #0
 8003a52:	4619      	mov	r1, r3
 8003a54:	4805      	ldr	r0, [pc, #20]	@ (8003a6c <MX_TIM3_Init+0xdc>)
 8003a56:	f005 f956 	bl	8008d06 <HAL_TIM_IC_ConfigChannel>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003a60:	f7ff fa5d 	bl	8002f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a64:	bf00      	nop
 8003a66:	3730      	adds	r7, #48	@ 0x30
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	2000084c 	.word	0x2000084c
 8003a70:	40000400 	.word	0x40000400

08003a74 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a7a:	f107 0310 	add.w	r3, r7, #16
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	605a      	str	r2, [r3, #4]
 8003a84:	609a      	str	r2, [r3, #8]
 8003a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a88:	1d3b      	adds	r3, r7, #4
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	605a      	str	r2, [r3, #4]
 8003a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003a92:	4b1d      	ldr	r3, [pc, #116]	@ (8003b08 <MX_TIM5_Init+0x94>)
 8003a94:	4a1d      	ldr	r2, [pc, #116]	@ (8003b0c <MX_TIM5_Init+0x98>)
 8003a96:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	@ (8003b08 <MX_TIM5_Init+0x94>)
 8003a9a:	22a9      	movs	r2, #169	@ 0xa9
 8003a9c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <MX_TIM5_Init+0x94>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8003aa4:	4b18      	ldr	r3, [pc, #96]	@ (8003b08 <MX_TIM5_Init+0x94>)
 8003aa6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003aaa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aac:	4b16      	ldr	r3, [pc, #88]	@ (8003b08 <MX_TIM5_Init+0x94>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ab2:	4b15      	ldr	r3, [pc, #84]	@ (8003b08 <MX_TIM5_Init+0x94>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003ab8:	4813      	ldr	r0, [pc, #76]	@ (8003b08 <MX_TIM5_Init+0x94>)
 8003aba:	f004 fbe9 	bl	8008290 <HAL_TIM_Base_Init>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003ac4:	f7ff fa2b 	bl	8002f1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003acc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003ace:	f107 0310 	add.w	r3, r7, #16
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	480c      	ldr	r0, [pc, #48]	@ (8003b08 <MX_TIM5_Init+0x94>)
 8003ad6:	f005 fac7 	bl	8009068 <HAL_TIM_ConfigClockSource>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003ae0:	f7ff fa1d 	bl	8002f1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003aec:	1d3b      	adds	r3, r7, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4805      	ldr	r0, [pc, #20]	@ (8003b08 <MX_TIM5_Init+0x94>)
 8003af2:	f006 f9fb 	bl	8009eec <HAL_TIMEx_MasterConfigSynchronization>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003afc:	f7ff fa0f 	bl	8002f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003b00:	bf00      	nop
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000898 	.word	0x20000898
 8003b0c:	40000c00 	.word	0x40000c00

08003b10 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b16:	1d3b      	adds	r3, r7, #4
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003b20:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <MX_TIM6_Init+0x68>)
 8003b22:	4a16      	ldr	r2, [pc, #88]	@ (8003b7c <MX_TIM6_Init+0x6c>)
 8003b24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1700-1;
 8003b26:	4b14      	ldr	r3, [pc, #80]	@ (8003b78 <MX_TIM6_Init+0x68>)
 8003b28:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8003b2c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b2e:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <MX_TIM6_Init+0x68>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003b34:	4b10      	ldr	r3, [pc, #64]	@ (8003b78 <MX_TIM6_Init+0x68>)
 8003b36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b3a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b78 <MX_TIM6_Init+0x68>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003b42:	480d      	ldr	r0, [pc, #52]	@ (8003b78 <MX_TIM6_Init+0x68>)
 8003b44:	f004 fba4 	bl	8008290 <HAL_TIM_Base_Init>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003b4e:	f7ff f9e6 	bl	8002f1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4806      	ldr	r0, [pc, #24]	@ (8003b78 <MX_TIM6_Init+0x68>)
 8003b60:	f006 f9c4 	bl	8009eec <HAL_TIMEx_MasterConfigSynchronization>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003b6a:	f7ff f9d8 	bl	8002f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	200008e4 	.word	0x200008e4
 8003b7c:	40001000 	.word	0x40001000

08003b80 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003b86:	463b      	mov	r3, r7
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003b92:	4b1e      	ldr	r3, [pc, #120]	@ (8003c0c <MX_TIM16_Init+0x8c>)
 8003b94:	4a1e      	ldr	r2, [pc, #120]	@ (8003c10 <MX_TIM16_Init+0x90>)
 8003b96:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8003b98:	4b1c      	ldr	r3, [pc, #112]	@ (8003c0c <MX_TIM16_Init+0x8c>)
 8003b9a:	22a9      	movs	r2, #169	@ 0xa9
 8003b9c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c0c <MX_TIM16_Init+0x8c>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8003ba4:	4b19      	ldr	r3, [pc, #100]	@ (8003c0c <MX_TIM16_Init+0x8c>)
 8003ba6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003baa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bac:	4b17      	ldr	r3, [pc, #92]	@ (8003c0c <MX_TIM16_Init+0x8c>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003bb2:	4b16      	ldr	r3, [pc, #88]	@ (8003c0c <MX_TIM16_Init+0x8c>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb8:	4b14      	ldr	r3, [pc, #80]	@ (8003c0c <MX_TIM16_Init+0x8c>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003bbe:	4813      	ldr	r0, [pc, #76]	@ (8003c0c <MX_TIM16_Init+0x8c>)
 8003bc0:	f004 fb66 	bl	8008290 <HAL_TIM_Base_Init>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8003bca:	f7ff f9a8 	bl	8002f1e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8003bce:	480f      	ldr	r0, [pc, #60]	@ (8003c0c <MX_TIM16_Init+0x8c>)
 8003bd0:	f004 fd98 	bl	8008704 <HAL_TIM_IC_Init>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8003bda:	f7ff f9a0 	bl	8002f1e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003bde:	2300      	movs	r3, #0
 8003be0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003be2:	2301      	movs	r3, #1
 8003be4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8003bea:	230f      	movs	r3, #15
 8003bec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003bee:	463b      	mov	r3, r7
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4805      	ldr	r0, [pc, #20]	@ (8003c0c <MX_TIM16_Init+0x8c>)
 8003bf6:	f005 f886 	bl	8008d06 <HAL_TIM_IC_ConfigChannel>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8003c00:	f7ff f98d 	bl	8002f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000930 	.word	0x20000930
 8003c10:	40014400 	.word	0x40014400

08003c14 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c1a:	463b      	mov	r3, r7
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003c26:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca0 <MX_TIM17_Init+0x8c>)
 8003c28:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca4 <MX_TIM17_Init+0x90>)
 8003c2a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8003c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca0 <MX_TIM17_Init+0x8c>)
 8003c2e:	22a9      	movs	r2, #169	@ 0xa9
 8003c30:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca0 <MX_TIM17_Init+0x8c>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 8003c38:	4b19      	ldr	r3, [pc, #100]	@ (8003ca0 <MX_TIM17_Init+0x8c>)
 8003c3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003c3e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c40:	4b17      	ldr	r3, [pc, #92]	@ (8003ca0 <MX_TIM17_Init+0x8c>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003c46:	4b16      	ldr	r3, [pc, #88]	@ (8003ca0 <MX_TIM17_Init+0x8c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c4c:	4b14      	ldr	r3, [pc, #80]	@ (8003ca0 <MX_TIM17_Init+0x8c>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003c52:	4813      	ldr	r0, [pc, #76]	@ (8003ca0 <MX_TIM17_Init+0x8c>)
 8003c54:	f004 fb1c 	bl	8008290 <HAL_TIM_Base_Init>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8003c5e:	f7ff f95e 	bl	8002f1e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8003c62:	480f      	ldr	r0, [pc, #60]	@ (8003ca0 <MX_TIM17_Init+0x8c>)
 8003c64:	f004 fd4e 	bl	8008704 <HAL_TIM_IC_Init>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8003c6e:	f7ff f956 	bl	8002f1e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c72:	2300      	movs	r3, #0
 8003c74:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c76:	2301      	movs	r3, #1
 8003c78:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8003c7e:	230f      	movs	r3, #15
 8003c80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003c82:	463b      	mov	r3, r7
 8003c84:	2200      	movs	r2, #0
 8003c86:	4619      	mov	r1, r3
 8003c88:	4805      	ldr	r0, [pc, #20]	@ (8003ca0 <MX_TIM17_Init+0x8c>)
 8003c8a:	f005 f83c 	bl	8008d06 <HAL_TIM_IC_ConfigChannel>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8003c94:	f7ff f943 	bl	8002f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	2000097c 	.word	0x2000097c
 8003ca4:	40014800 	.word	0x40014800

08003ca8 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b09c      	sub	sp, #112	@ 0x70
 8003cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	605a      	str	r2, [r3, #4]
 8003cb8:	609a      	str	r2, [r3, #8]
 8003cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cc8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	611a      	str	r2, [r3, #16]
 8003cd8:	615a      	str	r2, [r3, #20]
 8003cda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003cdc:	1d3b      	adds	r3, r7, #4
 8003cde:	2234      	movs	r2, #52	@ 0x34
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f009 faf9 	bl	800d2da <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8003ce8:	4b46      	ldr	r3, [pc, #280]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003cea:	4a47      	ldr	r2, [pc, #284]	@ (8003e08 <MX_TIM20_Init+0x160>)
 8003cec:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 260-1;
 8003cee:	4b45      	ldr	r3, [pc, #276]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003cf0:	f240 1203 	movw	r2, #259	@ 0x103
 8003cf4:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cf6:	4b43      	ldr	r3, [pc, #268]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8003cfc:	4b41      	ldr	r3, [pc, #260]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003cfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d02:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d04:	4b3f      	ldr	r3, [pc, #252]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8003d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d10:	4b3c      	ldr	r3, [pc, #240]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8003d16:	483b      	ldr	r0, [pc, #236]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003d18:	f004 faba 	bl	8008290 <HAL_TIM_Base_Init>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <MX_TIM20_Init+0x7e>
  {
    Error_Handler();
 8003d22:	f7ff f8fc 	bl	8002f1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d2a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8003d2c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003d30:	4619      	mov	r1, r3
 8003d32:	4834      	ldr	r0, [pc, #208]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003d34:	f005 f998 	bl	8009068 <HAL_TIM_ConfigClockSource>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <MX_TIM20_Init+0x9a>
  {
    Error_Handler();
 8003d3e:	f7ff f8ee 	bl	8002f1e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8003d42:	4830      	ldr	r0, [pc, #192]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003d44:	f004 fb74 	bl	8008430 <HAL_TIM_PWM_Init>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <MX_TIM20_Init+0xaa>
  {
    Error_Handler();
 8003d4e:	f7ff f8e6 	bl	8002f1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d52:	2300      	movs	r3, #0
 8003d54:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d56:	2300      	movs	r3, #0
 8003d58:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8003d5e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003d62:	4619      	mov	r1, r3
 8003d64:	4827      	ldr	r0, [pc, #156]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003d66:	f006 f8c1 	bl	8009eec <HAL_TIMEx_MasterConfigSynchronization>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM20_Init+0xcc>
  {
    Error_Handler();
 8003d70:	f7ff f8d5 	bl	8002f1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d74:	2360      	movs	r3, #96	@ 0x60
 8003d76:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d80:	2300      	movs	r3, #0
 8003d82:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d90:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003d94:	2200      	movs	r2, #0
 8003d96:	4619      	mov	r1, r3
 8003d98:	481a      	ldr	r0, [pc, #104]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003d9a:	f005 f851 	bl	8008e40 <HAL_TIM_PWM_ConfigChannel>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <MX_TIM20_Init+0x100>
  {
    Error_Handler();
 8003da4:	f7ff f8bb 	bl	8002f1e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003dbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003dc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003dce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8003de0:	1d3b      	adds	r3, r7, #4
 8003de2:	4619      	mov	r1, r3
 8003de4:	4807      	ldr	r0, [pc, #28]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003de6:	f006 f917 	bl	800a018 <HAL_TIMEx_ConfigBreakDeadTime>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_TIM20_Init+0x14c>
  {
    Error_Handler();
 8003df0:	f7ff f895 	bl	8002f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8003df4:	4803      	ldr	r0, [pc, #12]	@ (8003e04 <MX_TIM20_Init+0x15c>)
 8003df6:	f000 f95b 	bl	80040b0 <HAL_TIM_MspPostInit>

}
 8003dfa:	bf00      	nop
 8003dfc:	3770      	adds	r7, #112	@ 0x70
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200009c8 	.word	0x200009c8
 8003e08:	40015000 	.word	0x40015000

08003e0c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a11      	ldr	r2, [pc, #68]	@ (8003e60 <HAL_TIM_PWM_MspInit+0x54>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d11b      	bne.n	8003e56 <HAL_TIM_PWM_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e1e:	4b11      	ldr	r3, [pc, #68]	@ (8003e64 <HAL_TIM_PWM_MspInit+0x58>)
 8003e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e22:	4a10      	ldr	r2, [pc, #64]	@ (8003e64 <HAL_TIM_PWM_MspInit+0x58>)
 8003e24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e28:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e64 <HAL_TIM_PWM_MspInit+0x58>)
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2100      	movs	r1, #0
 8003e3a:	2019      	movs	r0, #25
 8003e3c:	f000 fe1b 	bl	8004a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003e40:	2019      	movs	r0, #25
 8003e42:	f000 fe32 	bl	8004aaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003e46:	2200      	movs	r2, #0
 8003e48:	2100      	movs	r1, #0
 8003e4a:	201a      	movs	r0, #26
 8003e4c:	f000 fe13 	bl	8004a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003e50:	201a      	movs	r0, #26
 8003e52:	f000 fe2a 	bl	8004aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40021000 	.word	0x40021000

08003e68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b092      	sub	sp, #72	@ 0x48
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	60da      	str	r2, [r3, #12]
 8003e7e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e88:	d114      	bne.n	8003eb4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e8a:	4b80      	ldr	r3, [pc, #512]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8e:	4a7f      	ldr	r2, [pc, #508]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e96:	4b7d      	ldr	r3, [pc, #500]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	201c      	movs	r0, #28
 8003ea8:	f000 fde5 	bl	8004a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003eac:	201c      	movs	r0, #28
 8003eae:	f000 fdfc 	bl	8004aaa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8003eb2:	e0e6      	b.n	8004082 <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM3)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a75      	ldr	r2, [pc, #468]	@ (8004090 <HAL_TIM_Base_MspInit+0x228>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d130      	bne.n	8003f20 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ebe:	4b73      	ldr	r3, [pc, #460]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec2:	4a72      	ldr	r2, [pc, #456]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003ec4:	f043 0302 	orr.w	r3, r3, #2
 8003ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eca:	4b70      	ldr	r3, [pc, #448]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eda:	4a6c      	ldr	r2, [pc, #432]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003edc:	f043 0304 	orr.w	r3, r3, #4
 8003ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003eee:	2340      	movs	r3, #64	@ 0x40
 8003ef0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efa:	2300      	movs	r3, #0
 8003efc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003efe:	2302      	movs	r3, #2
 8003f00:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f06:	4619      	mov	r1, r3
 8003f08:	4862      	ldr	r0, [pc, #392]	@ (8004094 <HAL_TIM_Base_MspInit+0x22c>)
 8003f0a:	f001 f937 	bl	800517c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2101      	movs	r1, #1
 8003f12:	201d      	movs	r0, #29
 8003f14:	f000 fdaf 	bl	8004a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f18:	201d      	movs	r0, #29
 8003f1a:	f000 fdc6 	bl	8004aaa <HAL_NVIC_EnableIRQ>
}
 8003f1e:	e0b0      	b.n	8004082 <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM5)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a5c      	ldr	r2, [pc, #368]	@ (8004098 <HAL_TIM_Base_MspInit+0x230>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d114      	bne.n	8003f54 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f2a:	4b58      	ldr	r3, [pc, #352]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2e:	4a57      	ldr	r2, [pc, #348]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003f30:	f043 0308 	orr.w	r3, r3, #8
 8003f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f36:	4b55      	ldr	r3, [pc, #340]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003f42:	2200      	movs	r2, #0
 8003f44:	2100      	movs	r1, #0
 8003f46:	2032      	movs	r0, #50	@ 0x32
 8003f48:	f000 fd95 	bl	8004a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003f4c:	2032      	movs	r0, #50	@ 0x32
 8003f4e:	f000 fdac 	bl	8004aaa <HAL_NVIC_EnableIRQ>
}
 8003f52:	e096      	b.n	8004082 <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM6)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a50      	ldr	r2, [pc, #320]	@ (800409c <HAL_TIM_Base_MspInit+0x234>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d114      	bne.n	8003f88 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f62:	4a4a      	ldr	r2, [pc, #296]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003f64:	f043 0310 	orr.w	r3, r3, #16
 8003f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f6a:	4b48      	ldr	r3, [pc, #288]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	623b      	str	r3, [r7, #32]
 8003f74:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003f76:	2200      	movs	r2, #0
 8003f78:	2100      	movs	r1, #0
 8003f7a:	2036      	movs	r0, #54	@ 0x36
 8003f7c:	f000 fd7b 	bl	8004a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f80:	2036      	movs	r0, #54	@ 0x36
 8003f82:	f000 fd92 	bl	8004aaa <HAL_NVIC_EnableIRQ>
}
 8003f86:	e07c      	b.n	8004082 <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM16)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a44      	ldr	r2, [pc, #272]	@ (80040a0 <HAL_TIM_Base_MspInit+0x238>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d130      	bne.n	8003ff4 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003f92:	4b3e      	ldr	r3, [pc, #248]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f96:	4a3d      	ldr	r2, [pc, #244]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003faa:	4b38      	ldr	r3, [pc, #224]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fae:	4a37      	ldr	r2, [pc, #220]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003fb0:	f043 0302 	orr.w	r3, r3, #2
 8003fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fb6:	4b35      	ldr	r3, [pc, #212]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003fc2:	2310      	movs	r3, #16
 8003fc4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4831      	ldr	r0, [pc, #196]	@ (80040a4 <HAL_TIM_Base_MspInit+0x23c>)
 8003fde:	f001 f8cd 	bl	800517c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	2019      	movs	r0, #25
 8003fe8:	f000 fd45 	bl	8004a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003fec:	2019      	movs	r0, #25
 8003fee:	f000 fd5c 	bl	8004aaa <HAL_NVIC_EnableIRQ>
}
 8003ff2:	e046      	b.n	8004082 <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM17)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80040a8 <HAL_TIM_Base_MspInit+0x240>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d130      	bne.n	8004060 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003ffe:	4b23      	ldr	r3, [pc, #140]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8004000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004002:	4a22      	ldr	r2, [pc, #136]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004008:	6613      	str	r3, [r2, #96]	@ 0x60
 800400a:	4b20      	ldr	r3, [pc, #128]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 800400c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800400e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004016:	4b1d      	ldr	r3, [pc, #116]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8004018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401a:	4a1c      	ldr	r2, [pc, #112]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 800401c:	f043 0302 	orr.w	r3, r3, #2
 8004020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004022:	4b1a      	ldr	r3, [pc, #104]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8004024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800402e:	2320      	movs	r3, #32
 8004030:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004032:	2302      	movs	r3, #2
 8004034:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403a:	2300      	movs	r3, #0
 800403c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800403e:	230a      	movs	r3, #10
 8004040:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004042:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004046:	4619      	mov	r1, r3
 8004048:	4816      	ldr	r0, [pc, #88]	@ (80040a4 <HAL_TIM_Base_MspInit+0x23c>)
 800404a:	f001 f897 	bl	800517c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800404e:	2200      	movs	r2, #0
 8004050:	2100      	movs	r1, #0
 8004052:	201a      	movs	r0, #26
 8004054:	f000 fd0f 	bl	8004a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004058:	201a      	movs	r0, #26
 800405a:	f000 fd26 	bl	8004aaa <HAL_NVIC_EnableIRQ>
}
 800405e:	e010      	b.n	8004082 <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM20)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a11      	ldr	r2, [pc, #68]	@ (80040ac <HAL_TIM_Base_MspInit+0x244>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10b      	bne.n	8004082 <HAL_TIM_Base_MspInit+0x21a>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800406a:	4b08      	ldr	r3, [pc, #32]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 800406c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406e:	4a07      	ldr	r2, [pc, #28]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8004070:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004074:	6613      	str	r3, [r2, #96]	@ 0x60
 8004076:	4b05      	ldr	r3, [pc, #20]	@ (800408c <HAL_TIM_Base_MspInit+0x224>)
 8004078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800407a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]
}
 8004082:	bf00      	nop
 8004084:	3748      	adds	r7, #72	@ 0x48
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000
 8004090:	40000400 	.word	0x40000400
 8004094:	48000800 	.word	0x48000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	40001000 	.word	0x40001000
 80040a0:	40014400 	.word	0x40014400
 80040a4:	48000400 	.word	0x48000400
 80040a8:	40014800 	.word	0x40014800
 80040ac:	40015000 	.word	0x40015000

080040b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	@ 0x28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b8:	f107 0314 	add.w	r3, r7, #20
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	605a      	str	r2, [r3, #4]
 80040c2:	609a      	str	r2, [r3, #8]
 80040c4:	60da      	str	r2, [r3, #12]
 80040c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a22      	ldr	r2, [pc, #136]	@ (8004158 <HAL_TIM_MspPostInit+0xa8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d11c      	bne.n	800410c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040d2:	4b22      	ldr	r3, [pc, #136]	@ (800415c <HAL_TIM_MspPostInit+0xac>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d6:	4a21      	ldr	r2, [pc, #132]	@ (800415c <HAL_TIM_MspPostInit+0xac>)
 80040d8:	f043 0304 	orr.w	r3, r3, #4
 80040dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040de:	4b1f      	ldr	r3, [pc, #124]	@ (800415c <HAL_TIM_MspPostInit+0xac>)
 80040e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 80040ea:	2303      	movs	r3, #3
 80040ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f6:	2300      	movs	r3, #0
 80040f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80040fa:	2302      	movs	r3, #2
 80040fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040fe:	f107 0314 	add.w	r3, r7, #20
 8004102:	4619      	mov	r1, r3
 8004104:	4816      	ldr	r0, [pc, #88]	@ (8004160 <HAL_TIM_MspPostInit+0xb0>)
 8004106:	f001 f839 	bl	800517c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 800410a:	e020      	b.n	800414e <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM20)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a14      	ldr	r2, [pc, #80]	@ (8004164 <HAL_TIM_MspPostInit+0xb4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d11b      	bne.n	800414e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004116:	4b11      	ldr	r3, [pc, #68]	@ (800415c <HAL_TIM_MspPostInit+0xac>)
 8004118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411a:	4a10      	ldr	r2, [pc, #64]	@ (800415c <HAL_TIM_MspPostInit+0xac>)
 800411c:	f043 0302 	orr.w	r3, r3, #2
 8004120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004122:	4b0e      	ldr	r3, [pc, #56]	@ (800415c <HAL_TIM_MspPostInit+0xac>)
 8004124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800412e:	2304      	movs	r3, #4
 8004130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004132:	2302      	movs	r3, #2
 8004134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800413a:	2300      	movs	r3, #0
 800413c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 800413e:	2303      	movs	r3, #3
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004142:	f107 0314 	add.w	r3, r7, #20
 8004146:	4619      	mov	r1, r3
 8004148:	4807      	ldr	r0, [pc, #28]	@ (8004168 <HAL_TIM_MspPostInit+0xb8>)
 800414a:	f001 f817 	bl	800517c <HAL_GPIO_Init>
}
 800414e:	bf00      	nop
 8004150:	3728      	adds	r7, #40	@ 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40012c00 	.word	0x40012c00
 800415c:	40021000 	.word	0x40021000
 8004160:	48000800 	.word	0x48000800
 8004164:	40015000 	.word	0x40015000
 8004168:	48000400 	.word	0x48000400

0800416c <vTimerInit>:
#include "timer.h"

int iIndex;
single_timer iActiveTimers[20]; //Consegue guardar 20 contadores diferentes

void vTimerInit() {
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
	iIndex = 0;
 8004172:	4b0f      	ldr	r3, [pc, #60]	@ (80041b0 <vTimerInit+0x44>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 20; i++) {
 8004178:	2300      	movs	r3, #0
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	e00d      	b.n	800419a <vTimerInit+0x2e>
		iActiveTimers[i].iCounter = 0;
 800417e:	4a0d      	ldr	r2, [pc, #52]	@ (80041b4 <vTimerInit+0x48>)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2100      	movs	r1, #0
 8004184:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		iActiveTimers[i].iTotalMs = 0;
 8004188:	4a0a      	ldr	r2, [pc, #40]	@ (80041b4 <vTimerInit+0x48>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4413      	add	r3, r2
 8004190:	2200      	movs	r2, #0
 8004192:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 20; i++) {
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3301      	adds	r3, #1
 8004198:	607b      	str	r3, [r7, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b13      	cmp	r3, #19
 800419e:	ddee      	ble.n	800417e <vTimerInit+0x12>
	}
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20000a14 	.word	0x20000a14
 80041b4:	20000a18 	.word	0x20000a18

080041b8 <iSetTimer>:

//set o timer para comecar a contar, conta até total_ms, no timerCode
//Retorna o "codigo' do timer
int iSetTimer(int total_ms) {
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
	iActiveTimers[iIndex].iTotalMs = total_ms;
 80041c0:	4b09      	ldr	r3, [pc, #36]	@ (80041e8 <iSetTimer+0x30>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a09      	ldr	r2, [pc, #36]	@ (80041ec <iSetTimer+0x34>)
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4413      	add	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	605a      	str	r2, [r3, #4]
	return ++iIndex;
 80041ce:	4b06      	ldr	r3, [pc, #24]	@ (80041e8 <iSetTimer+0x30>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3301      	adds	r3, #1
 80041d4:	4a04      	ldr	r2, [pc, #16]	@ (80041e8 <iSetTimer+0x30>)
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b03      	ldr	r3, [pc, #12]	@ (80041e8 <iSetTimer+0x30>)
 80041da:	681b      	ldr	r3, [r3, #0]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	20000a14 	.word	0x20000a14
 80041ec:	20000a18 	.word	0x20000a18

080041f0 <cCountTime>:

// conta (ms) ms, funcao chamada a cada 10 ms, pela main (pTimGeral)
char cCountTime(int ms, int timerCode) {
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
	iActiveTimers[timerCode].iCounter += ms;
 80041fa:	4a11      	ldr	r2, [pc, #68]	@ (8004240 <cCountTime+0x50>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	441a      	add	r2, r3
 8004206:	490e      	ldr	r1, [pc, #56]	@ (8004240 <cCountTime+0x50>)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	if (iActiveTimers[timerCode].iCounter >= iActiveTimers[timerCode].iTotalMs) {
 800420e:	4a0c      	ldr	r2, [pc, #48]	@ (8004240 <cCountTime+0x50>)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004216:	490a      	ldr	r1, [pc, #40]	@ (8004240 <cCountTime+0x50>)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	440b      	add	r3, r1
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	db06      	blt.n	8004232 <cCountTime+0x42>
		iActiveTimers[timerCode].iCounter = 0;
 8004224:	4a06      	ldr	r2, [pc, #24]	@ (8004240 <cCountTime+0x50>)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2100      	movs	r1, #0
 800422a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		return 1;
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <cCountTime+0x44>
	}

	return 0;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	20000a18 	.word	0x20000a18

08004244 <vUltrassonicoInit>:
//
// INPUT PARAMS: TIM_HandleTypeDef* pTimerEcoUltrassonicoFrontal ,TIM_HandleTypeDef* TimerTrigger
//
// OUTPUT PARAMS: n/a
// ********************************************** //
void vUltrassonicoInit(TIM_HandleTypeDef* pTimerEcoUltrassonicoFrontal ,TIM_HandleTypeDef* TimerTrigger) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]

  xUltrassonicoData.pTimerEcoUltrassonicoFrontal=pTimerEcoUltrassonicoFrontal;
 800424e:	4a0f      	ldr	r2, [pc, #60]	@ (800428c <vUltrassonicoInit+0x48>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6013      	str	r3, [r2, #0]
  xUltrassonicoData.TimerTrigger= TimerTrigger;
 8004254:	4a0d      	ldr	r2, [pc, #52]	@ (800428c <vUltrassonicoInit+0x48>)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6053      	str	r3, [r2, #4]
  xUltrassonicoData.Distance=0.0;
 800425a:	4b0c      	ldr	r3, [pc, #48]	@ (800428c <vUltrassonicoInit+0x48>)
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	609a      	str	r2, [r3, #8]

  HAL_TIM_PWM_Start(xUltrassonicoData.TimerTrigger, TIM_CHANNEL_1);
 8004262:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <vUltrassonicoInit+0x48>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2100      	movs	r1, #0
 8004268:	4618      	mov	r0, r3
 800426a:	f004 f939 	bl	80084e0 <HAL_TIM_PWM_Start>
  //Define um pulso de 10us a cada 100ms no trigger, utilizando logica pwm
  xUltrassonicoData.TimerTrigger->Instance->CCR1 = 8;
 800426e:	4b07      	ldr	r3, [pc, #28]	@ (800428c <vUltrassonicoInit+0x48>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2208      	movs	r2, #8
 8004276:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_TIM_IC_Start_IT(xUltrassonicoData.pTimerEcoUltrassonicoFrontal, TIM_CHANNEL_1);
 8004278:	4b04      	ldr	r3, [pc, #16]	@ (800428c <vUltrassonicoInit+0x48>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f004 faa2 	bl	80087c8 <HAL_TIM_IC_Start_IT>

}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000ab8 	.word	0x20000ab8

08004290 <fUltrassonicoGetDistance>:
// INPUT PARAMS: uint16_t uiAuxDistanceUltrassonicoFrontal1,uint16_t uiAuxDistanceUltrassonicoFrontal2
//
// OUTPUT PARAMS: Distance
// ********************************************** //

float fUltrassonicoGetDistance(uint16_t uiAuxDistanceUltrassonicoFrontal1,uint16_t uiAuxDistanceUltrassonicoFrontal2){
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	460a      	mov	r2, r1
 800429a:	80fb      	strh	r3, [r7, #6]
 800429c:	4613      	mov	r3, r2
 800429e:	80bb      	strh	r3, [r7, #4]
	 1-Realiza-se a subtracao dos dois valores de contagem do eco
	 2-Multiplica-se esse valor por 1.5, que é o tempo em microsegundos de cada contagem.
	 3-Divide-se esse valor por 58.772 us, que é o tempo que leva para 1 cm refletir a onda no sensor.
	 4-Obtem-se o valor da distancia em cm.
	 */
	xUltrassonicoData.Distance=(uiAuxDistanceUltrassonicoFrontal2-uiAuxDistanceUltrassonicoFrontal1)*1.5/(58.772);
 80042a0:	88ba      	ldrh	r2, [r7, #4]
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fc f964 	bl	8000574 <__aeabi_i2d>
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	4b11      	ldr	r3, [pc, #68]	@ (80042f8 <fUltrassonicoGetDistance+0x68>)
 80042b2:	f7fc f9c9 	bl	8000648 <__aeabi_dmul>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	a30c      	add	r3, pc, #48	@ (adr r3, 80042f0 <fUltrassonicoGetDistance+0x60>)
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f7fc faea 	bl	800089c <__aeabi_ddiv>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4610      	mov	r0, r2
 80042ce:	4619      	mov	r1, r3
 80042d0:	f7fc fcb2 	bl	8000c38 <__aeabi_d2f>
 80042d4:	4603      	mov	r3, r0
 80042d6:	4a09      	ldr	r2, [pc, #36]	@ (80042fc <fUltrassonicoGetDistance+0x6c>)
 80042d8:	6093      	str	r3, [r2, #8]
	return xUltrassonicoData.Distance;
 80042da:	4b08      	ldr	r3, [pc, #32]	@ (80042fc <fUltrassonicoGetDistance+0x6c>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	ee07 3a90 	vmov	s15, r3
}
 80042e2:	eeb0 0a67 	vmov.f32	s0, s15
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	f3af 8000 	nop.w
 80042f0:	e5604189 	.word	0xe5604189
 80042f4:	404d62d0 	.word	0x404d62d0
 80042f8:	3ff80000 	.word	0x3ff80000
 80042fc:	20000ab8 	.word	0x20000ab8

08004300 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004304:	4b21      	ldr	r3, [pc, #132]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 8004306:	4a22      	ldr	r2, [pc, #136]	@ (8004390 <MX_LPUART1_UART_Init+0x90>)
 8004308:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800430a:	4b20      	ldr	r3, [pc, #128]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 800430c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004310:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004312:	4b1e      	ldr	r3, [pc, #120]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 8004314:	2200      	movs	r2, #0
 8004316:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004318:	4b1c      	ldr	r3, [pc, #112]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 800431a:	2200      	movs	r2, #0
 800431c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800431e:	4b1b      	ldr	r3, [pc, #108]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 8004320:	2200      	movs	r2, #0
 8004322:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004324:	4b19      	ldr	r3, [pc, #100]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 8004326:	220c      	movs	r2, #12
 8004328:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800432a:	4b18      	ldr	r3, [pc, #96]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 800432c:	2200      	movs	r2, #0
 800432e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004330:	4b16      	ldr	r3, [pc, #88]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 8004332:	2200      	movs	r2, #0
 8004334:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004336:	4b15      	ldr	r3, [pc, #84]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 8004338:	2200      	movs	r2, #0
 800433a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800433c:	4b13      	ldr	r3, [pc, #76]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 800433e:	2200      	movs	r2, #0
 8004340:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004342:	4812      	ldr	r0, [pc, #72]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 8004344:	f005 ff42 	bl	800a1cc <HAL_UART_Init>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800434e:	f7fe fde6 	bl	8002f1e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004352:	2100      	movs	r1, #0
 8004354:	480d      	ldr	r0, [pc, #52]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 8004356:	f007 ffbc 	bl	800c2d2 <HAL_UARTEx_SetTxFifoThreshold>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8004360:	f7fe fddd 	bl	8002f1e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004364:	2100      	movs	r1, #0
 8004366:	4809      	ldr	r0, [pc, #36]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 8004368:	f007 fff1 	bl	800c34e <HAL_UARTEx_SetRxFifoThreshold>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8004372:	f7fe fdd4 	bl	8002f1e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004376:	4805      	ldr	r0, [pc, #20]	@ (800438c <MX_LPUART1_UART_Init+0x8c>)
 8004378:	f007 ff72 	bl	800c260 <HAL_UARTEx_DisableFifoMode>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8004382:	f7fe fdcc 	bl	8002f1e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000ac4 	.word	0x20000ac4
 8004390:	40008000 	.word	0x40008000

08004394 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004398:	4b22      	ldr	r3, [pc, #136]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 800439a:	4a23      	ldr	r2, [pc, #140]	@ (8004428 <MX_USART1_UART_Init+0x94>)
 800439c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800439e:	4b21      	ldr	r3, [pc, #132]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 80043a0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80043a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 80043ba:	220c      	movs	r2, #12
 80043bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043be:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043c4:	4b17      	ldr	r3, [pc, #92]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043ca:	4b16      	ldr	r3, [pc, #88]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043d0:	4b14      	ldr	r3, [pc, #80]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043d6:	4b13      	ldr	r3, [pc, #76]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 80043d8:	2200      	movs	r2, #0
 80043da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043dc:	4811      	ldr	r0, [pc, #68]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 80043de:	f005 fef5 	bl	800a1cc <HAL_UART_Init>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80043e8:	f7fe fd99 	bl	8002f1e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043ec:	2100      	movs	r1, #0
 80043ee:	480d      	ldr	r0, [pc, #52]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 80043f0:	f007 ff6f 	bl	800c2d2 <HAL_UARTEx_SetTxFifoThreshold>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80043fa:	f7fe fd90 	bl	8002f1e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043fe:	2100      	movs	r1, #0
 8004400:	4808      	ldr	r0, [pc, #32]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 8004402:	f007 ffa4 	bl	800c34e <HAL_UARTEx_SetRxFifoThreshold>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800440c:	f7fe fd87 	bl	8002f1e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004410:	4804      	ldr	r0, [pc, #16]	@ (8004424 <MX_USART1_UART_Init+0x90>)
 8004412:	f007 ff25 	bl	800c260 <HAL_UARTEx_DisableFifoMode>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800441c:	f7fe fd7f 	bl	8002f1e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000b58 	.word	0x20000b58
 8004428:	40013800 	.word	0x40013800

0800442c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004430:	4b22      	ldr	r3, [pc, #136]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 8004432:	4a23      	ldr	r2, [pc, #140]	@ (80044c0 <MX_USART3_UART_Init+0x94>)
 8004434:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8004436:	4b21      	ldr	r3, [pc, #132]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 8004438:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800443c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800443e:	4b1f      	ldr	r3, [pc, #124]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 8004440:	2200      	movs	r2, #0
 8004442:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004444:	4b1d      	ldr	r3, [pc, #116]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 8004446:	2200      	movs	r2, #0
 8004448:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800444a:	4b1c      	ldr	r3, [pc, #112]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 800444c:	2200      	movs	r2, #0
 800444e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004450:	4b1a      	ldr	r3, [pc, #104]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 8004452:	220c      	movs	r2, #12
 8004454:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004456:	4b19      	ldr	r3, [pc, #100]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 8004458:	2200      	movs	r2, #0
 800445a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800445c:	4b17      	ldr	r3, [pc, #92]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 800445e:	2200      	movs	r2, #0
 8004460:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004462:	4b16      	ldr	r3, [pc, #88]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 8004464:	2200      	movs	r2, #0
 8004466:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004468:	4b14      	ldr	r3, [pc, #80]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 800446a:	2200      	movs	r2, #0
 800446c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800446e:	4b13      	ldr	r3, [pc, #76]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 8004470:	2200      	movs	r2, #0
 8004472:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004474:	4811      	ldr	r0, [pc, #68]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 8004476:	f005 fea9 	bl	800a1cc <HAL_UART_Init>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004480:	f7fe fd4d 	bl	8002f1e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004484:	2100      	movs	r1, #0
 8004486:	480d      	ldr	r0, [pc, #52]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 8004488:	f007 ff23 	bl	800c2d2 <HAL_UARTEx_SetTxFifoThreshold>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004492:	f7fe fd44 	bl	8002f1e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004496:	2100      	movs	r1, #0
 8004498:	4808      	ldr	r0, [pc, #32]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 800449a:	f007 ff58 	bl	800c34e <HAL_UARTEx_SetRxFifoThreshold>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80044a4:	f7fe fd3b 	bl	8002f1e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80044a8:	4804      	ldr	r0, [pc, #16]	@ (80044bc <MX_USART3_UART_Init+0x90>)
 80044aa:	f007 fed9 	bl	800c260 <HAL_UARTEx_DisableFifoMode>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80044b4:	f7fe fd33 	bl	8002f1e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80044b8:	bf00      	nop
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000bec 	.word	0x20000bec
 80044c0:	40004800 	.word	0x40004800

080044c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b0a4      	sub	sp, #144	@ 0x90
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044cc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	609a      	str	r2, [r3, #8]
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044e0:	2254      	movs	r2, #84	@ 0x54
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f008 fef8 	bl	800d2da <memset>
  if(uartHandle->Instance==LPUART1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7e      	ldr	r2, [pc, #504]	@ (80046e8 <HAL_UART_MspInit+0x224>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d143      	bne.n	800457c <HAL_UART_MspInit+0xb8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80044f4:	2320      	movs	r3, #32
 80044f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80044f8:	2300      	movs	r3, #0
 80044fa:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004500:	4618      	mov	r0, r3
 8004502:	f003 fc77 	bl	8007df4 <HAL_RCCEx_PeriphCLKConfig>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800450c:	f7fe fd07 	bl	8002f1e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004510:	4b76      	ldr	r3, [pc, #472]	@ (80046ec <HAL_UART_MspInit+0x228>)
 8004512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004514:	4a75      	ldr	r2, [pc, #468]	@ (80046ec <HAL_UART_MspInit+0x228>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800451c:	4b73      	ldr	r3, [pc, #460]	@ (80046ec <HAL_UART_MspInit+0x228>)
 800451e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004528:	4b70      	ldr	r3, [pc, #448]	@ (80046ec <HAL_UART_MspInit+0x228>)
 800452a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800452c:	4a6f      	ldr	r2, [pc, #444]	@ (80046ec <HAL_UART_MspInit+0x228>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004534:	4b6d      	ldr	r3, [pc, #436]	@ (80046ec <HAL_UART_MspInit+0x228>)
 8004536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	623b      	str	r3, [r7, #32]
 800453e:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8004540:	230c      	movs	r3, #12
 8004542:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004544:	2302      	movs	r3, #2
 8004546:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454a:	2300      	movs	r3, #0
 800454c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004550:	2300      	movs	r3, #0
 8004552:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004556:	230c      	movs	r3, #12
 8004558:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004560:	4619      	mov	r1, r3
 8004562:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004566:	f000 fe09 	bl	800517c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800456a:	2200      	movs	r2, #0
 800456c:	2100      	movs	r1, #0
 800456e:	205b      	movs	r0, #91	@ 0x5b
 8004570:	f000 fa81 	bl	8004a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004574:	205b      	movs	r0, #91	@ 0x5b
 8004576:	f000 fa98 	bl	8004aaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800457a:	e0b1      	b.n	80046e0 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a5b      	ldr	r2, [pc, #364]	@ (80046f0 <HAL_UART_MspInit+0x22c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d164      	bne.n	8004650 <HAL_UART_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004586:	2301      	movs	r3, #1
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800458a:	2300      	movs	r3, #0
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800458e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004592:	4618      	mov	r0, r3
 8004594:	f003 fc2e 	bl	8007df4 <HAL_RCCEx_PeriphCLKConfig>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_UART_MspInit+0xde>
      Error_Handler();
 800459e:	f7fe fcbe 	bl	8002f1e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80045a2:	4b52      	ldr	r3, [pc, #328]	@ (80046ec <HAL_UART_MspInit+0x228>)
 80045a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a6:	4a51      	ldr	r2, [pc, #324]	@ (80046ec <HAL_UART_MspInit+0x228>)
 80045a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80045ae:	4b4f      	ldr	r3, [pc, #316]	@ (80046ec <HAL_UART_MspInit+0x228>)
 80045b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ba:	4b4c      	ldr	r3, [pc, #304]	@ (80046ec <HAL_UART_MspInit+0x228>)
 80045bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045be:	4a4b      	ldr	r2, [pc, #300]	@ (80046ec <HAL_UART_MspInit+0x228>)
 80045c0:	f043 0304 	orr.w	r3, r3, #4
 80045c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045c6:	4b49      	ldr	r3, [pc, #292]	@ (80046ec <HAL_UART_MspInit+0x228>)
 80045c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d2:	4b46      	ldr	r3, [pc, #280]	@ (80046ec <HAL_UART_MspInit+0x228>)
 80045d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d6:	4a45      	ldr	r2, [pc, #276]	@ (80046ec <HAL_UART_MspInit+0x228>)
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045de:	4b43      	ldr	r3, [pc, #268]	@ (80046ec <HAL_UART_MspInit+0x228>)
 80045e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80045ea:	2320      	movs	r3, #32
 80045ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ee:	2302      	movs	r3, #2
 80045f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fa:	2300      	movs	r3, #0
 80045fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004600:	2307      	movs	r3, #7
 8004602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004606:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800460a:	4619      	mov	r1, r3
 800460c:	4839      	ldr	r0, [pc, #228]	@ (80046f4 <HAL_UART_MspInit+0x230>)
 800460e:	f000 fdb5 	bl	800517c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004612:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004616:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004618:	2302      	movs	r3, #2
 800461a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461e:	2300      	movs	r3, #0
 8004620:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004624:	2300      	movs	r3, #0
 8004626:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800462a:	2307      	movs	r3, #7
 800462c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004630:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004634:	4619      	mov	r1, r3
 8004636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800463a:	f000 fd9f 	bl	800517c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800463e:	2200      	movs	r2, #0
 8004640:	2100      	movs	r1, #0
 8004642:	2025      	movs	r0, #37	@ 0x25
 8004644:	f000 fa17 	bl	8004a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004648:	2025      	movs	r0, #37	@ 0x25
 800464a:	f000 fa2e 	bl	8004aaa <HAL_NVIC_EnableIRQ>
}
 800464e:	e047      	b.n	80046e0 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART3)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a28      	ldr	r2, [pc, #160]	@ (80046f8 <HAL_UART_MspInit+0x234>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d142      	bne.n	80046e0 <HAL_UART_MspInit+0x21c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800465a:	2304      	movs	r3, #4
 800465c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800465e:	2300      	movs	r3, #0
 8004660:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004662:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004666:	4618      	mov	r0, r3
 8004668:	f003 fbc4 	bl	8007df4 <HAL_RCCEx_PeriphCLKConfig>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 8004672:	f7fe fc54 	bl	8002f1e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004676:	4b1d      	ldr	r3, [pc, #116]	@ (80046ec <HAL_UART_MspInit+0x228>)
 8004678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467a:	4a1c      	ldr	r2, [pc, #112]	@ (80046ec <HAL_UART_MspInit+0x228>)
 800467c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004680:	6593      	str	r3, [r2, #88]	@ 0x58
 8004682:	4b1a      	ldr	r3, [pc, #104]	@ (80046ec <HAL_UART_MspInit+0x228>)
 8004684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004686:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800468e:	4b17      	ldr	r3, [pc, #92]	@ (80046ec <HAL_UART_MspInit+0x228>)
 8004690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004692:	4a16      	ldr	r2, [pc, #88]	@ (80046ec <HAL_UART_MspInit+0x228>)
 8004694:	f043 0302 	orr.w	r3, r3, #2
 8004698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800469a:	4b14      	ldr	r3, [pc, #80]	@ (80046ec <HAL_UART_MspInit+0x228>)
 800469c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80046a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80046aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ac:	2302      	movs	r3, #2
 80046ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b8:	2300      	movs	r3, #0
 80046ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80046be:	2307      	movs	r3, #7
 80046c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80046c8:	4619      	mov	r1, r3
 80046ca:	480c      	ldr	r0, [pc, #48]	@ (80046fc <HAL_UART_MspInit+0x238>)
 80046cc:	f000 fd56 	bl	800517c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80046d0:	2200      	movs	r2, #0
 80046d2:	2102      	movs	r1, #2
 80046d4:	2027      	movs	r0, #39	@ 0x27
 80046d6:	f000 f9ce 	bl	8004a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80046da:	2027      	movs	r0, #39	@ 0x27
 80046dc:	f000 f9e5 	bl	8004aaa <HAL_NVIC_EnableIRQ>
}
 80046e0:	bf00      	nop
 80046e2:	3790      	adds	r7, #144	@ 0x90
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40008000 	.word	0x40008000
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40013800 	.word	0x40013800
 80046f4:	48000800 	.word	0x48000800
 80046f8:	40004800 	.word	0x40004800
 80046fc:	48000400 	.word	0x48000400

08004700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004700:	480d      	ldr	r0, [pc, #52]	@ (8004738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004702:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004704:	f7ff f844 	bl	8003790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004708:	480c      	ldr	r0, [pc, #48]	@ (800473c <LoopForever+0x6>)
  ldr r1, =_edata
 800470a:	490d      	ldr	r1, [pc, #52]	@ (8004740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800470c:	4a0d      	ldr	r2, [pc, #52]	@ (8004744 <LoopForever+0xe>)
  movs r3, #0
 800470e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004710:	e002      	b.n	8004718 <LoopCopyDataInit>

08004712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004716:	3304      	adds	r3, #4

08004718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800471a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800471c:	d3f9      	bcc.n	8004712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800471e:	4a0a      	ldr	r2, [pc, #40]	@ (8004748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004720:	4c0a      	ldr	r4, [pc, #40]	@ (800474c <LoopForever+0x16>)
  movs r3, #0
 8004722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004724:	e001      	b.n	800472a <LoopFillZerobss>

08004726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004728:	3204      	adds	r2, #4

0800472a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800472a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800472c:	d3fb      	bcc.n	8004726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800472e:	f008 fe3b 	bl	800d3a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004732:	f7fd fffb 	bl	800272c <main>

08004736 <LoopForever>:

LoopForever:
    b LoopForever
 8004736:	e7fe      	b.n	8004736 <LoopForever>
  ldr   r0, =_estack
 8004738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800473c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004740:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8004744:	0800fc30 	.word	0x0800fc30
  ldr r2, =_sbss
 8004748:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800474c:	20000dd0 	.word	0x20000dd0

08004750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004750:	e7fe      	b.n	8004750 <ADC1_2_IRQHandler>

08004752 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800475c:	2003      	movs	r0, #3
 800475e:	f000 f97f 	bl	8004a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004762:	200f      	movs	r0, #15
 8004764:	f000 f80e 	bl	8004784 <HAL_InitTick>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	71fb      	strb	r3, [r7, #7]
 8004772:	e001      	b.n	8004778 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004774:	f7fe fe60 	bl	8003438 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004778:	79fb      	ldrb	r3, [r7, #7]

}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004790:	4b16      	ldr	r3, [pc, #88]	@ (80047ec <HAL_InitTick+0x68>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d022      	beq.n	80047de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004798:	4b15      	ldr	r3, [pc, #84]	@ (80047f0 <HAL_InitTick+0x6c>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b13      	ldr	r3, [pc, #76]	@ (80047ec <HAL_InitTick+0x68>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80047a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 f998 	bl	8004ae2 <HAL_SYSTICK_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10f      	bne.n	80047d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b0f      	cmp	r3, #15
 80047bc:	d809      	bhi.n	80047d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047be:	2200      	movs	r2, #0
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	f04f 30ff 	mov.w	r0, #4294967295
 80047c6:	f000 f956 	bl	8004a76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047ca:	4a0a      	ldr	r2, [pc, #40]	@ (80047f4 <HAL_InitTick+0x70>)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	e007      	b.n	80047e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
 80047d6:	e004      	b.n	80047e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
 80047dc:	e001      	b.n	80047e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20000040 	.word	0x20000040
 80047f0:	20000038 	.word	0x20000038
 80047f4:	2000003c 	.word	0x2000003c

080047f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047fc:	4b05      	ldr	r3, [pc, #20]	@ (8004814 <HAL_IncTick+0x1c>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <HAL_IncTick+0x20>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4413      	add	r3, r2
 8004806:	4a03      	ldr	r2, [pc, #12]	@ (8004814 <HAL_IncTick+0x1c>)
 8004808:	6013      	str	r3, [r2, #0]
}
 800480a:	bf00      	nop
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	20000c80 	.word	0x20000c80
 8004818:	20000040 	.word	0x20000040

0800481c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  return uwTick;
 8004820:	4b03      	ldr	r3, [pc, #12]	@ (8004830 <HAL_GetTick+0x14>)
 8004822:	681b      	ldr	r3, [r3, #0]
}
 8004824:	4618      	mov	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20000c80 	.word	0x20000c80

08004834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800483c:	f7ff ffee 	bl	800481c <HAL_GetTick>
 8004840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484c:	d004      	beq.n	8004858 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800484e:	4b09      	ldr	r3, [pc, #36]	@ (8004874 <HAL_Delay+0x40>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004858:	bf00      	nop
 800485a:	f7ff ffdf 	bl	800481c <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	429a      	cmp	r2, r3
 8004868:	d8f7      	bhi.n	800485a <HAL_Delay+0x26>
  {
  }
}
 800486a:	bf00      	nop
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000040 	.word	0x20000040

08004878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004888:	4b0c      	ldr	r3, [pc, #48]	@ (80048bc <__NVIC_SetPriorityGrouping+0x44>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004894:	4013      	ands	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048aa:	4a04      	ldr	r2, [pc, #16]	@ (80048bc <__NVIC_SetPriorityGrouping+0x44>)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	60d3      	str	r3, [r2, #12]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	e000ed00 	.word	0xe000ed00

080048c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048c4:	4b04      	ldr	r3, [pc, #16]	@ (80048d8 <__NVIC_GetPriorityGrouping+0x18>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	0a1b      	lsrs	r3, r3, #8
 80048ca:	f003 0307 	and.w	r3, r3, #7
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	e000ed00 	.word	0xe000ed00

080048dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	db0b      	blt.n	8004906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	f003 021f 	and.w	r2, r3, #31
 80048f4:	4907      	ldr	r1, [pc, #28]	@ (8004914 <__NVIC_EnableIRQ+0x38>)
 80048f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2001      	movs	r0, #1
 80048fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	e000e100 	.word	0xe000e100

08004918 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	2b00      	cmp	r3, #0
 8004928:	db12      	blt.n	8004950 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	f003 021f 	and.w	r2, r3, #31
 8004930:	490a      	ldr	r1, [pc, #40]	@ (800495c <__NVIC_DisableIRQ+0x44>)
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	2001      	movs	r0, #1
 800493a:	fa00 f202 	lsl.w	r2, r0, r2
 800493e:	3320      	adds	r3, #32
 8004940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004944:	f3bf 8f4f 	dsb	sy
}
 8004948:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800494a:	f3bf 8f6f 	isb	sy
}
 800494e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	e000e100 	.word	0xe000e100

08004960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	6039      	str	r1, [r7, #0]
 800496a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800496c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004970:	2b00      	cmp	r3, #0
 8004972:	db0a      	blt.n	800498a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	b2da      	uxtb	r2, r3
 8004978:	490c      	ldr	r1, [pc, #48]	@ (80049ac <__NVIC_SetPriority+0x4c>)
 800497a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497e:	0112      	lsls	r2, r2, #4
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	440b      	add	r3, r1
 8004984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004988:	e00a      	b.n	80049a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	b2da      	uxtb	r2, r3
 800498e:	4908      	ldr	r1, [pc, #32]	@ (80049b0 <__NVIC_SetPriority+0x50>)
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	3b04      	subs	r3, #4
 8004998:	0112      	lsls	r2, r2, #4
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	440b      	add	r3, r1
 800499e:	761a      	strb	r2, [r3, #24]
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	e000e100 	.word	0xe000e100
 80049b0:	e000ed00 	.word	0xe000ed00

080049b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	@ 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f1c3 0307 	rsb	r3, r3, #7
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	bf28      	it	cs
 80049d2:	2304      	movcs	r3, #4
 80049d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	3304      	adds	r3, #4
 80049da:	2b06      	cmp	r3, #6
 80049dc:	d902      	bls.n	80049e4 <NVIC_EncodePriority+0x30>
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3b03      	subs	r3, #3
 80049e2:	e000      	b.n	80049e6 <NVIC_EncodePriority+0x32>
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43da      	mvns	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	401a      	ands	r2, r3
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	fa01 f303 	lsl.w	r3, r1, r3
 8004a06:	43d9      	mvns	r1, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a0c:	4313      	orrs	r3, r2
         );
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3724      	adds	r7, #36	@ 0x24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a2c:	d301      	bcc.n	8004a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e00f      	b.n	8004a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a32:	4a0a      	ldr	r2, [pc, #40]	@ (8004a5c <SysTick_Config+0x40>)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a3a:	210f      	movs	r1, #15
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a40:	f7ff ff8e 	bl	8004960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a44:	4b05      	ldr	r3, [pc, #20]	@ (8004a5c <SysTick_Config+0x40>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a4a:	4b04      	ldr	r3, [pc, #16]	@ (8004a5c <SysTick_Config+0x40>)
 8004a4c:	2207      	movs	r2, #7
 8004a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	e000e010 	.word	0xe000e010

08004a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff ff05 	bl	8004878 <__NVIC_SetPriorityGrouping>
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b086      	sub	sp, #24
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	607a      	str	r2, [r7, #4]
 8004a82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a84:	f7ff ff1c 	bl	80048c0 <__NVIC_GetPriorityGrouping>
 8004a88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	6978      	ldr	r0, [r7, #20]
 8004a90:	f7ff ff90 	bl	80049b4 <NVIC_EncodePriority>
 8004a94:	4602      	mov	r2, r0
 8004a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff ff5f 	bl	8004960 <__NVIC_SetPriority>
}
 8004aa2:	bf00      	nop
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ff0f 	bl	80048dc <__NVIC_EnableIRQ>
}
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	4603      	mov	r3, r0
 8004ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff1f 	bl	8004918 <__NVIC_DisableIRQ>
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ff96 	bl	8004a1c <SysTick_Config>
 8004af0:	4603      	mov	r3, r0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e08d      	b.n	8004c2a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	4b47      	ldr	r3, [pc, #284]	@ (8004c34 <HAL_DMA_Init+0x138>)
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d80f      	bhi.n	8004b3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	4b45      	ldr	r3, [pc, #276]	@ (8004c38 <HAL_DMA_Init+0x13c>)
 8004b22:	4413      	add	r3, r2
 8004b24:	4a45      	ldr	r2, [pc, #276]	@ (8004c3c <HAL_DMA_Init+0x140>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	009a      	lsls	r2, r3, #2
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a42      	ldr	r2, [pc, #264]	@ (8004c40 <HAL_DMA_Init+0x144>)
 8004b36:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b38:	e00e      	b.n	8004b58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4b40      	ldr	r3, [pc, #256]	@ (8004c44 <HAL_DMA_Init+0x148>)
 8004b42:	4413      	add	r3, r2
 8004b44:	4a3d      	ldr	r2, [pc, #244]	@ (8004c3c <HAL_DMA_Init+0x140>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	009a      	lsls	r2, r3, #2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a3c      	ldr	r2, [pc, #240]	@ (8004c48 <HAL_DMA_Init+0x14c>)
 8004b56:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa84 	bl	80050b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bb8:	d102      	bne.n	8004bc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bd4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d010      	beq.n	8004c00 <HAL_DMA_Init+0x104>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d80c      	bhi.n	8004c00 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 faa4 	bl	8005134 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	e008      	b.n	8004c12 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40020407 	.word	0x40020407
 8004c38:	bffdfff8 	.word	0xbffdfff8
 8004c3c:	cccccccd 	.word	0xcccccccd
 8004c40:	40020000 	.word	0x40020000
 8004c44:	bffdfbf8 	.word	0xbffdfbf8
 8004c48:	40020400 	.word	0x40020400

08004c4c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_DMA_Start_IT+0x20>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e066      	b.n	8004d3a <HAL_DMA_Start_IT+0xee>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d155      	bne.n	8004d2c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f9c9 	bl	800503c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d008      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 020e 	orr.w	r2, r2, #14
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	e00f      	b.n	8004ce4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0204 	bic.w	r2, r2, #4
 8004cd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 020a 	orr.w	r2, r2, #10
 8004ce2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d00:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	e005      	b.n	8004d38 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d34:	2302      	movs	r3, #2
 8004d36:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d005      	beq.n	8004d66 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
 8004d64:	e037      	b.n	8004dd6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 020e 	bic.w	r2, r2, #14
 8004d74:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d84:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	f003 021f 	and.w	r2, r3, #31
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	2101      	movs	r1, #1
 8004da4:	fa01 f202 	lsl.w	r2, r1, r2
 8004da8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004db2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00c      	beq.n	8004dd6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004dd4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d00d      	beq.n	8004e28 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2204      	movs	r2, #4
 8004e10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	e047      	b.n	8004eb8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 020e 	bic.w	r2, r2, #14
 8004e36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5c:	f003 021f 	and.w	r2, r3, #31
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e64:	2101      	movs	r1, #1
 8004e66:	fa01 f202 	lsl.w	r2, r1, r2
 8004e6a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00c      	beq.n	8004e98 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
    }
  }
  return status;
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	409a      	lsls	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d026      	beq.n	8004f3c <HAL_DMA_IRQHandler+0x7a>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d021      	beq.n	8004f3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0204 	bic.w	r2, r2, #4
 8004f14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1a:	f003 021f 	and.w	r2, r3, #31
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	2104      	movs	r1, #4
 8004f24:	fa01 f202 	lsl.w	r2, r1, r2
 8004f28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d071      	beq.n	8005016 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004f3a:	e06c      	b.n	8005016 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	2202      	movs	r2, #2
 8004f46:	409a      	lsls	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d02e      	beq.n	8004fae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d029      	beq.n	8004fae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 020a 	bic.w	r2, r2, #10
 8004f76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f84:	f003 021f 	and.w	r2, r3, #31
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	2102      	movs	r1, #2
 8004f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d038      	beq.n	8005016 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004fac:	e033      	b.n	8005016 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	2208      	movs	r2, #8
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d02a      	beq.n	8005018 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d025      	beq.n	8005018 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 020e 	bic.w	r2, r2, #14
 8004fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe0:	f003 021f 	and.w	r2, r3, #31
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	2101      	movs	r1, #1
 8004fea:	fa01 f202 	lsl.w	r2, r1, r2
 8004fee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500a:	2b00      	cmp	r3, #0
 800500c:	d004      	beq.n	8005018 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005016:	bf00      	nop
 8005018:	bf00      	nop
}
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800502e:	b2db      	uxtb	r3, r3
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005052:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005058:	2b00      	cmp	r3, #0
 800505a:	d004      	beq.n	8005066 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005064:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506a:	f003 021f 	and.w	r2, r3, #31
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	2101      	movs	r1, #1
 8005074:	fa01 f202 	lsl.w	r2, r1, r2
 8005078:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b10      	cmp	r3, #16
 8005088:	d108      	bne.n	800509c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800509a:	e007      	b.n	80050ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	4b16      	ldr	r3, [pc, #88]	@ (8005120 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d802      	bhi.n	80050d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80050cc:	4b15      	ldr	r3, [pc, #84]	@ (8005124 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	e001      	b.n	80050d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80050d2:	4b15      	ldr	r3, [pc, #84]	@ (8005128 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80050d4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	3b08      	subs	r3, #8
 80050e2:	4a12      	ldr	r2, [pc, #72]	@ (800512c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f0:	089b      	lsrs	r3, r3, #2
 80050f2:	009a      	lsls	r2, r3, #2
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4413      	add	r3, r2
 80050f8:	461a      	mov	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a0b      	ldr	r2, [pc, #44]	@ (8005130 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005102:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	2201      	movs	r2, #1
 800510c:	409a      	lsls	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40020407 	.word	0x40020407
 8005124:	40020800 	.word	0x40020800
 8005128:	40020820 	.word	0x40020820
 800512c:	cccccccd 	.word	0xcccccccd
 8005130:	40020880 	.word	0x40020880

08005134 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4b0b      	ldr	r3, [pc, #44]	@ (8005174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	461a      	mov	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a08      	ldr	r2, [pc, #32]	@ (8005178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005156:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3b01      	subs	r3, #1
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	2201      	movs	r2, #1
 8005162:	409a      	lsls	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	1000823f 	.word	0x1000823f
 8005178:	40020940 	.word	0x40020940

0800517c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800518a:	e15a      	b.n	8005442 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	2101      	movs	r1, #1
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	fa01 f303 	lsl.w	r3, r1, r3
 8005198:	4013      	ands	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 814c 	beq.w	800543c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d005      	beq.n	80051bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d130      	bne.n	800521e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	2203      	movs	r2, #3
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4013      	ands	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051f2:	2201      	movs	r2, #1
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	43db      	mvns	r3, r3
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4013      	ands	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	f003 0201 	and.w	r2, r3, #1
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	fa02 f303 	lsl.w	r3, r2, r3
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	2b03      	cmp	r3, #3
 8005228:	d017      	beq.n	800525a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	2203      	movs	r2, #3
 8005236:	fa02 f303 	lsl.w	r3, r2, r3
 800523a:	43db      	mvns	r3, r3
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4013      	ands	r3, r2
 8005240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d123      	bne.n	80052ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	08da      	lsrs	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3208      	adds	r2, #8
 800526e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	220f      	movs	r2, #15
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43db      	mvns	r3, r3
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4013      	ands	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	fa02 f303 	lsl.w	r3, r2, r3
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	08da      	lsrs	r2, r3, #3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3208      	adds	r2, #8
 80052a8:	6939      	ldr	r1, [r7, #16]
 80052aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	2203      	movs	r2, #3
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43db      	mvns	r3, r3
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f003 0203 	and.w	r2, r3, #3
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80a6 	beq.w	800543c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052f0:	4b5b      	ldr	r3, [pc, #364]	@ (8005460 <HAL_GPIO_Init+0x2e4>)
 80052f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f4:	4a5a      	ldr	r2, [pc, #360]	@ (8005460 <HAL_GPIO_Init+0x2e4>)
 80052f6:	f043 0301 	orr.w	r3, r3, #1
 80052fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80052fc:	4b58      	ldr	r3, [pc, #352]	@ (8005460 <HAL_GPIO_Init+0x2e4>)
 80052fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005308:	4a56      	ldr	r2, [pc, #344]	@ (8005464 <HAL_GPIO_Init+0x2e8>)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	089b      	lsrs	r3, r3, #2
 800530e:	3302      	adds	r3, #2
 8005310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	220f      	movs	r2, #15
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	43db      	mvns	r3, r3
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4013      	ands	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005332:	d01f      	beq.n	8005374 <HAL_GPIO_Init+0x1f8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a4c      	ldr	r2, [pc, #304]	@ (8005468 <HAL_GPIO_Init+0x2ec>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d019      	beq.n	8005370 <HAL_GPIO_Init+0x1f4>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a4b      	ldr	r2, [pc, #300]	@ (800546c <HAL_GPIO_Init+0x2f0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d013      	beq.n	800536c <HAL_GPIO_Init+0x1f0>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a4a      	ldr	r2, [pc, #296]	@ (8005470 <HAL_GPIO_Init+0x2f4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00d      	beq.n	8005368 <HAL_GPIO_Init+0x1ec>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a49      	ldr	r2, [pc, #292]	@ (8005474 <HAL_GPIO_Init+0x2f8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d007      	beq.n	8005364 <HAL_GPIO_Init+0x1e8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a48      	ldr	r2, [pc, #288]	@ (8005478 <HAL_GPIO_Init+0x2fc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d101      	bne.n	8005360 <HAL_GPIO_Init+0x1e4>
 800535c:	2305      	movs	r3, #5
 800535e:	e00a      	b.n	8005376 <HAL_GPIO_Init+0x1fa>
 8005360:	2306      	movs	r3, #6
 8005362:	e008      	b.n	8005376 <HAL_GPIO_Init+0x1fa>
 8005364:	2304      	movs	r3, #4
 8005366:	e006      	b.n	8005376 <HAL_GPIO_Init+0x1fa>
 8005368:	2303      	movs	r3, #3
 800536a:	e004      	b.n	8005376 <HAL_GPIO_Init+0x1fa>
 800536c:	2302      	movs	r3, #2
 800536e:	e002      	b.n	8005376 <HAL_GPIO_Init+0x1fa>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <HAL_GPIO_Init+0x1fa>
 8005374:	2300      	movs	r3, #0
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	f002 0203 	and.w	r2, r2, #3
 800537c:	0092      	lsls	r2, r2, #2
 800537e:	4093      	lsls	r3, r2
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005386:	4937      	ldr	r1, [pc, #220]	@ (8005464 <HAL_GPIO_Init+0x2e8>)
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	089b      	lsrs	r3, r3, #2
 800538c:	3302      	adds	r3, #2
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005394:	4b39      	ldr	r3, [pc, #228]	@ (800547c <HAL_GPIO_Init+0x300>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	43db      	mvns	r3, r3
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4013      	ands	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80053b8:	4a30      	ldr	r2, [pc, #192]	@ (800547c <HAL_GPIO_Init+0x300>)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80053be:	4b2f      	ldr	r3, [pc, #188]	@ (800547c <HAL_GPIO_Init+0x300>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	43db      	mvns	r3, r3
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4013      	ands	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053e2:	4a26      	ldr	r2, [pc, #152]	@ (800547c <HAL_GPIO_Init+0x300>)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80053e8:	4b24      	ldr	r3, [pc, #144]	@ (800547c <HAL_GPIO_Init+0x300>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4013      	ands	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800540c:	4a1b      	ldr	r2, [pc, #108]	@ (800547c <HAL_GPIO_Init+0x300>)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005412:	4b1a      	ldr	r3, [pc, #104]	@ (800547c <HAL_GPIO_Init+0x300>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	43db      	mvns	r3, r3
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4013      	ands	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005436:	4a11      	ldr	r2, [pc, #68]	@ (800547c <HAL_GPIO_Init+0x300>)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	3301      	adds	r3, #1
 8005440:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	fa22 f303 	lsr.w	r3, r2, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	f47f ae9d 	bne.w	800518c <HAL_GPIO_Init+0x10>
  }
}
 8005452:	bf00      	nop
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40021000 	.word	0x40021000
 8005464:	40010000 	.word	0x40010000
 8005468:	48000400 	.word	0x48000400
 800546c:	48000800 	.word	0x48000800
 8005470:	48000c00 	.word	0x48000c00
 8005474:	48001000 	.word	0x48001000
 8005478:	48001400 	.word	0x48001400
 800547c:	40010400 	.word	0x40010400

08005480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	807b      	strh	r3, [r7, #2]
 800548c:	4613      	mov	r3, r2
 800548e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005490:	787b      	ldrb	r3, [r7, #1]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005496:	887a      	ldrh	r2, [r7, #2]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800549c:	e002      	b.n	80054a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800549e:	887a      	ldrh	r2, [r7, #2]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80054ba:	4b08      	ldr	r3, [pc, #32]	@ (80054dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d006      	beq.n	80054d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054c6:	4a05      	ldr	r2, [pc, #20]	@ (80054dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054c8:	88fb      	ldrh	r3, [r7, #6]
 80054ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fd fd04 	bl	8002edc <HAL_GPIO_EXTI_Callback>
  }
}
 80054d4:	bf00      	nop
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40010400 	.word	0x40010400

080054e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e08d      	b.n	800560e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fc fdcc 	bl	80020a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2224      	movs	r2, #36	@ 0x24
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005530:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005540:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d107      	bne.n	800555a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005556:	609a      	str	r2, [r3, #8]
 8005558:	e006      	b.n	8005568 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005566:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	2b02      	cmp	r3, #2
 800556e:	d108      	bne.n	8005582 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800557e:	605a      	str	r2, [r3, #4]
 8005580:	e007      	b.n	8005592 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005590:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80055a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69d9      	ldr	r1, [r3, #28]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1a      	ldr	r2, [r3, #32]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08a      	sub	sp, #40	@ 0x28
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	607a      	str	r2, [r7, #4]
 8005622:	461a      	mov	r2, r3
 8005624:	460b      	mov	r3, r1
 8005626:	817b      	strh	r3, [r7, #10]
 8005628:	4613      	mov	r3, r2
 800562a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b20      	cmp	r3, #32
 800563a:	f040 80ef 	bne.w	800581c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005648:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800564c:	d101      	bne.n	8005652 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800564e:	2302      	movs	r3, #2
 8005650:	e0e5      	b.n	800581e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <HAL_I2C_Master_Transmit_DMA+0x48>
 800565c:	2302      	movs	r3, #2
 800565e:	e0de      	b.n	800581e <HAL_I2C_Master_Transmit_DMA+0x206>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2221      	movs	r2, #33	@ 0x21
 800566c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2210      	movs	r2, #16
 8005674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	893a      	ldrh	r2, [r7, #8]
 8005688:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4a66      	ldr	r2, [pc, #408]	@ (8005828 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800568e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4a66      	ldr	r2, [pc, #408]	@ (800582c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005694:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569a:	b29b      	uxth	r3, r3
 800569c:	2bff      	cmp	r3, #255	@ 0xff
 800569e:	d906      	bls.n	80056ae <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	22ff      	movs	r2, #255	@ 0xff
 80056a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80056a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	e007      	b.n	80056be <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80056b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056bc:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d01a      	beq.n	80056fc <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ca:	781a      	ldrb	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005700:	2b00      	cmp	r3, #0
 8005702:	d074      	beq.n	80057ee <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005708:	2b00      	cmp	r3, #0
 800570a:	d022      	beq.n	8005752 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005710:	4a47      	ldr	r2, [pc, #284]	@ (8005830 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005712:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005718:	4a46      	ldr	r2, [pc, #280]	@ (8005834 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800571a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005728:	2200      	movs	r2, #0
 800572a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005734:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800573c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005742:	f7ff fa83 	bl	8004c4c <HAL_DMA_Start_IT>
 8005746:	4603      	mov	r3, r0
 8005748:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d13a      	bne.n	80057c6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005750:	e013      	b.n	800577a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005766:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e051      	b.n	800581e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800577e:	b2db      	uxtb	r3, r3
 8005780:	3301      	adds	r3, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	8979      	ldrh	r1, [r7, #10]
 8005786:	4b2c      	ldr	r3, [pc, #176]	@ (8005838 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f001 fba3 	bl	8006ed8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80057ac:	2110      	movs	r1, #16
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f001 fbc4 	bl	8006f3c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	e028      	b.n	8005818 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057da:	f043 0210 	orr.w	r2, r3, #16
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e017      	b.n	800581e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4a12      	ldr	r2, [pc, #72]	@ (800583c <HAL_I2C_Master_Transmit_DMA+0x224>)
 80057f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	8979      	ldrh	r1, [r7, #10]
 80057fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005838 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f001 fb68 	bl	8006ed8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005810:	2101      	movs	r1, #1
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f001 fb92 	bl	8006f3c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	e000      	b.n	800581e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800581c:	2302      	movs	r3, #2
  }
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	ffff0000 	.word	0xffff0000
 800582c:	08005e57 	.word	0x08005e57
 8005830:	08006dd7 	.word	0x08006dd7
 8005834:	08006e6d 	.word	0x08006e6d
 8005838:	80002000 	.word	0x80002000
 800583c:	08005a17 	.word	0x08005a17

08005840 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	68f9      	ldr	r1, [r7, #12]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4798      	blx	r3
  }
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00f      	beq.n	80058b6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a4:	f043 0201 	orr.w	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058b4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00f      	beq.n	80058e0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ce:	f043 0208 	orr.w	r2, r3, #8
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00f      	beq.n	800590a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f8:	f043 0202 	orr.w	r2, r3, #2
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005908:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 030b 	and.w	r3, r3, #11
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f001 f91f 	bl	8006b60 <I2C_ITError>
  }
}
 8005922:	bf00      	nop
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	70fb      	strb	r3, [r7, #3]
 8005986:	4613      	mov	r3, r2
 8005988:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a08:	b2db      	uxtb	r3, r3
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b088      	sub	sp, #32
 8005a1a:	af02      	add	r7, sp, #8
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <I2C_Master_ISR_IT+0x1e>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e113      	b.n	8005c5c <I2C_Master_ISR_IT+0x246>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d012      	beq.n	8005a6c <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00d      	beq.n	8005a6c <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2210      	movs	r2, #16
 8005a56:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a5c:	f043 0204 	orr.w	r2, r3, #4
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f001 f992 	bl	8006d8e <I2C_Flush_TXDR>
 8005a6a:	e0e4      	b.n	8005c36 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d022      	beq.n	8005abc <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01d      	beq.n	8005abc <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f023 0304 	bic.w	r3, r3, #4
 8005a86:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005aba:	e0bc      	b.n	8005c36 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d128      	bne.n	8005b18 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d023      	beq.n	8005b18 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01e      	beq.n	8005b18 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80a8 	beq.w	8005c36 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	781a      	ldrb	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005b16:	e08e      	b.n	8005c36 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d05c      	beq.n	8005bdc <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d057      	beq.n	8005bdc <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d040      	beq.n	8005bb8 <I2C_Master_ISR_IT+0x1a2>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d13c      	bne.n	8005bb8 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b4a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2bff      	cmp	r3, #255	@ 0xff
 8005b54:	d90e      	bls.n	8005b74 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	22ff      	movs	r2, #255	@ 0xff
 8005b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	8a79      	ldrh	r1, [r7, #18]
 8005b64:	2300      	movs	r3, #0
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f001 f9b3 	bl	8006ed8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b72:	e032      	b.n	8005bda <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b86:	d00b      	beq.n	8005ba0 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b8c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005b92:	8a79      	ldrh	r1, [r7, #18]
 8005b94:	2000      	movs	r0, #0
 8005b96:	9000      	str	r0, [sp, #0]
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f001 f99d 	bl	8006ed8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b9e:	e01c      	b.n	8005bda <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	8a79      	ldrh	r1, [r7, #18]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f001 f991 	bl	8006ed8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bb6:	e010      	b.n	8005bda <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bc6:	d003      	beq.n	8005bd0 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 fcb0 	bl	800652e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bce:	e032      	b.n	8005c36 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005bd0:	2140      	movs	r1, #64	@ 0x40
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 ffc4 	bl	8006b60 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bd8:	e02d      	b.n	8005c36 <I2C_Master_ISR_IT+0x220>
 8005bda:	e02c      	b.n	8005c36 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d027      	beq.n	8005c36 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d022      	beq.n	8005c36 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d119      	bne.n	8005c2e <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c08:	d015      	beq.n	8005c36 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c12:	d108      	bne.n	8005c26 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c22:	605a      	str	r2, [r3, #4]
 8005c24:	e007      	b.n	8005c36 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fc81 	bl	800652e <I2C_ITMasterSeqCplt>
 8005c2c:	e003      	b.n	8005c36 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005c2e:	2140      	movs	r1, #64	@ 0x40
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 ff95 	bl	8006b60 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005c4a:	6979      	ldr	r1, [r7, #20]
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fd07 	bl	8006660 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c74:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <I2C_Slave_ISR_IT+0x24>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e0e2      	b.n	8005e4e <I2C_Slave_ISR_IT+0x1ea>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d009      	beq.n	8005cae <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d004      	beq.n	8005cae <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005ca4:	6939      	ldr	r1, [r7, #16]
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 fda2 	bl	80067f0 <I2C_ITSlaveCplt>
 8005cac:	e0ca      	b.n	8005e44 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d04b      	beq.n	8005d50 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d046      	beq.n	8005d50 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d128      	bne.n	8005d1e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b28      	cmp	r3, #40	@ 0x28
 8005cd6:	d108      	bne.n	8005cea <I2C_Slave_ISR_IT+0x86>
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cde:	d104      	bne.n	8005cea <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005ce0:	6939      	ldr	r1, [r7, #16]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 fee8 	bl	8006ab8 <I2C_ITListenCplt>
 8005ce8:	e031      	b.n	8005d4e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b29      	cmp	r3, #41	@ 0x29
 8005cf4:	d10e      	bne.n	8005d14 <I2C_Slave_ISR_IT+0xb0>
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005cfc:	d00a      	beq.n	8005d14 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2210      	movs	r2, #16
 8005d04:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f001 f841 	bl	8006d8e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 fc4b 	bl	80065a8 <I2C_ITSlaveSeqCplt>
 8005d12:	e01c      	b.n	8005d4e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2210      	movs	r2, #16
 8005d1a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005d1c:	e08f      	b.n	8005e3e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2210      	movs	r2, #16
 8005d24:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2a:	f043 0204 	orr.w	r2, r3, #4
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <I2C_Slave_ISR_IT+0xdc>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d3e:	d17e      	bne.n	8005e3e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d44:	4619      	mov	r1, r3
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 ff0a 	bl	8006b60 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005d4c:	e077      	b.n	8005e3e <I2C_Slave_ISR_IT+0x1da>
 8005d4e:	e076      	b.n	8005e3e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d02f      	beq.n	8005dba <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d02a      	beq.n	8005dba <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d018      	beq.n	8005da0 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d14b      	bne.n	8005e42 <I2C_Slave_ISR_IT+0x1de>
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005db0:	d047      	beq.n	8005e42 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 fbf8 	bl	80065a8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005db8:	e043      	b.n	8005e42 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d009      	beq.n	8005dd8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d004      	beq.n	8005dd8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005dce:	6939      	ldr	r1, [r7, #16]
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 fb28 	bl	8006426 <I2C_ITAddrCplt>
 8005dd6:	e035      	b.n	8005e44 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d030      	beq.n	8005e44 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d02b      	beq.n	8005e44 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d018      	beq.n	8005e28 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	781a      	ldrb	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005e26:	e00d      	b.n	8005e44 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e2e:	d002      	beq.n	8005e36 <I2C_Slave_ISR_IT+0x1d2>
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fbb6 	bl	80065a8 <I2C_ITSlaveSeqCplt>
 8005e3c:	e002      	b.n	8005e44 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005e3e:	bf00      	nop
 8005e40:	e000      	b.n	8005e44 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005e42:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b088      	sub	sp, #32
 8005e5a:	af02      	add	r7, sp, #8
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <I2C_Master_ISR_DMA+0x1a>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e0d9      	b.n	8006024 <I2C_Master_ISR_DMA+0x1ce>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 0310 	and.w	r3, r3, #16
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d016      	beq.n	8005eb0 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d011      	beq.n	8005eb0 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2210      	movs	r2, #16
 8005e92:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e98:	f043 0204 	orr.w	r2, r3, #4
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005ea0:	2120      	movs	r1, #32
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f001 f84a 	bl	8006f3c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 ff70 	bl	8006d8e <I2C_Flush_TXDR>
 8005eae:	e0b4      	b.n	800601a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d071      	beq.n	8005f9e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d06c      	beq.n	8005f9e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ed2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d04e      	beq.n	8005f7c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eea:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2bff      	cmp	r3, #255	@ 0xff
 8005ef4:	d906      	bls.n	8005f04 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	22ff      	movs	r2, #255	@ 0xff
 8005efa:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005efc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e010      	b.n	8005f26 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f16:	d003      	beq.n	8005f20 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	e002      	b.n	8005f26 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005f20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f24:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	8a79      	ldrh	r1, [r7, #18]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 ffcf 	bl	8006ed8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b22      	cmp	r3, #34	@ 0x22
 8005f56:	d108      	bne.n	8005f6a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f66:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005f68:	e057      	b.n	800601a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f78:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005f7a:	e04e      	b.n	800601a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f8a:	d003      	beq.n	8005f94 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 face 	bl	800652e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005f92:	e042      	b.n	800601a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f94:	2140      	movs	r1, #64	@ 0x40
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fde2 	bl	8006b60 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005f9c:	e03d      	b.n	800601a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d028      	beq.n	8005ffa <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d023      	beq.n	8005ffa <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d119      	bne.n	8005ff0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fca:	d025      	beq.n	8006018 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fd4:	d108      	bne.n	8005fe8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fe4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005fe6:	e017      	b.n	8006018 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 faa0 	bl	800652e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005fee:	e013      	b.n	8006018 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005ff0:	2140      	movs	r1, #64	@ 0x40
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 fdb4 	bl	8006b60 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005ff8:	e00e      	b.n	8006018 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fb25 	bl	8006660 <I2C_ITMasterCplt>
 8006016:	e000      	b.n	800601a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006018:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af02      	add	r7, sp, #8
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006038:	4b8d      	ldr	r3, [pc, #564]	@ (8006270 <I2C_Mem_ISR_DMA+0x244>)
 800603a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <I2C_Mem_ISR_DMA+0x1e>
 8006046:	2302      	movs	r3, #2
 8006048:	e10e      	b.n	8006268 <I2C_Mem_ISR_DMA+0x23c>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b00      	cmp	r3, #0
 800605a:	d016      	beq.n	800608a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006062:	2b00      	cmp	r3, #0
 8006064:	d011      	beq.n	800608a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2210      	movs	r2, #16
 800606c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006072:	f043 0204 	orr.w	r2, r3, #4
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800607a:	2120      	movs	r1, #32
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 ff5d 	bl	8006f3c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 fe83 	bl	8006d8e <I2C_Flush_TXDR>
 8006088:	e0e9      	b.n	800625e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00e      	beq.n	80060b2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800609a:	2b00      	cmp	r3, #0
 800609c:	d009      	beq.n	80060b2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80060a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f04f 32ff 	mov.w	r2, #4294967295
 80060ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80060b0:	e0d5      	b.n	800625e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d05f      	beq.n	800617c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d05a      	beq.n	800617c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80060c6:	2101      	movs	r1, #1
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 ffbb 	bl	8007044 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80060ce:	2110      	movs	r1, #16
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 ff33 	bl	8006f3c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d048      	beq.n	8006172 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2bff      	cmp	r3, #255	@ 0xff
 80060e8:	d910      	bls.n	800610c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	22ff      	movs	r2, #255	@ 0xff
 80060ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f4:	b299      	uxth	r1, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	2300      	movs	r3, #0
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fee7 	bl	8006ed8 <I2C_TransferConfig>
 800610a:	e011      	b.n	8006130 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611a:	b299      	uxth	r1, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006120:	b2da      	uxtb	r2, r3
 8006122:	2300      	movs	r3, #0
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fed4 	bl	8006ed8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b22      	cmp	r3, #34	@ 0x22
 800614c:	d108      	bne.n	8006160 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800615c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800615e:	e07e      	b.n	800625e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800616e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006170:	e075      	b.n	800625e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006172:	2140      	movs	r1, #64	@ 0x40
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 fcf3 	bl	8006b60 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800617a:	e070      	b.n	800625e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d05d      	beq.n	8006242 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800618c:	2b00      	cmp	r3, #0
 800618e:	d058      	beq.n	8006242 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006190:	2101      	movs	r1, #1
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 ff56 	bl	8007044 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006198:	2110      	movs	r1, #16
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 fece 	bl	8006f3c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b22      	cmp	r3, #34	@ 0x22
 80061aa:	d101      	bne.n	80061b0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80061ac:	4b31      	ldr	r3, [pc, #196]	@ (8006274 <I2C_Mem_ISR_DMA+0x248>)
 80061ae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2bff      	cmp	r3, #255	@ 0xff
 80061b8:	d910      	bls.n	80061dc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	22ff      	movs	r2, #255	@ 0xff
 80061be:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061c4:	b299      	uxth	r1, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 fe7f 	bl	8006ed8 <I2C_TransferConfig>
 80061da:	e011      	b.n	8006200 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ea:	b299      	uxth	r1, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fe6c 	bl	8006ed8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b22      	cmp	r3, #34	@ 0x22
 800621c:	d108      	bne.n	8006230 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800622c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800622e:	e016      	b.n	800625e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800623e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006240:	e00d      	b.n	800625e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d008      	beq.n	800625e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 fa01 	bl	8006660 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	80002000 	.word	0x80002000
 8006274:	80002400 	.word	0x80002400

08006278 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006288:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <I2C_Slave_ISR_DMA+0x24>
 8006298:	2302      	movs	r3, #2
 800629a:	e0c0      	b.n	800641e <I2C_Slave_ISR_DMA+0x1a6>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fa98 	bl	80067f0 <I2C_ITSlaveCplt>
 80062c0:	e0a8      	b.n	8006414 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8095 	beq.w	80063f8 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 808f 	beq.w	80063f8 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d07d      	beq.n	80063ea <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00c      	beq.n	8006310 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 800630c:	2301      	movs	r3, #1
 800630e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00c      	beq.n	8006332 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d007      	beq.n	8006332 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800632e:	2301      	movs	r3, #1
 8006330:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d128      	bne.n	800638a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b28      	cmp	r3, #40	@ 0x28
 8006342:	d108      	bne.n	8006356 <I2C_Slave_ISR_DMA+0xde>
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800634a:	d104      	bne.n	8006356 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 fbb2 	bl	8006ab8 <I2C_ITListenCplt>
 8006354:	e048      	b.n	80063e8 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b29      	cmp	r3, #41	@ 0x29
 8006360:	d10e      	bne.n	8006380 <I2C_Slave_ISR_DMA+0x108>
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006368:	d00a      	beq.n	8006380 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2210      	movs	r2, #16
 8006370:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 fd0b 	bl	8006d8e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 f915 	bl	80065a8 <I2C_ITSlaveSeqCplt>
 800637e:	e033      	b.n	80063e8 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2210      	movs	r2, #16
 8006386:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006388:	e034      	b.n	80063f4 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2210      	movs	r2, #16
 8006390:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006396:	f043 0204 	orr.w	r2, r3, #4
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063a4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <I2C_Slave_ISR_DMA+0x13c>
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063b2:	d11f      	bne.n	80063f4 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
 80063b6:	2b21      	cmp	r3, #33	@ 0x21
 80063b8:	d002      	beq.n	80063c0 <I2C_Slave_ISR_DMA+0x148>
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
 80063bc:	2b29      	cmp	r3, #41	@ 0x29
 80063be:	d103      	bne.n	80063c8 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2221      	movs	r2, #33	@ 0x21
 80063c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80063c6:	e008      	b.n	80063da <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
 80063ca:	2b22      	cmp	r3, #34	@ 0x22
 80063cc:	d002      	beq.n	80063d4 <I2C_Slave_ISR_DMA+0x15c>
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80063d2:	d102      	bne.n	80063da <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2222      	movs	r2, #34	@ 0x22
 80063d8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063de:	4619      	mov	r1, r3
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 fbbd 	bl	8006b60 <I2C_ITError>
      if (treatdmanack == 1U)
 80063e6:	e005      	b.n	80063f4 <I2C_Slave_ISR_DMA+0x17c>
 80063e8:	e004      	b.n	80063f4 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2210      	movs	r2, #16
 80063f0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80063f2:	e00f      	b.n	8006414 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80063f4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80063f6:	e00d      	b.n	8006414 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d008      	beq.n	8006414 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 f809 	bl	8006426 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3720      	adds	r7, #32
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b084      	sub	sp, #16
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800643c:	2b28      	cmp	r3, #40	@ 0x28
 800643e:	d16a      	bne.n	8006516 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	0c1b      	lsrs	r3, r3, #16
 8006448:	b2db      	uxtb	r3, r3
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	0c1b      	lsrs	r3, r3, #16
 8006458:	b29b      	uxth	r3, r3
 800645a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800645e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	b29b      	uxth	r3, r3
 8006468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800646c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800647a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d138      	bne.n	80064f6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006484:	897b      	ldrh	r3, [r7, #10]
 8006486:	09db      	lsrs	r3, r3, #7
 8006488:	b29a      	uxth	r2, r3
 800648a:	89bb      	ldrh	r3, [r7, #12]
 800648c:	4053      	eors	r3, r2
 800648e:	b29b      	uxth	r3, r3
 8006490:	f003 0306 	and.w	r3, r3, #6
 8006494:	2b00      	cmp	r3, #0
 8006496:	d11c      	bne.n	80064d2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006498:	897b      	ldrh	r3, [r7, #10]
 800649a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d13b      	bne.n	8006526 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2208      	movs	r2, #8
 80064ba:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80064c4:	89ba      	ldrh	r2, [r7, #12]
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff fa55 	bl	800597a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80064d0:	e029      	b.n	8006526 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80064d2:	893b      	ldrh	r3, [r7, #8]
 80064d4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80064d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fdb2 	bl	8007044 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80064e8:	89ba      	ldrh	r2, [r7, #12]
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff fa43 	bl	800597a <HAL_I2C_AddrCallback>
}
 80064f4:	e017      	b.n	8006526 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80064f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fda2 	bl	8007044 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006508:	89ba      	ldrh	r2, [r7, #12]
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff fa33 	bl	800597a <HAL_I2C_AddrCallback>
}
 8006514:	e007      	b.n	8006526 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2208      	movs	r2, #8
 800651c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006526:	bf00      	nop
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b21      	cmp	r3, #33	@ 0x21
 8006548:	d115      	bne.n	8006576 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2220      	movs	r2, #32
 800654e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2211      	movs	r2, #17
 8006556:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800655e:	2101      	movs	r1, #1
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fd6f 	bl	8007044 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff f9db 	bl	800592a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006574:	e014      	b.n	80065a0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2212      	movs	r2, #18
 8006582:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800658a:	2102      	movs	r1, #2
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fd59 	bl	8007044 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff f9cf 	bl	800593e <HAL_I2C_MasterRxCpltCallback>
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d008      	beq.n	80065dc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	e00c      	b.n	80065f6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065f4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b29      	cmp	r3, #41	@ 0x29
 8006600:	d112      	bne.n	8006628 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2228      	movs	r2, #40	@ 0x28
 8006606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2221      	movs	r2, #33	@ 0x21
 800660e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006610:	2101      	movs	r1, #1
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fd16 	bl	8007044 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff f996 	bl	8005952 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006626:	e017      	b.n	8006658 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b2a      	cmp	r3, #42	@ 0x2a
 8006632:	d111      	bne.n	8006658 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2228      	movs	r2, #40	@ 0x28
 8006638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2222      	movs	r2, #34	@ 0x22
 8006640:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006642:	2102      	movs	r1, #2
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fcfd 	bl	8007044 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff f987 	bl	8005966 <HAL_I2C_SlaveRxCpltCallback>
}
 8006658:	bf00      	nop
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2220      	movs	r2, #32
 8006674:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b21      	cmp	r3, #33	@ 0x21
 8006680:	d107      	bne.n	8006692 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006682:	2101      	movs	r1, #1
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fcdd 	bl	8007044 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2211      	movs	r2, #17
 800668e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006690:	e00c      	b.n	80066ac <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b22      	cmp	r3, #34	@ 0x22
 800669c:	d106      	bne.n	80066ac <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800669e:	2102      	movs	r1, #2
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fccf 	bl	8007044 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2212      	movs	r2, #18
 80066aa:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6859      	ldr	r1, [r3, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4b4c      	ldr	r3, [pc, #304]	@ (80067e8 <I2C_ITMasterCplt+0x188>)
 80066b8:	400b      	ands	r3, r1
 80066ba:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a49      	ldr	r2, [pc, #292]	@ (80067ec <I2C_ITMasterCplt+0x18c>)
 80066c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f003 0310 	and.w	r3, r3, #16
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2210      	movs	r2, #16
 80066d8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066de:	f043 0204 	orr.w	r2, r3, #4
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b60      	cmp	r3, #96	@ 0x60
 80066f0:	d10a      	bne.n	8006708 <I2C_ITMasterCplt+0xa8>
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006702:	b2db      	uxtb	r3, r3
 8006704:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006706:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fb40 	bl	8006d8e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006712:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b60      	cmp	r3, #96	@ 0x60
 800671e:	d002      	beq.n	8006726 <I2C_ITMasterCplt+0xc6>
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d006      	beq.n	8006734 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fa17 	bl	8006b60 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006732:	e054      	b.n	80067de <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b21      	cmp	r3, #33	@ 0x21
 800673e:	d124      	bne.n	800678a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b40      	cmp	r3, #64	@ 0x40
 8006758:	d10b      	bne.n	8006772 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff f91d 	bl	80059aa <HAL_I2C_MemTxCpltCallback>
}
 8006770:	e035      	b.n	80067de <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff f8d1 	bl	800592a <HAL_I2C_MasterTxCpltCallback>
}
 8006788:	e029      	b.n	80067de <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b22      	cmp	r3, #34	@ 0x22
 8006794:	d123      	bne.n	80067de <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b40      	cmp	r3, #64	@ 0x40
 80067ae:	d10b      	bne.n	80067c8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff f8fc 	bl	80059be <HAL_I2C_MemRxCpltCallback>
}
 80067c6:	e00a      	b.n	80067de <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff f8b0 	bl	800593e <HAL_I2C_MasterRxCpltCallback>
}
 80067de:	bf00      	nop
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	fe00e800 	.word	0xfe00e800
 80067ec:	ffff0000 	.word	0xffff0000

080067f0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006812:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2220      	movs	r2, #32
 800681a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800681c:	7afb      	ldrb	r3, [r7, #11]
 800681e:	2b21      	cmp	r3, #33	@ 0x21
 8006820:	d002      	beq.n	8006828 <I2C_ITSlaveCplt+0x38>
 8006822:	7afb      	ldrb	r3, [r7, #11]
 8006824:	2b29      	cmp	r3, #41	@ 0x29
 8006826:	d108      	bne.n	800683a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006828:	f248 0101 	movw	r1, #32769	@ 0x8001
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fc09 	bl	8007044 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2221      	movs	r2, #33	@ 0x21
 8006836:	631a      	str	r2, [r3, #48]	@ 0x30
 8006838:	e019      	b.n	800686e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800683a:	7afb      	ldrb	r3, [r7, #11]
 800683c:	2b22      	cmp	r3, #34	@ 0x22
 800683e:	d002      	beq.n	8006846 <I2C_ITSlaveCplt+0x56>
 8006840:	7afb      	ldrb	r3, [r7, #11]
 8006842:	2b2a      	cmp	r3, #42	@ 0x2a
 8006844:	d108      	bne.n	8006858 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006846:	f248 0102 	movw	r1, #32770	@ 0x8002
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fbfa 	bl	8007044 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2222      	movs	r2, #34	@ 0x22
 8006854:	631a      	str	r2, [r3, #48]	@ 0x30
 8006856:	e00a      	b.n	800686e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006858:	7afb      	ldrb	r3, [r7, #11]
 800685a:	2b28      	cmp	r3, #40	@ 0x28
 800685c:	d107      	bne.n	800686e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800685e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fbee 	bl	8007044 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800687c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6859      	ldr	r1, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	4b89      	ldr	r3, [pc, #548]	@ (8006ab0 <I2C_ITSlaveCplt+0x2c0>)
 800688a:	400b      	ands	r3, r1
 800688c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fa7d 	bl	8006d8e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d013      	beq.n	80068c6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80068ac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d01f      	beq.n	80068f6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	b29a      	uxth	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068c4:	e017      	b.n	80068f6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d012      	beq.n	80068f6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80068de:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d006      	beq.n	80068f6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d020      	beq.n	8006942 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f023 0304 	bic.w	r3, r3, #4
 8006906:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006912:	b2d2      	uxtb	r2, r2
 8006914:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00c      	beq.n	8006942 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006946:	b29b      	uxth	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006950:	f043 0204 	orr.w	r2, r3, #4
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f003 0310 	and.w	r3, r3, #16
 800695e:	2b00      	cmp	r3, #0
 8006960:	d049      	beq.n	80069f6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006968:	2b00      	cmp	r3, #0
 800696a:	d044      	beq.n	80069f6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d128      	bne.n	80069c8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b28      	cmp	r3, #40	@ 0x28
 8006980:	d108      	bne.n	8006994 <I2C_ITSlaveCplt+0x1a4>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006988:	d104      	bne.n	8006994 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800698a:	6979      	ldr	r1, [r7, #20]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f893 	bl	8006ab8 <I2C_ITListenCplt>
 8006992:	e030      	b.n	80069f6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b29      	cmp	r3, #41	@ 0x29
 800699e:	d10e      	bne.n	80069be <I2C_ITSlaveCplt+0x1ce>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069a6:	d00a      	beq.n	80069be <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2210      	movs	r2, #16
 80069ae:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f9ec 	bl	8006d8e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff fdf6 	bl	80065a8 <I2C_ITSlaveSeqCplt>
 80069bc:	e01b      	b.n	80069f6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2210      	movs	r2, #16
 80069c4:	61da      	str	r2, [r3, #28]
 80069c6:	e016      	b.n	80069f6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2210      	movs	r2, #16
 80069ce:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d4:	f043 0204 	orr.w	r2, r3, #4
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <I2C_ITSlaveCplt+0x1fa>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069e8:	d105      	bne.n	80069f6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f8b5 	bl	8006b60 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d010      	beq.n	8006a2e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f8a4 	bl	8006b60 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b28      	cmp	r3, #40	@ 0x28
 8006a22:	d141      	bne.n	8006aa8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006a24:	6979      	ldr	r1, [r7, #20]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f846 	bl	8006ab8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a2c:	e03c      	b.n	8006aa8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a32:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a36:	d014      	beq.n	8006a62 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff fdb5 	bl	80065a8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab4 <I2C_ITSlaveCplt+0x2c4>)
 8006a42:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fe ff9b 	bl	8005996 <HAL_I2C_ListenCpltCallback>
}
 8006a60:	e022      	b.n	8006aa8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b22      	cmp	r3, #34	@ 0x22
 8006a6c:	d10e      	bne.n	8006a8c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fe ff6e 	bl	8005966 <HAL_I2C_SlaveRxCpltCallback>
}
 8006a8a:	e00d      	b.n	8006aa8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fe ff55 	bl	8005952 <HAL_I2C_SlaveTxCpltCallback>
}
 8006aa8:	bf00      	nop
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	fe00e800 	.word	0xfe00e800
 8006ab4:	ffff0000 	.word	0xffff0000

08006ab8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a25      	ldr	r2, [pc, #148]	@ (8006b5c <I2C_ITListenCplt+0xa4>)
 8006ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d022      	beq.n	8006b34 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d012      	beq.n	8006b34 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b2c:	f043 0204 	orr.w	r2, r3, #4
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006b34:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fa83 	bl	8007044 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2210      	movs	r2, #16
 8006b44:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fe ff21 	bl	8005996 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006b54:	bf00      	nop
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	ffff0000 	.word	0xffff0000

08006b60 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b70:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a6d      	ldr	r2, [pc, #436]	@ (8006d34 <I2C_ITError+0x1d4>)
 8006b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	2b28      	cmp	r3, #40	@ 0x28
 8006b96:	d005      	beq.n	8006ba4 <I2C_ITError+0x44>
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	2b29      	cmp	r3, #41	@ 0x29
 8006b9c:	d002      	beq.n	8006ba4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ba2:	d10b      	bne.n	8006bbc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ba4:	2103      	movs	r1, #3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa4c 	bl	8007044 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2228      	movs	r2, #40	@ 0x28
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a60      	ldr	r2, [pc, #384]	@ (8006d38 <I2C_ITError+0x1d8>)
 8006bb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8006bba:	e030      	b.n	8006c1e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006bbc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fa3f 	bl	8007044 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f8e1 	bl	8006d8e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b60      	cmp	r3, #96	@ 0x60
 8006bd6:	d01f      	beq.n	8006c18 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d114      	bne.n	8006c18 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b10      	cmp	r3, #16
 8006bfa:	d109      	bne.n	8006c10 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2210      	movs	r2, #16
 8006c02:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c08:	f043 0204 	orr.w	r2, r3, #4
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2220      	movs	r2, #32
 8006c16:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c22:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d039      	beq.n	8006ca0 <I2C_ITError+0x140>
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b11      	cmp	r3, #17
 8006c30:	d002      	beq.n	8006c38 <I2C_ITError+0xd8>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b21      	cmp	r3, #33	@ 0x21
 8006c36:	d133      	bne.n	8006ca0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c46:	d107      	bne.n	8006c58 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006c56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe f9df 	bl	8005020 <HAL_DMA_GetState>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d017      	beq.n	8006c98 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6c:	4a33      	ldr	r2, [pc, #204]	@ (8006d3c <I2C_ITError+0x1dc>)
 8006c6e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe f8b9 	bl	8004df4 <HAL_DMA_Abort_IT>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d04d      	beq.n	8006d24 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006c92:	4610      	mov	r0, r2
 8006c94:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c96:	e045      	b.n	8006d24 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f851 	bl	8006d40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c9e:	e041      	b.n	8006d24 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d039      	beq.n	8006d1c <I2C_ITError+0x1bc>
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b12      	cmp	r3, #18
 8006cac:	d002      	beq.n	8006cb4 <I2C_ITError+0x154>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b22      	cmp	r3, #34	@ 0x22
 8006cb2:	d133      	bne.n	8006d1c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cc2:	d107      	bne.n	8006cd4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006cd2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe f9a1 	bl	8005020 <HAL_DMA_GetState>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d017      	beq.n	8006d14 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce8:	4a14      	ldr	r2, [pc, #80]	@ (8006d3c <I2C_ITError+0x1dc>)
 8006cea:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fe f87b 	bl	8004df4 <HAL_DMA_Abort_IT>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d011      	beq.n	8006d28 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006d0e:	4610      	mov	r0, r2
 8006d10:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d12:	e009      	b.n	8006d28 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f813 	bl	8006d40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d1a:	e005      	b.n	8006d28 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f80f 	bl	8006d40 <I2C_TreatErrorCallback>
  }
}
 8006d22:	e002      	b.n	8006d2a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d24:	bf00      	nop
 8006d26:	e000      	b.n	8006d2a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d28:	bf00      	nop
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	ffff0000 	.word	0xffff0000
 8006d38:	08005c65 	.word	0x08005c65
 8006d3c:	08006e9b 	.word	0x08006e9b

08006d40 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b60      	cmp	r3, #96	@ 0x60
 8006d52:	d10e      	bne.n	8006d72 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fe fe3b 	bl	80059e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d70:	e009      	b.n	8006d86 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7fe fe26 	bl	80059d2 <HAL_I2C_ErrorCallback>
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d103      	bne.n	8006dac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2200      	movs	r2, #0
 8006daa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d007      	beq.n	8006dca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699a      	ldr	r2, [r3, #24]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0201 	orr.w	r2, r2, #1
 8006dc8:	619a      	str	r2, [r3, #24]
  }
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006df2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d104      	bne.n	8006e08 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006dfe:	2120      	movs	r1, #32
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 f89b 	bl	8006f3c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006e06:	e02d      	b.n	8006e64 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006e10:	441a      	add	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2bff      	cmp	r3, #255	@ 0xff
 8006e1e:	d903      	bls.n	8006e28 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	22ff      	movs	r2, #255	@ 0xff
 8006e24:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006e26:	e004      	b.n	8006e32 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3328      	adds	r3, #40	@ 0x28
 8006e42:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006e48:	f7fd ff00 	bl	8004c4c <HAL_DMA_Start_IT>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d004      	beq.n	8006e5c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006e52:	2110      	movs	r1, #16
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f7ff fe83 	bl	8006b60 <I2C_ITError>
}
 8006e5a:	e003      	b.n	8006e64 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006e5c:	2140      	movs	r1, #64	@ 0x40
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 f86c 	bl	8006f3c <I2C_Enable_IRQ>
}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e78:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e88:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006e8a:	2110      	movs	r1, #16
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f7ff fe67 	bl	8006b60 <I2C_ITError>
}
 8006e92:	bf00      	nop
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f7ff ff39 	bl	8006d40 <I2C_TreatErrorCallback>
}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	607b      	str	r3, [r7, #4]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	817b      	strh	r3, [r7, #10]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eea:	897b      	ldrh	r3, [r7, #10]
 8006eec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ef0:	7a7b      	ldrb	r3, [r7, #9]
 8006ef2:	041b      	lsls	r3, r3, #16
 8006ef4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ef8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	0d5b      	lsrs	r3, r3, #21
 8006f12:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006f16:	4b08      	ldr	r3, [pc, #32]	@ (8006f38 <I2C_TransferConfig+0x60>)
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	43db      	mvns	r3, r3
 8006f1c:	ea02 0103 	and.w	r1, r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	03ff63ff 	.word	0x03ff63ff

08006f3c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f50:	4a39      	ldr	r2, [pc, #228]	@ (8007038 <I2C_Enable_IRQ+0xfc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d032      	beq.n	8006fbc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006f5a:	4a38      	ldr	r2, [pc, #224]	@ (800703c <I2C_Enable_IRQ+0x100>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d02d      	beq.n	8006fbc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006f64:	4a36      	ldr	r2, [pc, #216]	@ (8007040 <I2C_Enable_IRQ+0x104>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d028      	beq.n	8006fbc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006f6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	da03      	bge.n	8006f7a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006f78:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006f7a:	887b      	ldrh	r3, [r7, #2]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006f8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006f8c:	887b      	ldrh	r3, [r7, #2]
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006f9c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006f9e:	887b      	ldrh	r3, [r7, #2]
 8006fa0:	2b10      	cmp	r3, #16
 8006fa2:	d103      	bne.n	8006fac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006faa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006fac:	887b      	ldrh	r3, [r7, #2]
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	d133      	bne.n	800701a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f043 0320 	orr.w	r3, r3, #32
 8006fb8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006fba:	e02e      	b.n	800701a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006fbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	da03      	bge.n	8006fcc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006fca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006fcc:	887b      	ldrh	r3, [r7, #2]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006fdc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006fde:	887b      	ldrh	r3, [r7, #2]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006fee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ff0:	887b      	ldrh	r3, [r7, #2]
 8006ff2:	2b10      	cmp	r3, #16
 8006ff4:	d103      	bne.n	8006ffe <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006ffc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006ffe:	887b      	ldrh	r3, [r7, #2]
 8007000:	2b20      	cmp	r3, #32
 8007002:	d103      	bne.n	800700c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800700a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800700c:	887b      	ldrh	r3, [r7, #2]
 800700e:	2b40      	cmp	r3, #64	@ 0x40
 8007010:	d103      	bne.n	800701a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007018:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6819      	ldr	r1, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	430a      	orrs	r2, r1
 8007028:	601a      	str	r2, [r3, #0]
}
 800702a:	bf00      	nop
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	08005e57 	.word	0x08005e57
 800703c:	08006279 	.word	0x08006279
 8007040:	0800602d 	.word	0x0800602d

08007044 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007054:	887b      	ldrh	r3, [r7, #2]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00f      	beq.n	800707e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007064:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007072:	2b28      	cmp	r3, #40	@ 0x28
 8007074:	d003      	beq.n	800707e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800707c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800707e:	887b      	ldrh	r3, [r7, #2]
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00f      	beq.n	80070a8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800708e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800709c:	2b28      	cmp	r3, #40	@ 0x28
 800709e:	d003      	beq.n	80070a8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80070a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80070a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	da03      	bge.n	80070b8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80070b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80070b8:	887b      	ldrh	r3, [r7, #2]
 80070ba:	2b10      	cmp	r3, #16
 80070bc:	d103      	bne.n	80070c6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80070c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80070c6:	887b      	ldrh	r3, [r7, #2]
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d103      	bne.n	80070d4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f043 0320 	orr.w	r3, r3, #32
 80070d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80070d4:	887b      	ldrh	r3, [r7, #2]
 80070d6:	2b40      	cmp	r3, #64	@ 0x40
 80070d8:	d103      	bne.n	80070e2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070e0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6819      	ldr	r1, [r3, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	43da      	mvns	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	400a      	ands	r2, r1
 80070f2:	601a      	str	r2, [r3, #0]
}
 80070f4:	bf00      	nop
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b20      	cmp	r3, #32
 8007114:	d138      	bne.n	8007188 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007120:	2302      	movs	r3, #2
 8007122:	e032      	b.n	800718a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2224      	movs	r2, #36	@ 0x24
 8007130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0201 	bic.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007152:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6819      	ldr	r1, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f042 0201 	orr.w	r2, r2, #1
 8007172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2220      	movs	r2, #32
 8007178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	e000      	b.n	800718a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007188:	2302      	movs	r3, #2
  }
}
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007196:	b480      	push	{r7}
 8007198:	b085      	sub	sp, #20
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	d139      	bne.n	8007220 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071b6:	2302      	movs	r3, #2
 80071b8:	e033      	b.n	8007222 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2224      	movs	r2, #36	@ 0x24
 80071c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0201 	bic.w	r2, r2, #1
 80071d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80071e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	021b      	lsls	r3, r3, #8
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0201 	orr.w	r2, r2, #1
 800720a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	e000      	b.n	8007222 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007220:	2302      	movs	r3, #2
  }
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
	...

08007230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d141      	bne.n	80072c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800723e:	4b4b      	ldr	r3, [pc, #300]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800724a:	d131      	bne.n	80072b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800724c:	4b47      	ldr	r3, [pc, #284]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800724e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007252:	4a46      	ldr	r2, [pc, #280]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007258:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800725c:	4b43      	ldr	r3, [pc, #268]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007264:	4a41      	ldr	r2, [pc, #260]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800726a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800726c:	4b40      	ldr	r3, [pc, #256]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2232      	movs	r2, #50	@ 0x32
 8007272:	fb02 f303 	mul.w	r3, r2, r3
 8007276:	4a3f      	ldr	r2, [pc, #252]	@ (8007374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007278:	fba2 2303 	umull	r2, r3, r2, r3
 800727c:	0c9b      	lsrs	r3, r3, #18
 800727e:	3301      	adds	r3, #1
 8007280:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007282:	e002      	b.n	800728a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3b01      	subs	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800728a:	4b38      	ldr	r3, [pc, #224]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007296:	d102      	bne.n	800729e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1f2      	bne.n	8007284 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800729e:	4b33      	ldr	r3, [pc, #204]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072aa:	d158      	bne.n	800735e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e057      	b.n	8007360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072b0:	4b2e      	ldr	r3, [pc, #184]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072b6:	4a2d      	ldr	r2, [pc, #180]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80072c0:	e04d      	b.n	800735e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072c8:	d141      	bne.n	800734e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80072ca:	4b28      	ldr	r3, [pc, #160]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80072d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072d6:	d131      	bne.n	800733c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072d8:	4b24      	ldr	r3, [pc, #144]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072de:	4a23      	ldr	r2, [pc, #140]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072e8:	4b20      	ldr	r3, [pc, #128]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80072f0:	4a1e      	ldr	r2, [pc, #120]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2232      	movs	r2, #50	@ 0x32
 80072fe:	fb02 f303 	mul.w	r3, r2, r3
 8007302:	4a1c      	ldr	r2, [pc, #112]	@ (8007374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007304:	fba2 2303 	umull	r2, r3, r2, r3
 8007308:	0c9b      	lsrs	r3, r3, #18
 800730a:	3301      	adds	r3, #1
 800730c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800730e:	e002      	b.n	8007316 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3b01      	subs	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007316:	4b15      	ldr	r3, [pc, #84]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800731e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007322:	d102      	bne.n	800732a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1f2      	bne.n	8007310 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800732a:	4b10      	ldr	r3, [pc, #64]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007336:	d112      	bne.n	800735e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e011      	b.n	8007360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800733c:	4b0b      	ldr	r3, [pc, #44]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800733e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007342:	4a0a      	ldr	r2, [pc, #40]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007348:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800734c:	e007      	b.n	800735e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800734e:	4b07      	ldr	r3, [pc, #28]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007356:	4a05      	ldr	r2, [pc, #20]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007358:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800735c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	40007000 	.word	0x40007000
 8007370:	20000038 	.word	0x20000038
 8007374:	431bde83 	.word	0x431bde83

08007378 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800737c:	4b05      	ldr	r3, [pc, #20]	@ (8007394 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	4a04      	ldr	r2, [pc, #16]	@ (8007394 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007382:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007386:	6093      	str	r3, [r2, #8]
}
 8007388:	bf00      	nop
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	40007000 	.word	0x40007000

08007398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e2fe      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d075      	beq.n	80074a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073b6:	4b97      	ldr	r3, [pc, #604]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 030c 	and.w	r3, r3, #12
 80073be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073c0:	4b94      	ldr	r3, [pc, #592]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	2b0c      	cmp	r3, #12
 80073ce:	d102      	bne.n	80073d6 <HAL_RCC_OscConfig+0x3e>
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d002      	beq.n	80073dc <HAL_RCC_OscConfig+0x44>
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d10b      	bne.n	80073f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073dc:	4b8d      	ldr	r3, [pc, #564]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d05b      	beq.n	80074a0 <HAL_RCC_OscConfig+0x108>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d157      	bne.n	80074a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e2d9      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073fc:	d106      	bne.n	800740c <HAL_RCC_OscConfig+0x74>
 80073fe:	4b85      	ldr	r3, [pc, #532]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a84      	ldr	r2, [pc, #528]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 8007404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	e01d      	b.n	8007448 <HAL_RCC_OscConfig+0xb0>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007414:	d10c      	bne.n	8007430 <HAL_RCC_OscConfig+0x98>
 8007416:	4b7f      	ldr	r3, [pc, #508]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a7e      	ldr	r2, [pc, #504]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 800741c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	4b7c      	ldr	r3, [pc, #496]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a7b      	ldr	r2, [pc, #492]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 8007428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	e00b      	b.n	8007448 <HAL_RCC_OscConfig+0xb0>
 8007430:	4b78      	ldr	r3, [pc, #480]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a77      	ldr	r2, [pc, #476]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 8007436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	4b75      	ldr	r3, [pc, #468]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a74      	ldr	r2, [pc, #464]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 8007442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d013      	beq.n	8007478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007450:	f7fd f9e4 	bl	800481c <HAL_GetTick>
 8007454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007456:	e008      	b.n	800746a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007458:	f7fd f9e0 	bl	800481c <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	2b64      	cmp	r3, #100	@ 0x64
 8007464:	d901      	bls.n	800746a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e29e      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800746a:	4b6a      	ldr	r3, [pc, #424]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0f0      	beq.n	8007458 <HAL_RCC_OscConfig+0xc0>
 8007476:	e014      	b.n	80074a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007478:	f7fd f9d0 	bl	800481c <HAL_GetTick>
 800747c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800747e:	e008      	b.n	8007492 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007480:	f7fd f9cc 	bl	800481c <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	2b64      	cmp	r3, #100	@ 0x64
 800748c:	d901      	bls.n	8007492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e28a      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007492:	4b60      	ldr	r3, [pc, #384]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1f0      	bne.n	8007480 <HAL_RCC_OscConfig+0xe8>
 800749e:	e000      	b.n	80074a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d075      	beq.n	800759a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ae:	4b59      	ldr	r3, [pc, #356]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f003 030c 	and.w	r3, r3, #12
 80074b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074b8:	4b56      	ldr	r3, [pc, #344]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	2b0c      	cmp	r3, #12
 80074c6:	d102      	bne.n	80074ce <HAL_RCC_OscConfig+0x136>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d002      	beq.n	80074d4 <HAL_RCC_OscConfig+0x13c>
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d11f      	bne.n	8007514 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074d4:	4b4f      	ldr	r3, [pc, #316]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <HAL_RCC_OscConfig+0x154>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e25d      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ec:	4b49      	ldr	r3, [pc, #292]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	061b      	lsls	r3, r3, #24
 80074fa:	4946      	ldr	r1, [pc, #280]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007500:	4b45      	ldr	r3, [pc, #276]	@ (8007618 <HAL_RCC_OscConfig+0x280>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4618      	mov	r0, r3
 8007506:	f7fd f93d 	bl	8004784 <HAL_InitTick>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d043      	beq.n	8007598 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e249      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d023      	beq.n	8007564 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800751c:	4b3d      	ldr	r3, [pc, #244]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a3c      	ldr	r2, [pc, #240]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 8007522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007528:	f7fd f978 	bl	800481c <HAL_GetTick>
 800752c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800752e:	e008      	b.n	8007542 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007530:	f7fd f974 	bl	800481c <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e232      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007542:	4b34      	ldr	r3, [pc, #208]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0f0      	beq.n	8007530 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800754e:	4b31      	ldr	r3, [pc, #196]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	061b      	lsls	r3, r3, #24
 800755c:	492d      	ldr	r1, [pc, #180]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 800755e:	4313      	orrs	r3, r2
 8007560:	604b      	str	r3, [r1, #4]
 8007562:	e01a      	b.n	800759a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007564:	4b2b      	ldr	r3, [pc, #172]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a2a      	ldr	r2, [pc, #168]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 800756a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800756e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007570:	f7fd f954 	bl	800481c <HAL_GetTick>
 8007574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007578:	f7fd f950 	bl	800481c <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b02      	cmp	r3, #2
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e20e      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800758a:	4b22      	ldr	r3, [pc, #136]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1f0      	bne.n	8007578 <HAL_RCC_OscConfig+0x1e0>
 8007596:	e000      	b.n	800759a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007598:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0308 	and.w	r3, r3, #8
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d041      	beq.n	800762a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01c      	beq.n	80075e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075ae:	4b19      	ldr	r3, [pc, #100]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 80075b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075b4:	4a17      	ldr	r2, [pc, #92]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075be:	f7fd f92d 	bl	800481c <HAL_GetTick>
 80075c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075c4:	e008      	b.n	80075d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075c6:	f7fd f929 	bl	800481c <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d901      	bls.n	80075d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e1e7      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 80075da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0ef      	beq.n	80075c6 <HAL_RCC_OscConfig+0x22e>
 80075e6:	e020      	b.n	800762a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 80075ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ee:	4a09      	ldr	r2, [pc, #36]	@ (8007614 <HAL_RCC_OscConfig+0x27c>)
 80075f0:	f023 0301 	bic.w	r3, r3, #1
 80075f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f8:	f7fd f910 	bl	800481c <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075fe:	e00d      	b.n	800761c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007600:	f7fd f90c 	bl	800481c <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d906      	bls.n	800761c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e1ca      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
 8007612:	bf00      	nop
 8007614:	40021000 	.word	0x40021000
 8007618:	2000003c 	.word	0x2000003c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800761c:	4b8c      	ldr	r3, [pc, #560]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 800761e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1ea      	bne.n	8007600 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 80a6 	beq.w	8007784 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007638:	2300      	movs	r3, #0
 800763a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800763c:	4b84      	ldr	r3, [pc, #528]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 800763e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <HAL_RCC_OscConfig+0x2b4>
 8007648:	2301      	movs	r3, #1
 800764a:	e000      	b.n	800764e <HAL_RCC_OscConfig+0x2b6>
 800764c:	2300      	movs	r3, #0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00d      	beq.n	800766e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007652:	4b7f      	ldr	r3, [pc, #508]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 8007654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007656:	4a7e      	ldr	r2, [pc, #504]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 8007658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800765c:	6593      	str	r3, [r2, #88]	@ 0x58
 800765e:	4b7c      	ldr	r3, [pc, #496]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 8007660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800766a:	2301      	movs	r3, #1
 800766c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800766e:	4b79      	ldr	r3, [pc, #484]	@ (8007854 <HAL_RCC_OscConfig+0x4bc>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007676:	2b00      	cmp	r3, #0
 8007678:	d118      	bne.n	80076ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800767a:	4b76      	ldr	r3, [pc, #472]	@ (8007854 <HAL_RCC_OscConfig+0x4bc>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a75      	ldr	r2, [pc, #468]	@ (8007854 <HAL_RCC_OscConfig+0x4bc>)
 8007680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007686:	f7fd f8c9 	bl	800481c <HAL_GetTick>
 800768a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800768c:	e008      	b.n	80076a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800768e:	f7fd f8c5 	bl	800481c <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	2b02      	cmp	r3, #2
 800769a:	d901      	bls.n	80076a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e183      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076a0:	4b6c      	ldr	r3, [pc, #432]	@ (8007854 <HAL_RCC_OscConfig+0x4bc>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d0f0      	beq.n	800768e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d108      	bne.n	80076c6 <HAL_RCC_OscConfig+0x32e>
 80076b4:	4b66      	ldr	r3, [pc, #408]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 80076b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ba:	4a65      	ldr	r2, [pc, #404]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 80076bc:	f043 0301 	orr.w	r3, r3, #1
 80076c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076c4:	e024      	b.n	8007710 <HAL_RCC_OscConfig+0x378>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	d110      	bne.n	80076f0 <HAL_RCC_OscConfig+0x358>
 80076ce:	4b60      	ldr	r3, [pc, #384]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 80076d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076d4:	4a5e      	ldr	r2, [pc, #376]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 80076d6:	f043 0304 	orr.w	r3, r3, #4
 80076da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076de:	4b5c      	ldr	r3, [pc, #368]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 80076e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076e4:	4a5a      	ldr	r2, [pc, #360]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 80076e6:	f043 0301 	orr.w	r3, r3, #1
 80076ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076ee:	e00f      	b.n	8007710 <HAL_RCC_OscConfig+0x378>
 80076f0:	4b57      	ldr	r3, [pc, #348]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 80076f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f6:	4a56      	ldr	r2, [pc, #344]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007700:	4b53      	ldr	r3, [pc, #332]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 8007702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007706:	4a52      	ldr	r2, [pc, #328]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 8007708:	f023 0304 	bic.w	r3, r3, #4
 800770c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d016      	beq.n	8007746 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007718:	f7fd f880 	bl	800481c <HAL_GetTick>
 800771c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800771e:	e00a      	b.n	8007736 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007720:	f7fd f87c 	bl	800481c <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800772e:	4293      	cmp	r3, r2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e138      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007736:	4b46      	ldr	r3, [pc, #280]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 8007738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0ed      	beq.n	8007720 <HAL_RCC_OscConfig+0x388>
 8007744:	e015      	b.n	8007772 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007746:	f7fd f869 	bl	800481c <HAL_GetTick>
 800774a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800774c:	e00a      	b.n	8007764 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800774e:	f7fd f865 	bl	800481c <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800775c:	4293      	cmp	r3, r2
 800775e:	d901      	bls.n	8007764 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e121      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007764:	4b3a      	ldr	r3, [pc, #232]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 8007766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1ed      	bne.n	800774e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007772:	7ffb      	ldrb	r3, [r7, #31]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d105      	bne.n	8007784 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007778:	4b35      	ldr	r3, [pc, #212]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 800777a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800777c:	4a34      	ldr	r2, [pc, #208]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 800777e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007782:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b00      	cmp	r3, #0
 800778e:	d03c      	beq.n	800780a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d01c      	beq.n	80077d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007798:	4b2d      	ldr	r3, [pc, #180]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 800779a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800779e:	4a2c      	ldr	r2, [pc, #176]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 80077a0:	f043 0301 	orr.w	r3, r3, #1
 80077a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077a8:	f7fd f838 	bl	800481c <HAL_GetTick>
 80077ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077ae:	e008      	b.n	80077c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077b0:	f7fd f834 	bl	800481c <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e0f2      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077c2:	4b23      	ldr	r3, [pc, #140]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 80077c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d0ef      	beq.n	80077b0 <HAL_RCC_OscConfig+0x418>
 80077d0:	e01b      	b.n	800780a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077d2:	4b1f      	ldr	r3, [pc, #124]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 80077d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 80077da:	f023 0301 	bic.w	r3, r3, #1
 80077de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e2:	f7fd f81b 	bl	800481c <HAL_GetTick>
 80077e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077e8:	e008      	b.n	80077fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077ea:	f7fd f817 	bl	800481c <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d901      	bls.n	80077fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e0d5      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077fc:	4b14      	ldr	r3, [pc, #80]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 80077fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1ef      	bne.n	80077ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 80c9 	beq.w	80079a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007814:	4b0e      	ldr	r3, [pc, #56]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f003 030c 	and.w	r3, r3, #12
 800781c:	2b0c      	cmp	r3, #12
 800781e:	f000 8083 	beq.w	8007928 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d15e      	bne.n	80078e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800782a:	4b09      	ldr	r3, [pc, #36]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a08      	ldr	r2, [pc, #32]	@ (8007850 <HAL_RCC_OscConfig+0x4b8>)
 8007830:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007836:	f7fc fff1 	bl	800481c <HAL_GetTick>
 800783a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800783c:	e00c      	b.n	8007858 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800783e:	f7fc ffed 	bl	800481c <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	2b02      	cmp	r3, #2
 800784a:	d905      	bls.n	8007858 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e0ab      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
 8007850:	40021000 	.word	0x40021000
 8007854:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007858:	4b55      	ldr	r3, [pc, #340]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1ec      	bne.n	800783e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007864:	4b52      	ldr	r3, [pc, #328]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	4b52      	ldr	r3, [pc, #328]	@ (80079b4 <HAL_RCC_OscConfig+0x61c>)
 800786a:	4013      	ands	r3, r2
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6a11      	ldr	r1, [r2, #32]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007874:	3a01      	subs	r2, #1
 8007876:	0112      	lsls	r2, r2, #4
 8007878:	4311      	orrs	r1, r2
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800787e:	0212      	lsls	r2, r2, #8
 8007880:	4311      	orrs	r1, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007886:	0852      	lsrs	r2, r2, #1
 8007888:	3a01      	subs	r2, #1
 800788a:	0552      	lsls	r2, r2, #21
 800788c:	4311      	orrs	r1, r2
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007892:	0852      	lsrs	r2, r2, #1
 8007894:	3a01      	subs	r2, #1
 8007896:	0652      	lsls	r2, r2, #25
 8007898:	4311      	orrs	r1, r2
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800789e:	06d2      	lsls	r2, r2, #27
 80078a0:	430a      	orrs	r2, r1
 80078a2:	4943      	ldr	r1, [pc, #268]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078a8:	4b41      	ldr	r3, [pc, #260]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a40      	ldr	r2, [pc, #256]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 80078ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078b4:	4b3e      	ldr	r3, [pc, #248]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	4a3d      	ldr	r2, [pc, #244]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 80078ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c0:	f7fc ffac 	bl	800481c <HAL_GetTick>
 80078c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078c8:	f7fc ffa8 	bl	800481c <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e066      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078da:	4b35      	ldr	r3, [pc, #212]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f0      	beq.n	80078c8 <HAL_RCC_OscConfig+0x530>
 80078e6:	e05e      	b.n	80079a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078e8:	4b31      	ldr	r3, [pc, #196]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a30      	ldr	r2, [pc, #192]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 80078ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f4:	f7fc ff92 	bl	800481c <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078fc:	f7fc ff8e 	bl	800481c <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e04c      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800790e:	4b28      	ldr	r3, [pc, #160]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1f0      	bne.n	80078fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800791a:	4b25      	ldr	r3, [pc, #148]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	4924      	ldr	r1, [pc, #144]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 8007920:	4b25      	ldr	r3, [pc, #148]	@ (80079b8 <HAL_RCC_OscConfig+0x620>)
 8007922:	4013      	ands	r3, r2
 8007924:	60cb      	str	r3, [r1, #12]
 8007926:	e03e      	b.n	80079a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e039      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007934:	4b1e      	ldr	r3, [pc, #120]	@ (80079b0 <HAL_RCC_OscConfig+0x618>)
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f003 0203 	and.w	r2, r3, #3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	429a      	cmp	r2, r3
 8007946:	d12c      	bne.n	80079a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007952:	3b01      	subs	r3, #1
 8007954:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007956:	429a      	cmp	r2, r3
 8007958:	d123      	bne.n	80079a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007964:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007966:	429a      	cmp	r2, r3
 8007968:	d11b      	bne.n	80079a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007976:	429a      	cmp	r2, r3
 8007978:	d113      	bne.n	80079a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007984:	085b      	lsrs	r3, r3, #1
 8007986:	3b01      	subs	r3, #1
 8007988:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800798a:	429a      	cmp	r2, r3
 800798c:	d109      	bne.n	80079a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007998:	085b      	lsrs	r3, r3, #1
 800799a:	3b01      	subs	r3, #1
 800799c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800799e:	429a      	cmp	r2, r3
 80079a0:	d001      	beq.n	80079a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e000      	b.n	80079a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3720      	adds	r7, #32
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40021000 	.word	0x40021000
 80079b4:	019f800c 	.word	0x019f800c
 80079b8:	feeefffc 	.word	0xfeeefffc

080079bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80079c6:	2300      	movs	r3, #0
 80079c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e11e      	b.n	8007c12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079d4:	4b91      	ldr	r3, [pc, #580]	@ (8007c1c <HAL_RCC_ClockConfig+0x260>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 030f 	and.w	r3, r3, #15
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d910      	bls.n	8007a04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079e2:	4b8e      	ldr	r3, [pc, #568]	@ (8007c1c <HAL_RCC_ClockConfig+0x260>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f023 020f 	bic.w	r2, r3, #15
 80079ea:	498c      	ldr	r1, [pc, #560]	@ (8007c1c <HAL_RCC_ClockConfig+0x260>)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079f2:	4b8a      	ldr	r3, [pc, #552]	@ (8007c1c <HAL_RCC_ClockConfig+0x260>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 030f 	and.w	r3, r3, #15
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d001      	beq.n	8007a04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e106      	b.n	8007c12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d073      	beq.n	8007af8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d129      	bne.n	8007a6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a18:	4b81      	ldr	r3, [pc, #516]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e0f4      	b.n	8007c12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007a28:	f000 f99e 	bl	8007d68 <RCC_GetSysClockFreqFromPLLSource>
 8007a2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	4a7c      	ldr	r2, [pc, #496]	@ (8007c24 <HAL_RCC_ClockConfig+0x268>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d93f      	bls.n	8007ab6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a36:	4b7a      	ldr	r3, [pc, #488]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d009      	beq.n	8007a56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d033      	beq.n	8007ab6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d12f      	bne.n	8007ab6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a56:	4b72      	ldr	r3, [pc, #456]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a5e:	4a70      	ldr	r2, [pc, #448]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a66:	2380      	movs	r3, #128	@ 0x80
 8007a68:	617b      	str	r3, [r7, #20]
 8007a6a:	e024      	b.n	8007ab6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d107      	bne.n	8007a84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a74:	4b6a      	ldr	r3, [pc, #424]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d109      	bne.n	8007a94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e0c6      	b.n	8007c12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a84:	4b66      	ldr	r3, [pc, #408]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e0be      	b.n	8007c12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007a94:	f000 f8ce 	bl	8007c34 <HAL_RCC_GetSysClockFreq>
 8007a98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	4a61      	ldr	r2, [pc, #388]	@ (8007c24 <HAL_RCC_ClockConfig+0x268>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d909      	bls.n	8007ab6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007aaa:	4a5d      	ldr	r2, [pc, #372]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ab0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007ab2:	2380      	movs	r3, #128	@ 0x80
 8007ab4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ab6:	4b5a      	ldr	r3, [pc, #360]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f023 0203 	bic.w	r2, r3, #3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	4957      	ldr	r1, [pc, #348]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac8:	f7fc fea8 	bl	800481c <HAL_GetTick>
 8007acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ace:	e00a      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ad0:	f7fc fea4 	bl	800481c <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e095      	b.n	8007c12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 020c 	and.w	r2, r3, #12
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d1eb      	bne.n	8007ad0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d023      	beq.n	8007b4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b10:	4b43      	ldr	r3, [pc, #268]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	4a42      	ldr	r2, [pc, #264]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007b16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007b1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0308 	and.w	r3, r3, #8
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d007      	beq.n	8007b38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007b28:	4b3d      	ldr	r3, [pc, #244]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007b30:	4a3b      	ldr	r2, [pc, #236]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007b32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007b36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b38:	4b39      	ldr	r3, [pc, #228]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	4936      	ldr	r1, [pc, #216]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	608b      	str	r3, [r1, #8]
 8007b4a:	e008      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2b80      	cmp	r3, #128	@ 0x80
 8007b50:	d105      	bne.n	8007b5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b52:	4b33      	ldr	r3, [pc, #204]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	4a32      	ldr	r2, [pc, #200]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007b58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8007c1c <HAL_RCC_ClockConfig+0x260>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 030f 	and.w	r3, r3, #15
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d21d      	bcs.n	8007ba8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8007c1c <HAL_RCC_ClockConfig+0x260>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f023 020f 	bic.w	r2, r3, #15
 8007b74:	4929      	ldr	r1, [pc, #164]	@ (8007c1c <HAL_RCC_ClockConfig+0x260>)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b7c:	f7fc fe4e 	bl	800481c <HAL_GetTick>
 8007b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b82:	e00a      	b.n	8007b9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b84:	f7fc fe4a 	bl	800481c <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e03b      	b.n	8007c12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b9a:	4b20      	ldr	r3, [pc, #128]	@ (8007c1c <HAL_RCC_ClockConfig+0x260>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d1ed      	bne.n	8007b84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d008      	beq.n	8007bc6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	4917      	ldr	r1, [pc, #92]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d009      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bd2:	4b13      	ldr	r3, [pc, #76]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	490f      	ldr	r1, [pc, #60]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007be6:	f000 f825 	bl	8007c34 <HAL_RCC_GetSysClockFreq>
 8007bea:	4602      	mov	r2, r0
 8007bec:	4b0c      	ldr	r3, [pc, #48]	@ (8007c20 <HAL_RCC_ClockConfig+0x264>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	091b      	lsrs	r3, r3, #4
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	490c      	ldr	r1, [pc, #48]	@ (8007c28 <HAL_RCC_ClockConfig+0x26c>)
 8007bf8:	5ccb      	ldrb	r3, [r1, r3]
 8007bfa:	f003 031f 	and.w	r3, r3, #31
 8007bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8007c02:	4a0a      	ldr	r2, [pc, #40]	@ (8007c2c <HAL_RCC_ClockConfig+0x270>)
 8007c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007c06:	4b0a      	ldr	r3, [pc, #40]	@ (8007c30 <HAL_RCC_ClockConfig+0x274>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fc fdba 	bl	8004784 <HAL_InitTick>
 8007c10:	4603      	mov	r3, r0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	40022000 	.word	0x40022000
 8007c20:	40021000 	.word	0x40021000
 8007c24:	04c4b400 	.word	0x04c4b400
 8007c28:	0800f814 	.word	0x0800f814
 8007c2c:	20000038 	.word	0x20000038
 8007c30:	2000003c 	.word	0x2000003c

08007c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8007cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 030c 	and.w	r3, r3, #12
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d102      	bne.n	8007c4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c46:	4b2a      	ldr	r3, [pc, #168]	@ (8007cf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c48:	613b      	str	r3, [r7, #16]
 8007c4a:	e047      	b.n	8007cdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007c4c:	4b27      	ldr	r3, [pc, #156]	@ (8007cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 030c 	and.w	r3, r3, #12
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d102      	bne.n	8007c5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c58:	4b26      	ldr	r3, [pc, #152]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c5a:	613b      	str	r3, [r7, #16]
 8007c5c:	e03e      	b.n	8007cdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007c5e:	4b23      	ldr	r3, [pc, #140]	@ (8007cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f003 030c 	and.w	r3, r3, #12
 8007c66:	2b0c      	cmp	r3, #12
 8007c68:	d136      	bne.n	8007cd8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c6a:	4b20      	ldr	r3, [pc, #128]	@ (8007cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c74:	4b1d      	ldr	r3, [pc, #116]	@ (8007cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	091b      	lsrs	r3, r3, #4
 8007c7a:	f003 030f 	and.w	r3, r3, #15
 8007c7e:	3301      	adds	r3, #1
 8007c80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	d10c      	bne.n	8007ca2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c88:	4a1a      	ldr	r2, [pc, #104]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c90:	4a16      	ldr	r2, [pc, #88]	@ (8007cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c92:	68d2      	ldr	r2, [r2, #12]
 8007c94:	0a12      	lsrs	r2, r2, #8
 8007c96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007c9a:	fb02 f303 	mul.w	r3, r2, r3
 8007c9e:	617b      	str	r3, [r7, #20]
      break;
 8007ca0:	e00c      	b.n	8007cbc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ca2:	4a13      	ldr	r2, [pc, #76]	@ (8007cf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007caa:	4a10      	ldr	r2, [pc, #64]	@ (8007cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cac:	68d2      	ldr	r2, [r2, #12]
 8007cae:	0a12      	lsrs	r2, r2, #8
 8007cb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007cb4:	fb02 f303 	mul.w	r3, r2, r3
 8007cb8:	617b      	str	r3, [r7, #20]
      break;
 8007cba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8007cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	0e5b      	lsrs	r3, r3, #25
 8007cc2:	f003 0303 	and.w	r3, r3, #3
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd4:	613b      	str	r3, [r7, #16]
 8007cd6:	e001      	b.n	8007cdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007cdc:	693b      	ldr	r3, [r7, #16]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	40021000 	.word	0x40021000
 8007cf0:	00f42400 	.word	0x00f42400
 8007cf4:	016e3600 	.word	0x016e3600

08007cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cfc:	4b03      	ldr	r3, [pc, #12]	@ (8007d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	20000038 	.word	0x20000038

08007d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d14:	f7ff fff0 	bl	8007cf8 <HAL_RCC_GetHCLKFreq>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	4b06      	ldr	r3, [pc, #24]	@ (8007d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	0a1b      	lsrs	r3, r3, #8
 8007d20:	f003 0307 	and.w	r3, r3, #7
 8007d24:	4904      	ldr	r1, [pc, #16]	@ (8007d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d26:	5ccb      	ldrb	r3, [r1, r3]
 8007d28:	f003 031f 	and.w	r3, r3, #31
 8007d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	40021000 	.word	0x40021000
 8007d38:	0800f824 	.word	0x0800f824

08007d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d40:	f7ff ffda 	bl	8007cf8 <HAL_RCC_GetHCLKFreq>
 8007d44:	4602      	mov	r2, r0
 8007d46:	4b06      	ldr	r3, [pc, #24]	@ (8007d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	0adb      	lsrs	r3, r3, #11
 8007d4c:	f003 0307 	and.w	r3, r3, #7
 8007d50:	4904      	ldr	r1, [pc, #16]	@ (8007d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d52:	5ccb      	ldrb	r3, [r1, r3]
 8007d54:	f003 031f 	and.w	r3, r3, #31
 8007d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	40021000 	.word	0x40021000
 8007d64:	0800f824 	.word	0x0800f824

08007d68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007de8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d78:	4b1b      	ldr	r3, [pc, #108]	@ (8007de8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	091b      	lsrs	r3, r3, #4
 8007d7e:	f003 030f 	and.w	r3, r3, #15
 8007d82:	3301      	adds	r3, #1
 8007d84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d10c      	bne.n	8007da6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d8c:	4a17      	ldr	r2, [pc, #92]	@ (8007dec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d94:	4a14      	ldr	r2, [pc, #80]	@ (8007de8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d96:	68d2      	ldr	r2, [r2, #12]
 8007d98:	0a12      	lsrs	r2, r2, #8
 8007d9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007d9e:	fb02 f303 	mul.w	r3, r2, r3
 8007da2:	617b      	str	r3, [r7, #20]
    break;
 8007da4:	e00c      	b.n	8007dc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007da6:	4a12      	ldr	r2, [pc, #72]	@ (8007df0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dae:	4a0e      	ldr	r2, [pc, #56]	@ (8007de8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007db0:	68d2      	ldr	r2, [r2, #12]
 8007db2:	0a12      	lsrs	r2, r2, #8
 8007db4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007db8:	fb02 f303 	mul.w	r3, r2, r3
 8007dbc:	617b      	str	r3, [r7, #20]
    break;
 8007dbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007dc0:	4b09      	ldr	r3, [pc, #36]	@ (8007de8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	0e5b      	lsrs	r3, r3, #25
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	3301      	adds	r3, #1
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007dda:	687b      	ldr	r3, [r7, #4]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	371c      	adds	r7, #28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	40021000 	.word	0x40021000
 8007dec:	016e3600 	.word	0x016e3600
 8007df0:	00f42400 	.word	0x00f42400

08007df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e00:	2300      	movs	r3, #0
 8007e02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 8098 	beq.w	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e12:	2300      	movs	r3, #0
 8007e14:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e16:	4b43      	ldr	r3, [pc, #268]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10d      	bne.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e22:	4b40      	ldr	r3, [pc, #256]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e26:	4a3f      	ldr	r2, [pc, #252]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e36:	60bb      	str	r3, [r7, #8]
 8007e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a39      	ldr	r2, [pc, #228]	@ (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e4a:	f7fc fce7 	bl	800481c <HAL_GetTick>
 8007e4e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e50:	e009      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e52:	f7fc fce3 	bl	800481c <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d902      	bls.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	74fb      	strb	r3, [r7, #19]
        break;
 8007e64:	e005      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e66:	4b30      	ldr	r3, [pc, #192]	@ (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0ef      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007e72:	7cfb      	ldrb	r3, [r7, #19]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d159      	bne.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007e78:	4b2a      	ldr	r3, [pc, #168]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e82:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d01e      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d019      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e94:	4b23      	ldr	r3, [pc, #140]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ea0:	4b20      	ldr	r3, [pc, #128]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ec0:	4a18      	ldr	r2, [pc, #96]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d016      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed2:	f7fc fca3 	bl	800481c <HAL_GetTick>
 8007ed6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ed8:	e00b      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eda:	f7fc fc9f 	bl	800481c <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d902      	bls.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	74fb      	strb	r3, [r7, #19]
            break;
 8007ef0:	e006      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d0ec      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007f00:	7cfb      	ldrb	r3, [r7, #19]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10b      	bne.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f06:	4b07      	ldr	r3, [pc, #28]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f14:	4903      	ldr	r1, [pc, #12]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007f1c:	e008      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f1e:	7cfb      	ldrb	r3, [r7, #19]
 8007f20:	74bb      	strb	r3, [r7, #18]
 8007f22:	e005      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007f24:	40021000 	.word	0x40021000
 8007f28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2c:	7cfb      	ldrb	r3, [r7, #19]
 8007f2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f30:	7c7b      	ldrb	r3, [r7, #17]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d105      	bne.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f36:	4ba7      	ldr	r3, [pc, #668]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f3a:	4aa6      	ldr	r2, [pc, #664]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f4e:	4ba1      	ldr	r3, [pc, #644]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f54:	f023 0203 	bic.w	r2, r3, #3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	499d      	ldr	r1, [pc, #628]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00a      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f70:	4b98      	ldr	r3, [pc, #608]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f76:	f023 020c 	bic.w	r2, r3, #12
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	4995      	ldr	r1, [pc, #596]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f92:	4b90      	ldr	r3, [pc, #576]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	498c      	ldr	r1, [pc, #560]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0308 	and.w	r3, r3, #8
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00a      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007fb4:	4b87      	ldr	r3, [pc, #540]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	4984      	ldr	r1, [pc, #528]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0310 	and.w	r3, r3, #16
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00a      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	497b      	ldr	r1, [pc, #492]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0320 	and.w	r3, r3, #32
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00a      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ff8:	4b76      	ldr	r3, [pc, #472]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ffe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	4973      	ldr	r1, [pc, #460]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008008:	4313      	orrs	r3, r2
 800800a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800801a:	4b6e      	ldr	r3, [pc, #440]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800801c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008020:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	496a      	ldr	r1, [pc, #424]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800802a:	4313      	orrs	r3, r2
 800802c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800803c:	4b65      	ldr	r3, [pc, #404]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800803e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008042:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	4962      	ldr	r1, [pc, #392]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800804c:	4313      	orrs	r3, r2
 800804e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800805e:	4b5d      	ldr	r3, [pc, #372]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008064:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800806c:	4959      	ldr	r1, [pc, #356]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800806e:	4313      	orrs	r3, r2
 8008070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00a      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008080:	4b54      	ldr	r3, [pc, #336]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008082:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008086:	f023 0203 	bic.w	r2, r3, #3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808e:	4951      	ldr	r1, [pc, #324]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008090:	4313      	orrs	r3, r2
 8008092:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00a      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080a2:	4b4c      	ldr	r3, [pc, #304]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b0:	4948      	ldr	r1, [pc, #288]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d015      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080c4:	4b43      	ldr	r3, [pc, #268]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d2:	4940      	ldr	r1, [pc, #256]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080e2:	d105      	bne.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080e4:	4b3b      	ldr	r3, [pc, #236]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	4a3a      	ldr	r2, [pc, #232]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080ee:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d015      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80080fc:	4b35      	ldr	r3, [pc, #212]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008102:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800810a:	4932      	ldr	r1, [pc, #200]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800810c:	4313      	orrs	r3, r2
 800810e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800811a:	d105      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800811c:	4b2d      	ldr	r3, [pc, #180]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	4a2c      	ldr	r2, [pc, #176]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008126:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d015      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008134:	4b27      	ldr	r3, [pc, #156]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800813a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008142:	4924      	ldr	r1, [pc, #144]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008144:	4313      	orrs	r3, r2
 8008146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800814e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008152:	d105      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008154:	4b1f      	ldr	r3, [pc, #124]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	4a1e      	ldr	r2, [pc, #120]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800815a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800815e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d015      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800816c:	4b19      	ldr	r3, [pc, #100]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800816e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008172:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800817a:	4916      	ldr	r1, [pc, #88]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800817c:	4313      	orrs	r3, r2
 800817e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800818a:	d105      	bne.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800818c:	4b11      	ldr	r3, [pc, #68]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	4a10      	ldr	r2, [pc, #64]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008196:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d019      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081a4:	4b0b      	ldr	r3, [pc, #44]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b2:	4908      	ldr	r1, [pc, #32]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081c2:	d109      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081c4:	4b03      	ldr	r3, [pc, #12]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	4a02      	ldr	r2, [pc, #8]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081ce:	60d3      	str	r3, [r2, #12]
 80081d0:	e002      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80081d2:	bf00      	nop
 80081d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d015      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80081e4:	4b29      	ldr	r3, [pc, #164]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80081e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081f2:	4926      	ldr	r1, [pc, #152]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008202:	d105      	bne.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008204:	4b21      	ldr	r3, [pc, #132]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	4a20      	ldr	r2, [pc, #128]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800820a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800820e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d015      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800821c:	4b1b      	ldr	r3, [pc, #108]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800821e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008222:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800822a:	4918      	ldr	r1, [pc, #96]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800822c:	4313      	orrs	r3, r2
 800822e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800823a:	d105      	bne.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800823c:	4b13      	ldr	r3, [pc, #76]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	4a12      	ldr	r2, [pc, #72]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008246:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d015      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008254:	4b0d      	ldr	r3, [pc, #52]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008256:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800825a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008262:	490a      	ldr	r1, [pc, #40]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008264:	4313      	orrs	r3, r2
 8008266:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800826e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008272:	d105      	bne.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008274:	4b05      	ldr	r3, [pc, #20]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	4a04      	ldr	r2, [pc, #16]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800827a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800827e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008280:	7cbb      	ldrb	r3, [r7, #18]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	40021000 	.word	0x40021000

08008290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e049      	b.n	8008336 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d106      	bne.n	80082bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7fb fdd6 	bl	8003e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	f001 f842 	bl	8009358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b01      	cmp	r3, #1
 8008352:	d001      	beq.n	8008358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e054      	b.n	8008402 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2202      	movs	r2, #2
 800835c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f042 0201 	orr.w	r2, r2, #1
 800836e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a26      	ldr	r2, [pc, #152]	@ (8008410 <HAL_TIM_Base_Start_IT+0xd0>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d022      	beq.n	80083c0 <HAL_TIM_Base_Start_IT+0x80>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008382:	d01d      	beq.n	80083c0 <HAL_TIM_Base_Start_IT+0x80>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a22      	ldr	r2, [pc, #136]	@ (8008414 <HAL_TIM_Base_Start_IT+0xd4>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d018      	beq.n	80083c0 <HAL_TIM_Base_Start_IT+0x80>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a21      	ldr	r2, [pc, #132]	@ (8008418 <HAL_TIM_Base_Start_IT+0xd8>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d013      	beq.n	80083c0 <HAL_TIM_Base_Start_IT+0x80>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a1f      	ldr	r2, [pc, #124]	@ (800841c <HAL_TIM_Base_Start_IT+0xdc>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d00e      	beq.n	80083c0 <HAL_TIM_Base_Start_IT+0x80>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a1e      	ldr	r2, [pc, #120]	@ (8008420 <HAL_TIM_Base_Start_IT+0xe0>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d009      	beq.n	80083c0 <HAL_TIM_Base_Start_IT+0x80>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a1c      	ldr	r2, [pc, #112]	@ (8008424 <HAL_TIM_Base_Start_IT+0xe4>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d004      	beq.n	80083c0 <HAL_TIM_Base_Start_IT+0x80>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008428 <HAL_TIM_Base_Start_IT+0xe8>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d115      	bne.n	80083ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	4b19      	ldr	r3, [pc, #100]	@ (800842c <HAL_TIM_Base_Start_IT+0xec>)
 80083c8:	4013      	ands	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b06      	cmp	r3, #6
 80083d0:	d015      	beq.n	80083fe <HAL_TIM_Base_Start_IT+0xbe>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083d8:	d011      	beq.n	80083fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f042 0201 	orr.w	r2, r2, #1
 80083e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ea:	e008      	b.n	80083fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0201 	orr.w	r2, r2, #1
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	e000      	b.n	8008400 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	40012c00 	.word	0x40012c00
 8008414:	40000400 	.word	0x40000400
 8008418:	40000800 	.word	0x40000800
 800841c:	40000c00 	.word	0x40000c00
 8008420:	40013400 	.word	0x40013400
 8008424:	40014000 	.word	0x40014000
 8008428:	40015000 	.word	0x40015000
 800842c:	00010007 	.word	0x00010007

08008430 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e049      	b.n	80084d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d106      	bne.n	800845c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7fb fcd8 	bl	8003e0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3304      	adds	r3, #4
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f000 ff72 	bl	8009358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d109      	bne.n	8008504 <HAL_TIM_PWM_Start+0x24>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	bf14      	ite	ne
 80084fc:	2301      	movne	r3, #1
 80084fe:	2300      	moveq	r3, #0
 8008500:	b2db      	uxtb	r3, r3
 8008502:	e03c      	b.n	800857e <HAL_TIM_PWM_Start+0x9e>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	2b04      	cmp	r3, #4
 8008508:	d109      	bne.n	800851e <HAL_TIM_PWM_Start+0x3e>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b01      	cmp	r3, #1
 8008514:	bf14      	ite	ne
 8008516:	2301      	movne	r3, #1
 8008518:	2300      	moveq	r3, #0
 800851a:	b2db      	uxtb	r3, r3
 800851c:	e02f      	b.n	800857e <HAL_TIM_PWM_Start+0x9e>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	2b08      	cmp	r3, #8
 8008522:	d109      	bne.n	8008538 <HAL_TIM_PWM_Start+0x58>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b01      	cmp	r3, #1
 800852e:	bf14      	ite	ne
 8008530:	2301      	movne	r3, #1
 8008532:	2300      	moveq	r3, #0
 8008534:	b2db      	uxtb	r3, r3
 8008536:	e022      	b.n	800857e <HAL_TIM_PWM_Start+0x9e>
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2b0c      	cmp	r3, #12
 800853c:	d109      	bne.n	8008552 <HAL_TIM_PWM_Start+0x72>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b01      	cmp	r3, #1
 8008548:	bf14      	ite	ne
 800854a:	2301      	movne	r3, #1
 800854c:	2300      	moveq	r3, #0
 800854e:	b2db      	uxtb	r3, r3
 8008550:	e015      	b.n	800857e <HAL_TIM_PWM_Start+0x9e>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b10      	cmp	r3, #16
 8008556:	d109      	bne.n	800856c <HAL_TIM_PWM_Start+0x8c>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b01      	cmp	r3, #1
 8008562:	bf14      	ite	ne
 8008564:	2301      	movne	r3, #1
 8008566:	2300      	moveq	r3, #0
 8008568:	b2db      	uxtb	r3, r3
 800856a:	e008      	b.n	800857e <HAL_TIM_PWM_Start+0x9e>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b01      	cmp	r3, #1
 8008576:	bf14      	ite	ne
 8008578:	2301      	movne	r3, #1
 800857a:	2300      	moveq	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e0a6      	b.n	80086d4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <HAL_TIM_PWM_Start+0xb6>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008594:	e023      	b.n	80085de <HAL_TIM_PWM_Start+0xfe>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b04      	cmp	r3, #4
 800859a:	d104      	bne.n	80085a6 <HAL_TIM_PWM_Start+0xc6>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085a4:	e01b      	b.n	80085de <HAL_TIM_PWM_Start+0xfe>
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b08      	cmp	r3, #8
 80085aa:	d104      	bne.n	80085b6 <HAL_TIM_PWM_Start+0xd6>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085b4:	e013      	b.n	80085de <HAL_TIM_PWM_Start+0xfe>
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b0c      	cmp	r3, #12
 80085ba:	d104      	bne.n	80085c6 <HAL_TIM_PWM_Start+0xe6>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085c4:	e00b      	b.n	80085de <HAL_TIM_PWM_Start+0xfe>
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b10      	cmp	r3, #16
 80085ca:	d104      	bne.n	80085d6 <HAL_TIM_PWM_Start+0xf6>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085d4:	e003      	b.n	80085de <HAL_TIM_PWM_Start+0xfe>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2202      	movs	r2, #2
 80085da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2201      	movs	r2, #1
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f001 fc5a 	bl	8009ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a3a      	ldr	r2, [pc, #232]	@ (80086dc <HAL_TIM_PWM_Start+0x1fc>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d018      	beq.n	8008628 <HAL_TIM_PWM_Start+0x148>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a39      	ldr	r2, [pc, #228]	@ (80086e0 <HAL_TIM_PWM_Start+0x200>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d013      	beq.n	8008628 <HAL_TIM_PWM_Start+0x148>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a37      	ldr	r2, [pc, #220]	@ (80086e4 <HAL_TIM_PWM_Start+0x204>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d00e      	beq.n	8008628 <HAL_TIM_PWM_Start+0x148>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a36      	ldr	r2, [pc, #216]	@ (80086e8 <HAL_TIM_PWM_Start+0x208>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d009      	beq.n	8008628 <HAL_TIM_PWM_Start+0x148>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a34      	ldr	r2, [pc, #208]	@ (80086ec <HAL_TIM_PWM_Start+0x20c>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d004      	beq.n	8008628 <HAL_TIM_PWM_Start+0x148>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a33      	ldr	r2, [pc, #204]	@ (80086f0 <HAL_TIM_PWM_Start+0x210>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d101      	bne.n	800862c <HAL_TIM_PWM_Start+0x14c>
 8008628:	2301      	movs	r3, #1
 800862a:	e000      	b.n	800862e <HAL_TIM_PWM_Start+0x14e>
 800862c:	2300      	movs	r3, #0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d007      	beq.n	8008642 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008640:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a25      	ldr	r2, [pc, #148]	@ (80086dc <HAL_TIM_PWM_Start+0x1fc>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d022      	beq.n	8008692 <HAL_TIM_PWM_Start+0x1b2>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008654:	d01d      	beq.n	8008692 <HAL_TIM_PWM_Start+0x1b2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a26      	ldr	r2, [pc, #152]	@ (80086f4 <HAL_TIM_PWM_Start+0x214>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d018      	beq.n	8008692 <HAL_TIM_PWM_Start+0x1b2>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a24      	ldr	r2, [pc, #144]	@ (80086f8 <HAL_TIM_PWM_Start+0x218>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d013      	beq.n	8008692 <HAL_TIM_PWM_Start+0x1b2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a23      	ldr	r2, [pc, #140]	@ (80086fc <HAL_TIM_PWM_Start+0x21c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d00e      	beq.n	8008692 <HAL_TIM_PWM_Start+0x1b2>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a19      	ldr	r2, [pc, #100]	@ (80086e0 <HAL_TIM_PWM_Start+0x200>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d009      	beq.n	8008692 <HAL_TIM_PWM_Start+0x1b2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a18      	ldr	r2, [pc, #96]	@ (80086e4 <HAL_TIM_PWM_Start+0x204>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d004      	beq.n	8008692 <HAL_TIM_PWM_Start+0x1b2>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a18      	ldr	r2, [pc, #96]	@ (80086f0 <HAL_TIM_PWM_Start+0x210>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d115      	bne.n	80086be <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	4b19      	ldr	r3, [pc, #100]	@ (8008700 <HAL_TIM_PWM_Start+0x220>)
 800869a:	4013      	ands	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b06      	cmp	r3, #6
 80086a2:	d015      	beq.n	80086d0 <HAL_TIM_PWM_Start+0x1f0>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086aa:	d011      	beq.n	80086d0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0201 	orr.w	r2, r2, #1
 80086ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086bc:	e008      	b.n	80086d0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f042 0201 	orr.w	r2, r2, #1
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	e000      	b.n	80086d2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	40012c00 	.word	0x40012c00
 80086e0:	40013400 	.word	0x40013400
 80086e4:	40014000 	.word	0x40014000
 80086e8:	40014400 	.word	0x40014400
 80086ec:	40014800 	.word	0x40014800
 80086f0:	40015000 	.word	0x40015000
 80086f4:	40000400 	.word	0x40000400
 80086f8:	40000800 	.word	0x40000800
 80086fc:	40000c00 	.word	0x40000c00
 8008700:	00010007 	.word	0x00010007

08008704 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e049      	b.n	80087aa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d106      	bne.n	8008730 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f841 	bl	80087b2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	3304      	adds	r3, #4
 8008740:	4619      	mov	r1, r3
 8008742:	4610      	mov	r0, r2
 8008744:	f000 fe08 	bl	8009358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
	...

080087c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <HAL_TIM_IC_Start_IT+0x1e>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	e023      	b.n	800882e <HAL_TIM_IC_Start_IT+0x66>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d104      	bne.n	80087f6 <HAL_TIM_IC_Start_IT+0x2e>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	e01b      	b.n	800882e <HAL_TIM_IC_Start_IT+0x66>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d104      	bne.n	8008806 <HAL_TIM_IC_Start_IT+0x3e>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008802:	b2db      	uxtb	r3, r3
 8008804:	e013      	b.n	800882e <HAL_TIM_IC_Start_IT+0x66>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b0c      	cmp	r3, #12
 800880a:	d104      	bne.n	8008816 <HAL_TIM_IC_Start_IT+0x4e>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008812:	b2db      	uxtb	r3, r3
 8008814:	e00b      	b.n	800882e <HAL_TIM_IC_Start_IT+0x66>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b10      	cmp	r3, #16
 800881a:	d104      	bne.n	8008826 <HAL_TIM_IC_Start_IT+0x5e>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008822:	b2db      	uxtb	r3, r3
 8008824:	e003      	b.n	800882e <HAL_TIM_IC_Start_IT+0x66>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800882c:	b2db      	uxtb	r3, r3
 800882e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d104      	bne.n	8008840 <HAL_TIM_IC_Start_IT+0x78>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800883c:	b2db      	uxtb	r3, r3
 800883e:	e013      	b.n	8008868 <HAL_TIM_IC_Start_IT+0xa0>
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b04      	cmp	r3, #4
 8008844:	d104      	bne.n	8008850 <HAL_TIM_IC_Start_IT+0x88>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800884c:	b2db      	uxtb	r3, r3
 800884e:	e00b      	b.n	8008868 <HAL_TIM_IC_Start_IT+0xa0>
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	2b08      	cmp	r3, #8
 8008854:	d104      	bne.n	8008860 <HAL_TIM_IC_Start_IT+0x98>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800885c:	b2db      	uxtb	r3, r3
 800885e:	e003      	b.n	8008868 <HAL_TIM_IC_Start_IT+0xa0>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008866:	b2db      	uxtb	r3, r3
 8008868:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800886a:	7bbb      	ldrb	r3, [r7, #14]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d102      	bne.n	8008876 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008870:	7b7b      	ldrb	r3, [r7, #13]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d001      	beq.n	800887a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e0e2      	b.n	8008a40 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d104      	bne.n	800888a <HAL_TIM_IC_Start_IT+0xc2>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008888:	e023      	b.n	80088d2 <HAL_TIM_IC_Start_IT+0x10a>
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b04      	cmp	r3, #4
 800888e:	d104      	bne.n	800889a <HAL_TIM_IC_Start_IT+0xd2>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2202      	movs	r2, #2
 8008894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008898:	e01b      	b.n	80088d2 <HAL_TIM_IC_Start_IT+0x10a>
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	2b08      	cmp	r3, #8
 800889e:	d104      	bne.n	80088aa <HAL_TIM_IC_Start_IT+0xe2>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088a8:	e013      	b.n	80088d2 <HAL_TIM_IC_Start_IT+0x10a>
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	2b0c      	cmp	r3, #12
 80088ae:	d104      	bne.n	80088ba <HAL_TIM_IC_Start_IT+0xf2>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2202      	movs	r2, #2
 80088b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088b8:	e00b      	b.n	80088d2 <HAL_TIM_IC_Start_IT+0x10a>
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b10      	cmp	r3, #16
 80088be:	d104      	bne.n	80088ca <HAL_TIM_IC_Start_IT+0x102>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088c8:	e003      	b.n	80088d2 <HAL_TIM_IC_Start_IT+0x10a>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2202      	movs	r2, #2
 80088ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d104      	bne.n	80088e2 <HAL_TIM_IC_Start_IT+0x11a>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088e0:	e013      	b.n	800890a <HAL_TIM_IC_Start_IT+0x142>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d104      	bne.n	80088f2 <HAL_TIM_IC_Start_IT+0x12a>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2202      	movs	r2, #2
 80088ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088f0:	e00b      	b.n	800890a <HAL_TIM_IC_Start_IT+0x142>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b08      	cmp	r3, #8
 80088f6:	d104      	bne.n	8008902 <HAL_TIM_IC_Start_IT+0x13a>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008900:	e003      	b.n	800890a <HAL_TIM_IC_Start_IT+0x142>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2202      	movs	r2, #2
 8008906:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b0c      	cmp	r3, #12
 800890e:	d841      	bhi.n	8008994 <HAL_TIM_IC_Start_IT+0x1cc>
 8008910:	a201      	add	r2, pc, #4	@ (adr r2, 8008918 <HAL_TIM_IC_Start_IT+0x150>)
 8008912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008916:	bf00      	nop
 8008918:	0800894d 	.word	0x0800894d
 800891c:	08008995 	.word	0x08008995
 8008920:	08008995 	.word	0x08008995
 8008924:	08008995 	.word	0x08008995
 8008928:	0800895f 	.word	0x0800895f
 800892c:	08008995 	.word	0x08008995
 8008930:	08008995 	.word	0x08008995
 8008934:	08008995 	.word	0x08008995
 8008938:	08008971 	.word	0x08008971
 800893c:	08008995 	.word	0x08008995
 8008940:	08008995 	.word	0x08008995
 8008944:	08008995 	.word	0x08008995
 8008948:	08008983 	.word	0x08008983
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68da      	ldr	r2, [r3, #12]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f042 0202 	orr.w	r2, r2, #2
 800895a:	60da      	str	r2, [r3, #12]
      break;
 800895c:	e01d      	b.n	800899a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68da      	ldr	r2, [r3, #12]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f042 0204 	orr.w	r2, r2, #4
 800896c:	60da      	str	r2, [r3, #12]
      break;
 800896e:	e014      	b.n	800899a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0208 	orr.w	r2, r2, #8
 800897e:	60da      	str	r2, [r3, #12]
      break;
 8008980:	e00b      	b.n	800899a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68da      	ldr	r2, [r3, #12]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f042 0210 	orr.w	r2, r2, #16
 8008990:	60da      	str	r2, [r3, #12]
      break;
 8008992:	e002      	b.n	800899a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	73fb      	strb	r3, [r7, #15]
      break;
 8008998:	bf00      	nop
  }

  if (status == HAL_OK)
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d14e      	bne.n	8008a3e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2201      	movs	r2, #1
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f001 fa79 	bl	8009ea0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a25      	ldr	r2, [pc, #148]	@ (8008a48 <HAL_TIM_IC_Start_IT+0x280>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d022      	beq.n	80089fe <HAL_TIM_IC_Start_IT+0x236>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089c0:	d01d      	beq.n	80089fe <HAL_TIM_IC_Start_IT+0x236>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a21      	ldr	r2, [pc, #132]	@ (8008a4c <HAL_TIM_IC_Start_IT+0x284>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d018      	beq.n	80089fe <HAL_TIM_IC_Start_IT+0x236>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a1f      	ldr	r2, [pc, #124]	@ (8008a50 <HAL_TIM_IC_Start_IT+0x288>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d013      	beq.n	80089fe <HAL_TIM_IC_Start_IT+0x236>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a1e      	ldr	r2, [pc, #120]	@ (8008a54 <HAL_TIM_IC_Start_IT+0x28c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00e      	beq.n	80089fe <HAL_TIM_IC_Start_IT+0x236>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008a58 <HAL_TIM_IC_Start_IT+0x290>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d009      	beq.n	80089fe <HAL_TIM_IC_Start_IT+0x236>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a1b      	ldr	r2, [pc, #108]	@ (8008a5c <HAL_TIM_IC_Start_IT+0x294>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d004      	beq.n	80089fe <HAL_TIM_IC_Start_IT+0x236>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a19      	ldr	r2, [pc, #100]	@ (8008a60 <HAL_TIM_IC_Start_IT+0x298>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d115      	bne.n	8008a2a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	4b17      	ldr	r3, [pc, #92]	@ (8008a64 <HAL_TIM_IC_Start_IT+0x29c>)
 8008a06:	4013      	ands	r3, r2
 8008a08:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b06      	cmp	r3, #6
 8008a0e:	d015      	beq.n	8008a3c <HAL_TIM_IC_Start_IT+0x274>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a16:	d011      	beq.n	8008a3c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0201 	orr.w	r2, r2, #1
 8008a26:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a28:	e008      	b.n	8008a3c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f042 0201 	orr.w	r2, r2, #1
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	e000      	b.n	8008a3e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a3c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	40012c00 	.word	0x40012c00
 8008a4c:	40000400 	.word	0x40000400
 8008a50:	40000800 	.word	0x40000800
 8008a54:	40000c00 	.word	0x40000c00
 8008a58:	40013400 	.word	0x40013400
 8008a5c:	40014000 	.word	0x40014000
 8008a60:	40015000 	.word	0x40015000
 8008a64:	00010007 	.word	0x00010007

08008a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d020      	beq.n	8008acc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f003 0302 	and.w	r3, r3, #2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d01b      	beq.n	8008acc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f06f 0202 	mvn.w	r2, #2
 8008a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	f003 0303 	and.w	r3, r3, #3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7fa f92a 	bl	8002d0c <HAL_TIM_IC_CaptureCallback>
 8008ab8:	e005      	b.n	8008ac6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fc2e 	bl	800931c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fc35 	bl	8009330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f003 0304 	and.w	r3, r3, #4
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d020      	beq.n	8008b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f003 0304 	and.w	r3, r3, #4
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01b      	beq.n	8008b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f06f 0204 	mvn.w	r2, #4
 8008ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2202      	movs	r2, #2
 8008aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7fa f904 	bl	8002d0c <HAL_TIM_IC_CaptureCallback>
 8008b04:	e005      	b.n	8008b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fc08 	bl	800931c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fc0f 	bl	8009330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	f003 0308 	and.w	r3, r3, #8
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d020      	beq.n	8008b64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f003 0308 	and.w	r3, r3, #8
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01b      	beq.n	8008b64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f06f 0208 	mvn.w	r2, #8
 8008b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2204      	movs	r2, #4
 8008b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	f003 0303 	and.w	r3, r3, #3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d003      	beq.n	8008b52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7fa f8de 	bl	8002d0c <HAL_TIM_IC_CaptureCallback>
 8008b50:	e005      	b.n	8008b5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fbe2 	bl	800931c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fbe9 	bl	8009330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f003 0310 	and.w	r3, r3, #16
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d020      	beq.n	8008bb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f003 0310 	and.w	r3, r3, #16
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d01b      	beq.n	8008bb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f06f 0210 	mvn.w	r2, #16
 8008b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2208      	movs	r2, #8
 8008b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7fa f8b8 	bl	8002d0c <HAL_TIM_IC_CaptureCallback>
 8008b9c:	e005      	b.n	8008baa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fbbc 	bl	800931c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fbc3 	bl	8009330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00c      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d007      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f06f 0201 	mvn.w	r2, #1
 8008bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7fa f81e 	bl	8002c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d104      	bne.n	8008be8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00c      	beq.n	8008c02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d007      	beq.n	8008c02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 faa9 	bl	800a154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00c      	beq.n	8008c26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d007      	beq.n	8008c26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 faa1 	bl	800a168 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00c      	beq.n	8008c4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d007      	beq.n	8008c4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fb7d 	bl	8009344 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	f003 0320 	and.w	r3, r3, #32
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00c      	beq.n	8008c6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f003 0320 	and.w	r3, r3, #32
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d007      	beq.n	8008c6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f06f 0220 	mvn.w	r2, #32
 8008c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 fa69 	bl	800a140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00c      	beq.n	8008c92 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d007      	beq.n	8008c92 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f001 fa75 	bl	800a17c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00c      	beq.n	8008cb6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d007      	beq.n	8008cb6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 fa6d 	bl	800a190 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00c      	beq.n	8008cda <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d007      	beq.n	8008cda <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f001 fa65 	bl	800a1a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00c      	beq.n	8008cfe <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d007      	beq.n	8008cfe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 fa5d 	bl	800a1b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cfe:	bf00      	nop
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b086      	sub	sp, #24
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d101      	bne.n	8008d24 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008d20:	2302      	movs	r3, #2
 8008d22:	e088      	b.n	8008e36 <HAL_TIM_IC_ConfigChannel+0x130>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d11b      	bne.n	8008d6a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008d42:	f000 fee7 	bl	8009b14 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	699a      	ldr	r2, [r3, #24]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f022 020c 	bic.w	r2, r2, #12
 8008d54:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6999      	ldr	r1, [r3, #24]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	689a      	ldr	r2, [r3, #8]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	430a      	orrs	r2, r1
 8008d66:	619a      	str	r2, [r3, #24]
 8008d68:	e060      	b.n	8008e2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d11c      	bne.n	8008daa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008d80:	f000 ff6b 	bl	8009c5a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699a      	ldr	r2, [r3, #24]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008d92:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6999      	ldr	r1, [r3, #24]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	021a      	lsls	r2, r3, #8
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	619a      	str	r2, [r3, #24]
 8008da8:	e040      	b.n	8008e2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	d11b      	bne.n	8008de8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008dc0:	f000 ffb8 	bl	8009d34 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	69da      	ldr	r2, [r3, #28]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 020c 	bic.w	r2, r2, #12
 8008dd2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	69d9      	ldr	r1, [r3, #28]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	689a      	ldr	r2, [r3, #8]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	61da      	str	r2, [r3, #28]
 8008de6:	e021      	b.n	8008e2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b0c      	cmp	r3, #12
 8008dec:	d11c      	bne.n	8008e28 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008dfe:	f000 ffd5 	bl	8009dac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	69da      	ldr	r2, [r3, #28]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008e10:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	69d9      	ldr	r1, [r3, #28]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	021a      	lsls	r2, r3, #8
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	61da      	str	r2, [r3, #28]
 8008e26:	e001      	b.n	8008e2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d101      	bne.n	8008e5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	e0ff      	b.n	800905e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b14      	cmp	r3, #20
 8008e6a:	f200 80f0 	bhi.w	800904e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e74:	08008ec9 	.word	0x08008ec9
 8008e78:	0800904f 	.word	0x0800904f
 8008e7c:	0800904f 	.word	0x0800904f
 8008e80:	0800904f 	.word	0x0800904f
 8008e84:	08008f09 	.word	0x08008f09
 8008e88:	0800904f 	.word	0x0800904f
 8008e8c:	0800904f 	.word	0x0800904f
 8008e90:	0800904f 	.word	0x0800904f
 8008e94:	08008f4b 	.word	0x08008f4b
 8008e98:	0800904f 	.word	0x0800904f
 8008e9c:	0800904f 	.word	0x0800904f
 8008ea0:	0800904f 	.word	0x0800904f
 8008ea4:	08008f8b 	.word	0x08008f8b
 8008ea8:	0800904f 	.word	0x0800904f
 8008eac:	0800904f 	.word	0x0800904f
 8008eb0:	0800904f 	.word	0x0800904f
 8008eb4:	08008fcd 	.word	0x08008fcd
 8008eb8:	0800904f 	.word	0x0800904f
 8008ebc:	0800904f 	.word	0x0800904f
 8008ec0:	0800904f 	.word	0x0800904f
 8008ec4:	0800900d 	.word	0x0800900d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68b9      	ldr	r1, [r7, #8]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 faf6 	bl	80094c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	699a      	ldr	r2, [r3, #24]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f042 0208 	orr.w	r2, r2, #8
 8008ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	699a      	ldr	r2, [r3, #24]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0204 	bic.w	r2, r2, #4
 8008ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6999      	ldr	r1, [r3, #24]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	691a      	ldr	r2, [r3, #16]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	430a      	orrs	r2, r1
 8008f04:	619a      	str	r2, [r3, #24]
      break;
 8008f06:	e0a5      	b.n	8009054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68b9      	ldr	r1, [r7, #8]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 fb70 	bl	80095f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	699a      	ldr	r2, [r3, #24]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	699a      	ldr	r2, [r3, #24]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6999      	ldr	r1, [r3, #24]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	021a      	lsls	r2, r3, #8
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	619a      	str	r2, [r3, #24]
      break;
 8008f48:	e084      	b.n	8009054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68b9      	ldr	r1, [r7, #8]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 fbe3 	bl	800971c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	69da      	ldr	r2, [r3, #28]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f042 0208 	orr.w	r2, r2, #8
 8008f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69da      	ldr	r2, [r3, #28]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f022 0204 	bic.w	r2, r2, #4
 8008f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69d9      	ldr	r1, [r3, #28]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	691a      	ldr	r2, [r3, #16]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	430a      	orrs	r2, r1
 8008f86:	61da      	str	r2, [r3, #28]
      break;
 8008f88:	e064      	b.n	8009054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 fc55 	bl	8009840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69da      	ldr	r2, [r3, #28]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	69da      	ldr	r2, [r3, #28]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69d9      	ldr	r1, [r3, #28]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	021a      	lsls	r2, r3, #8
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	61da      	str	r2, [r3, #28]
      break;
 8008fca:	e043      	b.n	8009054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68b9      	ldr	r1, [r7, #8]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 fcc8 	bl	8009968 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f042 0208 	orr.w	r2, r2, #8
 8008fe6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f022 0204 	bic.w	r2, r2, #4
 8008ff6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	691a      	ldr	r2, [r3, #16]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800900a:	e023      	b.n	8009054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68b9      	ldr	r1, [r7, #8]
 8009012:	4618      	mov	r0, r3
 8009014:	f000 fd12 	bl	8009a3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009026:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009036:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	021a      	lsls	r2, r3, #8
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800904c:	e002      	b.n	8009054 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	75fb      	strb	r3, [r7, #23]
      break;
 8009052:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800905c:	7dfb      	ldrb	r3, [r7, #23]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3718      	adds	r7, #24
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop

08009068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800907c:	2b01      	cmp	r3, #1
 800907e:	d101      	bne.n	8009084 <HAL_TIM_ConfigClockSource+0x1c>
 8009080:	2302      	movs	r3, #2
 8009082:	e0f6      	b.n	8009272 <HAL_TIM_ConfigClockSource+0x20a>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2202      	movs	r2, #2
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80090a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80090a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a6f      	ldr	r2, [pc, #444]	@ (800927c <HAL_TIM_ConfigClockSource+0x214>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	f000 80c1 	beq.w	8009246 <HAL_TIM_ConfigClockSource+0x1de>
 80090c4:	4a6d      	ldr	r2, [pc, #436]	@ (800927c <HAL_TIM_ConfigClockSource+0x214>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	f200 80c6 	bhi.w	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 80090cc:	4a6c      	ldr	r2, [pc, #432]	@ (8009280 <HAL_TIM_ConfigClockSource+0x218>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	f000 80b9 	beq.w	8009246 <HAL_TIM_ConfigClockSource+0x1de>
 80090d4:	4a6a      	ldr	r2, [pc, #424]	@ (8009280 <HAL_TIM_ConfigClockSource+0x218>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	f200 80be 	bhi.w	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 80090dc:	4a69      	ldr	r2, [pc, #420]	@ (8009284 <HAL_TIM_ConfigClockSource+0x21c>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	f000 80b1 	beq.w	8009246 <HAL_TIM_ConfigClockSource+0x1de>
 80090e4:	4a67      	ldr	r2, [pc, #412]	@ (8009284 <HAL_TIM_ConfigClockSource+0x21c>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	f200 80b6 	bhi.w	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 80090ec:	4a66      	ldr	r2, [pc, #408]	@ (8009288 <HAL_TIM_ConfigClockSource+0x220>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	f000 80a9 	beq.w	8009246 <HAL_TIM_ConfigClockSource+0x1de>
 80090f4:	4a64      	ldr	r2, [pc, #400]	@ (8009288 <HAL_TIM_ConfigClockSource+0x220>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	f200 80ae 	bhi.w	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 80090fc:	4a63      	ldr	r2, [pc, #396]	@ (800928c <HAL_TIM_ConfigClockSource+0x224>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	f000 80a1 	beq.w	8009246 <HAL_TIM_ConfigClockSource+0x1de>
 8009104:	4a61      	ldr	r2, [pc, #388]	@ (800928c <HAL_TIM_ConfigClockSource+0x224>)
 8009106:	4293      	cmp	r3, r2
 8009108:	f200 80a6 	bhi.w	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 800910c:	4a60      	ldr	r2, [pc, #384]	@ (8009290 <HAL_TIM_ConfigClockSource+0x228>)
 800910e:	4293      	cmp	r3, r2
 8009110:	f000 8099 	beq.w	8009246 <HAL_TIM_ConfigClockSource+0x1de>
 8009114:	4a5e      	ldr	r2, [pc, #376]	@ (8009290 <HAL_TIM_ConfigClockSource+0x228>)
 8009116:	4293      	cmp	r3, r2
 8009118:	f200 809e 	bhi.w	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 800911c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009120:	f000 8091 	beq.w	8009246 <HAL_TIM_ConfigClockSource+0x1de>
 8009124:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009128:	f200 8096 	bhi.w	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 800912c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009130:	f000 8089 	beq.w	8009246 <HAL_TIM_ConfigClockSource+0x1de>
 8009134:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009138:	f200 808e 	bhi.w	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 800913c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009140:	d03e      	beq.n	80091c0 <HAL_TIM_ConfigClockSource+0x158>
 8009142:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009146:	f200 8087 	bhi.w	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 800914a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800914e:	f000 8086 	beq.w	800925e <HAL_TIM_ConfigClockSource+0x1f6>
 8009152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009156:	d87f      	bhi.n	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 8009158:	2b70      	cmp	r3, #112	@ 0x70
 800915a:	d01a      	beq.n	8009192 <HAL_TIM_ConfigClockSource+0x12a>
 800915c:	2b70      	cmp	r3, #112	@ 0x70
 800915e:	d87b      	bhi.n	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 8009160:	2b60      	cmp	r3, #96	@ 0x60
 8009162:	d050      	beq.n	8009206 <HAL_TIM_ConfigClockSource+0x19e>
 8009164:	2b60      	cmp	r3, #96	@ 0x60
 8009166:	d877      	bhi.n	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 8009168:	2b50      	cmp	r3, #80	@ 0x50
 800916a:	d03c      	beq.n	80091e6 <HAL_TIM_ConfigClockSource+0x17e>
 800916c:	2b50      	cmp	r3, #80	@ 0x50
 800916e:	d873      	bhi.n	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 8009170:	2b40      	cmp	r3, #64	@ 0x40
 8009172:	d058      	beq.n	8009226 <HAL_TIM_ConfigClockSource+0x1be>
 8009174:	2b40      	cmp	r3, #64	@ 0x40
 8009176:	d86f      	bhi.n	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 8009178:	2b30      	cmp	r3, #48	@ 0x30
 800917a:	d064      	beq.n	8009246 <HAL_TIM_ConfigClockSource+0x1de>
 800917c:	2b30      	cmp	r3, #48	@ 0x30
 800917e:	d86b      	bhi.n	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 8009180:	2b20      	cmp	r3, #32
 8009182:	d060      	beq.n	8009246 <HAL_TIM_ConfigClockSource+0x1de>
 8009184:	2b20      	cmp	r3, #32
 8009186:	d867      	bhi.n	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
 8009188:	2b00      	cmp	r3, #0
 800918a:	d05c      	beq.n	8009246 <HAL_TIM_ConfigClockSource+0x1de>
 800918c:	2b10      	cmp	r3, #16
 800918e:	d05a      	beq.n	8009246 <HAL_TIM_ConfigClockSource+0x1de>
 8009190:	e062      	b.n	8009258 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091a2:	f000 fe5d 	bl	8009e60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80091b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	609a      	str	r2, [r3, #8]
      break;
 80091be:	e04f      	b.n	8009260 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091d0:	f000 fe46 	bl	8009e60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	689a      	ldr	r2, [r3, #8]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091e2:	609a      	str	r2, [r3, #8]
      break;
 80091e4:	e03c      	b.n	8009260 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091f2:	461a      	mov	r2, r3
 80091f4:	f000 fd02 	bl	8009bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2150      	movs	r1, #80	@ 0x50
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 fe11 	bl	8009e26 <TIM_ITRx_SetConfig>
      break;
 8009204:	e02c      	b.n	8009260 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009212:	461a      	mov	r2, r3
 8009214:	f000 fd5e 	bl	8009cd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2160      	movs	r1, #96	@ 0x60
 800921e:	4618      	mov	r0, r3
 8009220:	f000 fe01 	bl	8009e26 <TIM_ITRx_SetConfig>
      break;
 8009224:	e01c      	b.n	8009260 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009232:	461a      	mov	r2, r3
 8009234:	f000 fce2 	bl	8009bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2140      	movs	r1, #64	@ 0x40
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fdf1 	bl	8009e26 <TIM_ITRx_SetConfig>
      break;
 8009244:	e00c      	b.n	8009260 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4619      	mov	r1, r3
 8009250:	4610      	mov	r0, r2
 8009252:	f000 fde8 	bl	8009e26 <TIM_ITRx_SetConfig>
      break;
 8009256:	e003      	b.n	8009260 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	73fb      	strb	r3, [r7, #15]
      break;
 800925c:	e000      	b.n	8009260 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800925e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	00100070 	.word	0x00100070
 8009280:	00100060 	.word	0x00100060
 8009284:	00100050 	.word	0x00100050
 8009288:	00100040 	.word	0x00100040
 800928c:	00100030 	.word	0x00100030
 8009290:	00100020 	.word	0x00100020

08009294 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b0c      	cmp	r3, #12
 80092a6:	d831      	bhi.n	800930c <HAL_TIM_ReadCapturedValue+0x78>
 80092a8:	a201      	add	r2, pc, #4	@ (adr r2, 80092b0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80092aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ae:	bf00      	nop
 80092b0:	080092e5 	.word	0x080092e5
 80092b4:	0800930d 	.word	0x0800930d
 80092b8:	0800930d 	.word	0x0800930d
 80092bc:	0800930d 	.word	0x0800930d
 80092c0:	080092ef 	.word	0x080092ef
 80092c4:	0800930d 	.word	0x0800930d
 80092c8:	0800930d 	.word	0x0800930d
 80092cc:	0800930d 	.word	0x0800930d
 80092d0:	080092f9 	.word	0x080092f9
 80092d4:	0800930d 	.word	0x0800930d
 80092d8:	0800930d 	.word	0x0800930d
 80092dc:	0800930d 	.word	0x0800930d
 80092e0:	08009303 	.word	0x08009303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ea:	60fb      	str	r3, [r7, #12]

      break;
 80092ec:	e00f      	b.n	800930e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f4:	60fb      	str	r3, [r7, #12]

      break;
 80092f6:	e00a      	b.n	800930e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092fe:	60fb      	str	r3, [r7, #12]

      break;
 8009300:	e005      	b.n	800930e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009308:	60fb      	str	r3, [r7, #12]

      break;
 800930a:	e000      	b.n	800930e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800930c:	bf00      	nop
  }

  return tmpreg;
 800930e:	68fb      	ldr	r3, [r7, #12]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a4c      	ldr	r2, [pc, #304]	@ (800949c <TIM_Base_SetConfig+0x144>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d017      	beq.n	80093a0 <TIM_Base_SetConfig+0x48>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009376:	d013      	beq.n	80093a0 <TIM_Base_SetConfig+0x48>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a49      	ldr	r2, [pc, #292]	@ (80094a0 <TIM_Base_SetConfig+0x148>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d00f      	beq.n	80093a0 <TIM_Base_SetConfig+0x48>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a48      	ldr	r2, [pc, #288]	@ (80094a4 <TIM_Base_SetConfig+0x14c>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d00b      	beq.n	80093a0 <TIM_Base_SetConfig+0x48>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a47      	ldr	r2, [pc, #284]	@ (80094a8 <TIM_Base_SetConfig+0x150>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d007      	beq.n	80093a0 <TIM_Base_SetConfig+0x48>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a46      	ldr	r2, [pc, #280]	@ (80094ac <TIM_Base_SetConfig+0x154>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d003      	beq.n	80093a0 <TIM_Base_SetConfig+0x48>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a45      	ldr	r2, [pc, #276]	@ (80094b0 <TIM_Base_SetConfig+0x158>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d108      	bne.n	80093b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a39      	ldr	r2, [pc, #228]	@ (800949c <TIM_Base_SetConfig+0x144>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d023      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093c0:	d01f      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a36      	ldr	r2, [pc, #216]	@ (80094a0 <TIM_Base_SetConfig+0x148>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d01b      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a35      	ldr	r2, [pc, #212]	@ (80094a4 <TIM_Base_SetConfig+0x14c>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d017      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a34      	ldr	r2, [pc, #208]	@ (80094a8 <TIM_Base_SetConfig+0x150>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d013      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a33      	ldr	r2, [pc, #204]	@ (80094ac <TIM_Base_SetConfig+0x154>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d00f      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a33      	ldr	r2, [pc, #204]	@ (80094b4 <TIM_Base_SetConfig+0x15c>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d00b      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a32      	ldr	r2, [pc, #200]	@ (80094b8 <TIM_Base_SetConfig+0x160>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d007      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a31      	ldr	r2, [pc, #196]	@ (80094bc <TIM_Base_SetConfig+0x164>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d003      	beq.n	8009402 <TIM_Base_SetConfig+0xaa>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a2c      	ldr	r2, [pc, #176]	@ (80094b0 <TIM_Base_SetConfig+0x158>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d108      	bne.n	8009414 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	4313      	orrs	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	4313      	orrs	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	689a      	ldr	r2, [r3, #8]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a18      	ldr	r2, [pc, #96]	@ (800949c <TIM_Base_SetConfig+0x144>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d013      	beq.n	8009468 <TIM_Base_SetConfig+0x110>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a1a      	ldr	r2, [pc, #104]	@ (80094ac <TIM_Base_SetConfig+0x154>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00f      	beq.n	8009468 <TIM_Base_SetConfig+0x110>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a1a      	ldr	r2, [pc, #104]	@ (80094b4 <TIM_Base_SetConfig+0x15c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d00b      	beq.n	8009468 <TIM_Base_SetConfig+0x110>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a19      	ldr	r2, [pc, #100]	@ (80094b8 <TIM_Base_SetConfig+0x160>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d007      	beq.n	8009468 <TIM_Base_SetConfig+0x110>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a18      	ldr	r2, [pc, #96]	@ (80094bc <TIM_Base_SetConfig+0x164>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d003      	beq.n	8009468 <TIM_Base_SetConfig+0x110>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a13      	ldr	r2, [pc, #76]	@ (80094b0 <TIM_Base_SetConfig+0x158>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d103      	bne.n	8009470 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	691a      	ldr	r2, [r3, #16]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b01      	cmp	r3, #1
 8009480:	d105      	bne.n	800948e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f023 0201 	bic.w	r2, r3, #1
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	611a      	str	r2, [r3, #16]
  }
}
 800948e:	bf00      	nop
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	40012c00 	.word	0x40012c00
 80094a0:	40000400 	.word	0x40000400
 80094a4:	40000800 	.word	0x40000800
 80094a8:	40000c00 	.word	0x40000c00
 80094ac:	40013400 	.word	0x40013400
 80094b0:	40015000 	.word	0x40015000
 80094b4:	40014000 	.word	0x40014000
 80094b8:	40014400 	.word	0x40014400
 80094bc:	40014800 	.word	0x40014800

080094c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	f023 0201 	bic.w	r2, r3, #1
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f023 0303 	bic.w	r3, r3, #3
 80094fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f023 0302 	bic.w	r3, r3, #2
 800950c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	4313      	orrs	r3, r2
 8009516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a30      	ldr	r2, [pc, #192]	@ (80095dc <TIM_OC1_SetConfig+0x11c>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d013      	beq.n	8009548 <TIM_OC1_SetConfig+0x88>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a2f      	ldr	r2, [pc, #188]	@ (80095e0 <TIM_OC1_SetConfig+0x120>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00f      	beq.n	8009548 <TIM_OC1_SetConfig+0x88>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a2e      	ldr	r2, [pc, #184]	@ (80095e4 <TIM_OC1_SetConfig+0x124>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d00b      	beq.n	8009548 <TIM_OC1_SetConfig+0x88>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a2d      	ldr	r2, [pc, #180]	@ (80095e8 <TIM_OC1_SetConfig+0x128>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d007      	beq.n	8009548 <TIM_OC1_SetConfig+0x88>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a2c      	ldr	r2, [pc, #176]	@ (80095ec <TIM_OC1_SetConfig+0x12c>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d003      	beq.n	8009548 <TIM_OC1_SetConfig+0x88>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a2b      	ldr	r2, [pc, #172]	@ (80095f0 <TIM_OC1_SetConfig+0x130>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d10c      	bne.n	8009562 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f023 0308 	bic.w	r3, r3, #8
 800954e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	4313      	orrs	r3, r2
 8009558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f023 0304 	bic.w	r3, r3, #4
 8009560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a1d      	ldr	r2, [pc, #116]	@ (80095dc <TIM_OC1_SetConfig+0x11c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d013      	beq.n	8009592 <TIM_OC1_SetConfig+0xd2>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a1c      	ldr	r2, [pc, #112]	@ (80095e0 <TIM_OC1_SetConfig+0x120>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d00f      	beq.n	8009592 <TIM_OC1_SetConfig+0xd2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a1b      	ldr	r2, [pc, #108]	@ (80095e4 <TIM_OC1_SetConfig+0x124>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d00b      	beq.n	8009592 <TIM_OC1_SetConfig+0xd2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a1a      	ldr	r2, [pc, #104]	@ (80095e8 <TIM_OC1_SetConfig+0x128>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d007      	beq.n	8009592 <TIM_OC1_SetConfig+0xd2>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a19      	ldr	r2, [pc, #100]	@ (80095ec <TIM_OC1_SetConfig+0x12c>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d003      	beq.n	8009592 <TIM_OC1_SetConfig+0xd2>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a18      	ldr	r2, [pc, #96]	@ (80095f0 <TIM_OC1_SetConfig+0x130>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d111      	bne.n	80095b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	621a      	str	r2, [r3, #32]
}
 80095d0:	bf00      	nop
 80095d2:	371c      	adds	r7, #28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	40012c00 	.word	0x40012c00
 80095e0:	40013400 	.word	0x40013400
 80095e4:	40014000 	.word	0x40014000
 80095e8:	40014400 	.word	0x40014400
 80095ec:	40014800 	.word	0x40014800
 80095f0:	40015000 	.word	0x40015000

080095f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	f023 0210 	bic.w	r2, r3, #16
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800962e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	4313      	orrs	r3, r2
 800963a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f023 0320 	bic.w	r3, r3, #32
 8009642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a2c      	ldr	r2, [pc, #176]	@ (8009704 <TIM_OC2_SetConfig+0x110>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d007      	beq.n	8009668 <TIM_OC2_SetConfig+0x74>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a2b      	ldr	r2, [pc, #172]	@ (8009708 <TIM_OC2_SetConfig+0x114>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d003      	beq.n	8009668 <TIM_OC2_SetConfig+0x74>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a2a      	ldr	r2, [pc, #168]	@ (800970c <TIM_OC2_SetConfig+0x118>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d10d      	bne.n	8009684 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800966e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	011b      	lsls	r3, r3, #4
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	4313      	orrs	r3, r2
 800967a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009682:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a1f      	ldr	r2, [pc, #124]	@ (8009704 <TIM_OC2_SetConfig+0x110>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d013      	beq.n	80096b4 <TIM_OC2_SetConfig+0xc0>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a1e      	ldr	r2, [pc, #120]	@ (8009708 <TIM_OC2_SetConfig+0x114>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d00f      	beq.n	80096b4 <TIM_OC2_SetConfig+0xc0>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a1e      	ldr	r2, [pc, #120]	@ (8009710 <TIM_OC2_SetConfig+0x11c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d00b      	beq.n	80096b4 <TIM_OC2_SetConfig+0xc0>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a1d      	ldr	r2, [pc, #116]	@ (8009714 <TIM_OC2_SetConfig+0x120>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d007      	beq.n	80096b4 <TIM_OC2_SetConfig+0xc0>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009718 <TIM_OC2_SetConfig+0x124>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d003      	beq.n	80096b4 <TIM_OC2_SetConfig+0xc0>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a17      	ldr	r2, [pc, #92]	@ (800970c <TIM_OC2_SetConfig+0x118>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d113      	bne.n	80096dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80096c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	4313      	orrs	r3, r2
 80096da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	621a      	str	r2, [r3, #32]
}
 80096f6:	bf00      	nop
 80096f8:	371c      	adds	r7, #28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	40012c00 	.word	0x40012c00
 8009708:	40013400 	.word	0x40013400
 800970c:	40015000 	.word	0x40015000
 8009710:	40014000 	.word	0x40014000
 8009714:	40014400 	.word	0x40014400
 8009718:	40014800 	.word	0x40014800

0800971c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a1b      	ldr	r3, [r3, #32]
 8009730:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800974a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800974e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0303 	bic.w	r3, r3, #3
 8009756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	4313      	orrs	r3, r2
 8009760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	021b      	lsls	r3, r3, #8
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	4313      	orrs	r3, r2
 8009774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a2b      	ldr	r2, [pc, #172]	@ (8009828 <TIM_OC3_SetConfig+0x10c>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d007      	beq.n	800978e <TIM_OC3_SetConfig+0x72>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a2a      	ldr	r2, [pc, #168]	@ (800982c <TIM_OC3_SetConfig+0x110>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d003      	beq.n	800978e <TIM_OC3_SetConfig+0x72>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a29      	ldr	r2, [pc, #164]	@ (8009830 <TIM_OC3_SetConfig+0x114>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d10d      	bne.n	80097aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	021b      	lsls	r3, r3, #8
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	4313      	orrs	r3, r2
 80097a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80097a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a1e      	ldr	r2, [pc, #120]	@ (8009828 <TIM_OC3_SetConfig+0x10c>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d013      	beq.n	80097da <TIM_OC3_SetConfig+0xbe>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a1d      	ldr	r2, [pc, #116]	@ (800982c <TIM_OC3_SetConfig+0x110>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d00f      	beq.n	80097da <TIM_OC3_SetConfig+0xbe>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009834 <TIM_OC3_SetConfig+0x118>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d00b      	beq.n	80097da <TIM_OC3_SetConfig+0xbe>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009838 <TIM_OC3_SetConfig+0x11c>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d007      	beq.n	80097da <TIM_OC3_SetConfig+0xbe>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a1b      	ldr	r2, [pc, #108]	@ (800983c <TIM_OC3_SetConfig+0x120>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d003      	beq.n	80097da <TIM_OC3_SetConfig+0xbe>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a16      	ldr	r2, [pc, #88]	@ (8009830 <TIM_OC3_SetConfig+0x114>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d113      	bne.n	8009802 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	011b      	lsls	r3, r3, #4
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	011b      	lsls	r3, r3, #4
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	4313      	orrs	r3, r2
 8009800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	697a      	ldr	r2, [r7, #20]
 800981a:	621a      	str	r2, [r3, #32]
}
 800981c:	bf00      	nop
 800981e:	371c      	adds	r7, #28
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	40012c00 	.word	0x40012c00
 800982c:	40013400 	.word	0x40013400
 8009830:	40015000 	.word	0x40015000
 8009834:	40014000 	.word	0x40014000
 8009838:	40014400 	.word	0x40014400
 800983c:	40014800 	.word	0x40014800

08009840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	69db      	ldr	r3, [r3, #28]
 8009866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800986e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800987a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	021b      	lsls	r3, r3, #8
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4313      	orrs	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800988e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	031b      	lsls	r3, r3, #12
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	4313      	orrs	r3, r2
 800989a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a2c      	ldr	r2, [pc, #176]	@ (8009950 <TIM_OC4_SetConfig+0x110>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d007      	beq.n	80098b4 <TIM_OC4_SetConfig+0x74>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a2b      	ldr	r2, [pc, #172]	@ (8009954 <TIM_OC4_SetConfig+0x114>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d003      	beq.n	80098b4 <TIM_OC4_SetConfig+0x74>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009958 <TIM_OC4_SetConfig+0x118>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d10d      	bne.n	80098d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	031b      	lsls	r3, r3, #12
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80098ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a1f      	ldr	r2, [pc, #124]	@ (8009950 <TIM_OC4_SetConfig+0x110>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d013      	beq.n	8009900 <TIM_OC4_SetConfig+0xc0>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a1e      	ldr	r2, [pc, #120]	@ (8009954 <TIM_OC4_SetConfig+0x114>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d00f      	beq.n	8009900 <TIM_OC4_SetConfig+0xc0>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a1e      	ldr	r2, [pc, #120]	@ (800995c <TIM_OC4_SetConfig+0x11c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d00b      	beq.n	8009900 <TIM_OC4_SetConfig+0xc0>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a1d      	ldr	r2, [pc, #116]	@ (8009960 <TIM_OC4_SetConfig+0x120>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d007      	beq.n	8009900 <TIM_OC4_SetConfig+0xc0>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a1c      	ldr	r2, [pc, #112]	@ (8009964 <TIM_OC4_SetConfig+0x124>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d003      	beq.n	8009900 <TIM_OC4_SetConfig+0xc0>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a17      	ldr	r2, [pc, #92]	@ (8009958 <TIM_OC4_SetConfig+0x118>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d113      	bne.n	8009928 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009906:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800990e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	019b      	lsls	r3, r3, #6
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	4313      	orrs	r3, r2
 800991a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	019b      	lsls	r3, r3, #6
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4313      	orrs	r3, r2
 8009926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	621a      	str	r2, [r3, #32]
}
 8009942:	bf00      	nop
 8009944:	371c      	adds	r7, #28
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	40012c00 	.word	0x40012c00
 8009954:	40013400 	.word	0x40013400
 8009958:	40015000 	.word	0x40015000
 800995c:	40014000 	.word	0x40014000
 8009960:	40014400 	.word	0x40014400
 8009964:	40014800 	.word	0x40014800

08009968 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800998e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800999a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80099ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	041b      	lsls	r3, r3, #16
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a19      	ldr	r2, [pc, #100]	@ (8009a24 <TIM_OC5_SetConfig+0xbc>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d013      	beq.n	80099ea <TIM_OC5_SetConfig+0x82>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a18      	ldr	r2, [pc, #96]	@ (8009a28 <TIM_OC5_SetConfig+0xc0>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d00f      	beq.n	80099ea <TIM_OC5_SetConfig+0x82>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a17      	ldr	r2, [pc, #92]	@ (8009a2c <TIM_OC5_SetConfig+0xc4>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d00b      	beq.n	80099ea <TIM_OC5_SetConfig+0x82>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a16      	ldr	r2, [pc, #88]	@ (8009a30 <TIM_OC5_SetConfig+0xc8>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d007      	beq.n	80099ea <TIM_OC5_SetConfig+0x82>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a15      	ldr	r2, [pc, #84]	@ (8009a34 <TIM_OC5_SetConfig+0xcc>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d003      	beq.n	80099ea <TIM_OC5_SetConfig+0x82>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a14      	ldr	r2, [pc, #80]	@ (8009a38 <TIM_OC5_SetConfig+0xd0>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d109      	bne.n	80099fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	021b      	lsls	r3, r3, #8
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	697a      	ldr	r2, [r7, #20]
 8009a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	621a      	str	r2, [r3, #32]
}
 8009a18:	bf00      	nop
 8009a1a:	371c      	adds	r7, #28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	40012c00 	.word	0x40012c00
 8009a28:	40013400 	.word	0x40013400
 8009a2c:	40014000 	.word	0x40014000
 8009a30:	40014400 	.word	0x40014400
 8009a34:	40014800 	.word	0x40014800
 8009a38:	40015000 	.word	0x40015000

08009a3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	021b      	lsls	r3, r3, #8
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	051b      	lsls	r3, r3, #20
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a1a      	ldr	r2, [pc, #104]	@ (8009afc <TIM_OC6_SetConfig+0xc0>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d013      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x84>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a19      	ldr	r2, [pc, #100]	@ (8009b00 <TIM_OC6_SetConfig+0xc4>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d00f      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x84>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a18      	ldr	r2, [pc, #96]	@ (8009b04 <TIM_OC6_SetConfig+0xc8>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d00b      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x84>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a17      	ldr	r2, [pc, #92]	@ (8009b08 <TIM_OC6_SetConfig+0xcc>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d007      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x84>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a16      	ldr	r2, [pc, #88]	@ (8009b0c <TIM_OC6_SetConfig+0xd0>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d003      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x84>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a15      	ldr	r2, [pc, #84]	@ (8009b10 <TIM_OC6_SetConfig+0xd4>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d109      	bne.n	8009ad4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	029b      	lsls	r3, r3, #10
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	693a      	ldr	r2, [r7, #16]
 8009aec:	621a      	str	r2, [r3, #32]
}
 8009aee:	bf00      	nop
 8009af0:	371c      	adds	r7, #28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	40012c00 	.word	0x40012c00
 8009b00:	40013400 	.word	0x40013400
 8009b04:	40014000 	.word	0x40014000
 8009b08:	40014400 	.word	0x40014400
 8009b0c:	40014800 	.word	0x40014800
 8009b10:	40015000 	.word	0x40015000

08009b14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
 8009b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6a1b      	ldr	r3, [r3, #32]
 8009b2c:	f023 0201 	bic.w	r2, r3, #1
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	4a28      	ldr	r2, [pc, #160]	@ (8009be0 <TIM_TI1_SetConfig+0xcc>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d01b      	beq.n	8009b7a <TIM_TI1_SetConfig+0x66>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b48:	d017      	beq.n	8009b7a <TIM_TI1_SetConfig+0x66>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	4a25      	ldr	r2, [pc, #148]	@ (8009be4 <TIM_TI1_SetConfig+0xd0>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d013      	beq.n	8009b7a <TIM_TI1_SetConfig+0x66>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	4a24      	ldr	r2, [pc, #144]	@ (8009be8 <TIM_TI1_SetConfig+0xd4>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d00f      	beq.n	8009b7a <TIM_TI1_SetConfig+0x66>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	4a23      	ldr	r2, [pc, #140]	@ (8009bec <TIM_TI1_SetConfig+0xd8>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d00b      	beq.n	8009b7a <TIM_TI1_SetConfig+0x66>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4a22      	ldr	r2, [pc, #136]	@ (8009bf0 <TIM_TI1_SetConfig+0xdc>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d007      	beq.n	8009b7a <TIM_TI1_SetConfig+0x66>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	4a21      	ldr	r2, [pc, #132]	@ (8009bf4 <TIM_TI1_SetConfig+0xe0>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d003      	beq.n	8009b7a <TIM_TI1_SetConfig+0x66>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	4a20      	ldr	r2, [pc, #128]	@ (8009bf8 <TIM_TI1_SetConfig+0xe4>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d101      	bne.n	8009b7e <TIM_TI1_SetConfig+0x6a>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e000      	b.n	8009b80 <TIM_TI1_SetConfig+0x6c>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d008      	beq.n	8009b96 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f023 0303 	bic.w	r3, r3, #3
 8009b8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	617b      	str	r3, [r7, #20]
 8009b94:	e003      	b.n	8009b9e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f043 0301 	orr.w	r3, r3, #1
 8009b9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	011b      	lsls	r3, r3, #4
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	697a      	ldr	r2, [r7, #20]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f023 030a 	bic.w	r3, r3, #10
 8009bb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	f003 030a 	and.w	r3, r3, #10
 8009bc0:	693a      	ldr	r2, [r7, #16]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	621a      	str	r2, [r3, #32]
}
 8009bd2:	bf00      	nop
 8009bd4:	371c      	adds	r7, #28
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	40012c00 	.word	0x40012c00
 8009be4:	40000400 	.word	0x40000400
 8009be8:	40000800 	.word	0x40000800
 8009bec:	40000c00 	.word	0x40000c00
 8009bf0:	40013400 	.word	0x40013400
 8009bf4:	40014000 	.word	0x40014000
 8009bf8:	40015000 	.word	0x40015000

08009bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b087      	sub	sp, #28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6a1b      	ldr	r3, [r3, #32]
 8009c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	f023 0201 	bic.w	r2, r3, #1
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	011b      	lsls	r3, r3, #4
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f023 030a 	bic.w	r3, r3, #10
 8009c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	621a      	str	r2, [r3, #32]
}
 8009c4e:	bf00      	nop
 8009c50:	371c      	adds	r7, #28
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b087      	sub	sp, #28
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
 8009c66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	f023 0210 	bic.w	r2, r3, #16
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	021b      	lsls	r3, r3, #8
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	031b      	lsls	r3, r3, #12
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009cac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	011b      	lsls	r3, r3, #4
 8009cb2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009cb6:	697a      	ldr	r2, [r7, #20]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	693a      	ldr	r2, [r7, #16]
 8009cc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	621a      	str	r2, [r3, #32]
}
 8009cc8:	bf00      	nop
 8009cca:	371c      	adds	r7, #28
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b087      	sub	sp, #28
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	f023 0210 	bic.w	r2, r3, #16
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	031b      	lsls	r3, r3, #12
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009d10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	011b      	lsls	r3, r3, #4
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	621a      	str	r2, [r3, #32]
}
 8009d28:	bf00      	nop
 8009d2a:	371c      	adds	r7, #28
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b087      	sub	sp, #28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
 8009d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6a1b      	ldr	r3, [r3, #32]
 8009d46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6a1b      	ldr	r3, [r3, #32]
 8009d4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	69db      	ldr	r3, [r3, #28]
 8009d58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f023 0303 	bic.w	r3, r3, #3
 8009d60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d70:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	011b      	lsls	r3, r3, #4
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009d84:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	021b      	lsls	r3, r3, #8
 8009d8a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	621a      	str	r2, [r3, #32]
}
 8009da0:	bf00      	nop
 8009da2:	371c      	adds	r7, #28
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6a1b      	ldr	r3, [r3, #32]
 8009dc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	69db      	ldr	r3, [r3, #28]
 8009dd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dd8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	021b      	lsls	r3, r3, #8
 8009dde:	693a      	ldr	r2, [r7, #16]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009dea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	031b      	lsls	r3, r3, #12
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009dfe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	031b      	lsls	r3, r3, #12
 8009e04:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009e08:	697a      	ldr	r2, [r7, #20]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	621a      	str	r2, [r3, #32]
}
 8009e1a:	bf00      	nop
 8009e1c:	371c      	adds	r7, #28
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b085      	sub	sp, #20
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	f043 0307 	orr.w	r3, r3, #7
 8009e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	609a      	str	r2, [r3, #8]
}
 8009e54:	bf00      	nop
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	021a      	lsls	r2, r3, #8
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	431a      	orrs	r2, r3
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	609a      	str	r2, [r3, #8]
}
 8009e94:	bf00      	nop
 8009e96:	371c      	adds	r7, #28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	f003 031f 	and.w	r3, r3, #31
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6a1a      	ldr	r2, [r3, #32]
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	43db      	mvns	r3, r3
 8009ec2:	401a      	ands	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6a1a      	ldr	r2, [r3, #32]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f003 031f 	and.w	r3, r3, #31
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	621a      	str	r2, [r3, #32]
}
 8009ede:	bf00      	nop
 8009ee0:	371c      	adds	r7, #28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
	...

08009eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d101      	bne.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f00:	2302      	movs	r3, #2
 8009f02:	e074      	b.n	8009fee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a34      	ldr	r2, [pc, #208]	@ (8009ffc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d009      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a33      	ldr	r2, [pc, #204]	@ (800a000 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d004      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a31      	ldr	r2, [pc, #196]	@ (800a004 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d108      	bne.n	8009f54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009f48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a21      	ldr	r2, [pc, #132]	@ (8009ffc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d022      	beq.n	8009fc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f84:	d01d      	beq.n	8009fc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a1f      	ldr	r2, [pc, #124]	@ (800a008 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d018      	beq.n	8009fc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a1d      	ldr	r2, [pc, #116]	@ (800a00c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d013      	beq.n	8009fc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a1c      	ldr	r2, [pc, #112]	@ (800a010 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d00e      	beq.n	8009fc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a15      	ldr	r2, [pc, #84]	@ (800a000 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d009      	beq.n	8009fc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a18      	ldr	r2, [pc, #96]	@ (800a014 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d004      	beq.n	8009fc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a11      	ldr	r2, [pc, #68]	@ (800a004 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d10c      	bne.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	40012c00 	.word	0x40012c00
 800a000:	40013400 	.word	0x40013400
 800a004:	40015000 	.word	0x40015000
 800a008:	40000400 	.word	0x40000400
 800a00c:	40000800 	.word	0x40000800
 800a010:	40000c00 	.word	0x40000c00
 800a014:	40014000 	.word	0x40014000

0800a018 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a022:	2300      	movs	r3, #0
 800a024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d101      	bne.n	800a034 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a030:	2302      	movs	r3, #2
 800a032:	e078      	b.n	800a126 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	4313      	orrs	r3, r2
 800a048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	4313      	orrs	r3, r2
 800a056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	4313      	orrs	r3, r2
 800a064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4313      	orrs	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	4313      	orrs	r3, r2
 800a080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a09a:	4313      	orrs	r3, r2
 800a09c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	041b      	lsls	r3, r3, #16
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	69db      	ldr	r3, [r3, #28]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a1c      	ldr	r2, [pc, #112]	@ (800a134 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d009      	beq.n	800a0da <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a1b      	ldr	r2, [pc, #108]	@ (800a138 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d004      	beq.n	800a0da <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a19      	ldr	r2, [pc, #100]	@ (800a13c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d11c      	bne.n	800a114 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e4:	051b      	lsls	r3, r3, #20
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a102:	4313      	orrs	r3, r2
 800a104:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a110:	4313      	orrs	r3, r2
 800a112:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	40012c00 	.word	0x40012c00
 800a138:	40013400 	.word	0x40013400
 800a13c:	40015000 	.word	0x40015000

0800a140 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d101      	bne.n	800a1de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e042      	b.n	800a264 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d106      	bne.n	800a1f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7fa f967 	bl	80044c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2224      	movs	r2, #36	@ 0x24
 800a1fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f022 0201 	bic.w	r2, r2, #1
 800a20c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 ff60 	bl	800b0dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fc61 	bl	800aae4 <UART_SetConfig>
 800a222:	4603      	mov	r3, r0
 800a224:	2b01      	cmp	r3, #1
 800a226:	d101      	bne.n	800a22c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e01b      	b.n	800a264 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a23a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689a      	ldr	r2, [r3, #8]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a24a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f042 0201 	orr.w	r2, r2, #1
 800a25a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 ffdf 	bl	800b220 <UART_CheckIdleState>
 800a262:	4603      	mov	r3, r0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b08a      	sub	sp, #40	@ 0x28
 800a270:	af02      	add	r7, sp, #8
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	603b      	str	r3, [r7, #0]
 800a278:	4613      	mov	r3, r2
 800a27a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a282:	2b20      	cmp	r3, #32
 800a284:	d17b      	bne.n	800a37e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <HAL_UART_Transmit+0x26>
 800a28c:	88fb      	ldrh	r3, [r7, #6]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e074      	b.n	800a380 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2221      	movs	r2, #33	@ 0x21
 800a2a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2a6:	f7fa fab9 	bl	800481c <HAL_GetTick>
 800a2aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	88fa      	ldrh	r2, [r7, #6]
 800a2b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	88fa      	ldrh	r2, [r7, #6]
 800a2b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2c4:	d108      	bne.n	800a2d8 <HAL_UART_Transmit+0x6c>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d104      	bne.n	800a2d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	61bb      	str	r3, [r7, #24]
 800a2d6:	e003      	b.n	800a2e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a2e0:	e030      	b.n	800a344 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2180      	movs	r1, #128	@ 0x80
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f001 f841 	bl	800b374 <UART_WaitOnFlagUntilTimeout>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d005      	beq.n	800a304 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2220      	movs	r2, #32
 800a2fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a300:	2303      	movs	r3, #3
 800a302:	e03d      	b.n	800a380 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10b      	bne.n	800a322 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	881b      	ldrh	r3, [r3, #0]
 800a30e:	461a      	mov	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a318:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	3302      	adds	r3, #2
 800a31e:	61bb      	str	r3, [r7, #24]
 800a320:	e007      	b.n	800a332 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	781a      	ldrb	r2, [r3, #0]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	3301      	adds	r3, #1
 800a330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a338:	b29b      	uxth	r3, r3
 800a33a:	3b01      	subs	r3, #1
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1c8      	bne.n	800a2e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	2200      	movs	r2, #0
 800a358:	2140      	movs	r1, #64	@ 0x40
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f001 f80a 	bl	800b374 <UART_WaitOnFlagUntilTimeout>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d005      	beq.n	800a372 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2220      	movs	r2, #32
 800a36a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e006      	b.n	800a380 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2220      	movs	r2, #32
 800a376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	e000      	b.n	800a380 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a37e:	2302      	movs	r3, #2
  }
}
 800a380:	4618      	mov	r0, r3
 800a382:	3720      	adds	r7, #32
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08a      	sub	sp, #40	@ 0x28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	4613      	mov	r3, r2
 800a394:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a39c:	2b20      	cmp	r3, #32
 800a39e:	d137      	bne.n	800a410 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d002      	beq.n	800a3ac <HAL_UART_Receive_IT+0x24>
 800a3a6:	88fb      	ldrh	r3, [r7, #6]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e030      	b.n	800a412 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a18      	ldr	r2, [pc, #96]	@ (800a41c <HAL_UART_Receive_IT+0x94>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d01f      	beq.n	800a400 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d018      	beq.n	800a400 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	e853 3f00 	ldrex	r3, [r3]
 800a3da:	613b      	str	r3, [r7, #16]
   return(result);
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a3e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ec:	623b      	str	r3, [r7, #32]
 800a3ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f0:	69f9      	ldr	r1, [r7, #28]
 800a3f2:	6a3a      	ldr	r2, [r7, #32]
 800a3f4:	e841 2300 	strex	r3, r2, [r1]
 800a3f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1e6      	bne.n	800a3ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a400:	88fb      	ldrh	r3, [r7, #6]
 800a402:	461a      	mov	r2, r3
 800a404:	68b9      	ldr	r1, [r7, #8]
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f001 f822 	bl	800b450 <UART_Start_Receive_IT>
 800a40c:	4603      	mov	r3, r0
 800a40e:	e000      	b.n	800a412 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a410:	2302      	movs	r3, #2
  }
}
 800a412:	4618      	mov	r0, r3
 800a414:	3728      	adds	r7, #40	@ 0x28
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	40008000 	.word	0x40008000

0800a420 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b0ba      	sub	sp, #232	@ 0xe8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a446:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a44a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a44e:	4013      	ands	r3, r2
 800a450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d11b      	bne.n	800a494 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a460:	f003 0320 	and.w	r3, r3, #32
 800a464:	2b00      	cmp	r3, #0
 800a466:	d015      	beq.n	800a494 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a46c:	f003 0320 	and.w	r3, r3, #32
 800a470:	2b00      	cmp	r3, #0
 800a472:	d105      	bne.n	800a480 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d009      	beq.n	800a494 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 8300 	beq.w	800aa8a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	4798      	blx	r3
      }
      return;
 800a492:	e2fa      	b.n	800aa8a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 8123 	beq.w	800a6e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a49e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a4a2:	4b8d      	ldr	r3, [pc, #564]	@ (800a6d8 <HAL_UART_IRQHandler+0x2b8>)
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d106      	bne.n	800a4b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a4aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a4ae:	4b8b      	ldr	r3, [pc, #556]	@ (800a6dc <HAL_UART_IRQHandler+0x2bc>)
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 8116 	beq.w	800a6e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d011      	beq.n	800a4e8 <HAL_UART_IRQHandler+0xc8>
 800a4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00b      	beq.n	800a4e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4de:	f043 0201 	orr.w	r2, r3, #1
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ec:	f003 0302 	and.w	r3, r3, #2
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d011      	beq.n	800a518 <HAL_UART_IRQHandler+0xf8>
 800a4f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00b      	beq.n	800a518 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2202      	movs	r2, #2
 800a506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a50e:	f043 0204 	orr.w	r2, r3, #4
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a51c:	f003 0304 	and.w	r3, r3, #4
 800a520:	2b00      	cmp	r3, #0
 800a522:	d011      	beq.n	800a548 <HAL_UART_IRQHandler+0x128>
 800a524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00b      	beq.n	800a548 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2204      	movs	r2, #4
 800a536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a53e:	f043 0202 	orr.w	r2, r3, #2
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a54c:	f003 0308 	and.w	r3, r3, #8
 800a550:	2b00      	cmp	r3, #0
 800a552:	d017      	beq.n	800a584 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a558:	f003 0320 	and.w	r3, r3, #32
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d105      	bne.n	800a56c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a560:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a564:	4b5c      	ldr	r3, [pc, #368]	@ (800a6d8 <HAL_UART_IRQHandler+0x2b8>)
 800a566:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00b      	beq.n	800a584 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2208      	movs	r2, #8
 800a572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a57a:	f043 0208 	orr.w	r2, r3, #8
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d012      	beq.n	800a5b6 <HAL_UART_IRQHandler+0x196>
 800a590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a594:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00c      	beq.n	800a5b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a5a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5ac:	f043 0220 	orr.w	r2, r3, #32
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 8266 	beq.w	800aa8e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5c6:	f003 0320 	and.w	r3, r3, #32
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d013      	beq.n	800a5f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5d2:	f003 0320 	and.w	r3, r3, #32
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d105      	bne.n	800a5e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a5da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d007      	beq.n	800a5f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d003      	beq.n	800a5f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a60a:	2b40      	cmp	r3, #64	@ 0x40
 800a60c:	d005      	beq.n	800a61a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a60e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a612:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a616:	2b00      	cmp	r3, #0
 800a618:	d054      	beq.n	800a6c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f001 f83a 	bl	800b694 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a62a:	2b40      	cmp	r3, #64	@ 0x40
 800a62c:	d146      	bne.n	800a6bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	3308      	adds	r3, #8
 800a634:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a638:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a63c:	e853 3f00 	ldrex	r3, [r3]
 800a640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a644:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a64c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3308      	adds	r3, #8
 800a656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a65a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a65e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a66a:	e841 2300 	strex	r3, r2, [r1]
 800a66e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1d9      	bne.n	800a62e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a680:	2b00      	cmp	r3, #0
 800a682:	d017      	beq.n	800a6b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a68a:	4a15      	ldr	r2, [pc, #84]	@ (800a6e0 <HAL_UART_IRQHandler+0x2c0>)
 800a68c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a694:	4618      	mov	r0, r3
 800a696:	f7fa fbad 	bl	8004df4 <HAL_DMA_Abort_IT>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d019      	beq.n	800a6d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6b2:	e00f      	b.n	800a6d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f9ff 	bl	800aab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ba:	e00b      	b.n	800a6d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f9fb 	bl	800aab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c2:	e007      	b.n	800a6d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f9f7 	bl	800aab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a6d2:	e1dc      	b.n	800aa8e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d4:	bf00      	nop
    return;
 800a6d6:	e1da      	b.n	800aa8e <HAL_UART_IRQHandler+0x66e>
 800a6d8:	10000001 	.word	0x10000001
 800a6dc:	04000120 	.word	0x04000120
 800a6e0:	0800b761 	.word	0x0800b761

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	f040 8170 	bne.w	800a9ce <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6f2:	f003 0310 	and.w	r3, r3, #16
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 8169 	beq.w	800a9ce <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a700:	f003 0310 	and.w	r3, r3, #16
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 8162 	beq.w	800a9ce <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2210      	movs	r2, #16
 800a710:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a71c:	2b40      	cmp	r3, #64	@ 0x40
 800a71e:	f040 80d8 	bne.w	800a8d2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a730:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 80af 	beq.w	800a898 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a740:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a744:	429a      	cmp	r2, r3
 800a746:	f080 80a7 	bcs.w	800a898 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a750:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 0320 	and.w	r3, r3, #32
 800a762:	2b00      	cmp	r3, #0
 800a764:	f040 8087 	bne.w	800a876 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a770:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a774:	e853 3f00 	ldrex	r3, [r3]
 800a778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a77c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	461a      	mov	r2, r3
 800a78e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a792:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a796:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a79e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a7a2:	e841 2300 	strex	r3, r2, [r1]
 800a7a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a7aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1da      	bne.n	800a768 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3308      	adds	r3, #8
 800a7b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7bc:	e853 3f00 	ldrex	r3, [r3]
 800a7c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a7c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7c4:	f023 0301 	bic.w	r3, r3, #1
 800a7c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a7d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a7da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a7de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a7e2:	e841 2300 	strex	r3, r2, [r1]
 800a7e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a7e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1e1      	bne.n	800a7b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3308      	adds	r3, #8
 800a7f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7f8:	e853 3f00 	ldrex	r3, [r3]
 800a7fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a7fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a804:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	3308      	adds	r3, #8
 800a80e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a812:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a814:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a816:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a818:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a81a:	e841 2300 	strex	r3, r2, [r1]
 800a81e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1e3      	bne.n	800a7ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2220      	movs	r2, #32
 800a82a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a83c:	e853 3f00 	ldrex	r3, [r3]
 800a840:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a844:	f023 0310 	bic.w	r3, r3, #16
 800a848:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	461a      	mov	r2, r3
 800a852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a856:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a858:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a85c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e4      	bne.n	800a834 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a870:	4618      	mov	r0, r3
 800a872:	f7fa fa66 	bl	8004d42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2202      	movs	r2, #2
 800a87a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a888:	b29b      	uxth	r3, r3
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f91b 	bl	800aacc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a896:	e0fc      	b.n	800aa92 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a89e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	f040 80f5 	bne.w	800aa92 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0320 	and.w	r3, r3, #32
 800a8b6:	2b20      	cmp	r3, #32
 800a8b8:	f040 80eb 	bne.w	800aa92 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2202      	movs	r2, #2
 800a8c0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f8fe 	bl	800aacc <HAL_UARTEx_RxEventCallback>
      return;
 800a8d0:	e0df      	b.n	800aa92 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 80d1 	beq.w	800aa96 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a8f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 80cc 	beq.w	800aa96 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a906:	e853 3f00 	ldrex	r3, [r3]
 800a90a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a90c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a90e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a912:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a920:	647b      	str	r3, [r7, #68]	@ 0x44
 800a922:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a924:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a928:	e841 2300 	strex	r3, r2, [r1]
 800a92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1e4      	bne.n	800a8fe <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3308      	adds	r3, #8
 800a93a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93e:	e853 3f00 	ldrex	r3, [r3]
 800a942:	623b      	str	r3, [r7, #32]
   return(result);
 800a944:	6a3b      	ldr	r3, [r7, #32]
 800a946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a94a:	f023 0301 	bic.w	r3, r3, #1
 800a94e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	3308      	adds	r3, #8
 800a958:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a95c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a95e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a960:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a964:	e841 2300 	strex	r3, r2, [r1]
 800a968:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1e1      	bne.n	800a934 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2220      	movs	r2, #32
 800a974:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	e853 3f00 	ldrex	r3, [r3]
 800a990:	60fb      	str	r3, [r7, #12]
   return(result);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f023 0310 	bic.w	r3, r3, #16
 800a998:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a9a6:	61fb      	str	r3, [r7, #28]
 800a9a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9aa:	69b9      	ldr	r1, [r7, #24]
 800a9ac:	69fa      	ldr	r2, [r7, #28]
 800a9ae:	e841 2300 	strex	r3, r2, [r1]
 800a9b2:	617b      	str	r3, [r7, #20]
   return(result);
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1e4      	bne.n	800a984 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2202      	movs	r2, #2
 800a9be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a9c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f880 	bl	800aacc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a9cc:	e063      	b.n	800aa96 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a9ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00e      	beq.n	800a9f8 <HAL_UART_IRQHandler+0x5d8>
 800a9da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d008      	beq.n	800a9f8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a9ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f001 fc17 	bl	800c224 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9f6:	e051      	b.n	800aa9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d014      	beq.n	800aa2e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aa04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d105      	bne.n	800aa1c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aa10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d008      	beq.n	800aa2e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d03a      	beq.n	800aa9a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	4798      	blx	r3
    }
    return;
 800aa2c:	e035      	b.n	800aa9a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d009      	beq.n	800aa4e <HAL_UART_IRQHandler+0x62e>
 800aa3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 fea0 	bl	800b78c <UART_EndTransmit_IT>
    return;
 800aa4c:	e026      	b.n	800aa9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aa4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d009      	beq.n	800aa6e <HAL_UART_IRQHandler+0x64e>
 800aa5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa5e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d003      	beq.n	800aa6e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f001 fbf0 	bl	800c24c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa6c:	e016      	b.n	800aa9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aa6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d010      	beq.n	800aa9c <HAL_UART_IRQHandler+0x67c>
 800aa7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	da0c      	bge.n	800aa9c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f001 fbd8 	bl	800c238 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa88:	e008      	b.n	800aa9c <HAL_UART_IRQHandler+0x67c>
      return;
 800aa8a:	bf00      	nop
 800aa8c:	e006      	b.n	800aa9c <HAL_UART_IRQHandler+0x67c>
    return;
 800aa8e:	bf00      	nop
 800aa90:	e004      	b.n	800aa9c <HAL_UART_IRQHandler+0x67c>
      return;
 800aa92:	bf00      	nop
 800aa94:	e002      	b.n	800aa9c <HAL_UART_IRQHandler+0x67c>
      return;
 800aa96:	bf00      	nop
 800aa98:	e000      	b.n	800aa9c <HAL_UART_IRQHandler+0x67c>
    return;
 800aa9a:	bf00      	nop
  }
}
 800aa9c:	37e8      	adds	r7, #232	@ 0xe8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop

0800aaa4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aae8:	b08c      	sub	sp, #48	@ 0x30
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	689a      	ldr	r2, [r3, #8]
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	431a      	orrs	r2, r3
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	431a      	orrs	r2, r3
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	69db      	ldr	r3, [r3, #28]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	4baa      	ldr	r3, [pc, #680]	@ (800adbc <UART_SetConfig+0x2d8>)
 800ab14:	4013      	ands	r3, r2
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	6812      	ldr	r2, [r2, #0]
 800ab1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab1c:	430b      	orrs	r3, r1
 800ab1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	68da      	ldr	r2, [r3, #12]
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a9f      	ldr	r2, [pc, #636]	@ (800adc0 <UART_SetConfig+0x2dc>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d004      	beq.n	800ab50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ab5a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	6812      	ldr	r2, [r2, #0]
 800ab62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab64:	430b      	orrs	r3, r1
 800ab66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6e:	f023 010f 	bic.w	r1, r3, #15
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	430a      	orrs	r2, r1
 800ab7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a90      	ldr	r2, [pc, #576]	@ (800adc4 <UART_SetConfig+0x2e0>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d125      	bne.n	800abd4 <UART_SetConfig+0xf0>
 800ab88:	4b8f      	ldr	r3, [pc, #572]	@ (800adc8 <UART_SetConfig+0x2e4>)
 800ab8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab8e:	f003 0303 	and.w	r3, r3, #3
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d81a      	bhi.n	800abcc <UART_SetConfig+0xe8>
 800ab96:	a201      	add	r2, pc, #4	@ (adr r2, 800ab9c <UART_SetConfig+0xb8>)
 800ab98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9c:	0800abad 	.word	0x0800abad
 800aba0:	0800abbd 	.word	0x0800abbd
 800aba4:	0800abb5 	.word	0x0800abb5
 800aba8:	0800abc5 	.word	0x0800abc5
 800abac:	2301      	movs	r3, #1
 800abae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abb2:	e116      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800abb4:	2302      	movs	r3, #2
 800abb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abba:	e112      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800abbc:	2304      	movs	r3, #4
 800abbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abc2:	e10e      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800abc4:	2308      	movs	r3, #8
 800abc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abca:	e10a      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800abcc:	2310      	movs	r3, #16
 800abce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abd2:	e106      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a7c      	ldr	r2, [pc, #496]	@ (800adcc <UART_SetConfig+0x2e8>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d138      	bne.n	800ac50 <UART_SetConfig+0x16c>
 800abde:	4b7a      	ldr	r3, [pc, #488]	@ (800adc8 <UART_SetConfig+0x2e4>)
 800abe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abe4:	f003 030c 	and.w	r3, r3, #12
 800abe8:	2b0c      	cmp	r3, #12
 800abea:	d82d      	bhi.n	800ac48 <UART_SetConfig+0x164>
 800abec:	a201      	add	r2, pc, #4	@ (adr r2, 800abf4 <UART_SetConfig+0x110>)
 800abee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf2:	bf00      	nop
 800abf4:	0800ac29 	.word	0x0800ac29
 800abf8:	0800ac49 	.word	0x0800ac49
 800abfc:	0800ac49 	.word	0x0800ac49
 800ac00:	0800ac49 	.word	0x0800ac49
 800ac04:	0800ac39 	.word	0x0800ac39
 800ac08:	0800ac49 	.word	0x0800ac49
 800ac0c:	0800ac49 	.word	0x0800ac49
 800ac10:	0800ac49 	.word	0x0800ac49
 800ac14:	0800ac31 	.word	0x0800ac31
 800ac18:	0800ac49 	.word	0x0800ac49
 800ac1c:	0800ac49 	.word	0x0800ac49
 800ac20:	0800ac49 	.word	0x0800ac49
 800ac24:	0800ac41 	.word	0x0800ac41
 800ac28:	2300      	movs	r3, #0
 800ac2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac2e:	e0d8      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ac30:	2302      	movs	r3, #2
 800ac32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac36:	e0d4      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ac38:	2304      	movs	r3, #4
 800ac3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac3e:	e0d0      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ac40:	2308      	movs	r3, #8
 800ac42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac46:	e0cc      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ac48:	2310      	movs	r3, #16
 800ac4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac4e:	e0c8      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a5e      	ldr	r2, [pc, #376]	@ (800add0 <UART_SetConfig+0x2ec>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d125      	bne.n	800aca6 <UART_SetConfig+0x1c2>
 800ac5a:	4b5b      	ldr	r3, [pc, #364]	@ (800adc8 <UART_SetConfig+0x2e4>)
 800ac5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ac64:	2b30      	cmp	r3, #48	@ 0x30
 800ac66:	d016      	beq.n	800ac96 <UART_SetConfig+0x1b2>
 800ac68:	2b30      	cmp	r3, #48	@ 0x30
 800ac6a:	d818      	bhi.n	800ac9e <UART_SetConfig+0x1ba>
 800ac6c:	2b20      	cmp	r3, #32
 800ac6e:	d00a      	beq.n	800ac86 <UART_SetConfig+0x1a2>
 800ac70:	2b20      	cmp	r3, #32
 800ac72:	d814      	bhi.n	800ac9e <UART_SetConfig+0x1ba>
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <UART_SetConfig+0x19a>
 800ac78:	2b10      	cmp	r3, #16
 800ac7a:	d008      	beq.n	800ac8e <UART_SetConfig+0x1aa>
 800ac7c:	e00f      	b.n	800ac9e <UART_SetConfig+0x1ba>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac84:	e0ad      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ac86:	2302      	movs	r3, #2
 800ac88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac8c:	e0a9      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ac8e:	2304      	movs	r3, #4
 800ac90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac94:	e0a5      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ac96:	2308      	movs	r3, #8
 800ac98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac9c:	e0a1      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ac9e:	2310      	movs	r3, #16
 800aca0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aca4:	e09d      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a4a      	ldr	r2, [pc, #296]	@ (800add4 <UART_SetConfig+0x2f0>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d125      	bne.n	800acfc <UART_SetConfig+0x218>
 800acb0:	4b45      	ldr	r3, [pc, #276]	@ (800adc8 <UART_SetConfig+0x2e4>)
 800acb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800acba:	2bc0      	cmp	r3, #192	@ 0xc0
 800acbc:	d016      	beq.n	800acec <UART_SetConfig+0x208>
 800acbe:	2bc0      	cmp	r3, #192	@ 0xc0
 800acc0:	d818      	bhi.n	800acf4 <UART_SetConfig+0x210>
 800acc2:	2b80      	cmp	r3, #128	@ 0x80
 800acc4:	d00a      	beq.n	800acdc <UART_SetConfig+0x1f8>
 800acc6:	2b80      	cmp	r3, #128	@ 0x80
 800acc8:	d814      	bhi.n	800acf4 <UART_SetConfig+0x210>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <UART_SetConfig+0x1f0>
 800acce:	2b40      	cmp	r3, #64	@ 0x40
 800acd0:	d008      	beq.n	800ace4 <UART_SetConfig+0x200>
 800acd2:	e00f      	b.n	800acf4 <UART_SetConfig+0x210>
 800acd4:	2300      	movs	r3, #0
 800acd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acda:	e082      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800acdc:	2302      	movs	r3, #2
 800acde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ace2:	e07e      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ace4:	2304      	movs	r3, #4
 800ace6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acea:	e07a      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800acec:	2308      	movs	r3, #8
 800acee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acf2:	e076      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800acf4:	2310      	movs	r3, #16
 800acf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acfa:	e072      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a35      	ldr	r2, [pc, #212]	@ (800add8 <UART_SetConfig+0x2f4>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d12a      	bne.n	800ad5c <UART_SetConfig+0x278>
 800ad06:	4b30      	ldr	r3, [pc, #192]	@ (800adc8 <UART_SetConfig+0x2e4>)
 800ad08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad14:	d01a      	beq.n	800ad4c <UART_SetConfig+0x268>
 800ad16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad1a:	d81b      	bhi.n	800ad54 <UART_SetConfig+0x270>
 800ad1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad20:	d00c      	beq.n	800ad3c <UART_SetConfig+0x258>
 800ad22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad26:	d815      	bhi.n	800ad54 <UART_SetConfig+0x270>
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d003      	beq.n	800ad34 <UART_SetConfig+0x250>
 800ad2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad30:	d008      	beq.n	800ad44 <UART_SetConfig+0x260>
 800ad32:	e00f      	b.n	800ad54 <UART_SetConfig+0x270>
 800ad34:	2300      	movs	r3, #0
 800ad36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad3a:	e052      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad42:	e04e      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ad44:	2304      	movs	r3, #4
 800ad46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad4a:	e04a      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ad4c:	2308      	movs	r3, #8
 800ad4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad52:	e046      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ad54:	2310      	movs	r3, #16
 800ad56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad5a:	e042      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a17      	ldr	r2, [pc, #92]	@ (800adc0 <UART_SetConfig+0x2dc>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d13a      	bne.n	800addc <UART_SetConfig+0x2f8>
 800ad66:	4b18      	ldr	r3, [pc, #96]	@ (800adc8 <UART_SetConfig+0x2e4>)
 800ad68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ad70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad74:	d01a      	beq.n	800adac <UART_SetConfig+0x2c8>
 800ad76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad7a:	d81b      	bhi.n	800adb4 <UART_SetConfig+0x2d0>
 800ad7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad80:	d00c      	beq.n	800ad9c <UART_SetConfig+0x2b8>
 800ad82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad86:	d815      	bhi.n	800adb4 <UART_SetConfig+0x2d0>
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <UART_SetConfig+0x2b0>
 800ad8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad90:	d008      	beq.n	800ada4 <UART_SetConfig+0x2c0>
 800ad92:	e00f      	b.n	800adb4 <UART_SetConfig+0x2d0>
 800ad94:	2300      	movs	r3, #0
 800ad96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad9a:	e022      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ad9c:	2302      	movs	r3, #2
 800ad9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ada2:	e01e      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800ada4:	2304      	movs	r3, #4
 800ada6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adaa:	e01a      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800adac:	2308      	movs	r3, #8
 800adae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adb2:	e016      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800adb4:	2310      	movs	r3, #16
 800adb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adba:	e012      	b.n	800ade2 <UART_SetConfig+0x2fe>
 800adbc:	cfff69f3 	.word	0xcfff69f3
 800adc0:	40008000 	.word	0x40008000
 800adc4:	40013800 	.word	0x40013800
 800adc8:	40021000 	.word	0x40021000
 800adcc:	40004400 	.word	0x40004400
 800add0:	40004800 	.word	0x40004800
 800add4:	40004c00 	.word	0x40004c00
 800add8:	40005000 	.word	0x40005000
 800addc:	2310      	movs	r3, #16
 800adde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4aae      	ldr	r2, [pc, #696]	@ (800b0a0 <UART_SetConfig+0x5bc>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	f040 8097 	bne.w	800af1c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800adee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800adf2:	2b08      	cmp	r3, #8
 800adf4:	d823      	bhi.n	800ae3e <UART_SetConfig+0x35a>
 800adf6:	a201      	add	r2, pc, #4	@ (adr r2, 800adfc <UART_SetConfig+0x318>)
 800adf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfc:	0800ae21 	.word	0x0800ae21
 800ae00:	0800ae3f 	.word	0x0800ae3f
 800ae04:	0800ae29 	.word	0x0800ae29
 800ae08:	0800ae3f 	.word	0x0800ae3f
 800ae0c:	0800ae2f 	.word	0x0800ae2f
 800ae10:	0800ae3f 	.word	0x0800ae3f
 800ae14:	0800ae3f 	.word	0x0800ae3f
 800ae18:	0800ae3f 	.word	0x0800ae3f
 800ae1c:	0800ae37 	.word	0x0800ae37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae20:	f7fc ff76 	bl	8007d10 <HAL_RCC_GetPCLK1Freq>
 800ae24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae26:	e010      	b.n	800ae4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae28:	4b9e      	ldr	r3, [pc, #632]	@ (800b0a4 <UART_SetConfig+0x5c0>)
 800ae2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae2c:	e00d      	b.n	800ae4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae2e:	f7fc ff01 	bl	8007c34 <HAL_RCC_GetSysClockFreq>
 800ae32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae34:	e009      	b.n	800ae4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae3c:	e005      	b.n	800ae4a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f000 8130 	beq.w	800b0b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae56:	4a94      	ldr	r2, [pc, #592]	@ (800b0a8 <UART_SetConfig+0x5c4>)
 800ae58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae60:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae64:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	4413      	add	r3, r2
 800ae70:	69ba      	ldr	r2, [r7, #24]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d305      	bcc.n	800ae82 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae7c:	69ba      	ldr	r2, [r7, #24]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d903      	bls.n	800ae8a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae88:	e113      	b.n	800b0b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	60bb      	str	r3, [r7, #8]
 800ae90:	60fa      	str	r2, [r7, #12]
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae96:	4a84      	ldr	r2, [pc, #528]	@ (800b0a8 <UART_SetConfig+0x5c4>)
 800ae98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	2200      	movs	r2, #0
 800aea0:	603b      	str	r3, [r7, #0]
 800aea2:	607a      	str	r2, [r7, #4]
 800aea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aea8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aeac:	f7f6 f822 	bl	8000ef4 <__aeabi_uldivmod>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	f04f 0200 	mov.w	r2, #0
 800aebc:	f04f 0300 	mov.w	r3, #0
 800aec0:	020b      	lsls	r3, r1, #8
 800aec2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aec6:	0202      	lsls	r2, r0, #8
 800aec8:	6979      	ldr	r1, [r7, #20]
 800aeca:	6849      	ldr	r1, [r1, #4]
 800aecc:	0849      	lsrs	r1, r1, #1
 800aece:	2000      	movs	r0, #0
 800aed0:	460c      	mov	r4, r1
 800aed2:	4605      	mov	r5, r0
 800aed4:	eb12 0804 	adds.w	r8, r2, r4
 800aed8:	eb43 0905 	adc.w	r9, r3, r5
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	469a      	mov	sl, r3
 800aee4:	4693      	mov	fp, r2
 800aee6:	4652      	mov	r2, sl
 800aee8:	465b      	mov	r3, fp
 800aeea:	4640      	mov	r0, r8
 800aeec:	4649      	mov	r1, r9
 800aeee:	f7f6 f801 	bl	8000ef4 <__aeabi_uldivmod>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	4613      	mov	r3, r2
 800aef8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aefa:	6a3b      	ldr	r3, [r7, #32]
 800aefc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af00:	d308      	bcc.n	800af14 <UART_SetConfig+0x430>
 800af02:	6a3b      	ldr	r3, [r7, #32]
 800af04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af08:	d204      	bcs.n	800af14 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	6a3a      	ldr	r2, [r7, #32]
 800af10:	60da      	str	r2, [r3, #12]
 800af12:	e0ce      	b.n	800b0b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800af1a:	e0ca      	b.n	800b0b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	69db      	ldr	r3, [r3, #28]
 800af20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af24:	d166      	bne.n	800aff4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800af26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af2a:	2b08      	cmp	r3, #8
 800af2c:	d827      	bhi.n	800af7e <UART_SetConfig+0x49a>
 800af2e:	a201      	add	r2, pc, #4	@ (adr r2, 800af34 <UART_SetConfig+0x450>)
 800af30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af34:	0800af59 	.word	0x0800af59
 800af38:	0800af61 	.word	0x0800af61
 800af3c:	0800af69 	.word	0x0800af69
 800af40:	0800af7f 	.word	0x0800af7f
 800af44:	0800af6f 	.word	0x0800af6f
 800af48:	0800af7f 	.word	0x0800af7f
 800af4c:	0800af7f 	.word	0x0800af7f
 800af50:	0800af7f 	.word	0x0800af7f
 800af54:	0800af77 	.word	0x0800af77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af58:	f7fc feda 	bl	8007d10 <HAL_RCC_GetPCLK1Freq>
 800af5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af5e:	e014      	b.n	800af8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af60:	f7fc feec 	bl	8007d3c <HAL_RCC_GetPCLK2Freq>
 800af64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af66:	e010      	b.n	800af8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af68:	4b4e      	ldr	r3, [pc, #312]	@ (800b0a4 <UART_SetConfig+0x5c0>)
 800af6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af6c:	e00d      	b.n	800af8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af6e:	f7fc fe61 	bl	8007c34 <HAL_RCC_GetSysClockFreq>
 800af72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af74:	e009      	b.n	800af8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af7c:	e005      	b.n	800af8a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800af7e:	2300      	movs	r3, #0
 800af80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800af88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 8090 	beq.w	800b0b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af96:	4a44      	ldr	r2, [pc, #272]	@ (800b0a8 <UART_SetConfig+0x5c4>)
 800af98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af9c:	461a      	mov	r2, r3
 800af9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa0:	fbb3 f3f2 	udiv	r3, r3, r2
 800afa4:	005a      	lsls	r2, r3, #1
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	085b      	lsrs	r3, r3, #1
 800afac:	441a      	add	r2, r3
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afb8:	6a3b      	ldr	r3, [r7, #32]
 800afba:	2b0f      	cmp	r3, #15
 800afbc:	d916      	bls.n	800afec <UART_SetConfig+0x508>
 800afbe:	6a3b      	ldr	r3, [r7, #32]
 800afc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afc4:	d212      	bcs.n	800afec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afc6:	6a3b      	ldr	r3, [r7, #32]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	f023 030f 	bic.w	r3, r3, #15
 800afce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afd0:	6a3b      	ldr	r3, [r7, #32]
 800afd2:	085b      	lsrs	r3, r3, #1
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	f003 0307 	and.w	r3, r3, #7
 800afda:	b29a      	uxth	r2, r3
 800afdc:	8bfb      	ldrh	r3, [r7, #30]
 800afde:	4313      	orrs	r3, r2
 800afe0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	8bfa      	ldrh	r2, [r7, #30]
 800afe8:	60da      	str	r2, [r3, #12]
 800afea:	e062      	b.n	800b0b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aff2:	e05e      	b.n	800b0b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aff4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aff8:	2b08      	cmp	r3, #8
 800affa:	d828      	bhi.n	800b04e <UART_SetConfig+0x56a>
 800affc:	a201      	add	r2, pc, #4	@ (adr r2, 800b004 <UART_SetConfig+0x520>)
 800affe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b002:	bf00      	nop
 800b004:	0800b029 	.word	0x0800b029
 800b008:	0800b031 	.word	0x0800b031
 800b00c:	0800b039 	.word	0x0800b039
 800b010:	0800b04f 	.word	0x0800b04f
 800b014:	0800b03f 	.word	0x0800b03f
 800b018:	0800b04f 	.word	0x0800b04f
 800b01c:	0800b04f 	.word	0x0800b04f
 800b020:	0800b04f 	.word	0x0800b04f
 800b024:	0800b047 	.word	0x0800b047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b028:	f7fc fe72 	bl	8007d10 <HAL_RCC_GetPCLK1Freq>
 800b02c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b02e:	e014      	b.n	800b05a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b030:	f7fc fe84 	bl	8007d3c <HAL_RCC_GetPCLK2Freq>
 800b034:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b036:	e010      	b.n	800b05a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b038:	4b1a      	ldr	r3, [pc, #104]	@ (800b0a4 <UART_SetConfig+0x5c0>)
 800b03a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b03c:	e00d      	b.n	800b05a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b03e:	f7fc fdf9 	bl	8007c34 <HAL_RCC_GetSysClockFreq>
 800b042:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b044:	e009      	b.n	800b05a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b04a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b04c:	e005      	b.n	800b05a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b04e:	2300      	movs	r3, #0
 800b050:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b058:	bf00      	nop
    }

    if (pclk != 0U)
 800b05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d028      	beq.n	800b0b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b064:	4a10      	ldr	r2, [pc, #64]	@ (800b0a8 <UART_SetConfig+0x5c4>)
 800b066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b06a:	461a      	mov	r2, r3
 800b06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	085b      	lsrs	r3, r3, #1
 800b078:	441a      	add	r2, r3
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b082:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b084:	6a3b      	ldr	r3, [r7, #32]
 800b086:	2b0f      	cmp	r3, #15
 800b088:	d910      	bls.n	800b0ac <UART_SetConfig+0x5c8>
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b090:	d20c      	bcs.n	800b0ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b092:	6a3b      	ldr	r3, [r7, #32]
 800b094:	b29a      	uxth	r2, r3
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	60da      	str	r2, [r3, #12]
 800b09c:	e009      	b.n	800b0b2 <UART_SetConfig+0x5ce>
 800b09e:	bf00      	nop
 800b0a0:	40008000 	.word	0x40008000
 800b0a4:	00f42400 	.word	0x00f42400
 800b0a8:	0800f82c 	.word	0x0800f82c
      }
      else
      {
        ret = HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b0ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3730      	adds	r7, #48	@ 0x30
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b0dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0e8:	f003 0308 	and.w	r3, r3, #8
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00a      	beq.n	800b106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	430a      	orrs	r2, r1
 800b104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b10a:	f003 0301 	and.w	r3, r3, #1
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00a      	beq.n	800b128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	430a      	orrs	r2, r1
 800b126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b12c:	f003 0302 	and.w	r3, r3, #2
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00a      	beq.n	800b14a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	430a      	orrs	r2, r1
 800b148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b14e:	f003 0304 	and.w	r3, r3, #4
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00a      	beq.n	800b16c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	430a      	orrs	r2, r1
 800b16a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b170:	f003 0310 	and.w	r3, r3, #16
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00a      	beq.n	800b18e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	430a      	orrs	r2, r1
 800b18c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b192:	f003 0320 	and.w	r3, r3, #32
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00a      	beq.n	800b1b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	430a      	orrs	r2, r1
 800b1ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d01a      	beq.n	800b1f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	430a      	orrs	r2, r1
 800b1d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1da:	d10a      	bne.n	800b1f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	430a      	orrs	r2, r1
 800b1f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00a      	beq.n	800b214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	430a      	orrs	r2, r1
 800b212:	605a      	str	r2, [r3, #4]
  }
}
 800b214:	bf00      	nop
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b098      	sub	sp, #96	@ 0x60
 800b224:	af02      	add	r7, sp, #8
 800b226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b230:	f7f9 faf4 	bl	800481c <HAL_GetTick>
 800b234:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 0308 	and.w	r3, r3, #8
 800b240:	2b08      	cmp	r3, #8
 800b242:	d12f      	bne.n	800b2a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b244:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b24c:	2200      	movs	r2, #0
 800b24e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f88e 	bl	800b374 <UART_WaitOnFlagUntilTimeout>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d022      	beq.n	800b2a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b266:	e853 3f00 	ldrex	r3, [r3]
 800b26a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b26c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b26e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b272:	653b      	str	r3, [r7, #80]	@ 0x50
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	461a      	mov	r2, r3
 800b27a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b27c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b27e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b280:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b282:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b284:	e841 2300 	strex	r3, r2, [r1]
 800b288:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1e6      	bne.n	800b25e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2220      	movs	r2, #32
 800b294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	e063      	b.n	800b36c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 0304 	and.w	r3, r3, #4
 800b2ae:	2b04      	cmp	r3, #4
 800b2b0:	d149      	bne.n	800b346 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f857 	bl	800b374 <UART_WaitOnFlagUntilTimeout>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d03c      	beq.n	800b346 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d4:	e853 3f00 	ldrex	r3, [r3]
 800b2d8:	623b      	str	r3, [r7, #32]
   return(result);
 800b2da:	6a3b      	ldr	r3, [r7, #32]
 800b2dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2f2:	e841 2300 	strex	r3, r2, [r1]
 800b2f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1e6      	bne.n	800b2cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3308      	adds	r3, #8
 800b304:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	e853 3f00 	ldrex	r3, [r3]
 800b30c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f023 0301 	bic.w	r3, r3, #1
 800b314:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	3308      	adds	r3, #8
 800b31c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b31e:	61fa      	str	r2, [r7, #28]
 800b320:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b322:	69b9      	ldr	r1, [r7, #24]
 800b324:	69fa      	ldr	r2, [r7, #28]
 800b326:	e841 2300 	strex	r3, r2, [r1]
 800b32a:	617b      	str	r3, [r7, #20]
   return(result);
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1e5      	bne.n	800b2fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2220      	movs	r2, #32
 800b336:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b342:	2303      	movs	r3, #3
 800b344:	e012      	b.n	800b36c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2220      	movs	r2, #32
 800b34a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2220      	movs	r2, #32
 800b352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3758      	adds	r7, #88	@ 0x58
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	603b      	str	r3, [r7, #0]
 800b380:	4613      	mov	r3, r2
 800b382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b384:	e04f      	b.n	800b426 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b38c:	d04b      	beq.n	800b426 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b38e:	f7f9 fa45 	bl	800481c <HAL_GetTick>
 800b392:	4602      	mov	r2, r0
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	1ad3      	subs	r3, r2, r3
 800b398:	69ba      	ldr	r2, [r7, #24]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d302      	bcc.n	800b3a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e04e      	b.n	800b446 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 0304 	and.w	r3, r3, #4
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d037      	beq.n	800b426 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	2b80      	cmp	r3, #128	@ 0x80
 800b3ba:	d034      	beq.n	800b426 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2b40      	cmp	r3, #64	@ 0x40
 800b3c0:	d031      	beq.n	800b426 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	69db      	ldr	r3, [r3, #28]
 800b3c8:	f003 0308 	and.w	r3, r3, #8
 800b3cc:	2b08      	cmp	r3, #8
 800b3ce:	d110      	bne.n	800b3f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2208      	movs	r2, #8
 800b3d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	f000 f95b 	bl	800b694 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2208      	movs	r2, #8
 800b3e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e029      	b.n	800b446 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	69db      	ldr	r3, [r3, #28]
 800b3f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b3fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b400:	d111      	bne.n	800b426 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b40a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	f000 f941 	bl	800b694 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2220      	movs	r2, #32
 800b416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b422:	2303      	movs	r3, #3
 800b424:	e00f      	b.n	800b446 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	69da      	ldr	r2, [r3, #28]
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	4013      	ands	r3, r2
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	429a      	cmp	r2, r3
 800b434:	bf0c      	ite	eq
 800b436:	2301      	moveq	r3, #1
 800b438:	2300      	movne	r3, #0
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	461a      	mov	r2, r3
 800b43e:	79fb      	ldrb	r3, [r7, #7]
 800b440:	429a      	cmp	r2, r3
 800b442:	d0a0      	beq.n	800b386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b450:	b480      	push	{r7}
 800b452:	b0a3      	sub	sp, #140	@ 0x8c
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	4613      	mov	r3, r2
 800b45c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	88fa      	ldrh	r2, [r7, #6]
 800b468:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	88fa      	ldrh	r2, [r7, #6]
 800b470:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b482:	d10e      	bne.n	800b4a2 <UART_Start_Receive_IT+0x52>
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d105      	bne.n	800b498 <UART_Start_Receive_IT+0x48>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b492:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b496:	e02d      	b.n	800b4f4 <UART_Start_Receive_IT+0xa4>
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	22ff      	movs	r2, #255	@ 0xff
 800b49c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b4a0:	e028      	b.n	800b4f4 <UART_Start_Receive_IT+0xa4>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10d      	bne.n	800b4c6 <UART_Start_Receive_IT+0x76>
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d104      	bne.n	800b4bc <UART_Start_Receive_IT+0x6c>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	22ff      	movs	r2, #255	@ 0xff
 800b4b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b4ba:	e01b      	b.n	800b4f4 <UART_Start_Receive_IT+0xa4>
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	227f      	movs	r2, #127	@ 0x7f
 800b4c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b4c4:	e016      	b.n	800b4f4 <UART_Start_Receive_IT+0xa4>
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4ce:	d10d      	bne.n	800b4ec <UART_Start_Receive_IT+0x9c>
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d104      	bne.n	800b4e2 <UART_Start_Receive_IT+0x92>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	227f      	movs	r2, #127	@ 0x7f
 800b4dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b4e0:	e008      	b.n	800b4f4 <UART_Start_Receive_IT+0xa4>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	223f      	movs	r2, #63	@ 0x3f
 800b4e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b4ea:	e003      	b.n	800b4f4 <UART_Start_Receive_IT+0xa4>
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2222      	movs	r2, #34	@ 0x22
 800b500:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3308      	adds	r3, #8
 800b50a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b50e:	e853 3f00 	ldrex	r3, [r3]
 800b512:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b514:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b516:	f043 0301 	orr.w	r3, r3, #1
 800b51a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	3308      	adds	r3, #8
 800b524:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b528:	673a      	str	r2, [r7, #112]	@ 0x70
 800b52a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b52e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b530:	e841 2300 	strex	r3, r2, [r1]
 800b534:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b536:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1e3      	bne.n	800b504 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b544:	d14f      	bne.n	800b5e6 <UART_Start_Receive_IT+0x196>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b54c:	88fa      	ldrh	r2, [r7, #6]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d349      	bcc.n	800b5e6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b55a:	d107      	bne.n	800b56c <UART_Start_Receive_IT+0x11c>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d103      	bne.n	800b56c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	4a47      	ldr	r2, [pc, #284]	@ (800b684 <UART_Start_Receive_IT+0x234>)
 800b568:	675a      	str	r2, [r3, #116]	@ 0x74
 800b56a:	e002      	b.n	800b572 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	4a46      	ldr	r2, [pc, #280]	@ (800b688 <UART_Start_Receive_IT+0x238>)
 800b570:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d01a      	beq.n	800b5b0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b582:	e853 3f00 	ldrex	r3, [r3]
 800b586:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b58a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b58e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b59c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b59e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b5a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b5a4:	e841 2300 	strex	r3, r2, [r1]
 800b5a8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b5aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1e4      	bne.n	800b57a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	3308      	adds	r3, #8
 800b5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ba:	e853 3f00 	ldrex	r3, [r3]
 800b5be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b5c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b5d0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b5d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b5d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5d8:	e841 2300 	strex	r3, r2, [r1]
 800b5dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b5de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1e5      	bne.n	800b5b0 <UART_Start_Receive_IT+0x160>
 800b5e4:	e046      	b.n	800b674 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5ee:	d107      	bne.n	800b600 <UART_Start_Receive_IT+0x1b0>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d103      	bne.n	800b600 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	4a24      	ldr	r2, [pc, #144]	@ (800b68c <UART_Start_Receive_IT+0x23c>)
 800b5fc:	675a      	str	r2, [r3, #116]	@ 0x74
 800b5fe:	e002      	b.n	800b606 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	4a23      	ldr	r2, [pc, #140]	@ (800b690 <UART_Start_Receive_IT+0x240>)
 800b604:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d019      	beq.n	800b642 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b616:	e853 3f00 	ldrex	r3, [r3]
 800b61a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b622:	677b      	str	r3, [r7, #116]	@ 0x74
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	461a      	mov	r2, r3
 800b62a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b62c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b62e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b630:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b632:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b634:	e841 2300 	strex	r3, r2, [r1]
 800b638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1e6      	bne.n	800b60e <UART_Start_Receive_IT+0x1be>
 800b640:	e018      	b.n	800b674 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	e853 3f00 	ldrex	r3, [r3]
 800b64e:	613b      	str	r3, [r7, #16]
   return(result);
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	f043 0320 	orr.w	r3, r3, #32
 800b656:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	461a      	mov	r2, r3
 800b65e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b660:	623b      	str	r3, [r7, #32]
 800b662:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b664:	69f9      	ldr	r1, [r7, #28]
 800b666:	6a3a      	ldr	r2, [r7, #32]
 800b668:	e841 2300 	strex	r3, r2, [r1]
 800b66c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1e6      	bne.n	800b642 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	378c      	adds	r7, #140	@ 0x8c
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	0800beb9 	.word	0x0800beb9
 800b688:	0800bb55 	.word	0x0800bb55
 800b68c:	0800b99d 	.word	0x0800b99d
 800b690:	0800b7e5 	.word	0x0800b7e5

0800b694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b694:	b480      	push	{r7}
 800b696:	b095      	sub	sp, #84	@ 0x54
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6a4:	e853 3f00 	ldrex	r3, [r3]
 800b6a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b6c2:	e841 2300 	strex	r3, r2, [r1]
 800b6c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1e6      	bne.n	800b69c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	3308      	adds	r3, #8
 800b6d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	e853 3f00 	ldrex	r3, [r3]
 800b6dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6e4:	f023 0301 	bic.w	r3, r3, #1
 800b6e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	3308      	adds	r3, #8
 800b6f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b6f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6fa:	e841 2300 	strex	r3, r2, [r1]
 800b6fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1e3      	bne.n	800b6ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d118      	bne.n	800b740 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	e853 3f00 	ldrex	r3, [r3]
 800b71a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f023 0310 	bic.w	r3, r3, #16
 800b722:	647b      	str	r3, [r7, #68]	@ 0x44
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	461a      	mov	r2, r3
 800b72a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b72c:	61bb      	str	r3, [r7, #24]
 800b72e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b730:	6979      	ldr	r1, [r7, #20]
 800b732:	69ba      	ldr	r2, [r7, #24]
 800b734:	e841 2300 	strex	r3, r2, [r1]
 800b738:	613b      	str	r3, [r7, #16]
   return(result);
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1e6      	bne.n	800b70e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2220      	movs	r2, #32
 800b744:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b754:	bf00      	nop
 800b756:	3754      	adds	r7, #84	@ 0x54
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2200      	movs	r2, #0
 800b77a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f7ff f99a 	bl	800aab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b784:	bf00      	nop
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b088      	sub	sp, #32
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	e853 3f00 	ldrex	r3, [r3]
 800b7a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7a8:	61fb      	str	r3, [r7, #28]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	61bb      	str	r3, [r7, #24]
 800b7b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b6:	6979      	ldr	r1, [r7, #20]
 800b7b8:	69ba      	ldr	r2, [r7, #24]
 800b7ba:	e841 2300 	strex	r3, r2, [r1]
 800b7be:	613b      	str	r3, [r7, #16]
   return(result);
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1e6      	bne.n	800b794 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f7ff f965 	bl	800aaa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7da:	bf00      	nop
 800b7dc:	3720      	adds	r7, #32
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
	...

0800b7e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b09c      	sub	sp, #112	@ 0x70
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b7f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7fc:	2b22      	cmp	r3, #34	@ 0x22
 800b7fe:	f040 80be 	bne.w	800b97e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b808:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b80c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b810:	b2d9      	uxtb	r1, r3
 800b812:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b816:	b2da      	uxtb	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b81c:	400a      	ands	r2, r1
 800b81e:	b2d2      	uxtb	r2, r2
 800b820:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b826:	1c5a      	adds	r2, r3, #1
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b832:	b29b      	uxth	r3, r3
 800b834:	3b01      	subs	r3, #1
 800b836:	b29a      	uxth	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b844:	b29b      	uxth	r3, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	f040 80a1 	bne.w	800b98e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b854:	e853 3f00 	ldrex	r3, [r3]
 800b858:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b85a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b85c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b860:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	461a      	mov	r2, r3
 800b868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b86a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b86c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b870:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b872:	e841 2300 	strex	r3, r2, [r1]
 800b876:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1e6      	bne.n	800b84c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3308      	adds	r3, #8
 800b884:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b888:	e853 3f00 	ldrex	r3, [r3]
 800b88c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b890:	f023 0301 	bic.w	r3, r3, #1
 800b894:	667b      	str	r3, [r7, #100]	@ 0x64
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	3308      	adds	r3, #8
 800b89c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b89e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b8a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b8a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8a6:	e841 2300 	strex	r3, r2, [r1]
 800b8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b8ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1e5      	bne.n	800b87e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2220      	movs	r2, #32
 800b8b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a33      	ldr	r2, [pc, #204]	@ (800b998 <UART_RxISR_8BIT+0x1b4>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d01f      	beq.n	800b910 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d018      	beq.n	800b910 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e6:	e853 3f00 	ldrex	r3, [r3]
 800b8ea:	623b      	str	r3, [r7, #32]
   return(result);
 800b8ec:	6a3b      	ldr	r3, [r7, #32]
 800b8ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b8f2:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b900:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b904:	e841 2300 	strex	r3, r2, [r1]
 800b908:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1e6      	bne.n	800b8de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b914:	2b01      	cmp	r3, #1
 800b916:	d12e      	bne.n	800b976 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	e853 3f00 	ldrex	r3, [r3]
 800b92a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f023 0310 	bic.w	r3, r3, #16
 800b932:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	461a      	mov	r2, r3
 800b93a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b93c:	61fb      	str	r3, [r7, #28]
 800b93e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b940:	69b9      	ldr	r1, [r7, #24]
 800b942:	69fa      	ldr	r2, [r7, #28]
 800b944:	e841 2300 	strex	r3, r2, [r1]
 800b948:	617b      	str	r3, [r7, #20]
   return(result);
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1e6      	bne.n	800b91e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	69db      	ldr	r3, [r3, #28]
 800b956:	f003 0310 	and.w	r3, r3, #16
 800b95a:	2b10      	cmp	r3, #16
 800b95c:	d103      	bne.n	800b966 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2210      	movs	r2, #16
 800b964:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b96c:	4619      	mov	r1, r3
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f7ff f8ac 	bl	800aacc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b974:	e00b      	b.n	800b98e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7f5 fd1a 	bl	80013b0 <HAL_UART_RxCpltCallback>
}
 800b97c:	e007      	b.n	800b98e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	699a      	ldr	r2, [r3, #24]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f042 0208 	orr.w	r2, r2, #8
 800b98c:	619a      	str	r2, [r3, #24]
}
 800b98e:	bf00      	nop
 800b990:	3770      	adds	r7, #112	@ 0x70
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	40008000 	.word	0x40008000

0800b99c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b09c      	sub	sp, #112	@ 0x70
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b9aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b9b4:	2b22      	cmp	r3, #34	@ 0x22
 800b9b6:	f040 80be 	bne.w	800bb36 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b9ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b9ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9de:	1c9a      	adds	r2, r3, #2
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	3b01      	subs	r3, #1
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f040 80a1 	bne.w	800bb46 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba0c:	e853 3f00 	ldrex	r3, [r3]
 800ba10:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ba12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba18:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba22:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba24:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba2a:	e841 2300 	strex	r3, r2, [r1]
 800ba2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1e6      	bne.n	800ba04 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba40:	e853 3f00 	ldrex	r3, [r3]
 800ba44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba48:	f023 0301 	bic.w	r3, r3, #1
 800ba4c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	3308      	adds	r3, #8
 800ba54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba56:	643a      	str	r2, [r7, #64]	@ 0x40
 800ba58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba5e:	e841 2300 	strex	r3, r2, [r1]
 800ba62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1e5      	bne.n	800ba36 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2220      	movs	r2, #32
 800ba6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a33      	ldr	r2, [pc, #204]	@ (800bb50 <UART_RxISR_16BIT+0x1b4>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d01f      	beq.n	800bac8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d018      	beq.n	800bac8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	e853 3f00 	ldrex	r3, [r3]
 800baa2:	61fb      	str	r3, [r7, #28]
   return(result);
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800baaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	461a      	mov	r2, r3
 800bab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bab6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800baba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800babc:	e841 2300 	strex	r3, r2, [r1]
 800bac0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1e6      	bne.n	800ba96 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d12e      	bne.n	800bb2e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	e853 3f00 	ldrex	r3, [r3]
 800bae2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	f023 0310 	bic.w	r3, r3, #16
 800baea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	461a      	mov	r2, r3
 800baf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baf4:	61bb      	str	r3, [r7, #24]
 800baf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf8:	6979      	ldr	r1, [r7, #20]
 800bafa:	69ba      	ldr	r2, [r7, #24]
 800bafc:	e841 2300 	strex	r3, r2, [r1]
 800bb00:	613b      	str	r3, [r7, #16]
   return(result);
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1e6      	bne.n	800bad6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	69db      	ldr	r3, [r3, #28]
 800bb0e:	f003 0310 	and.w	r3, r3, #16
 800bb12:	2b10      	cmp	r3, #16
 800bb14:	d103      	bne.n	800bb1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2210      	movs	r2, #16
 800bb1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb24:	4619      	mov	r1, r3
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7fe ffd0 	bl	800aacc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb2c:	e00b      	b.n	800bb46 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f7f5 fc3e 	bl	80013b0 <HAL_UART_RxCpltCallback>
}
 800bb34:	e007      	b.n	800bb46 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	699a      	ldr	r2, [r3, #24]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f042 0208 	orr.w	r2, r2, #8
 800bb44:	619a      	str	r2, [r3, #24]
}
 800bb46:	bf00      	nop
 800bb48:	3770      	adds	r7, #112	@ 0x70
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	40008000 	.word	0x40008000

0800bb54 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b0ac      	sub	sp, #176	@ 0xb0
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bb62:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	69db      	ldr	r3, [r3, #28]
 800bb6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb8a:	2b22      	cmp	r3, #34	@ 0x22
 800bb8c:	f040 8183 	bne.w	800be96 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bb96:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bb9a:	e126      	b.n	800bdea <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bba2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bba6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800bbaa:	b2d9      	uxtb	r1, r3
 800bbac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbb6:	400a      	ands	r2, r1
 800bbb8:	b2d2      	uxtb	r2, r2
 800bbba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbc0:	1c5a      	adds	r2, r3, #1
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	69db      	ldr	r3, [r3, #28]
 800bbde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bbe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbe6:	f003 0307 	and.w	r3, r3, #7
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d053      	beq.n	800bc96 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bbee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d011      	beq.n	800bc1e <UART_RxISR_8BIT_FIFOEN+0xca>
 800bbfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d00b      	beq.n	800bc1e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc14:	f043 0201 	orr.w	r2, r3, #1
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc22:	f003 0302 	and.w	r3, r3, #2
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d011      	beq.n	800bc4e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800bc2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc2e:	f003 0301 	and.w	r3, r3, #1
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00b      	beq.n	800bc4e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc44:	f043 0204 	orr.w	r2, r3, #4
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc52:	f003 0304 	and.w	r3, r3, #4
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d011      	beq.n	800bc7e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bc5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc5e:	f003 0301 	and.w	r3, r3, #1
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00b      	beq.n	800bc7e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2204      	movs	r2, #4
 800bc6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc74:	f043 0202 	orr.w	r2, r3, #2
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d006      	beq.n	800bc96 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7fe ff15 	bl	800aab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f040 80a3 	bne.w	800bdea <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bcac:	e853 3f00 	ldrex	r3, [r3]
 800bcb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800bcb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bcc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bcc8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcca:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800bccc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800bcce:	e841 2300 	strex	r3, r2, [r1]
 800bcd2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800bcd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d1e4      	bne.n	800bca4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	3308      	adds	r3, #8
 800bce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bce4:	e853 3f00 	ldrex	r3, [r3]
 800bce8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800bcea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bcf0:	f023 0301 	bic.w	r3, r3, #1
 800bcf4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3308      	adds	r3, #8
 800bcfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bd02:	66ba      	str	r2, [r7, #104]	@ 0x68
 800bd04:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd06:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800bd08:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bd0a:	e841 2300 	strex	r3, r2, [r1]
 800bd0e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800bd10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1e1      	bne.n	800bcda <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2220      	movs	r2, #32
 800bd1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a60      	ldr	r2, [pc, #384]	@ (800beb0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d021      	beq.n	800bd78 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d01a      	beq.n	800bd78 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd4a:	e853 3f00 	ldrex	r3, [r3]
 800bd4e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bd50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bd56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bd64:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd66:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd68:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bd6a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bd6c:	e841 2300 	strex	r3, r2, [r1]
 800bd70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bd72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1e4      	bne.n	800bd42 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d130      	bne.n	800bde2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd8e:	e853 3f00 	ldrex	r3, [r3]
 800bd92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd96:	f023 0310 	bic.w	r3, r3, #16
 800bd9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bda8:	643b      	str	r3, [r7, #64]	@ 0x40
 800bdaa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bdae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bdb0:	e841 2300 	strex	r3, r2, [r1]
 800bdb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1e4      	bne.n	800bd86 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	69db      	ldr	r3, [r3, #28]
 800bdc2:	f003 0310 	and.w	r3, r3, #16
 800bdc6:	2b10      	cmp	r3, #16
 800bdc8:	d103      	bne.n	800bdd2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2210      	movs	r2, #16
 800bdd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bdd8:	4619      	mov	r1, r3
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7fe fe76 	bl	800aacc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800bde0:	e00e      	b.n	800be00 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7f5 fae4 	bl	80013b0 <HAL_UART_RxCpltCallback>
        break;
 800bde8:	e00a      	b.n	800be00 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bdea:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d006      	beq.n	800be00 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800bdf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bdf6:	f003 0320 	and.w	r3, r3, #32
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f47f aece 	bne.w	800bb9c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be06:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800be0a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d049      	beq.n	800bea6 <UART_RxISR_8BIT_FIFOEN+0x352>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800be18:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d242      	bcs.n	800bea6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3308      	adds	r3, #8
 800be26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be28:	6a3b      	ldr	r3, [r7, #32]
 800be2a:	e853 3f00 	ldrex	r3, [r3]
 800be2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3308      	adds	r3, #8
 800be40:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800be44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be4c:	e841 2300 	strex	r3, r2, [r1]
 800be50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1e3      	bne.n	800be20 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4a16      	ldr	r2, [pc, #88]	@ (800beb4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800be5c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	e853 3f00 	ldrex	r3, [r3]
 800be6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	f043 0320 	orr.w	r3, r3, #32
 800be72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	461a      	mov	r2, r3
 800be7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800be80:	61bb      	str	r3, [r7, #24]
 800be82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be84:	6979      	ldr	r1, [r7, #20]
 800be86:	69ba      	ldr	r2, [r7, #24]
 800be88:	e841 2300 	strex	r3, r2, [r1]
 800be8c:	613b      	str	r3, [r7, #16]
   return(result);
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1e4      	bne.n	800be5e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be94:	e007      	b.n	800bea6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	699a      	ldr	r2, [r3, #24]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f042 0208 	orr.w	r2, r2, #8
 800bea4:	619a      	str	r2, [r3, #24]
}
 800bea6:	bf00      	nop
 800bea8:	37b0      	adds	r7, #176	@ 0xb0
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	40008000 	.word	0x40008000
 800beb4:	0800b7e5 	.word	0x0800b7e5

0800beb8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b0ae      	sub	sp, #184	@ 0xb8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bec6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	69db      	ldr	r3, [r3, #28]
 800bed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800beee:	2b22      	cmp	r3, #34	@ 0x22
 800bef0:	f040 8187 	bne.w	800c202 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800befa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800befe:	e12a      	b.n	800c156 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf06:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800bf12:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800bf16:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bf22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf28:	1c9a      	adds	r2, r3, #2
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	3b01      	subs	r3, #1
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	69db      	ldr	r3, [r3, #28]
 800bf46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bf4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bf4e:	f003 0307 	and.w	r3, r3, #7
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d053      	beq.n	800bffe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bf5a:	f003 0301 	and.w	r3, r3, #1
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d011      	beq.n	800bf86 <UART_RxISR_16BIT_FIFOEN+0xce>
 800bf62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00b      	beq.n	800bf86 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2201      	movs	r2, #1
 800bf74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf7c:	f043 0201 	orr.w	r2, r3, #1
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bf8a:	f003 0302 	and.w	r3, r3, #2
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d011      	beq.n	800bfb6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bf92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bf96:	f003 0301 	and.w	r3, r3, #1
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00b      	beq.n	800bfb6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfac:	f043 0204 	orr.w	r2, r3, #4
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bfba:	f003 0304 	and.w	r3, r3, #4
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d011      	beq.n	800bfe6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bfc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bfc6:	f003 0301 	and.w	r3, r3, #1
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00b      	beq.n	800bfe6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2204      	movs	r2, #4
 800bfd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfdc:	f043 0202 	orr.w	r2, r3, #2
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d006      	beq.n	800bffe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7fe fd61 	bl	800aab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c004:	b29b      	uxth	r3, r3
 800c006:	2b00      	cmp	r3, #0
 800c008:	f040 80a5 	bne.w	800c156 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c014:	e853 3f00 	ldrex	r3, [r3]
 800c018:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c01a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c01c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c020:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	461a      	mov	r2, r3
 800c02a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c02e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c032:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c034:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c036:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c03a:	e841 2300 	strex	r3, r2, [r1]
 800c03e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c040:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1e2      	bne.n	800c00c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3308      	adds	r3, #8
 800c04c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c050:	e853 3f00 	ldrex	r3, [r3]
 800c054:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c05c:	f023 0301 	bic.w	r3, r3, #1
 800c060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	3308      	adds	r3, #8
 800c06a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c06e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c070:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c072:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c074:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c076:	e841 2300 	strex	r3, r2, [r1]
 800c07a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c07c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1e1      	bne.n	800c046 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2220      	movs	r2, #32
 800c086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a60      	ldr	r2, [pc, #384]	@ (800c21c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d021      	beq.n	800c0e4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d01a      	beq.n	800c0e4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0b6:	e853 3f00 	ldrex	r3, [r3]
 800c0ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c0bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c0c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c0d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c0d2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c0d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0d8:	e841 2300 	strex	r3, r2, [r1]
 800c0dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c0de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1e4      	bne.n	800c0ae <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d130      	bne.n	800c14e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0fa:	e853 3f00 	ldrex	r3, [r3]
 800c0fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c102:	f023 0310 	bic.w	r3, r3, #16
 800c106:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	461a      	mov	r2, r3
 800c110:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c114:	647b      	str	r3, [r7, #68]	@ 0x44
 800c116:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c118:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c11a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c11c:	e841 2300 	strex	r3, r2, [r1]
 800c120:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c124:	2b00      	cmp	r3, #0
 800c126:	d1e4      	bne.n	800c0f2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	69db      	ldr	r3, [r3, #28]
 800c12e:	f003 0310 	and.w	r3, r3, #16
 800c132:	2b10      	cmp	r3, #16
 800c134:	d103      	bne.n	800c13e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2210      	movs	r2, #16
 800c13c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f7fe fcc0 	bl	800aacc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c14c:	e00e      	b.n	800c16c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7f5 f92e 	bl	80013b0 <HAL_UART_RxCpltCallback>
        break;
 800c154:	e00a      	b.n	800c16c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c156:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d006      	beq.n	800c16c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800c15e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c162:	f003 0320 	and.w	r3, r3, #32
 800c166:	2b00      	cmp	r3, #0
 800c168:	f47f aeca 	bne.w	800bf00 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c172:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c176:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d049      	beq.n	800c212 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c184:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c188:	429a      	cmp	r2, r3
 800c18a:	d242      	bcs.n	800c212 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3308      	adds	r3, #8
 800c192:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c196:	e853 3f00 	ldrex	r3, [r3]
 800c19a:	623b      	str	r3, [r7, #32]
   return(result);
 800c19c:	6a3b      	ldr	r3, [r7, #32]
 800c19e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c1a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c1b0:	633a      	str	r2, [r7, #48]	@ 0x30
 800c1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1b8:	e841 2300 	strex	r3, r2, [r1]
 800c1bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1e3      	bne.n	800c18c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a16      	ldr	r2, [pc, #88]	@ (800c220 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800c1c8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	e853 3f00 	ldrex	r3, [r3]
 800c1d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f043 0320 	orr.w	r3, r3, #32
 800c1de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c1ec:	61fb      	str	r3, [r7, #28]
 800c1ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f0:	69b9      	ldr	r1, [r7, #24]
 800c1f2:	69fa      	ldr	r2, [r7, #28]
 800c1f4:	e841 2300 	strex	r3, r2, [r1]
 800c1f8:	617b      	str	r3, [r7, #20]
   return(result);
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1e4      	bne.n	800c1ca <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c200:	e007      	b.n	800c212 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	699a      	ldr	r2, [r3, #24]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f042 0208 	orr.w	r2, r2, #8
 800c210:	619a      	str	r2, [r3, #24]
}
 800c212:	bf00      	nop
 800c214:	37b8      	adds	r7, #184	@ 0xb8
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	40008000 	.word	0x40008000
 800c220:	0800b99d 	.word	0x0800b99d

0800c224 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c240:	bf00      	nop
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c254:	bf00      	nop
 800c256:	370c      	adds	r7, #12
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr

0800c260 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c260:	b480      	push	{r7}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d101      	bne.n	800c276 <HAL_UARTEx_DisableFifoMode+0x16>
 800c272:	2302      	movs	r3, #2
 800c274:	e027      	b.n	800c2c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2201      	movs	r2, #1
 800c27a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2224      	movs	r2, #36	@ 0x24
 800c282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f022 0201 	bic.w	r2, r2, #1
 800c29c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c2a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68fa      	ldr	r2, [r7, #12]
 800c2b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2220      	movs	r2, #32
 800c2b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2c4:	2300      	movs	r3, #0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3714      	adds	r7, #20
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b084      	sub	sp, #16
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d101      	bne.n	800c2ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c2e6:	2302      	movs	r3, #2
 800c2e8:	e02d      	b.n	800c346 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2224      	movs	r2, #36	@ 0x24
 800c2f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f022 0201 	bic.w	r2, r2, #1
 800c310:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	683a      	ldr	r2, [r7, #0]
 800c322:	430a      	orrs	r2, r1
 800c324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f850 	bl	800c3cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2220      	movs	r2, #32
 800c338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b084      	sub	sp, #16
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d101      	bne.n	800c366 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c362:	2302      	movs	r3, #2
 800c364:	e02d      	b.n	800c3c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2224      	movs	r2, #36	@ 0x24
 800c372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f022 0201 	bic.w	r2, r2, #1
 800c38c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	430a      	orrs	r2, r1
 800c3a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f812 	bl	800c3cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2220      	movs	r2, #32
 800c3b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
	...

0800c3cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d108      	bne.n	800c3ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c3ec:	e031      	b.n	800c452 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c3ee:	2308      	movs	r3, #8
 800c3f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c3f2:	2308      	movs	r3, #8
 800c3f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	0e5b      	lsrs	r3, r3, #25
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	f003 0307 	and.w	r3, r3, #7
 800c404:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	0f5b      	lsrs	r3, r3, #29
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	f003 0307 	and.w	r3, r3, #7
 800c414:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c416:	7bbb      	ldrb	r3, [r7, #14]
 800c418:	7b3a      	ldrb	r2, [r7, #12]
 800c41a:	4911      	ldr	r1, [pc, #68]	@ (800c460 <UARTEx_SetNbDataToProcess+0x94>)
 800c41c:	5c8a      	ldrb	r2, [r1, r2]
 800c41e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c422:	7b3a      	ldrb	r2, [r7, #12]
 800c424:	490f      	ldr	r1, [pc, #60]	@ (800c464 <UARTEx_SetNbDataToProcess+0x98>)
 800c426:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c428:	fb93 f3f2 	sdiv	r3, r3, r2
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c434:	7bfb      	ldrb	r3, [r7, #15]
 800c436:	7b7a      	ldrb	r2, [r7, #13]
 800c438:	4909      	ldr	r1, [pc, #36]	@ (800c460 <UARTEx_SetNbDataToProcess+0x94>)
 800c43a:	5c8a      	ldrb	r2, [r1, r2]
 800c43c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c440:	7b7a      	ldrb	r2, [r7, #13]
 800c442:	4908      	ldr	r1, [pc, #32]	@ (800c464 <UARTEx_SetNbDataToProcess+0x98>)
 800c444:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c446:	fb93 f3f2 	sdiv	r3, r3, r2
 800c44a:	b29a      	uxth	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c452:	bf00      	nop
 800c454:	3714      	adds	r7, #20
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	0800f844 	.word	0x0800f844
 800c464:	0800f84c 	.word	0x0800f84c

0800c468 <atof>:
 800c468:	2100      	movs	r1, #0
 800c46a:	f000 be05 	b.w	800d078 <strtod>

0800c46e <sulp>:
 800c46e:	b570      	push	{r4, r5, r6, lr}
 800c470:	4604      	mov	r4, r0
 800c472:	460d      	mov	r5, r1
 800c474:	ec45 4b10 	vmov	d0, r4, r5
 800c478:	4616      	mov	r6, r2
 800c47a:	f001 ff8d 	bl	800e398 <__ulp>
 800c47e:	ec51 0b10 	vmov	r0, r1, d0
 800c482:	b17e      	cbz	r6, 800c4a4 <sulp+0x36>
 800c484:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c488:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	dd09      	ble.n	800c4a4 <sulp+0x36>
 800c490:	051b      	lsls	r3, r3, #20
 800c492:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c496:	2400      	movs	r4, #0
 800c498:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c49c:	4622      	mov	r2, r4
 800c49e:	462b      	mov	r3, r5
 800c4a0:	f7f4 f8d2 	bl	8000648 <__aeabi_dmul>
 800c4a4:	ec41 0b10 	vmov	d0, r0, r1
 800c4a8:	bd70      	pop	{r4, r5, r6, pc}
 800c4aa:	0000      	movs	r0, r0
 800c4ac:	0000      	movs	r0, r0
	...

0800c4b0 <_strtod_l>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	b09f      	sub	sp, #124	@ 0x7c
 800c4b6:	460c      	mov	r4, r1
 800c4b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800c4be:	9005      	str	r0, [sp, #20]
 800c4c0:	f04f 0a00 	mov.w	sl, #0
 800c4c4:	f04f 0b00 	mov.w	fp, #0
 800c4c8:	460a      	mov	r2, r1
 800c4ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4cc:	7811      	ldrb	r1, [r2, #0]
 800c4ce:	292b      	cmp	r1, #43	@ 0x2b
 800c4d0:	d04a      	beq.n	800c568 <_strtod_l+0xb8>
 800c4d2:	d838      	bhi.n	800c546 <_strtod_l+0x96>
 800c4d4:	290d      	cmp	r1, #13
 800c4d6:	d832      	bhi.n	800c53e <_strtod_l+0x8e>
 800c4d8:	2908      	cmp	r1, #8
 800c4da:	d832      	bhi.n	800c542 <_strtod_l+0x92>
 800c4dc:	2900      	cmp	r1, #0
 800c4de:	d03b      	beq.n	800c558 <_strtod_l+0xa8>
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c4e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c4e6:	782a      	ldrb	r2, [r5, #0]
 800c4e8:	2a30      	cmp	r2, #48	@ 0x30
 800c4ea:	f040 80b3 	bne.w	800c654 <_strtod_l+0x1a4>
 800c4ee:	786a      	ldrb	r2, [r5, #1]
 800c4f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c4f4:	2a58      	cmp	r2, #88	@ 0x58
 800c4f6:	d16e      	bne.n	800c5d6 <_strtod_l+0x126>
 800c4f8:	9302      	str	r3, [sp, #8]
 800c4fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4fc:	9301      	str	r3, [sp, #4]
 800c4fe:	ab1a      	add	r3, sp, #104	@ 0x68
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	4a8e      	ldr	r2, [pc, #568]	@ (800c73c <_strtod_l+0x28c>)
 800c504:	9805      	ldr	r0, [sp, #20]
 800c506:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c508:	a919      	add	r1, sp, #100	@ 0x64
 800c50a:	f001 f83f 	bl	800d58c <__gethex>
 800c50e:	f010 060f 	ands.w	r6, r0, #15
 800c512:	4604      	mov	r4, r0
 800c514:	d005      	beq.n	800c522 <_strtod_l+0x72>
 800c516:	2e06      	cmp	r6, #6
 800c518:	d128      	bne.n	800c56c <_strtod_l+0xbc>
 800c51a:	3501      	adds	r5, #1
 800c51c:	2300      	movs	r3, #0
 800c51e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c520:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c522:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c524:	2b00      	cmp	r3, #0
 800c526:	f040 858e 	bne.w	800d046 <_strtod_l+0xb96>
 800c52a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c52c:	b1cb      	cbz	r3, 800c562 <_strtod_l+0xb2>
 800c52e:	4652      	mov	r2, sl
 800c530:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c534:	ec43 2b10 	vmov	d0, r2, r3
 800c538:	b01f      	add	sp, #124	@ 0x7c
 800c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53e:	2920      	cmp	r1, #32
 800c540:	d1ce      	bne.n	800c4e0 <_strtod_l+0x30>
 800c542:	3201      	adds	r2, #1
 800c544:	e7c1      	b.n	800c4ca <_strtod_l+0x1a>
 800c546:	292d      	cmp	r1, #45	@ 0x2d
 800c548:	d1ca      	bne.n	800c4e0 <_strtod_l+0x30>
 800c54a:	2101      	movs	r1, #1
 800c54c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c54e:	1c51      	adds	r1, r2, #1
 800c550:	9119      	str	r1, [sp, #100]	@ 0x64
 800c552:	7852      	ldrb	r2, [r2, #1]
 800c554:	2a00      	cmp	r2, #0
 800c556:	d1c5      	bne.n	800c4e4 <_strtod_l+0x34>
 800c558:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c55a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f040 8570 	bne.w	800d042 <_strtod_l+0xb92>
 800c562:	4652      	mov	r2, sl
 800c564:	465b      	mov	r3, fp
 800c566:	e7e5      	b.n	800c534 <_strtod_l+0x84>
 800c568:	2100      	movs	r1, #0
 800c56a:	e7ef      	b.n	800c54c <_strtod_l+0x9c>
 800c56c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c56e:	b13a      	cbz	r2, 800c580 <_strtod_l+0xd0>
 800c570:	2135      	movs	r1, #53	@ 0x35
 800c572:	a81c      	add	r0, sp, #112	@ 0x70
 800c574:	f002 f80a 	bl	800e58c <__copybits>
 800c578:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c57a:	9805      	ldr	r0, [sp, #20]
 800c57c:	f001 fbd8 	bl	800dd30 <_Bfree>
 800c580:	3e01      	subs	r6, #1
 800c582:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c584:	2e04      	cmp	r6, #4
 800c586:	d806      	bhi.n	800c596 <_strtod_l+0xe6>
 800c588:	e8df f006 	tbb	[pc, r6]
 800c58c:	201d0314 	.word	0x201d0314
 800c590:	14          	.byte	0x14
 800c591:	00          	.byte	0x00
 800c592:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c596:	05e1      	lsls	r1, r4, #23
 800c598:	bf48      	it	mi
 800c59a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c59e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c5a2:	0d1b      	lsrs	r3, r3, #20
 800c5a4:	051b      	lsls	r3, r3, #20
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1bb      	bne.n	800c522 <_strtod_l+0x72>
 800c5aa:	f000 fef7 	bl	800d39c <__errno>
 800c5ae:	2322      	movs	r3, #34	@ 0x22
 800c5b0:	6003      	str	r3, [r0, #0]
 800c5b2:	e7b6      	b.n	800c522 <_strtod_l+0x72>
 800c5b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c5b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c5bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c5c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c5c4:	e7e7      	b.n	800c596 <_strtod_l+0xe6>
 800c5c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c744 <_strtod_l+0x294>
 800c5ca:	e7e4      	b.n	800c596 <_strtod_l+0xe6>
 800c5cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c5d0:	f04f 3aff 	mov.w	sl, #4294967295
 800c5d4:	e7df      	b.n	800c596 <_strtod_l+0xe6>
 800c5d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5d8:	1c5a      	adds	r2, r3, #1
 800c5da:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5dc:	785b      	ldrb	r3, [r3, #1]
 800c5de:	2b30      	cmp	r3, #48	@ 0x30
 800c5e0:	d0f9      	beq.n	800c5d6 <_strtod_l+0x126>
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d09d      	beq.n	800c522 <_strtod_l+0x72>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	9308      	str	r3, [sp, #32]
 800c5f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5f4:	461f      	mov	r7, r3
 800c5f6:	220a      	movs	r2, #10
 800c5f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c5fa:	7805      	ldrb	r5, [r0, #0]
 800c5fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c600:	b2d9      	uxtb	r1, r3
 800c602:	2909      	cmp	r1, #9
 800c604:	d928      	bls.n	800c658 <_strtod_l+0x1a8>
 800c606:	494e      	ldr	r1, [pc, #312]	@ (800c740 <_strtod_l+0x290>)
 800c608:	2201      	movs	r2, #1
 800c60a:	f000 fe6e 	bl	800d2ea <strncmp>
 800c60e:	2800      	cmp	r0, #0
 800c610:	d032      	beq.n	800c678 <_strtod_l+0x1c8>
 800c612:	2000      	movs	r0, #0
 800c614:	462a      	mov	r2, r5
 800c616:	4681      	mov	r9, r0
 800c618:	463d      	mov	r5, r7
 800c61a:	4603      	mov	r3, r0
 800c61c:	2a65      	cmp	r2, #101	@ 0x65
 800c61e:	d001      	beq.n	800c624 <_strtod_l+0x174>
 800c620:	2a45      	cmp	r2, #69	@ 0x45
 800c622:	d114      	bne.n	800c64e <_strtod_l+0x19e>
 800c624:	b91d      	cbnz	r5, 800c62e <_strtod_l+0x17e>
 800c626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c628:	4302      	orrs	r2, r0
 800c62a:	d095      	beq.n	800c558 <_strtod_l+0xa8>
 800c62c:	2500      	movs	r5, #0
 800c62e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c630:	1c62      	adds	r2, r4, #1
 800c632:	9219      	str	r2, [sp, #100]	@ 0x64
 800c634:	7862      	ldrb	r2, [r4, #1]
 800c636:	2a2b      	cmp	r2, #43	@ 0x2b
 800c638:	d077      	beq.n	800c72a <_strtod_l+0x27a>
 800c63a:	2a2d      	cmp	r2, #45	@ 0x2d
 800c63c:	d07b      	beq.n	800c736 <_strtod_l+0x286>
 800c63e:	f04f 0c00 	mov.w	ip, #0
 800c642:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c646:	2909      	cmp	r1, #9
 800c648:	f240 8082 	bls.w	800c750 <_strtod_l+0x2a0>
 800c64c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c64e:	f04f 0800 	mov.w	r8, #0
 800c652:	e0a2      	b.n	800c79a <_strtod_l+0x2ea>
 800c654:	2300      	movs	r3, #0
 800c656:	e7c7      	b.n	800c5e8 <_strtod_l+0x138>
 800c658:	2f08      	cmp	r7, #8
 800c65a:	bfd5      	itete	le
 800c65c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c65e:	9908      	ldrgt	r1, [sp, #32]
 800c660:	fb02 3301 	mlale	r3, r2, r1, r3
 800c664:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c668:	f100 0001 	add.w	r0, r0, #1
 800c66c:	bfd4      	ite	le
 800c66e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c670:	9308      	strgt	r3, [sp, #32]
 800c672:	3701      	adds	r7, #1
 800c674:	9019      	str	r0, [sp, #100]	@ 0x64
 800c676:	e7bf      	b.n	800c5f8 <_strtod_l+0x148>
 800c678:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c67a:	1c5a      	adds	r2, r3, #1
 800c67c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c67e:	785a      	ldrb	r2, [r3, #1]
 800c680:	b37f      	cbz	r7, 800c6e2 <_strtod_l+0x232>
 800c682:	4681      	mov	r9, r0
 800c684:	463d      	mov	r5, r7
 800c686:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c68a:	2b09      	cmp	r3, #9
 800c68c:	d912      	bls.n	800c6b4 <_strtod_l+0x204>
 800c68e:	2301      	movs	r3, #1
 800c690:	e7c4      	b.n	800c61c <_strtod_l+0x16c>
 800c692:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c694:	1c5a      	adds	r2, r3, #1
 800c696:	9219      	str	r2, [sp, #100]	@ 0x64
 800c698:	785a      	ldrb	r2, [r3, #1]
 800c69a:	3001      	adds	r0, #1
 800c69c:	2a30      	cmp	r2, #48	@ 0x30
 800c69e:	d0f8      	beq.n	800c692 <_strtod_l+0x1e2>
 800c6a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c6a4:	2b08      	cmp	r3, #8
 800c6a6:	f200 84d3 	bhi.w	800d050 <_strtod_l+0xba0>
 800c6aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6ae:	4681      	mov	r9, r0
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	3a30      	subs	r2, #48	@ 0x30
 800c6b6:	f100 0301 	add.w	r3, r0, #1
 800c6ba:	d02a      	beq.n	800c712 <_strtod_l+0x262>
 800c6bc:	4499      	add	r9, r3
 800c6be:	eb00 0c05 	add.w	ip, r0, r5
 800c6c2:	462b      	mov	r3, r5
 800c6c4:	210a      	movs	r1, #10
 800c6c6:	4563      	cmp	r3, ip
 800c6c8:	d10d      	bne.n	800c6e6 <_strtod_l+0x236>
 800c6ca:	1c69      	adds	r1, r5, #1
 800c6cc:	4401      	add	r1, r0
 800c6ce:	4428      	add	r0, r5
 800c6d0:	2808      	cmp	r0, #8
 800c6d2:	dc16      	bgt.n	800c702 <_strtod_l+0x252>
 800c6d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c6d6:	230a      	movs	r3, #10
 800c6d8:	fb03 2300 	mla	r3, r3, r0, r2
 800c6dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6de:	2300      	movs	r3, #0
 800c6e0:	e018      	b.n	800c714 <_strtod_l+0x264>
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	e7da      	b.n	800c69c <_strtod_l+0x1ec>
 800c6e6:	2b08      	cmp	r3, #8
 800c6e8:	f103 0301 	add.w	r3, r3, #1
 800c6ec:	dc03      	bgt.n	800c6f6 <_strtod_l+0x246>
 800c6ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c6f0:	434e      	muls	r6, r1
 800c6f2:	960a      	str	r6, [sp, #40]	@ 0x28
 800c6f4:	e7e7      	b.n	800c6c6 <_strtod_l+0x216>
 800c6f6:	2b10      	cmp	r3, #16
 800c6f8:	bfde      	ittt	le
 800c6fa:	9e08      	ldrle	r6, [sp, #32]
 800c6fc:	434e      	mulle	r6, r1
 800c6fe:	9608      	strle	r6, [sp, #32]
 800c700:	e7e1      	b.n	800c6c6 <_strtod_l+0x216>
 800c702:	280f      	cmp	r0, #15
 800c704:	dceb      	bgt.n	800c6de <_strtod_l+0x22e>
 800c706:	9808      	ldr	r0, [sp, #32]
 800c708:	230a      	movs	r3, #10
 800c70a:	fb03 2300 	mla	r3, r3, r0, r2
 800c70e:	9308      	str	r3, [sp, #32]
 800c710:	e7e5      	b.n	800c6de <_strtod_l+0x22e>
 800c712:	4629      	mov	r1, r5
 800c714:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c716:	1c50      	adds	r0, r2, #1
 800c718:	9019      	str	r0, [sp, #100]	@ 0x64
 800c71a:	7852      	ldrb	r2, [r2, #1]
 800c71c:	4618      	mov	r0, r3
 800c71e:	460d      	mov	r5, r1
 800c720:	e7b1      	b.n	800c686 <_strtod_l+0x1d6>
 800c722:	f04f 0900 	mov.w	r9, #0
 800c726:	2301      	movs	r3, #1
 800c728:	e77d      	b.n	800c626 <_strtod_l+0x176>
 800c72a:	f04f 0c00 	mov.w	ip, #0
 800c72e:	1ca2      	adds	r2, r4, #2
 800c730:	9219      	str	r2, [sp, #100]	@ 0x64
 800c732:	78a2      	ldrb	r2, [r4, #2]
 800c734:	e785      	b.n	800c642 <_strtod_l+0x192>
 800c736:	f04f 0c01 	mov.w	ip, #1
 800c73a:	e7f8      	b.n	800c72e <_strtod_l+0x27e>
 800c73c:	0800f878 	.word	0x0800f878
 800c740:	0800f854 	.word	0x0800f854
 800c744:	7ff00000 	.word	0x7ff00000
 800c748:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c74a:	1c51      	adds	r1, r2, #1
 800c74c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c74e:	7852      	ldrb	r2, [r2, #1]
 800c750:	2a30      	cmp	r2, #48	@ 0x30
 800c752:	d0f9      	beq.n	800c748 <_strtod_l+0x298>
 800c754:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c758:	2908      	cmp	r1, #8
 800c75a:	f63f af78 	bhi.w	800c64e <_strtod_l+0x19e>
 800c75e:	3a30      	subs	r2, #48	@ 0x30
 800c760:	920e      	str	r2, [sp, #56]	@ 0x38
 800c762:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c764:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c766:	f04f 080a 	mov.w	r8, #10
 800c76a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c76c:	1c56      	adds	r6, r2, #1
 800c76e:	9619      	str	r6, [sp, #100]	@ 0x64
 800c770:	7852      	ldrb	r2, [r2, #1]
 800c772:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c776:	f1be 0f09 	cmp.w	lr, #9
 800c77a:	d939      	bls.n	800c7f0 <_strtod_l+0x340>
 800c77c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c77e:	1a76      	subs	r6, r6, r1
 800c780:	2e08      	cmp	r6, #8
 800c782:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c786:	dc03      	bgt.n	800c790 <_strtod_l+0x2e0>
 800c788:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c78a:	4588      	cmp	r8, r1
 800c78c:	bfa8      	it	ge
 800c78e:	4688      	movge	r8, r1
 800c790:	f1bc 0f00 	cmp.w	ip, #0
 800c794:	d001      	beq.n	800c79a <_strtod_l+0x2ea>
 800c796:	f1c8 0800 	rsb	r8, r8, #0
 800c79a:	2d00      	cmp	r5, #0
 800c79c:	d14e      	bne.n	800c83c <_strtod_l+0x38c>
 800c79e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7a0:	4308      	orrs	r0, r1
 800c7a2:	f47f aebe 	bne.w	800c522 <_strtod_l+0x72>
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f47f aed6 	bne.w	800c558 <_strtod_l+0xa8>
 800c7ac:	2a69      	cmp	r2, #105	@ 0x69
 800c7ae:	d028      	beq.n	800c802 <_strtod_l+0x352>
 800c7b0:	dc25      	bgt.n	800c7fe <_strtod_l+0x34e>
 800c7b2:	2a49      	cmp	r2, #73	@ 0x49
 800c7b4:	d025      	beq.n	800c802 <_strtod_l+0x352>
 800c7b6:	2a4e      	cmp	r2, #78	@ 0x4e
 800c7b8:	f47f aece 	bne.w	800c558 <_strtod_l+0xa8>
 800c7bc:	499b      	ldr	r1, [pc, #620]	@ (800ca2c <_strtod_l+0x57c>)
 800c7be:	a819      	add	r0, sp, #100	@ 0x64
 800c7c0:	f001 f906 	bl	800d9d0 <__match>
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	f43f aec7 	beq.w	800c558 <_strtod_l+0xa8>
 800c7ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	2b28      	cmp	r3, #40	@ 0x28
 800c7d0:	d12e      	bne.n	800c830 <_strtod_l+0x380>
 800c7d2:	4997      	ldr	r1, [pc, #604]	@ (800ca30 <_strtod_l+0x580>)
 800c7d4:	aa1c      	add	r2, sp, #112	@ 0x70
 800c7d6:	a819      	add	r0, sp, #100	@ 0x64
 800c7d8:	f001 f90e 	bl	800d9f8 <__hexnan>
 800c7dc:	2805      	cmp	r0, #5
 800c7de:	d127      	bne.n	800c830 <_strtod_l+0x380>
 800c7e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c7e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c7e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c7ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c7ee:	e698      	b.n	800c522 <_strtod_l+0x72>
 800c7f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c7f2:	fb08 2101 	mla	r1, r8, r1, r2
 800c7f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c7fa:	920e      	str	r2, [sp, #56]	@ 0x38
 800c7fc:	e7b5      	b.n	800c76a <_strtod_l+0x2ba>
 800c7fe:	2a6e      	cmp	r2, #110	@ 0x6e
 800c800:	e7da      	b.n	800c7b8 <_strtod_l+0x308>
 800c802:	498c      	ldr	r1, [pc, #560]	@ (800ca34 <_strtod_l+0x584>)
 800c804:	a819      	add	r0, sp, #100	@ 0x64
 800c806:	f001 f8e3 	bl	800d9d0 <__match>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	f43f aea4 	beq.w	800c558 <_strtod_l+0xa8>
 800c810:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c812:	4989      	ldr	r1, [pc, #548]	@ (800ca38 <_strtod_l+0x588>)
 800c814:	3b01      	subs	r3, #1
 800c816:	a819      	add	r0, sp, #100	@ 0x64
 800c818:	9319      	str	r3, [sp, #100]	@ 0x64
 800c81a:	f001 f8d9 	bl	800d9d0 <__match>
 800c81e:	b910      	cbnz	r0, 800c826 <_strtod_l+0x376>
 800c820:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c822:	3301      	adds	r3, #1
 800c824:	9319      	str	r3, [sp, #100]	@ 0x64
 800c826:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ca48 <_strtod_l+0x598>
 800c82a:	f04f 0a00 	mov.w	sl, #0
 800c82e:	e678      	b.n	800c522 <_strtod_l+0x72>
 800c830:	4882      	ldr	r0, [pc, #520]	@ (800ca3c <_strtod_l+0x58c>)
 800c832:	f000 fdf1 	bl	800d418 <nan>
 800c836:	ec5b ab10 	vmov	sl, fp, d0
 800c83a:	e672      	b.n	800c522 <_strtod_l+0x72>
 800c83c:	eba8 0309 	sub.w	r3, r8, r9
 800c840:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c842:	9309      	str	r3, [sp, #36]	@ 0x24
 800c844:	2f00      	cmp	r7, #0
 800c846:	bf08      	it	eq
 800c848:	462f      	moveq	r7, r5
 800c84a:	2d10      	cmp	r5, #16
 800c84c:	462c      	mov	r4, r5
 800c84e:	bfa8      	it	ge
 800c850:	2410      	movge	r4, #16
 800c852:	f7f3 fe7f 	bl	8000554 <__aeabi_ui2d>
 800c856:	2d09      	cmp	r5, #9
 800c858:	4682      	mov	sl, r0
 800c85a:	468b      	mov	fp, r1
 800c85c:	dc13      	bgt.n	800c886 <_strtod_l+0x3d6>
 800c85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c860:	2b00      	cmp	r3, #0
 800c862:	f43f ae5e 	beq.w	800c522 <_strtod_l+0x72>
 800c866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c868:	dd78      	ble.n	800c95c <_strtod_l+0x4ac>
 800c86a:	2b16      	cmp	r3, #22
 800c86c:	dc5f      	bgt.n	800c92e <_strtod_l+0x47e>
 800c86e:	4974      	ldr	r1, [pc, #464]	@ (800ca40 <_strtod_l+0x590>)
 800c870:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c874:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c878:	4652      	mov	r2, sl
 800c87a:	465b      	mov	r3, fp
 800c87c:	f7f3 fee4 	bl	8000648 <__aeabi_dmul>
 800c880:	4682      	mov	sl, r0
 800c882:	468b      	mov	fp, r1
 800c884:	e64d      	b.n	800c522 <_strtod_l+0x72>
 800c886:	4b6e      	ldr	r3, [pc, #440]	@ (800ca40 <_strtod_l+0x590>)
 800c888:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c88c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c890:	f7f3 feda 	bl	8000648 <__aeabi_dmul>
 800c894:	4682      	mov	sl, r0
 800c896:	9808      	ldr	r0, [sp, #32]
 800c898:	468b      	mov	fp, r1
 800c89a:	f7f3 fe5b 	bl	8000554 <__aeabi_ui2d>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	4650      	mov	r0, sl
 800c8a4:	4659      	mov	r1, fp
 800c8a6:	f7f3 fd19 	bl	80002dc <__adddf3>
 800c8aa:	2d0f      	cmp	r5, #15
 800c8ac:	4682      	mov	sl, r0
 800c8ae:	468b      	mov	fp, r1
 800c8b0:	ddd5      	ble.n	800c85e <_strtod_l+0x3ae>
 800c8b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8b4:	1b2c      	subs	r4, r5, r4
 800c8b6:	441c      	add	r4, r3
 800c8b8:	2c00      	cmp	r4, #0
 800c8ba:	f340 8096 	ble.w	800c9ea <_strtod_l+0x53a>
 800c8be:	f014 030f 	ands.w	r3, r4, #15
 800c8c2:	d00a      	beq.n	800c8da <_strtod_l+0x42a>
 800c8c4:	495e      	ldr	r1, [pc, #376]	@ (800ca40 <_strtod_l+0x590>)
 800c8c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c8ca:	4652      	mov	r2, sl
 800c8cc:	465b      	mov	r3, fp
 800c8ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8d2:	f7f3 feb9 	bl	8000648 <__aeabi_dmul>
 800c8d6:	4682      	mov	sl, r0
 800c8d8:	468b      	mov	fp, r1
 800c8da:	f034 040f 	bics.w	r4, r4, #15
 800c8de:	d073      	beq.n	800c9c8 <_strtod_l+0x518>
 800c8e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c8e4:	dd48      	ble.n	800c978 <_strtod_l+0x4c8>
 800c8e6:	2400      	movs	r4, #0
 800c8e8:	46a0      	mov	r8, r4
 800c8ea:	940a      	str	r4, [sp, #40]	@ 0x28
 800c8ec:	46a1      	mov	r9, r4
 800c8ee:	9a05      	ldr	r2, [sp, #20]
 800c8f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ca48 <_strtod_l+0x598>
 800c8f4:	2322      	movs	r3, #34	@ 0x22
 800c8f6:	6013      	str	r3, [r2, #0]
 800c8f8:	f04f 0a00 	mov.w	sl, #0
 800c8fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f43f ae0f 	beq.w	800c522 <_strtod_l+0x72>
 800c904:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c906:	9805      	ldr	r0, [sp, #20]
 800c908:	f001 fa12 	bl	800dd30 <_Bfree>
 800c90c:	9805      	ldr	r0, [sp, #20]
 800c90e:	4649      	mov	r1, r9
 800c910:	f001 fa0e 	bl	800dd30 <_Bfree>
 800c914:	9805      	ldr	r0, [sp, #20]
 800c916:	4641      	mov	r1, r8
 800c918:	f001 fa0a 	bl	800dd30 <_Bfree>
 800c91c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c91e:	9805      	ldr	r0, [sp, #20]
 800c920:	f001 fa06 	bl	800dd30 <_Bfree>
 800c924:	9805      	ldr	r0, [sp, #20]
 800c926:	4621      	mov	r1, r4
 800c928:	f001 fa02 	bl	800dd30 <_Bfree>
 800c92c:	e5f9      	b.n	800c522 <_strtod_l+0x72>
 800c92e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c930:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c934:	4293      	cmp	r3, r2
 800c936:	dbbc      	blt.n	800c8b2 <_strtod_l+0x402>
 800c938:	4c41      	ldr	r4, [pc, #260]	@ (800ca40 <_strtod_l+0x590>)
 800c93a:	f1c5 050f 	rsb	r5, r5, #15
 800c93e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c942:	4652      	mov	r2, sl
 800c944:	465b      	mov	r3, fp
 800c946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c94a:	f7f3 fe7d 	bl	8000648 <__aeabi_dmul>
 800c94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c950:	1b5d      	subs	r5, r3, r5
 800c952:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c956:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c95a:	e78f      	b.n	800c87c <_strtod_l+0x3cc>
 800c95c:	3316      	adds	r3, #22
 800c95e:	dba8      	blt.n	800c8b2 <_strtod_l+0x402>
 800c960:	4b37      	ldr	r3, [pc, #220]	@ (800ca40 <_strtod_l+0x590>)
 800c962:	eba9 0808 	sub.w	r8, r9, r8
 800c966:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c96a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c96e:	4650      	mov	r0, sl
 800c970:	4659      	mov	r1, fp
 800c972:	f7f3 ff93 	bl	800089c <__aeabi_ddiv>
 800c976:	e783      	b.n	800c880 <_strtod_l+0x3d0>
 800c978:	4b32      	ldr	r3, [pc, #200]	@ (800ca44 <_strtod_l+0x594>)
 800c97a:	9308      	str	r3, [sp, #32]
 800c97c:	2300      	movs	r3, #0
 800c97e:	1124      	asrs	r4, r4, #4
 800c980:	4650      	mov	r0, sl
 800c982:	4659      	mov	r1, fp
 800c984:	461e      	mov	r6, r3
 800c986:	2c01      	cmp	r4, #1
 800c988:	dc21      	bgt.n	800c9ce <_strtod_l+0x51e>
 800c98a:	b10b      	cbz	r3, 800c990 <_strtod_l+0x4e0>
 800c98c:	4682      	mov	sl, r0
 800c98e:	468b      	mov	fp, r1
 800c990:	492c      	ldr	r1, [pc, #176]	@ (800ca44 <_strtod_l+0x594>)
 800c992:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c996:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c99a:	4652      	mov	r2, sl
 800c99c:	465b      	mov	r3, fp
 800c99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9a2:	f7f3 fe51 	bl	8000648 <__aeabi_dmul>
 800c9a6:	4b28      	ldr	r3, [pc, #160]	@ (800ca48 <_strtod_l+0x598>)
 800c9a8:	460a      	mov	r2, r1
 800c9aa:	400b      	ands	r3, r1
 800c9ac:	4927      	ldr	r1, [pc, #156]	@ (800ca4c <_strtod_l+0x59c>)
 800c9ae:	428b      	cmp	r3, r1
 800c9b0:	4682      	mov	sl, r0
 800c9b2:	d898      	bhi.n	800c8e6 <_strtod_l+0x436>
 800c9b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c9b8:	428b      	cmp	r3, r1
 800c9ba:	bf86      	itte	hi
 800c9bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ca50 <_strtod_l+0x5a0>
 800c9c0:	f04f 3aff 	movhi.w	sl, #4294967295
 800c9c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	9308      	str	r3, [sp, #32]
 800c9cc:	e07a      	b.n	800cac4 <_strtod_l+0x614>
 800c9ce:	07e2      	lsls	r2, r4, #31
 800c9d0:	d505      	bpl.n	800c9de <_strtod_l+0x52e>
 800c9d2:	9b08      	ldr	r3, [sp, #32]
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	f7f3 fe36 	bl	8000648 <__aeabi_dmul>
 800c9dc:	2301      	movs	r3, #1
 800c9de:	9a08      	ldr	r2, [sp, #32]
 800c9e0:	3208      	adds	r2, #8
 800c9e2:	3601      	adds	r6, #1
 800c9e4:	1064      	asrs	r4, r4, #1
 800c9e6:	9208      	str	r2, [sp, #32]
 800c9e8:	e7cd      	b.n	800c986 <_strtod_l+0x4d6>
 800c9ea:	d0ed      	beq.n	800c9c8 <_strtod_l+0x518>
 800c9ec:	4264      	negs	r4, r4
 800c9ee:	f014 020f 	ands.w	r2, r4, #15
 800c9f2:	d00a      	beq.n	800ca0a <_strtod_l+0x55a>
 800c9f4:	4b12      	ldr	r3, [pc, #72]	@ (800ca40 <_strtod_l+0x590>)
 800c9f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9fa:	4650      	mov	r0, sl
 800c9fc:	4659      	mov	r1, fp
 800c9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca02:	f7f3 ff4b 	bl	800089c <__aeabi_ddiv>
 800ca06:	4682      	mov	sl, r0
 800ca08:	468b      	mov	fp, r1
 800ca0a:	1124      	asrs	r4, r4, #4
 800ca0c:	d0dc      	beq.n	800c9c8 <_strtod_l+0x518>
 800ca0e:	2c1f      	cmp	r4, #31
 800ca10:	dd20      	ble.n	800ca54 <_strtod_l+0x5a4>
 800ca12:	2400      	movs	r4, #0
 800ca14:	46a0      	mov	r8, r4
 800ca16:	940a      	str	r4, [sp, #40]	@ 0x28
 800ca18:	46a1      	mov	r9, r4
 800ca1a:	9a05      	ldr	r2, [sp, #20]
 800ca1c:	2322      	movs	r3, #34	@ 0x22
 800ca1e:	f04f 0a00 	mov.w	sl, #0
 800ca22:	f04f 0b00 	mov.w	fp, #0
 800ca26:	6013      	str	r3, [r2, #0]
 800ca28:	e768      	b.n	800c8fc <_strtod_l+0x44c>
 800ca2a:	bf00      	nop
 800ca2c:	0800f85f 	.word	0x0800f85f
 800ca30:	0800f864 	.word	0x0800f864
 800ca34:	0800f856 	.word	0x0800f856
 800ca38:	0800f859 	.word	0x0800f859
 800ca3c:	0800fc0f 	.word	0x0800fc0f
 800ca40:	0800f9d8 	.word	0x0800f9d8
 800ca44:	0800f9b0 	.word	0x0800f9b0
 800ca48:	7ff00000 	.word	0x7ff00000
 800ca4c:	7ca00000 	.word	0x7ca00000
 800ca50:	7fefffff 	.word	0x7fefffff
 800ca54:	f014 0310 	ands.w	r3, r4, #16
 800ca58:	bf18      	it	ne
 800ca5a:	236a      	movne	r3, #106	@ 0x6a
 800ca5c:	4ea9      	ldr	r6, [pc, #676]	@ (800cd04 <_strtod_l+0x854>)
 800ca5e:	9308      	str	r3, [sp, #32]
 800ca60:	4650      	mov	r0, sl
 800ca62:	4659      	mov	r1, fp
 800ca64:	2300      	movs	r3, #0
 800ca66:	07e2      	lsls	r2, r4, #31
 800ca68:	d504      	bpl.n	800ca74 <_strtod_l+0x5c4>
 800ca6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca6e:	f7f3 fdeb 	bl	8000648 <__aeabi_dmul>
 800ca72:	2301      	movs	r3, #1
 800ca74:	1064      	asrs	r4, r4, #1
 800ca76:	f106 0608 	add.w	r6, r6, #8
 800ca7a:	d1f4      	bne.n	800ca66 <_strtod_l+0x5b6>
 800ca7c:	b10b      	cbz	r3, 800ca82 <_strtod_l+0x5d2>
 800ca7e:	4682      	mov	sl, r0
 800ca80:	468b      	mov	fp, r1
 800ca82:	9b08      	ldr	r3, [sp, #32]
 800ca84:	b1b3      	cbz	r3, 800cab4 <_strtod_l+0x604>
 800ca86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ca8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	4659      	mov	r1, fp
 800ca92:	dd0f      	ble.n	800cab4 <_strtod_l+0x604>
 800ca94:	2b1f      	cmp	r3, #31
 800ca96:	dd55      	ble.n	800cb44 <_strtod_l+0x694>
 800ca98:	2b34      	cmp	r3, #52	@ 0x34
 800ca9a:	bfde      	ittt	le
 800ca9c:	f04f 33ff 	movle.w	r3, #4294967295
 800caa0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800caa4:	4093      	lslle	r3, r2
 800caa6:	f04f 0a00 	mov.w	sl, #0
 800caaa:	bfcc      	ite	gt
 800caac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cab0:	ea03 0b01 	andle.w	fp, r3, r1
 800cab4:	2200      	movs	r2, #0
 800cab6:	2300      	movs	r3, #0
 800cab8:	4650      	mov	r0, sl
 800caba:	4659      	mov	r1, fp
 800cabc:	f7f4 f82c 	bl	8000b18 <__aeabi_dcmpeq>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d1a6      	bne.n	800ca12 <_strtod_l+0x562>
 800cac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800caca:	9805      	ldr	r0, [sp, #20]
 800cacc:	462b      	mov	r3, r5
 800cace:	463a      	mov	r2, r7
 800cad0:	f001 f996 	bl	800de00 <__s2b>
 800cad4:	900a      	str	r0, [sp, #40]	@ 0x28
 800cad6:	2800      	cmp	r0, #0
 800cad8:	f43f af05 	beq.w	800c8e6 <_strtod_l+0x436>
 800cadc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cade:	2a00      	cmp	r2, #0
 800cae0:	eba9 0308 	sub.w	r3, r9, r8
 800cae4:	bfa8      	it	ge
 800cae6:	2300      	movge	r3, #0
 800cae8:	9312      	str	r3, [sp, #72]	@ 0x48
 800caea:	2400      	movs	r4, #0
 800caec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800caf0:	9316      	str	r3, [sp, #88]	@ 0x58
 800caf2:	46a0      	mov	r8, r4
 800caf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caf6:	9805      	ldr	r0, [sp, #20]
 800caf8:	6859      	ldr	r1, [r3, #4]
 800cafa:	f001 f8d9 	bl	800dcb0 <_Balloc>
 800cafe:	4681      	mov	r9, r0
 800cb00:	2800      	cmp	r0, #0
 800cb02:	f43f aef4 	beq.w	800c8ee <_strtod_l+0x43e>
 800cb06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb08:	691a      	ldr	r2, [r3, #16]
 800cb0a:	3202      	adds	r2, #2
 800cb0c:	f103 010c 	add.w	r1, r3, #12
 800cb10:	0092      	lsls	r2, r2, #2
 800cb12:	300c      	adds	r0, #12
 800cb14:	f000 fc6f 	bl	800d3f6 <memcpy>
 800cb18:	ec4b ab10 	vmov	d0, sl, fp
 800cb1c:	9805      	ldr	r0, [sp, #20]
 800cb1e:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb20:	a91b      	add	r1, sp, #108	@ 0x6c
 800cb22:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cb26:	f001 fca7 	bl	800e478 <__d2b>
 800cb2a:	901a      	str	r0, [sp, #104]	@ 0x68
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	f43f aede 	beq.w	800c8ee <_strtod_l+0x43e>
 800cb32:	9805      	ldr	r0, [sp, #20]
 800cb34:	2101      	movs	r1, #1
 800cb36:	f001 f9f9 	bl	800df2c <__i2b>
 800cb3a:	4680      	mov	r8, r0
 800cb3c:	b948      	cbnz	r0, 800cb52 <_strtod_l+0x6a2>
 800cb3e:	f04f 0800 	mov.w	r8, #0
 800cb42:	e6d4      	b.n	800c8ee <_strtod_l+0x43e>
 800cb44:	f04f 32ff 	mov.w	r2, #4294967295
 800cb48:	fa02 f303 	lsl.w	r3, r2, r3
 800cb4c:	ea03 0a0a 	and.w	sl, r3, sl
 800cb50:	e7b0      	b.n	800cab4 <_strtod_l+0x604>
 800cb52:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cb54:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cb56:	2d00      	cmp	r5, #0
 800cb58:	bfab      	itete	ge
 800cb5a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cb5c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cb5e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cb60:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cb62:	bfac      	ite	ge
 800cb64:	18ef      	addge	r7, r5, r3
 800cb66:	1b5e      	sublt	r6, r3, r5
 800cb68:	9b08      	ldr	r3, [sp, #32]
 800cb6a:	1aed      	subs	r5, r5, r3
 800cb6c:	4415      	add	r5, r2
 800cb6e:	4b66      	ldr	r3, [pc, #408]	@ (800cd08 <_strtod_l+0x858>)
 800cb70:	3d01      	subs	r5, #1
 800cb72:	429d      	cmp	r5, r3
 800cb74:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cb78:	da50      	bge.n	800cc1c <_strtod_l+0x76c>
 800cb7a:	1b5b      	subs	r3, r3, r5
 800cb7c:	2b1f      	cmp	r3, #31
 800cb7e:	eba2 0203 	sub.w	r2, r2, r3
 800cb82:	f04f 0101 	mov.w	r1, #1
 800cb86:	dc3d      	bgt.n	800cc04 <_strtod_l+0x754>
 800cb88:	fa01 f303 	lsl.w	r3, r1, r3
 800cb8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb8e:	2300      	movs	r3, #0
 800cb90:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb92:	18bd      	adds	r5, r7, r2
 800cb94:	9b08      	ldr	r3, [sp, #32]
 800cb96:	42af      	cmp	r7, r5
 800cb98:	4416      	add	r6, r2
 800cb9a:	441e      	add	r6, r3
 800cb9c:	463b      	mov	r3, r7
 800cb9e:	bfa8      	it	ge
 800cba0:	462b      	movge	r3, r5
 800cba2:	42b3      	cmp	r3, r6
 800cba4:	bfa8      	it	ge
 800cba6:	4633      	movge	r3, r6
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	bfc2      	ittt	gt
 800cbac:	1aed      	subgt	r5, r5, r3
 800cbae:	1af6      	subgt	r6, r6, r3
 800cbb0:	1aff      	subgt	r7, r7, r3
 800cbb2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	dd16      	ble.n	800cbe6 <_strtod_l+0x736>
 800cbb8:	4641      	mov	r1, r8
 800cbba:	9805      	ldr	r0, [sp, #20]
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	f001 fa75 	bl	800e0ac <__pow5mult>
 800cbc2:	4680      	mov	r8, r0
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d0ba      	beq.n	800cb3e <_strtod_l+0x68e>
 800cbc8:	4601      	mov	r1, r0
 800cbca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cbcc:	9805      	ldr	r0, [sp, #20]
 800cbce:	f001 f9c3 	bl	800df58 <__multiply>
 800cbd2:	900e      	str	r0, [sp, #56]	@ 0x38
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	f43f ae8a 	beq.w	800c8ee <_strtod_l+0x43e>
 800cbda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbdc:	9805      	ldr	r0, [sp, #20]
 800cbde:	f001 f8a7 	bl	800dd30 <_Bfree>
 800cbe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbe4:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbe6:	2d00      	cmp	r5, #0
 800cbe8:	dc1d      	bgt.n	800cc26 <_strtod_l+0x776>
 800cbea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	dd23      	ble.n	800cc38 <_strtod_l+0x788>
 800cbf0:	4649      	mov	r1, r9
 800cbf2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cbf4:	9805      	ldr	r0, [sp, #20]
 800cbf6:	f001 fa59 	bl	800e0ac <__pow5mult>
 800cbfa:	4681      	mov	r9, r0
 800cbfc:	b9e0      	cbnz	r0, 800cc38 <_strtod_l+0x788>
 800cbfe:	f04f 0900 	mov.w	r9, #0
 800cc02:	e674      	b.n	800c8ee <_strtod_l+0x43e>
 800cc04:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cc08:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cc0c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cc10:	35e2      	adds	r5, #226	@ 0xe2
 800cc12:	fa01 f305 	lsl.w	r3, r1, r5
 800cc16:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc18:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cc1a:	e7ba      	b.n	800cb92 <_strtod_l+0x6e2>
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc20:	2301      	movs	r3, #1
 800cc22:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc24:	e7b5      	b.n	800cb92 <_strtod_l+0x6e2>
 800cc26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc28:	9805      	ldr	r0, [sp, #20]
 800cc2a:	462a      	mov	r2, r5
 800cc2c:	f001 fa98 	bl	800e160 <__lshift>
 800cc30:	901a      	str	r0, [sp, #104]	@ 0x68
 800cc32:	2800      	cmp	r0, #0
 800cc34:	d1d9      	bne.n	800cbea <_strtod_l+0x73a>
 800cc36:	e65a      	b.n	800c8ee <_strtod_l+0x43e>
 800cc38:	2e00      	cmp	r6, #0
 800cc3a:	dd07      	ble.n	800cc4c <_strtod_l+0x79c>
 800cc3c:	4649      	mov	r1, r9
 800cc3e:	9805      	ldr	r0, [sp, #20]
 800cc40:	4632      	mov	r2, r6
 800cc42:	f001 fa8d 	bl	800e160 <__lshift>
 800cc46:	4681      	mov	r9, r0
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d0d8      	beq.n	800cbfe <_strtod_l+0x74e>
 800cc4c:	2f00      	cmp	r7, #0
 800cc4e:	dd08      	ble.n	800cc62 <_strtod_l+0x7b2>
 800cc50:	4641      	mov	r1, r8
 800cc52:	9805      	ldr	r0, [sp, #20]
 800cc54:	463a      	mov	r2, r7
 800cc56:	f001 fa83 	bl	800e160 <__lshift>
 800cc5a:	4680      	mov	r8, r0
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	f43f ae46 	beq.w	800c8ee <_strtod_l+0x43e>
 800cc62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc64:	9805      	ldr	r0, [sp, #20]
 800cc66:	464a      	mov	r2, r9
 800cc68:	f001 fb02 	bl	800e270 <__mdiff>
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	f43f ae3d 	beq.w	800c8ee <_strtod_l+0x43e>
 800cc74:	68c3      	ldr	r3, [r0, #12]
 800cc76:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc78:	2300      	movs	r3, #0
 800cc7a:	60c3      	str	r3, [r0, #12]
 800cc7c:	4641      	mov	r1, r8
 800cc7e:	f001 fadb 	bl	800e238 <__mcmp>
 800cc82:	2800      	cmp	r0, #0
 800cc84:	da46      	bge.n	800cd14 <_strtod_l+0x864>
 800cc86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc88:	ea53 030a 	orrs.w	r3, r3, sl
 800cc8c:	d16c      	bne.n	800cd68 <_strtod_l+0x8b8>
 800cc8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d168      	bne.n	800cd68 <_strtod_l+0x8b8>
 800cc96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc9a:	0d1b      	lsrs	r3, r3, #20
 800cc9c:	051b      	lsls	r3, r3, #20
 800cc9e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cca2:	d961      	bls.n	800cd68 <_strtod_l+0x8b8>
 800cca4:	6963      	ldr	r3, [r4, #20]
 800cca6:	b913      	cbnz	r3, 800ccae <_strtod_l+0x7fe>
 800cca8:	6923      	ldr	r3, [r4, #16]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	dd5c      	ble.n	800cd68 <_strtod_l+0x8b8>
 800ccae:	4621      	mov	r1, r4
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	9805      	ldr	r0, [sp, #20]
 800ccb4:	f001 fa54 	bl	800e160 <__lshift>
 800ccb8:	4641      	mov	r1, r8
 800ccba:	4604      	mov	r4, r0
 800ccbc:	f001 fabc 	bl	800e238 <__mcmp>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	dd51      	ble.n	800cd68 <_strtod_l+0x8b8>
 800ccc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ccc8:	9a08      	ldr	r2, [sp, #32]
 800ccca:	0d1b      	lsrs	r3, r3, #20
 800cccc:	051b      	lsls	r3, r3, #20
 800ccce:	2a00      	cmp	r2, #0
 800ccd0:	d06b      	beq.n	800cdaa <_strtod_l+0x8fa>
 800ccd2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ccd6:	d868      	bhi.n	800cdaa <_strtod_l+0x8fa>
 800ccd8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ccdc:	f67f ae9d 	bls.w	800ca1a <_strtod_l+0x56a>
 800cce0:	4b0a      	ldr	r3, [pc, #40]	@ (800cd0c <_strtod_l+0x85c>)
 800cce2:	4650      	mov	r0, sl
 800cce4:	4659      	mov	r1, fp
 800cce6:	2200      	movs	r2, #0
 800cce8:	f7f3 fcae 	bl	8000648 <__aeabi_dmul>
 800ccec:	4b08      	ldr	r3, [pc, #32]	@ (800cd10 <_strtod_l+0x860>)
 800ccee:	400b      	ands	r3, r1
 800ccf0:	4682      	mov	sl, r0
 800ccf2:	468b      	mov	fp, r1
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f47f ae05 	bne.w	800c904 <_strtod_l+0x454>
 800ccfa:	9a05      	ldr	r2, [sp, #20]
 800ccfc:	2322      	movs	r3, #34	@ 0x22
 800ccfe:	6013      	str	r3, [r2, #0]
 800cd00:	e600      	b.n	800c904 <_strtod_l+0x454>
 800cd02:	bf00      	nop
 800cd04:	0800f890 	.word	0x0800f890
 800cd08:	fffffc02 	.word	0xfffffc02
 800cd0c:	39500000 	.word	0x39500000
 800cd10:	7ff00000 	.word	0x7ff00000
 800cd14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cd18:	d165      	bne.n	800cde6 <_strtod_l+0x936>
 800cd1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd20:	b35a      	cbz	r2, 800cd7a <_strtod_l+0x8ca>
 800cd22:	4a9f      	ldr	r2, [pc, #636]	@ (800cfa0 <_strtod_l+0xaf0>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d12b      	bne.n	800cd80 <_strtod_l+0x8d0>
 800cd28:	9b08      	ldr	r3, [sp, #32]
 800cd2a:	4651      	mov	r1, sl
 800cd2c:	b303      	cbz	r3, 800cd70 <_strtod_l+0x8c0>
 800cd2e:	4b9d      	ldr	r3, [pc, #628]	@ (800cfa4 <_strtod_l+0xaf4>)
 800cd30:	465a      	mov	r2, fp
 800cd32:	4013      	ands	r3, r2
 800cd34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cd38:	f04f 32ff 	mov.w	r2, #4294967295
 800cd3c:	d81b      	bhi.n	800cd76 <_strtod_l+0x8c6>
 800cd3e:	0d1b      	lsrs	r3, r3, #20
 800cd40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cd44:	fa02 f303 	lsl.w	r3, r2, r3
 800cd48:	4299      	cmp	r1, r3
 800cd4a:	d119      	bne.n	800cd80 <_strtod_l+0x8d0>
 800cd4c:	4b96      	ldr	r3, [pc, #600]	@ (800cfa8 <_strtod_l+0xaf8>)
 800cd4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d102      	bne.n	800cd5a <_strtod_l+0x8aa>
 800cd54:	3101      	adds	r1, #1
 800cd56:	f43f adca 	beq.w	800c8ee <_strtod_l+0x43e>
 800cd5a:	4b92      	ldr	r3, [pc, #584]	@ (800cfa4 <_strtod_l+0xaf4>)
 800cd5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd5e:	401a      	ands	r2, r3
 800cd60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cd64:	f04f 0a00 	mov.w	sl, #0
 800cd68:	9b08      	ldr	r3, [sp, #32]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1b8      	bne.n	800cce0 <_strtod_l+0x830>
 800cd6e:	e5c9      	b.n	800c904 <_strtod_l+0x454>
 800cd70:	f04f 33ff 	mov.w	r3, #4294967295
 800cd74:	e7e8      	b.n	800cd48 <_strtod_l+0x898>
 800cd76:	4613      	mov	r3, r2
 800cd78:	e7e6      	b.n	800cd48 <_strtod_l+0x898>
 800cd7a:	ea53 030a 	orrs.w	r3, r3, sl
 800cd7e:	d0a1      	beq.n	800ccc4 <_strtod_l+0x814>
 800cd80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd82:	b1db      	cbz	r3, 800cdbc <_strtod_l+0x90c>
 800cd84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd86:	4213      	tst	r3, r2
 800cd88:	d0ee      	beq.n	800cd68 <_strtod_l+0x8b8>
 800cd8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd8c:	9a08      	ldr	r2, [sp, #32]
 800cd8e:	4650      	mov	r0, sl
 800cd90:	4659      	mov	r1, fp
 800cd92:	b1bb      	cbz	r3, 800cdc4 <_strtod_l+0x914>
 800cd94:	f7ff fb6b 	bl	800c46e <sulp>
 800cd98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd9c:	ec53 2b10 	vmov	r2, r3, d0
 800cda0:	f7f3 fa9c 	bl	80002dc <__adddf3>
 800cda4:	4682      	mov	sl, r0
 800cda6:	468b      	mov	fp, r1
 800cda8:	e7de      	b.n	800cd68 <_strtod_l+0x8b8>
 800cdaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cdae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cdb2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cdb6:	f04f 3aff 	mov.w	sl, #4294967295
 800cdba:	e7d5      	b.n	800cd68 <_strtod_l+0x8b8>
 800cdbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cdbe:	ea13 0f0a 	tst.w	r3, sl
 800cdc2:	e7e1      	b.n	800cd88 <_strtod_l+0x8d8>
 800cdc4:	f7ff fb53 	bl	800c46e <sulp>
 800cdc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdcc:	ec53 2b10 	vmov	r2, r3, d0
 800cdd0:	f7f3 fa82 	bl	80002d8 <__aeabi_dsub>
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	4682      	mov	sl, r0
 800cdda:	468b      	mov	fp, r1
 800cddc:	f7f3 fe9c 	bl	8000b18 <__aeabi_dcmpeq>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d0c1      	beq.n	800cd68 <_strtod_l+0x8b8>
 800cde4:	e619      	b.n	800ca1a <_strtod_l+0x56a>
 800cde6:	4641      	mov	r1, r8
 800cde8:	4620      	mov	r0, r4
 800cdea:	f001 fb9d 	bl	800e528 <__ratio>
 800cdee:	ec57 6b10 	vmov	r6, r7, d0
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	4639      	mov	r1, r7
 800cdfc:	f7f3 fea0 	bl	8000b40 <__aeabi_dcmple>
 800ce00:	2800      	cmp	r0, #0
 800ce02:	d06f      	beq.n	800cee4 <_strtod_l+0xa34>
 800ce04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d17a      	bne.n	800cf00 <_strtod_l+0xa50>
 800ce0a:	f1ba 0f00 	cmp.w	sl, #0
 800ce0e:	d158      	bne.n	800cec2 <_strtod_l+0xa12>
 800ce10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d15a      	bne.n	800ced0 <_strtod_l+0xa20>
 800ce1a:	4b64      	ldr	r3, [pc, #400]	@ (800cfac <_strtod_l+0xafc>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	4630      	mov	r0, r6
 800ce20:	4639      	mov	r1, r7
 800ce22:	f7f3 fe83 	bl	8000b2c <__aeabi_dcmplt>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d159      	bne.n	800cede <_strtod_l+0xa2e>
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	4639      	mov	r1, r7
 800ce2e:	4b60      	ldr	r3, [pc, #384]	@ (800cfb0 <_strtod_l+0xb00>)
 800ce30:	2200      	movs	r2, #0
 800ce32:	f7f3 fc09 	bl	8000648 <__aeabi_dmul>
 800ce36:	4606      	mov	r6, r0
 800ce38:	460f      	mov	r7, r1
 800ce3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ce3e:	9606      	str	r6, [sp, #24]
 800ce40:	9307      	str	r3, [sp, #28]
 800ce42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce46:	4d57      	ldr	r5, [pc, #348]	@ (800cfa4 <_strtod_l+0xaf4>)
 800ce48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ce4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce4e:	401d      	ands	r5, r3
 800ce50:	4b58      	ldr	r3, [pc, #352]	@ (800cfb4 <_strtod_l+0xb04>)
 800ce52:	429d      	cmp	r5, r3
 800ce54:	f040 80b2 	bne.w	800cfbc <_strtod_l+0xb0c>
 800ce58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ce5e:	ec4b ab10 	vmov	d0, sl, fp
 800ce62:	f001 fa99 	bl	800e398 <__ulp>
 800ce66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce6a:	ec51 0b10 	vmov	r0, r1, d0
 800ce6e:	f7f3 fbeb 	bl	8000648 <__aeabi_dmul>
 800ce72:	4652      	mov	r2, sl
 800ce74:	465b      	mov	r3, fp
 800ce76:	f7f3 fa31 	bl	80002dc <__adddf3>
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	4949      	ldr	r1, [pc, #292]	@ (800cfa4 <_strtod_l+0xaf4>)
 800ce7e:	4a4e      	ldr	r2, [pc, #312]	@ (800cfb8 <_strtod_l+0xb08>)
 800ce80:	4019      	ands	r1, r3
 800ce82:	4291      	cmp	r1, r2
 800ce84:	4682      	mov	sl, r0
 800ce86:	d942      	bls.n	800cf0e <_strtod_l+0xa5e>
 800ce88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ce8a:	4b47      	ldr	r3, [pc, #284]	@ (800cfa8 <_strtod_l+0xaf8>)
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d103      	bne.n	800ce98 <_strtod_l+0x9e8>
 800ce90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce92:	3301      	adds	r3, #1
 800ce94:	f43f ad2b 	beq.w	800c8ee <_strtod_l+0x43e>
 800ce98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cfa8 <_strtod_l+0xaf8>
 800ce9c:	f04f 3aff 	mov.w	sl, #4294967295
 800cea0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cea2:	9805      	ldr	r0, [sp, #20]
 800cea4:	f000 ff44 	bl	800dd30 <_Bfree>
 800cea8:	9805      	ldr	r0, [sp, #20]
 800ceaa:	4649      	mov	r1, r9
 800ceac:	f000 ff40 	bl	800dd30 <_Bfree>
 800ceb0:	9805      	ldr	r0, [sp, #20]
 800ceb2:	4641      	mov	r1, r8
 800ceb4:	f000 ff3c 	bl	800dd30 <_Bfree>
 800ceb8:	9805      	ldr	r0, [sp, #20]
 800ceba:	4621      	mov	r1, r4
 800cebc:	f000 ff38 	bl	800dd30 <_Bfree>
 800cec0:	e618      	b.n	800caf4 <_strtod_l+0x644>
 800cec2:	f1ba 0f01 	cmp.w	sl, #1
 800cec6:	d103      	bne.n	800ced0 <_strtod_l+0xa20>
 800cec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f43f ada5 	beq.w	800ca1a <_strtod_l+0x56a>
 800ced0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cf80 <_strtod_l+0xad0>
 800ced4:	4f35      	ldr	r7, [pc, #212]	@ (800cfac <_strtod_l+0xafc>)
 800ced6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ceda:	2600      	movs	r6, #0
 800cedc:	e7b1      	b.n	800ce42 <_strtod_l+0x992>
 800cede:	4f34      	ldr	r7, [pc, #208]	@ (800cfb0 <_strtod_l+0xb00>)
 800cee0:	2600      	movs	r6, #0
 800cee2:	e7aa      	b.n	800ce3a <_strtod_l+0x98a>
 800cee4:	4b32      	ldr	r3, [pc, #200]	@ (800cfb0 <_strtod_l+0xb00>)
 800cee6:	4630      	mov	r0, r6
 800cee8:	4639      	mov	r1, r7
 800ceea:	2200      	movs	r2, #0
 800ceec:	f7f3 fbac 	bl	8000648 <__aeabi_dmul>
 800cef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cef2:	4606      	mov	r6, r0
 800cef4:	460f      	mov	r7, r1
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d09f      	beq.n	800ce3a <_strtod_l+0x98a>
 800cefa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cefe:	e7a0      	b.n	800ce42 <_strtod_l+0x992>
 800cf00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cf88 <_strtod_l+0xad8>
 800cf04:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf08:	ec57 6b17 	vmov	r6, r7, d7
 800cf0c:	e799      	b.n	800ce42 <_strtod_l+0x992>
 800cf0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cf12:	9b08      	ldr	r3, [sp, #32]
 800cf14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1c1      	bne.n	800cea0 <_strtod_l+0x9f0>
 800cf1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf20:	0d1b      	lsrs	r3, r3, #20
 800cf22:	051b      	lsls	r3, r3, #20
 800cf24:	429d      	cmp	r5, r3
 800cf26:	d1bb      	bne.n	800cea0 <_strtod_l+0x9f0>
 800cf28:	4630      	mov	r0, r6
 800cf2a:	4639      	mov	r1, r7
 800cf2c:	f7f3 fffa 	bl	8000f24 <__aeabi_d2lz>
 800cf30:	f7f3 fb5c 	bl	80005ec <__aeabi_l2d>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	4630      	mov	r0, r6
 800cf3a:	4639      	mov	r1, r7
 800cf3c:	f7f3 f9cc 	bl	80002d8 <__aeabi_dsub>
 800cf40:	460b      	mov	r3, r1
 800cf42:	4602      	mov	r2, r0
 800cf44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cf48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cf4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf4e:	ea46 060a 	orr.w	r6, r6, sl
 800cf52:	431e      	orrs	r6, r3
 800cf54:	d06f      	beq.n	800d036 <_strtod_l+0xb86>
 800cf56:	a30e      	add	r3, pc, #56	@ (adr r3, 800cf90 <_strtod_l+0xae0>)
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	f7f3 fde6 	bl	8000b2c <__aeabi_dcmplt>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	f47f accf 	bne.w	800c904 <_strtod_l+0x454>
 800cf66:	a30c      	add	r3, pc, #48	@ (adr r3, 800cf98 <_strtod_l+0xae8>)
 800cf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf70:	f7f3 fdfa 	bl	8000b68 <__aeabi_dcmpgt>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d093      	beq.n	800cea0 <_strtod_l+0x9f0>
 800cf78:	e4c4      	b.n	800c904 <_strtod_l+0x454>
 800cf7a:	bf00      	nop
 800cf7c:	f3af 8000 	nop.w
 800cf80:	00000000 	.word	0x00000000
 800cf84:	bff00000 	.word	0xbff00000
 800cf88:	00000000 	.word	0x00000000
 800cf8c:	3ff00000 	.word	0x3ff00000
 800cf90:	94a03595 	.word	0x94a03595
 800cf94:	3fdfffff 	.word	0x3fdfffff
 800cf98:	35afe535 	.word	0x35afe535
 800cf9c:	3fe00000 	.word	0x3fe00000
 800cfa0:	000fffff 	.word	0x000fffff
 800cfa4:	7ff00000 	.word	0x7ff00000
 800cfa8:	7fefffff 	.word	0x7fefffff
 800cfac:	3ff00000 	.word	0x3ff00000
 800cfb0:	3fe00000 	.word	0x3fe00000
 800cfb4:	7fe00000 	.word	0x7fe00000
 800cfb8:	7c9fffff 	.word	0x7c9fffff
 800cfbc:	9b08      	ldr	r3, [sp, #32]
 800cfbe:	b323      	cbz	r3, 800d00a <_strtod_l+0xb5a>
 800cfc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cfc4:	d821      	bhi.n	800d00a <_strtod_l+0xb5a>
 800cfc6:	a328      	add	r3, pc, #160	@ (adr r3, 800d068 <_strtod_l+0xbb8>)
 800cfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfcc:	4630      	mov	r0, r6
 800cfce:	4639      	mov	r1, r7
 800cfd0:	f7f3 fdb6 	bl	8000b40 <__aeabi_dcmple>
 800cfd4:	b1a0      	cbz	r0, 800d000 <_strtod_l+0xb50>
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f7f3 fe0d 	bl	8000bf8 <__aeabi_d2uiz>
 800cfde:	2801      	cmp	r0, #1
 800cfe0:	bf38      	it	cc
 800cfe2:	2001      	movcc	r0, #1
 800cfe4:	f7f3 fab6 	bl	8000554 <__aeabi_ui2d>
 800cfe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfea:	4606      	mov	r6, r0
 800cfec:	460f      	mov	r7, r1
 800cfee:	b9fb      	cbnz	r3, 800d030 <_strtod_l+0xb80>
 800cff0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cff4:	9014      	str	r0, [sp, #80]	@ 0x50
 800cff6:	9315      	str	r3, [sp, #84]	@ 0x54
 800cff8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cffc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d000:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d002:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d006:	1b5b      	subs	r3, r3, r5
 800d008:	9311      	str	r3, [sp, #68]	@ 0x44
 800d00a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d00e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d012:	f001 f9c1 	bl	800e398 <__ulp>
 800d016:	4650      	mov	r0, sl
 800d018:	ec53 2b10 	vmov	r2, r3, d0
 800d01c:	4659      	mov	r1, fp
 800d01e:	f7f3 fb13 	bl	8000648 <__aeabi_dmul>
 800d022:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d026:	f7f3 f959 	bl	80002dc <__adddf3>
 800d02a:	4682      	mov	sl, r0
 800d02c:	468b      	mov	fp, r1
 800d02e:	e770      	b.n	800cf12 <_strtod_l+0xa62>
 800d030:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d034:	e7e0      	b.n	800cff8 <_strtod_l+0xb48>
 800d036:	a30e      	add	r3, pc, #56	@ (adr r3, 800d070 <_strtod_l+0xbc0>)
 800d038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03c:	f7f3 fd76 	bl	8000b2c <__aeabi_dcmplt>
 800d040:	e798      	b.n	800cf74 <_strtod_l+0xac4>
 800d042:	2300      	movs	r3, #0
 800d044:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d046:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d048:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d04a:	6013      	str	r3, [r2, #0]
 800d04c:	f7ff ba6d 	b.w	800c52a <_strtod_l+0x7a>
 800d050:	2a65      	cmp	r2, #101	@ 0x65
 800d052:	f43f ab66 	beq.w	800c722 <_strtod_l+0x272>
 800d056:	2a45      	cmp	r2, #69	@ 0x45
 800d058:	f43f ab63 	beq.w	800c722 <_strtod_l+0x272>
 800d05c:	2301      	movs	r3, #1
 800d05e:	f7ff bb9e 	b.w	800c79e <_strtod_l+0x2ee>
 800d062:	bf00      	nop
 800d064:	f3af 8000 	nop.w
 800d068:	ffc00000 	.word	0xffc00000
 800d06c:	41dfffff 	.word	0x41dfffff
 800d070:	94a03595 	.word	0x94a03595
 800d074:	3fcfffff 	.word	0x3fcfffff

0800d078 <strtod>:
 800d078:	460a      	mov	r2, r1
 800d07a:	4601      	mov	r1, r0
 800d07c:	4802      	ldr	r0, [pc, #8]	@ (800d088 <strtod+0x10>)
 800d07e:	4b03      	ldr	r3, [pc, #12]	@ (800d08c <strtod+0x14>)
 800d080:	6800      	ldr	r0, [r0, #0]
 800d082:	f7ff ba15 	b.w	800c4b0 <_strtod_l>
 800d086:	bf00      	nop
 800d088:	200001bc 	.word	0x200001bc
 800d08c:	20000050 	.word	0x20000050

0800d090 <std>:
 800d090:	2300      	movs	r3, #0
 800d092:	b510      	push	{r4, lr}
 800d094:	4604      	mov	r4, r0
 800d096:	e9c0 3300 	strd	r3, r3, [r0]
 800d09a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d09e:	6083      	str	r3, [r0, #8]
 800d0a0:	8181      	strh	r1, [r0, #12]
 800d0a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d0a4:	81c2      	strh	r2, [r0, #14]
 800d0a6:	6183      	str	r3, [r0, #24]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	2208      	movs	r2, #8
 800d0ac:	305c      	adds	r0, #92	@ 0x5c
 800d0ae:	f000 f914 	bl	800d2da <memset>
 800d0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d0e8 <std+0x58>)
 800d0b4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d0b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d0ec <std+0x5c>)
 800d0b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d0ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d0f0 <std+0x60>)
 800d0bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d0be:	4b0d      	ldr	r3, [pc, #52]	@ (800d0f4 <std+0x64>)
 800d0c0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d0f8 <std+0x68>)
 800d0c4:	6224      	str	r4, [r4, #32]
 800d0c6:	429c      	cmp	r4, r3
 800d0c8:	d006      	beq.n	800d0d8 <std+0x48>
 800d0ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d0ce:	4294      	cmp	r4, r2
 800d0d0:	d002      	beq.n	800d0d8 <std+0x48>
 800d0d2:	33d0      	adds	r3, #208	@ 0xd0
 800d0d4:	429c      	cmp	r4, r3
 800d0d6:	d105      	bne.n	800d0e4 <std+0x54>
 800d0d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0e0:	f000 b986 	b.w	800d3f0 <__retarget_lock_init_recursive>
 800d0e4:	bd10      	pop	{r4, pc}
 800d0e6:	bf00      	nop
 800d0e8:	0800d255 	.word	0x0800d255
 800d0ec:	0800d277 	.word	0x0800d277
 800d0f0:	0800d2af 	.word	0x0800d2af
 800d0f4:	0800d2d3 	.word	0x0800d2d3
 800d0f8:	20000c84 	.word	0x20000c84

0800d0fc <stdio_exit_handler>:
 800d0fc:	4a02      	ldr	r2, [pc, #8]	@ (800d108 <stdio_exit_handler+0xc>)
 800d0fe:	4903      	ldr	r1, [pc, #12]	@ (800d10c <stdio_exit_handler+0x10>)
 800d100:	4803      	ldr	r0, [pc, #12]	@ (800d110 <stdio_exit_handler+0x14>)
 800d102:	f000 b869 	b.w	800d1d8 <_fwalk_sglue>
 800d106:	bf00      	nop
 800d108:	20000044 	.word	0x20000044
 800d10c:	0800ed01 	.word	0x0800ed01
 800d110:	200001c0 	.word	0x200001c0

0800d114 <cleanup_stdio>:
 800d114:	6841      	ldr	r1, [r0, #4]
 800d116:	4b0c      	ldr	r3, [pc, #48]	@ (800d148 <cleanup_stdio+0x34>)
 800d118:	4299      	cmp	r1, r3
 800d11a:	b510      	push	{r4, lr}
 800d11c:	4604      	mov	r4, r0
 800d11e:	d001      	beq.n	800d124 <cleanup_stdio+0x10>
 800d120:	f001 fdee 	bl	800ed00 <_fflush_r>
 800d124:	68a1      	ldr	r1, [r4, #8]
 800d126:	4b09      	ldr	r3, [pc, #36]	@ (800d14c <cleanup_stdio+0x38>)
 800d128:	4299      	cmp	r1, r3
 800d12a:	d002      	beq.n	800d132 <cleanup_stdio+0x1e>
 800d12c:	4620      	mov	r0, r4
 800d12e:	f001 fde7 	bl	800ed00 <_fflush_r>
 800d132:	68e1      	ldr	r1, [r4, #12]
 800d134:	4b06      	ldr	r3, [pc, #24]	@ (800d150 <cleanup_stdio+0x3c>)
 800d136:	4299      	cmp	r1, r3
 800d138:	d004      	beq.n	800d144 <cleanup_stdio+0x30>
 800d13a:	4620      	mov	r0, r4
 800d13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d140:	f001 bdde 	b.w	800ed00 <_fflush_r>
 800d144:	bd10      	pop	{r4, pc}
 800d146:	bf00      	nop
 800d148:	20000c84 	.word	0x20000c84
 800d14c:	20000cec 	.word	0x20000cec
 800d150:	20000d54 	.word	0x20000d54

0800d154 <global_stdio_init.part.0>:
 800d154:	b510      	push	{r4, lr}
 800d156:	4b0b      	ldr	r3, [pc, #44]	@ (800d184 <global_stdio_init.part.0+0x30>)
 800d158:	4c0b      	ldr	r4, [pc, #44]	@ (800d188 <global_stdio_init.part.0+0x34>)
 800d15a:	4a0c      	ldr	r2, [pc, #48]	@ (800d18c <global_stdio_init.part.0+0x38>)
 800d15c:	601a      	str	r2, [r3, #0]
 800d15e:	4620      	mov	r0, r4
 800d160:	2200      	movs	r2, #0
 800d162:	2104      	movs	r1, #4
 800d164:	f7ff ff94 	bl	800d090 <std>
 800d168:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d16c:	2201      	movs	r2, #1
 800d16e:	2109      	movs	r1, #9
 800d170:	f7ff ff8e 	bl	800d090 <std>
 800d174:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d178:	2202      	movs	r2, #2
 800d17a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d17e:	2112      	movs	r1, #18
 800d180:	f7ff bf86 	b.w	800d090 <std>
 800d184:	20000dbc 	.word	0x20000dbc
 800d188:	20000c84 	.word	0x20000c84
 800d18c:	0800d0fd 	.word	0x0800d0fd

0800d190 <__sfp_lock_acquire>:
 800d190:	4801      	ldr	r0, [pc, #4]	@ (800d198 <__sfp_lock_acquire+0x8>)
 800d192:	f000 b92e 	b.w	800d3f2 <__retarget_lock_acquire_recursive>
 800d196:	bf00      	nop
 800d198:	20000dc5 	.word	0x20000dc5

0800d19c <__sfp_lock_release>:
 800d19c:	4801      	ldr	r0, [pc, #4]	@ (800d1a4 <__sfp_lock_release+0x8>)
 800d19e:	f000 b929 	b.w	800d3f4 <__retarget_lock_release_recursive>
 800d1a2:	bf00      	nop
 800d1a4:	20000dc5 	.word	0x20000dc5

0800d1a8 <__sinit>:
 800d1a8:	b510      	push	{r4, lr}
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	f7ff fff0 	bl	800d190 <__sfp_lock_acquire>
 800d1b0:	6a23      	ldr	r3, [r4, #32]
 800d1b2:	b11b      	cbz	r3, 800d1bc <__sinit+0x14>
 800d1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1b8:	f7ff bff0 	b.w	800d19c <__sfp_lock_release>
 800d1bc:	4b04      	ldr	r3, [pc, #16]	@ (800d1d0 <__sinit+0x28>)
 800d1be:	6223      	str	r3, [r4, #32]
 800d1c0:	4b04      	ldr	r3, [pc, #16]	@ (800d1d4 <__sinit+0x2c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1f5      	bne.n	800d1b4 <__sinit+0xc>
 800d1c8:	f7ff ffc4 	bl	800d154 <global_stdio_init.part.0>
 800d1cc:	e7f2      	b.n	800d1b4 <__sinit+0xc>
 800d1ce:	bf00      	nop
 800d1d0:	0800d115 	.word	0x0800d115
 800d1d4:	20000dbc 	.word	0x20000dbc

0800d1d8 <_fwalk_sglue>:
 800d1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1dc:	4607      	mov	r7, r0
 800d1de:	4688      	mov	r8, r1
 800d1e0:	4614      	mov	r4, r2
 800d1e2:	2600      	movs	r6, #0
 800d1e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1e8:	f1b9 0901 	subs.w	r9, r9, #1
 800d1ec:	d505      	bpl.n	800d1fa <_fwalk_sglue+0x22>
 800d1ee:	6824      	ldr	r4, [r4, #0]
 800d1f0:	2c00      	cmp	r4, #0
 800d1f2:	d1f7      	bne.n	800d1e4 <_fwalk_sglue+0xc>
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1fa:	89ab      	ldrh	r3, [r5, #12]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d907      	bls.n	800d210 <_fwalk_sglue+0x38>
 800d200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d204:	3301      	adds	r3, #1
 800d206:	d003      	beq.n	800d210 <_fwalk_sglue+0x38>
 800d208:	4629      	mov	r1, r5
 800d20a:	4638      	mov	r0, r7
 800d20c:	47c0      	blx	r8
 800d20e:	4306      	orrs	r6, r0
 800d210:	3568      	adds	r5, #104	@ 0x68
 800d212:	e7e9      	b.n	800d1e8 <_fwalk_sglue+0x10>

0800d214 <siprintf>:
 800d214:	b40e      	push	{r1, r2, r3}
 800d216:	b500      	push	{lr}
 800d218:	b09c      	sub	sp, #112	@ 0x70
 800d21a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d21c:	9002      	str	r0, [sp, #8]
 800d21e:	9006      	str	r0, [sp, #24]
 800d220:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d224:	4809      	ldr	r0, [pc, #36]	@ (800d24c <siprintf+0x38>)
 800d226:	9107      	str	r1, [sp, #28]
 800d228:	9104      	str	r1, [sp, #16]
 800d22a:	4909      	ldr	r1, [pc, #36]	@ (800d250 <siprintf+0x3c>)
 800d22c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d230:	9105      	str	r1, [sp, #20]
 800d232:	6800      	ldr	r0, [r0, #0]
 800d234:	9301      	str	r3, [sp, #4]
 800d236:	a902      	add	r1, sp, #8
 800d238:	f001 fa54 	bl	800e6e4 <_svfiprintf_r>
 800d23c:	9b02      	ldr	r3, [sp, #8]
 800d23e:	2200      	movs	r2, #0
 800d240:	701a      	strb	r2, [r3, #0]
 800d242:	b01c      	add	sp, #112	@ 0x70
 800d244:	f85d eb04 	ldr.w	lr, [sp], #4
 800d248:	b003      	add	sp, #12
 800d24a:	4770      	bx	lr
 800d24c:	200001bc 	.word	0x200001bc
 800d250:	ffff0208 	.word	0xffff0208

0800d254 <__sread>:
 800d254:	b510      	push	{r4, lr}
 800d256:	460c      	mov	r4, r1
 800d258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d25c:	f000 f87a 	bl	800d354 <_read_r>
 800d260:	2800      	cmp	r0, #0
 800d262:	bfab      	itete	ge
 800d264:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d266:	89a3      	ldrhlt	r3, [r4, #12]
 800d268:	181b      	addge	r3, r3, r0
 800d26a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d26e:	bfac      	ite	ge
 800d270:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d272:	81a3      	strhlt	r3, [r4, #12]
 800d274:	bd10      	pop	{r4, pc}

0800d276 <__swrite>:
 800d276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d27a:	461f      	mov	r7, r3
 800d27c:	898b      	ldrh	r3, [r1, #12]
 800d27e:	05db      	lsls	r3, r3, #23
 800d280:	4605      	mov	r5, r0
 800d282:	460c      	mov	r4, r1
 800d284:	4616      	mov	r6, r2
 800d286:	d505      	bpl.n	800d294 <__swrite+0x1e>
 800d288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d28c:	2302      	movs	r3, #2
 800d28e:	2200      	movs	r2, #0
 800d290:	f000 f84e 	bl	800d330 <_lseek_r>
 800d294:	89a3      	ldrh	r3, [r4, #12]
 800d296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d29a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d29e:	81a3      	strh	r3, [r4, #12]
 800d2a0:	4632      	mov	r2, r6
 800d2a2:	463b      	mov	r3, r7
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2aa:	f000 b865 	b.w	800d378 <_write_r>

0800d2ae <__sseek>:
 800d2ae:	b510      	push	{r4, lr}
 800d2b0:	460c      	mov	r4, r1
 800d2b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2b6:	f000 f83b 	bl	800d330 <_lseek_r>
 800d2ba:	1c43      	adds	r3, r0, #1
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	bf15      	itete	ne
 800d2c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d2c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d2c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d2ca:	81a3      	strheq	r3, [r4, #12]
 800d2cc:	bf18      	it	ne
 800d2ce:	81a3      	strhne	r3, [r4, #12]
 800d2d0:	bd10      	pop	{r4, pc}

0800d2d2 <__sclose>:
 800d2d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2d6:	f000 b81b 	b.w	800d310 <_close_r>

0800d2da <memset>:
 800d2da:	4402      	add	r2, r0
 800d2dc:	4603      	mov	r3, r0
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d100      	bne.n	800d2e4 <memset+0xa>
 800d2e2:	4770      	bx	lr
 800d2e4:	f803 1b01 	strb.w	r1, [r3], #1
 800d2e8:	e7f9      	b.n	800d2de <memset+0x4>

0800d2ea <strncmp>:
 800d2ea:	b510      	push	{r4, lr}
 800d2ec:	b16a      	cbz	r2, 800d30a <strncmp+0x20>
 800d2ee:	3901      	subs	r1, #1
 800d2f0:	1884      	adds	r4, r0, r2
 800d2f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d103      	bne.n	800d306 <strncmp+0x1c>
 800d2fe:	42a0      	cmp	r0, r4
 800d300:	d001      	beq.n	800d306 <strncmp+0x1c>
 800d302:	2a00      	cmp	r2, #0
 800d304:	d1f5      	bne.n	800d2f2 <strncmp+0x8>
 800d306:	1ad0      	subs	r0, r2, r3
 800d308:	bd10      	pop	{r4, pc}
 800d30a:	4610      	mov	r0, r2
 800d30c:	e7fc      	b.n	800d308 <strncmp+0x1e>
	...

0800d310 <_close_r>:
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	4d06      	ldr	r5, [pc, #24]	@ (800d32c <_close_r+0x1c>)
 800d314:	2300      	movs	r3, #0
 800d316:	4604      	mov	r4, r0
 800d318:	4608      	mov	r0, r1
 800d31a:	602b      	str	r3, [r5, #0]
 800d31c:	f7f6 f9ce 	bl	80036bc <_close>
 800d320:	1c43      	adds	r3, r0, #1
 800d322:	d102      	bne.n	800d32a <_close_r+0x1a>
 800d324:	682b      	ldr	r3, [r5, #0]
 800d326:	b103      	cbz	r3, 800d32a <_close_r+0x1a>
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	bd38      	pop	{r3, r4, r5, pc}
 800d32c:	20000dc0 	.word	0x20000dc0

0800d330 <_lseek_r>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	4d07      	ldr	r5, [pc, #28]	@ (800d350 <_lseek_r+0x20>)
 800d334:	4604      	mov	r4, r0
 800d336:	4608      	mov	r0, r1
 800d338:	4611      	mov	r1, r2
 800d33a:	2200      	movs	r2, #0
 800d33c:	602a      	str	r2, [r5, #0]
 800d33e:	461a      	mov	r2, r3
 800d340:	f7f6 f9e3 	bl	800370a <_lseek>
 800d344:	1c43      	adds	r3, r0, #1
 800d346:	d102      	bne.n	800d34e <_lseek_r+0x1e>
 800d348:	682b      	ldr	r3, [r5, #0]
 800d34a:	b103      	cbz	r3, 800d34e <_lseek_r+0x1e>
 800d34c:	6023      	str	r3, [r4, #0]
 800d34e:	bd38      	pop	{r3, r4, r5, pc}
 800d350:	20000dc0 	.word	0x20000dc0

0800d354 <_read_r>:
 800d354:	b538      	push	{r3, r4, r5, lr}
 800d356:	4d07      	ldr	r5, [pc, #28]	@ (800d374 <_read_r+0x20>)
 800d358:	4604      	mov	r4, r0
 800d35a:	4608      	mov	r0, r1
 800d35c:	4611      	mov	r1, r2
 800d35e:	2200      	movs	r2, #0
 800d360:	602a      	str	r2, [r5, #0]
 800d362:	461a      	mov	r2, r3
 800d364:	f7f6 f971 	bl	800364a <_read>
 800d368:	1c43      	adds	r3, r0, #1
 800d36a:	d102      	bne.n	800d372 <_read_r+0x1e>
 800d36c:	682b      	ldr	r3, [r5, #0]
 800d36e:	b103      	cbz	r3, 800d372 <_read_r+0x1e>
 800d370:	6023      	str	r3, [r4, #0]
 800d372:	bd38      	pop	{r3, r4, r5, pc}
 800d374:	20000dc0 	.word	0x20000dc0

0800d378 <_write_r>:
 800d378:	b538      	push	{r3, r4, r5, lr}
 800d37a:	4d07      	ldr	r5, [pc, #28]	@ (800d398 <_write_r+0x20>)
 800d37c:	4604      	mov	r4, r0
 800d37e:	4608      	mov	r0, r1
 800d380:	4611      	mov	r1, r2
 800d382:	2200      	movs	r2, #0
 800d384:	602a      	str	r2, [r5, #0]
 800d386:	461a      	mov	r2, r3
 800d388:	f7f6 f97c 	bl	8003684 <_write>
 800d38c:	1c43      	adds	r3, r0, #1
 800d38e:	d102      	bne.n	800d396 <_write_r+0x1e>
 800d390:	682b      	ldr	r3, [r5, #0]
 800d392:	b103      	cbz	r3, 800d396 <_write_r+0x1e>
 800d394:	6023      	str	r3, [r4, #0]
 800d396:	bd38      	pop	{r3, r4, r5, pc}
 800d398:	20000dc0 	.word	0x20000dc0

0800d39c <__errno>:
 800d39c:	4b01      	ldr	r3, [pc, #4]	@ (800d3a4 <__errno+0x8>)
 800d39e:	6818      	ldr	r0, [r3, #0]
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop
 800d3a4:	200001bc 	.word	0x200001bc

0800d3a8 <__libc_init_array>:
 800d3a8:	b570      	push	{r4, r5, r6, lr}
 800d3aa:	4d0d      	ldr	r5, [pc, #52]	@ (800d3e0 <__libc_init_array+0x38>)
 800d3ac:	4c0d      	ldr	r4, [pc, #52]	@ (800d3e4 <__libc_init_array+0x3c>)
 800d3ae:	1b64      	subs	r4, r4, r5
 800d3b0:	10a4      	asrs	r4, r4, #2
 800d3b2:	2600      	movs	r6, #0
 800d3b4:	42a6      	cmp	r6, r4
 800d3b6:	d109      	bne.n	800d3cc <__libc_init_array+0x24>
 800d3b8:	4d0b      	ldr	r5, [pc, #44]	@ (800d3e8 <__libc_init_array+0x40>)
 800d3ba:	4c0c      	ldr	r4, [pc, #48]	@ (800d3ec <__libc_init_array+0x44>)
 800d3bc:	f002 f9ce 	bl	800f75c <_init>
 800d3c0:	1b64      	subs	r4, r4, r5
 800d3c2:	10a4      	asrs	r4, r4, #2
 800d3c4:	2600      	movs	r6, #0
 800d3c6:	42a6      	cmp	r6, r4
 800d3c8:	d105      	bne.n	800d3d6 <__libc_init_array+0x2e>
 800d3ca:	bd70      	pop	{r4, r5, r6, pc}
 800d3cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3d0:	4798      	blx	r3
 800d3d2:	3601      	adds	r6, #1
 800d3d4:	e7ee      	b.n	800d3b4 <__libc_init_array+0xc>
 800d3d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3da:	4798      	blx	r3
 800d3dc:	3601      	adds	r6, #1
 800d3de:	e7f2      	b.n	800d3c6 <__libc_init_array+0x1e>
 800d3e0:	0800fc28 	.word	0x0800fc28
 800d3e4:	0800fc28 	.word	0x0800fc28
 800d3e8:	0800fc28 	.word	0x0800fc28
 800d3ec:	0800fc2c 	.word	0x0800fc2c

0800d3f0 <__retarget_lock_init_recursive>:
 800d3f0:	4770      	bx	lr

0800d3f2 <__retarget_lock_acquire_recursive>:
 800d3f2:	4770      	bx	lr

0800d3f4 <__retarget_lock_release_recursive>:
 800d3f4:	4770      	bx	lr

0800d3f6 <memcpy>:
 800d3f6:	440a      	add	r2, r1
 800d3f8:	4291      	cmp	r1, r2
 800d3fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3fe:	d100      	bne.n	800d402 <memcpy+0xc>
 800d400:	4770      	bx	lr
 800d402:	b510      	push	{r4, lr}
 800d404:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d408:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d40c:	4291      	cmp	r1, r2
 800d40e:	d1f9      	bne.n	800d404 <memcpy+0xe>
 800d410:	bd10      	pop	{r4, pc}
 800d412:	0000      	movs	r0, r0
 800d414:	0000      	movs	r0, r0
	...

0800d418 <nan>:
 800d418:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d420 <nan+0x8>
 800d41c:	4770      	bx	lr
 800d41e:	bf00      	nop
 800d420:	00000000 	.word	0x00000000
 800d424:	7ff80000 	.word	0x7ff80000

0800d428 <_free_r>:
 800d428:	b538      	push	{r3, r4, r5, lr}
 800d42a:	4605      	mov	r5, r0
 800d42c:	2900      	cmp	r1, #0
 800d42e:	d041      	beq.n	800d4b4 <_free_r+0x8c>
 800d430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d434:	1f0c      	subs	r4, r1, #4
 800d436:	2b00      	cmp	r3, #0
 800d438:	bfb8      	it	lt
 800d43a:	18e4      	addlt	r4, r4, r3
 800d43c:	f000 fc2c 	bl	800dc98 <__malloc_lock>
 800d440:	4a1d      	ldr	r2, [pc, #116]	@ (800d4b8 <_free_r+0x90>)
 800d442:	6813      	ldr	r3, [r2, #0]
 800d444:	b933      	cbnz	r3, 800d454 <_free_r+0x2c>
 800d446:	6063      	str	r3, [r4, #4]
 800d448:	6014      	str	r4, [r2, #0]
 800d44a:	4628      	mov	r0, r5
 800d44c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d450:	f000 bc28 	b.w	800dca4 <__malloc_unlock>
 800d454:	42a3      	cmp	r3, r4
 800d456:	d908      	bls.n	800d46a <_free_r+0x42>
 800d458:	6820      	ldr	r0, [r4, #0]
 800d45a:	1821      	adds	r1, r4, r0
 800d45c:	428b      	cmp	r3, r1
 800d45e:	bf01      	itttt	eq
 800d460:	6819      	ldreq	r1, [r3, #0]
 800d462:	685b      	ldreq	r3, [r3, #4]
 800d464:	1809      	addeq	r1, r1, r0
 800d466:	6021      	streq	r1, [r4, #0]
 800d468:	e7ed      	b.n	800d446 <_free_r+0x1e>
 800d46a:	461a      	mov	r2, r3
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	b10b      	cbz	r3, 800d474 <_free_r+0x4c>
 800d470:	42a3      	cmp	r3, r4
 800d472:	d9fa      	bls.n	800d46a <_free_r+0x42>
 800d474:	6811      	ldr	r1, [r2, #0]
 800d476:	1850      	adds	r0, r2, r1
 800d478:	42a0      	cmp	r0, r4
 800d47a:	d10b      	bne.n	800d494 <_free_r+0x6c>
 800d47c:	6820      	ldr	r0, [r4, #0]
 800d47e:	4401      	add	r1, r0
 800d480:	1850      	adds	r0, r2, r1
 800d482:	4283      	cmp	r3, r0
 800d484:	6011      	str	r1, [r2, #0]
 800d486:	d1e0      	bne.n	800d44a <_free_r+0x22>
 800d488:	6818      	ldr	r0, [r3, #0]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	6053      	str	r3, [r2, #4]
 800d48e:	4408      	add	r0, r1
 800d490:	6010      	str	r0, [r2, #0]
 800d492:	e7da      	b.n	800d44a <_free_r+0x22>
 800d494:	d902      	bls.n	800d49c <_free_r+0x74>
 800d496:	230c      	movs	r3, #12
 800d498:	602b      	str	r3, [r5, #0]
 800d49a:	e7d6      	b.n	800d44a <_free_r+0x22>
 800d49c:	6820      	ldr	r0, [r4, #0]
 800d49e:	1821      	adds	r1, r4, r0
 800d4a0:	428b      	cmp	r3, r1
 800d4a2:	bf04      	itt	eq
 800d4a4:	6819      	ldreq	r1, [r3, #0]
 800d4a6:	685b      	ldreq	r3, [r3, #4]
 800d4a8:	6063      	str	r3, [r4, #4]
 800d4aa:	bf04      	itt	eq
 800d4ac:	1809      	addeq	r1, r1, r0
 800d4ae:	6021      	streq	r1, [r4, #0]
 800d4b0:	6054      	str	r4, [r2, #4]
 800d4b2:	e7ca      	b.n	800d44a <_free_r+0x22>
 800d4b4:	bd38      	pop	{r3, r4, r5, pc}
 800d4b6:	bf00      	nop
 800d4b8:	20000dcc 	.word	0x20000dcc

0800d4bc <rshift>:
 800d4bc:	6903      	ldr	r3, [r0, #16]
 800d4be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d4c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d4ca:	f100 0414 	add.w	r4, r0, #20
 800d4ce:	dd45      	ble.n	800d55c <rshift+0xa0>
 800d4d0:	f011 011f 	ands.w	r1, r1, #31
 800d4d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d4d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d4dc:	d10c      	bne.n	800d4f8 <rshift+0x3c>
 800d4de:	f100 0710 	add.w	r7, r0, #16
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	42b1      	cmp	r1, r6
 800d4e6:	d334      	bcc.n	800d552 <rshift+0x96>
 800d4e8:	1a9b      	subs	r3, r3, r2
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	1eea      	subs	r2, r5, #3
 800d4ee:	4296      	cmp	r6, r2
 800d4f0:	bf38      	it	cc
 800d4f2:	2300      	movcc	r3, #0
 800d4f4:	4423      	add	r3, r4
 800d4f6:	e015      	b.n	800d524 <rshift+0x68>
 800d4f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d4fc:	f1c1 0820 	rsb	r8, r1, #32
 800d500:	40cf      	lsrs	r7, r1
 800d502:	f105 0e04 	add.w	lr, r5, #4
 800d506:	46a1      	mov	r9, r4
 800d508:	4576      	cmp	r6, lr
 800d50a:	46f4      	mov	ip, lr
 800d50c:	d815      	bhi.n	800d53a <rshift+0x7e>
 800d50e:	1a9a      	subs	r2, r3, r2
 800d510:	0092      	lsls	r2, r2, #2
 800d512:	3a04      	subs	r2, #4
 800d514:	3501      	adds	r5, #1
 800d516:	42ae      	cmp	r6, r5
 800d518:	bf38      	it	cc
 800d51a:	2200      	movcc	r2, #0
 800d51c:	18a3      	adds	r3, r4, r2
 800d51e:	50a7      	str	r7, [r4, r2]
 800d520:	b107      	cbz	r7, 800d524 <rshift+0x68>
 800d522:	3304      	adds	r3, #4
 800d524:	1b1a      	subs	r2, r3, r4
 800d526:	42a3      	cmp	r3, r4
 800d528:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d52c:	bf08      	it	eq
 800d52e:	2300      	moveq	r3, #0
 800d530:	6102      	str	r2, [r0, #16]
 800d532:	bf08      	it	eq
 800d534:	6143      	streq	r3, [r0, #20]
 800d536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d53a:	f8dc c000 	ldr.w	ip, [ip]
 800d53e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d542:	ea4c 0707 	orr.w	r7, ip, r7
 800d546:	f849 7b04 	str.w	r7, [r9], #4
 800d54a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d54e:	40cf      	lsrs	r7, r1
 800d550:	e7da      	b.n	800d508 <rshift+0x4c>
 800d552:	f851 cb04 	ldr.w	ip, [r1], #4
 800d556:	f847 cf04 	str.w	ip, [r7, #4]!
 800d55a:	e7c3      	b.n	800d4e4 <rshift+0x28>
 800d55c:	4623      	mov	r3, r4
 800d55e:	e7e1      	b.n	800d524 <rshift+0x68>

0800d560 <__hexdig_fun>:
 800d560:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d564:	2b09      	cmp	r3, #9
 800d566:	d802      	bhi.n	800d56e <__hexdig_fun+0xe>
 800d568:	3820      	subs	r0, #32
 800d56a:	b2c0      	uxtb	r0, r0
 800d56c:	4770      	bx	lr
 800d56e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d572:	2b05      	cmp	r3, #5
 800d574:	d801      	bhi.n	800d57a <__hexdig_fun+0x1a>
 800d576:	3847      	subs	r0, #71	@ 0x47
 800d578:	e7f7      	b.n	800d56a <__hexdig_fun+0xa>
 800d57a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d57e:	2b05      	cmp	r3, #5
 800d580:	d801      	bhi.n	800d586 <__hexdig_fun+0x26>
 800d582:	3827      	subs	r0, #39	@ 0x27
 800d584:	e7f1      	b.n	800d56a <__hexdig_fun+0xa>
 800d586:	2000      	movs	r0, #0
 800d588:	4770      	bx	lr
	...

0800d58c <__gethex>:
 800d58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d590:	b085      	sub	sp, #20
 800d592:	468a      	mov	sl, r1
 800d594:	9302      	str	r3, [sp, #8]
 800d596:	680b      	ldr	r3, [r1, #0]
 800d598:	9001      	str	r0, [sp, #4]
 800d59a:	4690      	mov	r8, r2
 800d59c:	1c9c      	adds	r4, r3, #2
 800d59e:	46a1      	mov	r9, r4
 800d5a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d5a4:	2830      	cmp	r0, #48	@ 0x30
 800d5a6:	d0fa      	beq.n	800d59e <__gethex+0x12>
 800d5a8:	eba9 0303 	sub.w	r3, r9, r3
 800d5ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800d5b0:	f7ff ffd6 	bl	800d560 <__hexdig_fun>
 800d5b4:	4605      	mov	r5, r0
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	d168      	bne.n	800d68c <__gethex+0x100>
 800d5ba:	49a0      	ldr	r1, [pc, #640]	@ (800d83c <__gethex+0x2b0>)
 800d5bc:	2201      	movs	r2, #1
 800d5be:	4648      	mov	r0, r9
 800d5c0:	f7ff fe93 	bl	800d2ea <strncmp>
 800d5c4:	4607      	mov	r7, r0
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	d167      	bne.n	800d69a <__gethex+0x10e>
 800d5ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d5ce:	4626      	mov	r6, r4
 800d5d0:	f7ff ffc6 	bl	800d560 <__hexdig_fun>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d062      	beq.n	800d69e <__gethex+0x112>
 800d5d8:	4623      	mov	r3, r4
 800d5da:	7818      	ldrb	r0, [r3, #0]
 800d5dc:	2830      	cmp	r0, #48	@ 0x30
 800d5de:	4699      	mov	r9, r3
 800d5e0:	f103 0301 	add.w	r3, r3, #1
 800d5e4:	d0f9      	beq.n	800d5da <__gethex+0x4e>
 800d5e6:	f7ff ffbb 	bl	800d560 <__hexdig_fun>
 800d5ea:	fab0 f580 	clz	r5, r0
 800d5ee:	096d      	lsrs	r5, r5, #5
 800d5f0:	f04f 0b01 	mov.w	fp, #1
 800d5f4:	464a      	mov	r2, r9
 800d5f6:	4616      	mov	r6, r2
 800d5f8:	3201      	adds	r2, #1
 800d5fa:	7830      	ldrb	r0, [r6, #0]
 800d5fc:	f7ff ffb0 	bl	800d560 <__hexdig_fun>
 800d600:	2800      	cmp	r0, #0
 800d602:	d1f8      	bne.n	800d5f6 <__gethex+0x6a>
 800d604:	498d      	ldr	r1, [pc, #564]	@ (800d83c <__gethex+0x2b0>)
 800d606:	2201      	movs	r2, #1
 800d608:	4630      	mov	r0, r6
 800d60a:	f7ff fe6e 	bl	800d2ea <strncmp>
 800d60e:	2800      	cmp	r0, #0
 800d610:	d13f      	bne.n	800d692 <__gethex+0x106>
 800d612:	b944      	cbnz	r4, 800d626 <__gethex+0x9a>
 800d614:	1c74      	adds	r4, r6, #1
 800d616:	4622      	mov	r2, r4
 800d618:	4616      	mov	r6, r2
 800d61a:	3201      	adds	r2, #1
 800d61c:	7830      	ldrb	r0, [r6, #0]
 800d61e:	f7ff ff9f 	bl	800d560 <__hexdig_fun>
 800d622:	2800      	cmp	r0, #0
 800d624:	d1f8      	bne.n	800d618 <__gethex+0x8c>
 800d626:	1ba4      	subs	r4, r4, r6
 800d628:	00a7      	lsls	r7, r4, #2
 800d62a:	7833      	ldrb	r3, [r6, #0]
 800d62c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d630:	2b50      	cmp	r3, #80	@ 0x50
 800d632:	d13e      	bne.n	800d6b2 <__gethex+0x126>
 800d634:	7873      	ldrb	r3, [r6, #1]
 800d636:	2b2b      	cmp	r3, #43	@ 0x2b
 800d638:	d033      	beq.n	800d6a2 <__gethex+0x116>
 800d63a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d63c:	d034      	beq.n	800d6a8 <__gethex+0x11c>
 800d63e:	1c71      	adds	r1, r6, #1
 800d640:	2400      	movs	r4, #0
 800d642:	7808      	ldrb	r0, [r1, #0]
 800d644:	f7ff ff8c 	bl	800d560 <__hexdig_fun>
 800d648:	1e43      	subs	r3, r0, #1
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	2b18      	cmp	r3, #24
 800d64e:	d830      	bhi.n	800d6b2 <__gethex+0x126>
 800d650:	f1a0 0210 	sub.w	r2, r0, #16
 800d654:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d658:	f7ff ff82 	bl	800d560 <__hexdig_fun>
 800d65c:	f100 3cff 	add.w	ip, r0, #4294967295
 800d660:	fa5f fc8c 	uxtb.w	ip, ip
 800d664:	f1bc 0f18 	cmp.w	ip, #24
 800d668:	f04f 030a 	mov.w	r3, #10
 800d66c:	d91e      	bls.n	800d6ac <__gethex+0x120>
 800d66e:	b104      	cbz	r4, 800d672 <__gethex+0xe6>
 800d670:	4252      	negs	r2, r2
 800d672:	4417      	add	r7, r2
 800d674:	f8ca 1000 	str.w	r1, [sl]
 800d678:	b1ed      	cbz	r5, 800d6b6 <__gethex+0x12a>
 800d67a:	f1bb 0f00 	cmp.w	fp, #0
 800d67e:	bf0c      	ite	eq
 800d680:	2506      	moveq	r5, #6
 800d682:	2500      	movne	r5, #0
 800d684:	4628      	mov	r0, r5
 800d686:	b005      	add	sp, #20
 800d688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68c:	2500      	movs	r5, #0
 800d68e:	462c      	mov	r4, r5
 800d690:	e7b0      	b.n	800d5f4 <__gethex+0x68>
 800d692:	2c00      	cmp	r4, #0
 800d694:	d1c7      	bne.n	800d626 <__gethex+0x9a>
 800d696:	4627      	mov	r7, r4
 800d698:	e7c7      	b.n	800d62a <__gethex+0x9e>
 800d69a:	464e      	mov	r6, r9
 800d69c:	462f      	mov	r7, r5
 800d69e:	2501      	movs	r5, #1
 800d6a0:	e7c3      	b.n	800d62a <__gethex+0x9e>
 800d6a2:	2400      	movs	r4, #0
 800d6a4:	1cb1      	adds	r1, r6, #2
 800d6a6:	e7cc      	b.n	800d642 <__gethex+0xb6>
 800d6a8:	2401      	movs	r4, #1
 800d6aa:	e7fb      	b.n	800d6a4 <__gethex+0x118>
 800d6ac:	fb03 0002 	mla	r0, r3, r2, r0
 800d6b0:	e7ce      	b.n	800d650 <__gethex+0xc4>
 800d6b2:	4631      	mov	r1, r6
 800d6b4:	e7de      	b.n	800d674 <__gethex+0xe8>
 800d6b6:	eba6 0309 	sub.w	r3, r6, r9
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	4629      	mov	r1, r5
 800d6be:	2b07      	cmp	r3, #7
 800d6c0:	dc0a      	bgt.n	800d6d8 <__gethex+0x14c>
 800d6c2:	9801      	ldr	r0, [sp, #4]
 800d6c4:	f000 faf4 	bl	800dcb0 <_Balloc>
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	b940      	cbnz	r0, 800d6de <__gethex+0x152>
 800d6cc:	4b5c      	ldr	r3, [pc, #368]	@ (800d840 <__gethex+0x2b4>)
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	21e4      	movs	r1, #228	@ 0xe4
 800d6d2:	485c      	ldr	r0, [pc, #368]	@ (800d844 <__gethex+0x2b8>)
 800d6d4:	f001 fb66 	bl	800eda4 <__assert_func>
 800d6d8:	3101      	adds	r1, #1
 800d6da:	105b      	asrs	r3, r3, #1
 800d6dc:	e7ef      	b.n	800d6be <__gethex+0x132>
 800d6de:	f100 0a14 	add.w	sl, r0, #20
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	4655      	mov	r5, sl
 800d6e6:	469b      	mov	fp, r3
 800d6e8:	45b1      	cmp	r9, r6
 800d6ea:	d337      	bcc.n	800d75c <__gethex+0x1d0>
 800d6ec:	f845 bb04 	str.w	fp, [r5], #4
 800d6f0:	eba5 050a 	sub.w	r5, r5, sl
 800d6f4:	10ad      	asrs	r5, r5, #2
 800d6f6:	6125      	str	r5, [r4, #16]
 800d6f8:	4658      	mov	r0, fp
 800d6fa:	f000 fbcb 	bl	800de94 <__hi0bits>
 800d6fe:	016d      	lsls	r5, r5, #5
 800d700:	f8d8 6000 	ldr.w	r6, [r8]
 800d704:	1a2d      	subs	r5, r5, r0
 800d706:	42b5      	cmp	r5, r6
 800d708:	dd54      	ble.n	800d7b4 <__gethex+0x228>
 800d70a:	1bad      	subs	r5, r5, r6
 800d70c:	4629      	mov	r1, r5
 800d70e:	4620      	mov	r0, r4
 800d710:	f000 ff5f 	bl	800e5d2 <__any_on>
 800d714:	4681      	mov	r9, r0
 800d716:	b178      	cbz	r0, 800d738 <__gethex+0x1ac>
 800d718:	1e6b      	subs	r3, r5, #1
 800d71a:	1159      	asrs	r1, r3, #5
 800d71c:	f003 021f 	and.w	r2, r3, #31
 800d720:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d724:	f04f 0901 	mov.w	r9, #1
 800d728:	fa09 f202 	lsl.w	r2, r9, r2
 800d72c:	420a      	tst	r2, r1
 800d72e:	d003      	beq.n	800d738 <__gethex+0x1ac>
 800d730:	454b      	cmp	r3, r9
 800d732:	dc36      	bgt.n	800d7a2 <__gethex+0x216>
 800d734:	f04f 0902 	mov.w	r9, #2
 800d738:	4629      	mov	r1, r5
 800d73a:	4620      	mov	r0, r4
 800d73c:	f7ff febe 	bl	800d4bc <rshift>
 800d740:	442f      	add	r7, r5
 800d742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d746:	42bb      	cmp	r3, r7
 800d748:	da42      	bge.n	800d7d0 <__gethex+0x244>
 800d74a:	9801      	ldr	r0, [sp, #4]
 800d74c:	4621      	mov	r1, r4
 800d74e:	f000 faef 	bl	800dd30 <_Bfree>
 800d752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d754:	2300      	movs	r3, #0
 800d756:	6013      	str	r3, [r2, #0]
 800d758:	25a3      	movs	r5, #163	@ 0xa3
 800d75a:	e793      	b.n	800d684 <__gethex+0xf8>
 800d75c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d760:	2a2e      	cmp	r2, #46	@ 0x2e
 800d762:	d012      	beq.n	800d78a <__gethex+0x1fe>
 800d764:	2b20      	cmp	r3, #32
 800d766:	d104      	bne.n	800d772 <__gethex+0x1e6>
 800d768:	f845 bb04 	str.w	fp, [r5], #4
 800d76c:	f04f 0b00 	mov.w	fp, #0
 800d770:	465b      	mov	r3, fp
 800d772:	7830      	ldrb	r0, [r6, #0]
 800d774:	9303      	str	r3, [sp, #12]
 800d776:	f7ff fef3 	bl	800d560 <__hexdig_fun>
 800d77a:	9b03      	ldr	r3, [sp, #12]
 800d77c:	f000 000f 	and.w	r0, r0, #15
 800d780:	4098      	lsls	r0, r3
 800d782:	ea4b 0b00 	orr.w	fp, fp, r0
 800d786:	3304      	adds	r3, #4
 800d788:	e7ae      	b.n	800d6e8 <__gethex+0x15c>
 800d78a:	45b1      	cmp	r9, r6
 800d78c:	d8ea      	bhi.n	800d764 <__gethex+0x1d8>
 800d78e:	492b      	ldr	r1, [pc, #172]	@ (800d83c <__gethex+0x2b0>)
 800d790:	9303      	str	r3, [sp, #12]
 800d792:	2201      	movs	r2, #1
 800d794:	4630      	mov	r0, r6
 800d796:	f7ff fda8 	bl	800d2ea <strncmp>
 800d79a:	9b03      	ldr	r3, [sp, #12]
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d1e1      	bne.n	800d764 <__gethex+0x1d8>
 800d7a0:	e7a2      	b.n	800d6e8 <__gethex+0x15c>
 800d7a2:	1ea9      	subs	r1, r5, #2
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f000 ff14 	bl	800e5d2 <__any_on>
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	d0c2      	beq.n	800d734 <__gethex+0x1a8>
 800d7ae:	f04f 0903 	mov.w	r9, #3
 800d7b2:	e7c1      	b.n	800d738 <__gethex+0x1ac>
 800d7b4:	da09      	bge.n	800d7ca <__gethex+0x23e>
 800d7b6:	1b75      	subs	r5, r6, r5
 800d7b8:	4621      	mov	r1, r4
 800d7ba:	9801      	ldr	r0, [sp, #4]
 800d7bc:	462a      	mov	r2, r5
 800d7be:	f000 fccf 	bl	800e160 <__lshift>
 800d7c2:	1b7f      	subs	r7, r7, r5
 800d7c4:	4604      	mov	r4, r0
 800d7c6:	f100 0a14 	add.w	sl, r0, #20
 800d7ca:	f04f 0900 	mov.w	r9, #0
 800d7ce:	e7b8      	b.n	800d742 <__gethex+0x1b6>
 800d7d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d7d4:	42bd      	cmp	r5, r7
 800d7d6:	dd6f      	ble.n	800d8b8 <__gethex+0x32c>
 800d7d8:	1bed      	subs	r5, r5, r7
 800d7da:	42ae      	cmp	r6, r5
 800d7dc:	dc34      	bgt.n	800d848 <__gethex+0x2bc>
 800d7de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	d022      	beq.n	800d82c <__gethex+0x2a0>
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d024      	beq.n	800d834 <__gethex+0x2a8>
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d115      	bne.n	800d81a <__gethex+0x28e>
 800d7ee:	42ae      	cmp	r6, r5
 800d7f0:	d113      	bne.n	800d81a <__gethex+0x28e>
 800d7f2:	2e01      	cmp	r6, #1
 800d7f4:	d10b      	bne.n	800d80e <__gethex+0x282>
 800d7f6:	9a02      	ldr	r2, [sp, #8]
 800d7f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d7fc:	6013      	str	r3, [r2, #0]
 800d7fe:	2301      	movs	r3, #1
 800d800:	6123      	str	r3, [r4, #16]
 800d802:	f8ca 3000 	str.w	r3, [sl]
 800d806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d808:	2562      	movs	r5, #98	@ 0x62
 800d80a:	601c      	str	r4, [r3, #0]
 800d80c:	e73a      	b.n	800d684 <__gethex+0xf8>
 800d80e:	1e71      	subs	r1, r6, #1
 800d810:	4620      	mov	r0, r4
 800d812:	f000 fede 	bl	800e5d2 <__any_on>
 800d816:	2800      	cmp	r0, #0
 800d818:	d1ed      	bne.n	800d7f6 <__gethex+0x26a>
 800d81a:	9801      	ldr	r0, [sp, #4]
 800d81c:	4621      	mov	r1, r4
 800d81e:	f000 fa87 	bl	800dd30 <_Bfree>
 800d822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d824:	2300      	movs	r3, #0
 800d826:	6013      	str	r3, [r2, #0]
 800d828:	2550      	movs	r5, #80	@ 0x50
 800d82a:	e72b      	b.n	800d684 <__gethex+0xf8>
 800d82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1f3      	bne.n	800d81a <__gethex+0x28e>
 800d832:	e7e0      	b.n	800d7f6 <__gethex+0x26a>
 800d834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1dd      	bne.n	800d7f6 <__gethex+0x26a>
 800d83a:	e7ee      	b.n	800d81a <__gethex+0x28e>
 800d83c:	0800f854 	.word	0x0800f854
 800d840:	0800f8c0 	.word	0x0800f8c0
 800d844:	0800f8d1 	.word	0x0800f8d1
 800d848:	1e6f      	subs	r7, r5, #1
 800d84a:	f1b9 0f00 	cmp.w	r9, #0
 800d84e:	d130      	bne.n	800d8b2 <__gethex+0x326>
 800d850:	b127      	cbz	r7, 800d85c <__gethex+0x2d0>
 800d852:	4639      	mov	r1, r7
 800d854:	4620      	mov	r0, r4
 800d856:	f000 febc 	bl	800e5d2 <__any_on>
 800d85a:	4681      	mov	r9, r0
 800d85c:	117a      	asrs	r2, r7, #5
 800d85e:	2301      	movs	r3, #1
 800d860:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d864:	f007 071f 	and.w	r7, r7, #31
 800d868:	40bb      	lsls	r3, r7
 800d86a:	4213      	tst	r3, r2
 800d86c:	4629      	mov	r1, r5
 800d86e:	4620      	mov	r0, r4
 800d870:	bf18      	it	ne
 800d872:	f049 0902 	orrne.w	r9, r9, #2
 800d876:	f7ff fe21 	bl	800d4bc <rshift>
 800d87a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d87e:	1b76      	subs	r6, r6, r5
 800d880:	2502      	movs	r5, #2
 800d882:	f1b9 0f00 	cmp.w	r9, #0
 800d886:	d047      	beq.n	800d918 <__gethex+0x38c>
 800d888:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	d015      	beq.n	800d8bc <__gethex+0x330>
 800d890:	2b03      	cmp	r3, #3
 800d892:	d017      	beq.n	800d8c4 <__gethex+0x338>
 800d894:	2b01      	cmp	r3, #1
 800d896:	d109      	bne.n	800d8ac <__gethex+0x320>
 800d898:	f019 0f02 	tst.w	r9, #2
 800d89c:	d006      	beq.n	800d8ac <__gethex+0x320>
 800d89e:	f8da 3000 	ldr.w	r3, [sl]
 800d8a2:	ea49 0903 	orr.w	r9, r9, r3
 800d8a6:	f019 0f01 	tst.w	r9, #1
 800d8aa:	d10e      	bne.n	800d8ca <__gethex+0x33e>
 800d8ac:	f045 0510 	orr.w	r5, r5, #16
 800d8b0:	e032      	b.n	800d918 <__gethex+0x38c>
 800d8b2:	f04f 0901 	mov.w	r9, #1
 800d8b6:	e7d1      	b.n	800d85c <__gethex+0x2d0>
 800d8b8:	2501      	movs	r5, #1
 800d8ba:	e7e2      	b.n	800d882 <__gethex+0x2f6>
 800d8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8be:	f1c3 0301 	rsb	r3, r3, #1
 800d8c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d0f0      	beq.n	800d8ac <__gethex+0x320>
 800d8ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d8ce:	f104 0314 	add.w	r3, r4, #20
 800d8d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d8d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d8da:	f04f 0c00 	mov.w	ip, #0
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d8e8:	d01b      	beq.n	800d922 <__gethex+0x396>
 800d8ea:	3201      	adds	r2, #1
 800d8ec:	6002      	str	r2, [r0, #0]
 800d8ee:	2d02      	cmp	r5, #2
 800d8f0:	f104 0314 	add.w	r3, r4, #20
 800d8f4:	d13c      	bne.n	800d970 <__gethex+0x3e4>
 800d8f6:	f8d8 2000 	ldr.w	r2, [r8]
 800d8fa:	3a01      	subs	r2, #1
 800d8fc:	42b2      	cmp	r2, r6
 800d8fe:	d109      	bne.n	800d914 <__gethex+0x388>
 800d900:	1171      	asrs	r1, r6, #5
 800d902:	2201      	movs	r2, #1
 800d904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d908:	f006 061f 	and.w	r6, r6, #31
 800d90c:	fa02 f606 	lsl.w	r6, r2, r6
 800d910:	421e      	tst	r6, r3
 800d912:	d13a      	bne.n	800d98a <__gethex+0x3fe>
 800d914:	f045 0520 	orr.w	r5, r5, #32
 800d918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d91a:	601c      	str	r4, [r3, #0]
 800d91c:	9b02      	ldr	r3, [sp, #8]
 800d91e:	601f      	str	r7, [r3, #0]
 800d920:	e6b0      	b.n	800d684 <__gethex+0xf8>
 800d922:	4299      	cmp	r1, r3
 800d924:	f843 cc04 	str.w	ip, [r3, #-4]
 800d928:	d8d9      	bhi.n	800d8de <__gethex+0x352>
 800d92a:	68a3      	ldr	r3, [r4, #8]
 800d92c:	459b      	cmp	fp, r3
 800d92e:	db17      	blt.n	800d960 <__gethex+0x3d4>
 800d930:	6861      	ldr	r1, [r4, #4]
 800d932:	9801      	ldr	r0, [sp, #4]
 800d934:	3101      	adds	r1, #1
 800d936:	f000 f9bb 	bl	800dcb0 <_Balloc>
 800d93a:	4681      	mov	r9, r0
 800d93c:	b918      	cbnz	r0, 800d946 <__gethex+0x3ba>
 800d93e:	4b1a      	ldr	r3, [pc, #104]	@ (800d9a8 <__gethex+0x41c>)
 800d940:	4602      	mov	r2, r0
 800d942:	2184      	movs	r1, #132	@ 0x84
 800d944:	e6c5      	b.n	800d6d2 <__gethex+0x146>
 800d946:	6922      	ldr	r2, [r4, #16]
 800d948:	3202      	adds	r2, #2
 800d94a:	f104 010c 	add.w	r1, r4, #12
 800d94e:	0092      	lsls	r2, r2, #2
 800d950:	300c      	adds	r0, #12
 800d952:	f7ff fd50 	bl	800d3f6 <memcpy>
 800d956:	4621      	mov	r1, r4
 800d958:	9801      	ldr	r0, [sp, #4]
 800d95a:	f000 f9e9 	bl	800dd30 <_Bfree>
 800d95e:	464c      	mov	r4, r9
 800d960:	6923      	ldr	r3, [r4, #16]
 800d962:	1c5a      	adds	r2, r3, #1
 800d964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d968:	6122      	str	r2, [r4, #16]
 800d96a:	2201      	movs	r2, #1
 800d96c:	615a      	str	r2, [r3, #20]
 800d96e:	e7be      	b.n	800d8ee <__gethex+0x362>
 800d970:	6922      	ldr	r2, [r4, #16]
 800d972:	455a      	cmp	r2, fp
 800d974:	dd0b      	ble.n	800d98e <__gethex+0x402>
 800d976:	2101      	movs	r1, #1
 800d978:	4620      	mov	r0, r4
 800d97a:	f7ff fd9f 	bl	800d4bc <rshift>
 800d97e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d982:	3701      	adds	r7, #1
 800d984:	42bb      	cmp	r3, r7
 800d986:	f6ff aee0 	blt.w	800d74a <__gethex+0x1be>
 800d98a:	2501      	movs	r5, #1
 800d98c:	e7c2      	b.n	800d914 <__gethex+0x388>
 800d98e:	f016 061f 	ands.w	r6, r6, #31
 800d992:	d0fa      	beq.n	800d98a <__gethex+0x3fe>
 800d994:	4453      	add	r3, sl
 800d996:	f1c6 0620 	rsb	r6, r6, #32
 800d99a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d99e:	f000 fa79 	bl	800de94 <__hi0bits>
 800d9a2:	42b0      	cmp	r0, r6
 800d9a4:	dbe7      	blt.n	800d976 <__gethex+0x3ea>
 800d9a6:	e7f0      	b.n	800d98a <__gethex+0x3fe>
 800d9a8:	0800f8c0 	.word	0x0800f8c0

0800d9ac <L_shift>:
 800d9ac:	f1c2 0208 	rsb	r2, r2, #8
 800d9b0:	0092      	lsls	r2, r2, #2
 800d9b2:	b570      	push	{r4, r5, r6, lr}
 800d9b4:	f1c2 0620 	rsb	r6, r2, #32
 800d9b8:	6843      	ldr	r3, [r0, #4]
 800d9ba:	6804      	ldr	r4, [r0, #0]
 800d9bc:	fa03 f506 	lsl.w	r5, r3, r6
 800d9c0:	432c      	orrs	r4, r5
 800d9c2:	40d3      	lsrs	r3, r2
 800d9c4:	6004      	str	r4, [r0, #0]
 800d9c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d9ca:	4288      	cmp	r0, r1
 800d9cc:	d3f4      	bcc.n	800d9b8 <L_shift+0xc>
 800d9ce:	bd70      	pop	{r4, r5, r6, pc}

0800d9d0 <__match>:
 800d9d0:	b530      	push	{r4, r5, lr}
 800d9d2:	6803      	ldr	r3, [r0, #0]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9da:	b914      	cbnz	r4, 800d9e2 <__match+0x12>
 800d9dc:	6003      	str	r3, [r0, #0]
 800d9de:	2001      	movs	r0, #1
 800d9e0:	bd30      	pop	{r4, r5, pc}
 800d9e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d9ea:	2d19      	cmp	r5, #25
 800d9ec:	bf98      	it	ls
 800d9ee:	3220      	addls	r2, #32
 800d9f0:	42a2      	cmp	r2, r4
 800d9f2:	d0f0      	beq.n	800d9d6 <__match+0x6>
 800d9f4:	2000      	movs	r0, #0
 800d9f6:	e7f3      	b.n	800d9e0 <__match+0x10>

0800d9f8 <__hexnan>:
 800d9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fc:	680b      	ldr	r3, [r1, #0]
 800d9fe:	6801      	ldr	r1, [r0, #0]
 800da00:	115e      	asrs	r6, r3, #5
 800da02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800da06:	f013 031f 	ands.w	r3, r3, #31
 800da0a:	b087      	sub	sp, #28
 800da0c:	bf18      	it	ne
 800da0e:	3604      	addne	r6, #4
 800da10:	2500      	movs	r5, #0
 800da12:	1f37      	subs	r7, r6, #4
 800da14:	4682      	mov	sl, r0
 800da16:	4690      	mov	r8, r2
 800da18:	9301      	str	r3, [sp, #4]
 800da1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800da1e:	46b9      	mov	r9, r7
 800da20:	463c      	mov	r4, r7
 800da22:	9502      	str	r5, [sp, #8]
 800da24:	46ab      	mov	fp, r5
 800da26:	784a      	ldrb	r2, [r1, #1]
 800da28:	1c4b      	adds	r3, r1, #1
 800da2a:	9303      	str	r3, [sp, #12]
 800da2c:	b342      	cbz	r2, 800da80 <__hexnan+0x88>
 800da2e:	4610      	mov	r0, r2
 800da30:	9105      	str	r1, [sp, #20]
 800da32:	9204      	str	r2, [sp, #16]
 800da34:	f7ff fd94 	bl	800d560 <__hexdig_fun>
 800da38:	2800      	cmp	r0, #0
 800da3a:	d151      	bne.n	800dae0 <__hexnan+0xe8>
 800da3c:	9a04      	ldr	r2, [sp, #16]
 800da3e:	9905      	ldr	r1, [sp, #20]
 800da40:	2a20      	cmp	r2, #32
 800da42:	d818      	bhi.n	800da76 <__hexnan+0x7e>
 800da44:	9b02      	ldr	r3, [sp, #8]
 800da46:	459b      	cmp	fp, r3
 800da48:	dd13      	ble.n	800da72 <__hexnan+0x7a>
 800da4a:	454c      	cmp	r4, r9
 800da4c:	d206      	bcs.n	800da5c <__hexnan+0x64>
 800da4e:	2d07      	cmp	r5, #7
 800da50:	dc04      	bgt.n	800da5c <__hexnan+0x64>
 800da52:	462a      	mov	r2, r5
 800da54:	4649      	mov	r1, r9
 800da56:	4620      	mov	r0, r4
 800da58:	f7ff ffa8 	bl	800d9ac <L_shift>
 800da5c:	4544      	cmp	r4, r8
 800da5e:	d952      	bls.n	800db06 <__hexnan+0x10e>
 800da60:	2300      	movs	r3, #0
 800da62:	f1a4 0904 	sub.w	r9, r4, #4
 800da66:	f844 3c04 	str.w	r3, [r4, #-4]
 800da6a:	f8cd b008 	str.w	fp, [sp, #8]
 800da6e:	464c      	mov	r4, r9
 800da70:	461d      	mov	r5, r3
 800da72:	9903      	ldr	r1, [sp, #12]
 800da74:	e7d7      	b.n	800da26 <__hexnan+0x2e>
 800da76:	2a29      	cmp	r2, #41	@ 0x29
 800da78:	d157      	bne.n	800db2a <__hexnan+0x132>
 800da7a:	3102      	adds	r1, #2
 800da7c:	f8ca 1000 	str.w	r1, [sl]
 800da80:	f1bb 0f00 	cmp.w	fp, #0
 800da84:	d051      	beq.n	800db2a <__hexnan+0x132>
 800da86:	454c      	cmp	r4, r9
 800da88:	d206      	bcs.n	800da98 <__hexnan+0xa0>
 800da8a:	2d07      	cmp	r5, #7
 800da8c:	dc04      	bgt.n	800da98 <__hexnan+0xa0>
 800da8e:	462a      	mov	r2, r5
 800da90:	4649      	mov	r1, r9
 800da92:	4620      	mov	r0, r4
 800da94:	f7ff ff8a 	bl	800d9ac <L_shift>
 800da98:	4544      	cmp	r4, r8
 800da9a:	d936      	bls.n	800db0a <__hexnan+0x112>
 800da9c:	f1a8 0204 	sub.w	r2, r8, #4
 800daa0:	4623      	mov	r3, r4
 800daa2:	f853 1b04 	ldr.w	r1, [r3], #4
 800daa6:	f842 1f04 	str.w	r1, [r2, #4]!
 800daaa:	429f      	cmp	r7, r3
 800daac:	d2f9      	bcs.n	800daa2 <__hexnan+0xaa>
 800daae:	1b3b      	subs	r3, r7, r4
 800dab0:	f023 0303 	bic.w	r3, r3, #3
 800dab4:	3304      	adds	r3, #4
 800dab6:	3401      	adds	r4, #1
 800dab8:	3e03      	subs	r6, #3
 800daba:	42b4      	cmp	r4, r6
 800dabc:	bf88      	it	hi
 800dabe:	2304      	movhi	r3, #4
 800dac0:	4443      	add	r3, r8
 800dac2:	2200      	movs	r2, #0
 800dac4:	f843 2b04 	str.w	r2, [r3], #4
 800dac8:	429f      	cmp	r7, r3
 800daca:	d2fb      	bcs.n	800dac4 <__hexnan+0xcc>
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	b91b      	cbnz	r3, 800dad8 <__hexnan+0xe0>
 800dad0:	4547      	cmp	r7, r8
 800dad2:	d128      	bne.n	800db26 <__hexnan+0x12e>
 800dad4:	2301      	movs	r3, #1
 800dad6:	603b      	str	r3, [r7, #0]
 800dad8:	2005      	movs	r0, #5
 800dada:	b007      	add	sp, #28
 800dadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae0:	3501      	adds	r5, #1
 800dae2:	2d08      	cmp	r5, #8
 800dae4:	f10b 0b01 	add.w	fp, fp, #1
 800dae8:	dd06      	ble.n	800daf8 <__hexnan+0x100>
 800daea:	4544      	cmp	r4, r8
 800daec:	d9c1      	bls.n	800da72 <__hexnan+0x7a>
 800daee:	2300      	movs	r3, #0
 800daf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800daf4:	2501      	movs	r5, #1
 800daf6:	3c04      	subs	r4, #4
 800daf8:	6822      	ldr	r2, [r4, #0]
 800dafa:	f000 000f 	and.w	r0, r0, #15
 800dafe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800db02:	6020      	str	r0, [r4, #0]
 800db04:	e7b5      	b.n	800da72 <__hexnan+0x7a>
 800db06:	2508      	movs	r5, #8
 800db08:	e7b3      	b.n	800da72 <__hexnan+0x7a>
 800db0a:	9b01      	ldr	r3, [sp, #4]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d0dd      	beq.n	800dacc <__hexnan+0xd4>
 800db10:	f1c3 0320 	rsb	r3, r3, #32
 800db14:	f04f 32ff 	mov.w	r2, #4294967295
 800db18:	40da      	lsrs	r2, r3
 800db1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800db1e:	4013      	ands	r3, r2
 800db20:	f846 3c04 	str.w	r3, [r6, #-4]
 800db24:	e7d2      	b.n	800dacc <__hexnan+0xd4>
 800db26:	3f04      	subs	r7, #4
 800db28:	e7d0      	b.n	800dacc <__hexnan+0xd4>
 800db2a:	2004      	movs	r0, #4
 800db2c:	e7d5      	b.n	800dada <__hexnan+0xe2>
	...

0800db30 <sbrk_aligned>:
 800db30:	b570      	push	{r4, r5, r6, lr}
 800db32:	4e0f      	ldr	r6, [pc, #60]	@ (800db70 <sbrk_aligned+0x40>)
 800db34:	460c      	mov	r4, r1
 800db36:	6831      	ldr	r1, [r6, #0]
 800db38:	4605      	mov	r5, r0
 800db3a:	b911      	cbnz	r1, 800db42 <sbrk_aligned+0x12>
 800db3c:	f001 f922 	bl	800ed84 <_sbrk_r>
 800db40:	6030      	str	r0, [r6, #0]
 800db42:	4621      	mov	r1, r4
 800db44:	4628      	mov	r0, r5
 800db46:	f001 f91d 	bl	800ed84 <_sbrk_r>
 800db4a:	1c43      	adds	r3, r0, #1
 800db4c:	d103      	bne.n	800db56 <sbrk_aligned+0x26>
 800db4e:	f04f 34ff 	mov.w	r4, #4294967295
 800db52:	4620      	mov	r0, r4
 800db54:	bd70      	pop	{r4, r5, r6, pc}
 800db56:	1cc4      	adds	r4, r0, #3
 800db58:	f024 0403 	bic.w	r4, r4, #3
 800db5c:	42a0      	cmp	r0, r4
 800db5e:	d0f8      	beq.n	800db52 <sbrk_aligned+0x22>
 800db60:	1a21      	subs	r1, r4, r0
 800db62:	4628      	mov	r0, r5
 800db64:	f001 f90e 	bl	800ed84 <_sbrk_r>
 800db68:	3001      	adds	r0, #1
 800db6a:	d1f2      	bne.n	800db52 <sbrk_aligned+0x22>
 800db6c:	e7ef      	b.n	800db4e <sbrk_aligned+0x1e>
 800db6e:	bf00      	nop
 800db70:	20000dc8 	.word	0x20000dc8

0800db74 <_malloc_r>:
 800db74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db78:	1ccd      	adds	r5, r1, #3
 800db7a:	f025 0503 	bic.w	r5, r5, #3
 800db7e:	3508      	adds	r5, #8
 800db80:	2d0c      	cmp	r5, #12
 800db82:	bf38      	it	cc
 800db84:	250c      	movcc	r5, #12
 800db86:	2d00      	cmp	r5, #0
 800db88:	4606      	mov	r6, r0
 800db8a:	db01      	blt.n	800db90 <_malloc_r+0x1c>
 800db8c:	42a9      	cmp	r1, r5
 800db8e:	d904      	bls.n	800db9a <_malloc_r+0x26>
 800db90:	230c      	movs	r3, #12
 800db92:	6033      	str	r3, [r6, #0]
 800db94:	2000      	movs	r0, #0
 800db96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc70 <_malloc_r+0xfc>
 800db9e:	f000 f87b 	bl	800dc98 <__malloc_lock>
 800dba2:	f8d8 3000 	ldr.w	r3, [r8]
 800dba6:	461c      	mov	r4, r3
 800dba8:	bb44      	cbnz	r4, 800dbfc <_malloc_r+0x88>
 800dbaa:	4629      	mov	r1, r5
 800dbac:	4630      	mov	r0, r6
 800dbae:	f7ff ffbf 	bl	800db30 <sbrk_aligned>
 800dbb2:	1c43      	adds	r3, r0, #1
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	d158      	bne.n	800dc6a <_malloc_r+0xf6>
 800dbb8:	f8d8 4000 	ldr.w	r4, [r8]
 800dbbc:	4627      	mov	r7, r4
 800dbbe:	2f00      	cmp	r7, #0
 800dbc0:	d143      	bne.n	800dc4a <_malloc_r+0xd6>
 800dbc2:	2c00      	cmp	r4, #0
 800dbc4:	d04b      	beq.n	800dc5e <_malloc_r+0xea>
 800dbc6:	6823      	ldr	r3, [r4, #0]
 800dbc8:	4639      	mov	r1, r7
 800dbca:	4630      	mov	r0, r6
 800dbcc:	eb04 0903 	add.w	r9, r4, r3
 800dbd0:	f001 f8d8 	bl	800ed84 <_sbrk_r>
 800dbd4:	4581      	cmp	r9, r0
 800dbd6:	d142      	bne.n	800dc5e <_malloc_r+0xea>
 800dbd8:	6821      	ldr	r1, [r4, #0]
 800dbda:	1a6d      	subs	r5, r5, r1
 800dbdc:	4629      	mov	r1, r5
 800dbde:	4630      	mov	r0, r6
 800dbe0:	f7ff ffa6 	bl	800db30 <sbrk_aligned>
 800dbe4:	3001      	adds	r0, #1
 800dbe6:	d03a      	beq.n	800dc5e <_malloc_r+0xea>
 800dbe8:	6823      	ldr	r3, [r4, #0]
 800dbea:	442b      	add	r3, r5
 800dbec:	6023      	str	r3, [r4, #0]
 800dbee:	f8d8 3000 	ldr.w	r3, [r8]
 800dbf2:	685a      	ldr	r2, [r3, #4]
 800dbf4:	bb62      	cbnz	r2, 800dc50 <_malloc_r+0xdc>
 800dbf6:	f8c8 7000 	str.w	r7, [r8]
 800dbfa:	e00f      	b.n	800dc1c <_malloc_r+0xa8>
 800dbfc:	6822      	ldr	r2, [r4, #0]
 800dbfe:	1b52      	subs	r2, r2, r5
 800dc00:	d420      	bmi.n	800dc44 <_malloc_r+0xd0>
 800dc02:	2a0b      	cmp	r2, #11
 800dc04:	d917      	bls.n	800dc36 <_malloc_r+0xc2>
 800dc06:	1961      	adds	r1, r4, r5
 800dc08:	42a3      	cmp	r3, r4
 800dc0a:	6025      	str	r5, [r4, #0]
 800dc0c:	bf18      	it	ne
 800dc0e:	6059      	strne	r1, [r3, #4]
 800dc10:	6863      	ldr	r3, [r4, #4]
 800dc12:	bf08      	it	eq
 800dc14:	f8c8 1000 	streq.w	r1, [r8]
 800dc18:	5162      	str	r2, [r4, r5]
 800dc1a:	604b      	str	r3, [r1, #4]
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	f000 f841 	bl	800dca4 <__malloc_unlock>
 800dc22:	f104 000b 	add.w	r0, r4, #11
 800dc26:	1d23      	adds	r3, r4, #4
 800dc28:	f020 0007 	bic.w	r0, r0, #7
 800dc2c:	1ac2      	subs	r2, r0, r3
 800dc2e:	bf1c      	itt	ne
 800dc30:	1a1b      	subne	r3, r3, r0
 800dc32:	50a3      	strne	r3, [r4, r2]
 800dc34:	e7af      	b.n	800db96 <_malloc_r+0x22>
 800dc36:	6862      	ldr	r2, [r4, #4]
 800dc38:	42a3      	cmp	r3, r4
 800dc3a:	bf0c      	ite	eq
 800dc3c:	f8c8 2000 	streq.w	r2, [r8]
 800dc40:	605a      	strne	r2, [r3, #4]
 800dc42:	e7eb      	b.n	800dc1c <_malloc_r+0xa8>
 800dc44:	4623      	mov	r3, r4
 800dc46:	6864      	ldr	r4, [r4, #4]
 800dc48:	e7ae      	b.n	800dba8 <_malloc_r+0x34>
 800dc4a:	463c      	mov	r4, r7
 800dc4c:	687f      	ldr	r7, [r7, #4]
 800dc4e:	e7b6      	b.n	800dbbe <_malloc_r+0x4a>
 800dc50:	461a      	mov	r2, r3
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	42a3      	cmp	r3, r4
 800dc56:	d1fb      	bne.n	800dc50 <_malloc_r+0xdc>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	6053      	str	r3, [r2, #4]
 800dc5c:	e7de      	b.n	800dc1c <_malloc_r+0xa8>
 800dc5e:	230c      	movs	r3, #12
 800dc60:	6033      	str	r3, [r6, #0]
 800dc62:	4630      	mov	r0, r6
 800dc64:	f000 f81e 	bl	800dca4 <__malloc_unlock>
 800dc68:	e794      	b.n	800db94 <_malloc_r+0x20>
 800dc6a:	6005      	str	r5, [r0, #0]
 800dc6c:	e7d6      	b.n	800dc1c <_malloc_r+0xa8>
 800dc6e:	bf00      	nop
 800dc70:	20000dcc 	.word	0x20000dcc

0800dc74 <__ascii_mbtowc>:
 800dc74:	b082      	sub	sp, #8
 800dc76:	b901      	cbnz	r1, 800dc7a <__ascii_mbtowc+0x6>
 800dc78:	a901      	add	r1, sp, #4
 800dc7a:	b142      	cbz	r2, 800dc8e <__ascii_mbtowc+0x1a>
 800dc7c:	b14b      	cbz	r3, 800dc92 <__ascii_mbtowc+0x1e>
 800dc7e:	7813      	ldrb	r3, [r2, #0]
 800dc80:	600b      	str	r3, [r1, #0]
 800dc82:	7812      	ldrb	r2, [r2, #0]
 800dc84:	1e10      	subs	r0, r2, #0
 800dc86:	bf18      	it	ne
 800dc88:	2001      	movne	r0, #1
 800dc8a:	b002      	add	sp, #8
 800dc8c:	4770      	bx	lr
 800dc8e:	4610      	mov	r0, r2
 800dc90:	e7fb      	b.n	800dc8a <__ascii_mbtowc+0x16>
 800dc92:	f06f 0001 	mvn.w	r0, #1
 800dc96:	e7f8      	b.n	800dc8a <__ascii_mbtowc+0x16>

0800dc98 <__malloc_lock>:
 800dc98:	4801      	ldr	r0, [pc, #4]	@ (800dca0 <__malloc_lock+0x8>)
 800dc9a:	f7ff bbaa 	b.w	800d3f2 <__retarget_lock_acquire_recursive>
 800dc9e:	bf00      	nop
 800dca0:	20000dc4 	.word	0x20000dc4

0800dca4 <__malloc_unlock>:
 800dca4:	4801      	ldr	r0, [pc, #4]	@ (800dcac <__malloc_unlock+0x8>)
 800dca6:	f7ff bba5 	b.w	800d3f4 <__retarget_lock_release_recursive>
 800dcaa:	bf00      	nop
 800dcac:	20000dc4 	.word	0x20000dc4

0800dcb0 <_Balloc>:
 800dcb0:	b570      	push	{r4, r5, r6, lr}
 800dcb2:	69c6      	ldr	r6, [r0, #28]
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	460d      	mov	r5, r1
 800dcb8:	b976      	cbnz	r6, 800dcd8 <_Balloc+0x28>
 800dcba:	2010      	movs	r0, #16
 800dcbc:	f001 f8a4 	bl	800ee08 <malloc>
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	61e0      	str	r0, [r4, #28]
 800dcc4:	b920      	cbnz	r0, 800dcd0 <_Balloc+0x20>
 800dcc6:	4b18      	ldr	r3, [pc, #96]	@ (800dd28 <_Balloc+0x78>)
 800dcc8:	4818      	ldr	r0, [pc, #96]	@ (800dd2c <_Balloc+0x7c>)
 800dcca:	216b      	movs	r1, #107	@ 0x6b
 800dccc:	f001 f86a 	bl	800eda4 <__assert_func>
 800dcd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dcd4:	6006      	str	r6, [r0, #0]
 800dcd6:	60c6      	str	r6, [r0, #12]
 800dcd8:	69e6      	ldr	r6, [r4, #28]
 800dcda:	68f3      	ldr	r3, [r6, #12]
 800dcdc:	b183      	cbz	r3, 800dd00 <_Balloc+0x50>
 800dcde:	69e3      	ldr	r3, [r4, #28]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dce6:	b9b8      	cbnz	r0, 800dd18 <_Balloc+0x68>
 800dce8:	2101      	movs	r1, #1
 800dcea:	fa01 f605 	lsl.w	r6, r1, r5
 800dcee:	1d72      	adds	r2, r6, #5
 800dcf0:	0092      	lsls	r2, r2, #2
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f001 f874 	bl	800ede0 <_calloc_r>
 800dcf8:	b160      	cbz	r0, 800dd14 <_Balloc+0x64>
 800dcfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dcfe:	e00e      	b.n	800dd1e <_Balloc+0x6e>
 800dd00:	2221      	movs	r2, #33	@ 0x21
 800dd02:	2104      	movs	r1, #4
 800dd04:	4620      	mov	r0, r4
 800dd06:	f001 f86b 	bl	800ede0 <_calloc_r>
 800dd0a:	69e3      	ldr	r3, [r4, #28]
 800dd0c:	60f0      	str	r0, [r6, #12]
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d1e4      	bne.n	800dcde <_Balloc+0x2e>
 800dd14:	2000      	movs	r0, #0
 800dd16:	bd70      	pop	{r4, r5, r6, pc}
 800dd18:	6802      	ldr	r2, [r0, #0]
 800dd1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd1e:	2300      	movs	r3, #0
 800dd20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd24:	e7f7      	b.n	800dd16 <_Balloc+0x66>
 800dd26:	bf00      	nop
 800dd28:	0800f931 	.word	0x0800f931
 800dd2c:	0800f948 	.word	0x0800f948

0800dd30 <_Bfree>:
 800dd30:	b570      	push	{r4, r5, r6, lr}
 800dd32:	69c6      	ldr	r6, [r0, #28]
 800dd34:	4605      	mov	r5, r0
 800dd36:	460c      	mov	r4, r1
 800dd38:	b976      	cbnz	r6, 800dd58 <_Bfree+0x28>
 800dd3a:	2010      	movs	r0, #16
 800dd3c:	f001 f864 	bl	800ee08 <malloc>
 800dd40:	4602      	mov	r2, r0
 800dd42:	61e8      	str	r0, [r5, #28]
 800dd44:	b920      	cbnz	r0, 800dd50 <_Bfree+0x20>
 800dd46:	4b09      	ldr	r3, [pc, #36]	@ (800dd6c <_Bfree+0x3c>)
 800dd48:	4809      	ldr	r0, [pc, #36]	@ (800dd70 <_Bfree+0x40>)
 800dd4a:	218f      	movs	r1, #143	@ 0x8f
 800dd4c:	f001 f82a 	bl	800eda4 <__assert_func>
 800dd50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd54:	6006      	str	r6, [r0, #0]
 800dd56:	60c6      	str	r6, [r0, #12]
 800dd58:	b13c      	cbz	r4, 800dd6a <_Bfree+0x3a>
 800dd5a:	69eb      	ldr	r3, [r5, #28]
 800dd5c:	6862      	ldr	r2, [r4, #4]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd64:	6021      	str	r1, [r4, #0]
 800dd66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd6a:	bd70      	pop	{r4, r5, r6, pc}
 800dd6c:	0800f931 	.word	0x0800f931
 800dd70:	0800f948 	.word	0x0800f948

0800dd74 <__multadd>:
 800dd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd78:	690d      	ldr	r5, [r1, #16]
 800dd7a:	4607      	mov	r7, r0
 800dd7c:	460c      	mov	r4, r1
 800dd7e:	461e      	mov	r6, r3
 800dd80:	f101 0c14 	add.w	ip, r1, #20
 800dd84:	2000      	movs	r0, #0
 800dd86:	f8dc 3000 	ldr.w	r3, [ip]
 800dd8a:	b299      	uxth	r1, r3
 800dd8c:	fb02 6101 	mla	r1, r2, r1, r6
 800dd90:	0c1e      	lsrs	r6, r3, #16
 800dd92:	0c0b      	lsrs	r3, r1, #16
 800dd94:	fb02 3306 	mla	r3, r2, r6, r3
 800dd98:	b289      	uxth	r1, r1
 800dd9a:	3001      	adds	r0, #1
 800dd9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dda0:	4285      	cmp	r5, r0
 800dda2:	f84c 1b04 	str.w	r1, [ip], #4
 800dda6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ddaa:	dcec      	bgt.n	800dd86 <__multadd+0x12>
 800ddac:	b30e      	cbz	r6, 800ddf2 <__multadd+0x7e>
 800ddae:	68a3      	ldr	r3, [r4, #8]
 800ddb0:	42ab      	cmp	r3, r5
 800ddb2:	dc19      	bgt.n	800dde8 <__multadd+0x74>
 800ddb4:	6861      	ldr	r1, [r4, #4]
 800ddb6:	4638      	mov	r0, r7
 800ddb8:	3101      	adds	r1, #1
 800ddba:	f7ff ff79 	bl	800dcb0 <_Balloc>
 800ddbe:	4680      	mov	r8, r0
 800ddc0:	b928      	cbnz	r0, 800ddce <__multadd+0x5a>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	4b0c      	ldr	r3, [pc, #48]	@ (800ddf8 <__multadd+0x84>)
 800ddc6:	480d      	ldr	r0, [pc, #52]	@ (800ddfc <__multadd+0x88>)
 800ddc8:	21ba      	movs	r1, #186	@ 0xba
 800ddca:	f000 ffeb 	bl	800eda4 <__assert_func>
 800ddce:	6922      	ldr	r2, [r4, #16]
 800ddd0:	3202      	adds	r2, #2
 800ddd2:	f104 010c 	add.w	r1, r4, #12
 800ddd6:	0092      	lsls	r2, r2, #2
 800ddd8:	300c      	adds	r0, #12
 800ddda:	f7ff fb0c 	bl	800d3f6 <memcpy>
 800ddde:	4621      	mov	r1, r4
 800dde0:	4638      	mov	r0, r7
 800dde2:	f7ff ffa5 	bl	800dd30 <_Bfree>
 800dde6:	4644      	mov	r4, r8
 800dde8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ddec:	3501      	adds	r5, #1
 800ddee:	615e      	str	r6, [r3, #20]
 800ddf0:	6125      	str	r5, [r4, #16]
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddf8:	0800f8c0 	.word	0x0800f8c0
 800ddfc:	0800f948 	.word	0x0800f948

0800de00 <__s2b>:
 800de00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de04:	460c      	mov	r4, r1
 800de06:	4615      	mov	r5, r2
 800de08:	461f      	mov	r7, r3
 800de0a:	2209      	movs	r2, #9
 800de0c:	3308      	adds	r3, #8
 800de0e:	4606      	mov	r6, r0
 800de10:	fb93 f3f2 	sdiv	r3, r3, r2
 800de14:	2100      	movs	r1, #0
 800de16:	2201      	movs	r2, #1
 800de18:	429a      	cmp	r2, r3
 800de1a:	db09      	blt.n	800de30 <__s2b+0x30>
 800de1c:	4630      	mov	r0, r6
 800de1e:	f7ff ff47 	bl	800dcb0 <_Balloc>
 800de22:	b940      	cbnz	r0, 800de36 <__s2b+0x36>
 800de24:	4602      	mov	r2, r0
 800de26:	4b19      	ldr	r3, [pc, #100]	@ (800de8c <__s2b+0x8c>)
 800de28:	4819      	ldr	r0, [pc, #100]	@ (800de90 <__s2b+0x90>)
 800de2a:	21d3      	movs	r1, #211	@ 0xd3
 800de2c:	f000 ffba 	bl	800eda4 <__assert_func>
 800de30:	0052      	lsls	r2, r2, #1
 800de32:	3101      	adds	r1, #1
 800de34:	e7f0      	b.n	800de18 <__s2b+0x18>
 800de36:	9b08      	ldr	r3, [sp, #32]
 800de38:	6143      	str	r3, [r0, #20]
 800de3a:	2d09      	cmp	r5, #9
 800de3c:	f04f 0301 	mov.w	r3, #1
 800de40:	6103      	str	r3, [r0, #16]
 800de42:	dd16      	ble.n	800de72 <__s2b+0x72>
 800de44:	f104 0909 	add.w	r9, r4, #9
 800de48:	46c8      	mov	r8, r9
 800de4a:	442c      	add	r4, r5
 800de4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800de50:	4601      	mov	r1, r0
 800de52:	3b30      	subs	r3, #48	@ 0x30
 800de54:	220a      	movs	r2, #10
 800de56:	4630      	mov	r0, r6
 800de58:	f7ff ff8c 	bl	800dd74 <__multadd>
 800de5c:	45a0      	cmp	r8, r4
 800de5e:	d1f5      	bne.n	800de4c <__s2b+0x4c>
 800de60:	f1a5 0408 	sub.w	r4, r5, #8
 800de64:	444c      	add	r4, r9
 800de66:	1b2d      	subs	r5, r5, r4
 800de68:	1963      	adds	r3, r4, r5
 800de6a:	42bb      	cmp	r3, r7
 800de6c:	db04      	blt.n	800de78 <__s2b+0x78>
 800de6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de72:	340a      	adds	r4, #10
 800de74:	2509      	movs	r5, #9
 800de76:	e7f6      	b.n	800de66 <__s2b+0x66>
 800de78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800de7c:	4601      	mov	r1, r0
 800de7e:	3b30      	subs	r3, #48	@ 0x30
 800de80:	220a      	movs	r2, #10
 800de82:	4630      	mov	r0, r6
 800de84:	f7ff ff76 	bl	800dd74 <__multadd>
 800de88:	e7ee      	b.n	800de68 <__s2b+0x68>
 800de8a:	bf00      	nop
 800de8c:	0800f8c0 	.word	0x0800f8c0
 800de90:	0800f948 	.word	0x0800f948

0800de94 <__hi0bits>:
 800de94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800de98:	4603      	mov	r3, r0
 800de9a:	bf36      	itet	cc
 800de9c:	0403      	lslcc	r3, r0, #16
 800de9e:	2000      	movcs	r0, #0
 800dea0:	2010      	movcc	r0, #16
 800dea2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dea6:	bf3c      	itt	cc
 800dea8:	021b      	lslcc	r3, r3, #8
 800deaa:	3008      	addcc	r0, #8
 800deac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800deb0:	bf3c      	itt	cc
 800deb2:	011b      	lslcc	r3, r3, #4
 800deb4:	3004      	addcc	r0, #4
 800deb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800deba:	bf3c      	itt	cc
 800debc:	009b      	lslcc	r3, r3, #2
 800debe:	3002      	addcc	r0, #2
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	db05      	blt.n	800ded0 <__hi0bits+0x3c>
 800dec4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dec8:	f100 0001 	add.w	r0, r0, #1
 800decc:	bf08      	it	eq
 800dece:	2020      	moveq	r0, #32
 800ded0:	4770      	bx	lr

0800ded2 <__lo0bits>:
 800ded2:	6803      	ldr	r3, [r0, #0]
 800ded4:	4602      	mov	r2, r0
 800ded6:	f013 0007 	ands.w	r0, r3, #7
 800deda:	d00b      	beq.n	800def4 <__lo0bits+0x22>
 800dedc:	07d9      	lsls	r1, r3, #31
 800dede:	d421      	bmi.n	800df24 <__lo0bits+0x52>
 800dee0:	0798      	lsls	r0, r3, #30
 800dee2:	bf49      	itett	mi
 800dee4:	085b      	lsrmi	r3, r3, #1
 800dee6:	089b      	lsrpl	r3, r3, #2
 800dee8:	2001      	movmi	r0, #1
 800deea:	6013      	strmi	r3, [r2, #0]
 800deec:	bf5c      	itt	pl
 800deee:	6013      	strpl	r3, [r2, #0]
 800def0:	2002      	movpl	r0, #2
 800def2:	4770      	bx	lr
 800def4:	b299      	uxth	r1, r3
 800def6:	b909      	cbnz	r1, 800defc <__lo0bits+0x2a>
 800def8:	0c1b      	lsrs	r3, r3, #16
 800defa:	2010      	movs	r0, #16
 800defc:	b2d9      	uxtb	r1, r3
 800defe:	b909      	cbnz	r1, 800df04 <__lo0bits+0x32>
 800df00:	3008      	adds	r0, #8
 800df02:	0a1b      	lsrs	r3, r3, #8
 800df04:	0719      	lsls	r1, r3, #28
 800df06:	bf04      	itt	eq
 800df08:	091b      	lsreq	r3, r3, #4
 800df0a:	3004      	addeq	r0, #4
 800df0c:	0799      	lsls	r1, r3, #30
 800df0e:	bf04      	itt	eq
 800df10:	089b      	lsreq	r3, r3, #2
 800df12:	3002      	addeq	r0, #2
 800df14:	07d9      	lsls	r1, r3, #31
 800df16:	d403      	bmi.n	800df20 <__lo0bits+0x4e>
 800df18:	085b      	lsrs	r3, r3, #1
 800df1a:	f100 0001 	add.w	r0, r0, #1
 800df1e:	d003      	beq.n	800df28 <__lo0bits+0x56>
 800df20:	6013      	str	r3, [r2, #0]
 800df22:	4770      	bx	lr
 800df24:	2000      	movs	r0, #0
 800df26:	4770      	bx	lr
 800df28:	2020      	movs	r0, #32
 800df2a:	4770      	bx	lr

0800df2c <__i2b>:
 800df2c:	b510      	push	{r4, lr}
 800df2e:	460c      	mov	r4, r1
 800df30:	2101      	movs	r1, #1
 800df32:	f7ff febd 	bl	800dcb0 <_Balloc>
 800df36:	4602      	mov	r2, r0
 800df38:	b928      	cbnz	r0, 800df46 <__i2b+0x1a>
 800df3a:	4b05      	ldr	r3, [pc, #20]	@ (800df50 <__i2b+0x24>)
 800df3c:	4805      	ldr	r0, [pc, #20]	@ (800df54 <__i2b+0x28>)
 800df3e:	f240 1145 	movw	r1, #325	@ 0x145
 800df42:	f000 ff2f 	bl	800eda4 <__assert_func>
 800df46:	2301      	movs	r3, #1
 800df48:	6144      	str	r4, [r0, #20]
 800df4a:	6103      	str	r3, [r0, #16]
 800df4c:	bd10      	pop	{r4, pc}
 800df4e:	bf00      	nop
 800df50:	0800f8c0 	.word	0x0800f8c0
 800df54:	0800f948 	.word	0x0800f948

0800df58 <__multiply>:
 800df58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df5c:	4614      	mov	r4, r2
 800df5e:	690a      	ldr	r2, [r1, #16]
 800df60:	6923      	ldr	r3, [r4, #16]
 800df62:	429a      	cmp	r2, r3
 800df64:	bfa8      	it	ge
 800df66:	4623      	movge	r3, r4
 800df68:	460f      	mov	r7, r1
 800df6a:	bfa4      	itt	ge
 800df6c:	460c      	movge	r4, r1
 800df6e:	461f      	movge	r7, r3
 800df70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800df74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800df78:	68a3      	ldr	r3, [r4, #8]
 800df7a:	6861      	ldr	r1, [r4, #4]
 800df7c:	eb0a 0609 	add.w	r6, sl, r9
 800df80:	42b3      	cmp	r3, r6
 800df82:	b085      	sub	sp, #20
 800df84:	bfb8      	it	lt
 800df86:	3101      	addlt	r1, #1
 800df88:	f7ff fe92 	bl	800dcb0 <_Balloc>
 800df8c:	b930      	cbnz	r0, 800df9c <__multiply+0x44>
 800df8e:	4602      	mov	r2, r0
 800df90:	4b44      	ldr	r3, [pc, #272]	@ (800e0a4 <__multiply+0x14c>)
 800df92:	4845      	ldr	r0, [pc, #276]	@ (800e0a8 <__multiply+0x150>)
 800df94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800df98:	f000 ff04 	bl	800eda4 <__assert_func>
 800df9c:	f100 0514 	add.w	r5, r0, #20
 800dfa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dfa4:	462b      	mov	r3, r5
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	4543      	cmp	r3, r8
 800dfaa:	d321      	bcc.n	800dff0 <__multiply+0x98>
 800dfac:	f107 0114 	add.w	r1, r7, #20
 800dfb0:	f104 0214 	add.w	r2, r4, #20
 800dfb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dfb8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dfbc:	9302      	str	r3, [sp, #8]
 800dfbe:	1b13      	subs	r3, r2, r4
 800dfc0:	3b15      	subs	r3, #21
 800dfc2:	f023 0303 	bic.w	r3, r3, #3
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	f104 0715 	add.w	r7, r4, #21
 800dfcc:	42ba      	cmp	r2, r7
 800dfce:	bf38      	it	cc
 800dfd0:	2304      	movcc	r3, #4
 800dfd2:	9301      	str	r3, [sp, #4]
 800dfd4:	9b02      	ldr	r3, [sp, #8]
 800dfd6:	9103      	str	r1, [sp, #12]
 800dfd8:	428b      	cmp	r3, r1
 800dfda:	d80c      	bhi.n	800dff6 <__multiply+0x9e>
 800dfdc:	2e00      	cmp	r6, #0
 800dfde:	dd03      	ble.n	800dfe8 <__multiply+0x90>
 800dfe0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d05b      	beq.n	800e0a0 <__multiply+0x148>
 800dfe8:	6106      	str	r6, [r0, #16]
 800dfea:	b005      	add	sp, #20
 800dfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff0:	f843 2b04 	str.w	r2, [r3], #4
 800dff4:	e7d8      	b.n	800dfa8 <__multiply+0x50>
 800dff6:	f8b1 a000 	ldrh.w	sl, [r1]
 800dffa:	f1ba 0f00 	cmp.w	sl, #0
 800dffe:	d024      	beq.n	800e04a <__multiply+0xf2>
 800e000:	f104 0e14 	add.w	lr, r4, #20
 800e004:	46a9      	mov	r9, r5
 800e006:	f04f 0c00 	mov.w	ip, #0
 800e00a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e00e:	f8d9 3000 	ldr.w	r3, [r9]
 800e012:	fa1f fb87 	uxth.w	fp, r7
 800e016:	b29b      	uxth	r3, r3
 800e018:	fb0a 330b 	mla	r3, sl, fp, r3
 800e01c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e020:	f8d9 7000 	ldr.w	r7, [r9]
 800e024:	4463      	add	r3, ip
 800e026:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e02a:	fb0a c70b 	mla	r7, sl, fp, ip
 800e02e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e032:	b29b      	uxth	r3, r3
 800e034:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e038:	4572      	cmp	r2, lr
 800e03a:	f849 3b04 	str.w	r3, [r9], #4
 800e03e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e042:	d8e2      	bhi.n	800e00a <__multiply+0xb2>
 800e044:	9b01      	ldr	r3, [sp, #4]
 800e046:	f845 c003 	str.w	ip, [r5, r3]
 800e04a:	9b03      	ldr	r3, [sp, #12]
 800e04c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e050:	3104      	adds	r1, #4
 800e052:	f1b9 0f00 	cmp.w	r9, #0
 800e056:	d021      	beq.n	800e09c <__multiply+0x144>
 800e058:	682b      	ldr	r3, [r5, #0]
 800e05a:	f104 0c14 	add.w	ip, r4, #20
 800e05e:	46ae      	mov	lr, r5
 800e060:	f04f 0a00 	mov.w	sl, #0
 800e064:	f8bc b000 	ldrh.w	fp, [ip]
 800e068:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e06c:	fb09 770b 	mla	r7, r9, fp, r7
 800e070:	4457      	add	r7, sl
 800e072:	b29b      	uxth	r3, r3
 800e074:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e078:	f84e 3b04 	str.w	r3, [lr], #4
 800e07c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e080:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e084:	f8be 3000 	ldrh.w	r3, [lr]
 800e088:	fb09 330a 	mla	r3, r9, sl, r3
 800e08c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e090:	4562      	cmp	r2, ip
 800e092:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e096:	d8e5      	bhi.n	800e064 <__multiply+0x10c>
 800e098:	9f01      	ldr	r7, [sp, #4]
 800e09a:	51eb      	str	r3, [r5, r7]
 800e09c:	3504      	adds	r5, #4
 800e09e:	e799      	b.n	800dfd4 <__multiply+0x7c>
 800e0a0:	3e01      	subs	r6, #1
 800e0a2:	e79b      	b.n	800dfdc <__multiply+0x84>
 800e0a4:	0800f8c0 	.word	0x0800f8c0
 800e0a8:	0800f948 	.word	0x0800f948

0800e0ac <__pow5mult>:
 800e0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0b0:	4615      	mov	r5, r2
 800e0b2:	f012 0203 	ands.w	r2, r2, #3
 800e0b6:	4607      	mov	r7, r0
 800e0b8:	460e      	mov	r6, r1
 800e0ba:	d007      	beq.n	800e0cc <__pow5mult+0x20>
 800e0bc:	4c25      	ldr	r4, [pc, #148]	@ (800e154 <__pow5mult+0xa8>)
 800e0be:	3a01      	subs	r2, #1
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0c6:	f7ff fe55 	bl	800dd74 <__multadd>
 800e0ca:	4606      	mov	r6, r0
 800e0cc:	10ad      	asrs	r5, r5, #2
 800e0ce:	d03d      	beq.n	800e14c <__pow5mult+0xa0>
 800e0d0:	69fc      	ldr	r4, [r7, #28]
 800e0d2:	b97c      	cbnz	r4, 800e0f4 <__pow5mult+0x48>
 800e0d4:	2010      	movs	r0, #16
 800e0d6:	f000 fe97 	bl	800ee08 <malloc>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	61f8      	str	r0, [r7, #28]
 800e0de:	b928      	cbnz	r0, 800e0ec <__pow5mult+0x40>
 800e0e0:	4b1d      	ldr	r3, [pc, #116]	@ (800e158 <__pow5mult+0xac>)
 800e0e2:	481e      	ldr	r0, [pc, #120]	@ (800e15c <__pow5mult+0xb0>)
 800e0e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e0e8:	f000 fe5c 	bl	800eda4 <__assert_func>
 800e0ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e0f0:	6004      	str	r4, [r0, #0]
 800e0f2:	60c4      	str	r4, [r0, #12]
 800e0f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e0f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e0fc:	b94c      	cbnz	r4, 800e112 <__pow5mult+0x66>
 800e0fe:	f240 2171 	movw	r1, #625	@ 0x271
 800e102:	4638      	mov	r0, r7
 800e104:	f7ff ff12 	bl	800df2c <__i2b>
 800e108:	2300      	movs	r3, #0
 800e10a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e10e:	4604      	mov	r4, r0
 800e110:	6003      	str	r3, [r0, #0]
 800e112:	f04f 0900 	mov.w	r9, #0
 800e116:	07eb      	lsls	r3, r5, #31
 800e118:	d50a      	bpl.n	800e130 <__pow5mult+0x84>
 800e11a:	4631      	mov	r1, r6
 800e11c:	4622      	mov	r2, r4
 800e11e:	4638      	mov	r0, r7
 800e120:	f7ff ff1a 	bl	800df58 <__multiply>
 800e124:	4631      	mov	r1, r6
 800e126:	4680      	mov	r8, r0
 800e128:	4638      	mov	r0, r7
 800e12a:	f7ff fe01 	bl	800dd30 <_Bfree>
 800e12e:	4646      	mov	r6, r8
 800e130:	106d      	asrs	r5, r5, #1
 800e132:	d00b      	beq.n	800e14c <__pow5mult+0xa0>
 800e134:	6820      	ldr	r0, [r4, #0]
 800e136:	b938      	cbnz	r0, 800e148 <__pow5mult+0x9c>
 800e138:	4622      	mov	r2, r4
 800e13a:	4621      	mov	r1, r4
 800e13c:	4638      	mov	r0, r7
 800e13e:	f7ff ff0b 	bl	800df58 <__multiply>
 800e142:	6020      	str	r0, [r4, #0]
 800e144:	f8c0 9000 	str.w	r9, [r0]
 800e148:	4604      	mov	r4, r0
 800e14a:	e7e4      	b.n	800e116 <__pow5mult+0x6a>
 800e14c:	4630      	mov	r0, r6
 800e14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e152:	bf00      	nop
 800e154:	0800f9a4 	.word	0x0800f9a4
 800e158:	0800f931 	.word	0x0800f931
 800e15c:	0800f948 	.word	0x0800f948

0800e160 <__lshift>:
 800e160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e164:	460c      	mov	r4, r1
 800e166:	6849      	ldr	r1, [r1, #4]
 800e168:	6923      	ldr	r3, [r4, #16]
 800e16a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e16e:	68a3      	ldr	r3, [r4, #8]
 800e170:	4607      	mov	r7, r0
 800e172:	4691      	mov	r9, r2
 800e174:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e178:	f108 0601 	add.w	r6, r8, #1
 800e17c:	42b3      	cmp	r3, r6
 800e17e:	db0b      	blt.n	800e198 <__lshift+0x38>
 800e180:	4638      	mov	r0, r7
 800e182:	f7ff fd95 	bl	800dcb0 <_Balloc>
 800e186:	4605      	mov	r5, r0
 800e188:	b948      	cbnz	r0, 800e19e <__lshift+0x3e>
 800e18a:	4602      	mov	r2, r0
 800e18c:	4b28      	ldr	r3, [pc, #160]	@ (800e230 <__lshift+0xd0>)
 800e18e:	4829      	ldr	r0, [pc, #164]	@ (800e234 <__lshift+0xd4>)
 800e190:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e194:	f000 fe06 	bl	800eda4 <__assert_func>
 800e198:	3101      	adds	r1, #1
 800e19a:	005b      	lsls	r3, r3, #1
 800e19c:	e7ee      	b.n	800e17c <__lshift+0x1c>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	f100 0114 	add.w	r1, r0, #20
 800e1a4:	f100 0210 	add.w	r2, r0, #16
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	4553      	cmp	r3, sl
 800e1ac:	db33      	blt.n	800e216 <__lshift+0xb6>
 800e1ae:	6920      	ldr	r0, [r4, #16]
 800e1b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1b4:	f104 0314 	add.w	r3, r4, #20
 800e1b8:	f019 091f 	ands.w	r9, r9, #31
 800e1bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e1c4:	d02b      	beq.n	800e21e <__lshift+0xbe>
 800e1c6:	f1c9 0e20 	rsb	lr, r9, #32
 800e1ca:	468a      	mov	sl, r1
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	6818      	ldr	r0, [r3, #0]
 800e1d0:	fa00 f009 	lsl.w	r0, r0, r9
 800e1d4:	4310      	orrs	r0, r2
 800e1d6:	f84a 0b04 	str.w	r0, [sl], #4
 800e1da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1de:	459c      	cmp	ip, r3
 800e1e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e1e4:	d8f3      	bhi.n	800e1ce <__lshift+0x6e>
 800e1e6:	ebac 0304 	sub.w	r3, ip, r4
 800e1ea:	3b15      	subs	r3, #21
 800e1ec:	f023 0303 	bic.w	r3, r3, #3
 800e1f0:	3304      	adds	r3, #4
 800e1f2:	f104 0015 	add.w	r0, r4, #21
 800e1f6:	4584      	cmp	ip, r0
 800e1f8:	bf38      	it	cc
 800e1fa:	2304      	movcc	r3, #4
 800e1fc:	50ca      	str	r2, [r1, r3]
 800e1fe:	b10a      	cbz	r2, 800e204 <__lshift+0xa4>
 800e200:	f108 0602 	add.w	r6, r8, #2
 800e204:	3e01      	subs	r6, #1
 800e206:	4638      	mov	r0, r7
 800e208:	612e      	str	r6, [r5, #16]
 800e20a:	4621      	mov	r1, r4
 800e20c:	f7ff fd90 	bl	800dd30 <_Bfree>
 800e210:	4628      	mov	r0, r5
 800e212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e216:	f842 0f04 	str.w	r0, [r2, #4]!
 800e21a:	3301      	adds	r3, #1
 800e21c:	e7c5      	b.n	800e1aa <__lshift+0x4a>
 800e21e:	3904      	subs	r1, #4
 800e220:	f853 2b04 	ldr.w	r2, [r3], #4
 800e224:	f841 2f04 	str.w	r2, [r1, #4]!
 800e228:	459c      	cmp	ip, r3
 800e22a:	d8f9      	bhi.n	800e220 <__lshift+0xc0>
 800e22c:	e7ea      	b.n	800e204 <__lshift+0xa4>
 800e22e:	bf00      	nop
 800e230:	0800f8c0 	.word	0x0800f8c0
 800e234:	0800f948 	.word	0x0800f948

0800e238 <__mcmp>:
 800e238:	690a      	ldr	r2, [r1, #16]
 800e23a:	4603      	mov	r3, r0
 800e23c:	6900      	ldr	r0, [r0, #16]
 800e23e:	1a80      	subs	r0, r0, r2
 800e240:	b530      	push	{r4, r5, lr}
 800e242:	d10e      	bne.n	800e262 <__mcmp+0x2a>
 800e244:	3314      	adds	r3, #20
 800e246:	3114      	adds	r1, #20
 800e248:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e24c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e250:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e254:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e258:	4295      	cmp	r5, r2
 800e25a:	d003      	beq.n	800e264 <__mcmp+0x2c>
 800e25c:	d205      	bcs.n	800e26a <__mcmp+0x32>
 800e25e:	f04f 30ff 	mov.w	r0, #4294967295
 800e262:	bd30      	pop	{r4, r5, pc}
 800e264:	42a3      	cmp	r3, r4
 800e266:	d3f3      	bcc.n	800e250 <__mcmp+0x18>
 800e268:	e7fb      	b.n	800e262 <__mcmp+0x2a>
 800e26a:	2001      	movs	r0, #1
 800e26c:	e7f9      	b.n	800e262 <__mcmp+0x2a>
	...

0800e270 <__mdiff>:
 800e270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e274:	4689      	mov	r9, r1
 800e276:	4606      	mov	r6, r0
 800e278:	4611      	mov	r1, r2
 800e27a:	4648      	mov	r0, r9
 800e27c:	4614      	mov	r4, r2
 800e27e:	f7ff ffdb 	bl	800e238 <__mcmp>
 800e282:	1e05      	subs	r5, r0, #0
 800e284:	d112      	bne.n	800e2ac <__mdiff+0x3c>
 800e286:	4629      	mov	r1, r5
 800e288:	4630      	mov	r0, r6
 800e28a:	f7ff fd11 	bl	800dcb0 <_Balloc>
 800e28e:	4602      	mov	r2, r0
 800e290:	b928      	cbnz	r0, 800e29e <__mdiff+0x2e>
 800e292:	4b3f      	ldr	r3, [pc, #252]	@ (800e390 <__mdiff+0x120>)
 800e294:	f240 2137 	movw	r1, #567	@ 0x237
 800e298:	483e      	ldr	r0, [pc, #248]	@ (800e394 <__mdiff+0x124>)
 800e29a:	f000 fd83 	bl	800eda4 <__assert_func>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	b003      	add	sp, #12
 800e2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ac:	bfbc      	itt	lt
 800e2ae:	464b      	movlt	r3, r9
 800e2b0:	46a1      	movlt	r9, r4
 800e2b2:	4630      	mov	r0, r6
 800e2b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e2b8:	bfba      	itte	lt
 800e2ba:	461c      	movlt	r4, r3
 800e2bc:	2501      	movlt	r5, #1
 800e2be:	2500      	movge	r5, #0
 800e2c0:	f7ff fcf6 	bl	800dcb0 <_Balloc>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	b918      	cbnz	r0, 800e2d0 <__mdiff+0x60>
 800e2c8:	4b31      	ldr	r3, [pc, #196]	@ (800e390 <__mdiff+0x120>)
 800e2ca:	f240 2145 	movw	r1, #581	@ 0x245
 800e2ce:	e7e3      	b.n	800e298 <__mdiff+0x28>
 800e2d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e2d4:	6926      	ldr	r6, [r4, #16]
 800e2d6:	60c5      	str	r5, [r0, #12]
 800e2d8:	f109 0310 	add.w	r3, r9, #16
 800e2dc:	f109 0514 	add.w	r5, r9, #20
 800e2e0:	f104 0e14 	add.w	lr, r4, #20
 800e2e4:	f100 0b14 	add.w	fp, r0, #20
 800e2e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e2ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e2f0:	9301      	str	r3, [sp, #4]
 800e2f2:	46d9      	mov	r9, fp
 800e2f4:	f04f 0c00 	mov.w	ip, #0
 800e2f8:	9b01      	ldr	r3, [sp, #4]
 800e2fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e2fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e302:	9301      	str	r3, [sp, #4]
 800e304:	fa1f f38a 	uxth.w	r3, sl
 800e308:	4619      	mov	r1, r3
 800e30a:	b283      	uxth	r3, r0
 800e30c:	1acb      	subs	r3, r1, r3
 800e30e:	0c00      	lsrs	r0, r0, #16
 800e310:	4463      	add	r3, ip
 800e312:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e316:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e320:	4576      	cmp	r6, lr
 800e322:	f849 3b04 	str.w	r3, [r9], #4
 800e326:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e32a:	d8e5      	bhi.n	800e2f8 <__mdiff+0x88>
 800e32c:	1b33      	subs	r3, r6, r4
 800e32e:	3b15      	subs	r3, #21
 800e330:	f023 0303 	bic.w	r3, r3, #3
 800e334:	3415      	adds	r4, #21
 800e336:	3304      	adds	r3, #4
 800e338:	42a6      	cmp	r6, r4
 800e33a:	bf38      	it	cc
 800e33c:	2304      	movcc	r3, #4
 800e33e:	441d      	add	r5, r3
 800e340:	445b      	add	r3, fp
 800e342:	461e      	mov	r6, r3
 800e344:	462c      	mov	r4, r5
 800e346:	4544      	cmp	r4, r8
 800e348:	d30e      	bcc.n	800e368 <__mdiff+0xf8>
 800e34a:	f108 0103 	add.w	r1, r8, #3
 800e34e:	1b49      	subs	r1, r1, r5
 800e350:	f021 0103 	bic.w	r1, r1, #3
 800e354:	3d03      	subs	r5, #3
 800e356:	45a8      	cmp	r8, r5
 800e358:	bf38      	it	cc
 800e35a:	2100      	movcc	r1, #0
 800e35c:	440b      	add	r3, r1
 800e35e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e362:	b191      	cbz	r1, 800e38a <__mdiff+0x11a>
 800e364:	6117      	str	r7, [r2, #16]
 800e366:	e79d      	b.n	800e2a4 <__mdiff+0x34>
 800e368:	f854 1b04 	ldr.w	r1, [r4], #4
 800e36c:	46e6      	mov	lr, ip
 800e36e:	0c08      	lsrs	r0, r1, #16
 800e370:	fa1c fc81 	uxtah	ip, ip, r1
 800e374:	4471      	add	r1, lr
 800e376:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e37a:	b289      	uxth	r1, r1
 800e37c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e380:	f846 1b04 	str.w	r1, [r6], #4
 800e384:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e388:	e7dd      	b.n	800e346 <__mdiff+0xd6>
 800e38a:	3f01      	subs	r7, #1
 800e38c:	e7e7      	b.n	800e35e <__mdiff+0xee>
 800e38e:	bf00      	nop
 800e390:	0800f8c0 	.word	0x0800f8c0
 800e394:	0800f948 	.word	0x0800f948

0800e398 <__ulp>:
 800e398:	b082      	sub	sp, #8
 800e39a:	ed8d 0b00 	vstr	d0, [sp]
 800e39e:	9a01      	ldr	r2, [sp, #4]
 800e3a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e3e0 <__ulp+0x48>)
 800e3a2:	4013      	ands	r3, r2
 800e3a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	dc08      	bgt.n	800e3be <__ulp+0x26>
 800e3ac:	425b      	negs	r3, r3
 800e3ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e3b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e3b6:	da04      	bge.n	800e3c2 <__ulp+0x2a>
 800e3b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e3bc:	4113      	asrs	r3, r2
 800e3be:	2200      	movs	r2, #0
 800e3c0:	e008      	b.n	800e3d4 <__ulp+0x3c>
 800e3c2:	f1a2 0314 	sub.w	r3, r2, #20
 800e3c6:	2b1e      	cmp	r3, #30
 800e3c8:	bfda      	itte	le
 800e3ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e3ce:	40da      	lsrle	r2, r3
 800e3d0:	2201      	movgt	r2, #1
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	ec41 0b10 	vmov	d0, r0, r1
 800e3dc:	b002      	add	sp, #8
 800e3de:	4770      	bx	lr
 800e3e0:	7ff00000 	.word	0x7ff00000

0800e3e4 <__b2d>:
 800e3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e8:	6906      	ldr	r6, [r0, #16]
 800e3ea:	f100 0814 	add.w	r8, r0, #20
 800e3ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e3f2:	1f37      	subs	r7, r6, #4
 800e3f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e3f8:	4610      	mov	r0, r2
 800e3fa:	f7ff fd4b 	bl	800de94 <__hi0bits>
 800e3fe:	f1c0 0320 	rsb	r3, r0, #32
 800e402:	280a      	cmp	r0, #10
 800e404:	600b      	str	r3, [r1, #0]
 800e406:	491b      	ldr	r1, [pc, #108]	@ (800e474 <__b2d+0x90>)
 800e408:	dc15      	bgt.n	800e436 <__b2d+0x52>
 800e40a:	f1c0 0c0b 	rsb	ip, r0, #11
 800e40e:	fa22 f30c 	lsr.w	r3, r2, ip
 800e412:	45b8      	cmp	r8, r7
 800e414:	ea43 0501 	orr.w	r5, r3, r1
 800e418:	bf34      	ite	cc
 800e41a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e41e:	2300      	movcs	r3, #0
 800e420:	3015      	adds	r0, #21
 800e422:	fa02 f000 	lsl.w	r0, r2, r0
 800e426:	fa23 f30c 	lsr.w	r3, r3, ip
 800e42a:	4303      	orrs	r3, r0
 800e42c:	461c      	mov	r4, r3
 800e42e:	ec45 4b10 	vmov	d0, r4, r5
 800e432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e436:	45b8      	cmp	r8, r7
 800e438:	bf3a      	itte	cc
 800e43a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e43e:	f1a6 0708 	subcc.w	r7, r6, #8
 800e442:	2300      	movcs	r3, #0
 800e444:	380b      	subs	r0, #11
 800e446:	d012      	beq.n	800e46e <__b2d+0x8a>
 800e448:	f1c0 0120 	rsb	r1, r0, #32
 800e44c:	fa23 f401 	lsr.w	r4, r3, r1
 800e450:	4082      	lsls	r2, r0
 800e452:	4322      	orrs	r2, r4
 800e454:	4547      	cmp	r7, r8
 800e456:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e45a:	bf8c      	ite	hi
 800e45c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e460:	2200      	movls	r2, #0
 800e462:	4083      	lsls	r3, r0
 800e464:	40ca      	lsrs	r2, r1
 800e466:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e46a:	4313      	orrs	r3, r2
 800e46c:	e7de      	b.n	800e42c <__b2d+0x48>
 800e46e:	ea42 0501 	orr.w	r5, r2, r1
 800e472:	e7db      	b.n	800e42c <__b2d+0x48>
 800e474:	3ff00000 	.word	0x3ff00000

0800e478 <__d2b>:
 800e478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e47c:	460f      	mov	r7, r1
 800e47e:	2101      	movs	r1, #1
 800e480:	ec59 8b10 	vmov	r8, r9, d0
 800e484:	4616      	mov	r6, r2
 800e486:	f7ff fc13 	bl	800dcb0 <_Balloc>
 800e48a:	4604      	mov	r4, r0
 800e48c:	b930      	cbnz	r0, 800e49c <__d2b+0x24>
 800e48e:	4602      	mov	r2, r0
 800e490:	4b23      	ldr	r3, [pc, #140]	@ (800e520 <__d2b+0xa8>)
 800e492:	4824      	ldr	r0, [pc, #144]	@ (800e524 <__d2b+0xac>)
 800e494:	f240 310f 	movw	r1, #783	@ 0x30f
 800e498:	f000 fc84 	bl	800eda4 <__assert_func>
 800e49c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e4a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4a4:	b10d      	cbz	r5, 800e4aa <__d2b+0x32>
 800e4a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4aa:	9301      	str	r3, [sp, #4]
 800e4ac:	f1b8 0300 	subs.w	r3, r8, #0
 800e4b0:	d023      	beq.n	800e4fa <__d2b+0x82>
 800e4b2:	4668      	mov	r0, sp
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	f7ff fd0c 	bl	800ded2 <__lo0bits>
 800e4ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e4be:	b1d0      	cbz	r0, 800e4f6 <__d2b+0x7e>
 800e4c0:	f1c0 0320 	rsb	r3, r0, #32
 800e4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e4c8:	430b      	orrs	r3, r1
 800e4ca:	40c2      	lsrs	r2, r0
 800e4cc:	6163      	str	r3, [r4, #20]
 800e4ce:	9201      	str	r2, [sp, #4]
 800e4d0:	9b01      	ldr	r3, [sp, #4]
 800e4d2:	61a3      	str	r3, [r4, #24]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	bf0c      	ite	eq
 800e4d8:	2201      	moveq	r2, #1
 800e4da:	2202      	movne	r2, #2
 800e4dc:	6122      	str	r2, [r4, #16]
 800e4de:	b1a5      	cbz	r5, 800e50a <__d2b+0x92>
 800e4e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e4e4:	4405      	add	r5, r0
 800e4e6:	603d      	str	r5, [r7, #0]
 800e4e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e4ec:	6030      	str	r0, [r6, #0]
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	b003      	add	sp, #12
 800e4f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4f6:	6161      	str	r1, [r4, #20]
 800e4f8:	e7ea      	b.n	800e4d0 <__d2b+0x58>
 800e4fa:	a801      	add	r0, sp, #4
 800e4fc:	f7ff fce9 	bl	800ded2 <__lo0bits>
 800e500:	9b01      	ldr	r3, [sp, #4]
 800e502:	6163      	str	r3, [r4, #20]
 800e504:	3020      	adds	r0, #32
 800e506:	2201      	movs	r2, #1
 800e508:	e7e8      	b.n	800e4dc <__d2b+0x64>
 800e50a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e50e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e512:	6038      	str	r0, [r7, #0]
 800e514:	6918      	ldr	r0, [r3, #16]
 800e516:	f7ff fcbd 	bl	800de94 <__hi0bits>
 800e51a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e51e:	e7e5      	b.n	800e4ec <__d2b+0x74>
 800e520:	0800f8c0 	.word	0x0800f8c0
 800e524:	0800f948 	.word	0x0800f948

0800e528 <__ratio>:
 800e528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e52c:	b085      	sub	sp, #20
 800e52e:	e9cd 1000 	strd	r1, r0, [sp]
 800e532:	a902      	add	r1, sp, #8
 800e534:	f7ff ff56 	bl	800e3e4 <__b2d>
 800e538:	9800      	ldr	r0, [sp, #0]
 800e53a:	a903      	add	r1, sp, #12
 800e53c:	ec55 4b10 	vmov	r4, r5, d0
 800e540:	f7ff ff50 	bl	800e3e4 <__b2d>
 800e544:	9b01      	ldr	r3, [sp, #4]
 800e546:	6919      	ldr	r1, [r3, #16]
 800e548:	9b00      	ldr	r3, [sp, #0]
 800e54a:	691b      	ldr	r3, [r3, #16]
 800e54c:	1ac9      	subs	r1, r1, r3
 800e54e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e552:	1a9b      	subs	r3, r3, r2
 800e554:	ec5b ab10 	vmov	sl, fp, d0
 800e558:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	bfce      	itee	gt
 800e560:	462a      	movgt	r2, r5
 800e562:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e566:	465a      	movle	r2, fp
 800e568:	462f      	mov	r7, r5
 800e56a:	46d9      	mov	r9, fp
 800e56c:	bfcc      	ite	gt
 800e56e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e572:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e576:	464b      	mov	r3, r9
 800e578:	4652      	mov	r2, sl
 800e57a:	4620      	mov	r0, r4
 800e57c:	4639      	mov	r1, r7
 800e57e:	f7f2 f98d 	bl	800089c <__aeabi_ddiv>
 800e582:	ec41 0b10 	vmov	d0, r0, r1
 800e586:	b005      	add	sp, #20
 800e588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e58c <__copybits>:
 800e58c:	3901      	subs	r1, #1
 800e58e:	b570      	push	{r4, r5, r6, lr}
 800e590:	1149      	asrs	r1, r1, #5
 800e592:	6914      	ldr	r4, [r2, #16]
 800e594:	3101      	adds	r1, #1
 800e596:	f102 0314 	add.w	r3, r2, #20
 800e59a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e59e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e5a2:	1f05      	subs	r5, r0, #4
 800e5a4:	42a3      	cmp	r3, r4
 800e5a6:	d30c      	bcc.n	800e5c2 <__copybits+0x36>
 800e5a8:	1aa3      	subs	r3, r4, r2
 800e5aa:	3b11      	subs	r3, #17
 800e5ac:	f023 0303 	bic.w	r3, r3, #3
 800e5b0:	3211      	adds	r2, #17
 800e5b2:	42a2      	cmp	r2, r4
 800e5b4:	bf88      	it	hi
 800e5b6:	2300      	movhi	r3, #0
 800e5b8:	4418      	add	r0, r3
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	4288      	cmp	r0, r1
 800e5be:	d305      	bcc.n	800e5cc <__copybits+0x40>
 800e5c0:	bd70      	pop	{r4, r5, r6, pc}
 800e5c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800e5c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800e5ca:	e7eb      	b.n	800e5a4 <__copybits+0x18>
 800e5cc:	f840 3b04 	str.w	r3, [r0], #4
 800e5d0:	e7f4      	b.n	800e5bc <__copybits+0x30>

0800e5d2 <__any_on>:
 800e5d2:	f100 0214 	add.w	r2, r0, #20
 800e5d6:	6900      	ldr	r0, [r0, #16]
 800e5d8:	114b      	asrs	r3, r1, #5
 800e5da:	4298      	cmp	r0, r3
 800e5dc:	b510      	push	{r4, lr}
 800e5de:	db11      	blt.n	800e604 <__any_on+0x32>
 800e5e0:	dd0a      	ble.n	800e5f8 <__any_on+0x26>
 800e5e2:	f011 011f 	ands.w	r1, r1, #31
 800e5e6:	d007      	beq.n	800e5f8 <__any_on+0x26>
 800e5e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e5ec:	fa24 f001 	lsr.w	r0, r4, r1
 800e5f0:	fa00 f101 	lsl.w	r1, r0, r1
 800e5f4:	428c      	cmp	r4, r1
 800e5f6:	d10b      	bne.n	800e610 <__any_on+0x3e>
 800e5f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d803      	bhi.n	800e608 <__any_on+0x36>
 800e600:	2000      	movs	r0, #0
 800e602:	bd10      	pop	{r4, pc}
 800e604:	4603      	mov	r3, r0
 800e606:	e7f7      	b.n	800e5f8 <__any_on+0x26>
 800e608:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e60c:	2900      	cmp	r1, #0
 800e60e:	d0f5      	beq.n	800e5fc <__any_on+0x2a>
 800e610:	2001      	movs	r0, #1
 800e612:	e7f6      	b.n	800e602 <__any_on+0x30>

0800e614 <__ascii_wctomb>:
 800e614:	4603      	mov	r3, r0
 800e616:	4608      	mov	r0, r1
 800e618:	b141      	cbz	r1, 800e62c <__ascii_wctomb+0x18>
 800e61a:	2aff      	cmp	r2, #255	@ 0xff
 800e61c:	d904      	bls.n	800e628 <__ascii_wctomb+0x14>
 800e61e:	228a      	movs	r2, #138	@ 0x8a
 800e620:	601a      	str	r2, [r3, #0]
 800e622:	f04f 30ff 	mov.w	r0, #4294967295
 800e626:	4770      	bx	lr
 800e628:	700a      	strb	r2, [r1, #0]
 800e62a:	2001      	movs	r0, #1
 800e62c:	4770      	bx	lr

0800e62e <__ssputs_r>:
 800e62e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e632:	688e      	ldr	r6, [r1, #8]
 800e634:	461f      	mov	r7, r3
 800e636:	42be      	cmp	r6, r7
 800e638:	680b      	ldr	r3, [r1, #0]
 800e63a:	4682      	mov	sl, r0
 800e63c:	460c      	mov	r4, r1
 800e63e:	4690      	mov	r8, r2
 800e640:	d82d      	bhi.n	800e69e <__ssputs_r+0x70>
 800e642:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e646:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e64a:	d026      	beq.n	800e69a <__ssputs_r+0x6c>
 800e64c:	6965      	ldr	r5, [r4, #20]
 800e64e:	6909      	ldr	r1, [r1, #16]
 800e650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e654:	eba3 0901 	sub.w	r9, r3, r1
 800e658:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e65c:	1c7b      	adds	r3, r7, #1
 800e65e:	444b      	add	r3, r9
 800e660:	106d      	asrs	r5, r5, #1
 800e662:	429d      	cmp	r5, r3
 800e664:	bf38      	it	cc
 800e666:	461d      	movcc	r5, r3
 800e668:	0553      	lsls	r3, r2, #21
 800e66a:	d527      	bpl.n	800e6bc <__ssputs_r+0x8e>
 800e66c:	4629      	mov	r1, r5
 800e66e:	f7ff fa81 	bl	800db74 <_malloc_r>
 800e672:	4606      	mov	r6, r0
 800e674:	b360      	cbz	r0, 800e6d0 <__ssputs_r+0xa2>
 800e676:	6921      	ldr	r1, [r4, #16]
 800e678:	464a      	mov	r2, r9
 800e67a:	f7fe febc 	bl	800d3f6 <memcpy>
 800e67e:	89a3      	ldrh	r3, [r4, #12]
 800e680:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e688:	81a3      	strh	r3, [r4, #12]
 800e68a:	6126      	str	r6, [r4, #16]
 800e68c:	6165      	str	r5, [r4, #20]
 800e68e:	444e      	add	r6, r9
 800e690:	eba5 0509 	sub.w	r5, r5, r9
 800e694:	6026      	str	r6, [r4, #0]
 800e696:	60a5      	str	r5, [r4, #8]
 800e698:	463e      	mov	r6, r7
 800e69a:	42be      	cmp	r6, r7
 800e69c:	d900      	bls.n	800e6a0 <__ssputs_r+0x72>
 800e69e:	463e      	mov	r6, r7
 800e6a0:	6820      	ldr	r0, [r4, #0]
 800e6a2:	4632      	mov	r2, r6
 800e6a4:	4641      	mov	r1, r8
 800e6a6:	f000 fb53 	bl	800ed50 <memmove>
 800e6aa:	68a3      	ldr	r3, [r4, #8]
 800e6ac:	1b9b      	subs	r3, r3, r6
 800e6ae:	60a3      	str	r3, [r4, #8]
 800e6b0:	6823      	ldr	r3, [r4, #0]
 800e6b2:	4433      	add	r3, r6
 800e6b4:	6023      	str	r3, [r4, #0]
 800e6b6:	2000      	movs	r0, #0
 800e6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6bc:	462a      	mov	r2, r5
 800e6be:	f000 fbab 	bl	800ee18 <_realloc_r>
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d1e0      	bne.n	800e68a <__ssputs_r+0x5c>
 800e6c8:	6921      	ldr	r1, [r4, #16]
 800e6ca:	4650      	mov	r0, sl
 800e6cc:	f7fe feac 	bl	800d428 <_free_r>
 800e6d0:	230c      	movs	r3, #12
 800e6d2:	f8ca 3000 	str.w	r3, [sl]
 800e6d6:	89a3      	ldrh	r3, [r4, #12]
 800e6d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6dc:	81a3      	strh	r3, [r4, #12]
 800e6de:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e2:	e7e9      	b.n	800e6b8 <__ssputs_r+0x8a>

0800e6e4 <_svfiprintf_r>:
 800e6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e8:	4698      	mov	r8, r3
 800e6ea:	898b      	ldrh	r3, [r1, #12]
 800e6ec:	061b      	lsls	r3, r3, #24
 800e6ee:	b09d      	sub	sp, #116	@ 0x74
 800e6f0:	4607      	mov	r7, r0
 800e6f2:	460d      	mov	r5, r1
 800e6f4:	4614      	mov	r4, r2
 800e6f6:	d510      	bpl.n	800e71a <_svfiprintf_r+0x36>
 800e6f8:	690b      	ldr	r3, [r1, #16]
 800e6fa:	b973      	cbnz	r3, 800e71a <_svfiprintf_r+0x36>
 800e6fc:	2140      	movs	r1, #64	@ 0x40
 800e6fe:	f7ff fa39 	bl	800db74 <_malloc_r>
 800e702:	6028      	str	r0, [r5, #0]
 800e704:	6128      	str	r0, [r5, #16]
 800e706:	b930      	cbnz	r0, 800e716 <_svfiprintf_r+0x32>
 800e708:	230c      	movs	r3, #12
 800e70a:	603b      	str	r3, [r7, #0]
 800e70c:	f04f 30ff 	mov.w	r0, #4294967295
 800e710:	b01d      	add	sp, #116	@ 0x74
 800e712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e716:	2340      	movs	r3, #64	@ 0x40
 800e718:	616b      	str	r3, [r5, #20]
 800e71a:	2300      	movs	r3, #0
 800e71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e71e:	2320      	movs	r3, #32
 800e720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e724:	f8cd 800c 	str.w	r8, [sp, #12]
 800e728:	2330      	movs	r3, #48	@ 0x30
 800e72a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e8c8 <_svfiprintf_r+0x1e4>
 800e72e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e732:	f04f 0901 	mov.w	r9, #1
 800e736:	4623      	mov	r3, r4
 800e738:	469a      	mov	sl, r3
 800e73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e73e:	b10a      	cbz	r2, 800e744 <_svfiprintf_r+0x60>
 800e740:	2a25      	cmp	r2, #37	@ 0x25
 800e742:	d1f9      	bne.n	800e738 <_svfiprintf_r+0x54>
 800e744:	ebba 0b04 	subs.w	fp, sl, r4
 800e748:	d00b      	beq.n	800e762 <_svfiprintf_r+0x7e>
 800e74a:	465b      	mov	r3, fp
 800e74c:	4622      	mov	r2, r4
 800e74e:	4629      	mov	r1, r5
 800e750:	4638      	mov	r0, r7
 800e752:	f7ff ff6c 	bl	800e62e <__ssputs_r>
 800e756:	3001      	adds	r0, #1
 800e758:	f000 80a7 	beq.w	800e8aa <_svfiprintf_r+0x1c6>
 800e75c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e75e:	445a      	add	r2, fp
 800e760:	9209      	str	r2, [sp, #36]	@ 0x24
 800e762:	f89a 3000 	ldrb.w	r3, [sl]
 800e766:	2b00      	cmp	r3, #0
 800e768:	f000 809f 	beq.w	800e8aa <_svfiprintf_r+0x1c6>
 800e76c:	2300      	movs	r3, #0
 800e76e:	f04f 32ff 	mov.w	r2, #4294967295
 800e772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e776:	f10a 0a01 	add.w	sl, sl, #1
 800e77a:	9304      	str	r3, [sp, #16]
 800e77c:	9307      	str	r3, [sp, #28]
 800e77e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e782:	931a      	str	r3, [sp, #104]	@ 0x68
 800e784:	4654      	mov	r4, sl
 800e786:	2205      	movs	r2, #5
 800e788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e78c:	484e      	ldr	r0, [pc, #312]	@ (800e8c8 <_svfiprintf_r+0x1e4>)
 800e78e:	f7f1 fd4f 	bl	8000230 <memchr>
 800e792:	9a04      	ldr	r2, [sp, #16]
 800e794:	b9d8      	cbnz	r0, 800e7ce <_svfiprintf_r+0xea>
 800e796:	06d0      	lsls	r0, r2, #27
 800e798:	bf44      	itt	mi
 800e79a:	2320      	movmi	r3, #32
 800e79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7a0:	0711      	lsls	r1, r2, #28
 800e7a2:	bf44      	itt	mi
 800e7a4:	232b      	movmi	r3, #43	@ 0x2b
 800e7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e7ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7b0:	d015      	beq.n	800e7de <_svfiprintf_r+0xfa>
 800e7b2:	9a07      	ldr	r2, [sp, #28]
 800e7b4:	4654      	mov	r4, sl
 800e7b6:	2000      	movs	r0, #0
 800e7b8:	f04f 0c0a 	mov.w	ip, #10
 800e7bc:	4621      	mov	r1, r4
 800e7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7c2:	3b30      	subs	r3, #48	@ 0x30
 800e7c4:	2b09      	cmp	r3, #9
 800e7c6:	d94b      	bls.n	800e860 <_svfiprintf_r+0x17c>
 800e7c8:	b1b0      	cbz	r0, 800e7f8 <_svfiprintf_r+0x114>
 800e7ca:	9207      	str	r2, [sp, #28]
 800e7cc:	e014      	b.n	800e7f8 <_svfiprintf_r+0x114>
 800e7ce:	eba0 0308 	sub.w	r3, r0, r8
 800e7d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	9304      	str	r3, [sp, #16]
 800e7da:	46a2      	mov	sl, r4
 800e7dc:	e7d2      	b.n	800e784 <_svfiprintf_r+0xa0>
 800e7de:	9b03      	ldr	r3, [sp, #12]
 800e7e0:	1d19      	adds	r1, r3, #4
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	9103      	str	r1, [sp, #12]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	bfbb      	ittet	lt
 800e7ea:	425b      	neglt	r3, r3
 800e7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e7f0:	9307      	strge	r3, [sp, #28]
 800e7f2:	9307      	strlt	r3, [sp, #28]
 800e7f4:	bfb8      	it	lt
 800e7f6:	9204      	strlt	r2, [sp, #16]
 800e7f8:	7823      	ldrb	r3, [r4, #0]
 800e7fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7fc:	d10a      	bne.n	800e814 <_svfiprintf_r+0x130>
 800e7fe:	7863      	ldrb	r3, [r4, #1]
 800e800:	2b2a      	cmp	r3, #42	@ 0x2a
 800e802:	d132      	bne.n	800e86a <_svfiprintf_r+0x186>
 800e804:	9b03      	ldr	r3, [sp, #12]
 800e806:	1d1a      	adds	r2, r3, #4
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	9203      	str	r2, [sp, #12]
 800e80c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e810:	3402      	adds	r4, #2
 800e812:	9305      	str	r3, [sp, #20]
 800e814:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e8d8 <_svfiprintf_r+0x1f4>
 800e818:	7821      	ldrb	r1, [r4, #0]
 800e81a:	2203      	movs	r2, #3
 800e81c:	4650      	mov	r0, sl
 800e81e:	f7f1 fd07 	bl	8000230 <memchr>
 800e822:	b138      	cbz	r0, 800e834 <_svfiprintf_r+0x150>
 800e824:	9b04      	ldr	r3, [sp, #16]
 800e826:	eba0 000a 	sub.w	r0, r0, sl
 800e82a:	2240      	movs	r2, #64	@ 0x40
 800e82c:	4082      	lsls	r2, r0
 800e82e:	4313      	orrs	r3, r2
 800e830:	3401      	adds	r4, #1
 800e832:	9304      	str	r3, [sp, #16]
 800e834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e838:	4824      	ldr	r0, [pc, #144]	@ (800e8cc <_svfiprintf_r+0x1e8>)
 800e83a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e83e:	2206      	movs	r2, #6
 800e840:	f7f1 fcf6 	bl	8000230 <memchr>
 800e844:	2800      	cmp	r0, #0
 800e846:	d036      	beq.n	800e8b6 <_svfiprintf_r+0x1d2>
 800e848:	4b21      	ldr	r3, [pc, #132]	@ (800e8d0 <_svfiprintf_r+0x1ec>)
 800e84a:	bb1b      	cbnz	r3, 800e894 <_svfiprintf_r+0x1b0>
 800e84c:	9b03      	ldr	r3, [sp, #12]
 800e84e:	3307      	adds	r3, #7
 800e850:	f023 0307 	bic.w	r3, r3, #7
 800e854:	3308      	adds	r3, #8
 800e856:	9303      	str	r3, [sp, #12]
 800e858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e85a:	4433      	add	r3, r6
 800e85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e85e:	e76a      	b.n	800e736 <_svfiprintf_r+0x52>
 800e860:	fb0c 3202 	mla	r2, ip, r2, r3
 800e864:	460c      	mov	r4, r1
 800e866:	2001      	movs	r0, #1
 800e868:	e7a8      	b.n	800e7bc <_svfiprintf_r+0xd8>
 800e86a:	2300      	movs	r3, #0
 800e86c:	3401      	adds	r4, #1
 800e86e:	9305      	str	r3, [sp, #20]
 800e870:	4619      	mov	r1, r3
 800e872:	f04f 0c0a 	mov.w	ip, #10
 800e876:	4620      	mov	r0, r4
 800e878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e87c:	3a30      	subs	r2, #48	@ 0x30
 800e87e:	2a09      	cmp	r2, #9
 800e880:	d903      	bls.n	800e88a <_svfiprintf_r+0x1a6>
 800e882:	2b00      	cmp	r3, #0
 800e884:	d0c6      	beq.n	800e814 <_svfiprintf_r+0x130>
 800e886:	9105      	str	r1, [sp, #20]
 800e888:	e7c4      	b.n	800e814 <_svfiprintf_r+0x130>
 800e88a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e88e:	4604      	mov	r4, r0
 800e890:	2301      	movs	r3, #1
 800e892:	e7f0      	b.n	800e876 <_svfiprintf_r+0x192>
 800e894:	ab03      	add	r3, sp, #12
 800e896:	9300      	str	r3, [sp, #0]
 800e898:	462a      	mov	r2, r5
 800e89a:	4b0e      	ldr	r3, [pc, #56]	@ (800e8d4 <_svfiprintf_r+0x1f0>)
 800e89c:	a904      	add	r1, sp, #16
 800e89e:	4638      	mov	r0, r7
 800e8a0:	f3af 8000 	nop.w
 800e8a4:	1c42      	adds	r2, r0, #1
 800e8a6:	4606      	mov	r6, r0
 800e8a8:	d1d6      	bne.n	800e858 <_svfiprintf_r+0x174>
 800e8aa:	89ab      	ldrh	r3, [r5, #12]
 800e8ac:	065b      	lsls	r3, r3, #25
 800e8ae:	f53f af2d 	bmi.w	800e70c <_svfiprintf_r+0x28>
 800e8b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8b4:	e72c      	b.n	800e710 <_svfiprintf_r+0x2c>
 800e8b6:	ab03      	add	r3, sp, #12
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	462a      	mov	r2, r5
 800e8bc:	4b05      	ldr	r3, [pc, #20]	@ (800e8d4 <_svfiprintf_r+0x1f0>)
 800e8be:	a904      	add	r1, sp, #16
 800e8c0:	4638      	mov	r0, r7
 800e8c2:	f000 f879 	bl	800e9b8 <_printf_i>
 800e8c6:	e7ed      	b.n	800e8a4 <_svfiprintf_r+0x1c0>
 800e8c8:	0800fba1 	.word	0x0800fba1
 800e8cc:	0800fbab 	.word	0x0800fbab
 800e8d0:	00000000 	.word	0x00000000
 800e8d4:	0800e62f 	.word	0x0800e62f
 800e8d8:	0800fba7 	.word	0x0800fba7

0800e8dc <_printf_common>:
 800e8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8e0:	4616      	mov	r6, r2
 800e8e2:	4698      	mov	r8, r3
 800e8e4:	688a      	ldr	r2, [r1, #8]
 800e8e6:	690b      	ldr	r3, [r1, #16]
 800e8e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	bfb8      	it	lt
 800e8f0:	4613      	movlt	r3, r2
 800e8f2:	6033      	str	r3, [r6, #0]
 800e8f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e8f8:	4607      	mov	r7, r0
 800e8fa:	460c      	mov	r4, r1
 800e8fc:	b10a      	cbz	r2, 800e902 <_printf_common+0x26>
 800e8fe:	3301      	adds	r3, #1
 800e900:	6033      	str	r3, [r6, #0]
 800e902:	6823      	ldr	r3, [r4, #0]
 800e904:	0699      	lsls	r1, r3, #26
 800e906:	bf42      	ittt	mi
 800e908:	6833      	ldrmi	r3, [r6, #0]
 800e90a:	3302      	addmi	r3, #2
 800e90c:	6033      	strmi	r3, [r6, #0]
 800e90e:	6825      	ldr	r5, [r4, #0]
 800e910:	f015 0506 	ands.w	r5, r5, #6
 800e914:	d106      	bne.n	800e924 <_printf_common+0x48>
 800e916:	f104 0a19 	add.w	sl, r4, #25
 800e91a:	68e3      	ldr	r3, [r4, #12]
 800e91c:	6832      	ldr	r2, [r6, #0]
 800e91e:	1a9b      	subs	r3, r3, r2
 800e920:	42ab      	cmp	r3, r5
 800e922:	dc26      	bgt.n	800e972 <_printf_common+0x96>
 800e924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e928:	6822      	ldr	r2, [r4, #0]
 800e92a:	3b00      	subs	r3, #0
 800e92c:	bf18      	it	ne
 800e92e:	2301      	movne	r3, #1
 800e930:	0692      	lsls	r2, r2, #26
 800e932:	d42b      	bmi.n	800e98c <_printf_common+0xb0>
 800e934:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e938:	4641      	mov	r1, r8
 800e93a:	4638      	mov	r0, r7
 800e93c:	47c8      	blx	r9
 800e93e:	3001      	adds	r0, #1
 800e940:	d01e      	beq.n	800e980 <_printf_common+0xa4>
 800e942:	6823      	ldr	r3, [r4, #0]
 800e944:	6922      	ldr	r2, [r4, #16]
 800e946:	f003 0306 	and.w	r3, r3, #6
 800e94a:	2b04      	cmp	r3, #4
 800e94c:	bf02      	ittt	eq
 800e94e:	68e5      	ldreq	r5, [r4, #12]
 800e950:	6833      	ldreq	r3, [r6, #0]
 800e952:	1aed      	subeq	r5, r5, r3
 800e954:	68a3      	ldr	r3, [r4, #8]
 800e956:	bf0c      	ite	eq
 800e958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e95c:	2500      	movne	r5, #0
 800e95e:	4293      	cmp	r3, r2
 800e960:	bfc4      	itt	gt
 800e962:	1a9b      	subgt	r3, r3, r2
 800e964:	18ed      	addgt	r5, r5, r3
 800e966:	2600      	movs	r6, #0
 800e968:	341a      	adds	r4, #26
 800e96a:	42b5      	cmp	r5, r6
 800e96c:	d11a      	bne.n	800e9a4 <_printf_common+0xc8>
 800e96e:	2000      	movs	r0, #0
 800e970:	e008      	b.n	800e984 <_printf_common+0xa8>
 800e972:	2301      	movs	r3, #1
 800e974:	4652      	mov	r2, sl
 800e976:	4641      	mov	r1, r8
 800e978:	4638      	mov	r0, r7
 800e97a:	47c8      	blx	r9
 800e97c:	3001      	adds	r0, #1
 800e97e:	d103      	bne.n	800e988 <_printf_common+0xac>
 800e980:	f04f 30ff 	mov.w	r0, #4294967295
 800e984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e988:	3501      	adds	r5, #1
 800e98a:	e7c6      	b.n	800e91a <_printf_common+0x3e>
 800e98c:	18e1      	adds	r1, r4, r3
 800e98e:	1c5a      	adds	r2, r3, #1
 800e990:	2030      	movs	r0, #48	@ 0x30
 800e992:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e996:	4422      	add	r2, r4
 800e998:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e99c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e9a0:	3302      	adds	r3, #2
 800e9a2:	e7c7      	b.n	800e934 <_printf_common+0x58>
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	4622      	mov	r2, r4
 800e9a8:	4641      	mov	r1, r8
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	47c8      	blx	r9
 800e9ae:	3001      	adds	r0, #1
 800e9b0:	d0e6      	beq.n	800e980 <_printf_common+0xa4>
 800e9b2:	3601      	adds	r6, #1
 800e9b4:	e7d9      	b.n	800e96a <_printf_common+0x8e>
	...

0800e9b8 <_printf_i>:
 800e9b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9bc:	7e0f      	ldrb	r7, [r1, #24]
 800e9be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e9c0:	2f78      	cmp	r7, #120	@ 0x78
 800e9c2:	4691      	mov	r9, r2
 800e9c4:	4680      	mov	r8, r0
 800e9c6:	460c      	mov	r4, r1
 800e9c8:	469a      	mov	sl, r3
 800e9ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e9ce:	d807      	bhi.n	800e9e0 <_printf_i+0x28>
 800e9d0:	2f62      	cmp	r7, #98	@ 0x62
 800e9d2:	d80a      	bhi.n	800e9ea <_printf_i+0x32>
 800e9d4:	2f00      	cmp	r7, #0
 800e9d6:	f000 80d2 	beq.w	800eb7e <_printf_i+0x1c6>
 800e9da:	2f58      	cmp	r7, #88	@ 0x58
 800e9dc:	f000 80b9 	beq.w	800eb52 <_printf_i+0x19a>
 800e9e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e9e8:	e03a      	b.n	800ea60 <_printf_i+0xa8>
 800e9ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e9ee:	2b15      	cmp	r3, #21
 800e9f0:	d8f6      	bhi.n	800e9e0 <_printf_i+0x28>
 800e9f2:	a101      	add	r1, pc, #4	@ (adr r1, 800e9f8 <_printf_i+0x40>)
 800e9f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9f8:	0800ea51 	.word	0x0800ea51
 800e9fc:	0800ea65 	.word	0x0800ea65
 800ea00:	0800e9e1 	.word	0x0800e9e1
 800ea04:	0800e9e1 	.word	0x0800e9e1
 800ea08:	0800e9e1 	.word	0x0800e9e1
 800ea0c:	0800e9e1 	.word	0x0800e9e1
 800ea10:	0800ea65 	.word	0x0800ea65
 800ea14:	0800e9e1 	.word	0x0800e9e1
 800ea18:	0800e9e1 	.word	0x0800e9e1
 800ea1c:	0800e9e1 	.word	0x0800e9e1
 800ea20:	0800e9e1 	.word	0x0800e9e1
 800ea24:	0800eb65 	.word	0x0800eb65
 800ea28:	0800ea8f 	.word	0x0800ea8f
 800ea2c:	0800eb1f 	.word	0x0800eb1f
 800ea30:	0800e9e1 	.word	0x0800e9e1
 800ea34:	0800e9e1 	.word	0x0800e9e1
 800ea38:	0800eb87 	.word	0x0800eb87
 800ea3c:	0800e9e1 	.word	0x0800e9e1
 800ea40:	0800ea8f 	.word	0x0800ea8f
 800ea44:	0800e9e1 	.word	0x0800e9e1
 800ea48:	0800e9e1 	.word	0x0800e9e1
 800ea4c:	0800eb27 	.word	0x0800eb27
 800ea50:	6833      	ldr	r3, [r6, #0]
 800ea52:	1d1a      	adds	r2, r3, #4
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	6032      	str	r2, [r6, #0]
 800ea58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea60:	2301      	movs	r3, #1
 800ea62:	e09d      	b.n	800eba0 <_printf_i+0x1e8>
 800ea64:	6833      	ldr	r3, [r6, #0]
 800ea66:	6820      	ldr	r0, [r4, #0]
 800ea68:	1d19      	adds	r1, r3, #4
 800ea6a:	6031      	str	r1, [r6, #0]
 800ea6c:	0606      	lsls	r6, r0, #24
 800ea6e:	d501      	bpl.n	800ea74 <_printf_i+0xbc>
 800ea70:	681d      	ldr	r5, [r3, #0]
 800ea72:	e003      	b.n	800ea7c <_printf_i+0xc4>
 800ea74:	0645      	lsls	r5, r0, #25
 800ea76:	d5fb      	bpl.n	800ea70 <_printf_i+0xb8>
 800ea78:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea7c:	2d00      	cmp	r5, #0
 800ea7e:	da03      	bge.n	800ea88 <_printf_i+0xd0>
 800ea80:	232d      	movs	r3, #45	@ 0x2d
 800ea82:	426d      	negs	r5, r5
 800ea84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea88:	4859      	ldr	r0, [pc, #356]	@ (800ebf0 <_printf_i+0x238>)
 800ea8a:	230a      	movs	r3, #10
 800ea8c:	e011      	b.n	800eab2 <_printf_i+0xfa>
 800ea8e:	6821      	ldr	r1, [r4, #0]
 800ea90:	6833      	ldr	r3, [r6, #0]
 800ea92:	0608      	lsls	r0, r1, #24
 800ea94:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea98:	d402      	bmi.n	800eaa0 <_printf_i+0xe8>
 800ea9a:	0649      	lsls	r1, r1, #25
 800ea9c:	bf48      	it	mi
 800ea9e:	b2ad      	uxthmi	r5, r5
 800eaa0:	2f6f      	cmp	r7, #111	@ 0x6f
 800eaa2:	4853      	ldr	r0, [pc, #332]	@ (800ebf0 <_printf_i+0x238>)
 800eaa4:	6033      	str	r3, [r6, #0]
 800eaa6:	bf14      	ite	ne
 800eaa8:	230a      	movne	r3, #10
 800eaaa:	2308      	moveq	r3, #8
 800eaac:	2100      	movs	r1, #0
 800eaae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eab2:	6866      	ldr	r6, [r4, #4]
 800eab4:	60a6      	str	r6, [r4, #8]
 800eab6:	2e00      	cmp	r6, #0
 800eab8:	bfa2      	ittt	ge
 800eaba:	6821      	ldrge	r1, [r4, #0]
 800eabc:	f021 0104 	bicge.w	r1, r1, #4
 800eac0:	6021      	strge	r1, [r4, #0]
 800eac2:	b90d      	cbnz	r5, 800eac8 <_printf_i+0x110>
 800eac4:	2e00      	cmp	r6, #0
 800eac6:	d04b      	beq.n	800eb60 <_printf_i+0x1a8>
 800eac8:	4616      	mov	r6, r2
 800eaca:	fbb5 f1f3 	udiv	r1, r5, r3
 800eace:	fb03 5711 	mls	r7, r3, r1, r5
 800ead2:	5dc7      	ldrb	r7, [r0, r7]
 800ead4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ead8:	462f      	mov	r7, r5
 800eada:	42bb      	cmp	r3, r7
 800eadc:	460d      	mov	r5, r1
 800eade:	d9f4      	bls.n	800eaca <_printf_i+0x112>
 800eae0:	2b08      	cmp	r3, #8
 800eae2:	d10b      	bne.n	800eafc <_printf_i+0x144>
 800eae4:	6823      	ldr	r3, [r4, #0]
 800eae6:	07df      	lsls	r7, r3, #31
 800eae8:	d508      	bpl.n	800eafc <_printf_i+0x144>
 800eaea:	6923      	ldr	r3, [r4, #16]
 800eaec:	6861      	ldr	r1, [r4, #4]
 800eaee:	4299      	cmp	r1, r3
 800eaf0:	bfde      	ittt	le
 800eaf2:	2330      	movle	r3, #48	@ 0x30
 800eaf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eaf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eafc:	1b92      	subs	r2, r2, r6
 800eafe:	6122      	str	r2, [r4, #16]
 800eb00:	f8cd a000 	str.w	sl, [sp]
 800eb04:	464b      	mov	r3, r9
 800eb06:	aa03      	add	r2, sp, #12
 800eb08:	4621      	mov	r1, r4
 800eb0a:	4640      	mov	r0, r8
 800eb0c:	f7ff fee6 	bl	800e8dc <_printf_common>
 800eb10:	3001      	adds	r0, #1
 800eb12:	d14a      	bne.n	800ebaa <_printf_i+0x1f2>
 800eb14:	f04f 30ff 	mov.w	r0, #4294967295
 800eb18:	b004      	add	sp, #16
 800eb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb1e:	6823      	ldr	r3, [r4, #0]
 800eb20:	f043 0320 	orr.w	r3, r3, #32
 800eb24:	6023      	str	r3, [r4, #0]
 800eb26:	4833      	ldr	r0, [pc, #204]	@ (800ebf4 <_printf_i+0x23c>)
 800eb28:	2778      	movs	r7, #120	@ 0x78
 800eb2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb2e:	6823      	ldr	r3, [r4, #0]
 800eb30:	6831      	ldr	r1, [r6, #0]
 800eb32:	061f      	lsls	r7, r3, #24
 800eb34:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb38:	d402      	bmi.n	800eb40 <_printf_i+0x188>
 800eb3a:	065f      	lsls	r7, r3, #25
 800eb3c:	bf48      	it	mi
 800eb3e:	b2ad      	uxthmi	r5, r5
 800eb40:	6031      	str	r1, [r6, #0]
 800eb42:	07d9      	lsls	r1, r3, #31
 800eb44:	bf44      	itt	mi
 800eb46:	f043 0320 	orrmi.w	r3, r3, #32
 800eb4a:	6023      	strmi	r3, [r4, #0]
 800eb4c:	b11d      	cbz	r5, 800eb56 <_printf_i+0x19e>
 800eb4e:	2310      	movs	r3, #16
 800eb50:	e7ac      	b.n	800eaac <_printf_i+0xf4>
 800eb52:	4827      	ldr	r0, [pc, #156]	@ (800ebf0 <_printf_i+0x238>)
 800eb54:	e7e9      	b.n	800eb2a <_printf_i+0x172>
 800eb56:	6823      	ldr	r3, [r4, #0]
 800eb58:	f023 0320 	bic.w	r3, r3, #32
 800eb5c:	6023      	str	r3, [r4, #0]
 800eb5e:	e7f6      	b.n	800eb4e <_printf_i+0x196>
 800eb60:	4616      	mov	r6, r2
 800eb62:	e7bd      	b.n	800eae0 <_printf_i+0x128>
 800eb64:	6833      	ldr	r3, [r6, #0]
 800eb66:	6825      	ldr	r5, [r4, #0]
 800eb68:	6961      	ldr	r1, [r4, #20]
 800eb6a:	1d18      	adds	r0, r3, #4
 800eb6c:	6030      	str	r0, [r6, #0]
 800eb6e:	062e      	lsls	r6, r5, #24
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	d501      	bpl.n	800eb78 <_printf_i+0x1c0>
 800eb74:	6019      	str	r1, [r3, #0]
 800eb76:	e002      	b.n	800eb7e <_printf_i+0x1c6>
 800eb78:	0668      	lsls	r0, r5, #25
 800eb7a:	d5fb      	bpl.n	800eb74 <_printf_i+0x1bc>
 800eb7c:	8019      	strh	r1, [r3, #0]
 800eb7e:	2300      	movs	r3, #0
 800eb80:	6123      	str	r3, [r4, #16]
 800eb82:	4616      	mov	r6, r2
 800eb84:	e7bc      	b.n	800eb00 <_printf_i+0x148>
 800eb86:	6833      	ldr	r3, [r6, #0]
 800eb88:	1d1a      	adds	r2, r3, #4
 800eb8a:	6032      	str	r2, [r6, #0]
 800eb8c:	681e      	ldr	r6, [r3, #0]
 800eb8e:	6862      	ldr	r2, [r4, #4]
 800eb90:	2100      	movs	r1, #0
 800eb92:	4630      	mov	r0, r6
 800eb94:	f7f1 fb4c 	bl	8000230 <memchr>
 800eb98:	b108      	cbz	r0, 800eb9e <_printf_i+0x1e6>
 800eb9a:	1b80      	subs	r0, r0, r6
 800eb9c:	6060      	str	r0, [r4, #4]
 800eb9e:	6863      	ldr	r3, [r4, #4]
 800eba0:	6123      	str	r3, [r4, #16]
 800eba2:	2300      	movs	r3, #0
 800eba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eba8:	e7aa      	b.n	800eb00 <_printf_i+0x148>
 800ebaa:	6923      	ldr	r3, [r4, #16]
 800ebac:	4632      	mov	r2, r6
 800ebae:	4649      	mov	r1, r9
 800ebb0:	4640      	mov	r0, r8
 800ebb2:	47d0      	blx	sl
 800ebb4:	3001      	adds	r0, #1
 800ebb6:	d0ad      	beq.n	800eb14 <_printf_i+0x15c>
 800ebb8:	6823      	ldr	r3, [r4, #0]
 800ebba:	079b      	lsls	r3, r3, #30
 800ebbc:	d413      	bmi.n	800ebe6 <_printf_i+0x22e>
 800ebbe:	68e0      	ldr	r0, [r4, #12]
 800ebc0:	9b03      	ldr	r3, [sp, #12]
 800ebc2:	4298      	cmp	r0, r3
 800ebc4:	bfb8      	it	lt
 800ebc6:	4618      	movlt	r0, r3
 800ebc8:	e7a6      	b.n	800eb18 <_printf_i+0x160>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	4632      	mov	r2, r6
 800ebce:	4649      	mov	r1, r9
 800ebd0:	4640      	mov	r0, r8
 800ebd2:	47d0      	blx	sl
 800ebd4:	3001      	adds	r0, #1
 800ebd6:	d09d      	beq.n	800eb14 <_printf_i+0x15c>
 800ebd8:	3501      	adds	r5, #1
 800ebda:	68e3      	ldr	r3, [r4, #12]
 800ebdc:	9903      	ldr	r1, [sp, #12]
 800ebde:	1a5b      	subs	r3, r3, r1
 800ebe0:	42ab      	cmp	r3, r5
 800ebe2:	dcf2      	bgt.n	800ebca <_printf_i+0x212>
 800ebe4:	e7eb      	b.n	800ebbe <_printf_i+0x206>
 800ebe6:	2500      	movs	r5, #0
 800ebe8:	f104 0619 	add.w	r6, r4, #25
 800ebec:	e7f5      	b.n	800ebda <_printf_i+0x222>
 800ebee:	bf00      	nop
 800ebf0:	0800fbb2 	.word	0x0800fbb2
 800ebf4:	0800fbc3 	.word	0x0800fbc3

0800ebf8 <__sflush_r>:
 800ebf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec00:	0716      	lsls	r6, r2, #28
 800ec02:	4605      	mov	r5, r0
 800ec04:	460c      	mov	r4, r1
 800ec06:	d454      	bmi.n	800ecb2 <__sflush_r+0xba>
 800ec08:	684b      	ldr	r3, [r1, #4]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	dc02      	bgt.n	800ec14 <__sflush_r+0x1c>
 800ec0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	dd48      	ble.n	800eca6 <__sflush_r+0xae>
 800ec14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec16:	2e00      	cmp	r6, #0
 800ec18:	d045      	beq.n	800eca6 <__sflush_r+0xae>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ec20:	682f      	ldr	r7, [r5, #0]
 800ec22:	6a21      	ldr	r1, [r4, #32]
 800ec24:	602b      	str	r3, [r5, #0]
 800ec26:	d030      	beq.n	800ec8a <__sflush_r+0x92>
 800ec28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec2a:	89a3      	ldrh	r3, [r4, #12]
 800ec2c:	0759      	lsls	r1, r3, #29
 800ec2e:	d505      	bpl.n	800ec3c <__sflush_r+0x44>
 800ec30:	6863      	ldr	r3, [r4, #4]
 800ec32:	1ad2      	subs	r2, r2, r3
 800ec34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ec36:	b10b      	cbz	r3, 800ec3c <__sflush_r+0x44>
 800ec38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec3a:	1ad2      	subs	r2, r2, r3
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec40:	6a21      	ldr	r1, [r4, #32]
 800ec42:	4628      	mov	r0, r5
 800ec44:	47b0      	blx	r6
 800ec46:	1c43      	adds	r3, r0, #1
 800ec48:	89a3      	ldrh	r3, [r4, #12]
 800ec4a:	d106      	bne.n	800ec5a <__sflush_r+0x62>
 800ec4c:	6829      	ldr	r1, [r5, #0]
 800ec4e:	291d      	cmp	r1, #29
 800ec50:	d82b      	bhi.n	800ecaa <__sflush_r+0xb2>
 800ec52:	4a2a      	ldr	r2, [pc, #168]	@ (800ecfc <__sflush_r+0x104>)
 800ec54:	410a      	asrs	r2, r1
 800ec56:	07d6      	lsls	r6, r2, #31
 800ec58:	d427      	bmi.n	800ecaa <__sflush_r+0xb2>
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	6062      	str	r2, [r4, #4]
 800ec5e:	04d9      	lsls	r1, r3, #19
 800ec60:	6922      	ldr	r2, [r4, #16]
 800ec62:	6022      	str	r2, [r4, #0]
 800ec64:	d504      	bpl.n	800ec70 <__sflush_r+0x78>
 800ec66:	1c42      	adds	r2, r0, #1
 800ec68:	d101      	bne.n	800ec6e <__sflush_r+0x76>
 800ec6a:	682b      	ldr	r3, [r5, #0]
 800ec6c:	b903      	cbnz	r3, 800ec70 <__sflush_r+0x78>
 800ec6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec72:	602f      	str	r7, [r5, #0]
 800ec74:	b1b9      	cbz	r1, 800eca6 <__sflush_r+0xae>
 800ec76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec7a:	4299      	cmp	r1, r3
 800ec7c:	d002      	beq.n	800ec84 <__sflush_r+0x8c>
 800ec7e:	4628      	mov	r0, r5
 800ec80:	f7fe fbd2 	bl	800d428 <_free_r>
 800ec84:	2300      	movs	r3, #0
 800ec86:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec88:	e00d      	b.n	800eca6 <__sflush_r+0xae>
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	47b0      	blx	r6
 800ec90:	4602      	mov	r2, r0
 800ec92:	1c50      	adds	r0, r2, #1
 800ec94:	d1c9      	bne.n	800ec2a <__sflush_r+0x32>
 800ec96:	682b      	ldr	r3, [r5, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d0c6      	beq.n	800ec2a <__sflush_r+0x32>
 800ec9c:	2b1d      	cmp	r3, #29
 800ec9e:	d001      	beq.n	800eca4 <__sflush_r+0xac>
 800eca0:	2b16      	cmp	r3, #22
 800eca2:	d11e      	bne.n	800ece2 <__sflush_r+0xea>
 800eca4:	602f      	str	r7, [r5, #0]
 800eca6:	2000      	movs	r0, #0
 800eca8:	e022      	b.n	800ecf0 <__sflush_r+0xf8>
 800ecaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecae:	b21b      	sxth	r3, r3
 800ecb0:	e01b      	b.n	800ecea <__sflush_r+0xf2>
 800ecb2:	690f      	ldr	r7, [r1, #16]
 800ecb4:	2f00      	cmp	r7, #0
 800ecb6:	d0f6      	beq.n	800eca6 <__sflush_r+0xae>
 800ecb8:	0793      	lsls	r3, r2, #30
 800ecba:	680e      	ldr	r6, [r1, #0]
 800ecbc:	bf08      	it	eq
 800ecbe:	694b      	ldreq	r3, [r1, #20]
 800ecc0:	600f      	str	r7, [r1, #0]
 800ecc2:	bf18      	it	ne
 800ecc4:	2300      	movne	r3, #0
 800ecc6:	eba6 0807 	sub.w	r8, r6, r7
 800ecca:	608b      	str	r3, [r1, #8]
 800eccc:	f1b8 0f00 	cmp.w	r8, #0
 800ecd0:	dde9      	ble.n	800eca6 <__sflush_r+0xae>
 800ecd2:	6a21      	ldr	r1, [r4, #32]
 800ecd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ecd6:	4643      	mov	r3, r8
 800ecd8:	463a      	mov	r2, r7
 800ecda:	4628      	mov	r0, r5
 800ecdc:	47b0      	blx	r6
 800ecde:	2800      	cmp	r0, #0
 800ece0:	dc08      	bgt.n	800ecf4 <__sflush_r+0xfc>
 800ece2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ece6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecea:	81a3      	strh	r3, [r4, #12]
 800ecec:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecf4:	4407      	add	r7, r0
 800ecf6:	eba8 0800 	sub.w	r8, r8, r0
 800ecfa:	e7e7      	b.n	800eccc <__sflush_r+0xd4>
 800ecfc:	dfbffffe 	.word	0xdfbffffe

0800ed00 <_fflush_r>:
 800ed00:	b538      	push	{r3, r4, r5, lr}
 800ed02:	690b      	ldr	r3, [r1, #16]
 800ed04:	4605      	mov	r5, r0
 800ed06:	460c      	mov	r4, r1
 800ed08:	b913      	cbnz	r3, 800ed10 <_fflush_r+0x10>
 800ed0a:	2500      	movs	r5, #0
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	bd38      	pop	{r3, r4, r5, pc}
 800ed10:	b118      	cbz	r0, 800ed1a <_fflush_r+0x1a>
 800ed12:	6a03      	ldr	r3, [r0, #32]
 800ed14:	b90b      	cbnz	r3, 800ed1a <_fflush_r+0x1a>
 800ed16:	f7fe fa47 	bl	800d1a8 <__sinit>
 800ed1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d0f3      	beq.n	800ed0a <_fflush_r+0xa>
 800ed22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ed24:	07d0      	lsls	r0, r2, #31
 800ed26:	d404      	bmi.n	800ed32 <_fflush_r+0x32>
 800ed28:	0599      	lsls	r1, r3, #22
 800ed2a:	d402      	bmi.n	800ed32 <_fflush_r+0x32>
 800ed2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed2e:	f7fe fb60 	bl	800d3f2 <__retarget_lock_acquire_recursive>
 800ed32:	4628      	mov	r0, r5
 800ed34:	4621      	mov	r1, r4
 800ed36:	f7ff ff5f 	bl	800ebf8 <__sflush_r>
 800ed3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed3c:	07da      	lsls	r2, r3, #31
 800ed3e:	4605      	mov	r5, r0
 800ed40:	d4e4      	bmi.n	800ed0c <_fflush_r+0xc>
 800ed42:	89a3      	ldrh	r3, [r4, #12]
 800ed44:	059b      	lsls	r3, r3, #22
 800ed46:	d4e1      	bmi.n	800ed0c <_fflush_r+0xc>
 800ed48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed4a:	f7fe fb53 	bl	800d3f4 <__retarget_lock_release_recursive>
 800ed4e:	e7dd      	b.n	800ed0c <_fflush_r+0xc>

0800ed50 <memmove>:
 800ed50:	4288      	cmp	r0, r1
 800ed52:	b510      	push	{r4, lr}
 800ed54:	eb01 0402 	add.w	r4, r1, r2
 800ed58:	d902      	bls.n	800ed60 <memmove+0x10>
 800ed5a:	4284      	cmp	r4, r0
 800ed5c:	4623      	mov	r3, r4
 800ed5e:	d807      	bhi.n	800ed70 <memmove+0x20>
 800ed60:	1e43      	subs	r3, r0, #1
 800ed62:	42a1      	cmp	r1, r4
 800ed64:	d008      	beq.n	800ed78 <memmove+0x28>
 800ed66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed6e:	e7f8      	b.n	800ed62 <memmove+0x12>
 800ed70:	4402      	add	r2, r0
 800ed72:	4601      	mov	r1, r0
 800ed74:	428a      	cmp	r2, r1
 800ed76:	d100      	bne.n	800ed7a <memmove+0x2a>
 800ed78:	bd10      	pop	{r4, pc}
 800ed7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed82:	e7f7      	b.n	800ed74 <memmove+0x24>

0800ed84 <_sbrk_r>:
 800ed84:	b538      	push	{r3, r4, r5, lr}
 800ed86:	4d06      	ldr	r5, [pc, #24]	@ (800eda0 <_sbrk_r+0x1c>)
 800ed88:	2300      	movs	r3, #0
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	4608      	mov	r0, r1
 800ed8e:	602b      	str	r3, [r5, #0]
 800ed90:	f7f4 fcc8 	bl	8003724 <_sbrk>
 800ed94:	1c43      	adds	r3, r0, #1
 800ed96:	d102      	bne.n	800ed9e <_sbrk_r+0x1a>
 800ed98:	682b      	ldr	r3, [r5, #0]
 800ed9a:	b103      	cbz	r3, 800ed9e <_sbrk_r+0x1a>
 800ed9c:	6023      	str	r3, [r4, #0]
 800ed9e:	bd38      	pop	{r3, r4, r5, pc}
 800eda0:	20000dc0 	.word	0x20000dc0

0800eda4 <__assert_func>:
 800eda4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eda6:	4614      	mov	r4, r2
 800eda8:	461a      	mov	r2, r3
 800edaa:	4b09      	ldr	r3, [pc, #36]	@ (800edd0 <__assert_func+0x2c>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4605      	mov	r5, r0
 800edb0:	68d8      	ldr	r0, [r3, #12]
 800edb2:	b954      	cbnz	r4, 800edca <__assert_func+0x26>
 800edb4:	4b07      	ldr	r3, [pc, #28]	@ (800edd4 <__assert_func+0x30>)
 800edb6:	461c      	mov	r4, r3
 800edb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800edbc:	9100      	str	r1, [sp, #0]
 800edbe:	462b      	mov	r3, r5
 800edc0:	4905      	ldr	r1, [pc, #20]	@ (800edd8 <__assert_func+0x34>)
 800edc2:	f000 f857 	bl	800ee74 <fiprintf>
 800edc6:	f000 f867 	bl	800ee98 <abort>
 800edca:	4b04      	ldr	r3, [pc, #16]	@ (800eddc <__assert_func+0x38>)
 800edcc:	e7f4      	b.n	800edb8 <__assert_func+0x14>
 800edce:	bf00      	nop
 800edd0:	200001bc 	.word	0x200001bc
 800edd4:	0800fc0f 	.word	0x0800fc0f
 800edd8:	0800fbe1 	.word	0x0800fbe1
 800eddc:	0800fbd4 	.word	0x0800fbd4

0800ede0 <_calloc_r>:
 800ede0:	b570      	push	{r4, r5, r6, lr}
 800ede2:	fba1 5402 	umull	r5, r4, r1, r2
 800ede6:	b93c      	cbnz	r4, 800edf8 <_calloc_r+0x18>
 800ede8:	4629      	mov	r1, r5
 800edea:	f7fe fec3 	bl	800db74 <_malloc_r>
 800edee:	4606      	mov	r6, r0
 800edf0:	b928      	cbnz	r0, 800edfe <_calloc_r+0x1e>
 800edf2:	2600      	movs	r6, #0
 800edf4:	4630      	mov	r0, r6
 800edf6:	bd70      	pop	{r4, r5, r6, pc}
 800edf8:	220c      	movs	r2, #12
 800edfa:	6002      	str	r2, [r0, #0]
 800edfc:	e7f9      	b.n	800edf2 <_calloc_r+0x12>
 800edfe:	462a      	mov	r2, r5
 800ee00:	4621      	mov	r1, r4
 800ee02:	f7fe fa6a 	bl	800d2da <memset>
 800ee06:	e7f5      	b.n	800edf4 <_calloc_r+0x14>

0800ee08 <malloc>:
 800ee08:	4b02      	ldr	r3, [pc, #8]	@ (800ee14 <malloc+0xc>)
 800ee0a:	4601      	mov	r1, r0
 800ee0c:	6818      	ldr	r0, [r3, #0]
 800ee0e:	f7fe beb1 	b.w	800db74 <_malloc_r>
 800ee12:	bf00      	nop
 800ee14:	200001bc 	.word	0x200001bc

0800ee18 <_realloc_r>:
 800ee18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee1c:	4680      	mov	r8, r0
 800ee1e:	4615      	mov	r5, r2
 800ee20:	460c      	mov	r4, r1
 800ee22:	b921      	cbnz	r1, 800ee2e <_realloc_r+0x16>
 800ee24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee28:	4611      	mov	r1, r2
 800ee2a:	f7fe bea3 	b.w	800db74 <_malloc_r>
 800ee2e:	b92a      	cbnz	r2, 800ee3c <_realloc_r+0x24>
 800ee30:	f7fe fafa 	bl	800d428 <_free_r>
 800ee34:	2400      	movs	r4, #0
 800ee36:	4620      	mov	r0, r4
 800ee38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee3c:	f000 f833 	bl	800eea6 <_malloc_usable_size_r>
 800ee40:	4285      	cmp	r5, r0
 800ee42:	4606      	mov	r6, r0
 800ee44:	d802      	bhi.n	800ee4c <_realloc_r+0x34>
 800ee46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ee4a:	d8f4      	bhi.n	800ee36 <_realloc_r+0x1e>
 800ee4c:	4629      	mov	r1, r5
 800ee4e:	4640      	mov	r0, r8
 800ee50:	f7fe fe90 	bl	800db74 <_malloc_r>
 800ee54:	4607      	mov	r7, r0
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d0ec      	beq.n	800ee34 <_realloc_r+0x1c>
 800ee5a:	42b5      	cmp	r5, r6
 800ee5c:	462a      	mov	r2, r5
 800ee5e:	4621      	mov	r1, r4
 800ee60:	bf28      	it	cs
 800ee62:	4632      	movcs	r2, r6
 800ee64:	f7fe fac7 	bl	800d3f6 <memcpy>
 800ee68:	4621      	mov	r1, r4
 800ee6a:	4640      	mov	r0, r8
 800ee6c:	f7fe fadc 	bl	800d428 <_free_r>
 800ee70:	463c      	mov	r4, r7
 800ee72:	e7e0      	b.n	800ee36 <_realloc_r+0x1e>

0800ee74 <fiprintf>:
 800ee74:	b40e      	push	{r1, r2, r3}
 800ee76:	b503      	push	{r0, r1, lr}
 800ee78:	4601      	mov	r1, r0
 800ee7a:	ab03      	add	r3, sp, #12
 800ee7c:	4805      	ldr	r0, [pc, #20]	@ (800ee94 <fiprintf+0x20>)
 800ee7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee82:	6800      	ldr	r0, [r0, #0]
 800ee84:	9301      	str	r3, [sp, #4]
 800ee86:	f000 f83f 	bl	800ef08 <_vfiprintf_r>
 800ee8a:	b002      	add	sp, #8
 800ee8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee90:	b003      	add	sp, #12
 800ee92:	4770      	bx	lr
 800ee94:	200001bc 	.word	0x200001bc

0800ee98 <abort>:
 800ee98:	b508      	push	{r3, lr}
 800ee9a:	2006      	movs	r0, #6
 800ee9c:	f000 fa08 	bl	800f2b0 <raise>
 800eea0:	2001      	movs	r0, #1
 800eea2:	f7f4 fbc7 	bl	8003634 <_exit>

0800eea6 <_malloc_usable_size_r>:
 800eea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeaa:	1f18      	subs	r0, r3, #4
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	bfbc      	itt	lt
 800eeb0:	580b      	ldrlt	r3, [r1, r0]
 800eeb2:	18c0      	addlt	r0, r0, r3
 800eeb4:	4770      	bx	lr

0800eeb6 <__sfputc_r>:
 800eeb6:	6893      	ldr	r3, [r2, #8]
 800eeb8:	3b01      	subs	r3, #1
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	b410      	push	{r4}
 800eebe:	6093      	str	r3, [r2, #8]
 800eec0:	da08      	bge.n	800eed4 <__sfputc_r+0x1e>
 800eec2:	6994      	ldr	r4, [r2, #24]
 800eec4:	42a3      	cmp	r3, r4
 800eec6:	db01      	blt.n	800eecc <__sfputc_r+0x16>
 800eec8:	290a      	cmp	r1, #10
 800eeca:	d103      	bne.n	800eed4 <__sfputc_r+0x1e>
 800eecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eed0:	f000 b932 	b.w	800f138 <__swbuf_r>
 800eed4:	6813      	ldr	r3, [r2, #0]
 800eed6:	1c58      	adds	r0, r3, #1
 800eed8:	6010      	str	r0, [r2, #0]
 800eeda:	7019      	strb	r1, [r3, #0]
 800eedc:	4608      	mov	r0, r1
 800eede:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <__sfputs_r>:
 800eee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eee6:	4606      	mov	r6, r0
 800eee8:	460f      	mov	r7, r1
 800eeea:	4614      	mov	r4, r2
 800eeec:	18d5      	adds	r5, r2, r3
 800eeee:	42ac      	cmp	r4, r5
 800eef0:	d101      	bne.n	800eef6 <__sfputs_r+0x12>
 800eef2:	2000      	movs	r0, #0
 800eef4:	e007      	b.n	800ef06 <__sfputs_r+0x22>
 800eef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eefa:	463a      	mov	r2, r7
 800eefc:	4630      	mov	r0, r6
 800eefe:	f7ff ffda 	bl	800eeb6 <__sfputc_r>
 800ef02:	1c43      	adds	r3, r0, #1
 800ef04:	d1f3      	bne.n	800eeee <__sfputs_r+0xa>
 800ef06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ef08 <_vfiprintf_r>:
 800ef08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef0c:	460d      	mov	r5, r1
 800ef0e:	b09d      	sub	sp, #116	@ 0x74
 800ef10:	4614      	mov	r4, r2
 800ef12:	4698      	mov	r8, r3
 800ef14:	4606      	mov	r6, r0
 800ef16:	b118      	cbz	r0, 800ef20 <_vfiprintf_r+0x18>
 800ef18:	6a03      	ldr	r3, [r0, #32]
 800ef1a:	b90b      	cbnz	r3, 800ef20 <_vfiprintf_r+0x18>
 800ef1c:	f7fe f944 	bl	800d1a8 <__sinit>
 800ef20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef22:	07d9      	lsls	r1, r3, #31
 800ef24:	d405      	bmi.n	800ef32 <_vfiprintf_r+0x2a>
 800ef26:	89ab      	ldrh	r3, [r5, #12]
 800ef28:	059a      	lsls	r2, r3, #22
 800ef2a:	d402      	bmi.n	800ef32 <_vfiprintf_r+0x2a>
 800ef2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef2e:	f7fe fa60 	bl	800d3f2 <__retarget_lock_acquire_recursive>
 800ef32:	89ab      	ldrh	r3, [r5, #12]
 800ef34:	071b      	lsls	r3, r3, #28
 800ef36:	d501      	bpl.n	800ef3c <_vfiprintf_r+0x34>
 800ef38:	692b      	ldr	r3, [r5, #16]
 800ef3a:	b99b      	cbnz	r3, 800ef64 <_vfiprintf_r+0x5c>
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	4630      	mov	r0, r6
 800ef40:	f000 f938 	bl	800f1b4 <__swsetup_r>
 800ef44:	b170      	cbz	r0, 800ef64 <_vfiprintf_r+0x5c>
 800ef46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef48:	07dc      	lsls	r4, r3, #31
 800ef4a:	d504      	bpl.n	800ef56 <_vfiprintf_r+0x4e>
 800ef4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef50:	b01d      	add	sp, #116	@ 0x74
 800ef52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef56:	89ab      	ldrh	r3, [r5, #12]
 800ef58:	0598      	lsls	r0, r3, #22
 800ef5a:	d4f7      	bmi.n	800ef4c <_vfiprintf_r+0x44>
 800ef5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef5e:	f7fe fa49 	bl	800d3f4 <__retarget_lock_release_recursive>
 800ef62:	e7f3      	b.n	800ef4c <_vfiprintf_r+0x44>
 800ef64:	2300      	movs	r3, #0
 800ef66:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef68:	2320      	movs	r3, #32
 800ef6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef72:	2330      	movs	r3, #48	@ 0x30
 800ef74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f124 <_vfiprintf_r+0x21c>
 800ef78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef7c:	f04f 0901 	mov.w	r9, #1
 800ef80:	4623      	mov	r3, r4
 800ef82:	469a      	mov	sl, r3
 800ef84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef88:	b10a      	cbz	r2, 800ef8e <_vfiprintf_r+0x86>
 800ef8a:	2a25      	cmp	r2, #37	@ 0x25
 800ef8c:	d1f9      	bne.n	800ef82 <_vfiprintf_r+0x7a>
 800ef8e:	ebba 0b04 	subs.w	fp, sl, r4
 800ef92:	d00b      	beq.n	800efac <_vfiprintf_r+0xa4>
 800ef94:	465b      	mov	r3, fp
 800ef96:	4622      	mov	r2, r4
 800ef98:	4629      	mov	r1, r5
 800ef9a:	4630      	mov	r0, r6
 800ef9c:	f7ff ffa2 	bl	800eee4 <__sfputs_r>
 800efa0:	3001      	adds	r0, #1
 800efa2:	f000 80a7 	beq.w	800f0f4 <_vfiprintf_r+0x1ec>
 800efa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efa8:	445a      	add	r2, fp
 800efaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800efac:	f89a 3000 	ldrb.w	r3, [sl]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	f000 809f 	beq.w	800f0f4 <_vfiprintf_r+0x1ec>
 800efb6:	2300      	movs	r3, #0
 800efb8:	f04f 32ff 	mov.w	r2, #4294967295
 800efbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efc0:	f10a 0a01 	add.w	sl, sl, #1
 800efc4:	9304      	str	r3, [sp, #16]
 800efc6:	9307      	str	r3, [sp, #28]
 800efc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800efcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800efce:	4654      	mov	r4, sl
 800efd0:	2205      	movs	r2, #5
 800efd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efd6:	4853      	ldr	r0, [pc, #332]	@ (800f124 <_vfiprintf_r+0x21c>)
 800efd8:	f7f1 f92a 	bl	8000230 <memchr>
 800efdc:	9a04      	ldr	r2, [sp, #16]
 800efde:	b9d8      	cbnz	r0, 800f018 <_vfiprintf_r+0x110>
 800efe0:	06d1      	lsls	r1, r2, #27
 800efe2:	bf44      	itt	mi
 800efe4:	2320      	movmi	r3, #32
 800efe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efea:	0713      	lsls	r3, r2, #28
 800efec:	bf44      	itt	mi
 800efee:	232b      	movmi	r3, #43	@ 0x2b
 800eff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eff4:	f89a 3000 	ldrb.w	r3, [sl]
 800eff8:	2b2a      	cmp	r3, #42	@ 0x2a
 800effa:	d015      	beq.n	800f028 <_vfiprintf_r+0x120>
 800effc:	9a07      	ldr	r2, [sp, #28]
 800effe:	4654      	mov	r4, sl
 800f000:	2000      	movs	r0, #0
 800f002:	f04f 0c0a 	mov.w	ip, #10
 800f006:	4621      	mov	r1, r4
 800f008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f00c:	3b30      	subs	r3, #48	@ 0x30
 800f00e:	2b09      	cmp	r3, #9
 800f010:	d94b      	bls.n	800f0aa <_vfiprintf_r+0x1a2>
 800f012:	b1b0      	cbz	r0, 800f042 <_vfiprintf_r+0x13a>
 800f014:	9207      	str	r2, [sp, #28]
 800f016:	e014      	b.n	800f042 <_vfiprintf_r+0x13a>
 800f018:	eba0 0308 	sub.w	r3, r0, r8
 800f01c:	fa09 f303 	lsl.w	r3, r9, r3
 800f020:	4313      	orrs	r3, r2
 800f022:	9304      	str	r3, [sp, #16]
 800f024:	46a2      	mov	sl, r4
 800f026:	e7d2      	b.n	800efce <_vfiprintf_r+0xc6>
 800f028:	9b03      	ldr	r3, [sp, #12]
 800f02a:	1d19      	adds	r1, r3, #4
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	9103      	str	r1, [sp, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	bfbb      	ittet	lt
 800f034:	425b      	neglt	r3, r3
 800f036:	f042 0202 	orrlt.w	r2, r2, #2
 800f03a:	9307      	strge	r3, [sp, #28]
 800f03c:	9307      	strlt	r3, [sp, #28]
 800f03e:	bfb8      	it	lt
 800f040:	9204      	strlt	r2, [sp, #16]
 800f042:	7823      	ldrb	r3, [r4, #0]
 800f044:	2b2e      	cmp	r3, #46	@ 0x2e
 800f046:	d10a      	bne.n	800f05e <_vfiprintf_r+0x156>
 800f048:	7863      	ldrb	r3, [r4, #1]
 800f04a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f04c:	d132      	bne.n	800f0b4 <_vfiprintf_r+0x1ac>
 800f04e:	9b03      	ldr	r3, [sp, #12]
 800f050:	1d1a      	adds	r2, r3, #4
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	9203      	str	r2, [sp, #12]
 800f056:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f05a:	3402      	adds	r4, #2
 800f05c:	9305      	str	r3, [sp, #20]
 800f05e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f134 <_vfiprintf_r+0x22c>
 800f062:	7821      	ldrb	r1, [r4, #0]
 800f064:	2203      	movs	r2, #3
 800f066:	4650      	mov	r0, sl
 800f068:	f7f1 f8e2 	bl	8000230 <memchr>
 800f06c:	b138      	cbz	r0, 800f07e <_vfiprintf_r+0x176>
 800f06e:	9b04      	ldr	r3, [sp, #16]
 800f070:	eba0 000a 	sub.w	r0, r0, sl
 800f074:	2240      	movs	r2, #64	@ 0x40
 800f076:	4082      	lsls	r2, r0
 800f078:	4313      	orrs	r3, r2
 800f07a:	3401      	adds	r4, #1
 800f07c:	9304      	str	r3, [sp, #16]
 800f07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f082:	4829      	ldr	r0, [pc, #164]	@ (800f128 <_vfiprintf_r+0x220>)
 800f084:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f088:	2206      	movs	r2, #6
 800f08a:	f7f1 f8d1 	bl	8000230 <memchr>
 800f08e:	2800      	cmp	r0, #0
 800f090:	d03f      	beq.n	800f112 <_vfiprintf_r+0x20a>
 800f092:	4b26      	ldr	r3, [pc, #152]	@ (800f12c <_vfiprintf_r+0x224>)
 800f094:	bb1b      	cbnz	r3, 800f0de <_vfiprintf_r+0x1d6>
 800f096:	9b03      	ldr	r3, [sp, #12]
 800f098:	3307      	adds	r3, #7
 800f09a:	f023 0307 	bic.w	r3, r3, #7
 800f09e:	3308      	adds	r3, #8
 800f0a0:	9303      	str	r3, [sp, #12]
 800f0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0a4:	443b      	add	r3, r7
 800f0a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0a8:	e76a      	b.n	800ef80 <_vfiprintf_r+0x78>
 800f0aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0ae:	460c      	mov	r4, r1
 800f0b0:	2001      	movs	r0, #1
 800f0b2:	e7a8      	b.n	800f006 <_vfiprintf_r+0xfe>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	3401      	adds	r4, #1
 800f0b8:	9305      	str	r3, [sp, #20]
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	f04f 0c0a 	mov.w	ip, #10
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0c6:	3a30      	subs	r2, #48	@ 0x30
 800f0c8:	2a09      	cmp	r2, #9
 800f0ca:	d903      	bls.n	800f0d4 <_vfiprintf_r+0x1cc>
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d0c6      	beq.n	800f05e <_vfiprintf_r+0x156>
 800f0d0:	9105      	str	r1, [sp, #20]
 800f0d2:	e7c4      	b.n	800f05e <_vfiprintf_r+0x156>
 800f0d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0d8:	4604      	mov	r4, r0
 800f0da:	2301      	movs	r3, #1
 800f0dc:	e7f0      	b.n	800f0c0 <_vfiprintf_r+0x1b8>
 800f0de:	ab03      	add	r3, sp, #12
 800f0e0:	9300      	str	r3, [sp, #0]
 800f0e2:	462a      	mov	r2, r5
 800f0e4:	4b12      	ldr	r3, [pc, #72]	@ (800f130 <_vfiprintf_r+0x228>)
 800f0e6:	a904      	add	r1, sp, #16
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	f3af 8000 	nop.w
 800f0ee:	4607      	mov	r7, r0
 800f0f0:	1c78      	adds	r0, r7, #1
 800f0f2:	d1d6      	bne.n	800f0a2 <_vfiprintf_r+0x19a>
 800f0f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0f6:	07d9      	lsls	r1, r3, #31
 800f0f8:	d405      	bmi.n	800f106 <_vfiprintf_r+0x1fe>
 800f0fa:	89ab      	ldrh	r3, [r5, #12]
 800f0fc:	059a      	lsls	r2, r3, #22
 800f0fe:	d402      	bmi.n	800f106 <_vfiprintf_r+0x1fe>
 800f100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f102:	f7fe f977 	bl	800d3f4 <__retarget_lock_release_recursive>
 800f106:	89ab      	ldrh	r3, [r5, #12]
 800f108:	065b      	lsls	r3, r3, #25
 800f10a:	f53f af1f 	bmi.w	800ef4c <_vfiprintf_r+0x44>
 800f10e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f110:	e71e      	b.n	800ef50 <_vfiprintf_r+0x48>
 800f112:	ab03      	add	r3, sp, #12
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	462a      	mov	r2, r5
 800f118:	4b05      	ldr	r3, [pc, #20]	@ (800f130 <_vfiprintf_r+0x228>)
 800f11a:	a904      	add	r1, sp, #16
 800f11c:	4630      	mov	r0, r6
 800f11e:	f7ff fc4b 	bl	800e9b8 <_printf_i>
 800f122:	e7e4      	b.n	800f0ee <_vfiprintf_r+0x1e6>
 800f124:	0800fba1 	.word	0x0800fba1
 800f128:	0800fbab 	.word	0x0800fbab
 800f12c:	00000000 	.word	0x00000000
 800f130:	0800eee5 	.word	0x0800eee5
 800f134:	0800fba7 	.word	0x0800fba7

0800f138 <__swbuf_r>:
 800f138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13a:	460e      	mov	r6, r1
 800f13c:	4614      	mov	r4, r2
 800f13e:	4605      	mov	r5, r0
 800f140:	b118      	cbz	r0, 800f14a <__swbuf_r+0x12>
 800f142:	6a03      	ldr	r3, [r0, #32]
 800f144:	b90b      	cbnz	r3, 800f14a <__swbuf_r+0x12>
 800f146:	f7fe f82f 	bl	800d1a8 <__sinit>
 800f14a:	69a3      	ldr	r3, [r4, #24]
 800f14c:	60a3      	str	r3, [r4, #8]
 800f14e:	89a3      	ldrh	r3, [r4, #12]
 800f150:	071a      	lsls	r2, r3, #28
 800f152:	d501      	bpl.n	800f158 <__swbuf_r+0x20>
 800f154:	6923      	ldr	r3, [r4, #16]
 800f156:	b943      	cbnz	r3, 800f16a <__swbuf_r+0x32>
 800f158:	4621      	mov	r1, r4
 800f15a:	4628      	mov	r0, r5
 800f15c:	f000 f82a 	bl	800f1b4 <__swsetup_r>
 800f160:	b118      	cbz	r0, 800f16a <__swbuf_r+0x32>
 800f162:	f04f 37ff 	mov.w	r7, #4294967295
 800f166:	4638      	mov	r0, r7
 800f168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	6922      	ldr	r2, [r4, #16]
 800f16e:	1a98      	subs	r0, r3, r2
 800f170:	6963      	ldr	r3, [r4, #20]
 800f172:	b2f6      	uxtb	r6, r6
 800f174:	4283      	cmp	r3, r0
 800f176:	4637      	mov	r7, r6
 800f178:	dc05      	bgt.n	800f186 <__swbuf_r+0x4e>
 800f17a:	4621      	mov	r1, r4
 800f17c:	4628      	mov	r0, r5
 800f17e:	f7ff fdbf 	bl	800ed00 <_fflush_r>
 800f182:	2800      	cmp	r0, #0
 800f184:	d1ed      	bne.n	800f162 <__swbuf_r+0x2a>
 800f186:	68a3      	ldr	r3, [r4, #8]
 800f188:	3b01      	subs	r3, #1
 800f18a:	60a3      	str	r3, [r4, #8]
 800f18c:	6823      	ldr	r3, [r4, #0]
 800f18e:	1c5a      	adds	r2, r3, #1
 800f190:	6022      	str	r2, [r4, #0]
 800f192:	701e      	strb	r6, [r3, #0]
 800f194:	6962      	ldr	r2, [r4, #20]
 800f196:	1c43      	adds	r3, r0, #1
 800f198:	429a      	cmp	r2, r3
 800f19a:	d004      	beq.n	800f1a6 <__swbuf_r+0x6e>
 800f19c:	89a3      	ldrh	r3, [r4, #12]
 800f19e:	07db      	lsls	r3, r3, #31
 800f1a0:	d5e1      	bpl.n	800f166 <__swbuf_r+0x2e>
 800f1a2:	2e0a      	cmp	r6, #10
 800f1a4:	d1df      	bne.n	800f166 <__swbuf_r+0x2e>
 800f1a6:	4621      	mov	r1, r4
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	f7ff fda9 	bl	800ed00 <_fflush_r>
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	d0d9      	beq.n	800f166 <__swbuf_r+0x2e>
 800f1b2:	e7d6      	b.n	800f162 <__swbuf_r+0x2a>

0800f1b4 <__swsetup_r>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	4b29      	ldr	r3, [pc, #164]	@ (800f25c <__swsetup_r+0xa8>)
 800f1b8:	4605      	mov	r5, r0
 800f1ba:	6818      	ldr	r0, [r3, #0]
 800f1bc:	460c      	mov	r4, r1
 800f1be:	b118      	cbz	r0, 800f1c8 <__swsetup_r+0x14>
 800f1c0:	6a03      	ldr	r3, [r0, #32]
 800f1c2:	b90b      	cbnz	r3, 800f1c8 <__swsetup_r+0x14>
 800f1c4:	f7fd fff0 	bl	800d1a8 <__sinit>
 800f1c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1cc:	0719      	lsls	r1, r3, #28
 800f1ce:	d422      	bmi.n	800f216 <__swsetup_r+0x62>
 800f1d0:	06da      	lsls	r2, r3, #27
 800f1d2:	d407      	bmi.n	800f1e4 <__swsetup_r+0x30>
 800f1d4:	2209      	movs	r2, #9
 800f1d6:	602a      	str	r2, [r5, #0]
 800f1d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1dc:	81a3      	strh	r3, [r4, #12]
 800f1de:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e2:	e033      	b.n	800f24c <__swsetup_r+0x98>
 800f1e4:	0758      	lsls	r0, r3, #29
 800f1e6:	d512      	bpl.n	800f20e <__swsetup_r+0x5a>
 800f1e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1ea:	b141      	cbz	r1, 800f1fe <__swsetup_r+0x4a>
 800f1ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1f0:	4299      	cmp	r1, r3
 800f1f2:	d002      	beq.n	800f1fa <__swsetup_r+0x46>
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	f7fe f917 	bl	800d428 <_free_r>
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1fe:	89a3      	ldrh	r3, [r4, #12]
 800f200:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f204:	81a3      	strh	r3, [r4, #12]
 800f206:	2300      	movs	r3, #0
 800f208:	6063      	str	r3, [r4, #4]
 800f20a:	6923      	ldr	r3, [r4, #16]
 800f20c:	6023      	str	r3, [r4, #0]
 800f20e:	89a3      	ldrh	r3, [r4, #12]
 800f210:	f043 0308 	orr.w	r3, r3, #8
 800f214:	81a3      	strh	r3, [r4, #12]
 800f216:	6923      	ldr	r3, [r4, #16]
 800f218:	b94b      	cbnz	r3, 800f22e <__swsetup_r+0x7a>
 800f21a:	89a3      	ldrh	r3, [r4, #12]
 800f21c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f224:	d003      	beq.n	800f22e <__swsetup_r+0x7a>
 800f226:	4621      	mov	r1, r4
 800f228:	4628      	mov	r0, r5
 800f22a:	f000 f883 	bl	800f334 <__smakebuf_r>
 800f22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f232:	f013 0201 	ands.w	r2, r3, #1
 800f236:	d00a      	beq.n	800f24e <__swsetup_r+0x9a>
 800f238:	2200      	movs	r2, #0
 800f23a:	60a2      	str	r2, [r4, #8]
 800f23c:	6962      	ldr	r2, [r4, #20]
 800f23e:	4252      	negs	r2, r2
 800f240:	61a2      	str	r2, [r4, #24]
 800f242:	6922      	ldr	r2, [r4, #16]
 800f244:	b942      	cbnz	r2, 800f258 <__swsetup_r+0xa4>
 800f246:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f24a:	d1c5      	bne.n	800f1d8 <__swsetup_r+0x24>
 800f24c:	bd38      	pop	{r3, r4, r5, pc}
 800f24e:	0799      	lsls	r1, r3, #30
 800f250:	bf58      	it	pl
 800f252:	6962      	ldrpl	r2, [r4, #20]
 800f254:	60a2      	str	r2, [r4, #8]
 800f256:	e7f4      	b.n	800f242 <__swsetup_r+0x8e>
 800f258:	2000      	movs	r0, #0
 800f25a:	e7f7      	b.n	800f24c <__swsetup_r+0x98>
 800f25c:	200001bc 	.word	0x200001bc

0800f260 <_raise_r>:
 800f260:	291f      	cmp	r1, #31
 800f262:	b538      	push	{r3, r4, r5, lr}
 800f264:	4605      	mov	r5, r0
 800f266:	460c      	mov	r4, r1
 800f268:	d904      	bls.n	800f274 <_raise_r+0x14>
 800f26a:	2316      	movs	r3, #22
 800f26c:	6003      	str	r3, [r0, #0]
 800f26e:	f04f 30ff 	mov.w	r0, #4294967295
 800f272:	bd38      	pop	{r3, r4, r5, pc}
 800f274:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f276:	b112      	cbz	r2, 800f27e <_raise_r+0x1e>
 800f278:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f27c:	b94b      	cbnz	r3, 800f292 <_raise_r+0x32>
 800f27e:	4628      	mov	r0, r5
 800f280:	f000 f830 	bl	800f2e4 <_getpid_r>
 800f284:	4622      	mov	r2, r4
 800f286:	4601      	mov	r1, r0
 800f288:	4628      	mov	r0, r5
 800f28a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f28e:	f000 b817 	b.w	800f2c0 <_kill_r>
 800f292:	2b01      	cmp	r3, #1
 800f294:	d00a      	beq.n	800f2ac <_raise_r+0x4c>
 800f296:	1c59      	adds	r1, r3, #1
 800f298:	d103      	bne.n	800f2a2 <_raise_r+0x42>
 800f29a:	2316      	movs	r3, #22
 800f29c:	6003      	str	r3, [r0, #0]
 800f29e:	2001      	movs	r0, #1
 800f2a0:	e7e7      	b.n	800f272 <_raise_r+0x12>
 800f2a2:	2100      	movs	r1, #0
 800f2a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	4798      	blx	r3
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	e7e0      	b.n	800f272 <_raise_r+0x12>

0800f2b0 <raise>:
 800f2b0:	4b02      	ldr	r3, [pc, #8]	@ (800f2bc <raise+0xc>)
 800f2b2:	4601      	mov	r1, r0
 800f2b4:	6818      	ldr	r0, [r3, #0]
 800f2b6:	f7ff bfd3 	b.w	800f260 <_raise_r>
 800f2ba:	bf00      	nop
 800f2bc:	200001bc 	.word	0x200001bc

0800f2c0 <_kill_r>:
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	4d07      	ldr	r5, [pc, #28]	@ (800f2e0 <_kill_r+0x20>)
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	4608      	mov	r0, r1
 800f2ca:	4611      	mov	r1, r2
 800f2cc:	602b      	str	r3, [r5, #0]
 800f2ce:	f7f4 f9a1 	bl	8003614 <_kill>
 800f2d2:	1c43      	adds	r3, r0, #1
 800f2d4:	d102      	bne.n	800f2dc <_kill_r+0x1c>
 800f2d6:	682b      	ldr	r3, [r5, #0]
 800f2d8:	b103      	cbz	r3, 800f2dc <_kill_r+0x1c>
 800f2da:	6023      	str	r3, [r4, #0]
 800f2dc:	bd38      	pop	{r3, r4, r5, pc}
 800f2de:	bf00      	nop
 800f2e0:	20000dc0 	.word	0x20000dc0

0800f2e4 <_getpid_r>:
 800f2e4:	f7f4 b98e 	b.w	8003604 <_getpid>

0800f2e8 <__swhatbuf_r>:
 800f2e8:	b570      	push	{r4, r5, r6, lr}
 800f2ea:	460c      	mov	r4, r1
 800f2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2f0:	2900      	cmp	r1, #0
 800f2f2:	b096      	sub	sp, #88	@ 0x58
 800f2f4:	4615      	mov	r5, r2
 800f2f6:	461e      	mov	r6, r3
 800f2f8:	da0d      	bge.n	800f316 <__swhatbuf_r+0x2e>
 800f2fa:	89a3      	ldrh	r3, [r4, #12]
 800f2fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f300:	f04f 0100 	mov.w	r1, #0
 800f304:	bf14      	ite	ne
 800f306:	2340      	movne	r3, #64	@ 0x40
 800f308:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f30c:	2000      	movs	r0, #0
 800f30e:	6031      	str	r1, [r6, #0]
 800f310:	602b      	str	r3, [r5, #0]
 800f312:	b016      	add	sp, #88	@ 0x58
 800f314:	bd70      	pop	{r4, r5, r6, pc}
 800f316:	466a      	mov	r2, sp
 800f318:	f000 f848 	bl	800f3ac <_fstat_r>
 800f31c:	2800      	cmp	r0, #0
 800f31e:	dbec      	blt.n	800f2fa <__swhatbuf_r+0x12>
 800f320:	9901      	ldr	r1, [sp, #4]
 800f322:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f326:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f32a:	4259      	negs	r1, r3
 800f32c:	4159      	adcs	r1, r3
 800f32e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f332:	e7eb      	b.n	800f30c <__swhatbuf_r+0x24>

0800f334 <__smakebuf_r>:
 800f334:	898b      	ldrh	r3, [r1, #12]
 800f336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f338:	079d      	lsls	r5, r3, #30
 800f33a:	4606      	mov	r6, r0
 800f33c:	460c      	mov	r4, r1
 800f33e:	d507      	bpl.n	800f350 <__smakebuf_r+0x1c>
 800f340:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f344:	6023      	str	r3, [r4, #0]
 800f346:	6123      	str	r3, [r4, #16]
 800f348:	2301      	movs	r3, #1
 800f34a:	6163      	str	r3, [r4, #20]
 800f34c:	b003      	add	sp, #12
 800f34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f350:	ab01      	add	r3, sp, #4
 800f352:	466a      	mov	r2, sp
 800f354:	f7ff ffc8 	bl	800f2e8 <__swhatbuf_r>
 800f358:	9f00      	ldr	r7, [sp, #0]
 800f35a:	4605      	mov	r5, r0
 800f35c:	4639      	mov	r1, r7
 800f35e:	4630      	mov	r0, r6
 800f360:	f7fe fc08 	bl	800db74 <_malloc_r>
 800f364:	b948      	cbnz	r0, 800f37a <__smakebuf_r+0x46>
 800f366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f36a:	059a      	lsls	r2, r3, #22
 800f36c:	d4ee      	bmi.n	800f34c <__smakebuf_r+0x18>
 800f36e:	f023 0303 	bic.w	r3, r3, #3
 800f372:	f043 0302 	orr.w	r3, r3, #2
 800f376:	81a3      	strh	r3, [r4, #12]
 800f378:	e7e2      	b.n	800f340 <__smakebuf_r+0xc>
 800f37a:	89a3      	ldrh	r3, [r4, #12]
 800f37c:	6020      	str	r0, [r4, #0]
 800f37e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f382:	81a3      	strh	r3, [r4, #12]
 800f384:	9b01      	ldr	r3, [sp, #4]
 800f386:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f38a:	b15b      	cbz	r3, 800f3a4 <__smakebuf_r+0x70>
 800f38c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f390:	4630      	mov	r0, r6
 800f392:	f000 f81d 	bl	800f3d0 <_isatty_r>
 800f396:	b128      	cbz	r0, 800f3a4 <__smakebuf_r+0x70>
 800f398:	89a3      	ldrh	r3, [r4, #12]
 800f39a:	f023 0303 	bic.w	r3, r3, #3
 800f39e:	f043 0301 	orr.w	r3, r3, #1
 800f3a2:	81a3      	strh	r3, [r4, #12]
 800f3a4:	89a3      	ldrh	r3, [r4, #12]
 800f3a6:	431d      	orrs	r5, r3
 800f3a8:	81a5      	strh	r5, [r4, #12]
 800f3aa:	e7cf      	b.n	800f34c <__smakebuf_r+0x18>

0800f3ac <_fstat_r>:
 800f3ac:	b538      	push	{r3, r4, r5, lr}
 800f3ae:	4d07      	ldr	r5, [pc, #28]	@ (800f3cc <_fstat_r+0x20>)
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	4608      	mov	r0, r1
 800f3b6:	4611      	mov	r1, r2
 800f3b8:	602b      	str	r3, [r5, #0]
 800f3ba:	f7f4 f98b 	bl	80036d4 <_fstat>
 800f3be:	1c43      	adds	r3, r0, #1
 800f3c0:	d102      	bne.n	800f3c8 <_fstat_r+0x1c>
 800f3c2:	682b      	ldr	r3, [r5, #0]
 800f3c4:	b103      	cbz	r3, 800f3c8 <_fstat_r+0x1c>
 800f3c6:	6023      	str	r3, [r4, #0]
 800f3c8:	bd38      	pop	{r3, r4, r5, pc}
 800f3ca:	bf00      	nop
 800f3cc:	20000dc0 	.word	0x20000dc0

0800f3d0 <_isatty_r>:
 800f3d0:	b538      	push	{r3, r4, r5, lr}
 800f3d2:	4d06      	ldr	r5, [pc, #24]	@ (800f3ec <_isatty_r+0x1c>)
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	4608      	mov	r0, r1
 800f3da:	602b      	str	r3, [r5, #0]
 800f3dc:	f7f4 f98a 	bl	80036f4 <_isatty>
 800f3e0:	1c43      	adds	r3, r0, #1
 800f3e2:	d102      	bne.n	800f3ea <_isatty_r+0x1a>
 800f3e4:	682b      	ldr	r3, [r5, #0]
 800f3e6:	b103      	cbz	r3, 800f3ea <_isatty_r+0x1a>
 800f3e8:	6023      	str	r3, [r4, #0]
 800f3ea:	bd38      	pop	{r3, r4, r5, pc}
 800f3ec:	20000dc0 	.word	0x20000dc0

0800f3f0 <fmod>:
 800f3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3f2:	ed2d 8b02 	vpush	{d8}
 800f3f6:	ec57 6b10 	vmov	r6, r7, d0
 800f3fa:	ec55 4b11 	vmov	r4, r5, d1
 800f3fe:	f000 f8a3 	bl	800f548 <__ieee754_fmod>
 800f402:	4622      	mov	r2, r4
 800f404:	462b      	mov	r3, r5
 800f406:	4630      	mov	r0, r6
 800f408:	4639      	mov	r1, r7
 800f40a:	eeb0 8a40 	vmov.f32	s16, s0
 800f40e:	eef0 8a60 	vmov.f32	s17, s1
 800f412:	f7f1 fbb3 	bl	8000b7c <__aeabi_dcmpun>
 800f416:	b990      	cbnz	r0, 800f43e <fmod+0x4e>
 800f418:	2200      	movs	r2, #0
 800f41a:	2300      	movs	r3, #0
 800f41c:	4620      	mov	r0, r4
 800f41e:	4629      	mov	r1, r5
 800f420:	f7f1 fb7a 	bl	8000b18 <__aeabi_dcmpeq>
 800f424:	b158      	cbz	r0, 800f43e <fmod+0x4e>
 800f426:	f7fd ffb9 	bl	800d39c <__errno>
 800f42a:	2321      	movs	r3, #33	@ 0x21
 800f42c:	6003      	str	r3, [r0, #0]
 800f42e:	2200      	movs	r2, #0
 800f430:	2300      	movs	r3, #0
 800f432:	4610      	mov	r0, r2
 800f434:	4619      	mov	r1, r3
 800f436:	f7f1 fa31 	bl	800089c <__aeabi_ddiv>
 800f43a:	ec41 0b18 	vmov	d8, r0, r1
 800f43e:	eeb0 0a48 	vmov.f32	s0, s16
 800f442:	eef0 0a68 	vmov.f32	s1, s17
 800f446:	ecbd 8b02 	vpop	{d8}
 800f44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f44c:	0000      	movs	r0, r0
	...

0800f450 <floor>:
 800f450:	ec51 0b10 	vmov	r0, r1, d0
 800f454:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f45c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f460:	2e13      	cmp	r6, #19
 800f462:	460c      	mov	r4, r1
 800f464:	4605      	mov	r5, r0
 800f466:	4680      	mov	r8, r0
 800f468:	dc34      	bgt.n	800f4d4 <floor+0x84>
 800f46a:	2e00      	cmp	r6, #0
 800f46c:	da17      	bge.n	800f49e <floor+0x4e>
 800f46e:	a332      	add	r3, pc, #200	@ (adr r3, 800f538 <floor+0xe8>)
 800f470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f474:	f7f0 ff32 	bl	80002dc <__adddf3>
 800f478:	2200      	movs	r2, #0
 800f47a:	2300      	movs	r3, #0
 800f47c:	f7f1 fb74 	bl	8000b68 <__aeabi_dcmpgt>
 800f480:	b150      	cbz	r0, 800f498 <floor+0x48>
 800f482:	2c00      	cmp	r4, #0
 800f484:	da55      	bge.n	800f532 <floor+0xe2>
 800f486:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f48a:	432c      	orrs	r4, r5
 800f48c:	2500      	movs	r5, #0
 800f48e:	42ac      	cmp	r4, r5
 800f490:	4c2b      	ldr	r4, [pc, #172]	@ (800f540 <floor+0xf0>)
 800f492:	bf08      	it	eq
 800f494:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f498:	4621      	mov	r1, r4
 800f49a:	4628      	mov	r0, r5
 800f49c:	e023      	b.n	800f4e6 <floor+0x96>
 800f49e:	4f29      	ldr	r7, [pc, #164]	@ (800f544 <floor+0xf4>)
 800f4a0:	4137      	asrs	r7, r6
 800f4a2:	ea01 0307 	and.w	r3, r1, r7
 800f4a6:	4303      	orrs	r3, r0
 800f4a8:	d01d      	beq.n	800f4e6 <floor+0x96>
 800f4aa:	a323      	add	r3, pc, #140	@ (adr r3, 800f538 <floor+0xe8>)
 800f4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b0:	f7f0 ff14 	bl	80002dc <__adddf3>
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	f7f1 fb56 	bl	8000b68 <__aeabi_dcmpgt>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	d0eb      	beq.n	800f498 <floor+0x48>
 800f4c0:	2c00      	cmp	r4, #0
 800f4c2:	bfbe      	ittt	lt
 800f4c4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f4c8:	4133      	asrlt	r3, r6
 800f4ca:	18e4      	addlt	r4, r4, r3
 800f4cc:	ea24 0407 	bic.w	r4, r4, r7
 800f4d0:	2500      	movs	r5, #0
 800f4d2:	e7e1      	b.n	800f498 <floor+0x48>
 800f4d4:	2e33      	cmp	r6, #51	@ 0x33
 800f4d6:	dd0a      	ble.n	800f4ee <floor+0x9e>
 800f4d8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f4dc:	d103      	bne.n	800f4e6 <floor+0x96>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	f7f0 fefb 	bl	80002dc <__adddf3>
 800f4e6:	ec41 0b10 	vmov	d0, r0, r1
 800f4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ee:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f4f2:	f04f 37ff 	mov.w	r7, #4294967295
 800f4f6:	40df      	lsrs	r7, r3
 800f4f8:	4207      	tst	r7, r0
 800f4fa:	d0f4      	beq.n	800f4e6 <floor+0x96>
 800f4fc:	a30e      	add	r3, pc, #56	@ (adr r3, 800f538 <floor+0xe8>)
 800f4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f502:	f7f0 feeb 	bl	80002dc <__adddf3>
 800f506:	2200      	movs	r2, #0
 800f508:	2300      	movs	r3, #0
 800f50a:	f7f1 fb2d 	bl	8000b68 <__aeabi_dcmpgt>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d0c2      	beq.n	800f498 <floor+0x48>
 800f512:	2c00      	cmp	r4, #0
 800f514:	da0a      	bge.n	800f52c <floor+0xdc>
 800f516:	2e14      	cmp	r6, #20
 800f518:	d101      	bne.n	800f51e <floor+0xce>
 800f51a:	3401      	adds	r4, #1
 800f51c:	e006      	b.n	800f52c <floor+0xdc>
 800f51e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f522:	2301      	movs	r3, #1
 800f524:	40b3      	lsls	r3, r6
 800f526:	441d      	add	r5, r3
 800f528:	4545      	cmp	r5, r8
 800f52a:	d3f6      	bcc.n	800f51a <floor+0xca>
 800f52c:	ea25 0507 	bic.w	r5, r5, r7
 800f530:	e7b2      	b.n	800f498 <floor+0x48>
 800f532:	2500      	movs	r5, #0
 800f534:	462c      	mov	r4, r5
 800f536:	e7af      	b.n	800f498 <floor+0x48>
 800f538:	8800759c 	.word	0x8800759c
 800f53c:	7e37e43c 	.word	0x7e37e43c
 800f540:	bff00000 	.word	0xbff00000
 800f544:	000fffff 	.word	0x000fffff

0800f548 <__ieee754_fmod>:
 800f548:	ec53 2b11 	vmov	r2, r3, d1
 800f54c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800f550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f554:	ea52 040c 	orrs.w	r4, r2, ip
 800f558:	ec51 0b10 	vmov	r0, r1, d0
 800f55c:	461e      	mov	r6, r3
 800f55e:	4617      	mov	r7, r2
 800f560:	4696      	mov	lr, r2
 800f562:	d00c      	beq.n	800f57e <__ieee754_fmod+0x36>
 800f564:	4c77      	ldr	r4, [pc, #476]	@ (800f744 <__ieee754_fmod+0x1fc>)
 800f566:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800f56a:	45a0      	cmp	r8, r4
 800f56c:	4689      	mov	r9, r1
 800f56e:	d806      	bhi.n	800f57e <__ieee754_fmod+0x36>
 800f570:	4254      	negs	r4, r2
 800f572:	4d75      	ldr	r5, [pc, #468]	@ (800f748 <__ieee754_fmod+0x200>)
 800f574:	4314      	orrs	r4, r2
 800f576:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800f57a:	42ac      	cmp	r4, r5
 800f57c:	d909      	bls.n	800f592 <__ieee754_fmod+0x4a>
 800f57e:	f7f1 f863 	bl	8000648 <__aeabi_dmul>
 800f582:	4602      	mov	r2, r0
 800f584:	460b      	mov	r3, r1
 800f586:	f7f1 f989 	bl	800089c <__aeabi_ddiv>
 800f58a:	ec41 0b10 	vmov	d0, r0, r1
 800f58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f592:	45e0      	cmp	r8, ip
 800f594:	4682      	mov	sl, r0
 800f596:	4604      	mov	r4, r0
 800f598:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800f59c:	dc09      	bgt.n	800f5b2 <__ieee754_fmod+0x6a>
 800f59e:	dbf4      	blt.n	800f58a <__ieee754_fmod+0x42>
 800f5a0:	4282      	cmp	r2, r0
 800f5a2:	d8f2      	bhi.n	800f58a <__ieee754_fmod+0x42>
 800f5a4:	d105      	bne.n	800f5b2 <__ieee754_fmod+0x6a>
 800f5a6:	4b69      	ldr	r3, [pc, #420]	@ (800f74c <__ieee754_fmod+0x204>)
 800f5a8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800f5ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5b0:	e7eb      	b.n	800f58a <__ieee754_fmod+0x42>
 800f5b2:	4a65      	ldr	r2, [pc, #404]	@ (800f748 <__ieee754_fmod+0x200>)
 800f5b4:	ea19 0f02 	tst.w	r9, r2
 800f5b8:	d148      	bne.n	800f64c <__ieee754_fmod+0x104>
 800f5ba:	f1b8 0f00 	cmp.w	r8, #0
 800f5be:	d13d      	bne.n	800f63c <__ieee754_fmod+0xf4>
 800f5c0:	4963      	ldr	r1, [pc, #396]	@ (800f750 <__ieee754_fmod+0x208>)
 800f5c2:	4653      	mov	r3, sl
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	dc36      	bgt.n	800f636 <__ieee754_fmod+0xee>
 800f5c8:	4216      	tst	r6, r2
 800f5ca:	d14f      	bne.n	800f66c <__ieee754_fmod+0x124>
 800f5cc:	f1bc 0f00 	cmp.w	ip, #0
 800f5d0:	d144      	bne.n	800f65c <__ieee754_fmod+0x114>
 800f5d2:	4a5f      	ldr	r2, [pc, #380]	@ (800f750 <__ieee754_fmod+0x208>)
 800f5d4:	463b      	mov	r3, r7
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	dc3d      	bgt.n	800f656 <__ieee754_fmod+0x10e>
 800f5da:	485e      	ldr	r0, [pc, #376]	@ (800f754 <__ieee754_fmod+0x20c>)
 800f5dc:	4281      	cmp	r1, r0
 800f5de:	db4a      	blt.n	800f676 <__ieee754_fmod+0x12e>
 800f5e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f5e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f5e8:	485a      	ldr	r0, [pc, #360]	@ (800f754 <__ieee754_fmod+0x20c>)
 800f5ea:	4282      	cmp	r2, r0
 800f5ec:	db57      	blt.n	800f69e <__ieee754_fmod+0x156>
 800f5ee:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800f5f2:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800f5f6:	1a89      	subs	r1, r1, r2
 800f5f8:	1b98      	subs	r0, r3, r6
 800f5fa:	eba4 070e 	sub.w	r7, r4, lr
 800f5fe:	2900      	cmp	r1, #0
 800f600:	d162      	bne.n	800f6c8 <__ieee754_fmod+0x180>
 800f602:	4574      	cmp	r4, lr
 800f604:	bf38      	it	cc
 800f606:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800f60a:	2800      	cmp	r0, #0
 800f60c:	bfa4      	itt	ge
 800f60e:	463c      	movge	r4, r7
 800f610:	4603      	movge	r3, r0
 800f612:	ea53 0104 	orrs.w	r1, r3, r4
 800f616:	d0c6      	beq.n	800f5a6 <__ieee754_fmod+0x5e>
 800f618:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f61c:	db69      	blt.n	800f6f2 <__ieee754_fmod+0x1aa>
 800f61e:	494d      	ldr	r1, [pc, #308]	@ (800f754 <__ieee754_fmod+0x20c>)
 800f620:	428a      	cmp	r2, r1
 800f622:	db6c      	blt.n	800f6fe <__ieee754_fmod+0x1b6>
 800f624:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f628:	432b      	orrs	r3, r5
 800f62a:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800f62e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f632:	4620      	mov	r0, r4
 800f634:	e7a9      	b.n	800f58a <__ieee754_fmod+0x42>
 800f636:	3901      	subs	r1, #1
 800f638:	005b      	lsls	r3, r3, #1
 800f63a:	e7c3      	b.n	800f5c4 <__ieee754_fmod+0x7c>
 800f63c:	4945      	ldr	r1, [pc, #276]	@ (800f754 <__ieee754_fmod+0x20c>)
 800f63e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800f642:	2b00      	cmp	r3, #0
 800f644:	ddc0      	ble.n	800f5c8 <__ieee754_fmod+0x80>
 800f646:	3901      	subs	r1, #1
 800f648:	005b      	lsls	r3, r3, #1
 800f64a:	e7fa      	b.n	800f642 <__ieee754_fmod+0xfa>
 800f64c:	ea4f 5128 	mov.w	r1, r8, asr #20
 800f650:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f654:	e7b8      	b.n	800f5c8 <__ieee754_fmod+0x80>
 800f656:	3a01      	subs	r2, #1
 800f658:	005b      	lsls	r3, r3, #1
 800f65a:	e7bc      	b.n	800f5d6 <__ieee754_fmod+0x8e>
 800f65c:	4a3d      	ldr	r2, [pc, #244]	@ (800f754 <__ieee754_fmod+0x20c>)
 800f65e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800f662:	2b00      	cmp	r3, #0
 800f664:	ddb9      	ble.n	800f5da <__ieee754_fmod+0x92>
 800f666:	3a01      	subs	r2, #1
 800f668:	005b      	lsls	r3, r3, #1
 800f66a:	e7fa      	b.n	800f662 <__ieee754_fmod+0x11a>
 800f66c:	ea4f 522c 	mov.w	r2, ip, asr #20
 800f670:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f674:	e7b1      	b.n	800f5da <__ieee754_fmod+0x92>
 800f676:	1a40      	subs	r0, r0, r1
 800f678:	281f      	cmp	r0, #31
 800f67a:	dc0a      	bgt.n	800f692 <__ieee754_fmod+0x14a>
 800f67c:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800f680:	fa08 f800 	lsl.w	r8, r8, r0
 800f684:	fa2a f303 	lsr.w	r3, sl, r3
 800f688:	ea43 0308 	orr.w	r3, r3, r8
 800f68c:	fa0a f400 	lsl.w	r4, sl, r0
 800f690:	e7aa      	b.n	800f5e8 <__ieee754_fmod+0xa0>
 800f692:	4b31      	ldr	r3, [pc, #196]	@ (800f758 <__ieee754_fmod+0x210>)
 800f694:	1a5b      	subs	r3, r3, r1
 800f696:	fa0a f303 	lsl.w	r3, sl, r3
 800f69a:	2400      	movs	r4, #0
 800f69c:	e7a4      	b.n	800f5e8 <__ieee754_fmod+0xa0>
 800f69e:	1a80      	subs	r0, r0, r2
 800f6a0:	281f      	cmp	r0, #31
 800f6a2:	dc0a      	bgt.n	800f6ba <__ieee754_fmod+0x172>
 800f6a4:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800f6a8:	fa0c fc00 	lsl.w	ip, ip, r0
 800f6ac:	fa27 f606 	lsr.w	r6, r7, r6
 800f6b0:	ea46 060c 	orr.w	r6, r6, ip
 800f6b4:	fa07 fe00 	lsl.w	lr, r7, r0
 800f6b8:	e79d      	b.n	800f5f6 <__ieee754_fmod+0xae>
 800f6ba:	4e27      	ldr	r6, [pc, #156]	@ (800f758 <__ieee754_fmod+0x210>)
 800f6bc:	1ab6      	subs	r6, r6, r2
 800f6be:	fa07 f606 	lsl.w	r6, r7, r6
 800f6c2:	f04f 0e00 	mov.w	lr, #0
 800f6c6:	e796      	b.n	800f5f6 <__ieee754_fmod+0xae>
 800f6c8:	4574      	cmp	r4, lr
 800f6ca:	bf38      	it	cc
 800f6cc:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800f6d0:	2800      	cmp	r0, #0
 800f6d2:	da05      	bge.n	800f6e0 <__ieee754_fmod+0x198>
 800f6d4:	0fe0      	lsrs	r0, r4, #31
 800f6d6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f6da:	0064      	lsls	r4, r4, #1
 800f6dc:	3901      	subs	r1, #1
 800f6de:	e78b      	b.n	800f5f8 <__ieee754_fmod+0xb0>
 800f6e0:	ea50 0307 	orrs.w	r3, r0, r7
 800f6e4:	f43f af5f 	beq.w	800f5a6 <__ieee754_fmod+0x5e>
 800f6e8:	0ffb      	lsrs	r3, r7, #31
 800f6ea:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800f6ee:	007c      	lsls	r4, r7, #1
 800f6f0:	e7f4      	b.n	800f6dc <__ieee754_fmod+0x194>
 800f6f2:	0fe1      	lsrs	r1, r4, #31
 800f6f4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800f6f8:	0064      	lsls	r4, r4, #1
 800f6fa:	3a01      	subs	r2, #1
 800f6fc:	e78c      	b.n	800f618 <__ieee754_fmod+0xd0>
 800f6fe:	1a89      	subs	r1, r1, r2
 800f700:	2914      	cmp	r1, #20
 800f702:	dc0a      	bgt.n	800f71a <__ieee754_fmod+0x1d2>
 800f704:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800f708:	fa03 f202 	lsl.w	r2, r3, r2
 800f70c:	40cc      	lsrs	r4, r1
 800f70e:	4322      	orrs	r2, r4
 800f710:	410b      	asrs	r3, r1
 800f712:	ea43 0105 	orr.w	r1, r3, r5
 800f716:	4610      	mov	r0, r2
 800f718:	e737      	b.n	800f58a <__ieee754_fmod+0x42>
 800f71a:	291f      	cmp	r1, #31
 800f71c:	dc07      	bgt.n	800f72e <__ieee754_fmod+0x1e6>
 800f71e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800f722:	40cc      	lsrs	r4, r1
 800f724:	fa03 f202 	lsl.w	r2, r3, r2
 800f728:	4322      	orrs	r2, r4
 800f72a:	462b      	mov	r3, r5
 800f72c:	e7f1      	b.n	800f712 <__ieee754_fmod+0x1ca>
 800f72e:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800f732:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800f736:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800f73a:	32e2      	adds	r2, #226	@ 0xe2
 800f73c:	fa43 f202 	asr.w	r2, r3, r2
 800f740:	e7f3      	b.n	800f72a <__ieee754_fmod+0x1e2>
 800f742:	bf00      	nop
 800f744:	7fefffff 	.word	0x7fefffff
 800f748:	7ff00000 	.word	0x7ff00000
 800f74c:	0800fc10 	.word	0x0800fc10
 800f750:	fffffbed 	.word	0xfffffbed
 800f754:	fffffc02 	.word	0xfffffc02
 800f758:	fffffbe2 	.word	0xfffffbe2

0800f75c <_init>:
 800f75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75e:	bf00      	nop
 800f760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f762:	bc08      	pop	{r3}
 800f764:	469e      	mov	lr, r3
 800f766:	4770      	bx	lr

0800f768 <_fini>:
 800f768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f76a:	bf00      	nop
 800f76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f76e:	bc08      	pop	{r3}
 800f770:	469e      	mov	lr, r3
 800f772:	4770      	bx	lr
