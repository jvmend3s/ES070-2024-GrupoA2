
Carro Seguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f454  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800f638  0800f638  00010638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa68  0800fa68  00011210  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa68  0800fa68  00010a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa70  0800fa70  00011210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa70  0800fa70  00010a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa74  0800fa74  00010a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800fa78  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bb0  20000210  0800fc88  00011210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc0  0800fc88  00011dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d571  00000000  00000000  00011240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b6  00000000  00000000  0002e7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00032868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001243  00000000  00000000  00034000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a2e4  00000000  00000000  00035243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000200c9  00000000  00000000  0005f527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001025c9  00000000  00000000  0007f5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181bb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000755c  00000000  00000000  00181bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00189158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f61c 	.word	0x0800f61c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	0800f61c 	.word	0x0800f61c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_frsub>:
 8000cd8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cdc:	e002      	b.n	8000ce4 <__addsf3>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fsub>:
 8000ce0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ce4 <__addsf3>:
 8000ce4:	0042      	lsls	r2, r0, #1
 8000ce6:	bf1f      	itttt	ne
 8000ce8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cec:	ea92 0f03 	teqne	r2, r3
 8000cf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf8:	d06a      	beq.n	8000dd0 <__addsf3+0xec>
 8000cfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d02:	bfc1      	itttt	gt
 8000d04:	18d2      	addgt	r2, r2, r3
 8000d06:	4041      	eorgt	r1, r0
 8000d08:	4048      	eorgt	r0, r1
 8000d0a:	4041      	eorgt	r1, r0
 8000d0c:	bfb8      	it	lt
 8000d0e:	425b      	neglt	r3, r3
 8000d10:	2b19      	cmp	r3, #25
 8000d12:	bf88      	it	hi
 8000d14:	4770      	bxhi	lr
 8000d16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4240      	negne	r0, r0
 8000d26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d32:	bf18      	it	ne
 8000d34:	4249      	negne	r1, r1
 8000d36:	ea92 0f03 	teq	r2, r3
 8000d3a:	d03f      	beq.n	8000dbc <__addsf3+0xd8>
 8000d3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d40:	fa41 fc03 	asr.w	ip, r1, r3
 8000d44:	eb10 000c 	adds.w	r0, r0, ip
 8000d48:	f1c3 0320 	rsb	r3, r3, #32
 8000d4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__addsf3+0x78>
 8000d56:	4249      	negs	r1, r1
 8000d58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d60:	d313      	bcc.n	8000d8a <__addsf3+0xa6>
 8000d62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d66:	d306      	bcc.n	8000d76 <__addsf3+0x92>
 8000d68:	0840      	lsrs	r0, r0, #1
 8000d6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d6e:	f102 0201 	add.w	r2, r2, #1
 8000d72:	2afe      	cmp	r2, #254	@ 0xfe
 8000d74:	d251      	bcs.n	8000e1a <__addsf3+0x136>
 8000d76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7e:	bf08      	it	eq
 8000d80:	f020 0001 	biceq.w	r0, r0, #1
 8000d84:	ea40 0003 	orr.w	r0, r0, r3
 8000d88:	4770      	bx	lr
 8000d8a:	0049      	lsls	r1, r1, #1
 8000d8c:	eb40 0000 	adc.w	r0, r0, r0
 8000d90:	3a01      	subs	r2, #1
 8000d92:	bf28      	it	cs
 8000d94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d98:	d2ed      	bcs.n	8000d76 <__addsf3+0x92>
 8000d9a:	fab0 fc80 	clz	ip, r0
 8000d9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000da2:	ebb2 020c 	subs.w	r2, r2, ip
 8000da6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000daa:	bfaa      	itet	ge
 8000dac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000db0:	4252      	neglt	r2, r2
 8000db2:	4318      	orrge	r0, r3
 8000db4:	bfbc      	itt	lt
 8000db6:	40d0      	lsrlt	r0, r2
 8000db8:	4318      	orrlt	r0, r3
 8000dba:	4770      	bx	lr
 8000dbc:	f092 0f00 	teq	r2, #0
 8000dc0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dc4:	bf06      	itte	eq
 8000dc6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dca:	3201      	addeq	r2, #1
 8000dcc:	3b01      	subne	r3, #1
 8000dce:	e7b5      	b.n	8000d3c <__addsf3+0x58>
 8000dd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	bf18      	it	ne
 8000dda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dde:	d021      	beq.n	8000e24 <__addsf3+0x140>
 8000de0:	ea92 0f03 	teq	r2, r3
 8000de4:	d004      	beq.n	8000df0 <__addsf3+0x10c>
 8000de6:	f092 0f00 	teq	r2, #0
 8000dea:	bf08      	it	eq
 8000dec:	4608      	moveq	r0, r1
 8000dee:	4770      	bx	lr
 8000df0:	ea90 0f01 	teq	r0, r1
 8000df4:	bf1c      	itt	ne
 8000df6:	2000      	movne	r0, #0
 8000df8:	4770      	bxne	lr
 8000dfa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dfe:	d104      	bne.n	8000e0a <__addsf3+0x126>
 8000e00:	0040      	lsls	r0, r0, #1
 8000e02:	bf28      	it	cs
 8000e04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e08:	4770      	bx	lr
 8000e0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e0e:	bf3c      	itt	cc
 8000e10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bxcc	lr
 8000e16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e22:	4770      	bx	lr
 8000e24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e28:	bf16      	itet	ne
 8000e2a:	4608      	movne	r0, r1
 8000e2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e30:	4601      	movne	r1, r0
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	bf06      	itte	eq
 8000e36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e3a:	ea90 0f01 	teqeq	r0, r1
 8000e3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_ui2f>:
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e004      	b.n	8000e54 <__aeabi_i2f+0x8>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_i2f>:
 8000e4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e50:	bf48      	it	mi
 8000e52:	4240      	negmi	r0, r0
 8000e54:	ea5f 0c00 	movs.w	ip, r0
 8000e58:	bf08      	it	eq
 8000e5a:	4770      	bxeq	lr
 8000e5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e60:	4601      	mov	r1, r0
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	e01c      	b.n	8000ea2 <__aeabi_l2f+0x2a>

08000e68 <__aeabi_ul2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	e00a      	b.n	8000e8c <__aeabi_l2f+0x14>
 8000e76:	bf00      	nop

08000e78 <__aeabi_l2f>:
 8000e78:	ea50 0201 	orrs.w	r2, r0, r1
 8000e7c:	bf08      	it	eq
 8000e7e:	4770      	bxeq	lr
 8000e80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e84:	d502      	bpl.n	8000e8c <__aeabi_l2f+0x14>
 8000e86:	4240      	negs	r0, r0
 8000e88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e8c:	ea5f 0c01 	movs.w	ip, r1
 8000e90:	bf02      	ittt	eq
 8000e92:	4684      	moveq	ip, r0
 8000e94:	4601      	moveq	r1, r0
 8000e96:	2000      	moveq	r0, #0
 8000e98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e9c:	bf08      	it	eq
 8000e9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ea2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ea6:	fabc f28c 	clz	r2, ip
 8000eaa:	3a08      	subs	r2, #8
 8000eac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000eb0:	db10      	blt.n	8000ed4 <__aeabi_l2f+0x5c>
 8000eb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ec4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f102 0220 	add.w	r2, r2, #32
 8000ed8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000edc:	f1c2 0220 	rsb	r2, r2, #32
 8000ee0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ee4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee8:	eb43 0002 	adc.w	r0, r3, r2
 8000eec:	bf08      	it	eq
 8000eee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ef2:	4770      	bx	lr

08000ef4 <__aeabi_uldivmod>:
 8000ef4:	b953      	cbnz	r3, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef6:	b94a      	cbnz	r2, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	bf08      	it	eq
 8000efc:	2800      	cmpeq	r0, #0
 8000efe:	bf1c      	itt	ne
 8000f00:	f04f 31ff 	movne.w	r1, #4294967295
 8000f04:	f04f 30ff 	movne.w	r0, #4294967295
 8000f08:	f000 b9a0 	b.w	800124c <__aeabi_idiv0>
 8000f0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f14:	f000 f83c 	bl	8000f90 <__udivmoddi4>
 8000f18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_d2lz>:
 8000f24:	b538      	push	{r3, r4, r5, lr}
 8000f26:	2200      	movs	r2, #0
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	460d      	mov	r5, r1
 8000f2e:	f7ff fdfd 	bl	8000b2c <__aeabi_dcmplt>
 8000f32:	b928      	cbnz	r0, 8000f40 <__aeabi_d2lz+0x1c>
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f3c:	f000 b80a 	b.w	8000f54 <__aeabi_d2ulz>
 8000f40:	4620      	mov	r0, r4
 8000f42:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f46:	f000 f805 	bl	8000f54 <__aeabi_d2ulz>
 8000f4a:	4240      	negs	r0, r0
 8000f4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f50:	bd38      	pop	{r3, r4, r5, pc}
 8000f52:	bf00      	nop

08000f54 <__aeabi_d2ulz>:
 8000f54:	b5d0      	push	{r4, r6, r7, lr}
 8000f56:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <__aeabi_d2ulz+0x34>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4606      	mov	r6, r0
 8000f5c:	460f      	mov	r7, r1
 8000f5e:	f7ff fb73 	bl	8000648 <__aeabi_dmul>
 8000f62:	f7ff fe49 	bl	8000bf8 <__aeabi_d2uiz>
 8000f66:	4604      	mov	r4, r0
 8000f68:	f7ff faf4 	bl	8000554 <__aeabi_ui2d>
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <__aeabi_d2ulz+0x38>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f7ff fb6a 	bl	8000648 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4630      	mov	r0, r6
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	f7ff f9ac 	bl	80002d8 <__aeabi_dsub>
 8000f80:	f7ff fe3a 	bl	8000bf8 <__aeabi_d2uiz>
 8000f84:	4621      	mov	r1, r4
 8000f86:	bdd0      	pop	{r4, r6, r7, pc}
 8000f88:	3df00000 	.word	0x3df00000
 8000f8c:	41f00000 	.word	0x41f00000

08000f90 <__udivmoddi4>:
 8000f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f94:	9d08      	ldr	r5, [sp, #32]
 8000f96:	460c      	mov	r4, r1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d14e      	bne.n	800103a <__udivmoddi4+0xaa>
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	458c      	cmp	ip, r1
 8000fa0:	4686      	mov	lr, r0
 8000fa2:	fab2 f282 	clz	r2, r2
 8000fa6:	d962      	bls.n	800106e <__udivmoddi4+0xde>
 8000fa8:	b14a      	cbz	r2, 8000fbe <__udivmoddi4+0x2e>
 8000faa:	f1c2 0320 	rsb	r3, r2, #32
 8000fae:	4091      	lsls	r1, r2
 8000fb0:	fa20 f303 	lsr.w	r3, r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	4319      	orrs	r1, r3
 8000fba:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc2:	fa1f f68c 	uxth.w	r6, ip
 8000fc6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	d90a      	bls.n	8000ff4 <__udivmoddi4+0x64>
 8000fde:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fe6:	f080 8112 	bcs.w	800120e <__udivmoddi4+0x27e>
 8000fea:	4299      	cmp	r1, r3
 8000fec:	f240 810f 	bls.w	800120e <__udivmoddi4+0x27e>
 8000ff0:	3c02      	subs	r4, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1a59      	subs	r1, r3, r1
 8000ff6:	fa1f f38e 	uxth.w	r3, lr
 8000ffa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ffe:	fb07 1110 	mls	r1, r7, r0, r1
 8001002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001006:	fb00 f606 	mul.w	r6, r0, r6
 800100a:	429e      	cmp	r6, r3
 800100c:	d90a      	bls.n	8001024 <__udivmoddi4+0x94>
 800100e:	eb1c 0303 	adds.w	r3, ip, r3
 8001012:	f100 31ff 	add.w	r1, r0, #4294967295
 8001016:	f080 80fc 	bcs.w	8001212 <__udivmoddi4+0x282>
 800101a:	429e      	cmp	r6, r3
 800101c:	f240 80f9 	bls.w	8001212 <__udivmoddi4+0x282>
 8001020:	4463      	add	r3, ip
 8001022:	3802      	subs	r0, #2
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800102a:	2100      	movs	r1, #0
 800102c:	b11d      	cbz	r5, 8001036 <__udivmoddi4+0xa6>
 800102e:	40d3      	lsrs	r3, r2
 8001030:	2200      	movs	r2, #0
 8001032:	e9c5 3200 	strd	r3, r2, [r5]
 8001036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103a:	428b      	cmp	r3, r1
 800103c:	d905      	bls.n	800104a <__udivmoddi4+0xba>
 800103e:	b10d      	cbz	r5, 8001044 <__udivmoddi4+0xb4>
 8001040:	e9c5 0100 	strd	r0, r1, [r5]
 8001044:	2100      	movs	r1, #0
 8001046:	4608      	mov	r0, r1
 8001048:	e7f5      	b.n	8001036 <__udivmoddi4+0xa6>
 800104a:	fab3 f183 	clz	r1, r3
 800104e:	2900      	cmp	r1, #0
 8001050:	d146      	bne.n	80010e0 <__udivmoddi4+0x150>
 8001052:	42a3      	cmp	r3, r4
 8001054:	d302      	bcc.n	800105c <__udivmoddi4+0xcc>
 8001056:	4290      	cmp	r0, r2
 8001058:	f0c0 80f0 	bcc.w	800123c <__udivmoddi4+0x2ac>
 800105c:	1a86      	subs	r6, r0, r2
 800105e:	eb64 0303 	sbc.w	r3, r4, r3
 8001062:	2001      	movs	r0, #1
 8001064:	2d00      	cmp	r5, #0
 8001066:	d0e6      	beq.n	8001036 <__udivmoddi4+0xa6>
 8001068:	e9c5 6300 	strd	r6, r3, [r5]
 800106c:	e7e3      	b.n	8001036 <__udivmoddi4+0xa6>
 800106e:	2a00      	cmp	r2, #0
 8001070:	f040 8090 	bne.w	8001194 <__udivmoddi4+0x204>
 8001074:	eba1 040c 	sub.w	r4, r1, ip
 8001078:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800107c:	fa1f f78c 	uxth.w	r7, ip
 8001080:	2101      	movs	r1, #1
 8001082:	fbb4 f6f8 	udiv	r6, r4, r8
 8001086:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800108a:	fb08 4416 	mls	r4, r8, r6, r4
 800108e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001092:	fb07 f006 	mul.w	r0, r7, r6
 8001096:	4298      	cmp	r0, r3
 8001098:	d908      	bls.n	80010ac <__udivmoddi4+0x11c>
 800109a:	eb1c 0303 	adds.w	r3, ip, r3
 800109e:	f106 34ff 	add.w	r4, r6, #4294967295
 80010a2:	d202      	bcs.n	80010aa <__udivmoddi4+0x11a>
 80010a4:	4298      	cmp	r0, r3
 80010a6:	f200 80cd 	bhi.w	8001244 <__udivmoddi4+0x2b4>
 80010aa:	4626      	mov	r6, r4
 80010ac:	1a1c      	subs	r4, r3, r0
 80010ae:	fa1f f38e 	uxth.w	r3, lr
 80010b2:	fbb4 f0f8 	udiv	r0, r4, r8
 80010b6:	fb08 4410 	mls	r4, r8, r0, r4
 80010ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010be:	fb00 f707 	mul.w	r7, r0, r7
 80010c2:	429f      	cmp	r7, r3
 80010c4:	d908      	bls.n	80010d8 <__udivmoddi4+0x148>
 80010c6:	eb1c 0303 	adds.w	r3, ip, r3
 80010ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80010ce:	d202      	bcs.n	80010d6 <__udivmoddi4+0x146>
 80010d0:	429f      	cmp	r7, r3
 80010d2:	f200 80b0 	bhi.w	8001236 <__udivmoddi4+0x2a6>
 80010d6:	4620      	mov	r0, r4
 80010d8:	1bdb      	subs	r3, r3, r7
 80010da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010de:	e7a5      	b.n	800102c <__udivmoddi4+0x9c>
 80010e0:	f1c1 0620 	rsb	r6, r1, #32
 80010e4:	408b      	lsls	r3, r1
 80010e6:	fa22 f706 	lsr.w	r7, r2, r6
 80010ea:	431f      	orrs	r7, r3
 80010ec:	fa20 fc06 	lsr.w	ip, r0, r6
 80010f0:	fa04 f301 	lsl.w	r3, r4, r1
 80010f4:	ea43 030c 	orr.w	r3, r3, ip
 80010f8:	40f4      	lsrs	r4, r6
 80010fa:	fa00 f801 	lsl.w	r8, r0, r1
 80010fe:	0c38      	lsrs	r0, r7, #16
 8001100:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001104:	fbb4 fef0 	udiv	lr, r4, r0
 8001108:	fa1f fc87 	uxth.w	ip, r7
 800110c:	fb00 441e 	mls	r4, r0, lr, r4
 8001110:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001114:	fb0e f90c 	mul.w	r9, lr, ip
 8001118:	45a1      	cmp	r9, r4
 800111a:	fa02 f201 	lsl.w	r2, r2, r1
 800111e:	d90a      	bls.n	8001136 <__udivmoddi4+0x1a6>
 8001120:	193c      	adds	r4, r7, r4
 8001122:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001126:	f080 8084 	bcs.w	8001232 <__udivmoddi4+0x2a2>
 800112a:	45a1      	cmp	r9, r4
 800112c:	f240 8081 	bls.w	8001232 <__udivmoddi4+0x2a2>
 8001130:	f1ae 0e02 	sub.w	lr, lr, #2
 8001134:	443c      	add	r4, r7
 8001136:	eba4 0409 	sub.w	r4, r4, r9
 800113a:	fa1f f983 	uxth.w	r9, r3
 800113e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001142:	fb00 4413 	mls	r4, r0, r3, r4
 8001146:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800114a:	fb03 fc0c 	mul.w	ip, r3, ip
 800114e:	45a4      	cmp	ip, r4
 8001150:	d907      	bls.n	8001162 <__udivmoddi4+0x1d2>
 8001152:	193c      	adds	r4, r7, r4
 8001154:	f103 30ff 	add.w	r0, r3, #4294967295
 8001158:	d267      	bcs.n	800122a <__udivmoddi4+0x29a>
 800115a:	45a4      	cmp	ip, r4
 800115c:	d965      	bls.n	800122a <__udivmoddi4+0x29a>
 800115e:	3b02      	subs	r3, #2
 8001160:	443c      	add	r4, r7
 8001162:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001166:	fba0 9302 	umull	r9, r3, r0, r2
 800116a:	eba4 040c 	sub.w	r4, r4, ip
 800116e:	429c      	cmp	r4, r3
 8001170:	46ce      	mov	lr, r9
 8001172:	469c      	mov	ip, r3
 8001174:	d351      	bcc.n	800121a <__udivmoddi4+0x28a>
 8001176:	d04e      	beq.n	8001216 <__udivmoddi4+0x286>
 8001178:	b155      	cbz	r5, 8001190 <__udivmoddi4+0x200>
 800117a:	ebb8 030e 	subs.w	r3, r8, lr
 800117e:	eb64 040c 	sbc.w	r4, r4, ip
 8001182:	fa04 f606 	lsl.w	r6, r4, r6
 8001186:	40cb      	lsrs	r3, r1
 8001188:	431e      	orrs	r6, r3
 800118a:	40cc      	lsrs	r4, r1
 800118c:	e9c5 6400 	strd	r6, r4, [r5]
 8001190:	2100      	movs	r1, #0
 8001192:	e750      	b.n	8001036 <__udivmoddi4+0xa6>
 8001194:	f1c2 0320 	rsb	r3, r2, #32
 8001198:	fa20 f103 	lsr.w	r1, r0, r3
 800119c:	fa0c fc02 	lsl.w	ip, ip, r2
 80011a0:	fa24 f303 	lsr.w	r3, r4, r3
 80011a4:	4094      	lsls	r4, r2
 80011a6:	430c      	orrs	r4, r1
 80011a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80011b0:	fa1f f78c 	uxth.w	r7, ip
 80011b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80011b8:	fb08 3110 	mls	r1, r8, r0, r3
 80011bc:	0c23      	lsrs	r3, r4, #16
 80011be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011c2:	fb00 f107 	mul.w	r1, r0, r7
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d908      	bls.n	80011dc <__udivmoddi4+0x24c>
 80011ca:	eb1c 0303 	adds.w	r3, ip, r3
 80011ce:	f100 36ff 	add.w	r6, r0, #4294967295
 80011d2:	d22c      	bcs.n	800122e <__udivmoddi4+0x29e>
 80011d4:	4299      	cmp	r1, r3
 80011d6:	d92a      	bls.n	800122e <__udivmoddi4+0x29e>
 80011d8:	3802      	subs	r0, #2
 80011da:	4463      	add	r3, ip
 80011dc:	1a5b      	subs	r3, r3, r1
 80011de:	b2a4      	uxth	r4, r4
 80011e0:	fbb3 f1f8 	udiv	r1, r3, r8
 80011e4:	fb08 3311 	mls	r3, r8, r1, r3
 80011e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011ec:	fb01 f307 	mul.w	r3, r1, r7
 80011f0:	42a3      	cmp	r3, r4
 80011f2:	d908      	bls.n	8001206 <__udivmoddi4+0x276>
 80011f4:	eb1c 0404 	adds.w	r4, ip, r4
 80011f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80011fc:	d213      	bcs.n	8001226 <__udivmoddi4+0x296>
 80011fe:	42a3      	cmp	r3, r4
 8001200:	d911      	bls.n	8001226 <__udivmoddi4+0x296>
 8001202:	3902      	subs	r1, #2
 8001204:	4464      	add	r4, ip
 8001206:	1ae4      	subs	r4, r4, r3
 8001208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800120c:	e739      	b.n	8001082 <__udivmoddi4+0xf2>
 800120e:	4604      	mov	r4, r0
 8001210:	e6f0      	b.n	8000ff4 <__udivmoddi4+0x64>
 8001212:	4608      	mov	r0, r1
 8001214:	e706      	b.n	8001024 <__udivmoddi4+0x94>
 8001216:	45c8      	cmp	r8, r9
 8001218:	d2ae      	bcs.n	8001178 <__udivmoddi4+0x1e8>
 800121a:	ebb9 0e02 	subs.w	lr, r9, r2
 800121e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001222:	3801      	subs	r0, #1
 8001224:	e7a8      	b.n	8001178 <__udivmoddi4+0x1e8>
 8001226:	4631      	mov	r1, r6
 8001228:	e7ed      	b.n	8001206 <__udivmoddi4+0x276>
 800122a:	4603      	mov	r3, r0
 800122c:	e799      	b.n	8001162 <__udivmoddi4+0x1d2>
 800122e:	4630      	mov	r0, r6
 8001230:	e7d4      	b.n	80011dc <__udivmoddi4+0x24c>
 8001232:	46d6      	mov	lr, sl
 8001234:	e77f      	b.n	8001136 <__udivmoddi4+0x1a6>
 8001236:	4463      	add	r3, ip
 8001238:	3802      	subs	r0, #2
 800123a:	e74d      	b.n	80010d8 <__udivmoddi4+0x148>
 800123c:	4606      	mov	r6, r0
 800123e:	4623      	mov	r3, r4
 8001240:	4608      	mov	r0, r1
 8001242:	e70f      	b.n	8001064 <__udivmoddi4+0xd4>
 8001244:	3e02      	subs	r6, #2
 8001246:	4463      	add	r3, ip
 8001248:	e730      	b.n	80010ac <__udivmoddi4+0x11c>
 800124a:	bf00      	nop

0800124c <__aeabi_idiv0>:
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <vBleCmdMotorForward>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	This function command the robot to go forward								   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vBleCmdMotorForward(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	vMotorsSetPWMTimer(left, 0.8, 1, 300);
 8001254:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001258:	2101      	movs	r1, #1
 800125a:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8001278 <vBleCmdMotorForward+0x28>
 800125e:	2000      	movs	r0, #0
 8001260:	f001 fc56 	bl	8002b10 <vMotorsSetPWMTimer>
	vMotorsSetPWMTimer(right, 0.8, 1, 300);
 8001264:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001268:	2101      	movs	r1, #1
 800126a:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8001278 <vBleCmdMotorForward+0x28>
 800126e:	2001      	movs	r0, #1
 8001270:	f001 fc4e 	bl	8002b10 <vMotorsSetPWMTimer>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	3f4ccccd 	.word	0x3f4ccccd

0800127c <vBleCmdMotorLeftward>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	This function command the robot to go leftward								   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vBleCmdMotorLeftward(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	vMotorsSetPWMTimer(left, 0.5, 1, 300);
 8001280:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001284:	2101      	movs	r1, #1
 8001286:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800128a:	2000      	movs	r0, #0
 800128c:	f001 fc40 	bl	8002b10 <vMotorsSetPWMTimer>
	vMotorsSetPWMTimer(right, 0.8, 1, 300);
 8001290:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001294:	2101      	movs	r1, #1
 8001296:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80012a4 <vBleCmdMotorLeftward+0x28>
 800129a:	2001      	movs	r0, #1
 800129c:	f001 fc38 	bl	8002b10 <vMotorsSetPWMTimer>
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	3f4ccccd 	.word	0x3f4ccccd

080012a8 <vBleCmdMotorRightward>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	This function command the robot to go rightward								   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vBleCmdMotorRightward(){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	vMotorsSetPWMTimer(left, 0.8, 1, 300);
 80012ac:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012b0:	2101      	movs	r1, #1
 80012b2:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80012d0 <vBleCmdMotorRightward+0x28>
 80012b6:	2000      	movs	r0, #0
 80012b8:	f001 fc2a 	bl	8002b10 <vMotorsSetPWMTimer>
	vMotorsSetPWMTimer(right, 0.5, 1, 300);
 80012bc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012c0:	2101      	movs	r1, #1
 80012c2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80012c6:	2001      	movs	r0, #1
 80012c8:	f001 fc22 	bl	8002b10 <vMotorsSetPWMTimer>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	3f4ccccd 	.word	0x3f4ccccd

080012d4 <vBleCmdMotorBackward>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	This function command the robot to go backward								   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vBleCmdMotorBackward(){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	vMotorsSetPWMTimer(left, 0.8, 0, 300);
 80012d8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012dc:	2100      	movs	r1, #0
 80012de:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80012fc <vBleCmdMotorBackward+0x28>
 80012e2:	2000      	movs	r0, #0
 80012e4:	f001 fc14 	bl	8002b10 <vMotorsSetPWMTimer>
	vMotorsSetPWMTimer(right, 0.8, 0, 300);
 80012e8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012ec:	2100      	movs	r1, #0
 80012ee:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80012fc <vBleCmdMotorBackward+0x28>
 80012f2:	2001      	movs	r0, #1
 80012f4:	f001 fc0c 	bl	8002b10 <vMotorsSetPWMTimer>
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	3f4ccccd 	.word	0x3f4ccccd

08001300 <vCommStateMachineInit>:
UART_HandleTypeDef *pBluetoothControllerUART;

//-----------------------------------------------Functions---------------------------------------------//


void vCommStateMachineInit(UART_HandleTypeDef *huart){
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	pBluetoothControllerUART = huart;
 8001308:	4a06      	ldr	r2, [pc, #24]	@ (8001324 <vCommStateMachineInit+0x24>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(pBluetoothControllerUART, &ucDigit, 1);
 800130e:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <vCommStateMachineInit+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2201      	movs	r2, #1
 8001314:	4904      	ldr	r1, [pc, #16]	@ (8001328 <vCommStateMachineInit+0x28>)
 8001316:	4618      	mov	r0, r3
 8001318:	f008 fdf6 	bl	8009f08 <HAL_UART_Receive_IT>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000238 	.word	0x20000238
 8001328:	20000235 	.word	0x20000235

0800132c <HAL_UART_RxCpltCallback>:
//	 Description	:	Makes the treatment when recieve one byte from the uart, making a
//		                state machine to pass trought any input
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucByte
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    static unsigned char ucParam;


    if (huart == pBluetoothControllerUART){
 8001334:	4b77      	ldr	r3, [pc, #476]	@ (8001514 <HAL_UART_RxCpltCallback+0x1e8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	429a      	cmp	r2, r3
 800133c:	f040 80e5 	bne.w	800150a <HAL_UART_RxCpltCallback+0x1de>
        HAL_UART_Receive_IT(huart, &ucDigit, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	4975      	ldr	r1, [pc, #468]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f008 fddf 	bl	8009f08 <HAL_UART_Receive_IT>

        if('#' == ucDigit){
 800134a:	4b73      	ldr	r3, [pc, #460]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b23      	cmp	r3, #35	@ 0x23
 8001350:	d103      	bne.n	800135a <HAL_UART_RxCpltCallback+0x2e>
            ucState = _READY;
 8001352:	4b72      	ldr	r3, [pc, #456]	@ (800151c <HAL_UART_RxCpltCallback+0x1f0>)
 8001354:	2231      	movs	r2, #49	@ 0x31
 8001356:	701a      	strb	r2, [r3, #0]
					vBleCmdMotorBackward();
			}
		}
    }
//    HAL_UART_Receive_IT(pBluetoothControllerUART, &ucDigit, 1);
}
 8001358:	e0d7      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
			if (ucState != _IDDLE){
 800135a:	4b70      	ldr	r3, [pc, #448]	@ (800151c <HAL_UART_RxCpltCallback+0x1f0>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b30      	cmp	r3, #48	@ 0x30
 8001360:	f000 80b7 	beq.w	80014d2 <HAL_UART_RxCpltCallback+0x1a6>
				switch (ucState){
 8001364:	4b6d      	ldr	r3, [pc, #436]	@ (800151c <HAL_UART_RxCpltCallback+0x1f0>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	3b31      	subs	r3, #49	@ 0x31
 800136a:	2b04      	cmp	r3, #4
 800136c:	f200 80cd 	bhi.w	800150a <HAL_UART_RxCpltCallback+0x1de>
 8001370:	a201      	add	r2, pc, #4	@ (adr r2, 8001378 <HAL_UART_RxCpltCallback+0x4c>)
 8001372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001376:	bf00      	nop
 8001378:	0800138d 	.word	0x0800138d
 800137c:	080013b5 	.word	0x080013b5
 8001380:	08001405 	.word	0x08001405
 8001384:	08001453 	.word	0x08001453
 8001388:	0800146d 	.word	0x0800146d
					switch (ucDigit){
 800138c:	4b62      	ldr	r3, [pc, #392]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b67      	cmp	r3, #103	@ 0x67
 8001392:	d002      	beq.n	800139a <HAL_UART_RxCpltCallback+0x6e>
 8001394:	2b73      	cmp	r3, #115	@ 0x73
 8001396:	d004      	beq.n	80013a2 <HAL_UART_RxCpltCallback+0x76>
 8001398:	e007      	b.n	80013aa <HAL_UART_RxCpltCallback+0x7e>
						ucState = _GET;
 800139a:	4b60      	ldr	r3, [pc, #384]	@ (800151c <HAL_UART_RxCpltCallback+0x1f0>)
 800139c:	2232      	movs	r2, #50	@ 0x32
 800139e:	701a      	strb	r2, [r3, #0]
						break;
 80013a0:	e007      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x86>
						ucState = _SET;
 80013a2:	4b5e      	ldr	r3, [pc, #376]	@ (800151c <HAL_UART_RxCpltCallback+0x1f0>)
 80013a4:	2233      	movs	r2, #51	@ 0x33
 80013a6:	701a      	strb	r2, [r3, #0]
						break;
 80013a8:	e003      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x86>
						ucState = _IDDLE;
 80013aa:	4b5c      	ldr	r3, [pc, #368]	@ (800151c <HAL_UART_RxCpltCallback+0x1f0>)
 80013ac:	2230      	movs	r2, #48	@ 0x30
 80013ae:	701a      	strb	r2, [r3, #0]
					break;
 80013b0:	e0ab      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
 80013b2:	e0aa      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
					if ('v' == ucDigit || 'a' == ucDigit || 'b' == ucDigit || 'c' == ucDigit || 'd' == ucDigit || 'e' == ucDigit || 'f' == ucDigit){
 80013b4:	4b58      	ldr	r3, [pc, #352]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b76      	cmp	r3, #118	@ 0x76
 80013ba:	d017      	beq.n	80013ec <HAL_UART_RxCpltCallback+0xc0>
 80013bc:	4b56      	ldr	r3, [pc, #344]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b61      	cmp	r3, #97	@ 0x61
 80013c2:	d013      	beq.n	80013ec <HAL_UART_RxCpltCallback+0xc0>
 80013c4:	4b54      	ldr	r3, [pc, #336]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b62      	cmp	r3, #98	@ 0x62
 80013ca:	d00f      	beq.n	80013ec <HAL_UART_RxCpltCallback+0xc0>
 80013cc:	4b52      	ldr	r3, [pc, #328]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b63      	cmp	r3, #99	@ 0x63
 80013d2:	d00b      	beq.n	80013ec <HAL_UART_RxCpltCallback+0xc0>
 80013d4:	4b50      	ldr	r3, [pc, #320]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b64      	cmp	r3, #100	@ 0x64
 80013da:	d007      	beq.n	80013ec <HAL_UART_RxCpltCallback+0xc0>
 80013dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b65      	cmp	r3, #101	@ 0x65
 80013e2:	d003      	beq.n	80013ec <HAL_UART_RxCpltCallback+0xc0>
 80013e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b66      	cmp	r3, #102	@ 0x66
 80013ea:	d107      	bne.n	80013fc <HAL_UART_RxCpltCallback+0xd0>
					ucParam = ucDigit;
 80013ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001520 <HAL_UART_RxCpltCallback+0x1f4>)
 80013f2:	701a      	strb	r2, [r3, #0]
					ucState = _PARAM;
 80013f4:	4b49      	ldr	r3, [pc, #292]	@ (800151c <HAL_UART_RxCpltCallback+0x1f0>)
 80013f6:	2234      	movs	r2, #52	@ 0x34
 80013f8:	701a      	strb	r2, [r3, #0]
					break;
 80013fa:	e086      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
					ucState = _IDDLE;
 80013fc:	4b47      	ldr	r3, [pc, #284]	@ (800151c <HAL_UART_RxCpltCallback+0x1f0>)
 80013fe:	2230      	movs	r2, #48	@ 0x30
 8001400:	701a      	strb	r2, [r3, #0]
					break;
 8001402:	e082      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
					if ('a' == ucDigit || 'b' == ucDigit || 'c' == ucDigit || 'd' == ucDigit || 'e' == ucDigit || 'f' == ucDigit){
 8001404:	4b44      	ldr	r3, [pc, #272]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b61      	cmp	r3, #97	@ 0x61
 800140a:	d013      	beq.n	8001434 <HAL_UART_RxCpltCallback+0x108>
 800140c:	4b42      	ldr	r3, [pc, #264]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b62      	cmp	r3, #98	@ 0x62
 8001412:	d00f      	beq.n	8001434 <HAL_UART_RxCpltCallback+0x108>
 8001414:	4b40      	ldr	r3, [pc, #256]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b63      	cmp	r3, #99	@ 0x63
 800141a:	d00b      	beq.n	8001434 <HAL_UART_RxCpltCallback+0x108>
 800141c:	4b3e      	ldr	r3, [pc, #248]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b64      	cmp	r3, #100	@ 0x64
 8001422:	d007      	beq.n	8001434 <HAL_UART_RxCpltCallback+0x108>
 8001424:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b65      	cmp	r3, #101	@ 0x65
 800142a:	d003      	beq.n	8001434 <HAL_UART_RxCpltCallback+0x108>
 800142c:	4b3a      	ldr	r3, [pc, #232]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b66      	cmp	r3, #102	@ 0x66
 8001432:	d10a      	bne.n	800144a <HAL_UART_RxCpltCallback+0x11e>
					ucParam = ucDigit;
 8001434:	4b38      	ldr	r3, [pc, #224]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	4b39      	ldr	r3, [pc, #228]	@ (8001520 <HAL_UART_RxCpltCallback+0x1f4>)
 800143a:	701a      	strb	r2, [r3, #0]
					ucValueCount = 0;
 800143c:	4b39      	ldr	r3, [pc, #228]	@ (8001524 <HAL_UART_RxCpltCallback+0x1f8>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
					ucState = _VALUE;
 8001442:	4b36      	ldr	r3, [pc, #216]	@ (800151c <HAL_UART_RxCpltCallback+0x1f0>)
 8001444:	2235      	movs	r2, #53	@ 0x35
 8001446:	701a      	strb	r2, [r3, #0]
					break;
 8001448:	e05f      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
					ucState = _IDDLE;
 800144a:	4b34      	ldr	r3, [pc, #208]	@ (800151c <HAL_UART_RxCpltCallback+0x1f0>)
 800144c:	2230      	movs	r2, #48	@ 0x30
 800144e:	701a      	strb	r2, [r3, #0]
					break;
 8001450:	e05b      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
					if (';' == ucDigit){
 8001452:	4b31      	ldr	r3, [pc, #196]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b3b      	cmp	r3, #59	@ 0x3b
 8001458:	d104      	bne.n	8001464 <HAL_UART_RxCpltCallback+0x138>
						vCommStateMachineReturnParam(ucParam);
 800145a:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <HAL_UART_RxCpltCallback+0x1f4>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f864 	bl	800152c <vCommStateMachineReturnParam>
					ucState = _IDDLE;
 8001464:	4b2d      	ldr	r3, [pc, #180]	@ (800151c <HAL_UART_RxCpltCallback+0x1f0>)
 8001466:	2230      	movs	r2, #48	@ 0x30
 8001468:	701a      	strb	r2, [r3, #0]
					break;
 800146a:	e04e      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
					if ((ucDigit >= '0' && ucDigit <= '9') || ',' == ucDigit){
 800146c:	4b2a      	ldr	r3, [pc, #168]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b2f      	cmp	r3, #47	@ 0x2f
 8001472:	d903      	bls.n	800147c <HAL_UART_RxCpltCallback+0x150>
 8001474:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b39      	cmp	r3, #57	@ 0x39
 800147a:	d903      	bls.n	8001484 <HAL_UART_RxCpltCallback+0x158>
 800147c:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b2c      	cmp	r3, #44	@ 0x2c
 8001482:	d10f      	bne.n	80014a4 <HAL_UART_RxCpltCallback+0x178>
						if (ucValueCount < MAX_VALUE_LENGTH){
 8001484:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <HAL_UART_RxCpltCallback+0x1f8>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b06      	cmp	r3, #6
 800148a:	d821      	bhi.n	80014d0 <HAL_UART_RxCpltCallback+0x1a4>
							ucValue[ucValueCount++] = ucDigit;
 800148c:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <HAL_UART_RxCpltCallback+0x1f8>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	b2d1      	uxtb	r1, r2
 8001494:	4a23      	ldr	r2, [pc, #140]	@ (8001524 <HAL_UART_RxCpltCallback+0x1f8>)
 8001496:	7011      	strb	r1, [r2, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 800149c:	7819      	ldrb	r1, [r3, #0]
 800149e:	4b22      	ldr	r3, [pc, #136]	@ (8001528 <HAL_UART_RxCpltCallback+0x1fc>)
 80014a0:	5499      	strb	r1, [r3, r2]
						if (ucValueCount < MAX_VALUE_LENGTH){
 80014a2:	e015      	b.n	80014d0 <HAL_UART_RxCpltCallback+0x1a4>
						if (';' == ucDigit){
 80014a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b3b      	cmp	r3, #59	@ 0x3b
 80014aa:	d10d      	bne.n	80014c8 <HAL_UART_RxCpltCallback+0x19c>
							ucValue[ucValueCount] = '\0';
 80014ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <HAL_UART_RxCpltCallback+0x1f8>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <HAL_UART_RxCpltCallback+0x1fc>)
 80014b4:	2100      	movs	r1, #0
 80014b6:	5499      	strb	r1, [r3, r2]
							vCommStateMachineSetParam(ucParam, ucValue);
 80014b8:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <HAL_UART_RxCpltCallback+0x1f4>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001528 <HAL_UART_RxCpltCallback+0x1fc>)
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f8ee 	bl	80016a4 <vCommStateMachineSetParam>
						ucState = _IDDLE;
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <HAL_UART_RxCpltCallback+0x1f0>)
 80014ca:	2230      	movs	r2, #48	@ 0x30
 80014cc:	701a      	strb	r2, [r3, #0]
					break;
 80014ce:	e01c      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
 80014d0:	e01b      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
		        if(ucDigit == '1')
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b31      	cmp	r3, #49	@ 0x31
 80014d8:	d102      	bne.n	80014e0 <HAL_UART_RxCpltCallback+0x1b4>
				    vBleCmdMotorForward();
 80014da:	f7ff feb9 	bl	8001250 <vBleCmdMotorForward>
}
 80014de:	e014      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
				else if (ucDigit == '4')
 80014e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b34      	cmp	r3, #52	@ 0x34
 80014e6:	d102      	bne.n	80014ee <HAL_UART_RxCpltCallback+0x1c2>
					vBleCmdMotorLeftward();
 80014e8:	f7ff fec8 	bl	800127c <vBleCmdMotorLeftward>
}
 80014ec:	e00d      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
				else if (ucDigit == '3')
 80014ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b33      	cmp	r3, #51	@ 0x33
 80014f4:	d102      	bne.n	80014fc <HAL_UART_RxCpltCallback+0x1d0>
					vBleCmdMotorRightward();
 80014f6:	f7ff fed7 	bl	80012a8 <vBleCmdMotorRightward>
}
 80014fa:	e006      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
				else if (ucDigit == '2')
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_UART_RxCpltCallback+0x1ec>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b32      	cmp	r3, #50	@ 0x32
 8001502:	d102      	bne.n	800150a <HAL_UART_RxCpltCallback+0x1de>
					vBleCmdMotorBackward();
 8001504:	f7ff fee6 	bl	80012d4 <vBleCmdMotorBackward>
}
 8001508:	e7ff      	b.n	800150a <HAL_UART_RxCpltCallback+0x1de>
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000238 	.word	0x20000238
 8001518:	20000235 	.word	0x20000235
 800151c:	20000000 	.word	0x20000000
 8001520:	2000023c 	.word	0x2000023c
 8001524:	20000234 	.word	0x20000234
 8001528:	2000022c 	.word	0x2000022c

0800152c <vCommStateMachineReturnParam>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	Returns the parameter indicated by the ucParam variable
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucParam
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineReturnParam(unsigned char ucParam){
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
	unsigned char ucValue[MAX_VALUE_LENGTH];
	char * pMessage;
    switch (ucParam){
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	3b61      	subs	r3, #97	@ 0x61
 800153a:	2b15      	cmp	r3, #21
 800153c:	f200 809d 	bhi.w	800167a <vCommStateMachineReturnParam+0x14e>
 8001540:	a201      	add	r2, pc, #4	@ (adr r2, 8001548 <vCommStateMachineReturnParam+0x1c>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	080015bb 	.word	0x080015bb
 800154c:	080015db 	.word	0x080015db
 8001550:	080015fb 	.word	0x080015fb
 8001554:	0800161b 	.word	0x0800161b
 8001558:	0800163b 	.word	0x0800163b
 800155c:	0800165b 	.word	0x0800165b
 8001560:	0800167b 	.word	0x0800167b
 8001564:	0800167b 	.word	0x0800167b
 8001568:	0800167b 	.word	0x0800167b
 800156c:	0800167b 	.word	0x0800167b
 8001570:	0800167b 	.word	0x0800167b
 8001574:	0800167b 	.word	0x0800167b
 8001578:	0800167b 	.word	0x0800167b
 800157c:	0800167b 	.word	0x0800167b
 8001580:	0800167b 	.word	0x0800167b
 8001584:	0800167b 	.word	0x0800167b
 8001588:	0800167b 	.word	0x0800167b
 800158c:	0800167b 	.word	0x0800167b
 8001590:	0800167b 	.word	0x0800167b
 8001594:	0800167b 	.word	0x0800167b
 8001598:	0800167b 	.word	0x0800167b
 800159c:	080015a1 	.word	0x080015a1
        case 'v': //temp
        	pMessage = pCommunicationFloatToString(fSpeed, 2);
 80015a0:	4b38      	ldr	r3, [pc, #224]	@ (8001684 <vCommStateMachineReturnParam+0x158>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	2002      	movs	r0, #2
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	f000 f9a8 	bl	8001900 <pCommunicationFloatToString>
 80015b0:	6178      	str	r0, [r7, #20]
        	vCommunicationSendString(pMessage);
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f000 fa54 	bl	8001a60 <vCommunicationSendString>
//        	vCommStateMachineFloatToString(fSpeed, 5, ucValue);
            break;
 80015b8:	e05f      	b.n	800167a <vCommStateMachineReturnParam+0x14e>
        case 'a': //kp left
        	pMessage = pCommunicationFloatToString(fLeftMotorKp, 4);
 80015ba:	4b33      	ldr	r3, [pc, #204]	@ (8001688 <vCommStateMachineReturnParam+0x15c>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	2004      	movs	r0, #4
 80015c2:	eeb0 0a67 	vmov.f32	s0, s15
 80015c6:	f000 f99b 	bl	8001900 <pCommunicationFloatToString>
 80015ca:	6178      	str	r0, [r7, #20]
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 80015cc:	4b2f      	ldr	r3, [pc, #188]	@ (800168c <vCommStateMachineReturnParam+0x160>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6979      	ldr	r1, [r7, #20]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f92e 	bl	8001834 <vCommStateMachineSendMessage>
            break;
 80015d8:	e04f      	b.n	800167a <vCommStateMachineReturnParam+0x14e>
        case 'b': //ki left
        	pMessage = pCommunicationFloatToString(fLeftMotorKi, 4);
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <vCommStateMachineReturnParam+0x164>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	2004      	movs	r0, #4
 80015e2:	eeb0 0a67 	vmov.f32	s0, s15
 80015e6:	f000 f98b 	bl	8001900 <pCommunicationFloatToString>
 80015ea:	6178      	str	r0, [r7, #20]
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 80015ec:	4b27      	ldr	r3, [pc, #156]	@ (800168c <vCommStateMachineReturnParam+0x160>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6979      	ldr	r1, [r7, #20]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f91e 	bl	8001834 <vCommStateMachineSendMessage>
            break;
 80015f8:	e03f      	b.n	800167a <vCommStateMachineReturnParam+0x14e>
        case 'c': //kp right
        	pMessage = pCommunicationFloatToString(fRightMotorKp, 4);
 80015fa:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <vCommStateMachineReturnParam+0x168>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	2004      	movs	r0, #4
 8001602:	eeb0 0a67 	vmov.f32	s0, s15
 8001606:	f000 f97b 	bl	8001900 <pCommunicationFloatToString>
 800160a:	6178      	str	r0, [r7, #20]
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 800160c:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <vCommStateMachineReturnParam+0x160>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6979      	ldr	r1, [r7, #20]
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f90e 	bl	8001834 <vCommStateMachineSendMessage>
            break;
 8001618:	e02f      	b.n	800167a <vCommStateMachineReturnParam+0x14e>
        case 'd': //ki left
        	pMessage = pCommunicationFloatToString(fRightMotorKi, 4);
 800161a:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <vCommStateMachineReturnParam+0x16c>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	2004      	movs	r0, #4
 8001622:	eeb0 0a67 	vmov.f32	s0, s15
 8001626:	f000 f96b 	bl	8001900 <pCommunicationFloatToString>
 800162a:	6178      	str	r0, [r7, #20]
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 800162c:	4b17      	ldr	r3, [pc, #92]	@ (800168c <vCommStateMachineReturnParam+0x160>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6979      	ldr	r1, [r7, #20]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f8fe 	bl	8001834 <vCommStateMachineSendMessage>
            break;
 8001638:	e01f      	b.n	800167a <vCommStateMachineReturnParam+0x14e>
        case 'e': //setpoint left
        	pMessage = pCommunicationFloatToString(fSetPoint_left, 2);
 800163a:	4b18      	ldr	r3, [pc, #96]	@ (800169c <vCommStateMachineReturnParam+0x170>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	2002      	movs	r0, #2
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	f000 f95b 	bl	8001900 <pCommunicationFloatToString>
 800164a:	6178      	str	r0, [r7, #20]
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <vCommStateMachineReturnParam+0x160>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6979      	ldr	r1, [r7, #20]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f8ee 	bl	8001834 <vCommStateMachineSendMessage>
            break;
 8001658:	e00f      	b.n	800167a <vCommStateMachineReturnParam+0x14e>
        case 'f': //setpoint right
        	pMessage = pCommunicationFloatToString(fSetPoint_right, 2);
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <vCommStateMachineReturnParam+0x174>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	2002      	movs	r0, #2
 8001662:	eeb0 0a67 	vmov.f32	s0, s15
 8001666:	f000 f94b 	bl	8001900 <pCommunicationFloatToString>
 800166a:	6178      	str	r0, [r7, #20]
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 800166c:	4b07      	ldr	r3, [pc, #28]	@ (800168c <vCommStateMachineReturnParam+0x160>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6979      	ldr	r1, [r7, #20]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f8de 	bl	8001834 <vCommStateMachineSendMessage>
            break;
 8001678:	bf00      	nop

    }
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000790 	.word	0x20000790
 8001688:	20000024 	.word	0x20000024
 800168c:	20000238 	.word	0x20000238
 8001690:	20000028 	.word	0x20000028
 8001694:	2000002c 	.word	0x2000002c
 8001698:	20000030 	.word	0x20000030
 800169c:	20000034 	.word	0x20000034
 80016a0:	20000038 	.word	0x20000038

080016a4 <vCommStateMachineSetParam>:
//	 Description	:	set the parameter indicated by the ucParam by ucValue
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucParam
//		                ucValue
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineSetParam(unsigned char ucParam, unsigned char ucValue){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	460a      	mov	r2, r1
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	4613      	mov	r3, r2
 80016b2:	71bb      	strb	r3, [r7, #6]
	float fValue;
    switch (ucParam){
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	3b61      	subs	r3, #97	@ 0x61
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d86f      	bhi.n	800179c <vCommStateMachineSetParam+0xf8>
 80016bc:	a201      	add	r2, pc, #4	@ (adr r2, 80016c4 <vCommStateMachineSetParam+0x20>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	080016dd 	.word	0x080016dd
 80016c8:	080016f1 	.word	0x080016f1
 80016cc:	08001705 	.word	0x08001705
 80016d0:	08001719 	.word	0x08001719
 80016d4:	0800172d 	.word	0x0800172d
 80016d8:	08001765 	.word	0x08001765
        case 'a': //left kp
        	fLeftMotorKp = fCommStateMachineStringToFloat(&ucValue);
 80016dc:	1dbb      	adds	r3, r7, #6
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f86e 	bl	80017c0 <fCommStateMachineStringToFloat>
 80016e4:	eef0 7a40 	vmov.f32	s15, s0
 80016e8:	4b2e      	ldr	r3, [pc, #184]	@ (80017a4 <vCommStateMachineSetParam+0x100>)
 80016ea:	edc3 7a00 	vstr	s15, [r3]
            break;
 80016ee:	e055      	b.n	800179c <vCommStateMachineSetParam+0xf8>
        case 'b': //left ki
        	fLeftMotorKi = fCommStateMachineStringToFloat(&ucValue);
 80016f0:	1dbb      	adds	r3, r7, #6
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f864 	bl	80017c0 <fCommStateMachineStringToFloat>
 80016f8:	eef0 7a40 	vmov.f32	s15, s0
 80016fc:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <vCommStateMachineSetParam+0x104>)
 80016fe:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001702:	e04b      	b.n	800179c <vCommStateMachineSetParam+0xf8>
        case 'c': //right kp
    		fRightMotorKp = fCommStateMachineStringToFloat(&ucValue);
 8001704:	1dbb      	adds	r3, r7, #6
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f85a 	bl	80017c0 <fCommStateMachineStringToFloat>
 800170c:	eef0 7a40 	vmov.f32	s15, s0
 8001710:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <vCommStateMachineSetParam+0x108>)
 8001712:	edc3 7a00 	vstr	s15, [r3]
        	break;
 8001716:	e041      	b.n	800179c <vCommStateMachineSetParam+0xf8>
        case 'd': //left ki
        	fRightMotorKi=fCommStateMachineStringToFloat(&ucValue);
 8001718:	1dbb      	adds	r3, r7, #6
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f850 	bl	80017c0 <fCommStateMachineStringToFloat>
 8001720:	eef0 7a40 	vmov.f32	s15, s0
 8001724:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <vCommStateMachineSetParam+0x10c>)
 8001726:	edc3 7a00 	vstr	s15, [r3]
            break;
 800172a:	e037      	b.n	800179c <vCommStateMachineSetParam+0xf8>
        case 'e': //set left
        	fValue = fCommStateMachineStringToFloat(&ucValue);
 800172c:	1dbb      	adds	r3, r7, #6
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f846 	bl	80017c0 <fCommStateMachineStringToFloat>
 8001734:	ed87 0a03 	vstr	s0, [r7, #12]
        	if (fValue >= 0 && fValue<= 700){
 8001738:	edd7 7a03 	vldr	s15, [r7, #12]
 800173c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001744:	da00      	bge.n	8001748 <vCommStateMachineSetParam+0xa4>
				fSetPoint_left=fValue;
        	}
            break;
 8001746:	e029      	b.n	800179c <vCommStateMachineSetParam+0xf8>
        	if (fValue >= 0 && fValue<= 700){
 8001748:	edd7 7a03 	vldr	s15, [r7, #12]
 800174c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80017b4 <vCommStateMachineSetParam+0x110>
 8001750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001758:	d900      	bls.n	800175c <vCommStateMachineSetParam+0xb8>
            break;
 800175a:	e01f      	b.n	800179c <vCommStateMachineSetParam+0xf8>
				fSetPoint_left=fValue;
 800175c:	4a16      	ldr	r2, [pc, #88]	@ (80017b8 <vCommStateMachineSetParam+0x114>)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6013      	str	r3, [r2, #0]
            break;
 8001762:	e01b      	b.n	800179c <vCommStateMachineSetParam+0xf8>
        case 'f': //set right
        	fValue = fCommStateMachineStringToFloat(&ucValue);
 8001764:	1dbb      	adds	r3, r7, #6
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f82a 	bl	80017c0 <fCommStateMachineStringToFloat>
 800176c:	ed87 0a03 	vstr	s0, [r7, #12]
        	if (fValue >= 0 && fValue<= 700){
 8001770:	edd7 7a03 	vldr	s15, [r7, #12]
 8001774:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177c:	da00      	bge.n	8001780 <vCommStateMachineSetParam+0xdc>
				fSetPoint_right=fValue;
        	}
            break;
 800177e:	e00c      	b.n	800179a <vCommStateMachineSetParam+0xf6>
        	if (fValue >= 0 && fValue<= 700){
 8001780:	edd7 7a03 	vldr	s15, [r7, #12]
 8001784:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80017b4 <vCommStateMachineSetParam+0x110>
 8001788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800178c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001790:	d900      	bls.n	8001794 <vCommStateMachineSetParam+0xf0>
            break;
 8001792:	e002      	b.n	800179a <vCommStateMachineSetParam+0xf6>
				fSetPoint_right=fValue;
 8001794:	4a09      	ldr	r2, [pc, #36]	@ (80017bc <vCommStateMachineSetParam+0x118>)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6013      	str	r3, [r2, #0]
            break;
 800179a:	bf00      	nop
    }
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000024 	.word	0x20000024
 80017a8:	20000028 	.word	0x20000028
 80017ac:	2000002c 	.word	0x2000002c
 80017b0:	20000030 	.word	0x20000030
 80017b4:	442f0000 	.word	0x442f0000
 80017b8:	20000034 	.word	0x20000034
 80017bc:	20000038 	.word	0x20000038

080017c0 <fCommStateMachineStringToFloat>:
//	 Description	:	Turns Strings to float using atof functon and set a "." instead a ","
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	unsigned char * ucInputNumber
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//float fCommunicationStateMachineStringToFloat(unsigned char * ucValue){
float fCommStateMachineStringToFloat(){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
	float fInputNumber=0;
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	603b      	str	r3, [r7, #0]
	int iPos=0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
	while (iPos >= 0){
 80017d0:	e017      	b.n	8001802 <fCommStateMachineStringToFloat+0x42>
		if ('\0'!=ucValue[iPos]){
 80017d2:	4a17      	ldr	r2, [pc, #92]	@ (8001830 <fCommStateMachineStringToFloat+0x70>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00e      	beq.n	80017fc <fCommStateMachineStringToFloat+0x3c>
			if (ucValue[iPos] == ','){
 80017de:	4a14      	ldr	r2, [pc, #80]	@ (8001830 <fCommStateMachineStringToFloat+0x70>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b2c      	cmp	r3, #44	@ 0x2c
 80017e8:	d104      	bne.n	80017f4 <fCommStateMachineStringToFloat+0x34>
				ucValue[iPos] = '.';
 80017ea:	4a11      	ldr	r2, [pc, #68]	@ (8001830 <fCommStateMachineStringToFloat+0x70>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	222e      	movs	r2, #46	@ 0x2e
 80017f2:	701a      	strb	r2, [r3, #0]
			}
			iPos++;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3301      	adds	r3, #1
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	e002      	b.n	8001802 <fCommStateMachineStringToFloat+0x42>
		}
		else{
			iPos = -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001800:	607b      	str	r3, [r7, #4]
	while (iPos >= 0){
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	dae4      	bge.n	80017d2 <fCommStateMachineStringToFloat+0x12>
		}
	}
	fInputNumber = atof (ucValue);
 8001808:	4809      	ldr	r0, [pc, #36]	@ (8001830 <fCommStateMachineStringToFloat+0x70>)
 800180a:	f00a fd8f 	bl	800c32c <atof>
 800180e:	ec53 2b10 	vmov	r2, r3, d0
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff fa0f 	bl	8000c38 <__aeabi_d2f>
 800181a:	4603      	mov	r3, r0
 800181c:	603b      	str	r3, [r7, #0]
	return fInputNumber;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	ee07 3a90 	vmov	s15, r3
}
 8001824:	eeb0 0a67 	vmov.f32	s0, s15
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000022c 	.word	0x2000022c

08001834 <vCommStateMachineSendMessage>:
//	 Description	:	Send message to putty from HAL_UART_Transmit
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	UART_HandleTypeDef * huart
//		                unsigned char* ucMessage
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineSendMessage (UART_HandleTypeDef * huart, unsigned char* ucMessage){
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
	if(huart == pBluetoothControllerUART){
 800183e:	4b1c      	ldr	r3, [pc, #112]	@ (80018b0 <vCommStateMachineSendMessage+0x7c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	d12f      	bne.n	80018a8 <vCommStateMachineSendMessage+0x74>
		int iPos = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
		while(iPos >= 0 && iPos < _MAX_NUMBER_OF_CHARS){
 800184c:	e026      	b.n	800189c <vCommStateMachineSendMessage+0x68>
			if(ucMessage[iPos] =='\000'){
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	4413      	add	r3, r2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d103      	bne.n	8001862 <vCommStateMachineSendMessage+0x2e>
				iPos = -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e01c      	b.n	800189c <vCommStateMachineSendMessage+0x68>
			}
			else if(ucMessage[iPos] =='\n'){
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	4413      	add	r3, r2
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b0a      	cmp	r3, #10
 800186c:	d10b      	bne.n	8001886 <vCommStateMachineSendMessage+0x52>
				HAL_UART_Transmit(huart, &ucMessage[iPos], 1, 100);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	18d1      	adds	r1, r2, r3
 8001874:	2364      	movs	r3, #100	@ 0x64
 8001876:	2201      	movs	r2, #1
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f008 fa23 	bl	8009cc4 <HAL_UART_Transmit>
				iPos = -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e00a      	b.n	800189c <vCommStateMachineSendMessage+0x68>
			}
			else{
				HAL_UART_Transmit(huart, &ucMessage[iPos], 1, 100);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	18d1      	adds	r1, r2, r3
 800188c:	2364      	movs	r3, #100	@ 0x64
 800188e:	2201      	movs	r2, #1
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f008 fa17 	bl	8009cc4 <HAL_UART_Transmit>
				iPos ++;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3301      	adds	r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
		while(iPos >= 0 && iPos < _MAX_NUMBER_OF_CHARS){
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db02      	blt.n	80018a8 <vCommStateMachineSendMessage+0x74>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b63      	cmp	r3, #99	@ 0x63
 80018a6:	ddd2      	ble.n	800184e <vCommStateMachineSendMessage+0x1a>
			}
		}
	}
}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000238 	.word	0x20000238

080018b4 <vCommunicationInit>:
//
// INPUT PARAMS: n/a
//
// OUTPUT PARAMS: n/a
// ********************************************** //
void vCommunicationInit(UART_HandleTypeDef * huart) {
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	pUART = huart;
 80018bc:	4a0c      	ldr	r2, [pc, #48]	@ (80018f0 <vCommunicationInit+0x3c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 10; i++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	e007      	b.n	80018d8 <vCommunicationInit+0x24>
		cNumeroString[i] = 0;
 80018c8:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <vCommunicationInit+0x40>)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4413      	add	r3, r2
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3301      	adds	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b09      	cmp	r3, #9
 80018dc:	ddf4      	ble.n	80018c8 <vCommunicationInit+0x14>

	ucInputChar = 0;
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <vCommunicationInit+0x44>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	200002b0 	.word	0x200002b0
 80018f4:	20000240 	.word	0x20000240
 80018f8:	2000023d 	.word	0x2000023d
 80018fc:	00000000 	.word	0x00000000

08001900 <pCommunicationFloatToString>:
// INPUT PARAMS: num - numero a ser convertido
//               nCasasDec - numero de casas decimais a serem consideradas
//
// OUTPUT PARAMS: char* - string contendo o num
// ********************************************** //
char* pCommunicationFloatToString(float num, int nCasasDec) { // n casas decimais // para numeros < 1
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	@ 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	ed87 0a01 	vstr	s0, [r7, #4]
 800190a:	6038      	str	r0, [r7, #0]
	float fAux = num;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
	// Utilizado na quantidade de casas que a string vai ter
	int iN = nCasasDec;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	623b      	str	r3, [r7, #32]
	int iPos = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
	// "mapping" para facilitar na adicao de char na string
	char pNumberToChar[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8001918:	4a4f      	ldr	r2, [pc, #316]	@ (8001a58 <pCommunicationFloatToString+0x158>)
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001920:	c303      	stmia	r3!, {r0, r1}
 8001922:	801a      	strh	r2, [r3, #0]

	// Limpa a string global
	for (int i = 0; i < 100; i++)
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	e007      	b.n	800193a <pCommunicationFloatToString+0x3a>
		pOutputString[i] = 0;
 800192a:	4a4c      	ldr	r2, [pc, #304]	@ (8001a5c <pCommunicationFloatToString+0x15c>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	4413      	add	r3, r2
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	3301      	adds	r3, #1
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b63      	cmp	r3, #99	@ 0x63
 800193e:	ddf4      	ble.n	800192a <pCommunicationFloatToString+0x2a>

	// Caso float negativo, adiciona '-' na string
	if (fAux < 0) {
 8001940:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001944:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194c:	d50d      	bpl.n	800196a <pCommunicationFloatToString+0x6a>
		fAux = fAux*-1;
 800194e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001952:	eef1 7a67 	vneg.f32	s15, s15
 8001956:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		pOutputString[iPos] = '-';
 800195a:	4a40      	ldr	r2, [pc, #256]	@ (8001a5c <pCommunicationFloatToString+0x15c>)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	4413      	add	r3, r2
 8001960:	222d      	movs	r2, #45	@ 0x2d
 8001962:	701a      	strb	r2, [r3, #0]
		iPos++;
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	3301      	adds	r3, #1
 8001968:	61fb      	str	r3, [r7, #28]
	}

	// Caso menor que 1, adiciona 0 na string
	if (fAux < 1) {
 800196a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800196e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	d507      	bpl.n	800198c <pCommunicationFloatToString+0x8c>
		pOutputString[iPos] = '0';
 800197c:	4a37      	ldr	r2, [pc, #220]	@ (8001a5c <pCommunicationFloatToString+0x15c>)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	2230      	movs	r2, #48	@ 0x30
 8001984:	701a      	strb	r2, [r3, #0]
		iPos++;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3301      	adds	r3, #1
 800198a:	61fb      	str	r3, [r7, #28]
	}

	// Move a virgula do numero ate que fique menor que 1
	while (fAux >= 1) {
 800198c:	e00a      	b.n	80019a4 <pCommunicationFloatToString+0xa4>
		fAux = fAux/10;
 800198e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001992:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		iN++;
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	3301      	adds	r3, #1
 80019a2:	623b      	str	r3, [r7, #32]
	while (fAux >= 1) {
 80019a4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80019a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	daeb      	bge.n	800198e <pCommunicationFloatToString+0x8e>
	}

	// Enquanto ainda nao tiver preenchido o numero de casas desejadas
	while (iN > 0) {
 80019b6:	e040      	b.n	8001a3a <pCommunicationFloatToString+0x13a>
		fAux = fAux*10;
 80019b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80019bc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80019c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		// Seleciona o numero da enesima posicao
		int iNumber = floor(fmod(fAux, 10));
 80019c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019ca:	f7fe fde5 	bl	8000598 <__aeabi_f2d>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8001a50 <pCommunicationFloatToString+0x150>
 80019d6:	ec43 2b10 	vmov	d0, r2, r3
 80019da:	f00d fc69 	bl	800f2b0 <fmod>
 80019de:	eeb0 7a40 	vmov.f32	s14, s0
 80019e2:	eef0 7a60 	vmov.f32	s15, s1
 80019e6:	eeb0 0a47 	vmov.f32	s0, s14
 80019ea:	eef0 0a67 	vmov.f32	s1, s15
 80019ee:	f00d fc8f 	bl	800f310 <floor>
 80019f2:	ec53 2b10 	vmov	r2, r3, d0
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	f7ff f8d5 	bl	8000ba8 <__aeabi_d2iz>
 80019fe:	4603      	mov	r3, r0
 8001a00:	617b      	str	r3, [r7, #20]
		// Adiciona virgula na posicao correta
		if (iN == nCasasDec) {
 8001a02:	6a3a      	ldr	r2, [r7, #32]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d107      	bne.n	8001a1a <pCommunicationFloatToString+0x11a>
			pOutputString[iPos] = ',';
 8001a0a:	4a14      	ldr	r2, [pc, #80]	@ (8001a5c <pCommunicationFloatToString+0x15c>)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	4413      	add	r3, r2
 8001a10:	222c      	movs	r2, #44	@ 0x2c
 8001a12:	701a      	strb	r2, [r3, #0]
			iPos++;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	3301      	adds	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]
		}

		// Adiciona char igual ao numero, na string de retorno
		pOutputString[iPos] = pNumberToChar[iNumber];
 8001a1a:	f107 0208 	add.w	r2, r7, #8
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	4413      	add	r3, r2
 8001a22:	7819      	ldrb	r1, [r3, #0]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <pCommunicationFloatToString+0x15c>)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	4413      	add	r3, r2
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
		iPos++;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3301      	adds	r3, #1
 8001a32:	61fb      	str	r3, [r7, #28]
		iN--;
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	623b      	str	r3, [r7, #32]
	while (iN > 0) {
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	dcbb      	bgt.n	80019b8 <pCommunicationFloatToString+0xb8>
	}

	return &pOutputString;
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <pCommunicationFloatToString+0x15c>)
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3728      	adds	r7, #40	@ 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	f3af 8000 	nop.w
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40240000 	.word	0x40240000
 8001a58:	0800f638 	.word	0x0800f638
 8001a5c:	2000024c 	.word	0x2000024c

08001a60 <vCommunicationSendString>:
//
// INPUT PARAMS: char* - string a ser enviada
//
// OUTPUT PARAMS: n/a
// ********************************************** //
void vCommunicationSendString(char* str) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(str); i++) {
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e00b      	b.n	8001a86 <vCommunicationSendString+0x26>
//	  HAL_UART_Transmit(&huart3, &str[i], 1, 1000);
	  HAL_UART_Transmit_IT(pUART, &str[i], 1);
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <vCommunicationSendString+0x40>)
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f008 f9b0 	bl	8009de0 <HAL_UART_Transmit_IT>
	for (int i = 0; i < strlen(str); i++) {
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3301      	adds	r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7fe fbca 	bl	8000220 <strlen>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8ec      	bhi.n	8001a6e <vCommunicationSendString+0xe>
	}
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200002b0 	.word	0x200002b0

08001aa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001aaa:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <MX_DMA_Init+0x60>)
 8001aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aae:	4a15      	ldr	r2, [pc, #84]	@ (8001b04 <MX_DMA_Init+0x60>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ab6:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <MX_DMA_Init+0x60>)
 8001ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ac2:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <MX_DMA_Init+0x60>)
 8001ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8001b04 <MX_DMA_Init+0x60>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <MX_DMA_Init+0x60>)
 8001ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2105      	movs	r1, #5
 8001ade:	200d      	movs	r0, #13
 8001ae0:	f002 fcf5 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ae4:	200d      	movs	r0, #13
 8001ae6:	f002 fd0c 	bl	8004502 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2105      	movs	r1, #5
 8001aee:	200e      	movs	r0, #14
 8001af0:	f002 fced 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001af4:	200e      	movs	r0, #14
 8001af6:	f002 fd04 	bl	8004502 <HAL_NVIC_EnableIRQ>

}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000

08001b08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	@ 0x28
 8001b0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	4a3a      	ldr	r2, [pc, #232]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2a:	4b38      	ldr	r3, [pc, #224]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b36:	4b35      	ldr	r3, [pc, #212]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	4a34      	ldr	r2, [pc, #208]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001b3c:	f043 0320 	orr.w	r3, r3, #32
 8001b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b42:	4b32      	ldr	r3, [pc, #200]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	4a2e      	ldr	r2, [pc, #184]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	4b29      	ldr	r3, [pc, #164]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	4a28      	ldr	r2, [pc, #160]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b72:	4b26      	ldr	r3, [pc, #152]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Motor_Dir_IN2_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f44f 6142 	mov.w	r1, #3104	@ 0xc20
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b88:	f003 f9a6 	bl	8004ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Esq_IN3_Pin|Motor_Dir_IN1_Pin|Motor_Esq_IN4_Pin, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 5194 	mov.w	r1, #4736	@ 0x1280
 8001b92:	481f      	ldr	r0, [pc, #124]	@ (8001c10 <MX_GPIO_Init+0x108>)
 8001b94:	f003 f9a0 	bl	8004ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4819      	ldr	r0, [pc, #100]	@ (8001c14 <MX_GPIO_Init+0x10c>)
 8001bb0:	f003 f810 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Motor_Dir_IN2_Pin|RED_LED_Pin;
 8001bb4:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8001bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd0:	f003 f800 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN3_Pin|Motor_Dir_IN1_Pin|Motor_Esq_IN4_Pin;
 8001bd4:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8001bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4808      	ldr	r0, [pc, #32]	@ (8001c10 <MX_GPIO_Init+0x108>)
 8001bee:	f002 fff1 	bl	8004bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2103      	movs	r1, #3
 8001bf6:	2028      	movs	r0, #40	@ 0x28
 8001bf8:	f002 fc69 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bfc:	2028      	movs	r0, #40	@ 0x28
 8001bfe:	f002 fc80 	bl	8004502 <HAL_NVIC_EnableIRQ>

}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	@ 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	48000400 	.word	0x48000400
 8001c14:	48000800 	.word	0x48000800

08001c18 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <MX_I2C2_Init+0x74>)
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c90 <MX_I2C2_Init+0x78>)
 8001c20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <MX_I2C2_Init+0x74>)
 8001c24:	4a1b      	ldr	r2, [pc, #108]	@ (8001c94 <MX_I2C2_Init+0x7c>)
 8001c26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <MX_I2C2_Init+0x74>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <MX_I2C2_Init+0x74>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c34:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <MX_I2C2_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c3a:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <MX_I2C2_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c40:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <MX_I2C2_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c46:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <MX_I2C2_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <MX_I2C2_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c52:	480e      	ldr	r0, [pc, #56]	@ (8001c8c <MX_I2C2_Init+0x74>)
 8001c54:	f003 f970 	bl	8004f38 <HAL_I2C_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c5e:	f000 fea6 	bl	80029ae <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c62:	2100      	movs	r1, #0
 8001c64:	4809      	ldr	r0, [pc, #36]	@ (8001c8c <MX_I2C2_Init+0x74>)
 8001c66:	f004 ff77 	bl	8006b58 <HAL_I2CEx_ConfigAnalogFilter>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c70:	f000 fe9d 	bl	80029ae <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c74:	2100      	movs	r1, #0
 8001c76:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <MX_I2C2_Init+0x74>)
 8001c78:	f004 ffb9 	bl	8006bee <HAL_I2CEx_ConfigDigitalFilter>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001c82:	f000 fe94 	bl	80029ae <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200002b4 	.word	0x200002b4
 8001c90:	40005800 	.word	0x40005800
 8001c94:	30a0a7fb 	.word	0x30a0a7fb

08001c98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b0a0      	sub	sp, #128	@ 0x80
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	2254      	movs	r2, #84	@ 0x54
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f00b fa6e 	bl	800d19a <memset>
  if(i2cHandle->Instance==I2C2)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e40 <HAL_I2C_MspInit+0x1a8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	f040 80b6 	bne.w	8001e36 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001cca:	2380      	movs	r3, #128	@ 0x80
 8001ccc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd2:	f107 0318 	add.w	r3, r7, #24
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f005 fdb8 	bl	800784c <HAL_RCCEx_PeriphCLKConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ce2:	f000 fe64 	bl	80029ae <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	4b57      	ldr	r3, [pc, #348]	@ (8001e44 <HAL_I2C_MspInit+0x1ac>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	4a56      	ldr	r2, [pc, #344]	@ (8001e44 <HAL_I2C_MspInit+0x1ac>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf2:	4b54      	ldr	r3, [pc, #336]	@ (8001e44 <HAL_I2C_MspInit+0x1ac>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b51      	ldr	r3, [pc, #324]	@ (8001e44 <HAL_I2C_MspInit+0x1ac>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d02:	4a50      	ldr	r2, [pc, #320]	@ (8001e44 <HAL_I2C_MspInit+0x1ac>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d0a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e44 <HAL_I2C_MspInit+0x1ac>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d16:	2310      	movs	r3, #16
 8001d18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1a:	2312      	movs	r3, #18
 8001d1c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d26:	2304      	movs	r3, #4
 8001d28:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4845      	ldr	r0, [pc, #276]	@ (8001e48 <HAL_I2C_MspInit+0x1b0>)
 8001d32:	f002 ff4f 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3c:	2312      	movs	r3, #18
 8001d3e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d50:	4619      	mov	r1, r3
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d56:	f002 ff3d 	bl	8004bd4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e44 <HAL_I2C_MspInit+0x1ac>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5e:	4a39      	ldr	r2, [pc, #228]	@ (8001e44 <HAL_I2C_MspInit+0x1ac>)
 8001d60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d66:	4b37      	ldr	r3, [pc, #220]	@ (8001e44 <HAL_I2C_MspInit+0x1ac>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel3;
 8001d72:	4b36      	ldr	r3, [pc, #216]	@ (8001e4c <HAL_I2C_MspInit+0x1b4>)
 8001d74:	4a36      	ldr	r2, [pc, #216]	@ (8001e50 <HAL_I2C_MspInit+0x1b8>)
 8001d76:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001d78:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <HAL_I2C_MspInit+0x1b4>)
 8001d7a:	2212      	movs	r2, #18
 8001d7c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d7e:	4b33      	ldr	r3, [pc, #204]	@ (8001e4c <HAL_I2C_MspInit+0x1b4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d84:	4b31      	ldr	r3, [pc, #196]	@ (8001e4c <HAL_I2C_MspInit+0x1b4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d8a:	4b30      	ldr	r3, [pc, #192]	@ (8001e4c <HAL_I2C_MspInit+0x1b4>)
 8001d8c:	2280      	movs	r2, #128	@ 0x80
 8001d8e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d90:	4b2e      	ldr	r3, [pc, #184]	@ (8001e4c <HAL_I2C_MspInit+0x1b4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d96:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <HAL_I2C_MspInit+0x1b4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e4c <HAL_I2C_MspInit+0x1b4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001da2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <HAL_I2C_MspInit+0x1b4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001da8:	4828      	ldr	r0, [pc, #160]	@ (8001e4c <HAL_I2C_MspInit+0x1b4>)
 8001daa:	f002 fbd3 	bl	8004554 <HAL_DMA_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001db4:	f000 fdfb 	bl	80029ae <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a24      	ldr	r2, [pc, #144]	@ (8001e4c <HAL_I2C_MspInit+0x1b4>)
 8001dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dbe:	4a23      	ldr	r2, [pc, #140]	@ (8001e4c <HAL_I2C_MspInit+0x1b4>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8001dc4:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <HAL_I2C_MspInit+0x1bc>)
 8001dc6:	4a24      	ldr	r2, [pc, #144]	@ (8001e58 <HAL_I2C_MspInit+0x1c0>)
 8001dc8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001dca:	4b22      	ldr	r3, [pc, #136]	@ (8001e54 <HAL_I2C_MspInit+0x1bc>)
 8001dcc:	2213      	movs	r2, #19
 8001dce:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dd0:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <HAL_I2C_MspInit+0x1bc>)
 8001dd2:	2210      	movs	r2, #16
 8001dd4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e54 <HAL_I2C_MspInit+0x1bc>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <HAL_I2C_MspInit+0x1bc>)
 8001dde:	2280      	movs	r2, #128	@ 0x80
 8001de0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <HAL_I2C_MspInit+0x1bc>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <HAL_I2C_MspInit+0x1bc>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001dee:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <HAL_I2C_MspInit+0x1bc>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001df4:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <HAL_I2C_MspInit+0x1bc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001dfa:	4816      	ldr	r0, [pc, #88]	@ (8001e54 <HAL_I2C_MspInit+0x1bc>)
 8001dfc:	f002 fbaa 	bl	8004554 <HAL_DMA_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001e06:	f000 fdd2 	bl	80029ae <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a11      	ldr	r2, [pc, #68]	@ (8001e54 <HAL_I2C_MspInit+0x1bc>)
 8001e0e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e10:	4a10      	ldr	r2, [pc, #64]	@ (8001e54 <HAL_I2C_MspInit+0x1bc>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2105      	movs	r1, #5
 8001e1a:	2021      	movs	r0, #33	@ 0x21
 8001e1c:	f002 fb57 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001e20:	2021      	movs	r0, #33	@ 0x21
 8001e22:	f002 fb6e 	bl	8004502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2105      	movs	r1, #5
 8001e2a:	2022      	movs	r0, #34	@ 0x22
 8001e2c:	f002 fb4f 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001e30:	2022      	movs	r0, #34	@ 0x22
 8001e32:	f002 fb66 	bl	8004502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e36:	bf00      	nop
 8001e38:	3780      	adds	r7, #128	@ 0x80
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40005800 	.word	0x40005800
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000800 	.word	0x48000800
 8001e4c:	20000308 	.word	0x20000308
 8001e50:	40020030 	.word	0x40020030
 8001e54:	20000368 	.word	0x20000368
 8001e58:	40020044 	.word	0x40020044

08001e5c <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         0 if success
 */
char lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	4608      	mov	r0, r1
 8001e66:	4611      	mov	r1, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	70fb      	strb	r3, [r7, #3]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	70bb      	strb	r3, [r7, #2]
 8001e72:	4613      	mov	r3, r2
 8001e74:	707b      	strb	r3, [r7, #1]

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001e76:	2300      	movs	r3, #0
 8001e78:	733b      	strb	r3, [r7, #12]
    unsigned short usCont;

    lcdParams.hi2c      = hi2c;
 8001e7a:	4a53      	ldr	r2, [pc, #332]	@ (8001fc8 <lcdInit+0x16c>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b50      	ldr	r3, [pc, #320]	@ (8001fc8 <lcdInit+0x16c>)
 8001e88:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8001e8a:	4a4f      	ldr	r2, [pc, #316]	@ (8001fc8 <lcdInit+0x16c>)
 8001e8c:	78bb      	ldrb	r3, [r7, #2]
 8001e8e:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8001e90:	4a4d      	ldr	r2, [pc, #308]	@ (8001fc8 <lcdInit+0x16c>)
 8001e92:	787b      	ldrb	r3, [r7, #1]
 8001e94:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001e96:	4b4c      	ldr	r3, [pc, #304]	@ (8001fc8 <lcdInit+0x16c>)
 8001e98:	2208      	movs	r2, #8
 8001e9a:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001e9c:	4b4b      	ldr	r3, [pc, #300]	@ (8001fcc <lcdInit+0x170>)
 8001e9e:	2234      	movs	r2, #52	@ 0x34
 8001ea0:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fcc <lcdInit+0x170>)
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	4b49      	ldr	r3, [pc, #292]	@ (8001fcc <lcdInit+0x170>)
 8001ea8:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001eaa:	4b48      	ldr	r3, [pc, #288]	@ (8001fcc <lcdInit+0x170>)
 8001eac:	2230      	movs	r2, #48	@ 0x30
 8001eae:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	737b      	strb	r3, [r7, #13]
 8001eb4:	e02f      	b.n	8001f16 <lcdInit+0xba>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001eb6:	4b44      	ldr	r3, [pc, #272]	@ (8001fc8 <lcdInit+0x16c>)
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	4b43      	ldr	r3, [pc, #268]	@ (8001fc8 <lcdInit+0x16c>)
 8001ebc:	799b      	ldrb	r3, [r3, #6]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	4a42      	ldr	r2, [pc, #264]	@ (8001fcc <lcdInit+0x170>)
 8001ec4:	f003 f8d4 	bl	8005070 <HAL_I2C_Master_Transmit_DMA>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <lcdInit+0x76>
            return -1;
 8001ece:	23ff      	movs	r3, #255	@ 0xff
 8001ed0:	e076      	b.n	8001fc0 <lcdInit+0x164>
        }

        usCont = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	81fb      	strh	r3, [r7, #14]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001ed6:	e009      	b.n	8001eec <lcdInit+0x90>
        	if(usCont++ == LCD_COMM_TIMEOUT)
 8001ed8:	89fb      	ldrh	r3, [r7, #14]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	81fa      	strh	r2, [r7, #14]
 8001ede:	2bc8      	cmp	r3, #200	@ 0xc8
 8001ee0:	d101      	bne.n	8001ee6 <lcdInit+0x8a>
        		return -1;
 8001ee2:	23ff      	movs	r3, #255	@ 0xff
 8001ee4:	e06c      	b.n	8001fc0 <lcdInit+0x164>
        	HAL_Delay(5);
 8001ee6:	2005      	movs	r0, #5
 8001ee8:	f002 f9d0 	bl	800428c <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001eec:	4b36      	ldr	r3, [pc, #216]	@ (8001fc8 <lcdInit+0x16c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 faae 	bl	8005452 <HAL_I2C_GetState>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	d1ed      	bne.n	8001ed8 <lcdInit+0x7c>
        }

        if (i == 2) {
 8001efc:	7b7b      	ldrb	r3, [r7, #13]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d103      	bne.n	8001f0a <lcdInit+0xae>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
        	HAL_Delay(5);
 8001f02:	2005      	movs	r0, #5
 8001f04:	f002 f9c2 	bl	800428c <HAL_Delay>
 8001f08:	e002      	b.n	8001f10 <lcdInit+0xb4>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
        	HAL_Delay(5);
 8001f0a:	2005      	movs	r0, #5
 8001f0c:	f002 f9be 	bl	800428c <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 8001f10:	7b7b      	ldrb	r3, [r7, #13]
 8001f12:	3301      	adds	r3, #1
 8001f14:	737b      	strb	r3, [r7, #13]
 8001f16:	7b7b      	ldrb	r3, [r7, #13]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d9cc      	bls.n	8001eb6 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fcc <lcdInit+0x170>)
 8001f1e:	222c      	movs	r2, #44	@ 0x2c
 8001f20:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001f22:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <lcdInit+0x170>)
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	4b29      	ldr	r3, [pc, #164]	@ (8001fcc <lcdInit+0x170>)
 8001f28:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001f2a:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <lcdInit+0x170>)
 8001f2c:	2228      	movs	r2, #40	@ 0x28
 8001f2e:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001f30:	4b25      	ldr	r3, [pc, #148]	@ (8001fc8 <lcdInit+0x16c>)
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	4b24      	ldr	r3, [pc, #144]	@ (8001fc8 <lcdInit+0x16c>)
 8001f36:	799b      	ldrb	r3, [r3, #6]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	4a23      	ldr	r2, [pc, #140]	@ (8001fcc <lcdInit+0x170>)
 8001f3e:	f003 f897 	bl	8005070 <HAL_I2C_Master_Transmit_DMA>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <lcdInit+0xf0>
        return -1;
 8001f48:	23ff      	movs	r3, #255	@ 0xff
 8001f4a:	e039      	b.n	8001fc0 <lcdInit+0x164>
    }

    usCont = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001f50:	e009      	b.n	8001f66 <lcdInit+0x10a>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001f52:	89fb      	ldrh	r3, [r7, #14]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	81fa      	strh	r2, [r7, #14]
 8001f58:	2bc8      	cmp	r3, #200	@ 0xc8
 8001f5a:	d101      	bne.n	8001f60 <lcdInit+0x104>
    		return -1;
 8001f5c:	23ff      	movs	r3, #255	@ 0xff
 8001f5e:	e02f      	b.n	8001fc0 <lcdInit+0x164>
    	HAL_Delay(5);
 8001f60:	2005      	movs	r0, #5
 8001f62:	f002 f993 	bl	800428c <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001f66:	4b18      	ldr	r3, [pc, #96]	@ (8001fc8 <lcdInit+0x16c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 fa71 	bl	8005452 <HAL_I2C_GetState>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d1ed      	bne.n	8001f52 <lcdInit+0xf6>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001f76:	7b3b      	ldrb	r3, [r7, #12]
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	733b      	strb	r3, [r7, #12]

    if (lcdParams.lines > 1) {
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <lcdInit+0x16c>)
 8001f82:	791b      	ldrb	r3, [r3, #4]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d904      	bls.n	8001f92 <lcdInit+0x136>
        lcdData |= LCD_BIT_2LINE;
 8001f88:	7b3b      	ldrb	r3, [r7, #12]
 8001f8a:	f043 0308 	orr.w	r3, r3, #8
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	733b      	strb	r3, [r7, #12]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	4619      	mov	r1, r3
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f000 f945 	bl	8002228 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f000 f815 	bl	8001fd0 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	2007      	movs	r0, #7
 8001faa:	f000 f811 	bl	8001fd0 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8001fae:	2101      	movs	r1, #1
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f000 f80d 	bl	8001fd0 <lcdCommand>
    lcdCursorHome();
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	2005      	movs	r0, #5
 8001fba:	f000 f809 	bl	8001fd0 <lcdCommand>

    return 0;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200003d0 	.word	0x200003d0
 8001fcc:	200003c8 	.word	0x200003c8

08001fd0 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          0 if success
 */
char lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	460a      	mov	r2, r1
 8001fda:	71fb      	strb	r3, [r7, #7]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001fe4:	79bb      	ldrb	r3, [r7, #6]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d064      	beq.n	80020b4 <lcdCommand+0xe4>
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	f040 80aa 	bne.w	8002144 <lcdCommand+0x174>
        case LCD_PARAM_SET:
            switch (command) {
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	2b07      	cmp	r3, #7
 8001ff6:	d85a      	bhi.n	80020ae <lcdCommand+0xde>
 8001ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8002000 <lcdCommand+0x30>)
 8001ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffe:	bf00      	nop
 8002000:	08002021 	.word	0x08002021
 8002004:	08002051 	.word	0x08002051
 8002008:	08002031 	.word	0x08002031
 800200c:	08002041 	.word	0x08002041
 8002010:	0800206b 	.word	0x0800206b
 8002014:	08002095 	.word	0x08002095
 8002018:	08002085 	.word	0x08002085
 800201c:	0800209f 	.word	0x0800209f
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8002020:	4b5c      	ldr	r3, [pc, #368]	@ (8002194 <lcdCommand+0x1c4>)
 8002022:	7a1b      	ldrb	r3, [r3, #8]
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b5a      	ldr	r3, [pc, #360]	@ (8002194 <lcdCommand+0x1c4>)
 800202c:	721a      	strb	r2, [r3, #8]
                    break;
 800202e:	e040      	b.n	80020b2 <lcdCommand+0xe2>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8002030:	4b58      	ldr	r3, [pc, #352]	@ (8002194 <lcdCommand+0x1c4>)
 8002032:	7a1b      	ldrb	r3, [r3, #8]
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b56      	ldr	r3, [pc, #344]	@ (8002194 <lcdCommand+0x1c4>)
 800203c:	721a      	strb	r2, [r3, #8]
                    break;
 800203e:	e038      	b.n	80020b2 <lcdCommand+0xe2>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8002040:	4b54      	ldr	r3, [pc, #336]	@ (8002194 <lcdCommand+0x1c4>)
 8002042:	7a1b      	ldrb	r3, [r3, #8]
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b52      	ldr	r3, [pc, #328]	@ (8002194 <lcdCommand+0x1c4>)
 800204c:	721a      	strb	r2, [r3, #8]
                    break;
 800204e:	e030      	b.n	80020b2 <lcdCommand+0xe2>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8002054:	f107 030f 	add.w	r3, r7, #15
 8002058:	4619      	mov	r1, r3
 800205a:	2000      	movs	r0, #0
 800205c:	f000 f8e4 	bl	8002228 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(5);
 8002060:	2005      	movs	r0, #5
 8002062:	f002 f913 	bl	800428c <HAL_Delay>
                        return 0;
 8002066:	2300      	movs	r3, #0
 8002068:	e090      	b.n	800218c <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 800206a:	2302      	movs	r3, #2
 800206c:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 800206e:	f107 030f 	add.w	r3, r7, #15
 8002072:	4619      	mov	r1, r3
 8002074:	2000      	movs	r0, #0
 8002076:	f000 f8d7 	bl	8002228 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(5);
 800207a:	2005      	movs	r0, #5
 800207c:	f002 f906 	bl	800428c <HAL_Delay>
                        return 0;
 8002080:	2300      	movs	r3, #0
 8002082:	e083      	b.n	800218c <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8002084:	4b43      	ldr	r3, [pc, #268]	@ (8002194 <lcdCommand+0x1c4>)
 8002086:	7a5b      	ldrb	r3, [r3, #9]
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b41      	ldr	r3, [pc, #260]	@ (8002194 <lcdCommand+0x1c4>)
 8002090:	725a      	strb	r2, [r3, #9]
                    break;
 8002092:	e00e      	b.n	80020b2 <lcdCommand+0xe2>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8002094:	4b3f      	ldr	r3, [pc, #252]	@ (8002194 <lcdCommand+0x1c4>)
 8002096:	7a5a      	ldrb	r2, [r3, #9]
 8002098:	4b3e      	ldr	r3, [pc, #248]	@ (8002194 <lcdCommand+0x1c4>)
 800209a:	725a      	strb	r2, [r3, #9]
                    break;
 800209c:	e009      	b.n	80020b2 <lcdCommand+0xe2>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 800209e:	4b3d      	ldr	r3, [pc, #244]	@ (8002194 <lcdCommand+0x1c4>)
 80020a0:	7a5b      	ldrb	r3, [r3, #9]
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002194 <lcdCommand+0x1c4>)
 80020aa:	725a      	strb	r2, [r3, #9]
                    break;
 80020ac:	e001      	b.n	80020b2 <lcdCommand+0xe2>

                default:
                    return -1;
 80020ae:	23ff      	movs	r3, #255	@ 0xff
 80020b0:	e06c      	b.n	800218c <lcdCommand+0x1bc>
            }

            break;
 80020b2:	e049      	b.n	8002148 <lcdCommand+0x178>

        case LCD_PARAM_UNSET:
            switch (command) {
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	2b07      	cmp	r3, #7
 80020ba:	d840      	bhi.n	800213e <lcdCommand+0x16e>
 80020bc:	a201      	add	r2, pc, #4	@ (adr r2, 80020c4 <lcdCommand+0xf4>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	080020e5 	.word	0x080020e5
 80020c8:	0800213f 	.word	0x0800213f
 80020cc:	080020f5 	.word	0x080020f5
 80020d0:	08002105 	.word	0x08002105
 80020d4:	0800213f 	.word	0x0800213f
 80020d8:	08002125 	.word	0x08002125
 80020dc:	08002115 	.word	0x08002115
 80020e0:	0800212f 	.word	0x0800212f
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 80020e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002194 <lcdCommand+0x1c4>)
 80020e6:	7a1b      	ldrb	r3, [r3, #8]
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4b29      	ldr	r3, [pc, #164]	@ (8002194 <lcdCommand+0x1c4>)
 80020f0:	721a      	strb	r2, [r3, #8]
                    break;
 80020f2:	e026      	b.n	8002142 <lcdCommand+0x172>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 80020f4:	4b27      	ldr	r3, [pc, #156]	@ (8002194 <lcdCommand+0x1c4>)
 80020f6:	7a1b      	ldrb	r3, [r3, #8]
 80020f8:	f023 0302 	bic.w	r3, r3, #2
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <lcdCommand+0x1c4>)
 8002100:	721a      	strb	r2, [r3, #8]
                    break;
 8002102:	e01e      	b.n	8002142 <lcdCommand+0x172>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8002104:	4b23      	ldr	r3, [pc, #140]	@ (8002194 <lcdCommand+0x1c4>)
 8002106:	7a1b      	ldrb	r3, [r3, #8]
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b21      	ldr	r3, [pc, #132]	@ (8002194 <lcdCommand+0x1c4>)
 8002110:	721a      	strb	r2, [r3, #8]
                    break;
 8002112:	e016      	b.n	8002142 <lcdCommand+0x172>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8002114:	4b1f      	ldr	r3, [pc, #124]	@ (8002194 <lcdCommand+0x1c4>)
 8002116:	7a5b      	ldrb	r3, [r3, #9]
 8002118:	f023 0302 	bic.w	r3, r3, #2
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <lcdCommand+0x1c4>)
 8002120:	725a      	strb	r2, [r3, #9]
                    break;
 8002122:	e00e      	b.n	8002142 <lcdCommand+0x172>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <lcdCommand+0x1c4>)
 8002126:	7a5a      	ldrb	r2, [r3, #9]
 8002128:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <lcdCommand+0x1c4>)
 800212a:	725a      	strb	r2, [r3, #9]
                    break;
 800212c:	e009      	b.n	8002142 <lcdCommand+0x172>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 800212e:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <lcdCommand+0x1c4>)
 8002130:	7a5b      	ldrb	r3, [r3, #9]
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <lcdCommand+0x1c4>)
 800213a:	725a      	strb	r2, [r3, #9]
                    break;
 800213c:	e001      	b.n	8002142 <lcdCommand+0x172>

                default:
                    return -1;
 800213e:	23ff      	movs	r3, #255	@ 0xff
 8002140:	e024      	b.n	800218c <lcdCommand+0x1bc>
            }

            break;
 8002142:	e001      	b.n	8002148 <lcdCommand+0x178>

        default:
            return -1;
 8002144:	23ff      	movs	r3, #255	@ 0xff
 8002146:	e021      	b.n	800218c <lcdCommand+0x1bc>
    }

    /* Now lets send the command */
    switch (command) {
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	2b08      	cmp	r3, #8
 800214c:	dc16      	bgt.n	800217c <lcdCommand+0x1ac>
 800214e:	2b06      	cmp	r3, #6
 8002150:	da0d      	bge.n	800216e <lcdCommand+0x19e>
 8002152:	2b01      	cmp	r3, #1
 8002154:	d004      	beq.n	8002160 <lcdCommand+0x190>
 8002156:	2b00      	cmp	r3, #0
 8002158:	dd10      	ble.n	800217c <lcdCommand+0x1ac>
 800215a:	3b03      	subs	r3, #3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d80d      	bhi.n	800217c <lcdCommand+0x1ac>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8002160:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <lcdCommand+0x1c4>)
 8002162:	7a1b      	ldrb	r3, [r3, #8]
 8002164:	f043 0308 	orr.w	r3, r3, #8
 8002168:	b2db      	uxtb	r3, r3
 800216a:	73fb      	strb	r3, [r7, #15]
            break;
 800216c:	e007      	b.n	800217e <lcdCommand+0x1ae>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 800216e:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <lcdCommand+0x1c4>)
 8002170:	7a5b      	ldrb	r3, [r3, #9]
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	b2db      	uxtb	r3, r3
 8002178:	73fb      	strb	r3, [r7, #15]
            break;
 800217a:	e000      	b.n	800217e <lcdCommand+0x1ae>

        default:
            break;
 800217c:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 800217e:	f107 030f 	add.w	r3, r7, #15
 8002182:	4619      	mov	r1, r3
 8002184:	2000      	movs	r0, #0
 8002186:	f000 f84f 	bl	8002228 <lcdWriteByte>
 800218a:	4603      	mov	r3, r0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	200003d0 	.word	0x200003d0

08002198 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        0 if success
 */
char lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	460a      	mov	r2, r1
 80021a2:	71fb      	strb	r3, [r7, #7]
 80021a4:	4613      	mov	r3, r2
 80021a6:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 80021a8:	4b0f      	ldr	r3, [pc, #60]	@ (80021e8 <lcdSetCursorPosition+0x50>)
 80021aa:	791b      	ldrb	r3, [r3, #4]
 80021ac:	79ba      	ldrb	r2, [r7, #6]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d303      	bcc.n	80021ba <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 80021b2:	4b0d      	ldr	r3, [pc, #52]	@ (80021e8 <lcdSetCursorPosition+0x50>)
 80021b4:	791b      	ldrb	r3, [r3, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 80021ba:	79bb      	ldrb	r3, [r7, #6]
 80021bc:	4a0b      	ldr	r2, [pc, #44]	@ (80021ec <lcdSetCursorPosition+0x54>)
 80021be:	5cd2      	ldrb	r2, [r2, r3]
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	4413      	add	r3, r2
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	b25b      	sxtb	r3, r3
 80021c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 80021d2:	f107 030f 	add.w	r3, r7, #15
 80021d6:	4619      	mov	r1, r3
 80021d8:	2000      	movs	r0, #0
 80021da:	f000 f825 	bl	8002228 <lcdWriteByte>
 80021de:	4603      	mov	r3, r0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	200003d0 	.word	0x200003d0
 80021ec:	0800f65c 	.word	0x0800f65c

080021f0 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        0 if success
 */
char lcdPrintStr(uint8_t * data, uint8_t length) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
 8002200:	e009      	b.n	8002216 <lcdPrintStr+0x26>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == -1) {
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	4619      	mov	r1, r3
 800220a:	2001      	movs	r0, #1
 800220c:	f000 f80c 	bl	8002228 <lcdWriteByte>
    for (uint8_t i = 0; i < length; ++i) {
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	3301      	adds	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	429a      	cmp	r2, r3
 800221c:	d3f1      	bcc.n	8002202 <lcdPrintStr+0x12>
            return -1;
        }
    }

    return 0;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          0 if success
 */
static char lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	71fb      	strb	r3, [r7, #7]
	unsigned short usCont;

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8002234:	4b38      	ldr	r3, [pc, #224]	@ (8002318 <lcdWriteByte+0xf0>)
 8002236:	79da      	ldrb	r2, [r3, #7]
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4313      	orrs	r3, r2
 800223c:	b2da      	uxtb	r2, r3
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	f023 030f 	bic.w	r3, r3, #15
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4313      	orrs	r3, r2
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b32      	ldr	r3, [pc, #200]	@ (800231c <lcdWriteByte+0xf4>)
 8002254:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8002256:	4b31      	ldr	r3, [pc, #196]	@ (800231c <lcdWriteByte+0xf4>)
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	4b30      	ldr	r3, [pc, #192]	@ (800231c <lcdWriteByte+0xf4>)
 800225c:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 800225e:	4b2e      	ldr	r3, [pc, #184]	@ (8002318 <lcdWriteByte+0xf0>)
 8002260:	79da      	ldrb	r2, [r3, #7]
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	4313      	orrs	r3, r2
 8002266:	b2db      	uxtb	r3, r3
 8002268:	b25a      	sxtb	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b25b      	sxtb	r3, r3
 8002270:	f023 030f 	bic.w	r3, r3, #15
 8002274:	b25b      	sxtb	r3, r3
 8002276:	4313      	orrs	r3, r2
 8002278:	b25b      	sxtb	r3, r3
 800227a:	b2da      	uxtb	r2, r3
 800227c:	4b27      	ldr	r3, [pc, #156]	@ (800231c <lcdWriteByte+0xf4>)
 800227e:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8002280:	4b25      	ldr	r3, [pc, #148]	@ (8002318 <lcdWriteByte+0xf0>)
 8002282:	79da      	ldrb	r2, [r3, #7]
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	4313      	orrs	r3, r2
 8002288:	b2da      	uxtb	r2, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4313      	orrs	r3, r2
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	b2da      	uxtb	r2, r3
 800229c:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <lcdWriteByte+0xf4>)
 800229e:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 80022a0:	4b1e      	ldr	r3, [pc, #120]	@ (800231c <lcdWriteByte+0xf4>)
 80022a2:	78da      	ldrb	r2, [r3, #3]
 80022a4:	4b1d      	ldr	r3, [pc, #116]	@ (800231c <lcdWriteByte+0xf4>)
 80022a6:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 80022a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <lcdWriteByte+0xf0>)
 80022aa:	79da      	ldrb	r2, [r3, #7]
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	b25a      	sxtb	r2, r3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	b25b      	sxtb	r3, r3
 80022bc:	4313      	orrs	r3, r2
 80022be:	b25b      	sxtb	r3, r3
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b16      	ldr	r3, [pc, #88]	@ (800231c <lcdWriteByte+0xf4>)
 80022c4:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 80022c6:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <lcdWriteByte+0xf0>)
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <lcdWriteByte+0xf0>)
 80022cc:	799b      	ldrb	r3, [r3, #6]
 80022ce:	4619      	mov	r1, r3
 80022d0:	2306      	movs	r3, #6
 80022d2:	4a12      	ldr	r2, [pc, #72]	@ (800231c <lcdWriteByte+0xf4>)
 80022d4:	f002 fecc 	bl	8005070 <HAL_I2C_Master_Transmit_DMA>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <lcdWriteByte+0xba>
        return -1;
 80022de:	23ff      	movs	r3, #255	@ 0xff
 80022e0:	e015      	b.n	800230e <lcdWriteByte+0xe6>
    }

    usCont = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80022e6:	e009      	b.n	80022fc <lcdWriteByte+0xd4>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 80022e8:	89fb      	ldrh	r3, [r7, #14]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	81fa      	strh	r2, [r7, #14]
 80022ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80022f0:	d101      	bne.n	80022f6 <lcdWriteByte+0xce>
    		return -1;
 80022f2:	23ff      	movs	r3, #255	@ 0xff
 80022f4:	e00b      	b.n	800230e <lcdWriteByte+0xe6>
    	HAL_Delay(1);
 80022f6:	2001      	movs	r0, #1
 80022f8:	f001 ffc8 	bl	800428c <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <lcdWriteByte+0xf0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f003 f8a6 	bl	8005452 <HAL_I2C_GetState>
 8002306:	4603      	mov	r3, r0
 8002308:	2b20      	cmp	r3, #32
 800230a:	d1ed      	bne.n	80022e8 <lcdWriteByte+0xc0>
    }

    return 0;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200003d0 	.word	0x200003d0
 800231c:	200003c8 	.word	0x200003c8

08002320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002322:	ed2d 8b02 	vpush	{d8}
 8002326:	f5ad 7d69 	sub.w	sp, sp, #932	@ 0x3a4
 800232a:	af6e      	add	r7, sp, #440	@ 0x1b8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800232c:	f001 ff3d 	bl	80041aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002330:	f000 f90c 	bl	800254c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002334:	f7ff fbe8 	bl	8001b08 <MX_GPIO_Init>
  MX_DMA_Init();
 8002338:	f7ff fbb4 	bl	8001aa4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800233c:	f001 fd0c 	bl	8003d58 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8002340:	f001 f88a 	bl	8003458 <MX_TIM3_Init>
  MX_TIM20_Init();
 8002344:	f001 fa14 	bl	8003770 <MX_TIM20_Init>
  MX_I2C2_Init();
 8002348:	f7ff fc66 	bl	8001c18 <MX_I2C2_Init>
  MX_TIM1_Init();
 800234c:	f000 ff96 	bl	800327c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8002350:	f001 fd98 	bl	8003e84 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8002354:	f001 f8f2 	bl	800353c <MX_TIM5_Init>
  MX_TIM16_Init();
 8002358:	f001 f976 	bl	8003648 <MX_TIM16_Init>
  MX_TIM17_Init();
 800235c:	f001 f9be 	bl	80036dc <MX_TIM17_Init>
  MX_TIM6_Init();
 8002360:	f001 f93a 	bl	80035d8 <MX_TIM6_Init>
  MX_TIM2_Init();
 8002364:	f001 f82a 	bl	80033bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002368:	f001 fd40 	bl	8003dec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(&hi2c2, (uint8_t)0x27, (uint8_t)2, (uint8_t)16);
 800236c:	2310      	movs	r3, #16
 800236e:	2202      	movs	r2, #2
 8002370:	2127      	movs	r1, #39	@ 0x27
 8002372:	4863      	ldr	r0, [pc, #396]	@ (8002500 <main+0x1e0>)
 8002374:	f7ff fd72 	bl	8001e5c <lcdInit>
  vUltrassonicoInit(pTimerEcoUltrassonicoFrontal,pTimerPWMTrigger) ;
 8002378:	4b62      	ldr	r3, [pc, #392]	@ (8002504 <main+0x1e4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a62      	ldr	r2, [pc, #392]	@ (8002508 <main+0x1e8>)
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f001 fcc2 	bl	8003d0c <vUltrassonicoInit>
  vCommunicationInit(&hlpuart1);
 8002388:	4860      	ldr	r0, [pc, #384]	@ (800250c <main+0x1ec>)
 800238a:	f7ff fa93 	bl	80018b4 <vCommunicationInit>

  vMotorsInit(pTimPWMMotor, pTimDurationMotor);
 800238e:	4b60      	ldr	r3, [pc, #384]	@ (8002510 <main+0x1f0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a60      	ldr	r2, [pc, #384]	@ (8002514 <main+0x1f4>)
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fb0f 	bl	80029bc <vMotorsInit>
  vCommStateMachineInit(pBleCtrlMain);
 800239e:	4b5e      	ldr	r3, [pc, #376]	@ (8002518 <main+0x1f8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe ffac 	bl	8001300 <vCommStateMachineInit>

  vTimerInit();
 80023a8:	f001 fc44 	bl	8003c34 <vTimerInit>
  iSetTimer(100);
 80023ac:	2064      	movs	r0, #100	@ 0x64
 80023ae:	f001 fc67 	bl	8003c80 <iSetTimer>

// lider
//  xPidMotorLeft = vPidInit(xPidMotorLeft, 0.005, 0.06, 0, 100, 1);
//  xPidMotorRight = vPidInit(xPidMotorRight, 0.005, 0.06, 0, 100, 1);
// seguidor
   xPidMotorLeft = vPidInit(xPidMotorLeft, fLeftMotorKp, fLeftMotorKi, 0, 100, 1);
 80023b2:	4b5a      	ldr	r3, [pc, #360]	@ (800251c <main+0x1fc>)
 80023b4:	ed93 8a00 	vldr	s16, [r3]
 80023b8:	4b59      	ldr	r3, [pc, #356]	@ (8002520 <main+0x200>)
 80023ba:	edd3 8a00 	vldr	s17, [r3]
 80023be:	4e59      	ldr	r6, [pc, #356]	@ (8002524 <main+0x204>)
 80023c0:	463d      	mov	r5, r7
 80023c2:	4c58      	ldr	r4, [pc, #352]	@ (8002524 <main+0x204>)
 80023c4:	2364      	movs	r3, #100	@ 0x64
 80023c6:	936c      	str	r3, [sp, #432]	@ 0x1b0
 80023c8:	4668      	mov	r0, sp
 80023ca:	f104 030c 	add.w	r3, r4, #12
 80023ce:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80023d2:	4619      	mov	r1, r3
 80023d4:	f00a ff6f 	bl	800d2b6 <memcpy>
 80023d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80023dc:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80023e0:	ed9f 1a51 	vldr	s2, [pc, #324]	@ 8002528 <main+0x208>
 80023e4:	eef0 0a68 	vmov.f32	s1, s17
 80023e8:	eeb0 0a48 	vmov.f32	s0, s16
 80023ec:	4628      	mov	r0, r5
 80023ee:	f000 fc7b 	bl	8002ce8 <vPidInit>
 80023f2:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80023f6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80023fa:	4630      	mov	r0, r6
 80023fc:	4619      	mov	r1, r3
 80023fe:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 8002402:	461a      	mov	r2, r3
 8002404:	f00a ff57 	bl	800d2b6 <memcpy>
   xPidMotorRight = vPidInit(xPidMotorRight, fRightMotorKp, fRightMotorKi, 0, 100, 1);
 8002408:	4b48      	ldr	r3, [pc, #288]	@ (800252c <main+0x20c>)
 800240a:	ed93 8a00 	vldr	s16, [r3]
 800240e:	4b48      	ldr	r3, [pc, #288]	@ (8002530 <main+0x210>)
 8002410:	edd3 8a00 	vldr	s17, [r3]
 8002414:	4e47      	ldr	r6, [pc, #284]	@ (8002534 <main+0x214>)
 8002416:	463d      	mov	r5, r7
 8002418:	4c46      	ldr	r4, [pc, #280]	@ (8002534 <main+0x214>)
 800241a:	2364      	movs	r3, #100	@ 0x64
 800241c:	936c      	str	r3, [sp, #432]	@ 0x1b0
 800241e:	4668      	mov	r0, sp
 8002420:	f104 030c 	add.w	r3, r4, #12
 8002424:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8002428:	4619      	mov	r1, r3
 800242a:	f00a ff44 	bl	800d2b6 <memcpy>
 800242e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002432:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8002436:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8002528 <main+0x208>
 800243a:	eef0 0a68 	vmov.f32	s1, s17
 800243e:	eeb0 0a48 	vmov.f32	s0, s16
 8002442:	4628      	mov	r0, r5
 8002444:	f000 fc50 	bl	8002ce8 <vPidInit>
 8002448:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800244c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002450:	4630      	mov	r0, r6
 8002452:	4619      	mov	r1, r3
 8002454:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 8002458:	461a      	mov	r2, r3
 800245a:	f00a ff2c 	bl	800d2b6 <memcpy>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(pTimDurationMotor);
 800245e:	4b2d      	ldr	r3, [pc, #180]	@ (8002514 <main+0x1f4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f005 fc98 	bl	8007d98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(pTimFreqFixa_esq);
 8002468:	4b33      	ldr	r3, [pc, #204]	@ (8002538 <main+0x218>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f005 fc93 	bl	8007d98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(pTimFreqFixa_dir);
 8002472:	4b32      	ldr	r3, [pc, #200]	@ (800253c <main+0x21c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f005 fc8e 	bl	8007d98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(pTimerGeral);
 800247c:	4b30      	ldr	r3, [pc, #192]	@ (8002540 <main+0x220>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f005 fc89 	bl	8007d98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(pTimFreqFixa_esq, TIM_CHANNEL_1);
 8002486:	4b2c      	ldr	r3, [pc, #176]	@ (8002538 <main+0x218>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f005 fec7 	bl	8008220 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(pTimFreqFixa_dir, TIM_CHANNEL_1);
 8002492:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <main+0x21c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f005 fec1 	bl	8008220 <HAL_TIM_IC_Start_IT>

  lcdSetCursorPosition(0, 0);
 800249e:	2100      	movs	r1, #0
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7ff fe79 	bl	8002198 <lcdSetCursorPosition>
  sprintf((char *)ucLCD0Msg, "Esq(mm/s):");
 80024a6:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 80024aa:	4926      	ldr	r1, [pc, #152]	@ (8002544 <main+0x224>)
 80024ac:	4618      	mov	r0, r3
 80024ae:	f00a fe11 	bl	800d0d4 <siprintf>
  lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));
 80024b2:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fd feb2 	bl	8000220 <strlen>
 80024bc:	4603      	mov	r3, r0
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fe92 	bl	80021f0 <lcdPrintStr>
  lcdSetCursorPosition(0, 1);
 80024cc:	2101      	movs	r1, #1
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7ff fe62 	bl	8002198 <lcdSetCursorPosition>
  sprintf((char *)ucLCD0Msg, "Dir(mm/s):");
 80024d4:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 80024d8:	491b      	ldr	r1, [pc, #108]	@ (8002548 <main+0x228>)
 80024da:	4618      	mov	r0, r3
 80024dc:	f00a fdfa 	bl	800d0d4 <siprintf>
  lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));
 80024e0:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd fe9b 	bl	8000220 <strlen>
 80024ea:	4603      	mov	r3, r0
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fe7b 	bl	80021f0 <lcdPrintStr>

  while (1)
 80024fa:	bf00      	nop
 80024fc:	e7fd      	b.n	80024fa <main+0x1da>
 80024fe:	bf00      	nop
 8002500:	200002b4 	.word	0x200002b4
 8002504:	20000008 	.word	0x20000008
 8002508:	20000004 	.word	0x20000004
 800250c:	20000ab4 	.word	0x20000ab4
 8002510:	20000014 	.word	0x20000014
 8002514:	20000010 	.word	0x20000010
 8002518:	2000000c 	.word	0x2000000c
 800251c:	20000024 	.word	0x20000024
 8002520:	20000028 	.word	0x20000028
 8002524:	200005c4 	.word	0x200005c4
 8002528:	00000000 	.word	0x00000000
 800252c:	2000002c 	.word	0x2000002c
 8002530:	20000030 	.word	0x20000030
 8002534:	20000408 	.word	0x20000408
 8002538:	2000001c 	.word	0x2000001c
 800253c:	20000020 	.word	0x20000020
 8002540:	20000018 	.word	0x20000018
 8002544:	0800f644 	.word	0x0800f644
 8002548:	0800f650 	.word	0x0800f650

0800254c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b094      	sub	sp, #80	@ 0x50
 8002550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002552:	f107 0318 	add.w	r3, r7, #24
 8002556:	2238      	movs	r2, #56	@ 0x38
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f00a fe1d 	bl	800d19a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800256e:	2000      	movs	r0, #0
 8002570:	f004 fb8a 	bl	8006c88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002574:	2302      	movs	r3, #2
 8002576:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002578:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800257e:	2340      	movs	r3, #64	@ 0x40
 8002580:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002582:	2302      	movs	r3, #2
 8002584:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002586:	2302      	movs	r3, #2
 8002588:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800258a:	2304      	movs	r3, #4
 800258c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800258e:	2355      	movs	r3, #85	@ 0x55
 8002590:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002592:	2302      	movs	r3, #2
 8002594:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002596:	2302      	movs	r3, #2
 8002598:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800259a:	2302      	movs	r3, #2
 800259c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800259e:	f107 0318 	add.w	r3, r7, #24
 80025a2:	4618      	mov	r0, r3
 80025a4:	f004 fc24 	bl	8006df0 <HAL_RCC_OscConfig>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80025ae:	f000 f9fe 	bl	80029ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b2:	230f      	movs	r3, #15
 80025b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025b6:	2303      	movs	r3, #3
 80025b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2104      	movs	r1, #4
 80025ca:	4618      	mov	r0, r3
 80025cc:	f004 ff22 	bl	8007414 <HAL_RCC_ClockConfig>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80025d6:	f000 f9ea 	bl	80029ae <Error_Handler>
  }
}
 80025da:	bf00      	nop
 80025dc:	3750      	adds	r7, #80	@ 0x50
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	0000      	movs	r0, r0
 80025e4:	0000      	movs	r0, r0
	...

080025e8 <vPeriodicControlTask>:

/* USER CODE BEGIN 4 */


void vPeriodicControlTask(){
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	ed2d 8b02 	vpush	{d8}
 80025ee:	b0ed      	sub	sp, #436	@ 0x1b4
 80025f0:	af6c      	add	r7, sp, #432	@ 0x1b0
//
//	  fActuatorValue_right = fPidUpdateData(xPidMotorRight, fRightSpeed, 400);
//	  fActuatorValue_right = 0.46 + fActuatorValue_right*0.5;
//	  vMotorsSetPWM(right, fActuatorValue_right, 1);
	   //seguidor
	  fActuatorValue_left = fPidUpdateData(xPidMotorLeft,fRightSpeed, 400);
 80025f2:	4b43      	ldr	r3, [pc, #268]	@ (8002700 <vPeriodicControlTask+0x118>)
 80025f4:	ed93 8a00 	vldr	s16, [r3]
 80025f8:	4c42      	ldr	r4, [pc, #264]	@ (8002704 <vPeriodicControlTask+0x11c>)
 80025fa:	4668      	mov	r0, sp
 80025fc:	f104 0310 	add.w	r3, r4, #16
 8002600:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8002604:	4619      	mov	r1, r3
 8002606:	f00a fe56 	bl	800d2b6 <memcpy>
 800260a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800260e:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8002708 <vPeriodicControlTask+0x120>
 8002612:	eeb0 0a48 	vmov.f32	s0, s16
 8002616:	f000 fbc3 	bl	8002da0 <fPidUpdateData>
 800261a:	eef0 7a40 	vmov.f32	s15, s0
 800261e:	4b3b      	ldr	r3, [pc, #236]	@ (800270c <vPeriodicControlTask+0x124>)
 8002620:	edc3 7a00 	vstr	s15, [r3]
	  fActuatorValue_left = 0.48 + fActuatorValue_left*0.5;
 8002624:	4b39      	ldr	r3, [pc, #228]	@ (800270c <vPeriodicControlTask+0x124>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fd ffb5 	bl	8000598 <__aeabi_f2d>
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	4b37      	ldr	r3, [pc, #220]	@ (8002710 <vPeriodicControlTask+0x128>)
 8002634:	f7fe f808 	bl	8000648 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	a32d      	add	r3, pc, #180	@ (adr r3, 80026f8 <vPeriodicControlTask+0x110>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f7fd fe49 	bl	80002dc <__adddf3>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	f7fe faf1 	bl	8000c38 <__aeabi_d2f>
 8002656:	4603      	mov	r3, r0
 8002658:	4a2c      	ldr	r2, [pc, #176]	@ (800270c <vPeriodicControlTask+0x124>)
 800265a:	6013      	str	r3, [r2, #0]
	  vMotorsSetPWM(left, fActuatorValue_left, 1);
 800265c:	4b2b      	ldr	r3, [pc, #172]	@ (800270c <vPeriodicControlTask+0x124>)
 800265e:	edd3 7a00 	vldr	s15, [r3]
 8002662:	2101      	movs	r1, #1
 8002664:	eeb0 0a67 	vmov.f32	s0, s15
 8002668:	2000      	movs	r0, #0
 800266a:	f000 f9d3 	bl	8002a14 <vMotorsSetPWM>

	  fActuatorValue_right = fPidUpdateData(xPidMotorRight, fLeftSpeed, 400);
 800266e:	4b29      	ldr	r3, [pc, #164]	@ (8002714 <vPeriodicControlTask+0x12c>)
 8002670:	ed93 8a00 	vldr	s16, [r3]
 8002674:	4c28      	ldr	r4, [pc, #160]	@ (8002718 <vPeriodicControlTask+0x130>)
 8002676:	4668      	mov	r0, sp
 8002678:	f104 0310 	add.w	r3, r4, #16
 800267c:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8002680:	4619      	mov	r1, r3
 8002682:	f00a fe18 	bl	800d2b6 <memcpy>
 8002686:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800268a:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8002708 <vPeriodicControlTask+0x120>
 800268e:	eeb0 0a48 	vmov.f32	s0, s16
 8002692:	f000 fb85 	bl	8002da0 <fPidUpdateData>
 8002696:	eef0 7a40 	vmov.f32	s15, s0
 800269a:	4b20      	ldr	r3, [pc, #128]	@ (800271c <vPeriodicControlTask+0x134>)
 800269c:	edc3 7a00 	vstr	s15, [r3]
	  fActuatorValue_right = 0.48 + fActuatorValue_right*0.5;
 80026a0:	4b1e      	ldr	r3, [pc, #120]	@ (800271c <vPeriodicControlTask+0x134>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd ff77 	bl	8000598 <__aeabi_f2d>
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	4b18      	ldr	r3, [pc, #96]	@ (8002710 <vPeriodicControlTask+0x128>)
 80026b0:	f7fd ffca 	bl	8000648 <__aeabi_dmul>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	a30e      	add	r3, pc, #56	@ (adr r3, 80026f8 <vPeriodicControlTask+0x110>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	f7fd fe0b 	bl	80002dc <__adddf3>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	f7fe fab3 	bl	8000c38 <__aeabi_d2f>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4a11      	ldr	r2, [pc, #68]	@ (800271c <vPeriodicControlTask+0x134>)
 80026d6:	6013      	str	r3, [r2, #0]
	  vMotorsSetPWM(right, fActuatorValue_right, 1);
 80026d8:	4b10      	ldr	r3, [pc, #64]	@ (800271c <vPeriodicControlTask+0x134>)
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	2101      	movs	r1, #1
 80026e0:	eeb0 0a67 	vmov.f32	s0, s15
 80026e4:	2001      	movs	r0, #1
 80026e6:	f000 f995 	bl	8002a14 <vMotorsSetPWM>
}
 80026ea:	bf00      	nop
 80026ec:	3704      	adds	r7, #4
 80026ee:	46bd      	mov	sp, r7
 80026f0:	ecbd 8b02 	vpop	{d8}
 80026f4:	bd90      	pop	{r4, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	eb851eb8 	.word	0xeb851eb8
 80026fc:	3fdeb851 	.word	0x3fdeb851
 8002700:	20000404 	.word	0x20000404
 8002704:	200005c4 	.word	0x200005c4
 8002708:	43c80000 	.word	0x43c80000
 800270c:	20000780 	.word	0x20000780
 8002710:	3fe00000 	.word	0x3fe00000
 8002714:	20000400 	.word	0x20000400
 8002718:	20000408 	.word	0x20000408
 800271c:	20000784 	.word	0x20000784

08002720 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	if (htim == pTimDurationMotor)
 8002728:	4b31      	ldr	r3, [pc, #196]	@ (80027f0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	429a      	cmp	r2, r3
 8002730:	d101      	bne.n	8002736 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
	vMotorsDurationCallback();
 8002732:	f000 faaf 	bl	8002c94 <vMotorsDurationCallback>
	}

	//conta 10 ms
	if (htim == pTimerGeral) {
 8002736:	4b2f      	ldr	r3, [pc, #188]	@ (80027f4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	d126      	bne.n	800278e <HAL_TIM_PeriodElapsedCallback+0x6e>

		if (fRightSpeed > 700) {
 8002740:	4b2d      	ldr	r3, [pc, #180]	@ (80027f8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80027fc <HAL_TIM_PeriodElapsedCallback+0xdc>
 800274a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	dd04      	ble.n	800275e <HAL_TIM_PeriodElapsedCallback+0x3e>
			iContaOutlier_right++;
 8002754:	4b2a      	ldr	r3, [pc, #168]	@ (8002800 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3301      	adds	r3, #1
 800275a:	4a29      	ldr	r2, [pc, #164]	@ (8002800 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800275c:	6013      	str	r3, [r2, #0]
		}

		if (fLeftSpeed > 700) {
 800275e:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80027fc <HAL_TIM_PeriodElapsedCallback+0xdc>
 8002768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002770:	dd04      	ble.n	800277c <HAL_TIM_PeriodElapsedCallback+0x5c>
			iContaOutlier_left++;
 8002772:	4b25      	ldr	r3, [pc, #148]	@ (8002808 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	4a23      	ldr	r2, [pc, #140]	@ (8002808 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800277a:	6013      	str	r3, [r2, #0]
		}

		//conta 100 ms
		if (cCountTime(10, 0)) {
 800277c:	2100      	movs	r1, #0
 800277e:	200a      	movs	r0, #10
 8002780:	f001 fa9a 	bl	8003cb8 <cCountTime>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_TIM_PeriodElapsedCallback+0x6e>
			vPeriodicControlTask();
 800278a:	f7ff ff2d 	bl	80025e8 <vPeriodicControlTask>
		}

	}

	if (htim == pTimFreqFixa_esq){
 800278e:	4b1f      	ldr	r3, [pc, #124]	@ (800280c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	d110      	bne.n	80027ba <HAL_TIM_PeriodElapsedCallback+0x9a>
		if(uiLeftTimeBurst > 200){
 8002798:	4b1d      	ldr	r3, [pc, #116]	@ (8002810 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2bc8      	cmp	r3, #200	@ 0xc8
 800279e:	d907      	bls.n	80027b0 <HAL_TIM_PeriodElapsedCallback+0x90>
			uiLeftTimeBurst = 1;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
			fLeftSpeed = 0;
 80027a6:	4b17      	ldr	r3, [pc, #92]	@ (8002804 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e004      	b.n	80027ba <HAL_TIM_PeriodElapsedCallback+0x9a>
		}else{
		uiLeftTimeBurst++;
 80027b0:	4b17      	ldr	r3, [pc, #92]	@ (8002810 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3301      	adds	r3, #1
 80027b6:	4a16      	ldr	r2, [pc, #88]	@ (8002810 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80027b8:	6013      	str	r3, [r2, #0]
		}
	}

	if (htim == pTimFreqFixa_dir){
 80027ba:	4b16      	ldr	r3, [pc, #88]	@ (8002814 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d110      	bne.n	80027e6 <HAL_TIM_PeriodElapsedCallback+0xc6>
		if(uiRightTimeBurst > 200){
 80027c4:	4b14      	ldr	r3, [pc, #80]	@ (8002818 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2bc8      	cmp	r3, #200	@ 0xc8
 80027ca:	d907      	bls.n	80027dc <HAL_TIM_PeriodElapsedCallback+0xbc>
			uiRightTimeBurst = 1;
 80027cc:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
			fRightSpeed = 0;
 80027d2:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e004      	b.n	80027e6 <HAL_TIM_PeriodElapsedCallback+0xc6>
		}else{
		uiRightTimeBurst++;
 80027dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002818 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3301      	adds	r3, #1
 80027e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002818 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80027e4:	6013      	str	r3, [r2, #0]
	}

	if (htim == pTimerBuzzer){
//		vBuzzerStop();
	}
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000010 	.word	0x20000010
 80027f4:	20000018 	.word	0x20000018
 80027f8:	20000404 	.word	0x20000404
 80027fc:	442f0000 	.word	0x442f0000
 8002800:	2000078c 	.word	0x2000078c
 8002804:	20000400 	.word	0x20000400
 8002808:	20000788 	.word	0x20000788
 800280c:	2000001c 	.word	0x2000001c
 8002810:	200003e4 	.word	0x200003e4
 8002814:	20000020 	.word	0x20000020
 8002818:	200003e8 	.word	0x200003e8

0800281c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
 800281c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
//ENCODERS
  if (htim == pTimFreqFixa_esq)
 8002826:	4b46      	ldr	r3, [pc, #280]	@ (8002940 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	429a      	cmp	r2, r3
 800282e:	d13f      	bne.n	80028b0 <HAL_TIM_IC_CaptureCallback+0x94>
  	{
  		uiLeftCapturedTime =  HAL_TIM_ReadCapturedValue(htim,  TIM_CHANNEL_1);
 8002830:	2100      	movs	r1, #0
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f006 fa5a 	bl	8008cec <HAL_TIM_ReadCapturedValue>
 8002838:	4603      	mov	r3, r0
 800283a:	4a42      	ldr	r2, [pc, #264]	@ (8002944 <HAL_TIM_IC_CaptureCallback+0x128>)
 800283c:	6013      	str	r3, [r2, #0]
  		if (uiLeftTimeBurst != 0)
 800283e:	4b42      	ldr	r3, [pc, #264]	@ (8002948 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d011      	beq.n	800286a <HAL_TIM_IC_CaptureCallback+0x4e>
  			ullLeftTimeRan = uiLeftCapturedTime + uiLeftTimeBurst*10000;
 8002846:	4b40      	ldr	r3, [pc, #256]	@ (8002948 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800284e:	fb03 f202 	mul.w	r2, r3, r2
 8002852:	4b3c      	ldr	r3, [pc, #240]	@ (8002944 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4413      	add	r3, r2
 8002858:	2200      	movs	r2, #0
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	4b3b      	ldr	r3, [pc, #236]	@ (800294c <HAL_TIM_IC_CaptureCallback+0x130>)
 8002860:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002864:	e9c3 1200 	strd	r1, r2, [r3]
 8002868:	e007      	b.n	800287a <HAL_TIM_IC_CaptureCallback+0x5e>
  		else
  			ullLeftTimeRan = uiLeftCapturedTime;
 800286a:	4b36      	ldr	r3, [pc, #216]	@ (8002944 <HAL_TIM_IC_CaptureCallback+0x128>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2200      	movs	r2, #0
 8002870:	469a      	mov	sl, r3
 8002872:	4693      	mov	fp, r2
 8002874:	4b35      	ldr	r3, [pc, #212]	@ (800294c <HAL_TIM_IC_CaptureCallback+0x130>)
 8002876:	e9c3 ab00 	strd	sl, fp, [r3]
  		__HAL_TIM_SET_COUNTER(htim, 0);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	625a      	str	r2, [r3, #36]	@ 0x24
  		uiLeftTimeBurst = 0;
 8002882:	4b31      	ldr	r3, [pc, #196]	@ (8002948 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
  		fLeftSpeed = 10.0f/(ullLeftTimeRan/1000000.0f); //velocidade em mm/s
 8002888:	4b30      	ldr	r3, [pc, #192]	@ (800294c <HAL_TIM_IC_CaptureCallback+0x130>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	f7fe fae9 	bl	8000e68 <__aeabi_ul2f>
 8002896:	ee06 0a90 	vmov	s13, r0
 800289a:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8002950 <HAL_TIM_IC_CaptureCallback+0x134>
 800289e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028a2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80028a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <HAL_TIM_IC_CaptureCallback+0x138>)
 80028ac:	edc3 7a00 	vstr	s15, [r3]
  	}

  if (htim == pTimFreqFixa_dir)
 80028b0:	4b29      	ldr	r3, [pc, #164]	@ (8002958 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d13d      	bne.n	8002936 <HAL_TIM_IC_CaptureCallback+0x11a>
  	{
  		uiRightCapturedTime =  HAL_TIM_ReadCapturedValue(htim,  TIM_CHANNEL_1);
 80028ba:	2100      	movs	r1, #0
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f006 fa15 	bl	8008cec <HAL_TIM_ReadCapturedValue>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4a25      	ldr	r2, [pc, #148]	@ (800295c <HAL_TIM_IC_CaptureCallback+0x140>)
 80028c6:	6013      	str	r3, [r2, #0]
  		if (uiRightTimeBurst != 0)
 80028c8:	4b25      	ldr	r3, [pc, #148]	@ (8002960 <HAL_TIM_IC_CaptureCallback+0x144>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00f      	beq.n	80028f0 <HAL_TIM_IC_CaptureCallback+0xd4>
  		{
  			ullRightTimeRan = uiRightCapturedTime + uiRightTimeBurst*10000;
 80028d0:	4b23      	ldr	r3, [pc, #140]	@ (8002960 <HAL_TIM_IC_CaptureCallback+0x144>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80028d8:	fb03 f202 	mul.w	r2, r3, r2
 80028dc:	4b1f      	ldr	r3, [pc, #124]	@ (800295c <HAL_TIM_IC_CaptureCallback+0x140>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	2200      	movs	r2, #0
 80028e4:	4698      	mov	r8, r3
 80028e6:	4691      	mov	r9, r2
 80028e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002964 <HAL_TIM_IC_CaptureCallback+0x148>)
 80028ea:	e9c3 8900 	strd	r8, r9, [r3]
 80028ee:	e007      	b.n	8002900 <HAL_TIM_IC_CaptureCallback+0xe4>
  		}
  		else
  		{
  			ullRightTimeRan = uiRightCapturedTime;
 80028f0:	4b1a      	ldr	r3, [pc, #104]	@ (800295c <HAL_TIM_IC_CaptureCallback+0x140>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2200      	movs	r2, #0
 80028f6:	461c      	mov	r4, r3
 80028f8:	4615      	mov	r5, r2
 80028fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002964 <HAL_TIM_IC_CaptureCallback+0x148>)
 80028fc:	e9c3 4500 	strd	r4, r5, [r3]
  		}
  		__HAL_TIM_SET_COUNTER(htim, 0);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2200      	movs	r2, #0
 8002906:	625a      	str	r2, [r3, #36]	@ 0x24
  		uiRightTimeBurst = 0;
 8002908:	4b15      	ldr	r3, [pc, #84]	@ (8002960 <HAL_TIM_IC_CaptureCallback+0x144>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
  		fRightSpeed = 10.0f/(ullRightTimeRan/1000000.0f); //velocidade em mm/s
 800290e:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <HAL_TIM_IC_CaptureCallback+0x148>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f7fe faa6 	bl	8000e68 <__aeabi_ul2f>
 800291c:	ee06 0a90 	vmov	s13, r0
 8002920:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8002950 <HAL_TIM_IC_CaptureCallback+0x134>
 8002924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002928:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800292c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002930:	4b0d      	ldr	r3, [pc, #52]	@ (8002968 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8002932:	edc3 7a00 	vstr	s15, [r3]
  	}
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002940:	2000001c 	.word	0x2000001c
 8002944:	200003dc 	.word	0x200003dc
 8002948:	200003e4 	.word	0x200003e4
 800294c:	200003f0 	.word	0x200003f0
 8002950:	49742400 	.word	0x49742400
 8002954:	20000400 	.word	0x20000400
 8002958:	20000020 	.word	0x20000020
 800295c:	200003e0 	.word	0x200003e0
 8002960:	200003e8 	.word	0x200003e8
 8002964:	200003f8 	.word	0x200003f8
 8002968:	20000404 	.word	0x20000404

0800296c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==GPIO_PIN_7){
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	2b80      	cmp	r3, #128	@ 0x80
 800297a:	d10b      	bne.n	8002994 <HAL_GPIO_EXTI_Callback+0x28>
		vMotorsSetPWM(left, 1, 1);
 800297c:	2101      	movs	r1, #1
 800297e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002982:	2000      	movs	r0, #0
 8002984:	f000 f846 	bl	8002a14 <vMotorsSetPWM>
		vMotorsSetPWM(right, 1, 0);
 8002988:	2100      	movs	r1, #0
 800298a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800298e:	2001      	movs	r0, #1
 8002990:	f000 f840 	bl	8002a14 <vMotorsSetPWM>
	}

	if(GPIO_Pin==GPIO_PIN_5){
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	2b20      	cmp	r3, #32
 8002998:	d105      	bne.n	80029a6 <HAL_GPIO_EXTI_Callback+0x3a>
		vMotorsSetOff(left);
 800299a:	2000      	movs	r0, #0
 800299c:	f000 f944 	bl	8002c28 <vMotorsSetOff>
		vMotorsSetOff(right);
 80029a0:	2001      	movs	r0, #1
 80029a2:	f000 f941 	bl	8002c28 <vMotorsSetOff>
	}

}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b2:	b672      	cpsid	i
}
 80029b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b6:	bf00      	nop
 80029b8:	e7fd      	b.n	80029b6 <Error_Handler+0x8>
	...

080029bc <vMotorsInit>:
TIM_HandleTypeDef* pTimPWM;
TIM_HandleTypeDef* pTimDuration;
unsigned char ucDurationCounter;
unsigned short int usTimeOn;

void vMotorsInit(TIM_HandleTypeDef* htimPWM, TIM_HandleTypeDef* htimTimer) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
	pTimPWM = htimPWM;
 80029c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002a04 <vMotorsInit+0x48>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6013      	str	r3, [r2, #0]
	pTimDuration =htimPWM;
 80029cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002a08 <vMotorsInit+0x4c>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pTimPWM, TIM_CHANNEL_1);
 80029d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <vMotorsInit+0x48>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f005 faad 	bl	8007f38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pTimPWM, TIM_CHANNEL_2);
 80029de:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <vMotorsInit+0x48>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2104      	movs	r1, #4
 80029e4:	4618      	mov	r0, r3
 80029e6:	f005 faa7 	bl	8007f38 <HAL_TIM_PWM_Start>
	//pTimPWM->Instance->CCR1 = 0;
	HAL_NVIC_DisableIRQ(TIM5_IRQn);
 80029ea:	2032      	movs	r0, #50	@ 0x32
 80029ec:	f001 fd97 	bl	800451e <HAL_NVIC_DisableIRQ>

	ucDurationCounter = 0;
 80029f0:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <vMotorsInit+0x50>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
	usTimeOn =0;
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <vMotorsInit+0x54>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	801a      	strh	r2, [r3, #0]

}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000794 	.word	0x20000794
 8002a08:	20000798 	.word	0x20000798
 8002a0c:	2000079c 	.word	0x2000079c
 8002a10:	2000079e 	.word	0x2000079e

08002a14 <vMotorsSetPWM>:

//char: motor da direita ou esquerda
//float: PWM de 0 a 1
void vMotorsSetPWM(char motor, float PWM, char rotation) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	ed87 0a00 	vstr	s0, [r7]
 8002a20:	460a      	mov	r2, r1
 8002a22:	71fb      	strb	r3, [r7, #7]
 8002a24:	4613      	mov	r3, r2
 8002a26:	71bb      	strb	r3, [r7, #6]
	if (motor == left) {
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d131      	bne.n	8002a92 <vMotorsSetPWM+0x7e>
		pTimPWM->Instance->CCR2 = (PWM*1000) - 1;
 8002a2e:	edd7 7a00 	vldr	s15, [r7]
 8002a32:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002b04 <vMotorsSetPWM+0xf0>
 8002a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a42:	4b31      	ldr	r3, [pc, #196]	@ (8002b08 <vMotorsSetPWM+0xf4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a4c:	ee17 2a90 	vmov	r2, s15
 8002a50:	639a      	str	r2, [r3, #56]	@ 0x38

		if (rotation) {
 8002a52:	79bb      	ldrb	r3, [r7, #6]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00c      	beq.n	8002a72 <vMotorsSetPWM+0x5e>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 1);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a5e:	482b      	ldr	r0, [pc, #172]	@ (8002b0c <vMotorsSetPWM+0xf8>)
 8002a60:	f002 fa3a 	bl	8004ed8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a6a:	4828      	ldr	r0, [pc, #160]	@ (8002b0c <vMotorsSetPWM+0xf8>)
 8002a6c:	f002 fa34 	bl	8004ed8 <HAL_GPIO_WritePin>
		} else if (!rotation) {
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 1);
		}
	}
}
 8002a70:	e043      	b.n	8002afa <vMotorsSetPWM+0xe6>
		} else if (!rotation) {
 8002a72:	79bb      	ldrb	r3, [r7, #6]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d140      	bne.n	8002afa <vMotorsSetPWM+0xe6>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a7e:	4823      	ldr	r0, [pc, #140]	@ (8002b0c <vMotorsSetPWM+0xf8>)
 8002a80:	f002 fa2a 	bl	8004ed8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 1);
 8002a84:	2201      	movs	r2, #1
 8002a86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a8a:	4820      	ldr	r0, [pc, #128]	@ (8002b0c <vMotorsSetPWM+0xf8>)
 8002a8c:	f002 fa24 	bl	8004ed8 <HAL_GPIO_WritePin>
}
 8002a90:	e033      	b.n	8002afa <vMotorsSetPWM+0xe6>
	} else if (motor == right) {
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d130      	bne.n	8002afa <vMotorsSetPWM+0xe6>
		pTimPWM->Instance->CCR1 = (PWM*1000) - 1;
 8002a98:	edd7 7a00 	vldr	s15, [r7]
 8002a9c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002b04 <vMotorsSetPWM+0xf0>
 8002aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002aac:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <vMotorsSetPWM+0xf4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab6:	ee17 2a90 	vmov	r2, s15
 8002aba:	635a      	str	r2, [r3, #52]	@ 0x34
		if (rotation) {
 8002abc:	79bb      	ldrb	r3, [r7, #6]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00c      	beq.n	8002adc <vMotorsSetPWM+0xc8>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 1);
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	2180      	movs	r1, #128	@ 0x80
 8002ac6:	4811      	ldr	r0, [pc, #68]	@ (8002b0c <vMotorsSetPWM+0xf8>)
 8002ac8:	f002 fa06 	bl	8004ed8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ad6:	f002 f9ff 	bl	8004ed8 <HAL_GPIO_WritePin>
}
 8002ada:	e00e      	b.n	8002afa <vMotorsSetPWM+0xe6>
		} else if (!rotation) {
 8002adc:	79bb      	ldrb	r3, [r7, #6]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <vMotorsSetPWM+0xe6>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2180      	movs	r1, #128	@ 0x80
 8002ae6:	4809      	ldr	r0, [pc, #36]	@ (8002b0c <vMotorsSetPWM+0xf8>)
 8002ae8:	f002 f9f6 	bl	8004ed8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 1);
 8002aec:	2201      	movs	r2, #1
 8002aee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002af6:	f002 f9ef 	bl	8004ed8 <HAL_GPIO_WritePin>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	447a0000 	.word	0x447a0000
 8002b08:	20000794 	.word	0x20000794
 8002b0c:	48000400 	.word	0x48000400

08002b10 <vMotorsSetPWMTimer>:
//						a pre-set time, it enable the interrupion that after some cycles defined by    //
//						duration input will stop the motor in vMotorsDurationCallback function         //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	char motor, float PWM, char rotation, unsigned int duration					   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vMotorsSetPWMTimer(char motor, float PWM, char rotation, unsigned int duration) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	460b      	mov	r3, r1
 8002b22:	73bb      	strb	r3, [r7, #14]
	if (motor == left) {
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d131      	bne.n	8002b8e <vMotorsSetPWMTimer+0x7e>
		pTimPWM->Instance->CCR2 = (PWM*1000) - 1;
 8002b2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b2e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002c14 <vMotorsSetPWMTimer+0x104>
 8002b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b3e:	4b36      	ldr	r3, [pc, #216]	@ (8002c18 <vMotorsSetPWMTimer+0x108>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b48:	ee17 2a90 	vmov	r2, s15
 8002b4c:	639a      	str	r2, [r3, #56]	@ 0x38

		if (rotation) {
 8002b4e:	7bbb      	ldrb	r3, [r7, #14]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00c      	beq.n	8002b6e <vMotorsSetPWMTimer+0x5e>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 1);
 8002b54:	2201      	movs	r2, #1
 8002b56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b5a:	4830      	ldr	r0, [pc, #192]	@ (8002c1c <vMotorsSetPWMTimer+0x10c>)
 8002b5c:	f002 f9bc 	bl	8004ed8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 0);
 8002b60:	2200      	movs	r2, #0
 8002b62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b66:	482d      	ldr	r0, [pc, #180]	@ (8002c1c <vMotorsSetPWMTimer+0x10c>)
 8002b68:	f002 f9b6 	bl	8004ed8 <HAL_GPIO_WritePin>
 8002b6c:	e043      	b.n	8002bf6 <vMotorsSetPWMTimer+0xe6>
		} else if (!rotation) {
 8002b6e:	7bbb      	ldrb	r3, [r7, #14]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d140      	bne.n	8002bf6 <vMotorsSetPWMTimer+0xe6>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 0);
 8002b74:	2200      	movs	r2, #0
 8002b76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b7a:	4828      	ldr	r0, [pc, #160]	@ (8002c1c <vMotorsSetPWMTimer+0x10c>)
 8002b7c:	f002 f9ac 	bl	8004ed8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 1);
 8002b80:	2201      	movs	r2, #1
 8002b82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b86:	4825      	ldr	r0, [pc, #148]	@ (8002c1c <vMotorsSetPWMTimer+0x10c>)
 8002b88:	f002 f9a6 	bl	8004ed8 <HAL_GPIO_WritePin>
 8002b8c:	e033      	b.n	8002bf6 <vMotorsSetPWMTimer+0xe6>
		}
	} else if (motor == right) {
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d130      	bne.n	8002bf6 <vMotorsSetPWMTimer+0xe6>
		pTimPWM->Instance->CCR1 = (PWM*1000) - 1;
 8002b94:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b98:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002c14 <vMotorsSetPWMTimer+0x104>
 8002b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ba4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <vMotorsSetPWMTimer+0x108>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb2:	ee17 2a90 	vmov	r2, s15
 8002bb6:	635a      	str	r2, [r3, #52]	@ 0x34

		if (rotation) {
 8002bb8:	7bbb      	ldrb	r3, [r7, #14]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <vMotorsSetPWMTimer+0xc8>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 1);
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2180      	movs	r1, #128	@ 0x80
 8002bc2:	4816      	ldr	r0, [pc, #88]	@ (8002c1c <vMotorsSetPWMTimer+0x10c>)
 8002bc4:	f002 f988 	bl	8004ed8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002bce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bd2:	f002 f981 	bl	8004ed8 <HAL_GPIO_WritePin>
 8002bd6:	e00e      	b.n	8002bf6 <vMotorsSetPWMTimer+0xe6>
		} else if (!rotation) {
 8002bd8:	7bbb      	ldrb	r3, [r7, #14]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10b      	bne.n	8002bf6 <vMotorsSetPWMTimer+0xe6>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2180      	movs	r1, #128	@ 0x80
 8002be2:	480e      	ldr	r0, [pc, #56]	@ (8002c1c <vMotorsSetPWMTimer+0x10c>)
 8002be4:	f002 f978 	bl	8004ed8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 1);
 8002be8:	2201      	movs	r2, #1
 8002bea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002bee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bf2:	f002 f971 	bl	8004ed8 <HAL_GPIO_WritePin>
		}
	}
	usTimeOn = duration;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <vMotorsSetPWMTimer+0x110>)
 8002bfc:	801a      	strh	r2, [r3, #0]
	ucDurationCounter = 0;
 8002bfe:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <vMotorsSetPWMTimer+0x114>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c04:	2032      	movs	r0, #50	@ 0x32
 8002c06:	f001 fc7c 	bl	8004502 <HAL_NVIC_EnableIRQ>

//	vMotorsSetOff(motor);
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	447a0000 	.word	0x447a0000
 8002c18:	20000794 	.word	0x20000794
 8002c1c:	48000400 	.word	0x48000400
 8002c20:	2000079e 	.word	0x2000079e
 8002c24:	2000079c 	.word	0x2000079c

08002c28 <vMotorsSetOff>:

void vMotorsSetOff(char motor) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
	if (motor == left) {
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d111      	bne.n	8002c5c <vMotorsSetOff+0x34>
		pTimPWM->Instance->CCR2 = 0;
 8002c38:	4b14      	ldr	r3, [pc, #80]	@ (8002c8c <vMotorsSetOff+0x64>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	639a      	str	r2, [r3, #56]	@ 0x38

		HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c48:	4811      	ldr	r0, [pc, #68]	@ (8002c90 <vMotorsSetOff+0x68>)
 8002c4a:	f002 f945 	bl	8004ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c54:	480e      	ldr	r0, [pc, #56]	@ (8002c90 <vMotorsSetOff+0x68>)
 8002c56:	f002 f93f 	bl	8004ed8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
		HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);

	}
}
 8002c5a:	e013      	b.n	8002c84 <vMotorsSetOff+0x5c>
	} else if (motor == right) {
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d110      	bne.n	8002c84 <vMotorsSetOff+0x5c>
		pTimPWM->Instance->CCR1 = 0;
 8002c62:	4b0a      	ldr	r3, [pc, #40]	@ (8002c8c <vMotorsSetOff+0x64>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2180      	movs	r1, #128	@ 0x80
 8002c70:	4807      	ldr	r0, [pc, #28]	@ (8002c90 <vMotorsSetOff+0x68>)
 8002c72:	f002 f931 	bl	8004ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);
 8002c76:	2200      	movs	r2, #0
 8002c78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c80:	f002 f92a 	bl	8004ed8 <HAL_GPIO_WritePin>
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000794 	.word	0x20000794
 8002c90:	48000400 	.word	0x48000400

08002c94 <vMotorsDurationCallback>:
//						many interruptions for stop the motor based on usTimeOn (duration set) then	   //
//						stops the motors.															   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vMotorsDurationCallback(){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
	if((ucDurationCounter*10)==usTimeOn){
 8002c98:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <vMotorsDurationCallback+0x4c>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <vMotorsDurationCallback+0x50>)
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d10f      	bne.n	8002cd0 <vMotorsDurationCallback+0x3c>
		vMotorsSetOff(left);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7ff ffb9 	bl	8002c28 <vMotorsSetOff>
		vMotorsSetOff(right);
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f7ff ffb6 	bl	8002c28 <vMotorsSetOff>
		usTimeOn = 0;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <vMotorsDurationCallback+0x50>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	801a      	strh	r2, [r3, #0]
		ucDurationCounter = 0;
 8002cc2:	4b07      	ldr	r3, [pc, #28]	@ (8002ce0 <vMotorsDurationCallback+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8002cc8:	2032      	movs	r0, #50	@ 0x32
 8002cca:	f001 fc28 	bl	800451e <HAL_NVIC_DisableIRQ>
	}
	else
	{
		ucDurationCounter++;
	}
}
 8002cce:	e005      	b.n	8002cdc <vMotorsDurationCallback+0x48>
		ucDurationCounter++;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	@ (8002ce0 <vMotorsDurationCallback+0x4c>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	4b01      	ldr	r3, [pc, #4]	@ (8002ce0 <vMotorsDurationCallback+0x4c>)
 8002cda:	701a      	strb	r2, [r3, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	2000079c 	.word	0x2000079c
 8002ce4:	2000079e 	.word	0x2000079e

08002ce8 <vPidInit>:
/* Method description: Initialize the PID controller*/
/* Input params:       n/a                          */
/* Output params:      n/a                          */
/* ************************************************ */
pid_data_type vPidInit(pid_data_type xPidConfig, float fKp, float fKi, float fKd, unsigned short usIntSizeMs, float fOutputSaturation)
{
 8002ce8:	b084      	sub	sp, #16
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b088      	sub	sp, #32
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6178      	str	r0, [r7, #20]
 8002cf2:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002cfa:	ed87 0a04 	vstr	s0, [r7, #16]
 8002cfe:	edc7 0a03 	vstr	s1, [r7, #12]
 8002d02:	ed87 1a02 	vstr	s2, [r7, #8]
 8002d06:	edc7 1a01 	vstr	s3, [r7, #4]
	xPidConfig.fKp = fKp;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	xPidConfig.fKd = fKd;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	637b      	str	r3, [r7, #52]	@ 0x34
	xPidConfig.fKi = fKi;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	633b      	str	r3, [r7, #48]	@ 0x30
	xPidConfig.fError_previous = 0;
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
	xPidConfig.fError_sum = 0.0;
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// Saturates Integrator size (up to 10 s)
	if((usIntSizeMs/UPDATE_RATE_MS)> INTEGRATOR_MAX_SIZE)
 8002d22:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8002d26:	f242 7273 	movw	r2, #10099	@ 0x2773
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d903      	bls.n	8002d36 <vPidInit+0x4e>
	  usIntSizeMs = INTEGRATOR_MAX_SIZE * UPDATE_RATE_MS;
 8002d2e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002d32:	f8a7 31e8 	strh.w	r3, [r7, #488]	@ 0x1e8

	xPidConfig.usIntegratorSize = usIntSizeMs/UPDATE_RATE_MS;
 8002d36:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8002d3a:	4a17      	ldr	r2, [pc, #92]	@ (8002d98 <vPidInit+0xb0>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

	xPidConfig.fOutputSaturation = fOutputSaturation;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	647b      	str	r3, [r7, #68]	@ 0x44
	xPidConfig.usIntegratorCount = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	for (int i =0; i<INTEGRATOR_MAX_SIZE; i++){
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	e00b      	b.n	8002d70 <vPidInit+0x88>
		xPidConfig.fIntegratorBuffer[i] = 0;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	330a      	adds	r3, #10
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	3328      	adds	r3, #40	@ 0x28
 8002d60:	443b      	add	r3, r7
 8002d62:	3308      	adds	r3, #8
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
	for (int i =0; i<INTEGRATOR_MAX_SIZE; i++){
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b63      	cmp	r3, #99	@ 0x63
 8002d74:	ddf0      	ble.n	8002d58 <vPidInit+0x70>
	}
	return xPidConfig;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d7e:	f44f 72de 	mov.w	r2, #444	@ 0x1bc
 8002d82:	4619      	mov	r1, r3
 8002d84:	f00a fa97 	bl	800d2b6 <memcpy>
}
 8002d88:	6978      	ldr	r0, [r7, #20]
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d92:	b004      	add	sp, #16
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	51eb851f 	.word	0x51eb851f
 8002d9c:	00000000 	.word	0x00000000

08002da0 <fPidUpdateData>:
/*                     fReferenceValue: Value used as */
/*                     control reference              */
/* Output params:      float: New Control effort      */
/* ************************************************** */
float fPidUpdateData(pid_data_type xPidConfig, float fSensorValue, float fSetValue)
{
 8002da0:	b084      	sub	sp, #16
 8002da2:	b5b0      	push	{r4, r5, r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	f107 0418 	add.w	r4, r7, #24
 8002dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002db0:	ed87 0a01 	vstr	s0, [r7, #4]
 8002db4:	edc7 0a00 	vstr	s1, [r7]
//	float fError, fDifference, fOut;

	// Proportional error
	xPidConfig.fError = fSetValue - fSensorValue;
 8002db8:	ed97 7a00 	vldr	s14, [r7]
 8002dbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	//Ingtegral error
	xPidConfig.fError_sum = xPidConfig.fError_sum - xPidConfig.fIntegratorBuffer[xPidConfig.usIntegratorCount] + xPidConfig.fError;
 8002dc8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002dcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002dd0:	330a      	adds	r3, #10
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	3318      	adds	r3, #24
 8002dd6:	443b      	add	r3, r7
 8002dd8:	3304      	adds	r3, #4
 8002dda:	edd3 7a00 	vldr	s15, [r3]
 8002dde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002de2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dea:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	xPidConfig.fIntegratorBuffer[xPidConfig.usIntegratorCount] = xPidConfig.fError;
 8002dee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002df2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002df4:	330a      	adds	r3, #10
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	3318      	adds	r3, #24
 8002dfa:	443b      	add	r3, r7
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	601a      	str	r2, [r3, #0]

	if(++xPidConfig.usIntegratorCount >= xPidConfig.usIntegratorSize)
 8002e00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e04:	3301      	adds	r3, #1
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8002e0c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002e10:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d302      	bcc.n	8002e1c <fPidUpdateData+0x7c>
		xPidConfig.usIntegratorCount = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

	// Differential error
	xPidConfig.fDifference = (xPidConfig.fError - xPidConfig.fError_previous);
 8002e1c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002e20:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e28:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	xPidConfig.fOut = xPidConfig.fKp * xPidConfig.fError
 8002e2c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e30:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e38:	ee17 0a90 	vmov	r0, s15
 8002e3c:	f7fd fbac 	bl	8000598 <__aeabi_f2d>
 8002e40:	4604      	mov	r4, r0
 8002e42:	460d      	mov	r5, r1
		 + xPidConfig.fKi * xPidConfig.fError_sum * UPDATE_RATE
 8002e44:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e48:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e50:	ee17 0a90 	vmov	r0, s15
 8002e54:	f7fd fba0 	bl	8000598 <__aeabi_f2d>
 8002e58:	a327      	add	r3, pc, #156	@ (adr r3, 8002ef8 <fPidUpdateData+0x158>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f7fd fbf3 	bl	8000648 <__aeabi_dmul>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4620      	mov	r0, r4
 8002e68:	4629      	mov	r1, r5
 8002e6a:	f7fd fa37 	bl	80002dc <__adddf3>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4614      	mov	r4, r2
 8002e74:	461d      	mov	r5, r3
		 + xPidConfig.fKd * xPidConfig.fDifference / UPDATE_RATE;
 8002e76:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e7a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e82:	ee17 0a90 	vmov	r0, s15
 8002e86:	f7fd fb87 	bl	8000598 <__aeabi_f2d>
 8002e8a:	a31b      	add	r3, pc, #108	@ (adr r3, 8002ef8 <fPidUpdateData+0x158>)
 8002e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e90:	f7fd fd04 	bl	800089c <__aeabi_ddiv>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4620      	mov	r0, r4
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	f7fd fa1e 	bl	80002dc <__adddf3>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f7fd fec6 	bl	8000c38 <__aeabi_d2f>
 8002eac:	4603      	mov	r3, r0
	xPidConfig.fOut = xPidConfig.fKp * xPidConfig.fError
 8002eae:	63fb      	str	r3, [r7, #60]	@ 0x3c

	xPidConfig.fError_previous = xPidConfig.fError;
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24

    // Output Saturation
//	if(isnan(fOut))
//		fOut=0;
	if(xPidConfig.fOut > xPidConfig.fOutputSaturation)
 8002eb4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002eb8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec4:	dd02      	ble.n	8002ecc <fPidUpdateData+0x12c>
		xPidConfig.fOut = xPidConfig.fOutputSaturation;
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eca:	e009      	b.n	8002ee0 <fPidUpdateData+0x140>
	else
		if (xPidConfig.fOut < 0)
 8002ecc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002ed0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed8:	d502      	bpl.n	8002ee0 <fPidUpdateData+0x140>
			xPidConfig.fOut = 0;
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	63fb      	str	r3, [r7, #60]	@ 0x3c

	return xPidConfig.fOut;
 8002ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ee2:	ee07 3a90 	vmov	s15, r3
}
 8002ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ef2:	b004      	add	sp, #16
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	9999999a 	.word	0x9999999a
 8002efc:	3fb99999 	.word	0x3fb99999

08002f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f06:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <HAL_MspInit+0x44>)
 8002f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f44 <HAL_MspInit+0x44>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f12:	4b0c      	ldr	r3, [pc, #48]	@ (8002f44 <HAL_MspInit+0x44>)
 8002f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <HAL_MspInit+0x44>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f22:	4a08      	ldr	r2, [pc, #32]	@ (8002f44 <HAL_MspInit+0x44>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f28:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_MspInit+0x44>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002f36:	f003 ff4b 	bl	8006dd0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000

08002f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f4c:	bf00      	nop
 8002f4e:	e7fd      	b.n	8002f4c <NMI_Handler+0x4>

08002f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f54:	bf00      	nop
 8002f56:	e7fd      	b.n	8002f54 <HardFault_Handler+0x4>

08002f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <MemManage_Handler+0x4>

08002f60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <BusFault_Handler+0x4>

08002f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f6c:	bf00      	nop
 8002f6e:	e7fd      	b.n	8002f6c <UsageFault_Handler+0x4>

08002f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f9e:	f001 f957 	bl	8004250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002fac:	4802      	ldr	r0, [pc, #8]	@ (8002fb8 <DMA1_Channel3_IRQHandler+0x10>)
 8002fae:	f001 fcb4 	bl	800491a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000308 	.word	0x20000308

08002fbc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002fc0:	4802      	ldr	r0, [pc, #8]	@ (8002fcc <DMA1_Channel4_IRQHandler+0x10>)
 8002fc2:	f001 fcaa 	bl	800491a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000368 	.word	0x20000368

08002fd0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fd4:	4803      	ldr	r0, [pc, #12]	@ (8002fe4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002fd6:	f005 fa73 	bl	80084c0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002fda:	4803      	ldr	r0, [pc, #12]	@ (8002fe8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002fdc:	f005 fa70 	bl	80084c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	200007a4 	.word	0x200007a4
 8002fe8:	20000920 	.word	0x20000920

08002fec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ff0:	4803      	ldr	r0, [pc, #12]	@ (8003000 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8002ff2:	f005 fa65 	bl	80084c0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002ff6:	4803      	ldr	r0, [pc, #12]	@ (8003004 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002ff8:	f005 fa62 	bl	80084c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	200007a4 	.word	0x200007a4
 8003004:	2000096c 	.word	0x2000096c

08003008 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800300c:	4802      	ldr	r0, [pc, #8]	@ (8003018 <TIM2_IRQHandler+0x10>)
 800300e:	f005 fa57 	bl	80084c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200007f0 	.word	0x200007f0

0800301c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003020:	4802      	ldr	r0, [pc, #8]	@ (800302c <TIM3_IRQHandler+0x10>)
 8003022:	f005 fa4d 	bl	80084c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2000083c 	.word	0x2000083c

08003030 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003034:	4802      	ldr	r0, [pc, #8]	@ (8003040 <I2C2_EV_IRQHandler+0x10>)
 8003036:	f002 f92f 	bl	8005298 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200002b4 	.word	0x200002b4

08003044 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003048:	4802      	ldr	r0, [pc, #8]	@ (8003054 <I2C2_ER_IRQHandler+0x10>)
 800304a:	f002 f93f 	bl	80052cc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200002b4 	.word	0x200002b4

08003058 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800305c:	4802      	ldr	r0, [pc, #8]	@ (8003068 <USART1_IRQHandler+0x10>)
 800305e:	f006 ff9f 	bl	8009fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000b48 	.word	0x20000b48

0800306c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003070:	4802      	ldr	r0, [pc, #8]	@ (800307c <USART3_IRQHandler+0x10>)
 8003072:	f006 ff95 	bl	8009fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000bdc 	.word	0x20000bdc

08003080 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003084:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003088:	f001 ff3e 	bl	8004f08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}

08003090 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003094:	4802      	ldr	r0, [pc, #8]	@ (80030a0 <TIM5_IRQHandler+0x10>)
 8003096:	f005 fa13 	bl	80084c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000888 	.word	0x20000888

080030a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030a8:	4802      	ldr	r0, [pc, #8]	@ (80030b4 <TIM6_DAC_IRQHandler+0x10>)
 80030aa:	f005 fa09 	bl	80084c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200008d4 	.word	0x200008d4

080030b8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80030bc:	4802      	ldr	r0, [pc, #8]	@ (80030c8 <LPUART1_IRQHandler+0x10>)
 80030be:	f006 ff6f 	bl	8009fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000ab4 	.word	0x20000ab4

080030cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return 1;
 80030d0:	2301      	movs	r3, #1
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <_kill>:

int _kill(int pid, int sig)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030e6:	f00a f8b9 	bl	800d25c <__errno>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2216      	movs	r2, #22
 80030ee:	601a      	str	r2, [r3, #0]
  return -1;
 80030f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_exit>:

void _exit (int status)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003104:	f04f 31ff 	mov.w	r1, #4294967295
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ffe7 	bl	80030dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800310e:	bf00      	nop
 8003110:	e7fd      	b.n	800310e <_exit+0x12>

08003112 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e00a      	b.n	800313a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003124:	f3af 8000 	nop.w
 8003128:	4601      	mov	r1, r0
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	60ba      	str	r2, [r7, #8]
 8003130:	b2ca      	uxtb	r2, r1
 8003132:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	3301      	adds	r3, #1
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	429a      	cmp	r2, r3
 8003140:	dbf0      	blt.n	8003124 <_read+0x12>
  }

  return len;
 8003142:	687b      	ldr	r3, [r7, #4]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e009      	b.n	8003172 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	60ba      	str	r2, [r7, #8]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	3301      	adds	r3, #1
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	429a      	cmp	r2, r3
 8003178:	dbf1      	blt.n	800315e <_write+0x12>
  }
  return len;
 800317a:	687b      	ldr	r3, [r7, #4]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <_close>:

int _close(int file)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800318c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031ac:	605a      	str	r2, [r3, #4]
  return 0;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <_isatty>:

int _isatty(int file)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031c4:	2301      	movs	r3, #1
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b085      	sub	sp, #20
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031f4:	4a14      	ldr	r2, [pc, #80]	@ (8003248 <_sbrk+0x5c>)
 80031f6:	4b15      	ldr	r3, [pc, #84]	@ (800324c <_sbrk+0x60>)
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003200:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <_sbrk+0x64>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003208:	4b11      	ldr	r3, [pc, #68]	@ (8003250 <_sbrk+0x64>)
 800320a:	4a12      	ldr	r2, [pc, #72]	@ (8003254 <_sbrk+0x68>)
 800320c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800320e:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <_sbrk+0x64>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	429a      	cmp	r2, r3
 800321a:	d207      	bcs.n	800322c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800321c:	f00a f81e 	bl	800d25c <__errno>
 8003220:	4603      	mov	r3, r0
 8003222:	220c      	movs	r2, #12
 8003224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295
 800322a:	e009      	b.n	8003240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800322c:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <_sbrk+0x64>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003232:	4b07      	ldr	r3, [pc, #28]	@ (8003250 <_sbrk+0x64>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	4a05      	ldr	r2, [pc, #20]	@ (8003250 <_sbrk+0x64>)
 800323c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20020000 	.word	0x20020000
 800324c:	00000400 	.word	0x00000400
 8003250:	200007a0 	.word	0x200007a0
 8003254:	20000dc0 	.word	0x20000dc0

08003258 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800325c:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <SystemInit+0x20>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003262:	4a05      	ldr	r2, [pc, #20]	@ (8003278 <SystemInit+0x20>)
 8003264:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b098      	sub	sp, #96	@ 0x60
 8003280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003282:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800328e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	611a      	str	r2, [r3, #16]
 800329e:	615a      	str	r2, [r3, #20]
 80032a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032a2:	1d3b      	adds	r3, r7, #4
 80032a4:	2234      	movs	r2, #52	@ 0x34
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f009 ff76 	bl	800d19a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032ae:	4b41      	ldr	r3, [pc, #260]	@ (80033b4 <MX_TIM1_Init+0x138>)
 80032b0:	4a41      	ldr	r2, [pc, #260]	@ (80033b8 <MX_TIM1_Init+0x13c>)
 80032b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 85-1;
 80032b4:	4b3f      	ldr	r3, [pc, #252]	@ (80033b4 <MX_TIM1_Init+0x138>)
 80032b6:	2254      	movs	r2, #84	@ 0x54
 80032b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ba:	4b3e      	ldr	r3, [pc, #248]	@ (80033b4 <MX_TIM1_Init+0x138>)
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80032c0:	4b3c      	ldr	r3, [pc, #240]	@ (80033b4 <MX_TIM1_Init+0x138>)
 80032c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80032c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032c8:	4b3a      	ldr	r3, [pc, #232]	@ (80033b4 <MX_TIM1_Init+0x138>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032ce:	4b39      	ldr	r3, [pc, #228]	@ (80033b4 <MX_TIM1_Init+0x138>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032d4:	4b37      	ldr	r3, [pc, #220]	@ (80033b4 <MX_TIM1_Init+0x138>)
 80032d6:	2280      	movs	r2, #128	@ 0x80
 80032d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80032da:	4836      	ldr	r0, [pc, #216]	@ (80033b4 <MX_TIM1_Init+0x138>)
 80032dc:	f004 fdd4 	bl	8007e88 <HAL_TIM_PWM_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80032e6:	f7ff fb62 	bl	80029ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ea:	2300      	movs	r3, #0
 80032ec:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80032fa:	4619      	mov	r1, r3
 80032fc:	482d      	ldr	r0, [pc, #180]	@ (80033b4 <MX_TIM1_Init+0x138>)
 80032fe:	f006 fb21 	bl	8009944 <HAL_TIMEx_MasterConfigSynchronization>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003308:	f7ff fb51 	bl	80029ae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800330c:	2360      	movs	r3, #96	@ 0x60
 800330e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003314:	2300      	movs	r3, #0
 8003316:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003318:	2300      	movs	r3, #0
 800331a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800331c:	2300      	movs	r3, #0
 800331e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003320:	2300      	movs	r3, #0
 8003322:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003324:	2300      	movs	r3, #0
 8003326:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003328:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800332c:	2200      	movs	r2, #0
 800332e:	4619      	mov	r1, r3
 8003330:	4820      	ldr	r0, [pc, #128]	@ (80033b4 <MX_TIM1_Init+0x138>)
 8003332:	f005 fab1 	bl	8008898 <HAL_TIM_PWM_ConfigChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800333c:	f7ff fb37 	bl	80029ae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003340:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003344:	2204      	movs	r2, #4
 8003346:	4619      	mov	r1, r3
 8003348:	481a      	ldr	r0, [pc, #104]	@ (80033b4 <MX_TIM1_Init+0x138>)
 800334a:	f005 faa5 	bl	8008898 <HAL_TIM_PWM_ConfigChannel>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003354:	f7ff fb2b 	bl	80029ae <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003358:	2300      	movs	r3, #0
 800335a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800335c:	2300      	movs	r3, #0
 800335e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800336c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003370:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003376:	2300      	movs	r3, #0
 8003378:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800337e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003382:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003388:	2300      	movs	r3, #0
 800338a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800338c:	2300      	movs	r3, #0
 800338e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	4619      	mov	r1, r3
 8003394:	4807      	ldr	r0, [pc, #28]	@ (80033b4 <MX_TIM1_Init+0x138>)
 8003396:	f006 fb6b 	bl	8009a70 <HAL_TIMEx_ConfigBreakDeadTime>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80033a0:	f7ff fb05 	bl	80029ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80033a4:	4803      	ldr	r0, [pc, #12]	@ (80033b4 <MX_TIM1_Init+0x138>)
 80033a6:	f000 fbe7 	bl	8003b78 <HAL_TIM_MspPostInit>

}
 80033aa:	bf00      	nop
 80033ac:	3760      	adds	r7, #96	@ 0x60
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200007a4 	.word	0x200007a4
 80033b8:	40012c00 	.word	0x40012c00

080033bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033c2:	f107 0310 	add.w	r3, r7, #16
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	609a      	str	r2, [r3, #8]
 80033ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033da:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <MX_TIM2_Init+0x98>)
 80033dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80033e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 80033e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003454 <MX_TIM2_Init+0x98>)
 80033e4:	22a9      	movs	r2, #169	@ 0xa9
 80033e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003454 <MX_TIM2_Init+0x98>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80033ee:	4b19      	ldr	r3, [pc, #100]	@ (8003454 <MX_TIM2_Init+0x98>)
 80033f0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80033f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033f6:	4b17      	ldr	r3, [pc, #92]	@ (8003454 <MX_TIM2_Init+0x98>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033fc:	4b15      	ldr	r3, [pc, #84]	@ (8003454 <MX_TIM2_Init+0x98>)
 80033fe:	2280      	movs	r2, #128	@ 0x80
 8003400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003402:	4814      	ldr	r0, [pc, #80]	@ (8003454 <MX_TIM2_Init+0x98>)
 8003404:	f004 fc70 	bl	8007ce8 <HAL_TIM_Base_Init>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800340e:	f7ff face 	bl	80029ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003416:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003418:	f107 0310 	add.w	r3, r7, #16
 800341c:	4619      	mov	r1, r3
 800341e:	480d      	ldr	r0, [pc, #52]	@ (8003454 <MX_TIM2_Init+0x98>)
 8003420:	f005 fb4e 	bl	8008ac0 <HAL_TIM_ConfigClockSource>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800342a:	f7ff fac0 	bl	80029ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4806      	ldr	r0, [pc, #24]	@ (8003454 <MX_TIM2_Init+0x98>)
 800343c:	f006 fa82 	bl	8009944 <HAL_TIMEx_MasterConfigSynchronization>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003446:	f7ff fab2 	bl	80029ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800344a:	bf00      	nop
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200007f0 	.word	0x200007f0

08003458 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08c      	sub	sp, #48	@ 0x30
 800345c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800345e:	f107 0320 	add.w	r3, r7, #32
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003478:	1d3b      	adds	r3, r7, #4
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003484:	4b2b      	ldr	r3, [pc, #172]	@ (8003534 <MX_TIM3_Init+0xdc>)
 8003486:	4a2c      	ldr	r2, [pc, #176]	@ (8003538 <MX_TIM3_Init+0xe0>)
 8003488:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 260-1;
 800348a:	4b2a      	ldr	r3, [pc, #168]	@ (8003534 <MX_TIM3_Init+0xdc>)
 800348c:	f240 1203 	movw	r2, #259	@ 0x103
 8003490:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003492:	4b28      	ldr	r3, [pc, #160]	@ (8003534 <MX_TIM3_Init+0xdc>)
 8003494:	2200      	movs	r2, #0
 8003496:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003498:	4b26      	ldr	r3, [pc, #152]	@ (8003534 <MX_TIM3_Init+0xdc>)
 800349a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800349e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a0:	4b24      	ldr	r3, [pc, #144]	@ (8003534 <MX_TIM3_Init+0xdc>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034a6:	4b23      	ldr	r3, [pc, #140]	@ (8003534 <MX_TIM3_Init+0xdc>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034ac:	4821      	ldr	r0, [pc, #132]	@ (8003534 <MX_TIM3_Init+0xdc>)
 80034ae:	f004 fc1b 	bl	8007ce8 <HAL_TIM_Base_Init>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80034b8:	f7ff fa79 	bl	80029ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034c2:	f107 0320 	add.w	r3, r7, #32
 80034c6:	4619      	mov	r1, r3
 80034c8:	481a      	ldr	r0, [pc, #104]	@ (8003534 <MX_TIM3_Init+0xdc>)
 80034ca:	f005 faf9 	bl	8008ac0 <HAL_TIM_ConfigClockSource>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80034d4:	f7ff fa6b 	bl	80029ae <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80034d8:	4816      	ldr	r0, [pc, #88]	@ (8003534 <MX_TIM3_Init+0xdc>)
 80034da:	f004 fe3f 	bl	800815c <HAL_TIM_IC_Init>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80034e4:	f7ff fa63 	bl	80029ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	4619      	mov	r1, r3
 80034f6:	480f      	ldr	r0, [pc, #60]	@ (8003534 <MX_TIM3_Init+0xdc>)
 80034f8:	f006 fa24 	bl	8009944 <HAL_TIMEx_MasterConfigSynchronization>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003502:	f7ff fa54 	bl	80029ae <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003506:	230a      	movs	r3, #10
 8003508:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800350a:	2301      	movs	r3, #1
 800350c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	2200      	movs	r2, #0
 800351a:	4619      	mov	r1, r3
 800351c:	4805      	ldr	r0, [pc, #20]	@ (8003534 <MX_TIM3_Init+0xdc>)
 800351e:	f005 f91e 	bl	800875e <HAL_TIM_IC_ConfigChannel>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003528:	f7ff fa41 	bl	80029ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800352c:	bf00      	nop
 800352e:	3730      	adds	r7, #48	@ 0x30
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	2000083c 	.word	0x2000083c
 8003538:	40000400 	.word	0x40000400

0800353c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003542:	f107 0310 	add.w	r3, r7, #16
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003550:	1d3b      	adds	r3, r7, #4
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800355a:	4b1d      	ldr	r3, [pc, #116]	@ (80035d0 <MX_TIM5_Init+0x94>)
 800355c:	4a1d      	ldr	r2, [pc, #116]	@ (80035d4 <MX_TIM5_Init+0x98>)
 800355e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 8003560:	4b1b      	ldr	r3, [pc, #108]	@ (80035d0 <MX_TIM5_Init+0x94>)
 8003562:	22a9      	movs	r2, #169	@ 0xa9
 8003564:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003566:	4b1a      	ldr	r3, [pc, #104]	@ (80035d0 <MX_TIM5_Init+0x94>)
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 800356c:	4b18      	ldr	r3, [pc, #96]	@ (80035d0 <MX_TIM5_Init+0x94>)
 800356e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003572:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003574:	4b16      	ldr	r3, [pc, #88]	@ (80035d0 <MX_TIM5_Init+0x94>)
 8003576:	2200      	movs	r2, #0
 8003578:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800357a:	4b15      	ldr	r3, [pc, #84]	@ (80035d0 <MX_TIM5_Init+0x94>)
 800357c:	2200      	movs	r2, #0
 800357e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003580:	4813      	ldr	r0, [pc, #76]	@ (80035d0 <MX_TIM5_Init+0x94>)
 8003582:	f004 fbb1 	bl	8007ce8 <HAL_TIM_Base_Init>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800358c:	f7ff fa0f 	bl	80029ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003594:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003596:	f107 0310 	add.w	r3, r7, #16
 800359a:	4619      	mov	r1, r3
 800359c:	480c      	ldr	r0, [pc, #48]	@ (80035d0 <MX_TIM5_Init+0x94>)
 800359e:	f005 fa8f 	bl	8008ac0 <HAL_TIM_ConfigClockSource>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80035a8:	f7ff fa01 	bl	80029ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ac:	2300      	movs	r3, #0
 80035ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	4619      	mov	r1, r3
 80035b8:	4805      	ldr	r0, [pc, #20]	@ (80035d0 <MX_TIM5_Init+0x94>)
 80035ba:	f006 f9c3 	bl	8009944 <HAL_TIMEx_MasterConfigSynchronization>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80035c4:	f7ff f9f3 	bl	80029ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80035c8:	bf00      	nop
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000888 	.word	0x20000888
 80035d4:	40000c00 	.word	0x40000c00

080035d8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035de:	1d3b      	adds	r3, r7, #4
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80035e8:	4b15      	ldr	r3, [pc, #84]	@ (8003640 <MX_TIM6_Init+0x68>)
 80035ea:	4a16      	ldr	r2, [pc, #88]	@ (8003644 <MX_TIM6_Init+0x6c>)
 80035ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1700-1;
 80035ee:	4b14      	ldr	r3, [pc, #80]	@ (8003640 <MX_TIM6_Init+0x68>)
 80035f0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80035f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035f6:	4b12      	ldr	r3, [pc, #72]	@ (8003640 <MX_TIM6_Init+0x68>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80035fc:	4b10      	ldr	r3, [pc, #64]	@ (8003640 <MX_TIM6_Init+0x68>)
 80035fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003602:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003604:	4b0e      	ldr	r3, [pc, #56]	@ (8003640 <MX_TIM6_Init+0x68>)
 8003606:	2200      	movs	r2, #0
 8003608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800360a:	480d      	ldr	r0, [pc, #52]	@ (8003640 <MX_TIM6_Init+0x68>)
 800360c:	f004 fb6c 	bl	8007ce8 <HAL_TIM_Base_Init>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003616:	f7ff f9ca 	bl	80029ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	4619      	mov	r1, r3
 8003626:	4806      	ldr	r0, [pc, #24]	@ (8003640 <MX_TIM6_Init+0x68>)
 8003628:	f006 f98c 	bl	8009944 <HAL_TIMEx_MasterConfigSynchronization>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003632:	f7ff f9bc 	bl	80029ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	200008d4 	.word	0x200008d4
 8003644:	40001000 	.word	0x40001000

08003648 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800364e:	463b      	mov	r3, r7
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800365a:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <MX_TIM16_Init+0x8c>)
 800365c:	4a1e      	ldr	r2, [pc, #120]	@ (80036d8 <MX_TIM16_Init+0x90>)
 800365e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8003660:	4b1c      	ldr	r3, [pc, #112]	@ (80036d4 <MX_TIM16_Init+0x8c>)
 8003662:	22a9      	movs	r2, #169	@ 0xa9
 8003664:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003666:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <MX_TIM16_Init+0x8c>)
 8003668:	2200      	movs	r2, #0
 800366a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 800366c:	4b19      	ldr	r3, [pc, #100]	@ (80036d4 <MX_TIM16_Init+0x8c>)
 800366e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003672:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003674:	4b17      	ldr	r3, [pc, #92]	@ (80036d4 <MX_TIM16_Init+0x8c>)
 8003676:	2200      	movs	r2, #0
 8003678:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800367a:	4b16      	ldr	r3, [pc, #88]	@ (80036d4 <MX_TIM16_Init+0x8c>)
 800367c:	2200      	movs	r2, #0
 800367e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003680:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <MX_TIM16_Init+0x8c>)
 8003682:	2200      	movs	r2, #0
 8003684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003686:	4813      	ldr	r0, [pc, #76]	@ (80036d4 <MX_TIM16_Init+0x8c>)
 8003688:	f004 fb2e 	bl	8007ce8 <HAL_TIM_Base_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8003692:	f7ff f98c 	bl	80029ae <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8003696:	480f      	ldr	r0, [pc, #60]	@ (80036d4 <MX_TIM16_Init+0x8c>)
 8003698:	f004 fd60 	bl	800815c <HAL_TIM_IC_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80036a2:	f7ff f984 	bl	80029ae <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80036a6:	2300      	movs	r3, #0
 80036a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80036aa:	2301      	movs	r3, #1
 80036ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80036b2:	230f      	movs	r3, #15
 80036b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80036b6:	463b      	mov	r3, r7
 80036b8:	2200      	movs	r2, #0
 80036ba:	4619      	mov	r1, r3
 80036bc:	4805      	ldr	r0, [pc, #20]	@ (80036d4 <MX_TIM16_Init+0x8c>)
 80036be:	f005 f84e 	bl	800875e <HAL_TIM_IC_ConfigChannel>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80036c8:	f7ff f971 	bl	80029ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000920 	.word	0x20000920
 80036d8:	40014400 	.word	0x40014400

080036dc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80036e2:	463b      	mov	r3, r7
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80036ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003768 <MX_TIM17_Init+0x8c>)
 80036f0:	4a1e      	ldr	r2, [pc, #120]	@ (800376c <MX_TIM17_Init+0x90>)
 80036f2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 80036f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003768 <MX_TIM17_Init+0x8c>)
 80036f6:	22a9      	movs	r2, #169	@ 0xa9
 80036f8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003768 <MX_TIM17_Init+0x8c>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 8003700:	4b19      	ldr	r3, [pc, #100]	@ (8003768 <MX_TIM17_Init+0x8c>)
 8003702:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003706:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003708:	4b17      	ldr	r3, [pc, #92]	@ (8003768 <MX_TIM17_Init+0x8c>)
 800370a:	2200      	movs	r2, #0
 800370c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800370e:	4b16      	ldr	r3, [pc, #88]	@ (8003768 <MX_TIM17_Init+0x8c>)
 8003710:	2200      	movs	r2, #0
 8003712:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003714:	4b14      	ldr	r3, [pc, #80]	@ (8003768 <MX_TIM17_Init+0x8c>)
 8003716:	2200      	movs	r2, #0
 8003718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800371a:	4813      	ldr	r0, [pc, #76]	@ (8003768 <MX_TIM17_Init+0x8c>)
 800371c:	f004 fae4 	bl	8007ce8 <HAL_TIM_Base_Init>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8003726:	f7ff f942 	bl	80029ae <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 800372a:	480f      	ldr	r0, [pc, #60]	@ (8003768 <MX_TIM17_Init+0x8c>)
 800372c:	f004 fd16 	bl	800815c <HAL_TIM_IC_Init>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8003736:	f7ff f93a 	bl	80029ae <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800373a:	2300      	movs	r3, #0
 800373c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800373e:	2301      	movs	r3, #1
 8003740:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8003746:	230f      	movs	r3, #15
 8003748:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800374a:	463b      	mov	r3, r7
 800374c:	2200      	movs	r2, #0
 800374e:	4619      	mov	r1, r3
 8003750:	4805      	ldr	r0, [pc, #20]	@ (8003768 <MX_TIM17_Init+0x8c>)
 8003752:	f005 f804 	bl	800875e <HAL_TIM_IC_ConfigChannel>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 800375c:	f7ff f927 	bl	80029ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	2000096c 	.word	0x2000096c
 800376c:	40014800 	.word	0x40014800

08003770 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b09c      	sub	sp, #112	@ 0x70
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003776:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003784:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003790:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	611a      	str	r2, [r3, #16]
 80037a0:	615a      	str	r2, [r3, #20]
 80037a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	2234      	movs	r2, #52	@ 0x34
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f009 fcf5 	bl	800d19a <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80037b0:	4b46      	ldr	r3, [pc, #280]	@ (80038cc <MX_TIM20_Init+0x15c>)
 80037b2:	4a47      	ldr	r2, [pc, #284]	@ (80038d0 <MX_TIM20_Init+0x160>)
 80037b4:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 260-1;
 80037b6:	4b45      	ldr	r3, [pc, #276]	@ (80038cc <MX_TIM20_Init+0x15c>)
 80037b8:	f240 1203 	movw	r2, #259	@ 0x103
 80037bc:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037be:	4b43      	ldr	r3, [pc, #268]	@ (80038cc <MX_TIM20_Init+0x15c>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 80037c4:	4b41      	ldr	r3, [pc, #260]	@ (80038cc <MX_TIM20_Init+0x15c>)
 80037c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037ca:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037cc:	4b3f      	ldr	r3, [pc, #252]	@ (80038cc <MX_TIM20_Init+0x15c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80037d2:	4b3e      	ldr	r3, [pc, #248]	@ (80038cc <MX_TIM20_Init+0x15c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037d8:	4b3c      	ldr	r3, [pc, #240]	@ (80038cc <MX_TIM20_Init+0x15c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80037de:	483b      	ldr	r0, [pc, #236]	@ (80038cc <MX_TIM20_Init+0x15c>)
 80037e0:	f004 fa82 	bl	8007ce8 <HAL_TIM_Base_Init>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <MX_TIM20_Init+0x7e>
  {
    Error_Handler();
 80037ea:	f7ff f8e0 	bl	80029ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037f2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80037f4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80037f8:	4619      	mov	r1, r3
 80037fa:	4834      	ldr	r0, [pc, #208]	@ (80038cc <MX_TIM20_Init+0x15c>)
 80037fc:	f005 f960 	bl	8008ac0 <HAL_TIM_ConfigClockSource>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_TIM20_Init+0x9a>
  {
    Error_Handler();
 8003806:	f7ff f8d2 	bl	80029ae <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 800380a:	4830      	ldr	r0, [pc, #192]	@ (80038cc <MX_TIM20_Init+0x15c>)
 800380c:	f004 fb3c 	bl	8007e88 <HAL_TIM_PWM_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <MX_TIM20_Init+0xaa>
  {
    Error_Handler();
 8003816:	f7ff f8ca 	bl	80029ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003822:	2300      	movs	r3, #0
 8003824:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8003826:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800382a:	4619      	mov	r1, r3
 800382c:	4827      	ldr	r0, [pc, #156]	@ (80038cc <MX_TIM20_Init+0x15c>)
 800382e:	f006 f889 	bl	8009944 <HAL_TIMEx_MasterConfigSynchronization>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_TIM20_Init+0xcc>
  {
    Error_Handler();
 8003838:	f7ff f8b9 	bl	80029ae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800383c:	2360      	movs	r3, #96	@ 0x60
 800383e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003844:	2300      	movs	r3, #0
 8003846:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003848:	2300      	movs	r3, #0
 800384a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800384c:	2300      	movs	r3, #0
 800384e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003850:	2300      	movs	r3, #0
 8003852:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003854:	2300      	movs	r3, #0
 8003856:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003858:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800385c:	2200      	movs	r2, #0
 800385e:	4619      	mov	r1, r3
 8003860:	481a      	ldr	r0, [pc, #104]	@ (80038cc <MX_TIM20_Init+0x15c>)
 8003862:	f005 f819 	bl	8008898 <HAL_TIM_PWM_ConfigChannel>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_TIM20_Init+0x100>
  {
    Error_Handler();
 800386c:	f7ff f89f 	bl	80029ae <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003870:	2300      	movs	r3, #0
 8003872:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003888:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003892:	2300      	movs	r3, #0
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003896:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800389a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80038a0:	2300      	movs	r3, #0
 80038a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	4619      	mov	r1, r3
 80038ac:	4807      	ldr	r0, [pc, #28]	@ (80038cc <MX_TIM20_Init+0x15c>)
 80038ae:	f006 f8df 	bl	8009a70 <HAL_TIMEx_ConfigBreakDeadTime>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MX_TIM20_Init+0x14c>
  {
    Error_Handler();
 80038b8:	f7ff f879 	bl	80029ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 80038bc:	4803      	ldr	r0, [pc, #12]	@ (80038cc <MX_TIM20_Init+0x15c>)
 80038be:	f000 f95b 	bl	8003b78 <HAL_TIM_MspPostInit>

}
 80038c2:	bf00      	nop
 80038c4:	3770      	adds	r7, #112	@ 0x70
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	200009b8 	.word	0x200009b8
 80038d0:	40015000 	.word	0x40015000

080038d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a11      	ldr	r2, [pc, #68]	@ (8003928 <HAL_TIM_PWM_MspInit+0x54>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d11b      	bne.n	800391e <HAL_TIM_PWM_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038e6:	4b11      	ldr	r3, [pc, #68]	@ (800392c <HAL_TIM_PWM_MspInit+0x58>)
 80038e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ea:	4a10      	ldr	r2, [pc, #64]	@ (800392c <HAL_TIM_PWM_MspInit+0x58>)
 80038ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80038f2:	4b0e      	ldr	r3, [pc, #56]	@ (800392c <HAL_TIM_PWM_MspInit+0x58>)
 80038f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80038fe:	2200      	movs	r2, #0
 8003900:	2100      	movs	r1, #0
 8003902:	2019      	movs	r0, #25
 8003904:	f000 fde3 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003908:	2019      	movs	r0, #25
 800390a:	f000 fdfa 	bl	8004502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800390e:	2200      	movs	r2, #0
 8003910:	2100      	movs	r1, #0
 8003912:	201a      	movs	r0, #26
 8003914:	f000 fddb 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003918:	201a      	movs	r0, #26
 800391a:	f000 fdf2 	bl	8004502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40021000 	.word	0x40021000

08003930 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b092      	sub	sp, #72	@ 0x48
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003950:	d114      	bne.n	800397c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003952:	4b80      	ldr	r3, [pc, #512]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003956:	4a7f      	ldr	r2, [pc, #508]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6593      	str	r3, [r2, #88]	@ 0x58
 800395e:	4b7d      	ldr	r3, [pc, #500]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	633b      	str	r3, [r7, #48]	@ 0x30
 8003968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	2100      	movs	r1, #0
 800396e:	201c      	movs	r0, #28
 8003970:	f000 fdad 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003974:	201c      	movs	r0, #28
 8003976:	f000 fdc4 	bl	8004502 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 800397a:	e0e6      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM3)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a75      	ldr	r2, [pc, #468]	@ (8003b58 <HAL_TIM_Base_MspInit+0x228>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d130      	bne.n	80039e8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003986:	4b73      	ldr	r3, [pc, #460]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398a:	4a72      	ldr	r2, [pc, #456]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	6593      	str	r3, [r2, #88]	@ 0x58
 8003992:	4b70      	ldr	r3, [pc, #448]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800399c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800399e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 80039a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a2:	4a6c      	ldr	r2, [pc, #432]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 80039a4:	f043 0304 	orr.w	r3, r3, #4
 80039a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 80039ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039b6:	2340      	movs	r3, #64	@ 0x40
 80039b8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ba:	2302      	movs	r3, #2
 80039bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c2:	2300      	movs	r3, #0
 80039c4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039c6:	2302      	movs	r3, #2
 80039c8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039ce:	4619      	mov	r1, r3
 80039d0:	4862      	ldr	r0, [pc, #392]	@ (8003b5c <HAL_TIM_Base_MspInit+0x22c>)
 80039d2:	f001 f8ff 	bl	8004bd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80039d6:	2200      	movs	r2, #0
 80039d8:	2101      	movs	r1, #1
 80039da:	201d      	movs	r0, #29
 80039dc:	f000 fd77 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039e0:	201d      	movs	r0, #29
 80039e2:	f000 fd8e 	bl	8004502 <HAL_NVIC_EnableIRQ>
}
 80039e6:	e0b0      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM5)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003b60 <HAL_TIM_Base_MspInit+0x230>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d114      	bne.n	8003a1c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80039f2:	4b58      	ldr	r3, [pc, #352]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f6:	4a57      	ldr	r2, [pc, #348]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 80039f8:	f043 0308 	orr.w	r3, r3, #8
 80039fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80039fe:	4b55      	ldr	r3, [pc, #340]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	2032      	movs	r0, #50	@ 0x32
 8003a10:	f000 fd5d 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a14:	2032      	movs	r0, #50	@ 0x32
 8003a16:	f000 fd74 	bl	8004502 <HAL_NVIC_EnableIRQ>
}
 8003a1a:	e096      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM6)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a50      	ldr	r2, [pc, #320]	@ (8003b64 <HAL_TIM_Base_MspInit+0x234>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d114      	bne.n	8003a50 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a26:	4b4b      	ldr	r3, [pc, #300]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2a:	4a4a      	ldr	r2, [pc, #296]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003a2c:	f043 0310 	orr.w	r3, r3, #16
 8003a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a32:	4b48      	ldr	r3, [pc, #288]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	623b      	str	r3, [r7, #32]
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2100      	movs	r1, #0
 8003a42:	2036      	movs	r0, #54	@ 0x36
 8003a44:	f000 fd43 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a48:	2036      	movs	r0, #54	@ 0x36
 8003a4a:	f000 fd5a 	bl	8004502 <HAL_NVIC_EnableIRQ>
}
 8003a4e:	e07c      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM16)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a44      	ldr	r2, [pc, #272]	@ (8003b68 <HAL_TIM_Base_MspInit+0x238>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d130      	bne.n	8003abc <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5e:	4a3d      	ldr	r2, [pc, #244]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a64:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a66:	4b3b      	ldr	r3, [pc, #236]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a72:	4b38      	ldr	r3, [pc, #224]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a76:	4a37      	ldr	r2, [pc, #220]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003a78:	f043 0302 	orr.w	r3, r3, #2
 8003a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a7e:	4b35      	ldr	r3, [pc, #212]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a8a:	2310      	movs	r3, #16
 8003a8c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a96:	2300      	movs	r3, #0
 8003a98:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4831      	ldr	r0, [pc, #196]	@ (8003b6c <HAL_TIM_Base_MspInit+0x23c>)
 8003aa6:	f001 f895 	bl	8004bd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	2019      	movs	r0, #25
 8003ab0:	f000 fd0d 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003ab4:	2019      	movs	r0, #25
 8003ab6:	f000 fd24 	bl	8004502 <HAL_NVIC_EnableIRQ>
}
 8003aba:	e046      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM17)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b70 <HAL_TIM_Base_MspInit+0x240>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d130      	bne.n	8003b28 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003ac6:	4b23      	ldr	r3, [pc, #140]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aca:	4a22      	ldr	r2, [pc, #136]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ad0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ad2:	4b20      	ldr	r3, [pc, #128]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ade:	4b1d      	ldr	r3, [pc, #116]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003ae4:	f043 0302 	orr.w	r3, r3, #2
 8003ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aea:	4b1a      	ldr	r3, [pc, #104]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003af6:	2320      	movs	r3, #32
 8003af8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afa:	2302      	movs	r3, #2
 8003afc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b02:	2300      	movs	r3, #0
 8003b04:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8003b06:	230a      	movs	r3, #10
 8003b08:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4816      	ldr	r0, [pc, #88]	@ (8003b6c <HAL_TIM_Base_MspInit+0x23c>)
 8003b12:	f001 f85f 	bl	8004bd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2100      	movs	r1, #0
 8003b1a:	201a      	movs	r0, #26
 8003b1c:	f000 fcd7 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003b20:	201a      	movs	r0, #26
 8003b22:	f000 fcee 	bl	8004502 <HAL_NVIC_EnableIRQ>
}
 8003b26:	e010      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM20)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a11      	ldr	r2, [pc, #68]	@ (8003b74 <HAL_TIM_Base_MspInit+0x244>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d10b      	bne.n	8003b4a <HAL_TIM_Base_MspInit+0x21a>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003b32:	4b08      	ldr	r3, [pc, #32]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b36:	4a07      	ldr	r2, [pc, #28]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003b38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b3e:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <HAL_TIM_Base_MspInit+0x224>)
 8003b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
}
 8003b4a:	bf00      	nop
 8003b4c:	3748      	adds	r7, #72	@ 0x48
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	48000800 	.word	0x48000800
 8003b60:	40000c00 	.word	0x40000c00
 8003b64:	40001000 	.word	0x40001000
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	48000400 	.word	0x48000400
 8003b70:	40014800 	.word	0x40014800
 8003b74:	40015000 	.word	0x40015000

08003b78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	@ 0x28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a22      	ldr	r2, [pc, #136]	@ (8003c20 <HAL_TIM_MspPostInit+0xa8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d11c      	bne.n	8003bd4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b9a:	4b22      	ldr	r3, [pc, #136]	@ (8003c24 <HAL_TIM_MspPostInit+0xac>)
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9e:	4a21      	ldr	r2, [pc, #132]	@ (8003c24 <HAL_TIM_MspPostInit+0xac>)
 8003ba0:	f043 0304 	orr.w	r3, r3, #4
 8003ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c24 <HAL_TIM_MspPostInit+0xac>)
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc6:	f107 0314 	add.w	r3, r7, #20
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4816      	ldr	r0, [pc, #88]	@ (8003c28 <HAL_TIM_MspPostInit+0xb0>)
 8003bce:	f001 f801 	bl	8004bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8003bd2:	e020      	b.n	8003c16 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM20)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a14      	ldr	r2, [pc, #80]	@ (8003c2c <HAL_TIM_MspPostInit+0xb4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d11b      	bne.n	8003c16 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bde:	4b11      	ldr	r3, [pc, #68]	@ (8003c24 <HAL_TIM_MspPostInit+0xac>)
 8003be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be2:	4a10      	ldr	r2, [pc, #64]	@ (8003c24 <HAL_TIM_MspPostInit+0xac>)
 8003be4:	f043 0302 	orr.w	r3, r3, #2
 8003be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bea:	4b0e      	ldr	r3, [pc, #56]	@ (8003c24 <HAL_TIM_MspPostInit+0xac>)
 8003bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003bf6:	2304      	movs	r3, #4
 8003bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c02:	2300      	movs	r3, #0
 8003c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8003c06:	2303      	movs	r3, #3
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c0a:	f107 0314 	add.w	r3, r7, #20
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4807      	ldr	r0, [pc, #28]	@ (8003c30 <HAL_TIM_MspPostInit+0xb8>)
 8003c12:	f000 ffdf 	bl	8004bd4 <HAL_GPIO_Init>
}
 8003c16:	bf00      	nop
 8003c18:	3728      	adds	r7, #40	@ 0x28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40021000 	.word	0x40021000
 8003c28:	48000800 	.word	0x48000800
 8003c2c:	40015000 	.word	0x40015000
 8003c30:	48000400 	.word	0x48000400

08003c34 <vTimerInit>:
#include "timer.h"

int iIndex;
single_timer iActiveTimers[20]; //Consegue guardar 20 contadores diferentes

void vTimerInit() {
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
	iIndex = 0;
 8003c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c78 <vTimerInit+0x44>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 20; i++) {
 8003c40:	2300      	movs	r3, #0
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	e00d      	b.n	8003c62 <vTimerInit+0x2e>
		iActiveTimers[i].iCounter = 0;
 8003c46:	4a0d      	ldr	r2, [pc, #52]	@ (8003c7c <vTimerInit+0x48>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		iActiveTimers[i].iTotalMs = 0;
 8003c50:	4a0a      	ldr	r2, [pc, #40]	@ (8003c7c <vTimerInit+0x48>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4413      	add	r3, r2
 8003c58:	2200      	movs	r2, #0
 8003c5a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 20; i++) {
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b13      	cmp	r3, #19
 8003c66:	ddee      	ble.n	8003c46 <vTimerInit+0x12>
	}
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000a04 	.word	0x20000a04
 8003c7c:	20000a08 	.word	0x20000a08

08003c80 <iSetTimer>:

//set o timer para comecar a contar, conta até total_ms, no timerCode
//Retorna o "codigo' do timer
int iSetTimer(int total_ms) {
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	iActiveTimers[iIndex].iTotalMs = total_ms;
 8003c88:	4b09      	ldr	r3, [pc, #36]	@ (8003cb0 <iSetTimer+0x30>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a09      	ldr	r2, [pc, #36]	@ (8003cb4 <iSetTimer+0x34>)
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	605a      	str	r2, [r3, #4]
	return ++iIndex;
 8003c96:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <iSetTimer+0x30>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	4a04      	ldr	r2, [pc, #16]	@ (8003cb0 <iSetTimer+0x30>)
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	4b03      	ldr	r3, [pc, #12]	@ (8003cb0 <iSetTimer+0x30>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	20000a04 	.word	0x20000a04
 8003cb4:	20000a08 	.word	0x20000a08

08003cb8 <cCountTime>:

// conta (ms) ms, funcao chamada a cada 10 ms, pela main (pTimGeral)
char cCountTime(int ms, int timerCode) {
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
	iActiveTimers[timerCode].iCounter += ms;
 8003cc2:	4a11      	ldr	r2, [pc, #68]	@ (8003d08 <cCountTime+0x50>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	441a      	add	r2, r3
 8003cce:	490e      	ldr	r1, [pc, #56]	@ (8003d08 <cCountTime+0x50>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	if (iActiveTimers[timerCode].iCounter >= iActiveTimers[timerCode].iTotalMs) {
 8003cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8003d08 <cCountTime+0x50>)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003cde:	490a      	ldr	r1, [pc, #40]	@ (8003d08 <cCountTime+0x50>)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	440b      	add	r3, r1
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	db06      	blt.n	8003cfa <cCountTime+0x42>
		iActiveTimers[timerCode].iCounter = 0;
 8003cec:	4a06      	ldr	r2, [pc, #24]	@ (8003d08 <cCountTime+0x50>)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		return 1;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <cCountTime+0x44>
	}

	return 0;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	20000a08 	.word	0x20000a08

08003d0c <vUltrassonicoInit>:
//
// INPUT PARAMS: TIM_HandleTypeDef* pTimerEcoUltrassonicoFrontal ,TIM_HandleTypeDef* TimerTrigger
//
// OUTPUT PARAMS: n/a
// ********************************************** //
void vUltrassonicoInit(TIM_HandleTypeDef* pTimerEcoUltrassonicoFrontal ,TIM_HandleTypeDef* TimerTrigger) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]

  xUltrassonicoData.pTimerEcoUltrassonicoFrontal=pTimerEcoUltrassonicoFrontal;
 8003d16:	4a0f      	ldr	r2, [pc, #60]	@ (8003d54 <vUltrassonicoInit+0x48>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6013      	str	r3, [r2, #0]
  xUltrassonicoData.TimerTrigger= TimerTrigger;
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d54 <vUltrassonicoInit+0x48>)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6053      	str	r3, [r2, #4]
  xUltrassonicoData.Distance=0.0;
 8003d22:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <vUltrassonicoInit+0x48>)
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	609a      	str	r2, [r3, #8]

  HAL_TIM_PWM_Start(xUltrassonicoData.TimerTrigger, TIM_CHANNEL_1);
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d54 <vUltrassonicoInit+0x48>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f004 f901 	bl	8007f38 <HAL_TIM_PWM_Start>
  //Define um pulso de 10us a cada 100ms no trigger, utilizando logica pwm
  xUltrassonicoData.TimerTrigger->Instance->CCR1 = 8;
 8003d36:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <vUltrassonicoInit+0x48>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_TIM_IC_Start_IT(xUltrassonicoData.pTimerEcoUltrassonicoFrontal, TIM_CHANNEL_1);
 8003d40:	4b04      	ldr	r3, [pc, #16]	@ (8003d54 <vUltrassonicoInit+0x48>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f004 fa6a 	bl	8008220 <HAL_TIM_IC_Start_IT>

}
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20000aa8 	.word	0x20000aa8

08003d58 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003d5c:	4b21      	ldr	r3, [pc, #132]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003d5e:	4a22      	ldr	r2, [pc, #136]	@ (8003de8 <MX_LPUART1_UART_Init+0x90>)
 8003d60:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003d62:	4b20      	ldr	r3, [pc, #128]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003d64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d68:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003d70:	4b1c      	ldr	r3, [pc, #112]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003d76:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003d7c:	4b19      	ldr	r3, [pc, #100]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003d7e:	220c      	movs	r2, #12
 8003d80:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d82:	4b18      	ldr	r3, [pc, #96]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d88:	4b16      	ldr	r3, [pc, #88]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d8e:	4b15      	ldr	r3, [pc, #84]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d94:	4b13      	ldr	r3, [pc, #76]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003d9a:	4812      	ldr	r0, [pc, #72]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003d9c:	f005 ff42 	bl	8009c24 <HAL_UART_Init>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003da6:	f7fe fe02 	bl	80029ae <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003daa:	2100      	movs	r1, #0
 8003dac:	480d      	ldr	r0, [pc, #52]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003dae:	f008 f9f2 	bl	800c196 <HAL_UARTEx_SetTxFifoThreshold>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003db8:	f7fe fdf9 	bl	80029ae <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4809      	ldr	r0, [pc, #36]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003dc0:	f008 fa27 	bl	800c212 <HAL_UARTEx_SetRxFifoThreshold>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003dca:	f7fe fdf0 	bl	80029ae <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003dce:	4805      	ldr	r0, [pc, #20]	@ (8003de4 <MX_LPUART1_UART_Init+0x8c>)
 8003dd0:	f008 f9a8 	bl	800c124 <HAL_UARTEx_DisableFifoMode>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003dda:	f7fe fde8 	bl	80029ae <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000ab4 	.word	0x20000ab4
 8003de8:	40008000 	.word	0x40008000

08003dec <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003df0:	4b22      	ldr	r3, [pc, #136]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003df2:	4a23      	ldr	r2, [pc, #140]	@ (8003e80 <MX_USART1_UART_Init+0x94>)
 8003df4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003df6:	4b21      	ldr	r3, [pc, #132]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003df8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003dfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e04:	4b1d      	ldr	r3, [pc, #116]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e10:	4b1a      	ldr	r3, [pc, #104]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003e12:	220c      	movs	r2, #12
 8003e14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e16:	4b19      	ldr	r3, [pc, #100]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e1c:	4b17      	ldr	r3, [pc, #92]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e22:	4b16      	ldr	r3, [pc, #88]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e28:	4b14      	ldr	r3, [pc, #80]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e2e:	4b13      	ldr	r3, [pc, #76]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e34:	4811      	ldr	r0, [pc, #68]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003e36:	f005 fef5 	bl	8009c24 <HAL_UART_Init>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003e40:	f7fe fdb5 	bl	80029ae <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e44:	2100      	movs	r1, #0
 8003e46:	480d      	ldr	r0, [pc, #52]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003e48:	f008 f9a5 	bl	800c196 <HAL_UARTEx_SetTxFifoThreshold>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003e52:	f7fe fdac 	bl	80029ae <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e56:	2100      	movs	r1, #0
 8003e58:	4808      	ldr	r0, [pc, #32]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003e5a:	f008 f9da 	bl	800c212 <HAL_UARTEx_SetRxFifoThreshold>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003e64:	f7fe fda3 	bl	80029ae <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003e68:	4804      	ldr	r0, [pc, #16]	@ (8003e7c <MX_USART1_UART_Init+0x90>)
 8003e6a:	f008 f95b 	bl	800c124 <HAL_UARTEx_DisableFifoMode>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003e74:	f7fe fd9b 	bl	80029ae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000b48 	.word	0x20000b48
 8003e80:	40013800 	.word	0x40013800

08003e84 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003e88:	4b22      	ldr	r3, [pc, #136]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003e8a:	4a23      	ldr	r2, [pc, #140]	@ (8003f18 <MX_USART3_UART_Init+0x94>)
 8003e8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8003e8e:	4b21      	ldr	r3, [pc, #132]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003e90:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8003e94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003e96:	4b1f      	ldr	r3, [pc, #124]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003eaa:	220c      	movs	r2, #12
 8003eac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eae:	4b19      	ldr	r3, [pc, #100]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eb4:	4b17      	ldr	r3, [pc, #92]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003eba:	4b16      	ldr	r3, [pc, #88]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ec0:	4b14      	ldr	r3, [pc, #80]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ec6:	4b13      	ldr	r3, [pc, #76]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ecc:	4811      	ldr	r0, [pc, #68]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003ece:	f005 fea9 	bl	8009c24 <HAL_UART_Init>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003ed8:	f7fe fd69 	bl	80029ae <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003edc:	2100      	movs	r1, #0
 8003ede:	480d      	ldr	r0, [pc, #52]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003ee0:	f008 f959 	bl	800c196 <HAL_UARTEx_SetTxFifoThreshold>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003eea:	f7fe fd60 	bl	80029ae <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4808      	ldr	r0, [pc, #32]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003ef2:	f008 f98e 	bl	800c212 <HAL_UARTEx_SetRxFifoThreshold>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003efc:	f7fe fd57 	bl	80029ae <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003f00:	4804      	ldr	r0, [pc, #16]	@ (8003f14 <MX_USART3_UART_Init+0x90>)
 8003f02:	f008 f90f 	bl	800c124 <HAL_UARTEx_DisableFifoMode>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003f0c:	f7fe fd4f 	bl	80029ae <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003f10:	bf00      	nop
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000bdc 	.word	0x20000bdc
 8003f18:	40004800 	.word	0x40004800

08003f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b0a4      	sub	sp, #144	@ 0x90
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f38:	2254      	movs	r2, #84	@ 0x54
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f009 f92c 	bl	800d19a <memset>
  if(uartHandle->Instance==LPUART1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a7e      	ldr	r2, [pc, #504]	@ (8004140 <HAL_UART_MspInit+0x224>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d143      	bne.n	8003fd4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003f50:	2300      	movs	r3, #0
 8003f52:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f003 fc77 	bl	800784c <HAL_RCCEx_PeriphCLKConfig>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f64:	f7fe fd23 	bl	80029ae <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003f68:	4b76      	ldr	r3, [pc, #472]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6c:	4a75      	ldr	r2, [pc, #468]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003f74:	4b73      	ldr	r3, [pc, #460]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8003f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f80:	4b70      	ldr	r3, [pc, #448]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8003f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f84:	4a6f      	ldr	r2, [pc, #444]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f8c:	4b6d      	ldr	r3, [pc, #436]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8003f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	623b      	str	r3, [r7, #32]
 8003f96:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003f98:	230c      	movs	r3, #12
 8003f9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003fae:	230c      	movs	r3, #12
 8003fb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fbe:	f000 fe09 	bl	8004bd4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	205b      	movs	r0, #91	@ 0x5b
 8003fc8:	f000 fa81 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003fcc:	205b      	movs	r0, #91	@ 0x5b
 8003fce:	f000 fa98 	bl	8004502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003fd2:	e0b1      	b.n	8004138 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a5b      	ldr	r2, [pc, #364]	@ (8004148 <HAL_UART_MspInit+0x22c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d164      	bne.n	80040a8 <HAL_UART_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fe6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fea:	4618      	mov	r0, r3
 8003fec:	f003 fc2e 	bl	800784c <HAL_RCCEx_PeriphCLKConfig>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_UART_MspInit+0xde>
      Error_Handler();
 8003ff6:	f7fe fcda 	bl	80029ae <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ffa:	4b52      	ldr	r3, [pc, #328]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8003ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffe:	4a51      	ldr	r2, [pc, #324]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8004000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004004:	6613      	str	r3, [r2, #96]	@ 0x60
 8004006:	4b4f      	ldr	r3, [pc, #316]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8004008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800400a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004012:	4b4c      	ldr	r3, [pc, #304]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8004014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004016:	4a4b      	ldr	r2, [pc, #300]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8004018:	f043 0304 	orr.w	r3, r3, #4
 800401c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800401e:	4b49      	ldr	r3, [pc, #292]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8004020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	61bb      	str	r3, [r7, #24]
 8004028:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800402a:	4b46      	ldr	r3, [pc, #280]	@ (8004144 <HAL_UART_MspInit+0x228>)
 800402c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402e:	4a45      	ldr	r2, [pc, #276]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004036:	4b43      	ldr	r3, [pc, #268]	@ (8004144 <HAL_UART_MspInit+0x228>)
 8004038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004042:	2320      	movs	r3, #32
 8004044:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004046:	2302      	movs	r3, #2
 8004048:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004058:	2307      	movs	r3, #7
 800405a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800405e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004062:	4619      	mov	r1, r3
 8004064:	4839      	ldr	r0, [pc, #228]	@ (800414c <HAL_UART_MspInit+0x230>)
 8004066:	f000 fdb5 	bl	8004bd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800406a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800406e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2302      	movs	r3, #2
 8004072:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004076:	2300      	movs	r3, #0
 8004078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004082:	2307      	movs	r3, #7
 8004084:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004088:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800408c:	4619      	mov	r1, r3
 800408e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004092:	f000 fd9f 	bl	8004bd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004096:	2200      	movs	r2, #0
 8004098:	2100      	movs	r1, #0
 800409a:	2025      	movs	r0, #37	@ 0x25
 800409c:	f000 fa17 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040a0:	2025      	movs	r0, #37	@ 0x25
 80040a2:	f000 fa2e 	bl	8004502 <HAL_NVIC_EnableIRQ>
}
 80040a6:	e047      	b.n	8004138 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART3)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a28      	ldr	r2, [pc, #160]	@ (8004150 <HAL_UART_MspInit+0x234>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d142      	bne.n	8004138 <HAL_UART_MspInit+0x21c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80040b2:	2304      	movs	r3, #4
 80040b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80040b6:	2300      	movs	r3, #0
 80040b8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040be:	4618      	mov	r0, r3
 80040c0:	f003 fbc4 	bl	800784c <HAL_RCCEx_PeriphCLKConfig>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 80040ca:	f7fe fc70 	bl	80029ae <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <HAL_UART_MspInit+0x228>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004144 <HAL_UART_MspInit+0x228>)
 80040d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040da:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <HAL_UART_MspInit+0x228>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e6:	4b17      	ldr	r3, [pc, #92]	@ (8004144 <HAL_UART_MspInit+0x228>)
 80040e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ea:	4a16      	ldr	r2, [pc, #88]	@ (8004144 <HAL_UART_MspInit+0x228>)
 80040ec:	f043 0302 	orr.w	r3, r3, #2
 80040f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040f2:	4b14      	ldr	r3, [pc, #80]	@ (8004144 <HAL_UART_MspInit+0x228>)
 80040f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80040fe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004102:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004104:	2302      	movs	r3, #2
 8004106:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410a:	2300      	movs	r3, #0
 800410c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004110:	2300      	movs	r3, #0
 8004112:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004116:	2307      	movs	r3, #7
 8004118:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800411c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004120:	4619      	mov	r1, r3
 8004122:	480c      	ldr	r0, [pc, #48]	@ (8004154 <HAL_UART_MspInit+0x238>)
 8004124:	f000 fd56 	bl	8004bd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8004128:	2200      	movs	r2, #0
 800412a:	2101      	movs	r1, #1
 800412c:	2027      	movs	r0, #39	@ 0x27
 800412e:	f000 f9ce 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004132:	2027      	movs	r0, #39	@ 0x27
 8004134:	f000 f9e5 	bl	8004502 <HAL_NVIC_EnableIRQ>
}
 8004138:	bf00      	nop
 800413a:	3790      	adds	r7, #144	@ 0x90
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40008000 	.word	0x40008000
 8004144:	40021000 	.word	0x40021000
 8004148:	40013800 	.word	0x40013800
 800414c:	48000800 	.word	0x48000800
 8004150:	40004800 	.word	0x40004800
 8004154:	48000400 	.word	0x48000400

08004158 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004158:	480d      	ldr	r0, [pc, #52]	@ (8004190 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800415a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800415c:	f7ff f87c 	bl	8003258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004160:	480c      	ldr	r0, [pc, #48]	@ (8004194 <LoopForever+0x6>)
  ldr r1, =_edata
 8004162:	490d      	ldr	r1, [pc, #52]	@ (8004198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004164:	4a0d      	ldr	r2, [pc, #52]	@ (800419c <LoopForever+0xe>)
  movs r3, #0
 8004166:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004168:	e002      	b.n	8004170 <LoopCopyDataInit>

0800416a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800416a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800416c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800416e:	3304      	adds	r3, #4

08004170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004174:	d3f9      	bcc.n	800416a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004176:	4a0a      	ldr	r2, [pc, #40]	@ (80041a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004178:	4c0a      	ldr	r4, [pc, #40]	@ (80041a4 <LoopForever+0x16>)
  movs r3, #0
 800417a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800417c:	e001      	b.n	8004182 <LoopFillZerobss>

0800417e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800417e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004180:	3204      	adds	r2, #4

08004182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004184:	d3fb      	bcc.n	800417e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004186:	f009 f86f 	bl	800d268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800418a:	f7fe f8c9 	bl	8002320 <main>

0800418e <LoopForever>:

LoopForever:
    b LoopForever
 800418e:	e7fe      	b.n	800418e <LoopForever>
  ldr   r0, =_estack
 8004190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004198:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 800419c:	0800fa78 	.word	0x0800fa78
  ldr r2, =_sbss
 80041a0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80041a4:	20000dc0 	.word	0x20000dc0

080041a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80041a8:	e7fe      	b.n	80041a8 <ADC1_2_IRQHandler>

080041aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041b4:	2003      	movs	r0, #3
 80041b6:	f000 f97f 	bl	80044b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041ba:	200f      	movs	r0, #15
 80041bc:	f000 f80e 	bl	80041dc <HAL_InitTick>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	71fb      	strb	r3, [r7, #7]
 80041ca:	e001      	b.n	80041d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041cc:	f7fe fe98 	bl	8002f00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041d0:	79fb      	ldrb	r3, [r7, #7]

}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80041e8:	4b16      	ldr	r3, [pc, #88]	@ (8004244 <HAL_InitTick+0x68>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d022      	beq.n	8004236 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80041f0:	4b15      	ldr	r3, [pc, #84]	@ (8004248 <HAL_InitTick+0x6c>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b13      	ldr	r3, [pc, #76]	@ (8004244 <HAL_InitTick+0x68>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80041fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f998 	bl	800453a <HAL_SYSTICK_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10f      	bne.n	8004230 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b0f      	cmp	r3, #15
 8004214:	d809      	bhi.n	800422a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004216:	2200      	movs	r2, #0
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	f04f 30ff 	mov.w	r0, #4294967295
 800421e:	f000 f956 	bl	80044ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004222:	4a0a      	ldr	r2, [pc, #40]	@ (800424c <HAL_InitTick+0x70>)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	e007      	b.n	800423a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
 800422e:	e004      	b.n	800423a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
 8004234:	e001      	b.n	800423a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800423a:	7bfb      	ldrb	r3, [r7, #15]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000044 	.word	0x20000044
 8004248:	2000003c 	.word	0x2000003c
 800424c:	20000040 	.word	0x20000040

08004250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004254:	4b05      	ldr	r3, [pc, #20]	@ (800426c <HAL_IncTick+0x1c>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_IncTick+0x20>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4413      	add	r3, r2
 800425e:	4a03      	ldr	r2, [pc, #12]	@ (800426c <HAL_IncTick+0x1c>)
 8004260:	6013      	str	r3, [r2, #0]
}
 8004262:	bf00      	nop
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	20000c70 	.word	0x20000c70
 8004270:	20000044 	.word	0x20000044

08004274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return uwTick;
 8004278:	4b03      	ldr	r3, [pc, #12]	@ (8004288 <HAL_GetTick+0x14>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000c70 	.word	0x20000c70

0800428c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004294:	f7ff ffee 	bl	8004274 <HAL_GetTick>
 8004298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d004      	beq.n	80042b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80042a6:	4b09      	ldr	r3, [pc, #36]	@ (80042cc <HAL_Delay+0x40>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042b0:	bf00      	nop
 80042b2:	f7ff ffdf 	bl	8004274 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d8f7      	bhi.n	80042b2 <HAL_Delay+0x26>
  {
  }
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000044 	.word	0x20000044

080042d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004314 <__NVIC_SetPriorityGrouping+0x44>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042ec:	4013      	ands	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004302:	4a04      	ldr	r2, [pc, #16]	@ (8004314 <__NVIC_SetPriorityGrouping+0x44>)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	60d3      	str	r3, [r2, #12]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800431c:	4b04      	ldr	r3, [pc, #16]	@ (8004330 <__NVIC_GetPriorityGrouping+0x18>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	0a1b      	lsrs	r3, r3, #8
 8004322:	f003 0307 	and.w	r3, r3, #7
}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	2b00      	cmp	r3, #0
 8004344:	db0b      	blt.n	800435e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	f003 021f 	and.w	r2, r3, #31
 800434c:	4907      	ldr	r1, [pc, #28]	@ (800436c <__NVIC_EnableIRQ+0x38>)
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2001      	movs	r0, #1
 8004356:	fa00 f202 	lsl.w	r2, r0, r2
 800435a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000e100 	.word	0xe000e100

08004370 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800437a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437e:	2b00      	cmp	r3, #0
 8004380:	db12      	blt.n	80043a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	f003 021f 	and.w	r2, r3, #31
 8004388:	490a      	ldr	r1, [pc, #40]	@ (80043b4 <__NVIC_DisableIRQ+0x44>)
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	2001      	movs	r0, #1
 8004392:	fa00 f202 	lsl.w	r2, r0, r2
 8004396:	3320      	adds	r3, #32
 8004398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800439c:	f3bf 8f4f 	dsb	sy
}
 80043a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043a2:	f3bf 8f6f 	isb	sy
}
 80043a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	e000e100 	.word	0xe000e100

080043b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	6039      	str	r1, [r7, #0]
 80043c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	db0a      	blt.n	80043e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	490c      	ldr	r1, [pc, #48]	@ (8004404 <__NVIC_SetPriority+0x4c>)
 80043d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d6:	0112      	lsls	r2, r2, #4
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	440b      	add	r3, r1
 80043dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043e0:	e00a      	b.n	80043f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	4908      	ldr	r1, [pc, #32]	@ (8004408 <__NVIC_SetPriority+0x50>)
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	3b04      	subs	r3, #4
 80043f0:	0112      	lsls	r2, r2, #4
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	440b      	add	r3, r1
 80043f6:	761a      	strb	r2, [r3, #24]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	e000e100 	.word	0xe000e100
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800440c:	b480      	push	{r7}
 800440e:	b089      	sub	sp, #36	@ 0x24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f1c3 0307 	rsb	r3, r3, #7
 8004426:	2b04      	cmp	r3, #4
 8004428:	bf28      	it	cs
 800442a:	2304      	movcs	r3, #4
 800442c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	3304      	adds	r3, #4
 8004432:	2b06      	cmp	r3, #6
 8004434:	d902      	bls.n	800443c <NVIC_EncodePriority+0x30>
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	3b03      	subs	r3, #3
 800443a:	e000      	b.n	800443e <NVIC_EncodePriority+0x32>
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004440:	f04f 32ff 	mov.w	r2, #4294967295
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43da      	mvns	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	401a      	ands	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004454:	f04f 31ff 	mov.w	r1, #4294967295
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	43d9      	mvns	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004464:	4313      	orrs	r3, r2
         );
}
 8004466:	4618      	mov	r0, r3
 8004468:	3724      	adds	r7, #36	@ 0x24
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3b01      	subs	r3, #1
 8004480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004484:	d301      	bcc.n	800448a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004486:	2301      	movs	r3, #1
 8004488:	e00f      	b.n	80044aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800448a:	4a0a      	ldr	r2, [pc, #40]	@ (80044b4 <SysTick_Config+0x40>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3b01      	subs	r3, #1
 8004490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004492:	210f      	movs	r1, #15
 8004494:	f04f 30ff 	mov.w	r0, #4294967295
 8004498:	f7ff ff8e 	bl	80043b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <SysTick_Config+0x40>)
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044a2:	4b04      	ldr	r3, [pc, #16]	@ (80044b4 <SysTick_Config+0x40>)
 80044a4:	2207      	movs	r2, #7
 80044a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	e000e010 	.word	0xe000e010

080044b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff ff05 	bl	80042d0 <__NVIC_SetPriorityGrouping>
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b086      	sub	sp, #24
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	4603      	mov	r3, r0
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044dc:	f7ff ff1c 	bl	8004318 <__NVIC_GetPriorityGrouping>
 80044e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	6978      	ldr	r0, [r7, #20]
 80044e8:	f7ff ff90 	bl	800440c <NVIC_EncodePriority>
 80044ec:	4602      	mov	r2, r0
 80044ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f2:	4611      	mov	r1, r2
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff ff5f 	bl	80043b8 <__NVIC_SetPriority>
}
 80044fa:	bf00      	nop
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	4603      	mov	r3, r0
 800450a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800450c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ff0f 	bl	8004334 <__NVIC_EnableIRQ>
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	4603      	mov	r3, r0
 8004526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff ff1f 	bl	8004370 <__NVIC_DisableIRQ>
}
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff ff96 	bl	8004474 <SysTick_Config>
 8004548:	4603      	mov	r3, r0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e08d      	b.n	8004682 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	4b47      	ldr	r3, [pc, #284]	@ (800468c <HAL_DMA_Init+0x138>)
 800456e:	429a      	cmp	r2, r3
 8004570:	d80f      	bhi.n	8004592 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	4b45      	ldr	r3, [pc, #276]	@ (8004690 <HAL_DMA_Init+0x13c>)
 800457a:	4413      	add	r3, r2
 800457c:	4a45      	ldr	r2, [pc, #276]	@ (8004694 <HAL_DMA_Init+0x140>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	009a      	lsls	r2, r3, #2
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a42      	ldr	r2, [pc, #264]	@ (8004698 <HAL_DMA_Init+0x144>)
 800458e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004590:	e00e      	b.n	80045b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	4b40      	ldr	r3, [pc, #256]	@ (800469c <HAL_DMA_Init+0x148>)
 800459a:	4413      	add	r3, r2
 800459c:	4a3d      	ldr	r2, [pc, #244]	@ (8004694 <HAL_DMA_Init+0x140>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	009a      	lsls	r2, r3, #2
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a3c      	ldr	r2, [pc, #240]	@ (80046a0 <HAL_DMA_Init+0x14c>)
 80045ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80045c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80045d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa84 	bl	8004b10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004610:	d102      	bne.n	8004618 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800462c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d010      	beq.n	8004658 <HAL_DMA_Init+0x104>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b04      	cmp	r3, #4
 800463c:	d80c      	bhi.n	8004658 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 faa4 	bl	8004b8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	e008      	b.n	800466a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40020407 	.word	0x40020407
 8004690:	bffdfff8 	.word	0xbffdfff8
 8004694:	cccccccd 	.word	0xcccccccd
 8004698:	40020000 	.word	0x40020000
 800469c:	bffdfbf8 	.word	0xbffdfbf8
 80046a0:	40020400 	.word	0x40020400

080046a4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_DMA_Start_IT+0x20>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e066      	b.n	8004792 <HAL_DMA_Start_IT+0xee>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d155      	bne.n	8004784 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0201 	bic.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f9c9 	bl	8004a94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 020e 	orr.w	r2, r2, #14
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e00f      	b.n	800473c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0204 	bic.w	r2, r2, #4
 800472a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 020a 	orr.w	r2, r2, #10
 800473a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d007      	beq.n	800475a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004754:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004758:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004770:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0201 	orr.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e005      	b.n	8004790 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800478c:	2302      	movs	r3, #2
 800478e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004790:	7dfb      	ldrb	r3, [r7, #23]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d005      	beq.n	80047be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2204      	movs	r2, #4
 80047b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
 80047bc:	e037      	b.n	800482e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 020e 	bic.w	r2, r2, #14
 80047cc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047dc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	f003 021f 	and.w	r2, r3, #31
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	2101      	movs	r1, #1
 80047fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004800:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800480a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00c      	beq.n	800482e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004822:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800482c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800483e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d00d      	beq.n	8004880 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2204      	movs	r2, #4
 8004868:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
 800487e:	e047      	b.n	8004910 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 020e 	bic.w	r2, r2, #14
 800488e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b4:	f003 021f 	and.w	r2, r3, #31
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048bc:	2101      	movs	r1, #1
 80048be:	fa01 f202 	lsl.w	r2, r1, r2
 80048c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00c      	beq.n	80048f0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	4798      	blx	r3
    }
  }
  return status;
 8004910:	7bfb      	ldrb	r3, [r7, #15]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	2204      	movs	r2, #4
 800493c:	409a      	lsls	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4013      	ands	r3, r2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d026      	beq.n	8004994 <HAL_DMA_IRQHandler+0x7a>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d021      	beq.n	8004994 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d107      	bne.n	800496e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0204 	bic.w	r2, r2, #4
 800496c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004972:	f003 021f 	and.w	r2, r3, #31
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	2104      	movs	r1, #4
 800497c:	fa01 f202 	lsl.w	r2, r1, r2
 8004980:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004986:	2b00      	cmp	r3, #0
 8004988:	d071      	beq.n	8004a6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004992:	e06c      	b.n	8004a6e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2202      	movs	r2, #2
 800499e:	409a      	lsls	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d02e      	beq.n	8004a06 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d029      	beq.n	8004a06 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10b      	bne.n	80049d8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 020a 	bic.w	r2, r2, #10
 80049ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049dc:	f003 021f 	and.w	r2, r3, #31
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	2102      	movs	r1, #2
 80049e6:	fa01 f202 	lsl.w	r2, r1, r2
 80049ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d038      	beq.n	8004a6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a04:	e033      	b.n	8004a6e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	2208      	movs	r2, #8
 8004a10:	409a      	lsls	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d02a      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d025      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 020e 	bic.w	r2, r2, #14
 8004a32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a38:	f003 021f 	and.w	r2, r3, #31
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a40:	2101      	movs	r1, #1
 8004a42:	fa01 f202 	lsl.w	r2, r1, r2
 8004a46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
}
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a86:	b2db      	uxtb	r3, r3
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004aaa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004abc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac2:	f003 021f 	and.w	r2, r3, #31
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	2101      	movs	r1, #1
 8004acc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b10      	cmp	r3, #16
 8004ae0:	d108      	bne.n	8004af4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004af2:	e007      	b.n	8004b04 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	60da      	str	r2, [r3, #12]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4b16      	ldr	r3, [pc, #88]	@ (8004b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d802      	bhi.n	8004b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004b24:	4b15      	ldr	r3, [pc, #84]	@ (8004b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	e001      	b.n	8004b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004b2a:	4b15      	ldr	r3, [pc, #84]	@ (8004b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b2c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	3b08      	subs	r3, #8
 8004b3a:	4a12      	ldr	r2, [pc, #72]	@ (8004b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	009a      	lsls	r2, r3, #2
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4413      	add	r3, r2
 8004b50:	461a      	mov	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a0b      	ldr	r2, [pc, #44]	@ (8004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	2201      	movs	r2, #1
 8004b64:	409a      	lsls	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40020407 	.word	0x40020407
 8004b7c:	40020800 	.word	0x40020800
 8004b80:	40020820 	.word	0x40020820
 8004b84:	cccccccd 	.word	0xcccccccd
 8004b88:	40020880 	.word	0x40020880

08004b8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a08      	ldr	r2, [pc, #32]	@ (8004bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004bae:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	2201      	movs	r2, #1
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	1000823f 	.word	0x1000823f
 8004bd0:	40020940 	.word	0x40020940

08004bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004be2:	e15a      	b.n	8004e9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	2101      	movs	r1, #1
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 814c 	beq.w	8004e94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d005      	beq.n	8004c14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d130      	bne.n	8004c76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	2203      	movs	r2, #3
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43db      	mvns	r3, r3
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4013      	ands	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	f003 0201 	and.w	r2, r3, #1
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d017      	beq.n	8004cb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4013      	ands	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d123      	bne.n	8004d06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	08da      	lsrs	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3208      	adds	r2, #8
 8004cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	08da      	lsrs	r2, r3, #3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3208      	adds	r2, #8
 8004d00:	6939      	ldr	r1, [r7, #16]
 8004d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	2203      	movs	r2, #3
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0203 	and.w	r2, r3, #3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 80a6 	beq.w	8004e94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d48:	4b5b      	ldr	r3, [pc, #364]	@ (8004eb8 <HAL_GPIO_Init+0x2e4>)
 8004d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d4c:	4a5a      	ldr	r2, [pc, #360]	@ (8004eb8 <HAL_GPIO_Init+0x2e4>)
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d54:	4b58      	ldr	r3, [pc, #352]	@ (8004eb8 <HAL_GPIO_Init+0x2e4>)
 8004d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d60:	4a56      	ldr	r2, [pc, #344]	@ (8004ebc <HAL_GPIO_Init+0x2e8>)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	089b      	lsrs	r3, r3, #2
 8004d66:	3302      	adds	r3, #2
 8004d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	220f      	movs	r2, #15
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4013      	ands	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004d8a:	d01f      	beq.n	8004dcc <HAL_GPIO_Init+0x1f8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a4c      	ldr	r2, [pc, #304]	@ (8004ec0 <HAL_GPIO_Init+0x2ec>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d019      	beq.n	8004dc8 <HAL_GPIO_Init+0x1f4>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a4b      	ldr	r2, [pc, #300]	@ (8004ec4 <HAL_GPIO_Init+0x2f0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d013      	beq.n	8004dc4 <HAL_GPIO_Init+0x1f0>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a4a      	ldr	r2, [pc, #296]	@ (8004ec8 <HAL_GPIO_Init+0x2f4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00d      	beq.n	8004dc0 <HAL_GPIO_Init+0x1ec>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a49      	ldr	r2, [pc, #292]	@ (8004ecc <HAL_GPIO_Init+0x2f8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d007      	beq.n	8004dbc <HAL_GPIO_Init+0x1e8>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a48      	ldr	r2, [pc, #288]	@ (8004ed0 <HAL_GPIO_Init+0x2fc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d101      	bne.n	8004db8 <HAL_GPIO_Init+0x1e4>
 8004db4:	2305      	movs	r3, #5
 8004db6:	e00a      	b.n	8004dce <HAL_GPIO_Init+0x1fa>
 8004db8:	2306      	movs	r3, #6
 8004dba:	e008      	b.n	8004dce <HAL_GPIO_Init+0x1fa>
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	e006      	b.n	8004dce <HAL_GPIO_Init+0x1fa>
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e004      	b.n	8004dce <HAL_GPIO_Init+0x1fa>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e002      	b.n	8004dce <HAL_GPIO_Init+0x1fa>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_GPIO_Init+0x1fa>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	f002 0203 	and.w	r2, r2, #3
 8004dd4:	0092      	lsls	r2, r2, #2
 8004dd6:	4093      	lsls	r3, r2
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dde:	4937      	ldr	r1, [pc, #220]	@ (8004ebc <HAL_GPIO_Init+0x2e8>)
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	089b      	lsrs	r3, r3, #2
 8004de4:	3302      	adds	r3, #2
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dec:	4b39      	ldr	r3, [pc, #228]	@ (8004ed4 <HAL_GPIO_Init+0x300>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	43db      	mvns	r3, r3
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e10:	4a30      	ldr	r2, [pc, #192]	@ (8004ed4 <HAL_GPIO_Init+0x300>)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e16:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed4 <HAL_GPIO_Init+0x300>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4013      	ands	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e3a:	4a26      	ldr	r2, [pc, #152]	@ (8004ed4 <HAL_GPIO_Init+0x300>)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e40:	4b24      	ldr	r3, [pc, #144]	@ (8004ed4 <HAL_GPIO_Init+0x300>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e64:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed4 <HAL_GPIO_Init+0x300>)
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed4 <HAL_GPIO_Init+0x300>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	43db      	mvns	r3, r3
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4013      	ands	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e8e:	4a11      	ldr	r2, [pc, #68]	@ (8004ed4 <HAL_GPIO_Init+0x300>)
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	3301      	adds	r3, #1
 8004e98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f47f ae9d 	bne.w	8004be4 <HAL_GPIO_Init+0x10>
  }
}
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	48000400 	.word	0x48000400
 8004ec4:	48000800 	.word	0x48000800
 8004ec8:	48000c00 	.word	0x48000c00
 8004ecc:	48001000 	.word	0x48001000
 8004ed0:	48001400 	.word	0x48001400
 8004ed4:	40010400 	.word	0x40010400

08004ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	807b      	strh	r3, [r7, #2]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ee8:	787b      	ldrb	r3, [r7, #1]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eee:	887a      	ldrh	r2, [r7, #2]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ef4:	e002      	b.n	8004efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ef6:	887a      	ldrh	r2, [r7, #2]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f12:	4b08      	ldr	r3, [pc, #32]	@ (8004f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f14:	695a      	ldr	r2, [r3, #20]
 8004f16:	88fb      	ldrh	r3, [r7, #6]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d006      	beq.n	8004f2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f1e:	4a05      	ldr	r2, [pc, #20]	@ (8004f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f20:	88fb      	ldrh	r3, [r7, #6]
 8004f22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f24:	88fb      	ldrh	r3, [r7, #6]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fd fd20 	bl	800296c <HAL_GPIO_EXTI_Callback>
  }
}
 8004f2c:	bf00      	nop
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40010400 	.word	0x40010400

08004f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e08d      	b.n	8005066 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fc fe9a 	bl	8001c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2224      	movs	r2, #36	@ 0x24
 8004f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0201 	bic.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d107      	bne.n	8004fb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	e006      	b.n	8004fc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004fbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d108      	bne.n	8004fda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	e007      	b.n	8004fea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fe8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ffc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800500c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	69d9      	ldr	r1, [r3, #28]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1a      	ldr	r2, [r3, #32]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	@ 0x28
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	461a      	mov	r2, r3
 800507c:	460b      	mov	r3, r1
 800507e:	817b      	strh	r3, [r7, #10]
 8005080:	4613      	mov	r3, r2
 8005082:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b20      	cmp	r3, #32
 8005092:	f040 80ef 	bne.w	8005274 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050a4:	d101      	bne.n	80050aa <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80050a6:	2302      	movs	r3, #2
 80050a8:	e0e5      	b.n	8005276 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_I2C_Master_Transmit_DMA+0x48>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e0de      	b.n	8005276 <HAL_I2C_Master_Transmit_DMA+0x206>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2221      	movs	r2, #33	@ 0x21
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2210      	movs	r2, #16
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	893a      	ldrh	r2, [r7, #8]
 80050e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4a66      	ldr	r2, [pc, #408]	@ (8005280 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80050e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4a66      	ldr	r2, [pc, #408]	@ (8005284 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80050ec:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2bff      	cmp	r3, #255	@ 0xff
 80050f6:	d906      	bls.n	8005106 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	22ff      	movs	r2, #255	@ 0xff
 80050fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80050fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	e007      	b.n	8005116 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005110:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005114:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01a      	beq.n	8005154 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005122:	781a      	ldrb	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005138:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005158:	2b00      	cmp	r3, #0
 800515a:	d074      	beq.n	8005246 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005160:	2b00      	cmp	r3, #0
 8005162:	d022      	beq.n	80051aa <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	4a47      	ldr	r2, [pc, #284]	@ (8005288 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800516a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005170:	4a46      	ldr	r2, [pc, #280]	@ (800528c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005172:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	2200      	movs	r2, #0
 8005182:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005194:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800519a:	f7ff fa83 	bl	80046a4 <HAL_DMA_Start_IT>
 800519e:	4603      	mov	r3, r0
 80051a0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d13a      	bne.n	800521e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80051a8:	e013      	b.n	80051d2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e051      	b.n	8005276 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	3301      	adds	r3, #1
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	8979      	ldrh	r1, [r7, #10]
 80051de:	4b2c      	ldr	r3, [pc, #176]	@ (8005290 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f001 fba3 	bl	8006930 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005204:	2110      	movs	r1, #16
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f001 fbc4 	bl	8006994 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	e028      	b.n	8005270 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005232:	f043 0210 	orr.w	r2, r3, #16
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e017      	b.n	8005276 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4a12      	ldr	r2, [pc, #72]	@ (8005294 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800524a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	b2da      	uxtb	r2, r3
 8005250:	8979      	ldrh	r1, [r7, #10]
 8005252:	4b0f      	ldr	r3, [pc, #60]	@ (8005290 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f001 fb68 	bl	8006930 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005268:	2101      	movs	r1, #1
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f001 fb92 	bl	8006994 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	e000      	b.n	8005276 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005274:	2302      	movs	r3, #2
  }
}
 8005276:	4618      	mov	r0, r3
 8005278:	3720      	adds	r7, #32
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	ffff0000 	.word	0xffff0000
 8005284:	080058af 	.word	0x080058af
 8005288:	0800682f 	.word	0x0800682f
 800528c:	080068c5 	.word	0x080068c5
 8005290:	80002000 	.word	0x80002000
 8005294:	0800546f 	.word	0x0800546f

08005298 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	68f9      	ldr	r1, [r7, #12]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	4798      	blx	r3
  }
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00f      	beq.n	800530e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800530c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00f      	beq.n	8005338 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005326:	f043 0208 	orr.w	r2, r3, #8
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005336:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00f      	beq.n	8005362 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005350:	f043 0202 	orr.w	r2, r3, #2
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005360:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005366:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 030b 	and.w	r3, r3, #11
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005372:	68f9      	ldr	r1, [r7, #12]
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f001 f91f 	bl	80065b8 <I2C_ITError>
  }
}
 800537a:	bf00      	nop
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	460b      	mov	r3, r1
 80053dc:	70fb      	strb	r3, [r7, #3]
 80053de:	4613      	mov	r3, r2
 80053e0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005460:	b2db      	uxtb	r3, r3
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b088      	sub	sp, #32
 8005472:	af02      	add	r7, sp, #8
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <I2C_Master_ISR_IT+0x1e>
 8005488:	2302      	movs	r3, #2
 800548a:	e113      	b.n	80056b4 <I2C_Master_ISR_IT+0x246>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b00      	cmp	r3, #0
 800549c:	d012      	beq.n	80054c4 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00d      	beq.n	80054c4 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2210      	movs	r2, #16
 80054ae:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b4:	f043 0204 	orr.w	r2, r3, #4
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f001 f992 	bl	80067e6 <I2C_Flush_TXDR>
 80054c2:	e0e4      	b.n	800568e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d022      	beq.n	8005514 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01d      	beq.n	8005514 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0304 	bic.w	r3, r3, #4
 80054de:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005508:	b29b      	uxth	r3, r3
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005512:	e0bc      	b.n	800568e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d128      	bne.n	8005570 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005524:	2b00      	cmp	r3, #0
 8005526:	d023      	beq.n	8005570 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01e      	beq.n	8005570 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80a8 	beq.w	800568e <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	781a      	ldrb	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800556e:	e08e      	b.n	800568e <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005576:	2b00      	cmp	r3, #0
 8005578:	d05c      	beq.n	8005634 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005580:	2b00      	cmp	r3, #0
 8005582:	d057      	beq.n	8005634 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d040      	beq.n	8005610 <I2C_Master_ISR_IT+0x1a2>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d13c      	bne.n	8005610 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055a2:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2bff      	cmp	r3, #255	@ 0xff
 80055ac:	d90e      	bls.n	80055cc <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	22ff      	movs	r2, #255	@ 0xff
 80055b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	8a79      	ldrh	r1, [r7, #18]
 80055bc:	2300      	movs	r3, #0
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f001 f9b3 	bl	8006930 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055ca:	e032      	b.n	8005632 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055de:	d00b      	beq.n	80055f8 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80055ea:	8a79      	ldrh	r1, [r7, #18]
 80055ec:	2000      	movs	r0, #0
 80055ee:	9000      	str	r0, [sp, #0]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f001 f99d 	bl	8006930 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055f6:	e01c      	b.n	8005632 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	8a79      	ldrh	r1, [r7, #18]
 8005600:	2300      	movs	r3, #0
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f001 f991 	bl	8006930 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800560e:	e010      	b.n	8005632 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800561a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800561e:	d003      	beq.n	8005628 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fcb0 	bl	8005f86 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005626:	e032      	b.n	800568e <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005628:	2140      	movs	r1, #64	@ 0x40
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 ffc4 	bl	80065b8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005630:	e02d      	b.n	800568e <I2C_Master_ISR_IT+0x220>
 8005632:	e02c      	b.n	800568e <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d027      	beq.n	800568e <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005644:	2b00      	cmp	r3, #0
 8005646:	d022      	beq.n	800568e <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d119      	bne.n	8005686 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800565c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005660:	d015      	beq.n	800568e <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005666:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800566a:	d108      	bne.n	800567e <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	e007      	b.n	800568e <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fc81 	bl	8005f86 <I2C_ITMasterSeqCplt>
 8005684:	e003      	b.n	800568e <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005686:	2140      	movs	r1, #64	@ 0x40
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 ff95 	bl	80065b8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80056a2:	6979      	ldr	r1, [r7, #20]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fd07 	bl	80060b8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <I2C_Slave_ISR_IT+0x24>
 80056dc:	2302      	movs	r3, #2
 80056de:	e0e2      	b.n	80058a6 <I2C_Slave_ISR_IT+0x1ea>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80056fc:	6939      	ldr	r1, [r7, #16]
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 fda2 	bl	8006248 <I2C_ITSlaveCplt>
 8005704:	e0ca      	b.n	800589c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b00      	cmp	r3, #0
 800570e:	d04b      	beq.n	80057a8 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005716:	2b00      	cmp	r3, #0
 8005718:	d046      	beq.n	80057a8 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d128      	bne.n	8005776 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b28      	cmp	r3, #40	@ 0x28
 800572e:	d108      	bne.n	8005742 <I2C_Slave_ISR_IT+0x86>
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005736:	d104      	bne.n	8005742 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005738:	6939      	ldr	r1, [r7, #16]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 fee8 	bl	8006510 <I2C_ITListenCplt>
 8005740:	e031      	b.n	80057a6 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b29      	cmp	r3, #41	@ 0x29
 800574c:	d10e      	bne.n	800576c <I2C_Slave_ISR_IT+0xb0>
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005754:	d00a      	beq.n	800576c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2210      	movs	r2, #16
 800575c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f001 f841 	bl	80067e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 fc4b 	bl	8006000 <I2C_ITSlaveSeqCplt>
 800576a:	e01c      	b.n	80057a6 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2210      	movs	r2, #16
 8005772:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005774:	e08f      	b.n	8005896 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2210      	movs	r2, #16
 800577c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005782:	f043 0204 	orr.w	r2, r3, #4
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <I2C_Slave_ISR_IT+0xdc>
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005796:	d17e      	bne.n	8005896 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579c:	4619      	mov	r1, r3
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 ff0a 	bl	80065b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80057a4:	e077      	b.n	8005896 <I2C_Slave_ISR_IT+0x1da>
 80057a6:	e076      	b.n	8005896 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d02f      	beq.n	8005812 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d02a      	beq.n	8005812 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d018      	beq.n	80057f8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d14b      	bne.n	800589a <I2C_Slave_ISR_IT+0x1de>
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005808:	d047      	beq.n	800589a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 fbf8 	bl	8006000 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005810:	e043      	b.n	800589a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005822:	2b00      	cmp	r3, #0
 8005824:	d004      	beq.n	8005830 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005826:	6939      	ldr	r1, [r7, #16]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 fb28 	bl	8005e7e <I2C_ITAddrCplt>
 800582e:	e035      	b.n	800589c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d030      	beq.n	800589c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005840:	2b00      	cmp	r3, #0
 8005842:	d02b      	beq.n	800589c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d018      	beq.n	8005880 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005852:	781a      	ldrb	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800587e:	e00d      	b.n	800589c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005886:	d002      	beq.n	800588e <I2C_Slave_ISR_IT+0x1d2>
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 fbb6 	bl	8006000 <I2C_ITSlaveSeqCplt>
 8005894:	e002      	b.n	800589c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005896:	bf00      	nop
 8005898:	e000      	b.n	800589c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800589a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b088      	sub	sp, #32
 80058b2:	af02      	add	r7, sp, #8
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <I2C_Master_ISR_DMA+0x1a>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e0d9      	b.n	8005a7c <I2C_Master_ISR_DMA+0x1ce>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0310 	and.w	r3, r3, #16
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d016      	beq.n	8005908 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d011      	beq.n	8005908 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2210      	movs	r2, #16
 80058ea:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f0:	f043 0204 	orr.w	r2, r3, #4
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80058f8:	2120      	movs	r1, #32
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f001 f84a 	bl	8006994 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 ff70 	bl	80067e6 <I2C_Flush_TXDR>
 8005906:	e0b4      	b.n	8005a72 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590e:	2b00      	cmp	r3, #0
 8005910:	d071      	beq.n	80059f6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005918:	2b00      	cmp	r3, #0
 800591a:	d06c      	beq.n	80059f6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800592a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d04e      	beq.n	80059d4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	b29b      	uxth	r3, r3
 800593e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005942:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	2bff      	cmp	r3, #255	@ 0xff
 800594c:	d906      	bls.n	800595c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	22ff      	movs	r2, #255	@ 0xff
 8005952:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005954:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	e010      	b.n	800597e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800596e:	d003      	beq.n	8005978 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	e002      	b.n	800597e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005978:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800597c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005982:	b2da      	uxtb	r2, r3
 8005984:	8a79      	ldrh	r1, [r7, #18]
 8005986:	2300      	movs	r3, #0
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 ffcf 	bl	8006930 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b22      	cmp	r3, #34	@ 0x22
 80059ae:	d108      	bne.n	80059c2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059be:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80059c0:	e057      	b.n	8005a72 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059d0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80059d2:	e04e      	b.n	8005a72 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059e2:	d003      	beq.n	80059ec <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 face 	bl	8005f86 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80059ea:	e042      	b.n	8005a72 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80059ec:	2140      	movs	r1, #64	@ 0x40
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fde2 	bl	80065b8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80059f4:	e03d      	b.n	8005a72 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d028      	beq.n	8005a52 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d023      	beq.n	8005a52 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d119      	bne.n	8005a48 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a22:	d025      	beq.n	8005a70 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a2c:	d108      	bne.n	8005a40 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a3c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005a3e:	e017      	b.n	8005a70 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 faa0 	bl	8005f86 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005a46:	e013      	b.n	8005a70 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005a48:	2140      	movs	r1, #64	@ 0x40
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fdb4 	bl	80065b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005a50:	e00e      	b.n	8005a70 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fb25 	bl	80060b8 <I2C_ITMasterCplt>
 8005a6e:	e000      	b.n	8005a72 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8005a70:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005a90:	4b8d      	ldr	r3, [pc, #564]	@ (8005cc8 <I2C_Mem_ISR_DMA+0x244>)
 8005a92:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <I2C_Mem_ISR_DMA+0x1e>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e10e      	b.n	8005cc0 <I2C_Mem_ISR_DMA+0x23c>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d016      	beq.n	8005ae2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d011      	beq.n	8005ae2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2210      	movs	r2, #16
 8005ac4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aca:	f043 0204 	orr.w	r2, r3, #4
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005ad2:	2120      	movs	r1, #32
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 ff5d 	bl	8006994 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fe83 	bl	80067e6 <I2C_Flush_TXDR>
 8005ae0:	e0e9      	b.n	8005cb6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00e      	beq.n	8005b0a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d009      	beq.n	8005b0a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005afe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f04f 32ff 	mov.w	r2, #4294967295
 8005b06:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b08:	e0d5      	b.n	8005cb6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d05f      	beq.n	8005bd4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d05a      	beq.n	8005bd4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b1e:	2101      	movs	r1, #1
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 ffbb 	bl	8006a9c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005b26:	2110      	movs	r1, #16
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 ff33 	bl	8006994 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d048      	beq.n	8005bca <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2bff      	cmp	r3, #255	@ 0xff
 8005b40:	d910      	bls.n	8005b64 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	22ff      	movs	r2, #255	@ 0xff
 8005b46:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b4c:	b299      	uxth	r1, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	2300      	movs	r3, #0
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fee7 	bl	8006930 <I2C_TransferConfig>
 8005b62:	e011      	b.n	8005b88 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b72:	b299      	uxth	r1, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fed4 	bl	8006930 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b22      	cmp	r3, #34	@ 0x22
 8005ba4:	d108      	bne.n	8005bb8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bb4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005bb6:	e07e      	b.n	8005cb6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bc6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005bc8:	e075      	b.n	8005cb6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005bca:	2140      	movs	r1, #64	@ 0x40
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fcf3 	bl	80065b8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005bd2:	e070      	b.n	8005cb6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d05d      	beq.n	8005c9a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d058      	beq.n	8005c9a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005be8:	2101      	movs	r1, #1
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 ff56 	bl	8006a9c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005bf0:	2110      	movs	r1, #16
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fece 	bl	8006994 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b22      	cmp	r3, #34	@ 0x22
 8005c02:	d101      	bne.n	8005c08 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8005c04:	4b31      	ldr	r3, [pc, #196]	@ (8005ccc <I2C_Mem_ISR_DMA+0x248>)
 8005c06:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2bff      	cmp	r3, #255	@ 0xff
 8005c10:	d910      	bls.n	8005c34 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	22ff      	movs	r2, #255	@ 0xff
 8005c16:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c1c:	b299      	uxth	r1, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fe7f 	bl	8006930 <I2C_TransferConfig>
 8005c32:	e011      	b.n	8005c58 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c42:	b299      	uxth	r1, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fe6c 	bl	8006930 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b22      	cmp	r3, #34	@ 0x22
 8005c74:	d108      	bne.n	8005c88 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c84:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c86:	e016      	b.n	8005cb6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c96:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c98:	e00d      	b.n	8005cb6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 fa01 	bl	80060b8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	80002000 	.word	0x80002000
 8005ccc:	80002400 	.word	0x80002400

08005cd0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <I2C_Slave_ISR_DMA+0x24>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e0c0      	b.n	8005e76 <I2C_Slave_ISR_DMA+0x1a6>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d004      	beq.n	8005d1a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fa98 	bl	8006248 <I2C_ITSlaveCplt>
 8005d18:	e0a8      	b.n	8005e6c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8095 	beq.w	8005e50 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 808f 	beq.w	8005e50 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d07d      	beq.n	8005e42 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00c      	beq.n	8005d68 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8005d64:	2301      	movs	r3, #1
 8005d66:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00c      	beq.n	8005d8a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d007      	beq.n	8005d8a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8005d86:	2301      	movs	r3, #1
 8005d88:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d128      	bne.n	8005de2 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b28      	cmp	r3, #40	@ 0x28
 8005d9a:	d108      	bne.n	8005dae <I2C_Slave_ISR_DMA+0xde>
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005da2:	d104      	bne.n	8005dae <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005da4:	68b9      	ldr	r1, [r7, #8]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 fbb2 	bl	8006510 <I2C_ITListenCplt>
 8005dac:	e048      	b.n	8005e40 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b29      	cmp	r3, #41	@ 0x29
 8005db8:	d10e      	bne.n	8005dd8 <I2C_Slave_ISR_DMA+0x108>
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005dc0:	d00a      	beq.n	8005dd8 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2210      	movs	r2, #16
 8005dc8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fd0b 	bl	80067e6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f915 	bl	8006000 <I2C_ITSlaveSeqCplt>
 8005dd6:	e033      	b.n	8005e40 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2210      	movs	r2, #16
 8005dde:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005de0:	e034      	b.n	8005e4c <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2210      	movs	r2, #16
 8005de8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dee:	f043 0204 	orr.w	r2, r3, #4
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dfc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <I2C_Slave_ISR_DMA+0x13c>
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e0a:	d11f      	bne.n	8005e4c <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
 8005e0e:	2b21      	cmp	r3, #33	@ 0x21
 8005e10:	d002      	beq.n	8005e18 <I2C_Slave_ISR_DMA+0x148>
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
 8005e14:	2b29      	cmp	r3, #41	@ 0x29
 8005e16:	d103      	bne.n	8005e20 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2221      	movs	r2, #33	@ 0x21
 8005e1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e1e:	e008      	b.n	8005e32 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
 8005e22:	2b22      	cmp	r3, #34	@ 0x22
 8005e24:	d002      	beq.n	8005e2c <I2C_Slave_ISR_DMA+0x15c>
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e2a:	d102      	bne.n	8005e32 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2222      	movs	r2, #34	@ 0x22
 8005e30:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e36:	4619      	mov	r1, r3
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fbbd 	bl	80065b8 <I2C_ITError>
      if (treatdmanack == 1U)
 8005e3e:	e005      	b.n	8005e4c <I2C_Slave_ISR_DMA+0x17c>
 8005e40:	e004      	b.n	8005e4c <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2210      	movs	r2, #16
 8005e48:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e4a:	e00f      	b.n	8005e6c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8005e4c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e4e:	e00d      	b.n	8005e6c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d008      	beq.n	8005e6c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f809 	bl	8005e7e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005e94:	2b28      	cmp	r3, #40	@ 0x28
 8005e96:	d16a      	bne.n	8005f6e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	0c1b      	lsrs	r3, r3, #16
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	0c1b      	lsrs	r3, r3, #16
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005eb6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ec4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005ed2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d138      	bne.n	8005f4e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005edc:	897b      	ldrh	r3, [r7, #10]
 8005ede:	09db      	lsrs	r3, r3, #7
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	89bb      	ldrh	r3, [r7, #12]
 8005ee4:	4053      	eors	r3, r2
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f003 0306 	and.w	r3, r3, #6
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d11c      	bne.n	8005f2a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005ef0:	897b      	ldrh	r3, [r7, #10]
 8005ef2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d13b      	bne.n	8005f7e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2208      	movs	r2, #8
 8005f12:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f1c:	89ba      	ldrh	r2, [r7, #12]
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff fa55 	bl	80053d2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005f28:	e029      	b.n	8005f7e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005f2a:	893b      	ldrh	r3, [r7, #8]
 8005f2c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005f2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fdb2 	bl	8006a9c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f40:	89ba      	ldrh	r2, [r7, #12]
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff fa43 	bl	80053d2 <HAL_I2C_AddrCallback>
}
 8005f4c:	e017      	b.n	8005f7e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005f4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fda2 	bl	8006a9c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f60:	89ba      	ldrh	r2, [r7, #12]
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff fa33 	bl	80053d2 <HAL_I2C_AddrCallback>
}
 8005f6c:	e007      	b.n	8005f7e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2208      	movs	r2, #8
 8005f74:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005f7e:	bf00      	nop
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b21      	cmp	r3, #33	@ 0x21
 8005fa0:	d115      	bne.n	8005fce <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2211      	movs	r2, #17
 8005fae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fd6f 	bl	8006a9c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff f9db 	bl	8005382 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fcc:	e014      	b.n	8005ff8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2212      	movs	r2, #18
 8005fda:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005fe2:	2102      	movs	r1, #2
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fd59 	bl	8006a9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff f9cf 	bl	8005396 <HAL_I2C_MasterRxCpltCallback>
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d008      	beq.n	8006034 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e00c      	b.n	800604e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d007      	beq.n	800604e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800604c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b29      	cmp	r3, #41	@ 0x29
 8006058:	d112      	bne.n	8006080 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2228      	movs	r2, #40	@ 0x28
 800605e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2221      	movs	r2, #33	@ 0x21
 8006066:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006068:	2101      	movs	r1, #1
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fd16 	bl	8006a9c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff f996 	bl	80053aa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800607e:	e017      	b.n	80060b0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b2a      	cmp	r3, #42	@ 0x2a
 800608a:	d111      	bne.n	80060b0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2228      	movs	r2, #40	@ 0x28
 8006090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2222      	movs	r2, #34	@ 0x22
 8006098:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800609a:	2102      	movs	r1, #2
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fcfd 	bl	8006a9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff f987 	bl	80053be <HAL_I2C_SlaveRxCpltCallback>
}
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2220      	movs	r2, #32
 80060cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b21      	cmp	r3, #33	@ 0x21
 80060d8:	d107      	bne.n	80060ea <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80060da:	2101      	movs	r1, #1
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fcdd 	bl	8006a9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2211      	movs	r2, #17
 80060e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80060e8:	e00c      	b.n	8006104 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b22      	cmp	r3, #34	@ 0x22
 80060f4:	d106      	bne.n	8006104 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80060f6:	2102      	movs	r1, #2
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fccf 	bl	8006a9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2212      	movs	r2, #18
 8006102:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6859      	ldr	r1, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	4b4c      	ldr	r3, [pc, #304]	@ (8006240 <I2C_ITMasterCplt+0x188>)
 8006110:	400b      	ands	r3, r1
 8006112:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a49      	ldr	r2, [pc, #292]	@ (8006244 <I2C_ITMasterCplt+0x18c>)
 800611e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2210      	movs	r2, #16
 8006130:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006136:	f043 0204 	orr.w	r2, r3, #4
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b60      	cmp	r3, #96	@ 0x60
 8006148:	d10a      	bne.n	8006160 <I2C_ITMasterCplt+0xa8>
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615a:	b2db      	uxtb	r3, r3
 800615c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800615e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fb40 	bl	80067e6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b60      	cmp	r3, #96	@ 0x60
 8006176:	d002      	beq.n	800617e <I2C_ITMasterCplt+0xc6>
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d006      	beq.n	800618c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fa17 	bl	80065b8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800618a:	e054      	b.n	8006236 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b21      	cmp	r3, #33	@ 0x21
 8006196:	d124      	bne.n	80061e2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b40      	cmp	r3, #64	@ 0x40
 80061b0:	d10b      	bne.n	80061ca <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff f91d 	bl	8005402 <HAL_I2C_MemTxCpltCallback>
}
 80061c8:	e035      	b.n	8006236 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff f8d1 	bl	8005382 <HAL_I2C_MasterTxCpltCallback>
}
 80061e0:	e029      	b.n	8006236 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b22      	cmp	r3, #34	@ 0x22
 80061ec:	d123      	bne.n	8006236 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b40      	cmp	r3, #64	@ 0x40
 8006206:	d10b      	bne.n	8006220 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff f8fc 	bl	8005416 <HAL_I2C_MemRxCpltCallback>
}
 800621e:	e00a      	b.n	8006236 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff f8b0 	bl	8005396 <HAL_I2C_MasterRxCpltCallback>
}
 8006236:	bf00      	nop
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	fe00e800 	.word	0xfe00e800
 8006244:	ffff0000 	.word	0xffff0000

08006248 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006262:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800626a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2220      	movs	r2, #32
 8006272:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006274:	7afb      	ldrb	r3, [r7, #11]
 8006276:	2b21      	cmp	r3, #33	@ 0x21
 8006278:	d002      	beq.n	8006280 <I2C_ITSlaveCplt+0x38>
 800627a:	7afb      	ldrb	r3, [r7, #11]
 800627c:	2b29      	cmp	r3, #41	@ 0x29
 800627e:	d108      	bne.n	8006292 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006280:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fc09 	bl	8006a9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2221      	movs	r2, #33	@ 0x21
 800628e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006290:	e019      	b.n	80062c6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006292:	7afb      	ldrb	r3, [r7, #11]
 8006294:	2b22      	cmp	r3, #34	@ 0x22
 8006296:	d002      	beq.n	800629e <I2C_ITSlaveCplt+0x56>
 8006298:	7afb      	ldrb	r3, [r7, #11]
 800629a:	2b2a      	cmp	r3, #42	@ 0x2a
 800629c:	d108      	bne.n	80062b0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800629e:	f248 0102 	movw	r1, #32770	@ 0x8002
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fbfa 	bl	8006a9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2222      	movs	r2, #34	@ 0x22
 80062ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80062ae:	e00a      	b.n	80062c6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80062b0:	7afb      	ldrb	r3, [r7, #11]
 80062b2:	2b28      	cmp	r3, #40	@ 0x28
 80062b4:	d107      	bne.n	80062c6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80062b6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fbee 	bl	8006a9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062d4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6859      	ldr	r1, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	4b89      	ldr	r3, [pc, #548]	@ (8006508 <I2C_ITSlaveCplt+0x2c0>)
 80062e2:	400b      	ands	r3, r1
 80062e4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fa7d 	bl	80067e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d013      	beq.n	800631e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006304:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630a:	2b00      	cmp	r3, #0
 800630c:	d01f      	beq.n	800634e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	b29a      	uxth	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800631c:	e017      	b.n	800634e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d012      	beq.n	800634e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006336:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d006      	beq.n	800634e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	b29a      	uxth	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d020      	beq.n	800639a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f023 0304 	bic.w	r3, r3, #4
 800635e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00c      	beq.n	800639a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a8:	f043 0204 	orr.w	r2, r3, #4
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d049      	beq.n	800644e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d044      	beq.n	800644e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d128      	bne.n	8006420 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b28      	cmp	r3, #40	@ 0x28
 80063d8:	d108      	bne.n	80063ec <I2C_ITSlaveCplt+0x1a4>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063e0:	d104      	bne.n	80063ec <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80063e2:	6979      	ldr	r1, [r7, #20]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f893 	bl	8006510 <I2C_ITListenCplt>
 80063ea:	e030      	b.n	800644e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b29      	cmp	r3, #41	@ 0x29
 80063f6:	d10e      	bne.n	8006416 <I2C_ITSlaveCplt+0x1ce>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063fe:	d00a      	beq.n	8006416 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2210      	movs	r2, #16
 8006406:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f9ec 	bl	80067e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff fdf6 	bl	8006000 <I2C_ITSlaveSeqCplt>
 8006414:	e01b      	b.n	800644e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2210      	movs	r2, #16
 800641c:	61da      	str	r2, [r3, #28]
 800641e:	e016      	b.n	800644e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2210      	movs	r2, #16
 8006426:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800642c:	f043 0204 	orr.w	r2, r3, #4
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <I2C_ITSlaveCplt+0x1fa>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006440:	d105      	bne.n	800644e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f8b5 	bl	80065b8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006460:	2b00      	cmp	r3, #0
 8006462:	d010      	beq.n	8006486 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f8a4 	bl	80065b8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b28      	cmp	r3, #40	@ 0x28
 800647a:	d141      	bne.n	8006500 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800647c:	6979      	ldr	r1, [r7, #20]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f846 	bl	8006510 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006484:	e03c      	b.n	8006500 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800648e:	d014      	beq.n	80064ba <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff fdb5 	bl	8006000 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a1c      	ldr	r2, [pc, #112]	@ (800650c <I2C_ITSlaveCplt+0x2c4>)
 800649a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fe ff9b 	bl	80053ee <HAL_I2C_ListenCpltCallback>
}
 80064b8:	e022      	b.n	8006500 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b22      	cmp	r3, #34	@ 0x22
 80064c4:	d10e      	bne.n	80064e4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7fe ff6e 	bl	80053be <HAL_I2C_SlaveRxCpltCallback>
}
 80064e2:	e00d      	b.n	8006500 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fe ff55 	bl	80053aa <HAL_I2C_SlaveTxCpltCallback>
}
 8006500:	bf00      	nop
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	fe00e800 	.word	0xfe00e800
 800650c:	ffff0000 	.word	0xffff0000

08006510 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a25      	ldr	r2, [pc, #148]	@ (80065b4 <I2C_ITListenCplt+0xa4>)
 800651e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b00      	cmp	r3, #0
 8006544:	d022      	beq.n	800658c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006562:	2b00      	cmp	r3, #0
 8006564:	d012      	beq.n	800658c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006584:	f043 0204 	orr.w	r2, r3, #4
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800658c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fa83 	bl	8006a9c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2210      	movs	r2, #16
 800659c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fe ff21 	bl	80053ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80065ac:	bf00      	nop
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	ffff0000 	.word	0xffff0000

080065b8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065c8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a6d      	ldr	r2, [pc, #436]	@ (800678c <I2C_ITError+0x1d4>)
 80065d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	2b28      	cmp	r3, #40	@ 0x28
 80065ee:	d005      	beq.n	80065fc <I2C_ITError+0x44>
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	2b29      	cmp	r3, #41	@ 0x29
 80065f4:	d002      	beq.n	80065fc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80065fa:	d10b      	bne.n	8006614 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80065fc:	2103      	movs	r1, #3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa4c 	bl	8006a9c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2228      	movs	r2, #40	@ 0x28
 8006608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a60      	ldr	r2, [pc, #384]	@ (8006790 <I2C_ITError+0x1d8>)
 8006610:	635a      	str	r2, [r3, #52]	@ 0x34
 8006612:	e030      	b.n	8006676 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006614:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fa3f 	bl	8006a9c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f8e1 	bl	80067e6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b60      	cmp	r3, #96	@ 0x60
 800662e:	d01f      	beq.n	8006670 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2220      	movs	r2, #32
 8006634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b20      	cmp	r3, #32
 8006644:	d114      	bne.n	8006670 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	2b10      	cmp	r3, #16
 8006652:	d109      	bne.n	8006668 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2210      	movs	r2, #16
 800665a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006660:	f043 0204 	orr.w	r2, r3, #4
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2220      	movs	r2, #32
 800666e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006680:	2b00      	cmp	r3, #0
 8006682:	d039      	beq.n	80066f8 <I2C_ITError+0x140>
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2b11      	cmp	r3, #17
 8006688:	d002      	beq.n	8006690 <I2C_ITError+0xd8>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b21      	cmp	r3, #33	@ 0x21
 800668e:	d133      	bne.n	80066f8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800669a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800669e:	d107      	bne.n	80066b0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fe f9df 	bl	8004a78 <HAL_DMA_GetState>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d017      	beq.n	80066f0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c4:	4a33      	ldr	r2, [pc, #204]	@ (8006794 <I2C_ITError+0x1dc>)
 80066c6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe f8b9 	bl	800484c <HAL_DMA_Abort_IT>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d04d      	beq.n	800677c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80066ea:	4610      	mov	r0, r2
 80066ec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066ee:	e045      	b.n	800677c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f851 	bl	8006798 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066f6:	e041      	b.n	800677c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d039      	beq.n	8006774 <I2C_ITError+0x1bc>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b12      	cmp	r3, #18
 8006704:	d002      	beq.n	800670c <I2C_ITError+0x154>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b22      	cmp	r3, #34	@ 0x22
 800670a:	d133      	bne.n	8006774 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006716:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800671a:	d107      	bne.n	800672c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800672a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006730:	4618      	mov	r0, r3
 8006732:	f7fe f9a1 	bl	8004a78 <HAL_DMA_GetState>
 8006736:	4603      	mov	r3, r0
 8006738:	2b01      	cmp	r3, #1
 800673a:	d017      	beq.n	800676c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006740:	4a14      	ldr	r2, [pc, #80]	@ (8006794 <I2C_ITError+0x1dc>)
 8006742:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006750:	4618      	mov	r0, r3
 8006752:	f7fe f87b 	bl	800484c <HAL_DMA_Abort_IT>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d011      	beq.n	8006780 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006766:	4610      	mov	r0, r2
 8006768:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800676a:	e009      	b.n	8006780 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f813 	bl	8006798 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006772:	e005      	b.n	8006780 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f80f 	bl	8006798 <I2C_TreatErrorCallback>
  }
}
 800677a:	e002      	b.n	8006782 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800677c:	bf00      	nop
 800677e:	e000      	b.n	8006782 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006780:	bf00      	nop
}
 8006782:	bf00      	nop
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	ffff0000 	.word	0xffff0000
 8006790:	080056bd 	.word	0x080056bd
 8006794:	080068f3 	.word	0x080068f3

08006798 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b60      	cmp	r3, #96	@ 0x60
 80067aa:	d10e      	bne.n	80067ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fe fe3b 	bl	800543e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067c8:	e009      	b.n	80067de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7fe fe26 	bl	800542a <HAL_I2C_ErrorCallback>
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d103      	bne.n	8006804 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2200      	movs	r2, #0
 8006802:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b01      	cmp	r3, #1
 8006810:	d007      	beq.n	8006822 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	699a      	ldr	r2, [r3, #24]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0201 	orr.w	r2, r2, #1
 8006820:	619a      	str	r2, [r3, #24]
  }
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800684a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006850:	b29b      	uxth	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d104      	bne.n	8006860 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006856:	2120      	movs	r1, #32
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 f89b 	bl	8006994 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800685e:	e02d      	b.n	80068bc <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006868:	441a      	add	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006872:	b29b      	uxth	r3, r3
 8006874:	2bff      	cmp	r3, #255	@ 0xff
 8006876:	d903      	bls.n	8006880 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	22ff      	movs	r2, #255	@ 0xff
 800687c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800687e:	e004      	b.n	800688a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	4619      	mov	r1, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3328      	adds	r3, #40	@ 0x28
 800689a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80068a0:	f7fd ff00 	bl	80046a4 <HAL_DMA_Start_IT>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d004      	beq.n	80068b4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80068aa:	2110      	movs	r1, #16
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f7ff fe83 	bl	80065b8 <I2C_ITError>
}
 80068b2:	e003      	b.n	80068bc <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80068b4:	2140      	movs	r1, #64	@ 0x40
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f86c 	bl	8006994 <I2C_Enable_IRQ>
}
 80068bc:	bf00      	nop
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068e0:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80068e2:	2110      	movs	r1, #16
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff fe67 	bl	80065b8 <I2C_ITError>
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690c:	2200      	movs	r2, #0
 800690e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d003      	beq.n	8006920 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800691c:	2200      	movs	r2, #0
 800691e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7ff ff39 	bl	8006798 <I2C_TreatErrorCallback>
}
 8006926:	bf00      	nop
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	607b      	str	r3, [r7, #4]
 800693a:	460b      	mov	r3, r1
 800693c:	817b      	strh	r3, [r7, #10]
 800693e:	4613      	mov	r3, r2
 8006940:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006942:	897b      	ldrh	r3, [r7, #10]
 8006944:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006948:	7a7b      	ldrb	r3, [r7, #9]
 800694a:	041b      	lsls	r3, r3, #16
 800694c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006950:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	4313      	orrs	r3, r2
 800695a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800695e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	0d5b      	lsrs	r3, r3, #21
 800696a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800696e:	4b08      	ldr	r3, [pc, #32]	@ (8006990 <I2C_TransferConfig+0x60>)
 8006970:	430b      	orrs	r3, r1
 8006972:	43db      	mvns	r3, r3
 8006974:	ea02 0103 	and.w	r1, r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	03ff63ff 	.word	0x03ff63ff

08006994 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a8:	4a39      	ldr	r2, [pc, #228]	@ (8006a90 <I2C_Enable_IRQ+0xfc>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d032      	beq.n	8006a14 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80069b2:	4a38      	ldr	r2, [pc, #224]	@ (8006a94 <I2C_Enable_IRQ+0x100>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d02d      	beq.n	8006a14 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80069bc:	4a36      	ldr	r2, [pc, #216]	@ (8006a98 <I2C_Enable_IRQ+0x104>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d028      	beq.n	8006a14 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80069c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	da03      	bge.n	80069d2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80069d0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80069d2:	887b      	ldrh	r3, [r7, #2]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80069e2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80069e4:	887b      	ldrh	r3, [r7, #2]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80069f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80069f6:	887b      	ldrh	r3, [r7, #2]
 80069f8:	2b10      	cmp	r3, #16
 80069fa:	d103      	bne.n	8006a04 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006a02:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a04:	887b      	ldrh	r3, [r7, #2]
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d133      	bne.n	8006a72 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f043 0320 	orr.w	r3, r3, #32
 8006a10:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a12:	e02e      	b.n	8006a72 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006a14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	da03      	bge.n	8006a24 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006a22:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006a24:	887b      	ldrh	r3, [r7, #2]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006a34:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a36:	887b      	ldrh	r3, [r7, #2]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006a46:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006a48:	887b      	ldrh	r3, [r7, #2]
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d103      	bne.n	8006a56 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006a54:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a56:	887b      	ldrh	r3, [r7, #2]
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d103      	bne.n	8006a64 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006a62:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006a64:	887b      	ldrh	r3, [r7, #2]
 8006a66:	2b40      	cmp	r3, #64	@ 0x40
 8006a68:	d103      	bne.n	8006a72 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a70:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6819      	ldr	r1, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	601a      	str	r2, [r3, #0]
}
 8006a82:	bf00      	nop
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	080058af 	.word	0x080058af
 8006a94:	08005cd1 	.word	0x08005cd1
 8006a98:	08005a85 	.word	0x08005a85

08006a9c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006aac:	887b      	ldrh	r3, [r7, #2]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00f      	beq.n	8006ad6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006abc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006aca:	2b28      	cmp	r3, #40	@ 0x28
 8006acc:	d003      	beq.n	8006ad6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006ad4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006ad6:	887b      	ldrh	r3, [r7, #2]
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00f      	beq.n	8006b00 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006ae6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006af4:	2b28      	cmp	r3, #40	@ 0x28
 8006af6:	d003      	beq.n	8006b00 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006afe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	da03      	bge.n	8006b10 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006b0e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006b10:	887b      	ldrh	r3, [r7, #2]
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d103      	bne.n	8006b1e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006b1c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b1e:	887b      	ldrh	r3, [r7, #2]
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	d103      	bne.n	8006b2c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f043 0320 	orr.w	r3, r3, #32
 8006b2a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006b2c:	887b      	ldrh	r3, [r7, #2]
 8006b2e:	2b40      	cmp	r3, #64	@ 0x40
 8006b30:	d103      	bne.n	8006b3a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b38:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6819      	ldr	r1, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	43da      	mvns	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	400a      	ands	r2, r1
 8006b4a:	601a      	str	r2, [r3, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d138      	bne.n	8006be0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e032      	b.n	8006be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2224      	movs	r2, #36	@ 0x24
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0201 	bic.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006baa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6819      	ldr	r1, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0201 	orr.w	r2, r2, #1
 8006bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e000      	b.n	8006be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006be0:	2302      	movs	r3, #2
  }
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	d139      	bne.n	8006c78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e033      	b.n	8006c7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2224      	movs	r2, #36	@ 0x24
 8006c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0201 	bic.w	r2, r2, #1
 8006c30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0201 	orr.w	r2, r2, #1
 8006c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	e000      	b.n	8006c7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c78:	2302      	movs	r3, #2
  }
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
	...

08006c88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d141      	bne.n	8006d1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c96:	4b4b      	ldr	r3, [pc, #300]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca2:	d131      	bne.n	8006d08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ca4:	4b47      	ldr	r3, [pc, #284]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006caa:	4a46      	ldr	r2, [pc, #280]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cb4:	4b43      	ldr	r3, [pc, #268]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006cbc:	4a41      	ldr	r2, [pc, #260]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006cc4:	4b40      	ldr	r3, [pc, #256]	@ (8006dc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2232      	movs	r2, #50	@ 0x32
 8006cca:	fb02 f303 	mul.w	r3, r2, r3
 8006cce:	4a3f      	ldr	r2, [pc, #252]	@ (8006dcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd4:	0c9b      	lsrs	r3, r3, #18
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cda:	e002      	b.n	8006ce2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ce2:	4b38      	ldr	r3, [pc, #224]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cee:	d102      	bne.n	8006cf6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f2      	bne.n	8006cdc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cf6:	4b33      	ldr	r3, [pc, #204]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d02:	d158      	bne.n	8006db6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e057      	b.n	8006db8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d08:	4b2e      	ldr	r3, [pc, #184]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006d18:	e04d      	b.n	8006db6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d20:	d141      	bne.n	8006da6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d22:	4b28      	ldr	r3, [pc, #160]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d2e:	d131      	bne.n	8006d94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d30:	4b24      	ldr	r3, [pc, #144]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d36:	4a23      	ldr	r2, [pc, #140]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d40:	4b20      	ldr	r3, [pc, #128]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d48:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d50:	4b1d      	ldr	r3, [pc, #116]	@ (8006dc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2232      	movs	r2, #50	@ 0x32
 8006d56:	fb02 f303 	mul.w	r3, r2, r3
 8006d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d60:	0c9b      	lsrs	r3, r3, #18
 8006d62:	3301      	adds	r3, #1
 8006d64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d66:	e002      	b.n	8006d6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d6e:	4b15      	ldr	r3, [pc, #84]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d7a:	d102      	bne.n	8006d82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f2      	bne.n	8006d68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d82:	4b10      	ldr	r3, [pc, #64]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d8e:	d112      	bne.n	8006db6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e011      	b.n	8006db8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d94:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006da0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006da4:	e007      	b.n	8006db6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006da6:	4b07      	ldr	r3, [pc, #28]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006dae:	4a05      	ldr	r2, [pc, #20]	@ (8006dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006db0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006db4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	40007000 	.word	0x40007000
 8006dc8:	2000003c 	.word	0x2000003c
 8006dcc:	431bde83 	.word	0x431bde83

08006dd0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006dd4:	4b05      	ldr	r3, [pc, #20]	@ (8006dec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	4a04      	ldr	r2, [pc, #16]	@ (8006dec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006dda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006dde:	6093      	str	r3, [r2, #8]
}
 8006de0:	bf00      	nop
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	40007000 	.word	0x40007000

08006df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e2fe      	b.n	8007400 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d075      	beq.n	8006efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e0e:	4b97      	ldr	r3, [pc, #604]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 030c 	and.w	r3, r3, #12
 8006e16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e18:	4b94      	ldr	r3, [pc, #592]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	2b0c      	cmp	r3, #12
 8006e26:	d102      	bne.n	8006e2e <HAL_RCC_OscConfig+0x3e>
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d002      	beq.n	8006e34 <HAL_RCC_OscConfig+0x44>
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d10b      	bne.n	8006e4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e34:	4b8d      	ldr	r3, [pc, #564]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d05b      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x108>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d157      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e2d9      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e54:	d106      	bne.n	8006e64 <HAL_RCC_OscConfig+0x74>
 8006e56:	4b85      	ldr	r3, [pc, #532]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a84      	ldr	r2, [pc, #528]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	e01d      	b.n	8006ea0 <HAL_RCC_OscConfig+0xb0>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e6c:	d10c      	bne.n	8006e88 <HAL_RCC_OscConfig+0x98>
 8006e6e:	4b7f      	ldr	r3, [pc, #508]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a7e      	ldr	r2, [pc, #504]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	4b7c      	ldr	r3, [pc, #496]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a7b      	ldr	r2, [pc, #492]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	e00b      	b.n	8006ea0 <HAL_RCC_OscConfig+0xb0>
 8006e88:	4b78      	ldr	r3, [pc, #480]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a77      	ldr	r2, [pc, #476]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006e8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	4b75      	ldr	r3, [pc, #468]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a74      	ldr	r2, [pc, #464]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006e9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d013      	beq.n	8006ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea8:	f7fd f9e4 	bl	8004274 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006eb0:	f7fd f9e0 	bl	8004274 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b64      	cmp	r3, #100	@ 0x64
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e29e      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ec2:	4b6a      	ldr	r3, [pc, #424]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0f0      	beq.n	8006eb0 <HAL_RCC_OscConfig+0xc0>
 8006ece:	e014      	b.n	8006efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed0:	f7fd f9d0 	bl	8004274 <HAL_GetTick>
 8006ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ed6:	e008      	b.n	8006eea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ed8:	f7fd f9cc 	bl	8004274 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b64      	cmp	r3, #100	@ 0x64
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e28a      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006eea:	4b60      	ldr	r3, [pc, #384]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1f0      	bne.n	8006ed8 <HAL_RCC_OscConfig+0xe8>
 8006ef6:	e000      	b.n	8006efa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d075      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f06:	4b59      	ldr	r3, [pc, #356]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f003 030c 	and.w	r3, r3, #12
 8006f0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f10:	4b56      	ldr	r3, [pc, #344]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0303 	and.w	r3, r3, #3
 8006f18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	2b0c      	cmp	r3, #12
 8006f1e:	d102      	bne.n	8006f26 <HAL_RCC_OscConfig+0x136>
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d002      	beq.n	8006f2c <HAL_RCC_OscConfig+0x13c>
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d11f      	bne.n	8006f6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <HAL_RCC_OscConfig+0x154>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e25d      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f44:	4b49      	ldr	r3, [pc, #292]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	061b      	lsls	r3, r3, #24
 8006f52:	4946      	ldr	r1, [pc, #280]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f58:	4b45      	ldr	r3, [pc, #276]	@ (8007070 <HAL_RCC_OscConfig+0x280>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fd f93d 	bl	80041dc <HAL_InitTick>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d043      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e249      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d023      	beq.n	8006fbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f74:	4b3d      	ldr	r3, [pc, #244]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a3c      	ldr	r2, [pc, #240]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f80:	f7fd f978 	bl	8004274 <HAL_GetTick>
 8006f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f88:	f7fd f974 	bl	8004274 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e232      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f9a:	4b34      	ldr	r3, [pc, #208]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0f0      	beq.n	8006f88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fa6:	4b31      	ldr	r3, [pc, #196]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	061b      	lsls	r3, r3, #24
 8006fb4:	492d      	ldr	r1, [pc, #180]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	604b      	str	r3, [r1, #4]
 8006fba:	e01a      	b.n	8006ff2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006fc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc8:	f7fd f954 	bl	8004274 <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fce:	e008      	b.n	8006fe2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fd0:	f7fd f950 	bl	8004274 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e20e      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fe2:	4b22      	ldr	r3, [pc, #136]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1f0      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x1e0>
 8006fee:	e000      	b.n	8006ff2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ff0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0308 	and.w	r3, r3, #8
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d041      	beq.n	8007082 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d01c      	beq.n	8007040 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007006:	4b19      	ldr	r3, [pc, #100]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8007008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800700c:	4a17      	ldr	r2, [pc, #92]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 800700e:	f043 0301 	orr.w	r3, r3, #1
 8007012:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007016:	f7fd f92d 	bl	8004274 <HAL_GetTick>
 800701a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800701c:	e008      	b.n	8007030 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800701e:	f7fd f929 	bl	8004274 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d901      	bls.n	8007030 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e1e7      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007030:	4b0e      	ldr	r3, [pc, #56]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8007032:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0ef      	beq.n	800701e <HAL_RCC_OscConfig+0x22e>
 800703e:	e020      	b.n	8007082 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007040:	4b0a      	ldr	r3, [pc, #40]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8007042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007046:	4a09      	ldr	r2, [pc, #36]	@ (800706c <HAL_RCC_OscConfig+0x27c>)
 8007048:	f023 0301 	bic.w	r3, r3, #1
 800704c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007050:	f7fd f910 	bl	8004274 <HAL_GetTick>
 8007054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007056:	e00d      	b.n	8007074 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007058:	f7fd f90c 	bl	8004274 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d906      	bls.n	8007074 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e1ca      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
 800706a:	bf00      	nop
 800706c:	40021000 	.word	0x40021000
 8007070:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007074:	4b8c      	ldr	r3, [pc, #560]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 8007076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1ea      	bne.n	8007058 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 80a6 	beq.w	80071dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007090:	2300      	movs	r3, #0
 8007092:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007094:	4b84      	ldr	r3, [pc, #528]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 8007096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <HAL_RCC_OscConfig+0x2b4>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e000      	b.n	80070a6 <HAL_RCC_OscConfig+0x2b6>
 80070a4:	2300      	movs	r3, #0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00d      	beq.n	80070c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070aa:	4b7f      	ldr	r3, [pc, #508]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 80070ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ae:	4a7e      	ldr	r2, [pc, #504]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 80070b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80070b6:	4b7c      	ldr	r3, [pc, #496]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 80070b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80070c2:	2301      	movs	r3, #1
 80070c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070c6:	4b79      	ldr	r3, [pc, #484]	@ (80072ac <HAL_RCC_OscConfig+0x4bc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d118      	bne.n	8007104 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070d2:	4b76      	ldr	r3, [pc, #472]	@ (80072ac <HAL_RCC_OscConfig+0x4bc>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a75      	ldr	r2, [pc, #468]	@ (80072ac <HAL_RCC_OscConfig+0x4bc>)
 80070d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070de:	f7fd f8c9 	bl	8004274 <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070e4:	e008      	b.n	80070f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e6:	f7fd f8c5 	bl	8004274 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e183      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070f8:	4b6c      	ldr	r3, [pc, #432]	@ (80072ac <HAL_RCC_OscConfig+0x4bc>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0f0      	beq.n	80070e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d108      	bne.n	800711e <HAL_RCC_OscConfig+0x32e>
 800710c:	4b66      	ldr	r3, [pc, #408]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 800710e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007112:	4a65      	ldr	r2, [pc, #404]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 8007114:	f043 0301 	orr.w	r3, r3, #1
 8007118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800711c:	e024      	b.n	8007168 <HAL_RCC_OscConfig+0x378>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2b05      	cmp	r3, #5
 8007124:	d110      	bne.n	8007148 <HAL_RCC_OscConfig+0x358>
 8007126:	4b60      	ldr	r3, [pc, #384]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 8007128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800712c:	4a5e      	ldr	r2, [pc, #376]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 800712e:	f043 0304 	orr.w	r3, r3, #4
 8007132:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007136:	4b5c      	ldr	r3, [pc, #368]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 8007138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800713c:	4a5a      	ldr	r2, [pc, #360]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 800713e:	f043 0301 	orr.w	r3, r3, #1
 8007142:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007146:	e00f      	b.n	8007168 <HAL_RCC_OscConfig+0x378>
 8007148:	4b57      	ldr	r3, [pc, #348]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 800714a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800714e:	4a56      	ldr	r2, [pc, #344]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 8007150:	f023 0301 	bic.w	r3, r3, #1
 8007154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007158:	4b53      	ldr	r3, [pc, #332]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 800715a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715e:	4a52      	ldr	r2, [pc, #328]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 8007160:	f023 0304 	bic.w	r3, r3, #4
 8007164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d016      	beq.n	800719e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007170:	f7fd f880 	bl	8004274 <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007176:	e00a      	b.n	800718e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007178:	f7fd f87c 	bl	8004274 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007186:	4293      	cmp	r3, r2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e138      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800718e:	4b46      	ldr	r3, [pc, #280]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 8007190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0ed      	beq.n	8007178 <HAL_RCC_OscConfig+0x388>
 800719c:	e015      	b.n	80071ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800719e:	f7fd f869 	bl	8004274 <HAL_GetTick>
 80071a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071a4:	e00a      	b.n	80071bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071a6:	f7fd f865 	bl	8004274 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e121      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071bc:	4b3a      	ldr	r3, [pc, #232]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 80071be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1ed      	bne.n	80071a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071ca:	7ffb      	ldrb	r3, [r7, #31]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d105      	bne.n	80071dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071d0:	4b35      	ldr	r3, [pc, #212]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 80071d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d4:	4a34      	ldr	r2, [pc, #208]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 80071d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0320 	and.w	r3, r3, #32
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d03c      	beq.n	8007262 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01c      	beq.n	800722a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071f0:	4b2d      	ldr	r3, [pc, #180]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 80071f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071f6:	4a2c      	ldr	r2, [pc, #176]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 80071f8:	f043 0301 	orr.w	r3, r3, #1
 80071fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007200:	f7fd f838 	bl	8004274 <HAL_GetTick>
 8007204:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007206:	e008      	b.n	800721a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007208:	f7fd f834 	bl	8004274 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e0f2      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800721a:	4b23      	ldr	r3, [pc, #140]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 800721c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0ef      	beq.n	8007208 <HAL_RCC_OscConfig+0x418>
 8007228:	e01b      	b.n	8007262 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800722a:	4b1f      	ldr	r3, [pc, #124]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 800722c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007230:	4a1d      	ldr	r2, [pc, #116]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 8007232:	f023 0301 	bic.w	r3, r3, #1
 8007236:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723a:	f7fd f81b 	bl	8004274 <HAL_GetTick>
 800723e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007240:	e008      	b.n	8007254 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007242:	f7fd f817 	bl	8004274 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e0d5      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007254:	4b14      	ldr	r3, [pc, #80]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 8007256:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1ef      	bne.n	8007242 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 80c9 	beq.w	80073fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800726c:	4b0e      	ldr	r3, [pc, #56]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f003 030c 	and.w	r3, r3, #12
 8007274:	2b0c      	cmp	r3, #12
 8007276:	f000 8083 	beq.w	8007380 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	2b02      	cmp	r3, #2
 8007280:	d15e      	bne.n	8007340 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007282:	4b09      	ldr	r3, [pc, #36]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a08      	ldr	r2, [pc, #32]	@ (80072a8 <HAL_RCC_OscConfig+0x4b8>)
 8007288:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800728c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728e:	f7fc fff1 	bl	8004274 <HAL_GetTick>
 8007292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007294:	e00c      	b.n	80072b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007296:	f7fc ffed 	bl	8004274 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d905      	bls.n	80072b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e0ab      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
 80072a8:	40021000 	.word	0x40021000
 80072ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072b0:	4b55      	ldr	r3, [pc, #340]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1ec      	bne.n	8007296 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072bc:	4b52      	ldr	r3, [pc, #328]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	4b52      	ldr	r3, [pc, #328]	@ (800740c <HAL_RCC_OscConfig+0x61c>)
 80072c2:	4013      	ands	r3, r2
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6a11      	ldr	r1, [r2, #32]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072cc:	3a01      	subs	r2, #1
 80072ce:	0112      	lsls	r2, r2, #4
 80072d0:	4311      	orrs	r1, r2
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80072d6:	0212      	lsls	r2, r2, #8
 80072d8:	4311      	orrs	r1, r2
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80072de:	0852      	lsrs	r2, r2, #1
 80072e0:	3a01      	subs	r2, #1
 80072e2:	0552      	lsls	r2, r2, #21
 80072e4:	4311      	orrs	r1, r2
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80072ea:	0852      	lsrs	r2, r2, #1
 80072ec:	3a01      	subs	r2, #1
 80072ee:	0652      	lsls	r2, r2, #25
 80072f0:	4311      	orrs	r1, r2
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80072f6:	06d2      	lsls	r2, r2, #27
 80072f8:	430a      	orrs	r2, r1
 80072fa:	4943      	ldr	r1, [pc, #268]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007300:	4b41      	ldr	r3, [pc, #260]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a40      	ldr	r2, [pc, #256]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 8007306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800730a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800730c:	4b3e      	ldr	r3, [pc, #248]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	4a3d      	ldr	r2, [pc, #244]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 8007312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007316:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007318:	f7fc ffac 	bl	8004274 <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007320:	f7fc ffa8 	bl	8004274 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e066      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007332:	4b35      	ldr	r3, [pc, #212]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f0      	beq.n	8007320 <HAL_RCC_OscConfig+0x530>
 800733e:	e05e      	b.n	80073fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007340:	4b31      	ldr	r3, [pc, #196]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a30      	ldr	r2, [pc, #192]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 8007346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800734a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734c:	f7fc ff92 	bl	8004274 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007354:	f7fc ff8e 	bl	8004274 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e04c      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007366:	4b28      	ldr	r3, [pc, #160]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f0      	bne.n	8007354 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007372:	4b25      	ldr	r3, [pc, #148]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	4924      	ldr	r1, [pc, #144]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 8007378:	4b25      	ldr	r3, [pc, #148]	@ (8007410 <HAL_RCC_OscConfig+0x620>)
 800737a:	4013      	ands	r3, r2
 800737c:	60cb      	str	r3, [r1, #12]
 800737e:	e03e      	b.n	80073fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e039      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800738c:	4b1e      	ldr	r3, [pc, #120]	@ (8007408 <HAL_RCC_OscConfig+0x618>)
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f003 0203 	and.w	r2, r3, #3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	429a      	cmp	r2, r3
 800739e:	d12c      	bne.n	80073fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073aa:	3b01      	subs	r3, #1
 80073ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d123      	bne.n	80073fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073be:	429a      	cmp	r2, r3
 80073c0:	d11b      	bne.n	80073fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d113      	bne.n	80073fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073dc:	085b      	lsrs	r3, r3, #1
 80073de:	3b01      	subs	r3, #1
 80073e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d109      	bne.n	80073fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073f0:	085b      	lsrs	r3, r3, #1
 80073f2:	3b01      	subs	r3, #1
 80073f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d001      	beq.n	80073fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3720      	adds	r7, #32
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	40021000 	.word	0x40021000
 800740c:	019f800c 	.word	0x019f800c
 8007410:	feeefffc 	.word	0xfeeefffc

08007414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e11e      	b.n	800766a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800742c:	4b91      	ldr	r3, [pc, #580]	@ (8007674 <HAL_RCC_ClockConfig+0x260>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d910      	bls.n	800745c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800743a:	4b8e      	ldr	r3, [pc, #568]	@ (8007674 <HAL_RCC_ClockConfig+0x260>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f023 020f 	bic.w	r2, r3, #15
 8007442:	498c      	ldr	r1, [pc, #560]	@ (8007674 <HAL_RCC_ClockConfig+0x260>)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	4313      	orrs	r3, r2
 8007448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800744a:	4b8a      	ldr	r3, [pc, #552]	@ (8007674 <HAL_RCC_ClockConfig+0x260>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d001      	beq.n	800745c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e106      	b.n	800766a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	d073      	beq.n	8007550 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	2b03      	cmp	r3, #3
 800746e:	d129      	bne.n	80074c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007470:	4b81      	ldr	r3, [pc, #516]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e0f4      	b.n	800766a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007480:	f000 f99e 	bl	80077c0 <RCC_GetSysClockFreqFromPLLSource>
 8007484:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	4a7c      	ldr	r2, [pc, #496]	@ (800767c <HAL_RCC_ClockConfig+0x268>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d93f      	bls.n	800750e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800748e:	4b7a      	ldr	r3, [pc, #488]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d009      	beq.n	80074ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d033      	beq.n	800750e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d12f      	bne.n	800750e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074ae:	4b72      	ldr	r3, [pc, #456]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074b6:	4a70      	ldr	r2, [pc, #448]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 80074b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80074be:	2380      	movs	r3, #128	@ 0x80
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	e024      	b.n	800750e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d107      	bne.n	80074dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074cc:	4b6a      	ldr	r3, [pc, #424]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d109      	bne.n	80074ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e0c6      	b.n	800766a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074dc:	4b66      	ldr	r3, [pc, #408]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e0be      	b.n	800766a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80074ec:	f000 f8ce 	bl	800768c <HAL_RCC_GetSysClockFreq>
 80074f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	4a61      	ldr	r2, [pc, #388]	@ (800767c <HAL_RCC_ClockConfig+0x268>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d909      	bls.n	800750e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074fa:	4b5f      	ldr	r3, [pc, #380]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007502:	4a5d      	ldr	r2, [pc, #372]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 8007504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007508:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800750a:	2380      	movs	r3, #128	@ 0x80
 800750c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800750e:	4b5a      	ldr	r3, [pc, #360]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f023 0203 	bic.w	r2, r3, #3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	4957      	ldr	r1, [pc, #348]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 800751c:	4313      	orrs	r3, r2
 800751e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007520:	f7fc fea8 	bl	8004274 <HAL_GetTick>
 8007524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007526:	e00a      	b.n	800753e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007528:	f7fc fea4 	bl	8004274 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007536:	4293      	cmp	r3, r2
 8007538:	d901      	bls.n	800753e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e095      	b.n	800766a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800753e:	4b4e      	ldr	r3, [pc, #312]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 020c 	and.w	r2, r3, #12
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	429a      	cmp	r2, r3
 800754e:	d1eb      	bne.n	8007528 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d023      	beq.n	80075a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d005      	beq.n	8007574 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007568:	4b43      	ldr	r3, [pc, #268]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	4a42      	ldr	r2, [pc, #264]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 800756e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007572:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0308 	and.w	r3, r3, #8
 800757c:	2b00      	cmp	r3, #0
 800757e:	d007      	beq.n	8007590 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007580:	4b3d      	ldr	r3, [pc, #244]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007588:	4a3b      	ldr	r2, [pc, #236]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 800758a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800758e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007590:	4b39      	ldr	r3, [pc, #228]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	4936      	ldr	r1, [pc, #216]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	608b      	str	r3, [r1, #8]
 80075a2:	e008      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	2b80      	cmp	r3, #128	@ 0x80
 80075a8:	d105      	bne.n	80075b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80075aa:	4b33      	ldr	r3, [pc, #204]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	4a32      	ldr	r2, [pc, #200]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 80075b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075b6:	4b2f      	ldr	r3, [pc, #188]	@ (8007674 <HAL_RCC_ClockConfig+0x260>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d21d      	bcs.n	8007600 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007674 <HAL_RCC_ClockConfig+0x260>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f023 020f 	bic.w	r2, r3, #15
 80075cc:	4929      	ldr	r1, [pc, #164]	@ (8007674 <HAL_RCC_ClockConfig+0x260>)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80075d4:	f7fc fe4e 	bl	8004274 <HAL_GetTick>
 80075d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075da:	e00a      	b.n	80075f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075dc:	f7fc fe4a 	bl	8004274 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e03b      	b.n	800766a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075f2:	4b20      	ldr	r3, [pc, #128]	@ (8007674 <HAL_RCC_ClockConfig+0x260>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d1ed      	bne.n	80075dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b00      	cmp	r3, #0
 800760a:	d008      	beq.n	800761e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800760c:	4b1a      	ldr	r3, [pc, #104]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	4917      	ldr	r1, [pc, #92]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 800761a:	4313      	orrs	r3, r2
 800761c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800762a:	4b13      	ldr	r3, [pc, #76]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	490f      	ldr	r1, [pc, #60]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 800763a:	4313      	orrs	r3, r2
 800763c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800763e:	f000 f825 	bl	800768c <HAL_RCC_GetSysClockFreq>
 8007642:	4602      	mov	r2, r0
 8007644:	4b0c      	ldr	r3, [pc, #48]	@ (8007678 <HAL_RCC_ClockConfig+0x264>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	091b      	lsrs	r3, r3, #4
 800764a:	f003 030f 	and.w	r3, r3, #15
 800764e:	490c      	ldr	r1, [pc, #48]	@ (8007680 <HAL_RCC_ClockConfig+0x26c>)
 8007650:	5ccb      	ldrb	r3, [r1, r3]
 8007652:	f003 031f 	and.w	r3, r3, #31
 8007656:	fa22 f303 	lsr.w	r3, r2, r3
 800765a:	4a0a      	ldr	r2, [pc, #40]	@ (8007684 <HAL_RCC_ClockConfig+0x270>)
 800765c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800765e:	4b0a      	ldr	r3, [pc, #40]	@ (8007688 <HAL_RCC_ClockConfig+0x274>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f7fc fdba 	bl	80041dc <HAL_InitTick>
 8007668:	4603      	mov	r3, r0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	40022000 	.word	0x40022000
 8007678:	40021000 	.word	0x40021000
 800767c:	04c4b400 	.word	0x04c4b400
 8007680:	0800f660 	.word	0x0800f660
 8007684:	2000003c 	.word	0x2000003c
 8007688:	20000040 	.word	0x20000040

0800768c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007692:	4b2c      	ldr	r3, [pc, #176]	@ (8007744 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 030c 	and.w	r3, r3, #12
 800769a:	2b04      	cmp	r3, #4
 800769c:	d102      	bne.n	80076a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800769e:	4b2a      	ldr	r3, [pc, #168]	@ (8007748 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076a0:	613b      	str	r3, [r7, #16]
 80076a2:	e047      	b.n	8007734 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80076a4:	4b27      	ldr	r3, [pc, #156]	@ (8007744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f003 030c 	and.w	r3, r3, #12
 80076ac:	2b08      	cmp	r3, #8
 80076ae:	d102      	bne.n	80076b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80076b0:	4b26      	ldr	r3, [pc, #152]	@ (800774c <HAL_RCC_GetSysClockFreq+0xc0>)
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	e03e      	b.n	8007734 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80076b6:	4b23      	ldr	r3, [pc, #140]	@ (8007744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 030c 	and.w	r3, r3, #12
 80076be:	2b0c      	cmp	r3, #12
 80076c0:	d136      	bne.n	8007730 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076c2:	4b20      	ldr	r3, [pc, #128]	@ (8007744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	091b      	lsrs	r3, r3, #4
 80076d2:	f003 030f 	and.w	r3, r3, #15
 80076d6:	3301      	adds	r3, #1
 80076d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d10c      	bne.n	80076fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076e0:	4a1a      	ldr	r2, [pc, #104]	@ (800774c <HAL_RCC_GetSysClockFreq+0xc0>)
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e8:	4a16      	ldr	r2, [pc, #88]	@ (8007744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076ea:	68d2      	ldr	r2, [r2, #12]
 80076ec:	0a12      	lsrs	r2, r2, #8
 80076ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076f2:	fb02 f303 	mul.w	r3, r2, r3
 80076f6:	617b      	str	r3, [r7, #20]
      break;
 80076f8:	e00c      	b.n	8007714 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076fa:	4a13      	ldr	r2, [pc, #76]	@ (8007748 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007702:	4a10      	ldr	r2, [pc, #64]	@ (8007744 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007704:	68d2      	ldr	r2, [r2, #12]
 8007706:	0a12      	lsrs	r2, r2, #8
 8007708:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800770c:	fb02 f303 	mul.w	r3, r2, r3
 8007710:	617b      	str	r3, [r7, #20]
      break;
 8007712:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007714:	4b0b      	ldr	r3, [pc, #44]	@ (8007744 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	0e5b      	lsrs	r3, r3, #25
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	3301      	adds	r3, #1
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	fbb2 f3f3 	udiv	r3, r2, r3
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	e001      	b.n	8007734 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007734:	693b      	ldr	r3, [r7, #16]
}
 8007736:	4618      	mov	r0, r3
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	40021000 	.word	0x40021000
 8007748:	00f42400 	.word	0x00f42400
 800774c:	016e3600 	.word	0x016e3600

08007750 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007754:	4b03      	ldr	r3, [pc, #12]	@ (8007764 <HAL_RCC_GetHCLKFreq+0x14>)
 8007756:	681b      	ldr	r3, [r3, #0]
}
 8007758:	4618      	mov	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	2000003c 	.word	0x2000003c

08007768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800776c:	f7ff fff0 	bl	8007750 <HAL_RCC_GetHCLKFreq>
 8007770:	4602      	mov	r2, r0
 8007772:	4b06      	ldr	r3, [pc, #24]	@ (800778c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	0a1b      	lsrs	r3, r3, #8
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	4904      	ldr	r1, [pc, #16]	@ (8007790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800777e:	5ccb      	ldrb	r3, [r1, r3]
 8007780:	f003 031f 	and.w	r3, r3, #31
 8007784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007788:	4618      	mov	r0, r3
 800778a:	bd80      	pop	{r7, pc}
 800778c:	40021000 	.word	0x40021000
 8007790:	0800f670 	.word	0x0800f670

08007794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007798:	f7ff ffda 	bl	8007750 <HAL_RCC_GetHCLKFreq>
 800779c:	4602      	mov	r2, r0
 800779e:	4b06      	ldr	r3, [pc, #24]	@ (80077b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	0adb      	lsrs	r3, r3, #11
 80077a4:	f003 0307 	and.w	r3, r3, #7
 80077a8:	4904      	ldr	r1, [pc, #16]	@ (80077bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80077aa:	5ccb      	ldrb	r3, [r1, r3]
 80077ac:	f003 031f 	and.w	r3, r3, #31
 80077b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	40021000 	.word	0x40021000
 80077bc:	0800f670 	.word	0x0800f670

080077c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007840 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f003 0303 	and.w	r3, r3, #3
 80077ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007840 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	091b      	lsrs	r3, r3, #4
 80077d6:	f003 030f 	and.w	r3, r3, #15
 80077da:	3301      	adds	r3, #1
 80077dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d10c      	bne.n	80077fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077e4:	4a17      	ldr	r2, [pc, #92]	@ (8007844 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ec:	4a14      	ldr	r2, [pc, #80]	@ (8007840 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077ee:	68d2      	ldr	r2, [r2, #12]
 80077f0:	0a12      	lsrs	r2, r2, #8
 80077f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80077f6:	fb02 f303 	mul.w	r3, r2, r3
 80077fa:	617b      	str	r3, [r7, #20]
    break;
 80077fc:	e00c      	b.n	8007818 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077fe:	4a12      	ldr	r2, [pc, #72]	@ (8007848 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	fbb2 f3f3 	udiv	r3, r2, r3
 8007806:	4a0e      	ldr	r2, [pc, #56]	@ (8007840 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007808:	68d2      	ldr	r2, [r2, #12]
 800780a:	0a12      	lsrs	r2, r2, #8
 800780c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007810:	fb02 f303 	mul.w	r3, r2, r3
 8007814:	617b      	str	r3, [r7, #20]
    break;
 8007816:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007818:	4b09      	ldr	r3, [pc, #36]	@ (8007840 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	0e5b      	lsrs	r3, r3, #25
 800781e:	f003 0303 	and.w	r3, r3, #3
 8007822:	3301      	adds	r3, #1
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007830:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007832:	687b      	ldr	r3, [r7, #4]
}
 8007834:	4618      	mov	r0, r3
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	40021000 	.word	0x40021000
 8007844:	016e3600 	.word	0x016e3600
 8007848:	00f42400 	.word	0x00f42400

0800784c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007854:	2300      	movs	r3, #0
 8007856:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007858:	2300      	movs	r3, #0
 800785a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 8098 	beq.w	800799a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800786a:	2300      	movs	r3, #0
 800786c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800786e:	4b43      	ldr	r3, [pc, #268]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10d      	bne.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800787a:	4b40      	ldr	r3, [pc, #256]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800787c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800787e:	4a3f      	ldr	r2, [pc, #252]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007884:	6593      	str	r3, [r2, #88]	@ 0x58
 8007886:	4b3d      	ldr	r3, [pc, #244]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800788a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800788e:	60bb      	str	r3, [r7, #8]
 8007890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007892:	2301      	movs	r3, #1
 8007894:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007896:	4b3a      	ldr	r3, [pc, #232]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a39      	ldr	r2, [pc, #228]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800789c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078a2:	f7fc fce7 	bl	8004274 <HAL_GetTick>
 80078a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078a8:	e009      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078aa:	f7fc fce3 	bl	8004274 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d902      	bls.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	74fb      	strb	r3, [r7, #19]
        break;
 80078bc:	e005      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078be:	4b30      	ldr	r3, [pc, #192]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0ef      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80078ca:	7cfb      	ldrb	r3, [r7, #19]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d159      	bne.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80078d0:	4b2a      	ldr	r3, [pc, #168]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d01e      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d019      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80078ec:	4b23      	ldr	r3, [pc, #140]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078f8:	4b20      	ldr	r3, [pc, #128]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078fe:	4a1f      	ldr	r2, [pc, #124]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007908:	4b1c      	ldr	r3, [pc, #112]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800790a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790e:	4a1b      	ldr	r2, [pc, #108]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007918:	4a18      	ldr	r2, [pc, #96]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d016      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800792a:	f7fc fca3 	bl	8004274 <HAL_GetTick>
 800792e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007930:	e00b      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007932:	f7fc fc9f 	bl	8004274 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007940:	4293      	cmp	r3, r2
 8007942:	d902      	bls.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	74fb      	strb	r3, [r7, #19]
            break;
 8007948:	e006      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800794a:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800794c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0ec      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007958:	7cfb      	ldrb	r3, [r7, #19]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10b      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800795e:	4b07      	ldr	r3, [pc, #28]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007964:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800796c:	4903      	ldr	r1, [pc, #12]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800796e:	4313      	orrs	r3, r2
 8007970:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007974:	e008      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007976:	7cfb      	ldrb	r3, [r7, #19]
 8007978:	74bb      	strb	r3, [r7, #18]
 800797a:	e005      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800797c:	40021000 	.word	0x40021000
 8007980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007984:	7cfb      	ldrb	r3, [r7, #19]
 8007986:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007988:	7c7b      	ldrb	r3, [r7, #17]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d105      	bne.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800798e:	4ba7      	ldr	r3, [pc, #668]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007992:	4aa6      	ldr	r2, [pc, #664]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007994:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007998:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079a6:	4ba1      	ldr	r3, [pc, #644]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ac:	f023 0203 	bic.w	r2, r3, #3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	499d      	ldr	r1, [pc, #628]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00a      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079c8:	4b98      	ldr	r3, [pc, #608]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ce:	f023 020c 	bic.w	r2, r3, #12
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	4995      	ldr	r1, [pc, #596]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80079ea:	4b90      	ldr	r3, [pc, #576]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	498c      	ldr	r1, [pc, #560]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0308 	and.w	r3, r3, #8
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00a      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a0c:	4b87      	ldr	r3, [pc, #540]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	4984      	ldr	r1, [pc, #528]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0310 	and.w	r3, r3, #16
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a2e:	4b7f      	ldr	r3, [pc, #508]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	497b      	ldr	r1, [pc, #492]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a50:	4b76      	ldr	r3, [pc, #472]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	4973      	ldr	r1, [pc, #460]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a72:	4b6e      	ldr	r3, [pc, #440]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a78:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	496a      	ldr	r1, [pc, #424]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a94:	4b65      	ldr	r3, [pc, #404]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	4962      	ldr	r1, [pc, #392]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007abc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac4:	4959      	ldr	r1, [pc, #356]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ad8:	4b54      	ldr	r3, [pc, #336]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ade:	f023 0203 	bic.w	r2, r3, #3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae6:	4951      	ldr	r1, [pc, #324]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007afa:	4b4c      	ldr	r3, [pc, #304]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b08:	4948      	ldr	r1, [pc, #288]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d015      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b1c:	4b43      	ldr	r3, [pc, #268]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2a:	4940      	ldr	r1, [pc, #256]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b3a:	d105      	bne.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	4a3a      	ldr	r2, [pc, #232]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b46:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d015      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b54:	4b35      	ldr	r3, [pc, #212]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b62:	4932      	ldr	r1, [pc, #200]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b72:	d105      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b74:	4b2d      	ldr	r3, [pc, #180]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	4a2c      	ldr	r2, [pc, #176]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b7e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d015      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b8c:	4b27      	ldr	r3, [pc, #156]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9a:	4924      	ldr	r1, [pc, #144]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007baa:	d105      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bac:	4b1f      	ldr	r3, [pc, #124]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bb6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d015      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bc4:	4b19      	ldr	r3, [pc, #100]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd2:	4916      	ldr	r1, [pc, #88]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007be2:	d105      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007be4:	4b11      	ldr	r3, [pc, #68]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	4a10      	ldr	r2, [pc, #64]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d019      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0a:	4908      	ldr	r1, [pc, #32]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c1a:	d109      	bne.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c1c:	4b03      	ldr	r3, [pc, #12]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	4a02      	ldr	r2, [pc, #8]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c26:	60d3      	str	r3, [r2, #12]
 8007c28:	e002      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007c2a:	bf00      	nop
 8007c2c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d015      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007c3c:	4b29      	ldr	r3, [pc, #164]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c4a:	4926      	ldr	r1, [pc, #152]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c5a:	d105      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c5c:	4b21      	ldr	r3, [pc, #132]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	4a20      	ldr	r2, [pc, #128]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c66:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d015      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007c74:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c7a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c82:	4918      	ldr	r1, [pc, #96]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c92:	d105      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c94:	4b13      	ldr	r3, [pc, #76]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	4a12      	ldr	r2, [pc, #72]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c9e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d015      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007cac:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cba:	490a      	ldr	r1, [pc, #40]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cca:	d105      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ccc:	4b05      	ldr	r3, [pc, #20]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	4a04      	ldr	r2, [pc, #16]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007cd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	40021000 	.word	0x40021000

08007ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e049      	b.n	8007d8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d106      	bne.n	8007d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7fb fe0e 	bl	8003930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2202      	movs	r2, #2
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f001 f842 	bl	8008db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d001      	beq.n	8007db0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e054      	b.n	8007e5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f042 0201 	orr.w	r2, r2, #1
 8007dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a26      	ldr	r2, [pc, #152]	@ (8007e68 <HAL_TIM_Base_Start_IT+0xd0>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d022      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dda:	d01d      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a22      	ldr	r2, [pc, #136]	@ (8007e6c <HAL_TIM_Base_Start_IT+0xd4>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d018      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a21      	ldr	r2, [pc, #132]	@ (8007e70 <HAL_TIM_Base_Start_IT+0xd8>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d013      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a1f      	ldr	r2, [pc, #124]	@ (8007e74 <HAL_TIM_Base_Start_IT+0xdc>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d00e      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8007e78 <HAL_TIM_Base_Start_IT+0xe0>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d009      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a1c      	ldr	r2, [pc, #112]	@ (8007e7c <HAL_TIM_Base_Start_IT+0xe4>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d004      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a1b      	ldr	r2, [pc, #108]	@ (8007e80 <HAL_TIM_Base_Start_IT+0xe8>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d115      	bne.n	8007e44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689a      	ldr	r2, [r3, #8]
 8007e1e:	4b19      	ldr	r3, [pc, #100]	@ (8007e84 <HAL_TIM_Base_Start_IT+0xec>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b06      	cmp	r3, #6
 8007e28:	d015      	beq.n	8007e56 <HAL_TIM_Base_Start_IT+0xbe>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e30:	d011      	beq.n	8007e56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f042 0201 	orr.w	r2, r2, #1
 8007e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e42:	e008      	b.n	8007e56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0201 	orr.w	r2, r2, #1
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	e000      	b.n	8007e58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	40012c00 	.word	0x40012c00
 8007e6c:	40000400 	.word	0x40000400
 8007e70:	40000800 	.word	0x40000800
 8007e74:	40000c00 	.word	0x40000c00
 8007e78:	40013400 	.word	0x40013400
 8007e7c:	40014000 	.word	0x40014000
 8007e80:	40015000 	.word	0x40015000
 8007e84:	00010007 	.word	0x00010007

08007e88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e049      	b.n	8007f2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fb fd10 	bl	80038d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	f000 ff72 	bl	8008db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d109      	bne.n	8007f5c <HAL_TIM_PWM_Start+0x24>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	bf14      	ite	ne
 8007f54:	2301      	movne	r3, #1
 8007f56:	2300      	moveq	r3, #0
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	e03c      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x9e>
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d109      	bne.n	8007f76 <HAL_TIM_PWM_Start+0x3e>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	bf14      	ite	ne
 8007f6e:	2301      	movne	r3, #1
 8007f70:	2300      	moveq	r3, #0
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	e02f      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x9e>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d109      	bne.n	8007f90 <HAL_TIM_PWM_Start+0x58>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	bf14      	ite	ne
 8007f88:	2301      	movne	r3, #1
 8007f8a:	2300      	moveq	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	e022      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x9e>
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b0c      	cmp	r3, #12
 8007f94:	d109      	bne.n	8007faa <HAL_TIM_PWM_Start+0x72>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	bf14      	ite	ne
 8007fa2:	2301      	movne	r3, #1
 8007fa4:	2300      	moveq	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	e015      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x9e>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b10      	cmp	r3, #16
 8007fae:	d109      	bne.n	8007fc4 <HAL_TIM_PWM_Start+0x8c>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	bf14      	ite	ne
 8007fbc:	2301      	movne	r3, #1
 8007fbe:	2300      	moveq	r3, #0
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	e008      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x9e>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	bf14      	ite	ne
 8007fd0:	2301      	movne	r3, #1
 8007fd2:	2300      	moveq	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e0a6      	b.n	800812c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <HAL_TIM_PWM_Start+0xb6>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fec:	e023      	b.n	8008036 <HAL_TIM_PWM_Start+0xfe>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d104      	bne.n	8007ffe <HAL_TIM_PWM_Start+0xc6>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ffc:	e01b      	b.n	8008036 <HAL_TIM_PWM_Start+0xfe>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b08      	cmp	r3, #8
 8008002:	d104      	bne.n	800800e <HAL_TIM_PWM_Start+0xd6>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800800c:	e013      	b.n	8008036 <HAL_TIM_PWM_Start+0xfe>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b0c      	cmp	r3, #12
 8008012:	d104      	bne.n	800801e <HAL_TIM_PWM_Start+0xe6>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800801c:	e00b      	b.n	8008036 <HAL_TIM_PWM_Start+0xfe>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b10      	cmp	r3, #16
 8008022:	d104      	bne.n	800802e <HAL_TIM_PWM_Start+0xf6>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800802c:	e003      	b.n	8008036 <HAL_TIM_PWM_Start+0xfe>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2202      	movs	r2, #2
 8008032:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2201      	movs	r2, #1
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	f001 fc5a 	bl	80098f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a3a      	ldr	r2, [pc, #232]	@ (8008134 <HAL_TIM_PWM_Start+0x1fc>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d018      	beq.n	8008080 <HAL_TIM_PWM_Start+0x148>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a39      	ldr	r2, [pc, #228]	@ (8008138 <HAL_TIM_PWM_Start+0x200>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d013      	beq.n	8008080 <HAL_TIM_PWM_Start+0x148>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a37      	ldr	r2, [pc, #220]	@ (800813c <HAL_TIM_PWM_Start+0x204>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00e      	beq.n	8008080 <HAL_TIM_PWM_Start+0x148>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a36      	ldr	r2, [pc, #216]	@ (8008140 <HAL_TIM_PWM_Start+0x208>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d009      	beq.n	8008080 <HAL_TIM_PWM_Start+0x148>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a34      	ldr	r2, [pc, #208]	@ (8008144 <HAL_TIM_PWM_Start+0x20c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d004      	beq.n	8008080 <HAL_TIM_PWM_Start+0x148>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a33      	ldr	r2, [pc, #204]	@ (8008148 <HAL_TIM_PWM_Start+0x210>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d101      	bne.n	8008084 <HAL_TIM_PWM_Start+0x14c>
 8008080:	2301      	movs	r3, #1
 8008082:	e000      	b.n	8008086 <HAL_TIM_PWM_Start+0x14e>
 8008084:	2300      	movs	r3, #0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d007      	beq.n	800809a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008098:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a25      	ldr	r2, [pc, #148]	@ (8008134 <HAL_TIM_PWM_Start+0x1fc>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d022      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ac:	d01d      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a26      	ldr	r2, [pc, #152]	@ (800814c <HAL_TIM_PWM_Start+0x214>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d018      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a24      	ldr	r2, [pc, #144]	@ (8008150 <HAL_TIM_PWM_Start+0x218>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d013      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a23      	ldr	r2, [pc, #140]	@ (8008154 <HAL_TIM_PWM_Start+0x21c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d00e      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a19      	ldr	r2, [pc, #100]	@ (8008138 <HAL_TIM_PWM_Start+0x200>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d009      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a18      	ldr	r2, [pc, #96]	@ (800813c <HAL_TIM_PWM_Start+0x204>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d004      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a18      	ldr	r2, [pc, #96]	@ (8008148 <HAL_TIM_PWM_Start+0x210>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d115      	bne.n	8008116 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	4b19      	ldr	r3, [pc, #100]	@ (8008158 <HAL_TIM_PWM_Start+0x220>)
 80080f2:	4013      	ands	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b06      	cmp	r3, #6
 80080fa:	d015      	beq.n	8008128 <HAL_TIM_PWM_Start+0x1f0>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008102:	d011      	beq.n	8008128 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0201 	orr.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008114:	e008      	b.n	8008128 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	e000      	b.n	800812a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008128:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	40012c00 	.word	0x40012c00
 8008138:	40013400 	.word	0x40013400
 800813c:	40014000 	.word	0x40014000
 8008140:	40014400 	.word	0x40014400
 8008144:	40014800 	.word	0x40014800
 8008148:	40015000 	.word	0x40015000
 800814c:	40000400 	.word	0x40000400
 8008150:	40000800 	.word	0x40000800
 8008154:	40000c00 	.word	0x40000c00
 8008158:	00010007 	.word	0x00010007

0800815c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e049      	b.n	8008202 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f841 	bl	800820a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3304      	adds	r3, #4
 8008198:	4619      	mov	r1, r3
 800819a:	4610      	mov	r0, r2
 800819c:	f000 fe08 	bl	8008db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008212:	bf00      	nop
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
	...

08008220 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d104      	bne.n	800823e <HAL_TIM_IC_Start_IT+0x1e>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800823a:	b2db      	uxtb	r3, r3
 800823c:	e023      	b.n	8008286 <HAL_TIM_IC_Start_IT+0x66>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b04      	cmp	r3, #4
 8008242:	d104      	bne.n	800824e <HAL_TIM_IC_Start_IT+0x2e>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800824a:	b2db      	uxtb	r3, r3
 800824c:	e01b      	b.n	8008286 <HAL_TIM_IC_Start_IT+0x66>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b08      	cmp	r3, #8
 8008252:	d104      	bne.n	800825e <HAL_TIM_IC_Start_IT+0x3e>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800825a:	b2db      	uxtb	r3, r3
 800825c:	e013      	b.n	8008286 <HAL_TIM_IC_Start_IT+0x66>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b0c      	cmp	r3, #12
 8008262:	d104      	bne.n	800826e <HAL_TIM_IC_Start_IT+0x4e>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800826a:	b2db      	uxtb	r3, r3
 800826c:	e00b      	b.n	8008286 <HAL_TIM_IC_Start_IT+0x66>
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b10      	cmp	r3, #16
 8008272:	d104      	bne.n	800827e <HAL_TIM_IC_Start_IT+0x5e>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800827a:	b2db      	uxtb	r3, r3
 800827c:	e003      	b.n	8008286 <HAL_TIM_IC_Start_IT+0x66>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008284:	b2db      	uxtb	r3, r3
 8008286:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d104      	bne.n	8008298 <HAL_TIM_IC_Start_IT+0x78>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008294:	b2db      	uxtb	r3, r3
 8008296:	e013      	b.n	80082c0 <HAL_TIM_IC_Start_IT+0xa0>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b04      	cmp	r3, #4
 800829c:	d104      	bne.n	80082a8 <HAL_TIM_IC_Start_IT+0x88>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	e00b      	b.n	80082c0 <HAL_TIM_IC_Start_IT+0xa0>
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2b08      	cmp	r3, #8
 80082ac:	d104      	bne.n	80082b8 <HAL_TIM_IC_Start_IT+0x98>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	e003      	b.n	80082c0 <HAL_TIM_IC_Start_IT+0xa0>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d102      	bne.n	80082ce <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80082c8:	7b7b      	ldrb	r3, [r7, #13]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d001      	beq.n	80082d2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e0e2      	b.n	8008498 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d104      	bne.n	80082e2 <HAL_TIM_IC_Start_IT+0xc2>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082e0:	e023      	b.n	800832a <HAL_TIM_IC_Start_IT+0x10a>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d104      	bne.n	80082f2 <HAL_TIM_IC_Start_IT+0xd2>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082f0:	e01b      	b.n	800832a <HAL_TIM_IC_Start_IT+0x10a>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d104      	bne.n	8008302 <HAL_TIM_IC_Start_IT+0xe2>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008300:	e013      	b.n	800832a <HAL_TIM_IC_Start_IT+0x10a>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b0c      	cmp	r3, #12
 8008306:	d104      	bne.n	8008312 <HAL_TIM_IC_Start_IT+0xf2>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008310:	e00b      	b.n	800832a <HAL_TIM_IC_Start_IT+0x10a>
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b10      	cmp	r3, #16
 8008316:	d104      	bne.n	8008322 <HAL_TIM_IC_Start_IT+0x102>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008320:	e003      	b.n	800832a <HAL_TIM_IC_Start_IT+0x10a>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2202      	movs	r2, #2
 8008326:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d104      	bne.n	800833a <HAL_TIM_IC_Start_IT+0x11a>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008338:	e013      	b.n	8008362 <HAL_TIM_IC_Start_IT+0x142>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b04      	cmp	r3, #4
 800833e:	d104      	bne.n	800834a <HAL_TIM_IC_Start_IT+0x12a>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2202      	movs	r2, #2
 8008344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008348:	e00b      	b.n	8008362 <HAL_TIM_IC_Start_IT+0x142>
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b08      	cmp	r3, #8
 800834e:	d104      	bne.n	800835a <HAL_TIM_IC_Start_IT+0x13a>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008358:	e003      	b.n	8008362 <HAL_TIM_IC_Start_IT+0x142>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2202      	movs	r2, #2
 800835e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b0c      	cmp	r3, #12
 8008366:	d841      	bhi.n	80083ec <HAL_TIM_IC_Start_IT+0x1cc>
 8008368:	a201      	add	r2, pc, #4	@ (adr r2, 8008370 <HAL_TIM_IC_Start_IT+0x150>)
 800836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836e:	bf00      	nop
 8008370:	080083a5 	.word	0x080083a5
 8008374:	080083ed 	.word	0x080083ed
 8008378:	080083ed 	.word	0x080083ed
 800837c:	080083ed 	.word	0x080083ed
 8008380:	080083b7 	.word	0x080083b7
 8008384:	080083ed 	.word	0x080083ed
 8008388:	080083ed 	.word	0x080083ed
 800838c:	080083ed 	.word	0x080083ed
 8008390:	080083c9 	.word	0x080083c9
 8008394:	080083ed 	.word	0x080083ed
 8008398:	080083ed 	.word	0x080083ed
 800839c:	080083ed 	.word	0x080083ed
 80083a0:	080083db 	.word	0x080083db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68da      	ldr	r2, [r3, #12]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0202 	orr.w	r2, r2, #2
 80083b2:	60da      	str	r2, [r3, #12]
      break;
 80083b4:	e01d      	b.n	80083f2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f042 0204 	orr.w	r2, r2, #4
 80083c4:	60da      	str	r2, [r3, #12]
      break;
 80083c6:	e014      	b.n	80083f2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68da      	ldr	r2, [r3, #12]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f042 0208 	orr.w	r2, r2, #8
 80083d6:	60da      	str	r2, [r3, #12]
      break;
 80083d8:	e00b      	b.n	80083f2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68da      	ldr	r2, [r3, #12]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f042 0210 	orr.w	r2, r2, #16
 80083e8:	60da      	str	r2, [r3, #12]
      break;
 80083ea:	e002      	b.n	80083f2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	73fb      	strb	r3, [r7, #15]
      break;
 80083f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d14e      	bne.n	8008496 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2201      	movs	r2, #1
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	4618      	mov	r0, r3
 8008402:	f001 fa79 	bl	80098f8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a25      	ldr	r2, [pc, #148]	@ (80084a0 <HAL_TIM_IC_Start_IT+0x280>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d022      	beq.n	8008456 <HAL_TIM_IC_Start_IT+0x236>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008418:	d01d      	beq.n	8008456 <HAL_TIM_IC_Start_IT+0x236>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a21      	ldr	r2, [pc, #132]	@ (80084a4 <HAL_TIM_IC_Start_IT+0x284>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d018      	beq.n	8008456 <HAL_TIM_IC_Start_IT+0x236>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a1f      	ldr	r2, [pc, #124]	@ (80084a8 <HAL_TIM_IC_Start_IT+0x288>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d013      	beq.n	8008456 <HAL_TIM_IC_Start_IT+0x236>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a1e      	ldr	r2, [pc, #120]	@ (80084ac <HAL_TIM_IC_Start_IT+0x28c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00e      	beq.n	8008456 <HAL_TIM_IC_Start_IT+0x236>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a1c      	ldr	r2, [pc, #112]	@ (80084b0 <HAL_TIM_IC_Start_IT+0x290>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d009      	beq.n	8008456 <HAL_TIM_IC_Start_IT+0x236>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a1b      	ldr	r2, [pc, #108]	@ (80084b4 <HAL_TIM_IC_Start_IT+0x294>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d004      	beq.n	8008456 <HAL_TIM_IC_Start_IT+0x236>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a19      	ldr	r2, [pc, #100]	@ (80084b8 <HAL_TIM_IC_Start_IT+0x298>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d115      	bne.n	8008482 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	4b17      	ldr	r3, [pc, #92]	@ (80084bc <HAL_TIM_IC_Start_IT+0x29c>)
 800845e:	4013      	ands	r3, r2
 8008460:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b06      	cmp	r3, #6
 8008466:	d015      	beq.n	8008494 <HAL_TIM_IC_Start_IT+0x274>
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800846e:	d011      	beq.n	8008494 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f042 0201 	orr.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008480:	e008      	b.n	8008494 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f042 0201 	orr.w	r2, r2, #1
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	e000      	b.n	8008496 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008494:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008496:	7bfb      	ldrb	r3, [r7, #15]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	40012c00 	.word	0x40012c00
 80084a4:	40000400 	.word	0x40000400
 80084a8:	40000800 	.word	0x40000800
 80084ac:	40000c00 	.word	0x40000c00
 80084b0:	40013400 	.word	0x40013400
 80084b4:	40014000 	.word	0x40014000
 80084b8:	40015000 	.word	0x40015000
 80084bc:	00010007 	.word	0x00010007

080084c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d020      	beq.n	8008524 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f003 0302 	and.w	r3, r3, #2
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01b      	beq.n	8008524 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f06f 0202 	mvn.w	r2, #2
 80084f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	f003 0303 	and.w	r3, r3, #3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7fa f986 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 8008510:	e005      	b.n	800851e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fc2e 	bl	8008d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fc35 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	2b00      	cmp	r3, #0
 800852c:	d020      	beq.n	8008570 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b00      	cmp	r3, #0
 8008536:	d01b      	beq.n	8008570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f06f 0204 	mvn.w	r2, #4
 8008540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2202      	movs	r2, #2
 8008546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7fa f960 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 800855c:	e005      	b.n	800856a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fc08 	bl	8008d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fc0f 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f003 0308 	and.w	r3, r3, #8
 8008576:	2b00      	cmp	r3, #0
 8008578:	d020      	beq.n	80085bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f003 0308 	and.w	r3, r3, #8
 8008580:	2b00      	cmp	r3, #0
 8008582:	d01b      	beq.n	80085bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f06f 0208 	mvn.w	r2, #8
 800858c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2204      	movs	r2, #4
 8008592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	f003 0303 	and.w	r3, r3, #3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fa f93a 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 80085a8:	e005      	b.n	80085b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fbe2 	bl	8008d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fbe9 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f003 0310 	and.w	r3, r3, #16
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d020      	beq.n	8008608 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f003 0310 	and.w	r3, r3, #16
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01b      	beq.n	8008608 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f06f 0210 	mvn.w	r2, #16
 80085d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2208      	movs	r2, #8
 80085de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7fa f914 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 80085f4:	e005      	b.n	8008602 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fbbc 	bl	8008d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fbc3 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00c      	beq.n	800862c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	d007      	beq.n	800862c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f06f 0201 	mvn.w	r2, #1
 8008624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7fa f87a 	bl	8002720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008632:	2b00      	cmp	r3, #0
 8008634:	d104      	bne.n	8008640 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00c      	beq.n	800865a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008646:	2b00      	cmp	r3, #0
 8008648:	d007      	beq.n	800865a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 faa9 	bl	8009bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00c      	beq.n	800867e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800866a:	2b00      	cmp	r3, #0
 800866c:	d007      	beq.n	800867e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 faa1 	bl	8009bc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00c      	beq.n	80086a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	d007      	beq.n	80086a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800869a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fb7d 	bl	8008d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f003 0320 	and.w	r3, r3, #32
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00c      	beq.n	80086c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f003 0320 	and.w	r3, r3, #32
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d007      	beq.n	80086c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f06f 0220 	mvn.w	r2, #32
 80086be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 fa69 	bl	8009b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00c      	beq.n	80086ea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d007      	beq.n	80086ea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80086e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fa75 	bl	8009bd4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00c      	beq.n	800870e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d007      	beq.n	800870e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 fa6d 	bl	8009be8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00c      	beq.n	8008732 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d007      	beq.n	8008732 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800872a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 fa65 	bl	8009bfc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00c      	beq.n	8008756 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d007      	beq.n	8008756 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800874e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f001 fa5d 	bl	8009c10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008756:	bf00      	nop
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b086      	sub	sp, #24
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008774:	2b01      	cmp	r3, #1
 8008776:	d101      	bne.n	800877c <HAL_TIM_IC_ConfigChannel+0x1e>
 8008778:	2302      	movs	r3, #2
 800877a:	e088      	b.n	800888e <HAL_TIM_IC_ConfigChannel+0x130>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d11b      	bne.n	80087c2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800879a:	f000 fee7 	bl	800956c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699a      	ldr	r2, [r3, #24]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f022 020c 	bic.w	r2, r2, #12
 80087ac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6999      	ldr	r1, [r3, #24]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	689a      	ldr	r2, [r3, #8]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	619a      	str	r2, [r3, #24]
 80087c0:	e060      	b.n	8008884 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	d11c      	bne.n	8008802 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80087d8:	f000 ff6b 	bl	80096b2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	699a      	ldr	r2, [r3, #24]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80087ea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6999      	ldr	r1, [r3, #24]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	021a      	lsls	r2, r3, #8
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	430a      	orrs	r2, r1
 80087fe:	619a      	str	r2, [r3, #24]
 8008800:	e040      	b.n	8008884 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b08      	cmp	r3, #8
 8008806:	d11b      	bne.n	8008840 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008818:	f000 ffb8 	bl	800978c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	69da      	ldr	r2, [r3, #28]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 020c 	bic.w	r2, r2, #12
 800882a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	69d9      	ldr	r1, [r3, #28]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	689a      	ldr	r2, [r3, #8]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	61da      	str	r2, [r3, #28]
 800883e:	e021      	b.n	8008884 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b0c      	cmp	r3, #12
 8008844:	d11c      	bne.n	8008880 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008856:	f000 ffd5 	bl	8009804 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008868:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69d9      	ldr	r1, [r3, #28]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	021a      	lsls	r2, r3, #8
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	61da      	str	r2, [r3, #28]
 800887e:	e001      	b.n	8008884 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800888c:	7dfb      	ldrb	r3, [r7, #23]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d101      	bne.n	80088b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088b2:	2302      	movs	r3, #2
 80088b4:	e0ff      	b.n	8008ab6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b14      	cmp	r3, #20
 80088c2:	f200 80f0 	bhi.w	8008aa6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80088c6:	a201      	add	r2, pc, #4	@ (adr r2, 80088cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	08008921 	.word	0x08008921
 80088d0:	08008aa7 	.word	0x08008aa7
 80088d4:	08008aa7 	.word	0x08008aa7
 80088d8:	08008aa7 	.word	0x08008aa7
 80088dc:	08008961 	.word	0x08008961
 80088e0:	08008aa7 	.word	0x08008aa7
 80088e4:	08008aa7 	.word	0x08008aa7
 80088e8:	08008aa7 	.word	0x08008aa7
 80088ec:	080089a3 	.word	0x080089a3
 80088f0:	08008aa7 	.word	0x08008aa7
 80088f4:	08008aa7 	.word	0x08008aa7
 80088f8:	08008aa7 	.word	0x08008aa7
 80088fc:	080089e3 	.word	0x080089e3
 8008900:	08008aa7 	.word	0x08008aa7
 8008904:	08008aa7 	.word	0x08008aa7
 8008908:	08008aa7 	.word	0x08008aa7
 800890c:	08008a25 	.word	0x08008a25
 8008910:	08008aa7 	.word	0x08008aa7
 8008914:	08008aa7 	.word	0x08008aa7
 8008918:	08008aa7 	.word	0x08008aa7
 800891c:	08008a65 	.word	0x08008a65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68b9      	ldr	r1, [r7, #8]
 8008926:	4618      	mov	r0, r3
 8008928:	f000 faf6 	bl	8008f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699a      	ldr	r2, [r3, #24]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f042 0208 	orr.w	r2, r2, #8
 800893a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	699a      	ldr	r2, [r3, #24]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0204 	bic.w	r2, r2, #4
 800894a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6999      	ldr	r1, [r3, #24]
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	691a      	ldr	r2, [r3, #16]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	430a      	orrs	r2, r1
 800895c:	619a      	str	r2, [r3, #24]
      break;
 800895e:	e0a5      	b.n	8008aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fb70 	bl	800904c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699a      	ldr	r2, [r3, #24]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800897a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	699a      	ldr	r2, [r3, #24]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800898a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6999      	ldr	r1, [r3, #24]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	021a      	lsls	r2, r3, #8
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	430a      	orrs	r2, r1
 800899e:	619a      	str	r2, [r3, #24]
      break;
 80089a0:	e084      	b.n	8008aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68b9      	ldr	r1, [r7, #8]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 fbe3 	bl	8009174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69da      	ldr	r2, [r3, #28]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f042 0208 	orr.w	r2, r2, #8
 80089bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69da      	ldr	r2, [r3, #28]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f022 0204 	bic.w	r2, r2, #4
 80089cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69d9      	ldr	r1, [r3, #28]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	691a      	ldr	r2, [r3, #16]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	61da      	str	r2, [r3, #28]
      break;
 80089e0:	e064      	b.n	8008aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 fc55 	bl	8009298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69da      	ldr	r2, [r3, #28]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	69da      	ldr	r2, [r3, #28]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	69d9      	ldr	r1, [r3, #28]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	021a      	lsls	r2, r3, #8
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	61da      	str	r2, [r3, #28]
      break;
 8008a22:	e043      	b.n	8008aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68b9      	ldr	r1, [r7, #8]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fcc8 	bl	80093c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f042 0208 	orr.w	r2, r2, #8
 8008a3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f022 0204 	bic.w	r2, r2, #4
 8008a4e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	691a      	ldr	r2, [r3, #16]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008a62:	e023      	b.n	8008aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68b9      	ldr	r1, [r7, #8]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 fd12 	bl	8009494 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	021a      	lsls	r2, r3, #8
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008aa4:	e002      	b.n	8008aac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8008aaa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop

08008ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d101      	bne.n	8008adc <HAL_TIM_ConfigClockSource+0x1c>
 8008ad8:	2302      	movs	r3, #2
 8008ada:	e0f6      	b.n	8008cca <HAL_TIM_ConfigClockSource+0x20a>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008afa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a6f      	ldr	r2, [pc, #444]	@ (8008cd4 <HAL_TIM_ConfigClockSource+0x214>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	f000 80c1 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b1c:	4a6d      	ldr	r2, [pc, #436]	@ (8008cd4 <HAL_TIM_ConfigClockSource+0x214>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	f200 80c6 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b24:	4a6c      	ldr	r2, [pc, #432]	@ (8008cd8 <HAL_TIM_ConfigClockSource+0x218>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	f000 80b9 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b2c:	4a6a      	ldr	r2, [pc, #424]	@ (8008cd8 <HAL_TIM_ConfigClockSource+0x218>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	f200 80be 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b34:	4a69      	ldr	r2, [pc, #420]	@ (8008cdc <HAL_TIM_ConfigClockSource+0x21c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	f000 80b1 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b3c:	4a67      	ldr	r2, [pc, #412]	@ (8008cdc <HAL_TIM_ConfigClockSource+0x21c>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	f200 80b6 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b44:	4a66      	ldr	r2, [pc, #408]	@ (8008ce0 <HAL_TIM_ConfigClockSource+0x220>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	f000 80a9 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b4c:	4a64      	ldr	r2, [pc, #400]	@ (8008ce0 <HAL_TIM_ConfigClockSource+0x220>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	f200 80ae 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b54:	4a63      	ldr	r2, [pc, #396]	@ (8008ce4 <HAL_TIM_ConfigClockSource+0x224>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	f000 80a1 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b5c:	4a61      	ldr	r2, [pc, #388]	@ (8008ce4 <HAL_TIM_ConfigClockSource+0x224>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	f200 80a6 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b64:	4a60      	ldr	r2, [pc, #384]	@ (8008ce8 <HAL_TIM_ConfigClockSource+0x228>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	f000 8099 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b6c:	4a5e      	ldr	r2, [pc, #376]	@ (8008ce8 <HAL_TIM_ConfigClockSource+0x228>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	f200 809e 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008b78:	f000 8091 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008b80:	f200 8096 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b88:	f000 8089 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008b8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b90:	f200 808e 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b98:	d03e      	beq.n	8008c18 <HAL_TIM_ConfigClockSource+0x158>
 8008b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b9e:	f200 8087 	bhi.w	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ba6:	f000 8086 	beq.w	8008cb6 <HAL_TIM_ConfigClockSource+0x1f6>
 8008baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bae:	d87f      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bb0:	2b70      	cmp	r3, #112	@ 0x70
 8008bb2:	d01a      	beq.n	8008bea <HAL_TIM_ConfigClockSource+0x12a>
 8008bb4:	2b70      	cmp	r3, #112	@ 0x70
 8008bb6:	d87b      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bb8:	2b60      	cmp	r3, #96	@ 0x60
 8008bba:	d050      	beq.n	8008c5e <HAL_TIM_ConfigClockSource+0x19e>
 8008bbc:	2b60      	cmp	r3, #96	@ 0x60
 8008bbe:	d877      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bc0:	2b50      	cmp	r3, #80	@ 0x50
 8008bc2:	d03c      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x17e>
 8008bc4:	2b50      	cmp	r3, #80	@ 0x50
 8008bc6:	d873      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bc8:	2b40      	cmp	r3, #64	@ 0x40
 8008bca:	d058      	beq.n	8008c7e <HAL_TIM_ConfigClockSource+0x1be>
 8008bcc:	2b40      	cmp	r3, #64	@ 0x40
 8008bce:	d86f      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bd0:	2b30      	cmp	r3, #48	@ 0x30
 8008bd2:	d064      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008bd4:	2b30      	cmp	r3, #48	@ 0x30
 8008bd6:	d86b      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bd8:	2b20      	cmp	r3, #32
 8008bda:	d060      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008bdc:	2b20      	cmp	r3, #32
 8008bde:	d867      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d05c      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008be4:	2b10      	cmp	r3, #16
 8008be6:	d05a      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x1de>
 8008be8:	e062      	b.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bfa:	f000 fe5d 	bl	80098b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	609a      	str	r2, [r3, #8]
      break;
 8008c16:	e04f      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c28:	f000 fe46 	bl	80098b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c3a:	609a      	str	r2, [r3, #8]
      break;
 8008c3c:	e03c      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	f000 fd02 	bl	8009654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2150      	movs	r1, #80	@ 0x50
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fe11 	bl	800987e <TIM_ITRx_SetConfig>
      break;
 8008c5c:	e02c      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f000 fd5e 	bl	800972c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2160      	movs	r1, #96	@ 0x60
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 fe01 	bl	800987e <TIM_ITRx_SetConfig>
      break;
 8008c7c:	e01c      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f000 fce2 	bl	8009654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2140      	movs	r1, #64	@ 0x40
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 fdf1 	bl	800987e <TIM_ITRx_SetConfig>
      break;
 8008c9c:	e00c      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4610      	mov	r0, r2
 8008caa:	f000 fde8 	bl	800987e <TIM_ITRx_SetConfig>
      break;
 8008cae:	e003      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb4:	e000      	b.n	8008cb8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	00100070 	.word	0x00100070
 8008cd8:	00100060 	.word	0x00100060
 8008cdc:	00100050 	.word	0x00100050
 8008ce0:	00100040 	.word	0x00100040
 8008ce4:	00100030 	.word	0x00100030
 8008ce8:	00100020 	.word	0x00100020

08008cec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b0c      	cmp	r3, #12
 8008cfe:	d831      	bhi.n	8008d64 <HAL_TIM_ReadCapturedValue+0x78>
 8008d00:	a201      	add	r2, pc, #4	@ (adr r2, 8008d08 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008d3d 	.word	0x08008d3d
 8008d0c:	08008d65 	.word	0x08008d65
 8008d10:	08008d65 	.word	0x08008d65
 8008d14:	08008d65 	.word	0x08008d65
 8008d18:	08008d47 	.word	0x08008d47
 8008d1c:	08008d65 	.word	0x08008d65
 8008d20:	08008d65 	.word	0x08008d65
 8008d24:	08008d65 	.word	0x08008d65
 8008d28:	08008d51 	.word	0x08008d51
 8008d2c:	08008d65 	.word	0x08008d65
 8008d30:	08008d65 	.word	0x08008d65
 8008d34:	08008d65 	.word	0x08008d65
 8008d38:	08008d5b 	.word	0x08008d5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d42:	60fb      	str	r3, [r7, #12]

      break;
 8008d44:	e00f      	b.n	8008d66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d4c:	60fb      	str	r3, [r7, #12]

      break;
 8008d4e:	e00a      	b.n	8008d66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d56:	60fb      	str	r3, [r7, #12]

      break;
 8008d58:	e005      	b.n	8008d66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d60:	60fb      	str	r3, [r7, #12]

      break;
 8008d62:	e000      	b.n	8008d66 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008d64:	bf00      	nop
  }

  return tmpreg;
 8008d66:	68fb      	ldr	r3, [r7, #12]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a4c      	ldr	r2, [pc, #304]	@ (8008ef4 <TIM_Base_SetConfig+0x144>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d017      	beq.n	8008df8 <TIM_Base_SetConfig+0x48>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dce:	d013      	beq.n	8008df8 <TIM_Base_SetConfig+0x48>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a49      	ldr	r2, [pc, #292]	@ (8008ef8 <TIM_Base_SetConfig+0x148>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00f      	beq.n	8008df8 <TIM_Base_SetConfig+0x48>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a48      	ldr	r2, [pc, #288]	@ (8008efc <TIM_Base_SetConfig+0x14c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d00b      	beq.n	8008df8 <TIM_Base_SetConfig+0x48>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a47      	ldr	r2, [pc, #284]	@ (8008f00 <TIM_Base_SetConfig+0x150>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d007      	beq.n	8008df8 <TIM_Base_SetConfig+0x48>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a46      	ldr	r2, [pc, #280]	@ (8008f04 <TIM_Base_SetConfig+0x154>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d003      	beq.n	8008df8 <TIM_Base_SetConfig+0x48>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a45      	ldr	r2, [pc, #276]	@ (8008f08 <TIM_Base_SetConfig+0x158>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d108      	bne.n	8008e0a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a39      	ldr	r2, [pc, #228]	@ (8008ef4 <TIM_Base_SetConfig+0x144>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d023      	beq.n	8008e5a <TIM_Base_SetConfig+0xaa>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e18:	d01f      	beq.n	8008e5a <TIM_Base_SetConfig+0xaa>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a36      	ldr	r2, [pc, #216]	@ (8008ef8 <TIM_Base_SetConfig+0x148>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d01b      	beq.n	8008e5a <TIM_Base_SetConfig+0xaa>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a35      	ldr	r2, [pc, #212]	@ (8008efc <TIM_Base_SetConfig+0x14c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d017      	beq.n	8008e5a <TIM_Base_SetConfig+0xaa>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a34      	ldr	r2, [pc, #208]	@ (8008f00 <TIM_Base_SetConfig+0x150>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d013      	beq.n	8008e5a <TIM_Base_SetConfig+0xaa>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a33      	ldr	r2, [pc, #204]	@ (8008f04 <TIM_Base_SetConfig+0x154>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d00f      	beq.n	8008e5a <TIM_Base_SetConfig+0xaa>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a33      	ldr	r2, [pc, #204]	@ (8008f0c <TIM_Base_SetConfig+0x15c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d00b      	beq.n	8008e5a <TIM_Base_SetConfig+0xaa>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a32      	ldr	r2, [pc, #200]	@ (8008f10 <TIM_Base_SetConfig+0x160>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d007      	beq.n	8008e5a <TIM_Base_SetConfig+0xaa>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a31      	ldr	r2, [pc, #196]	@ (8008f14 <TIM_Base_SetConfig+0x164>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d003      	beq.n	8008e5a <TIM_Base_SetConfig+0xaa>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a2c      	ldr	r2, [pc, #176]	@ (8008f08 <TIM_Base_SetConfig+0x158>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d108      	bne.n	8008e6c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	689a      	ldr	r2, [r3, #8]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a18      	ldr	r2, [pc, #96]	@ (8008ef4 <TIM_Base_SetConfig+0x144>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d013      	beq.n	8008ec0 <TIM_Base_SetConfig+0x110>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8008f04 <TIM_Base_SetConfig+0x154>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d00f      	beq.n	8008ec0 <TIM_Base_SetConfig+0x110>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8008f0c <TIM_Base_SetConfig+0x15c>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00b      	beq.n	8008ec0 <TIM_Base_SetConfig+0x110>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a19      	ldr	r2, [pc, #100]	@ (8008f10 <TIM_Base_SetConfig+0x160>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d007      	beq.n	8008ec0 <TIM_Base_SetConfig+0x110>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a18      	ldr	r2, [pc, #96]	@ (8008f14 <TIM_Base_SetConfig+0x164>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d003      	beq.n	8008ec0 <TIM_Base_SetConfig+0x110>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a13      	ldr	r2, [pc, #76]	@ (8008f08 <TIM_Base_SetConfig+0x158>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d103      	bne.n	8008ec8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	691a      	ldr	r2, [r3, #16]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d105      	bne.n	8008ee6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	f023 0201 	bic.w	r2, r3, #1
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	611a      	str	r2, [r3, #16]
  }
}
 8008ee6:	bf00      	nop
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	40012c00 	.word	0x40012c00
 8008ef8:	40000400 	.word	0x40000400
 8008efc:	40000800 	.word	0x40000800
 8008f00:	40000c00 	.word	0x40000c00
 8008f04:	40013400 	.word	0x40013400
 8008f08:	40015000 	.word	0x40015000
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	40014400 	.word	0x40014400
 8008f14:	40014800 	.word	0x40014800

08008f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	f023 0201 	bic.w	r2, r3, #1
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 0303 	bic.w	r3, r3, #3
 8008f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f023 0302 	bic.w	r3, r3, #2
 8008f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a30      	ldr	r2, [pc, #192]	@ (8009034 <TIM_OC1_SetConfig+0x11c>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d013      	beq.n	8008fa0 <TIM_OC1_SetConfig+0x88>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a2f      	ldr	r2, [pc, #188]	@ (8009038 <TIM_OC1_SetConfig+0x120>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00f      	beq.n	8008fa0 <TIM_OC1_SetConfig+0x88>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a2e      	ldr	r2, [pc, #184]	@ (800903c <TIM_OC1_SetConfig+0x124>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d00b      	beq.n	8008fa0 <TIM_OC1_SetConfig+0x88>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8009040 <TIM_OC1_SetConfig+0x128>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d007      	beq.n	8008fa0 <TIM_OC1_SetConfig+0x88>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a2c      	ldr	r2, [pc, #176]	@ (8009044 <TIM_OC1_SetConfig+0x12c>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d003      	beq.n	8008fa0 <TIM_OC1_SetConfig+0x88>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8009048 <TIM_OC1_SetConfig+0x130>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d10c      	bne.n	8008fba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f023 0308 	bic.w	r3, r3, #8
 8008fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f023 0304 	bic.w	r3, r3, #4
 8008fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8009034 <TIM_OC1_SetConfig+0x11c>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d013      	beq.n	8008fea <TIM_OC1_SetConfig+0xd2>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8009038 <TIM_OC1_SetConfig+0x120>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d00f      	beq.n	8008fea <TIM_OC1_SetConfig+0xd2>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800903c <TIM_OC1_SetConfig+0x124>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d00b      	beq.n	8008fea <TIM_OC1_SetConfig+0xd2>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8009040 <TIM_OC1_SetConfig+0x128>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d007      	beq.n	8008fea <TIM_OC1_SetConfig+0xd2>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a19      	ldr	r2, [pc, #100]	@ (8009044 <TIM_OC1_SetConfig+0x12c>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d003      	beq.n	8008fea <TIM_OC1_SetConfig+0xd2>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a18      	ldr	r2, [pc, #96]	@ (8009048 <TIM_OC1_SetConfig+0x130>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d111      	bne.n	800900e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	4313      	orrs	r3, r2
 8009002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	693a      	ldr	r2, [r7, #16]
 800900a:	4313      	orrs	r3, r2
 800900c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	621a      	str	r2, [r3, #32]
}
 8009028:	bf00      	nop
 800902a:	371c      	adds	r7, #28
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	40012c00 	.word	0x40012c00
 8009038:	40013400 	.word	0x40013400
 800903c:	40014000 	.word	0x40014000
 8009040:	40014400 	.word	0x40014400
 8009044:	40014800 	.word	0x40014800
 8009048:	40015000 	.word	0x40015000

0800904c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a1b      	ldr	r3, [r3, #32]
 8009060:	f023 0210 	bic.w	r2, r3, #16
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800907a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800907e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	021b      	lsls	r3, r3, #8
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	4313      	orrs	r3, r2
 8009092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f023 0320 	bic.w	r3, r3, #32
 800909a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	011b      	lsls	r3, r3, #4
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a2c      	ldr	r2, [pc, #176]	@ (800915c <TIM_OC2_SetConfig+0x110>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d007      	beq.n	80090c0 <TIM_OC2_SetConfig+0x74>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a2b      	ldr	r2, [pc, #172]	@ (8009160 <TIM_OC2_SetConfig+0x114>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d003      	beq.n	80090c0 <TIM_OC2_SetConfig+0x74>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a2a      	ldr	r2, [pc, #168]	@ (8009164 <TIM_OC2_SetConfig+0x118>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d10d      	bne.n	80090dc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	011b      	lsls	r3, r3, #4
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a1f      	ldr	r2, [pc, #124]	@ (800915c <TIM_OC2_SetConfig+0x110>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d013      	beq.n	800910c <TIM_OC2_SetConfig+0xc0>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a1e      	ldr	r2, [pc, #120]	@ (8009160 <TIM_OC2_SetConfig+0x114>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d00f      	beq.n	800910c <TIM_OC2_SetConfig+0xc0>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009168 <TIM_OC2_SetConfig+0x11c>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d00b      	beq.n	800910c <TIM_OC2_SetConfig+0xc0>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a1d      	ldr	r2, [pc, #116]	@ (800916c <TIM_OC2_SetConfig+0x120>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d007      	beq.n	800910c <TIM_OC2_SetConfig+0xc0>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a1c      	ldr	r2, [pc, #112]	@ (8009170 <TIM_OC2_SetConfig+0x124>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d003      	beq.n	800910c <TIM_OC2_SetConfig+0xc0>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a17      	ldr	r2, [pc, #92]	@ (8009164 <TIM_OC2_SetConfig+0x118>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d113      	bne.n	8009134 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800911a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	4313      	orrs	r3, r2
 8009126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	4313      	orrs	r3, r2
 8009132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	621a      	str	r2, [r3, #32]
}
 800914e:	bf00      	nop
 8009150:	371c      	adds	r7, #28
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40012c00 	.word	0x40012c00
 8009160:	40013400 	.word	0x40013400
 8009164:	40015000 	.word	0x40015000
 8009168:	40014000 	.word	0x40014000
 800916c:	40014400 	.word	0x40014400
 8009170:	40014800 	.word	0x40014800

08009174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	021b      	lsls	r3, r3, #8
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a2b      	ldr	r2, [pc, #172]	@ (8009280 <TIM_OC3_SetConfig+0x10c>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d007      	beq.n	80091e6 <TIM_OC3_SetConfig+0x72>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a2a      	ldr	r2, [pc, #168]	@ (8009284 <TIM_OC3_SetConfig+0x110>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d003      	beq.n	80091e6 <TIM_OC3_SetConfig+0x72>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a29      	ldr	r2, [pc, #164]	@ (8009288 <TIM_OC3_SetConfig+0x114>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d10d      	bne.n	8009202 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	021b      	lsls	r3, r3, #8
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a1e      	ldr	r2, [pc, #120]	@ (8009280 <TIM_OC3_SetConfig+0x10c>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d013      	beq.n	8009232 <TIM_OC3_SetConfig+0xbe>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a1d      	ldr	r2, [pc, #116]	@ (8009284 <TIM_OC3_SetConfig+0x110>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d00f      	beq.n	8009232 <TIM_OC3_SetConfig+0xbe>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a1d      	ldr	r2, [pc, #116]	@ (800928c <TIM_OC3_SetConfig+0x118>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d00b      	beq.n	8009232 <TIM_OC3_SetConfig+0xbe>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a1c      	ldr	r2, [pc, #112]	@ (8009290 <TIM_OC3_SetConfig+0x11c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d007      	beq.n	8009232 <TIM_OC3_SetConfig+0xbe>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a1b      	ldr	r2, [pc, #108]	@ (8009294 <TIM_OC3_SetConfig+0x120>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d003      	beq.n	8009232 <TIM_OC3_SetConfig+0xbe>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a16      	ldr	r2, [pc, #88]	@ (8009288 <TIM_OC3_SetConfig+0x114>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d113      	bne.n	800925a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	4313      	orrs	r3, r2
 800924c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	011b      	lsls	r3, r3, #4
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	4313      	orrs	r3, r2
 8009258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	621a      	str	r2, [r3, #32]
}
 8009274:	bf00      	nop
 8009276:	371c      	adds	r7, #28
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	40012c00 	.word	0x40012c00
 8009284:	40013400 	.word	0x40013400
 8009288:	40015000 	.word	0x40015000
 800928c:	40014000 	.word	0x40014000
 8009290:	40014400 	.word	0x40014400
 8009294:	40014800 	.word	0x40014800

08009298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a1b      	ldr	r3, [r3, #32]
 80092ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	021b      	lsls	r3, r3, #8
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	4313      	orrs	r3, r2
 80092de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80092e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	031b      	lsls	r3, r3, #12
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a2c      	ldr	r2, [pc, #176]	@ (80093a8 <TIM_OC4_SetConfig+0x110>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d007      	beq.n	800930c <TIM_OC4_SetConfig+0x74>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a2b      	ldr	r2, [pc, #172]	@ (80093ac <TIM_OC4_SetConfig+0x114>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d003      	beq.n	800930c <TIM_OC4_SetConfig+0x74>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a2a      	ldr	r2, [pc, #168]	@ (80093b0 <TIM_OC4_SetConfig+0x118>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d10d      	bne.n	8009328 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	031b      	lsls	r3, r3, #12
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	4313      	orrs	r3, r2
 800931e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009326:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a1f      	ldr	r2, [pc, #124]	@ (80093a8 <TIM_OC4_SetConfig+0x110>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d013      	beq.n	8009358 <TIM_OC4_SetConfig+0xc0>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a1e      	ldr	r2, [pc, #120]	@ (80093ac <TIM_OC4_SetConfig+0x114>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d00f      	beq.n	8009358 <TIM_OC4_SetConfig+0xc0>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a1e      	ldr	r2, [pc, #120]	@ (80093b4 <TIM_OC4_SetConfig+0x11c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00b      	beq.n	8009358 <TIM_OC4_SetConfig+0xc0>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a1d      	ldr	r2, [pc, #116]	@ (80093b8 <TIM_OC4_SetConfig+0x120>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d007      	beq.n	8009358 <TIM_OC4_SetConfig+0xc0>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a1c      	ldr	r2, [pc, #112]	@ (80093bc <TIM_OC4_SetConfig+0x124>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d003      	beq.n	8009358 <TIM_OC4_SetConfig+0xc0>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a17      	ldr	r2, [pc, #92]	@ (80093b0 <TIM_OC4_SetConfig+0x118>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d113      	bne.n	8009380 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800935e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009366:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	019b      	lsls	r3, r3, #6
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	4313      	orrs	r3, r2
 8009372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	019b      	lsls	r3, r3, #6
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	4313      	orrs	r3, r2
 800937e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	621a      	str	r2, [r3, #32]
}
 800939a:	bf00      	nop
 800939c:	371c      	adds	r7, #28
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	40012c00 	.word	0x40012c00
 80093ac:	40013400 	.word	0x40013400
 80093b0:	40015000 	.word	0x40015000
 80093b4:	40014000 	.word	0x40014000
 80093b8:	40014400 	.word	0x40014400
 80093bc:	40014800 	.word	0x40014800

080093c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009404:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	041b      	lsls	r3, r3, #16
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	4313      	orrs	r3, r2
 8009410:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a19      	ldr	r2, [pc, #100]	@ (800947c <TIM_OC5_SetConfig+0xbc>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d013      	beq.n	8009442 <TIM_OC5_SetConfig+0x82>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a18      	ldr	r2, [pc, #96]	@ (8009480 <TIM_OC5_SetConfig+0xc0>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d00f      	beq.n	8009442 <TIM_OC5_SetConfig+0x82>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a17      	ldr	r2, [pc, #92]	@ (8009484 <TIM_OC5_SetConfig+0xc4>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d00b      	beq.n	8009442 <TIM_OC5_SetConfig+0x82>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a16      	ldr	r2, [pc, #88]	@ (8009488 <TIM_OC5_SetConfig+0xc8>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d007      	beq.n	8009442 <TIM_OC5_SetConfig+0x82>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a15      	ldr	r2, [pc, #84]	@ (800948c <TIM_OC5_SetConfig+0xcc>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d003      	beq.n	8009442 <TIM_OC5_SetConfig+0x82>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a14      	ldr	r2, [pc, #80]	@ (8009490 <TIM_OC5_SetConfig+0xd0>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d109      	bne.n	8009456 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009448:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	021b      	lsls	r3, r3, #8
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	4313      	orrs	r3, r2
 8009454:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	685a      	ldr	r2, [r3, #4]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	621a      	str	r2, [r3, #32]
}
 8009470:	bf00      	nop
 8009472:	371c      	adds	r7, #28
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	40012c00 	.word	0x40012c00
 8009480:	40013400 	.word	0x40013400
 8009484:	40014000 	.word	0x40014000
 8009488:	40014400 	.word	0x40014400
 800948c:	40014800 	.word	0x40014800
 8009490:	40015000 	.word	0x40015000

08009494 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009494:	b480      	push	{r7}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	021b      	lsls	r3, r3, #8
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80094da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	051b      	lsls	r3, r3, #20
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009554 <TIM_OC6_SetConfig+0xc0>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d013      	beq.n	8009518 <TIM_OC6_SetConfig+0x84>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a19      	ldr	r2, [pc, #100]	@ (8009558 <TIM_OC6_SetConfig+0xc4>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d00f      	beq.n	8009518 <TIM_OC6_SetConfig+0x84>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a18      	ldr	r2, [pc, #96]	@ (800955c <TIM_OC6_SetConfig+0xc8>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d00b      	beq.n	8009518 <TIM_OC6_SetConfig+0x84>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a17      	ldr	r2, [pc, #92]	@ (8009560 <TIM_OC6_SetConfig+0xcc>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d007      	beq.n	8009518 <TIM_OC6_SetConfig+0x84>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a16      	ldr	r2, [pc, #88]	@ (8009564 <TIM_OC6_SetConfig+0xd0>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d003      	beq.n	8009518 <TIM_OC6_SetConfig+0x84>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a15      	ldr	r2, [pc, #84]	@ (8009568 <TIM_OC6_SetConfig+0xd4>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d109      	bne.n	800952c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800951e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	029b      	lsls	r3, r3, #10
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4313      	orrs	r3, r2
 800952a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	697a      	ldr	r2, [r7, #20]
 8009530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	621a      	str	r2, [r3, #32]
}
 8009546:	bf00      	nop
 8009548:	371c      	adds	r7, #28
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	40012c00 	.word	0x40012c00
 8009558:	40013400 	.word	0x40013400
 800955c:	40014000 	.word	0x40014000
 8009560:	40014400 	.word	0x40014400
 8009564:	40014800 	.word	0x40014800
 8009568:	40015000 	.word	0x40015000

0800956c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	f023 0201 	bic.w	r2, r3, #1
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	4a28      	ldr	r2, [pc, #160]	@ (8009638 <TIM_TI1_SetConfig+0xcc>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d01b      	beq.n	80095d2 <TIM_TI1_SetConfig+0x66>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095a0:	d017      	beq.n	80095d2 <TIM_TI1_SetConfig+0x66>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	4a25      	ldr	r2, [pc, #148]	@ (800963c <TIM_TI1_SetConfig+0xd0>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d013      	beq.n	80095d2 <TIM_TI1_SetConfig+0x66>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	4a24      	ldr	r2, [pc, #144]	@ (8009640 <TIM_TI1_SetConfig+0xd4>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00f      	beq.n	80095d2 <TIM_TI1_SetConfig+0x66>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4a23      	ldr	r2, [pc, #140]	@ (8009644 <TIM_TI1_SetConfig+0xd8>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00b      	beq.n	80095d2 <TIM_TI1_SetConfig+0x66>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	4a22      	ldr	r2, [pc, #136]	@ (8009648 <TIM_TI1_SetConfig+0xdc>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d007      	beq.n	80095d2 <TIM_TI1_SetConfig+0x66>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4a21      	ldr	r2, [pc, #132]	@ (800964c <TIM_TI1_SetConfig+0xe0>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d003      	beq.n	80095d2 <TIM_TI1_SetConfig+0x66>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	4a20      	ldr	r2, [pc, #128]	@ (8009650 <TIM_TI1_SetConfig+0xe4>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d101      	bne.n	80095d6 <TIM_TI1_SetConfig+0x6a>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e000      	b.n	80095d8 <TIM_TI1_SetConfig+0x6c>
 80095d6:	2300      	movs	r3, #0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d008      	beq.n	80095ee <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f023 0303 	bic.w	r3, r3, #3
 80095e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	617b      	str	r3, [r7, #20]
 80095ec:	e003      	b.n	80095f6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	f043 0301 	orr.w	r3, r3, #1
 80095f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	011b      	lsls	r3, r3, #4
 8009602:	b2db      	uxtb	r3, r3
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	4313      	orrs	r3, r2
 8009608:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	f023 030a 	bic.w	r3, r3, #10
 8009610:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	f003 030a 	and.w	r3, r3, #10
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	4313      	orrs	r3, r2
 800961c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	621a      	str	r2, [r3, #32]
}
 800962a:	bf00      	nop
 800962c:	371c      	adds	r7, #28
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	40012c00 	.word	0x40012c00
 800963c:	40000400 	.word	0x40000400
 8009640:	40000800 	.word	0x40000800
 8009644:	40000c00 	.word	0x40000c00
 8009648:	40013400 	.word	0x40013400
 800964c:	40014000 	.word	0x40014000
 8009650:	40015000 	.word	0x40015000

08009654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6a1b      	ldr	r3, [r3, #32]
 8009664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	f023 0201 	bic.w	r2, r3, #1
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800967e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	011b      	lsls	r3, r3, #4
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	4313      	orrs	r3, r2
 8009688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f023 030a 	bic.w	r3, r3, #10
 8009690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	4313      	orrs	r3, r2
 8009698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	621a      	str	r2, [r3, #32]
}
 80096a6:	bf00      	nop
 80096a8:	371c      	adds	r7, #28
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b087      	sub	sp, #28
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607a      	str	r2, [r7, #4]
 80096be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	f023 0210 	bic.w	r2, r3, #16
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	021b      	lsls	r3, r3, #8
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80096f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	031b      	lsls	r3, r3, #12
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009704:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	011b      	lsls	r3, r3, #4
 800970a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	4313      	orrs	r3, r2
 8009712:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	621a      	str	r2, [r3, #32]
}
 8009720:	bf00      	nop
 8009722:	371c      	adds	r7, #28
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800972c:	b480      	push	{r7}
 800972e:	b087      	sub	sp, #28
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	f023 0210 	bic.w	r2, r3, #16
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	031b      	lsls	r3, r3, #12
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	4313      	orrs	r3, r2
 8009760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009768:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	011b      	lsls	r3, r3, #4
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	4313      	orrs	r3, r2
 8009772:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	621a      	str	r2, [r3, #32]
}
 8009780:	bf00      	nop
 8009782:	371c      	adds	r7, #28
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800978c:	b480      	push	{r7}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f023 0303 	bic.w	r3, r3, #3
 80097b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4313      	orrs	r3, r2
 80097c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80097c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	011b      	lsls	r3, r3, #4
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80097dc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	021b      	lsls	r3, r3, #8
 80097e2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	621a      	str	r2, [r3, #32]
}
 80097f8:	bf00      	nop
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009804:	b480      	push	{r7}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6a1b      	ldr	r3, [r3, #32]
 800981c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009830:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	021b      	lsls	r3, r3, #8
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	4313      	orrs	r3, r2
 800983a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009842:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	031b      	lsls	r3, r3, #12
 8009848:	b29b      	uxth	r3, r3
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	4313      	orrs	r3, r2
 800984e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009856:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	031b      	lsls	r3, r3, #12
 800985c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	4313      	orrs	r3, r2
 8009864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	621a      	str	r2, [r3, #32]
}
 8009872:	bf00      	nop
 8009874:	371c      	adds	r7, #28
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800987e:	b480      	push	{r7}
 8009880:	b085      	sub	sp, #20
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009898:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4313      	orrs	r3, r2
 80098a0:	f043 0307 	orr.w	r3, r3, #7
 80098a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	609a      	str	r2, [r3, #8]
}
 80098ac:	bf00      	nop
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	021a      	lsls	r2, r3, #8
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	431a      	orrs	r2, r3
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	4313      	orrs	r3, r2
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	609a      	str	r2, [r3, #8]
}
 80098ec:	bf00      	nop
 80098ee:	371c      	adds	r7, #28
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	f003 031f 	and.w	r3, r3, #31
 800990a:	2201      	movs	r2, #1
 800990c:	fa02 f303 	lsl.w	r3, r2, r3
 8009910:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6a1a      	ldr	r2, [r3, #32]
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	43db      	mvns	r3, r3
 800991a:	401a      	ands	r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6a1a      	ldr	r2, [r3, #32]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	f003 031f 	and.w	r3, r3, #31
 800992a:	6879      	ldr	r1, [r7, #4]
 800992c:	fa01 f303 	lsl.w	r3, r1, r3
 8009930:	431a      	orrs	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	621a      	str	r2, [r3, #32]
}
 8009936:	bf00      	nop
 8009938:	371c      	adds	r7, #28
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
	...

08009944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009954:	2b01      	cmp	r3, #1
 8009956:	d101      	bne.n	800995c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009958:	2302      	movs	r3, #2
 800995a:	e074      	b.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2202      	movs	r2, #2
 8009968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a34      	ldr	r2, [pc, #208]	@ (8009a54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d009      	beq.n	800999a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a33      	ldr	r2, [pc, #204]	@ (8009a58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d004      	beq.n	800999a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a31      	ldr	r2, [pc, #196]	@ (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d108      	bne.n	80099ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80099a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80099b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	4313      	orrs	r3, r2
 80099c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a21      	ldr	r2, [pc, #132]	@ (8009a54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d022      	beq.n	8009a1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099dc:	d01d      	beq.n	8009a1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a1f      	ldr	r2, [pc, #124]	@ (8009a60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d018      	beq.n	8009a1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009a64 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d013      	beq.n	8009a1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a1c      	ldr	r2, [pc, #112]	@ (8009a68 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d00e      	beq.n	8009a1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a15      	ldr	r2, [pc, #84]	@ (8009a58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d009      	beq.n	8009a1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a18      	ldr	r2, [pc, #96]	@ (8009a6c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d004      	beq.n	8009a1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a11      	ldr	r2, [pc, #68]	@ (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d10c      	bne.n	8009a34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	40012c00 	.word	0x40012c00
 8009a58:	40013400 	.word	0x40013400
 8009a5c:	40015000 	.word	0x40015000
 8009a60:	40000400 	.word	0x40000400
 8009a64:	40000800 	.word	0x40000800
 8009a68:	40000c00 	.word	0x40000c00
 8009a6c:	40014000 	.word	0x40014000

08009a70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d101      	bne.n	8009a8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a88:	2302      	movs	r3, #2
 8009a8a:	e078      	b.n	8009b7e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	695b      	ldr	r3, [r3, #20]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af2:	4313      	orrs	r3, r2
 8009af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	4313      	orrs	r3, r2
 8009b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	69db      	ldr	r3, [r3, #28]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a1c      	ldr	r2, [pc, #112]	@ (8009b8c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d009      	beq.n	8009b32 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a1b      	ldr	r2, [pc, #108]	@ (8009b90 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d004      	beq.n	8009b32 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a19      	ldr	r2, [pc, #100]	@ (8009b94 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d11c      	bne.n	8009b6c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b3c:	051b      	lsls	r3, r3, #20
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	6a1b      	ldr	r3, [r3, #32]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	40012c00 	.word	0x40012c00
 8009b90:	40013400 	.word	0x40013400
 8009b94:	40015000 	.word	0x40015000

08009b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e042      	b.n	8009cbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d106      	bne.n	8009c4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fa f967 	bl	8003f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2224      	movs	r2, #36	@ 0x24
 8009c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 0201 	bic.w	r2, r2, #1
 8009c64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fff4 	bl	800ac5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fcf5 	bl	800a664 <UART_SetConfig>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d101      	bne.n	8009c84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e01b      	b.n	8009cbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	685a      	ldr	r2, [r3, #4]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689a      	ldr	r2, [r3, #8]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f042 0201 	orr.w	r2, r2, #1
 8009cb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f001 f873 	bl	800ada0 <UART_CheckIdleState>
 8009cba:	4603      	mov	r3, r0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b08a      	sub	sp, #40	@ 0x28
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cda:	2b20      	cmp	r3, #32
 8009cdc:	d17b      	bne.n	8009dd6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d002      	beq.n	8009cea <HAL_UART_Transmit+0x26>
 8009ce4:	88fb      	ldrh	r3, [r7, #6]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e074      	b.n	8009dd8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2221      	movs	r2, #33	@ 0x21
 8009cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cfe:	f7fa fab9 	bl	8004274 <HAL_GetTick>
 8009d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	88fa      	ldrh	r2, [r7, #6]
 8009d08:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	88fa      	ldrh	r2, [r7, #6]
 8009d10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d1c:	d108      	bne.n	8009d30 <HAL_UART_Transmit+0x6c>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d104      	bne.n	8009d30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009d26:	2300      	movs	r3, #0
 8009d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	61bb      	str	r3, [r7, #24]
 8009d2e:	e003      	b.n	8009d38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d34:	2300      	movs	r3, #0
 8009d36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d38:	e030      	b.n	8009d9c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2200      	movs	r2, #0
 8009d42:	2180      	movs	r1, #128	@ 0x80
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f001 f8d5 	bl	800aef4 <UART_WaitOnFlagUntilTimeout>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d005      	beq.n	8009d5c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2220      	movs	r2, #32
 8009d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e03d      	b.n	8009dd8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10b      	bne.n	8009d7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	461a      	mov	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d70:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	3302      	adds	r3, #2
 8009d76:	61bb      	str	r3, [r7, #24]
 8009d78:	e007      	b.n	8009d8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	781a      	ldrb	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	3301      	adds	r3, #1
 8009d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	3b01      	subs	r3, #1
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1c8      	bne.n	8009d3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	2200      	movs	r2, #0
 8009db0:	2140      	movs	r1, #64	@ 0x40
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f001 f89e 	bl	800aef4 <UART_WaitOnFlagUntilTimeout>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e006      	b.n	8009dd8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2220      	movs	r2, #32
 8009dce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	e000      	b.n	8009dd8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009dd6:	2302      	movs	r3, #2
  }
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3720      	adds	r7, #32
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b091      	sub	sp, #68	@ 0x44
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	4613      	mov	r3, r2
 8009dec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009df4:	2b20      	cmp	r3, #32
 8009df6:	d178      	bne.n	8009eea <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <HAL_UART_Transmit_IT+0x24>
 8009dfe:	88fb      	ldrh	r3, [r7, #6]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e071      	b.n	8009eec <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	88fa      	ldrh	r2, [r7, #6]
 8009e12:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	88fa      	ldrh	r2, [r7, #6]
 8009e1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2221      	movs	r2, #33	@ 0x21
 8009e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e3c:	d12a      	bne.n	8009e94 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e46:	d107      	bne.n	8009e58 <HAL_UART_Transmit_IT+0x78>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d103      	bne.n	8009e58 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4a29      	ldr	r2, [pc, #164]	@ (8009ef8 <HAL_UART_Transmit_IT+0x118>)
 8009e54:	679a      	str	r2, [r3, #120]	@ 0x78
 8009e56:	e002      	b.n	8009e5e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4a28      	ldr	r2, [pc, #160]	@ (8009efc <HAL_UART_Transmit_IT+0x11c>)
 8009e5c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3308      	adds	r3, #8
 8009e64:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e68:	e853 3f00 	ldrex	r3, [r3]
 8009e6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009e74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e7e:	637a      	str	r2, [r7, #52]	@ 0x34
 8009e80:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e86:	e841 2300 	strex	r3, r2, [r1]
 8009e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1e5      	bne.n	8009e5e <HAL_UART_Transmit_IT+0x7e>
 8009e92:	e028      	b.n	8009ee6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e9c:	d107      	bne.n	8009eae <HAL_UART_Transmit_IT+0xce>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d103      	bne.n	8009eae <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	4a15      	ldr	r2, [pc, #84]	@ (8009f00 <HAL_UART_Transmit_IT+0x120>)
 8009eaa:	679a      	str	r2, [r3, #120]	@ 0x78
 8009eac:	e002      	b.n	8009eb4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	4a14      	ldr	r2, [pc, #80]	@ (8009f04 <HAL_UART_Transmit_IT+0x124>)
 8009eb2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	e853 3f00 	ldrex	r3, [r3]
 8009ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed2:	623b      	str	r3, [r7, #32]
 8009ed4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed6:	69f9      	ldr	r1, [r7, #28]
 8009ed8:	6a3a      	ldr	r2, [r7, #32]
 8009eda:	e841 2300 	strex	r3, r2, [r1]
 8009ede:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1e6      	bne.n	8009eb4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	e000      	b.n	8009eec <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009eea:	2302      	movs	r3, #2
  }
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3744      	adds	r7, #68	@ 0x44
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	0800b567 	.word	0x0800b567
 8009efc:	0800b487 	.word	0x0800b487
 8009f00:	0800b3c5 	.word	0x0800b3c5
 8009f04:	0800b30d 	.word	0x0800b30d

08009f08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08a      	sub	sp, #40	@ 0x28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	4613      	mov	r3, r2
 8009f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f1c:	2b20      	cmp	r3, #32
 8009f1e:	d137      	bne.n	8009f90 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d002      	beq.n	8009f2c <HAL_UART_Receive_IT+0x24>
 8009f26:	88fb      	ldrh	r3, [r7, #6]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d101      	bne.n	8009f30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e030      	b.n	8009f92 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a18      	ldr	r2, [pc, #96]	@ (8009f9c <HAL_UART_Receive_IT+0x94>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d01f      	beq.n	8009f80 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d018      	beq.n	8009f80 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	e853 3f00 	ldrex	r3, [r3]
 8009f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	461a      	mov	r2, r3
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6c:	623b      	str	r3, [r7, #32]
 8009f6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f70:	69f9      	ldr	r1, [r7, #28]
 8009f72:	6a3a      	ldr	r2, [r7, #32]
 8009f74:	e841 2300 	strex	r3, r2, [r1]
 8009f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1e6      	bne.n	8009f4e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009f80:	88fb      	ldrh	r3, [r7, #6]
 8009f82:	461a      	mov	r2, r3
 8009f84:	68b9      	ldr	r1, [r7, #8]
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f001 f822 	bl	800afd0 <UART_Start_Receive_IT>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	e000      	b.n	8009f92 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009f90:	2302      	movs	r3, #2
  }
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3728      	adds	r7, #40	@ 0x28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	40008000 	.word	0x40008000

08009fa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b0ba      	sub	sp, #232	@ 0xe8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	69db      	ldr	r3, [r3, #28]
 8009fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009fc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009fca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009fce:	4013      	ands	r3, r2
 8009fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d11b      	bne.n	800a014 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fe0:	f003 0320 	and.w	r3, r3, #32
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d015      	beq.n	800a014 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fec:	f003 0320 	and.w	r3, r3, #32
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d105      	bne.n	800a000 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d009      	beq.n	800a014 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a004:	2b00      	cmp	r3, #0
 800a006:	f000 8300 	beq.w	800a60a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	4798      	blx	r3
      }
      return;
 800a012:	e2fa      	b.n	800a60a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 8123 	beq.w	800a264 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a01e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a022:	4b8d      	ldr	r3, [pc, #564]	@ (800a258 <HAL_UART_IRQHandler+0x2b8>)
 800a024:	4013      	ands	r3, r2
 800a026:	2b00      	cmp	r3, #0
 800a028:	d106      	bne.n	800a038 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a02a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a02e:	4b8b      	ldr	r3, [pc, #556]	@ (800a25c <HAL_UART_IRQHandler+0x2bc>)
 800a030:	4013      	ands	r3, r2
 800a032:	2b00      	cmp	r3, #0
 800a034:	f000 8116 	beq.w	800a264 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	d011      	beq.n	800a068 <HAL_UART_IRQHandler+0xc8>
 800a044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00b      	beq.n	800a068 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2201      	movs	r2, #1
 800a056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a05e:	f043 0201 	orr.w	r2, r3, #1
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a06c:	f003 0302 	and.w	r3, r3, #2
 800a070:	2b00      	cmp	r3, #0
 800a072:	d011      	beq.n	800a098 <HAL_UART_IRQHandler+0xf8>
 800a074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00b      	beq.n	800a098 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2202      	movs	r2, #2
 800a086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a08e:	f043 0204 	orr.w	r2, r3, #4
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a09c:	f003 0304 	and.w	r3, r3, #4
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d011      	beq.n	800a0c8 <HAL_UART_IRQHandler+0x128>
 800a0a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0a8:	f003 0301 	and.w	r3, r3, #1
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00b      	beq.n	800a0c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2204      	movs	r2, #4
 800a0b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0be:	f043 0202 	orr.w	r2, r3, #2
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a0c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0cc:	f003 0308 	and.w	r3, r3, #8
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d017      	beq.n	800a104 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0d8:	f003 0320 	and.w	r3, r3, #32
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d105      	bne.n	800a0ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a0e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a0e4:	4b5c      	ldr	r3, [pc, #368]	@ (800a258 <HAL_UART_IRQHandler+0x2b8>)
 800a0e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00b      	beq.n	800a104 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2208      	movs	r2, #8
 800a0f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0fa:	f043 0208 	orr.w	r2, r3, #8
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a108:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d012      	beq.n	800a136 <HAL_UART_IRQHandler+0x196>
 800a110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a114:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00c      	beq.n	800a136 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a12c:	f043 0220 	orr.w	r2, r3, #32
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f000 8266 	beq.w	800a60e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a146:	f003 0320 	and.w	r3, r3, #32
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d013      	beq.n	800a176 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a14e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a152:	f003 0320 	and.w	r3, r3, #32
 800a156:	2b00      	cmp	r3, #0
 800a158:	d105      	bne.n	800a166 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a15a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a15e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d007      	beq.n	800a176 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d003      	beq.n	800a176 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a17c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a18a:	2b40      	cmp	r3, #64	@ 0x40
 800a18c:	d005      	beq.n	800a19a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a18e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a192:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a196:	2b00      	cmp	r3, #0
 800a198:	d054      	beq.n	800a244 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f001 f83a 	bl	800b214 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1aa:	2b40      	cmp	r3, #64	@ 0x40
 800a1ac:	d146      	bne.n	800a23c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3308      	adds	r3, #8
 800a1b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a1bc:	e853 3f00 	ldrex	r3, [r3]
 800a1c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a1c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a1c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a1da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a1de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a1e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a1ea:	e841 2300 	strex	r3, r2, [r1]
 800a1ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a1f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1d9      	bne.n	800a1ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a200:	2b00      	cmp	r3, #0
 800a202:	d017      	beq.n	800a234 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a20a:	4a15      	ldr	r2, [pc, #84]	@ (800a260 <HAL_UART_IRQHandler+0x2c0>)
 800a20c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a214:	4618      	mov	r0, r3
 800a216:	f7fa fb19 	bl	800484c <HAL_DMA_Abort_IT>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d019      	beq.n	800a254 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a22e:	4610      	mov	r0, r2
 800a230:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a232:	e00f      	b.n	800a254 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f9ff 	bl	800a638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a23a:	e00b      	b.n	800a254 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f9fb 	bl	800a638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a242:	e007      	b.n	800a254 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f9f7 	bl	800a638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a252:	e1dc      	b.n	800a60e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a254:	bf00      	nop
    return;
 800a256:	e1da      	b.n	800a60e <HAL_UART_IRQHandler+0x66e>
 800a258:	10000001 	.word	0x10000001
 800a25c:	04000120 	.word	0x04000120
 800a260:	0800b2e1 	.word	0x0800b2e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a268:	2b01      	cmp	r3, #1
 800a26a:	f040 8170 	bne.w	800a54e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a272:	f003 0310 	and.w	r3, r3, #16
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 8169 	beq.w	800a54e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a27c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a280:	f003 0310 	and.w	r3, r3, #16
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 8162 	beq.w	800a54e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2210      	movs	r2, #16
 800a290:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a29c:	2b40      	cmp	r3, #64	@ 0x40
 800a29e:	f040 80d8 	bne.w	800a452 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 80af 	beq.w	800a418 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	f080 80a7 	bcs.w	800a418 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0320 	and.w	r3, r3, #32
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f040 8087 	bne.w	800a3f6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a2fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	461a      	mov	r2, r3
 800a30e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a312:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a316:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a31e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a322:	e841 2300 	strex	r3, r2, [r1]
 800a326:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a32a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1da      	bne.n	800a2e8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3308      	adds	r3, #8
 800a338:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a33c:	e853 3f00 	ldrex	r3, [r3]
 800a340:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a342:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a344:	f023 0301 	bic.w	r3, r3, #1
 800a348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3308      	adds	r3, #8
 800a352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a356:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a35a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a35e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a362:	e841 2300 	strex	r3, r2, [r1]
 800a366:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e1      	bne.n	800a332 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3308      	adds	r3, #8
 800a374:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a376:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a378:	e853 3f00 	ldrex	r3, [r3]
 800a37c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a37e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3308      	adds	r3, #8
 800a38e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a392:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a394:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a396:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a398:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a39a:	e841 2300 	strex	r3, r2, [r1]
 800a39e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a3a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1e3      	bne.n	800a36e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3bc:	e853 3f00 	ldrex	r3, [r3]
 800a3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3c4:	f023 0310 	bic.w	r3, r3, #16
 800a3c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3de:	e841 2300 	strex	r3, r2, [r1]
 800a3e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1e4      	bne.n	800a3b4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fa f9d2 	bl	800479a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a408:	b29b      	uxth	r3, r3
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f91b 	bl	800a64c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a416:	e0fc      	b.n	800a612 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a41e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a422:	429a      	cmp	r2, r3
 800a424:	f040 80f5 	bne.w	800a612 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 0320 	and.w	r3, r3, #32
 800a436:	2b20      	cmp	r3, #32
 800a438:	f040 80eb 	bne.w	800a612 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2202      	movs	r2, #2
 800a440:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a448:	4619      	mov	r1, r3
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f8fe 	bl	800a64c <HAL_UARTEx_RxEventCallback>
      return;
 800a450:	e0df      	b.n	800a612 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a45e:	b29b      	uxth	r3, r3
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f000 80d1 	beq.w	800a616 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 80cc 	beq.w	800a616 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a486:	e853 3f00 	ldrex	r3, [r3]
 800a48a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a48c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a492:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	461a      	mov	r2, r3
 800a49c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a4a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4a8:	e841 2300 	strex	r3, r2, [r1]
 800a4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1e4      	bne.n	800a47e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3308      	adds	r3, #8
 800a4ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4be:	e853 3f00 	ldrex	r3, [r3]
 800a4c2:	623b      	str	r3, [r7, #32]
   return(result);
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4ca:	f023 0301 	bic.w	r3, r3, #1
 800a4ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a4dc:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e1      	bne.n	800a4b4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	e853 3f00 	ldrex	r3, [r3]
 800a510:	60fb      	str	r3, [r7, #12]
   return(result);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f023 0310 	bic.w	r3, r3, #16
 800a518:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	461a      	mov	r2, r3
 800a522:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a526:	61fb      	str	r3, [r7, #28]
 800a528:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52a:	69b9      	ldr	r1, [r7, #24]
 800a52c:	69fa      	ldr	r2, [r7, #28]
 800a52e:	e841 2300 	strex	r3, r2, [r1]
 800a532:	617b      	str	r3, [r7, #20]
   return(result);
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1e4      	bne.n	800a504 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2202      	movs	r2, #2
 800a53e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a544:	4619      	mov	r1, r3
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f880 	bl	800a64c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a54c:	e063      	b.n	800a616 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a54e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a552:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00e      	beq.n	800a578 <HAL_UART_IRQHandler+0x5d8>
 800a55a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a55e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d008      	beq.n	800a578 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a56e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f001 fdb9 	bl	800c0e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a576:	e051      	b.n	800a61c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a57c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a580:	2b00      	cmp	r3, #0
 800a582:	d014      	beq.n	800a5ae <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d105      	bne.n	800a59c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a594:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d008      	beq.n	800a5ae <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d03a      	beq.n	800a61a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	4798      	blx	r3
    }
    return;
 800a5ac:	e035      	b.n	800a61a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d009      	beq.n	800a5ce <HAL_UART_IRQHandler+0x62e>
 800a5ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d003      	beq.n	800a5ce <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f001 f842 	bl	800b650 <UART_EndTransmit_IT>
    return;
 800a5cc:	e026      	b.n	800a61c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d009      	beq.n	800a5ee <HAL_UART_IRQHandler+0x64e>
 800a5da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f001 fd92 	bl	800c110 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5ec:	e016      	b.n	800a61c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d010      	beq.n	800a61c <HAL_UART_IRQHandler+0x67c>
 800a5fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	da0c      	bge.n	800a61c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f001 fd7a 	bl	800c0fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a608:	e008      	b.n	800a61c <HAL_UART_IRQHandler+0x67c>
      return;
 800a60a:	bf00      	nop
 800a60c:	e006      	b.n	800a61c <HAL_UART_IRQHandler+0x67c>
    return;
 800a60e:	bf00      	nop
 800a610:	e004      	b.n	800a61c <HAL_UART_IRQHandler+0x67c>
      return;
 800a612:	bf00      	nop
 800a614:	e002      	b.n	800a61c <HAL_UART_IRQHandler+0x67c>
      return;
 800a616:	bf00      	nop
 800a618:	e000      	b.n	800a61c <HAL_UART_IRQHandler+0x67c>
    return;
 800a61a:	bf00      	nop
  }
}
 800a61c:	37e8      	adds	r7, #232	@ 0xe8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop

0800a624 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a668:	b08c      	sub	sp, #48	@ 0x30
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	689a      	ldr	r2, [r3, #8]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	431a      	orrs	r2, r3
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	431a      	orrs	r2, r3
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	69db      	ldr	r3, [r3, #28]
 800a688:	4313      	orrs	r3, r2
 800a68a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	4baa      	ldr	r3, [pc, #680]	@ (800a93c <UART_SetConfig+0x2d8>)
 800a694:	4013      	ands	r3, r2
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	6812      	ldr	r2, [r2, #0]
 800a69a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a69c:	430b      	orrs	r3, r1
 800a69e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	68da      	ldr	r2, [r3, #12]
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a9f      	ldr	r2, [pc, #636]	@ (800a940 <UART_SetConfig+0x2dc>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d004      	beq.n	800a6d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a6da:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	6812      	ldr	r2, [r2, #0]
 800a6e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6e4:	430b      	orrs	r3, r1
 800a6e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ee:	f023 010f 	bic.w	r1, r3, #15
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a90      	ldr	r2, [pc, #576]	@ (800a944 <UART_SetConfig+0x2e0>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d125      	bne.n	800a754 <UART_SetConfig+0xf0>
 800a708:	4b8f      	ldr	r3, [pc, #572]	@ (800a948 <UART_SetConfig+0x2e4>)
 800a70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a70e:	f003 0303 	and.w	r3, r3, #3
 800a712:	2b03      	cmp	r3, #3
 800a714:	d81a      	bhi.n	800a74c <UART_SetConfig+0xe8>
 800a716:	a201      	add	r2, pc, #4	@ (adr r2, 800a71c <UART_SetConfig+0xb8>)
 800a718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71c:	0800a72d 	.word	0x0800a72d
 800a720:	0800a73d 	.word	0x0800a73d
 800a724:	0800a735 	.word	0x0800a735
 800a728:	0800a745 	.word	0x0800a745
 800a72c:	2301      	movs	r3, #1
 800a72e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a732:	e116      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a734:	2302      	movs	r3, #2
 800a736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a73a:	e112      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a73c:	2304      	movs	r3, #4
 800a73e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a742:	e10e      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a744:	2308      	movs	r3, #8
 800a746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a74a:	e10a      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a74c:	2310      	movs	r3, #16
 800a74e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a752:	e106      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a7c      	ldr	r2, [pc, #496]	@ (800a94c <UART_SetConfig+0x2e8>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d138      	bne.n	800a7d0 <UART_SetConfig+0x16c>
 800a75e:	4b7a      	ldr	r3, [pc, #488]	@ (800a948 <UART_SetConfig+0x2e4>)
 800a760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a764:	f003 030c 	and.w	r3, r3, #12
 800a768:	2b0c      	cmp	r3, #12
 800a76a:	d82d      	bhi.n	800a7c8 <UART_SetConfig+0x164>
 800a76c:	a201      	add	r2, pc, #4	@ (adr r2, 800a774 <UART_SetConfig+0x110>)
 800a76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a772:	bf00      	nop
 800a774:	0800a7a9 	.word	0x0800a7a9
 800a778:	0800a7c9 	.word	0x0800a7c9
 800a77c:	0800a7c9 	.word	0x0800a7c9
 800a780:	0800a7c9 	.word	0x0800a7c9
 800a784:	0800a7b9 	.word	0x0800a7b9
 800a788:	0800a7c9 	.word	0x0800a7c9
 800a78c:	0800a7c9 	.word	0x0800a7c9
 800a790:	0800a7c9 	.word	0x0800a7c9
 800a794:	0800a7b1 	.word	0x0800a7b1
 800a798:	0800a7c9 	.word	0x0800a7c9
 800a79c:	0800a7c9 	.word	0x0800a7c9
 800a7a0:	0800a7c9 	.word	0x0800a7c9
 800a7a4:	0800a7c1 	.word	0x0800a7c1
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ae:	e0d8      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7b6:	e0d4      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a7b8:	2304      	movs	r3, #4
 800a7ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7be:	e0d0      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a7c0:	2308      	movs	r3, #8
 800a7c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7c6:	e0cc      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a7c8:	2310      	movs	r3, #16
 800a7ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ce:	e0c8      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a5e      	ldr	r2, [pc, #376]	@ (800a950 <UART_SetConfig+0x2ec>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d125      	bne.n	800a826 <UART_SetConfig+0x1c2>
 800a7da:	4b5b      	ldr	r3, [pc, #364]	@ (800a948 <UART_SetConfig+0x2e4>)
 800a7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a7e4:	2b30      	cmp	r3, #48	@ 0x30
 800a7e6:	d016      	beq.n	800a816 <UART_SetConfig+0x1b2>
 800a7e8:	2b30      	cmp	r3, #48	@ 0x30
 800a7ea:	d818      	bhi.n	800a81e <UART_SetConfig+0x1ba>
 800a7ec:	2b20      	cmp	r3, #32
 800a7ee:	d00a      	beq.n	800a806 <UART_SetConfig+0x1a2>
 800a7f0:	2b20      	cmp	r3, #32
 800a7f2:	d814      	bhi.n	800a81e <UART_SetConfig+0x1ba>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d002      	beq.n	800a7fe <UART_SetConfig+0x19a>
 800a7f8:	2b10      	cmp	r3, #16
 800a7fa:	d008      	beq.n	800a80e <UART_SetConfig+0x1aa>
 800a7fc:	e00f      	b.n	800a81e <UART_SetConfig+0x1ba>
 800a7fe:	2300      	movs	r3, #0
 800a800:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a804:	e0ad      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a806:	2302      	movs	r3, #2
 800a808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a80c:	e0a9      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a80e:	2304      	movs	r3, #4
 800a810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a814:	e0a5      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a816:	2308      	movs	r3, #8
 800a818:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a81c:	e0a1      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a81e:	2310      	movs	r3, #16
 800a820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a824:	e09d      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a4a      	ldr	r2, [pc, #296]	@ (800a954 <UART_SetConfig+0x2f0>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d125      	bne.n	800a87c <UART_SetConfig+0x218>
 800a830:	4b45      	ldr	r3, [pc, #276]	@ (800a948 <UART_SetConfig+0x2e4>)
 800a832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a836:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a83a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a83c:	d016      	beq.n	800a86c <UART_SetConfig+0x208>
 800a83e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a840:	d818      	bhi.n	800a874 <UART_SetConfig+0x210>
 800a842:	2b80      	cmp	r3, #128	@ 0x80
 800a844:	d00a      	beq.n	800a85c <UART_SetConfig+0x1f8>
 800a846:	2b80      	cmp	r3, #128	@ 0x80
 800a848:	d814      	bhi.n	800a874 <UART_SetConfig+0x210>
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <UART_SetConfig+0x1f0>
 800a84e:	2b40      	cmp	r3, #64	@ 0x40
 800a850:	d008      	beq.n	800a864 <UART_SetConfig+0x200>
 800a852:	e00f      	b.n	800a874 <UART_SetConfig+0x210>
 800a854:	2300      	movs	r3, #0
 800a856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a85a:	e082      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a85c:	2302      	movs	r3, #2
 800a85e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a862:	e07e      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a864:	2304      	movs	r3, #4
 800a866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a86a:	e07a      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a86c:	2308      	movs	r3, #8
 800a86e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a872:	e076      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a874:	2310      	movs	r3, #16
 800a876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a87a:	e072      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a35      	ldr	r2, [pc, #212]	@ (800a958 <UART_SetConfig+0x2f4>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d12a      	bne.n	800a8dc <UART_SetConfig+0x278>
 800a886:	4b30      	ldr	r3, [pc, #192]	@ (800a948 <UART_SetConfig+0x2e4>)
 800a888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a88c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a890:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a894:	d01a      	beq.n	800a8cc <UART_SetConfig+0x268>
 800a896:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a89a:	d81b      	bhi.n	800a8d4 <UART_SetConfig+0x270>
 800a89c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8a0:	d00c      	beq.n	800a8bc <UART_SetConfig+0x258>
 800a8a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8a6:	d815      	bhi.n	800a8d4 <UART_SetConfig+0x270>
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d003      	beq.n	800a8b4 <UART_SetConfig+0x250>
 800a8ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8b0:	d008      	beq.n	800a8c4 <UART_SetConfig+0x260>
 800a8b2:	e00f      	b.n	800a8d4 <UART_SetConfig+0x270>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8ba:	e052      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8c2:	e04e      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a8c4:	2304      	movs	r3, #4
 800a8c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8ca:	e04a      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a8cc:	2308      	movs	r3, #8
 800a8ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8d2:	e046      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a8d4:	2310      	movs	r3, #16
 800a8d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8da:	e042      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a17      	ldr	r2, [pc, #92]	@ (800a940 <UART_SetConfig+0x2dc>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d13a      	bne.n	800a95c <UART_SetConfig+0x2f8>
 800a8e6:	4b18      	ldr	r3, [pc, #96]	@ (800a948 <UART_SetConfig+0x2e4>)
 800a8e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a8f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a8f4:	d01a      	beq.n	800a92c <UART_SetConfig+0x2c8>
 800a8f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a8fa:	d81b      	bhi.n	800a934 <UART_SetConfig+0x2d0>
 800a8fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a900:	d00c      	beq.n	800a91c <UART_SetConfig+0x2b8>
 800a902:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a906:	d815      	bhi.n	800a934 <UART_SetConfig+0x2d0>
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d003      	beq.n	800a914 <UART_SetConfig+0x2b0>
 800a90c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a910:	d008      	beq.n	800a924 <UART_SetConfig+0x2c0>
 800a912:	e00f      	b.n	800a934 <UART_SetConfig+0x2d0>
 800a914:	2300      	movs	r3, #0
 800a916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a91a:	e022      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a91c:	2302      	movs	r3, #2
 800a91e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a922:	e01e      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a924:	2304      	movs	r3, #4
 800a926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a92a:	e01a      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a92c:	2308      	movs	r3, #8
 800a92e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a932:	e016      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a934:	2310      	movs	r3, #16
 800a936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a93a:	e012      	b.n	800a962 <UART_SetConfig+0x2fe>
 800a93c:	cfff69f3 	.word	0xcfff69f3
 800a940:	40008000 	.word	0x40008000
 800a944:	40013800 	.word	0x40013800
 800a948:	40021000 	.word	0x40021000
 800a94c:	40004400 	.word	0x40004400
 800a950:	40004800 	.word	0x40004800
 800a954:	40004c00 	.word	0x40004c00
 800a958:	40005000 	.word	0x40005000
 800a95c:	2310      	movs	r3, #16
 800a95e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4aae      	ldr	r2, [pc, #696]	@ (800ac20 <UART_SetConfig+0x5bc>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	f040 8097 	bne.w	800aa9c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a96e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a972:	2b08      	cmp	r3, #8
 800a974:	d823      	bhi.n	800a9be <UART_SetConfig+0x35a>
 800a976:	a201      	add	r2, pc, #4	@ (adr r2, 800a97c <UART_SetConfig+0x318>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800a9a1 	.word	0x0800a9a1
 800a980:	0800a9bf 	.word	0x0800a9bf
 800a984:	0800a9a9 	.word	0x0800a9a9
 800a988:	0800a9bf 	.word	0x0800a9bf
 800a98c:	0800a9af 	.word	0x0800a9af
 800a990:	0800a9bf 	.word	0x0800a9bf
 800a994:	0800a9bf 	.word	0x0800a9bf
 800a998:	0800a9bf 	.word	0x0800a9bf
 800a99c:	0800a9b7 	.word	0x0800a9b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9a0:	f7fc fee2 	bl	8007768 <HAL_RCC_GetPCLK1Freq>
 800a9a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9a6:	e010      	b.n	800a9ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9a8:	4b9e      	ldr	r3, [pc, #632]	@ (800ac24 <UART_SetConfig+0x5c0>)
 800a9aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9ac:	e00d      	b.n	800a9ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9ae:	f7fc fe6d 	bl	800768c <HAL_RCC_GetSysClockFreq>
 800a9b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9b4:	e009      	b.n	800a9ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9bc:	e005      	b.n	800a9ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a9c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 8130 	beq.w	800ac32 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d6:	4a94      	ldr	r2, [pc, #592]	@ (800ac28 <UART_SetConfig+0x5c4>)
 800a9d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9dc:	461a      	mov	r2, r3
 800a9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	005b      	lsls	r3, r3, #1
 800a9ee:	4413      	add	r3, r2
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d305      	bcc.n	800aa02 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9fc:	69ba      	ldr	r2, [r7, #24]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d903      	bls.n	800aa0a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa08:	e113      	b.n	800ac32 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	60bb      	str	r3, [r7, #8]
 800aa10:	60fa      	str	r2, [r7, #12]
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa16:	4a84      	ldr	r2, [pc, #528]	@ (800ac28 <UART_SetConfig+0x5c4>)
 800aa18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	2200      	movs	r2, #0
 800aa20:	603b      	str	r3, [r7, #0]
 800aa22:	607a      	str	r2, [r7, #4]
 800aa24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa2c:	f7f6 fa62 	bl	8000ef4 <__aeabi_uldivmod>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	4610      	mov	r0, r2
 800aa36:	4619      	mov	r1, r3
 800aa38:	f04f 0200 	mov.w	r2, #0
 800aa3c:	f04f 0300 	mov.w	r3, #0
 800aa40:	020b      	lsls	r3, r1, #8
 800aa42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa46:	0202      	lsls	r2, r0, #8
 800aa48:	6979      	ldr	r1, [r7, #20]
 800aa4a:	6849      	ldr	r1, [r1, #4]
 800aa4c:	0849      	lsrs	r1, r1, #1
 800aa4e:	2000      	movs	r0, #0
 800aa50:	460c      	mov	r4, r1
 800aa52:	4605      	mov	r5, r0
 800aa54:	eb12 0804 	adds.w	r8, r2, r4
 800aa58:	eb43 0905 	adc.w	r9, r3, r5
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	469a      	mov	sl, r3
 800aa64:	4693      	mov	fp, r2
 800aa66:	4652      	mov	r2, sl
 800aa68:	465b      	mov	r3, fp
 800aa6a:	4640      	mov	r0, r8
 800aa6c:	4649      	mov	r1, r9
 800aa6e:	f7f6 fa41 	bl	8000ef4 <__aeabi_uldivmod>
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	4613      	mov	r3, r2
 800aa78:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa80:	d308      	bcc.n	800aa94 <UART_SetConfig+0x430>
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa88:	d204      	bcs.n	800aa94 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	6a3a      	ldr	r2, [r7, #32]
 800aa90:	60da      	str	r2, [r3, #12]
 800aa92:	e0ce      	b.n	800ac32 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa9a:	e0ca      	b.n	800ac32 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aaa4:	d166      	bne.n	800ab74 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800aaa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aaaa:	2b08      	cmp	r3, #8
 800aaac:	d827      	bhi.n	800aafe <UART_SetConfig+0x49a>
 800aaae:	a201      	add	r2, pc, #4	@ (adr r2, 800aab4 <UART_SetConfig+0x450>)
 800aab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab4:	0800aad9 	.word	0x0800aad9
 800aab8:	0800aae1 	.word	0x0800aae1
 800aabc:	0800aae9 	.word	0x0800aae9
 800aac0:	0800aaff 	.word	0x0800aaff
 800aac4:	0800aaef 	.word	0x0800aaef
 800aac8:	0800aaff 	.word	0x0800aaff
 800aacc:	0800aaff 	.word	0x0800aaff
 800aad0:	0800aaff 	.word	0x0800aaff
 800aad4:	0800aaf7 	.word	0x0800aaf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aad8:	f7fc fe46 	bl	8007768 <HAL_RCC_GetPCLK1Freq>
 800aadc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aade:	e014      	b.n	800ab0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aae0:	f7fc fe58 	bl	8007794 <HAL_RCC_GetPCLK2Freq>
 800aae4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aae6:	e010      	b.n	800ab0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aae8:	4b4e      	ldr	r3, [pc, #312]	@ (800ac24 <UART_SetConfig+0x5c0>)
 800aaea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aaec:	e00d      	b.n	800ab0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aaee:	f7fc fdcd 	bl	800768c <HAL_RCC_GetSysClockFreq>
 800aaf2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aaf4:	e009      	b.n	800ab0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aafa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aafc:	e005      	b.n	800ab0a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800aafe:	2300      	movs	r3, #0
 800ab00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ab08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 8090 	beq.w	800ac32 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab16:	4a44      	ldr	r2, [pc, #272]	@ (800ac28 <UART_SetConfig+0x5c4>)
 800ab18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab20:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab24:	005a      	lsls	r2, r3, #1
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	085b      	lsrs	r3, r3, #1
 800ab2c:	441a      	add	r2, r3
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	2b0f      	cmp	r3, #15
 800ab3c:	d916      	bls.n	800ab6c <UART_SetConfig+0x508>
 800ab3e:	6a3b      	ldr	r3, [r7, #32]
 800ab40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab44:	d212      	bcs.n	800ab6c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	f023 030f 	bic.w	r3, r3, #15
 800ab4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab50:	6a3b      	ldr	r3, [r7, #32]
 800ab52:	085b      	lsrs	r3, r3, #1
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	b29a      	uxth	r2, r3
 800ab5c:	8bfb      	ldrh	r3, [r7, #30]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	8bfa      	ldrh	r2, [r7, #30]
 800ab68:	60da      	str	r2, [r3, #12]
 800ab6a:	e062      	b.n	800ac32 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ab72:	e05e      	b.n	800ac32 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab78:	2b08      	cmp	r3, #8
 800ab7a:	d828      	bhi.n	800abce <UART_SetConfig+0x56a>
 800ab7c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab84 <UART_SetConfig+0x520>)
 800ab7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab82:	bf00      	nop
 800ab84:	0800aba9 	.word	0x0800aba9
 800ab88:	0800abb1 	.word	0x0800abb1
 800ab8c:	0800abb9 	.word	0x0800abb9
 800ab90:	0800abcf 	.word	0x0800abcf
 800ab94:	0800abbf 	.word	0x0800abbf
 800ab98:	0800abcf 	.word	0x0800abcf
 800ab9c:	0800abcf 	.word	0x0800abcf
 800aba0:	0800abcf 	.word	0x0800abcf
 800aba4:	0800abc7 	.word	0x0800abc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aba8:	f7fc fdde 	bl	8007768 <HAL_RCC_GetPCLK1Freq>
 800abac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abae:	e014      	b.n	800abda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abb0:	f7fc fdf0 	bl	8007794 <HAL_RCC_GetPCLK2Freq>
 800abb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abb6:	e010      	b.n	800abda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abb8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac24 <UART_SetConfig+0x5c0>)
 800abba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800abbc:	e00d      	b.n	800abda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abbe:	f7fc fd65 	bl	800768c <HAL_RCC_GetSysClockFreq>
 800abc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abc4:	e009      	b.n	800abda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800abcc:	e005      	b.n	800abda <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800abce:	2300      	movs	r3, #0
 800abd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800abd8:	bf00      	nop
    }

    if (pclk != 0U)
 800abda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d028      	beq.n	800ac32 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe4:	4a10      	ldr	r2, [pc, #64]	@ (800ac28 <UART_SetConfig+0x5c4>)
 800abe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abea:	461a      	mov	r2, r3
 800abec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abee:	fbb3 f2f2 	udiv	r2, r3, r2
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	085b      	lsrs	r3, r3, #1
 800abf8:	441a      	add	r2, r3
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	2b0f      	cmp	r3, #15
 800ac08:	d910      	bls.n	800ac2c <UART_SetConfig+0x5c8>
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac10:	d20c      	bcs.n	800ac2c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	60da      	str	r2, [r3, #12]
 800ac1c:	e009      	b.n	800ac32 <UART_SetConfig+0x5ce>
 800ac1e:	bf00      	nop
 800ac20:	40008000 	.word	0x40008000
 800ac24:	00f42400 	.word	0x00f42400
 800ac28:	0800f678 	.word	0x0800f678
      }
      else
      {
        ret = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	2200      	movs	r2, #0
 800ac46:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ac4e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3730      	adds	r7, #48	@ 0x30
 800ac56:	46bd      	mov	sp, r7
 800ac58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ac5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac68:	f003 0308 	and.w	r3, r3, #8
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d00a      	beq.n	800ac86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	430a      	orrs	r2, r1
 800ac84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00a      	beq.n	800aca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	430a      	orrs	r2, r1
 800aca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acac:	f003 0302 	and.w	r3, r3, #2
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00a      	beq.n	800acca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	430a      	orrs	r2, r1
 800acc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acce:	f003 0304 	and.w	r3, r3, #4
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00a      	beq.n	800acec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	430a      	orrs	r2, r1
 800acea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf0:	f003 0310 	and.w	r3, r3, #16
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00a      	beq.n	800ad0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad12:	f003 0320 	and.w	r3, r3, #32
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00a      	beq.n	800ad30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	430a      	orrs	r2, r1
 800ad2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d01a      	beq.n	800ad72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	430a      	orrs	r2, r1
 800ad50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad5a:	d10a      	bne.n	800ad72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	430a      	orrs	r2, r1
 800ad70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00a      	beq.n	800ad94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	430a      	orrs	r2, r1
 800ad92:	605a      	str	r2, [r3, #4]
  }
}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b098      	sub	sp, #96	@ 0x60
 800ada4:	af02      	add	r7, sp, #8
 800ada6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800adb0:	f7f9 fa60 	bl	8004274 <HAL_GetTick>
 800adb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 0308 	and.w	r3, r3, #8
 800adc0:	2b08      	cmp	r3, #8
 800adc2:	d12f      	bne.n	800ae24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adcc:	2200      	movs	r2, #0
 800adce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f88e 	bl	800aef4 <UART_WaitOnFlagUntilTimeout>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d022      	beq.n	800ae24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade6:	e853 3f00 	ldrex	r3, [r3]
 800adea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800adec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adf2:	653b      	str	r3, [r7, #80]	@ 0x50
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	461a      	mov	r2, r3
 800adfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adfc:	647b      	str	r3, [r7, #68]	@ 0x44
 800adfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae04:	e841 2300 	strex	r3, r2, [r1]
 800ae08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1e6      	bne.n	800adde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2220      	movs	r2, #32
 800ae14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae20:	2303      	movs	r3, #3
 800ae22:	e063      	b.n	800aeec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 0304 	and.w	r3, r3, #4
 800ae2e:	2b04      	cmp	r3, #4
 800ae30:	d149      	bne.n	800aec6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae32:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 f857 	bl	800aef4 <UART_WaitOnFlagUntilTimeout>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d03c      	beq.n	800aec6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae54:	e853 3f00 	ldrex	r3, [r3]
 800ae58:	623b      	str	r3, [r7, #32]
   return(result);
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae6a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae72:	e841 2300 	strex	r3, r2, [r1]
 800ae76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1e6      	bne.n	800ae4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3308      	adds	r3, #8
 800ae84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	e853 3f00 	ldrex	r3, [r3]
 800ae8c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f023 0301 	bic.w	r3, r3, #1
 800ae94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	3308      	adds	r3, #8
 800ae9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae9e:	61fa      	str	r2, [r7, #28]
 800aea0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea2:	69b9      	ldr	r1, [r7, #24]
 800aea4:	69fa      	ldr	r2, [r7, #28]
 800aea6:	e841 2300 	strex	r3, r2, [r1]
 800aeaa:	617b      	str	r3, [r7, #20]
   return(result);
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1e5      	bne.n	800ae7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aec2:	2303      	movs	r3, #3
 800aec4:	e012      	b.n	800aeec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2220      	movs	r2, #32
 800aeca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2220      	movs	r2, #32
 800aed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3758      	adds	r7, #88	@ 0x58
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	603b      	str	r3, [r7, #0]
 800af00:	4613      	mov	r3, r2
 800af02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af04:	e04f      	b.n	800afa6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0c:	d04b      	beq.n	800afa6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af0e:	f7f9 f9b1 	bl	8004274 <HAL_GetTick>
 800af12:	4602      	mov	r2, r0
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	1ad3      	subs	r3, r2, r3
 800af18:	69ba      	ldr	r2, [r7, #24]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d302      	bcc.n	800af24 <UART_WaitOnFlagUntilTimeout+0x30>
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d101      	bne.n	800af28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af24:	2303      	movs	r3, #3
 800af26:	e04e      	b.n	800afc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0304 	and.w	r3, r3, #4
 800af32:	2b00      	cmp	r3, #0
 800af34:	d037      	beq.n	800afa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	2b80      	cmp	r3, #128	@ 0x80
 800af3a:	d034      	beq.n	800afa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	2b40      	cmp	r3, #64	@ 0x40
 800af40:	d031      	beq.n	800afa6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	69db      	ldr	r3, [r3, #28]
 800af48:	f003 0308 	and.w	r3, r3, #8
 800af4c:	2b08      	cmp	r3, #8
 800af4e:	d110      	bne.n	800af72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2208      	movs	r2, #8
 800af56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f000 f95b 	bl	800b214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2208      	movs	r2, #8
 800af62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2200      	movs	r2, #0
 800af6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e029      	b.n	800afc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	69db      	ldr	r3, [r3, #28]
 800af78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af80:	d111      	bne.n	800afa6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f000 f941 	bl	800b214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2220      	movs	r2, #32
 800af96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800afa2:	2303      	movs	r3, #3
 800afa4:	e00f      	b.n	800afc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	69da      	ldr	r2, [r3, #28]
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	4013      	ands	r3, r2
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	bf0c      	ite	eq
 800afb6:	2301      	moveq	r3, #1
 800afb8:	2300      	movne	r3, #0
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	461a      	mov	r2, r3
 800afbe:	79fb      	ldrb	r3, [r7, #7]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d0a0      	beq.n	800af06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
	...

0800afd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b0a3      	sub	sp, #140	@ 0x8c
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	4613      	mov	r3, r2
 800afdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	88fa      	ldrh	r2, [r7, #6]
 800afe8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	88fa      	ldrh	r2, [r7, #6]
 800aff0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2200      	movs	r2, #0
 800aff8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b002:	d10e      	bne.n	800b022 <UART_Start_Receive_IT+0x52>
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d105      	bne.n	800b018 <UART_Start_Receive_IT+0x48>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b012:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b016:	e02d      	b.n	800b074 <UART_Start_Receive_IT+0xa4>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	22ff      	movs	r2, #255	@ 0xff
 800b01c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b020:	e028      	b.n	800b074 <UART_Start_Receive_IT+0xa4>
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10d      	bne.n	800b046 <UART_Start_Receive_IT+0x76>
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d104      	bne.n	800b03c <UART_Start_Receive_IT+0x6c>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	22ff      	movs	r2, #255	@ 0xff
 800b036:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b03a:	e01b      	b.n	800b074 <UART_Start_Receive_IT+0xa4>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	227f      	movs	r2, #127	@ 0x7f
 800b040:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b044:	e016      	b.n	800b074 <UART_Start_Receive_IT+0xa4>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b04e:	d10d      	bne.n	800b06c <UART_Start_Receive_IT+0x9c>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d104      	bne.n	800b062 <UART_Start_Receive_IT+0x92>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	227f      	movs	r2, #127	@ 0x7f
 800b05c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b060:	e008      	b.n	800b074 <UART_Start_Receive_IT+0xa4>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	223f      	movs	r2, #63	@ 0x3f
 800b066:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b06a:	e003      	b.n	800b074 <UART_Start_Receive_IT+0xa4>
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2222      	movs	r2, #34	@ 0x22
 800b080:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	3308      	adds	r3, #8
 800b08a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b08e:	e853 3f00 	ldrex	r3, [r3]
 800b092:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b094:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b096:	f043 0301 	orr.w	r3, r3, #1
 800b09a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	3308      	adds	r3, #8
 800b0a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b0a8:	673a      	str	r2, [r7, #112]	@ 0x70
 800b0aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ac:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b0ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b0b0:	e841 2300 	strex	r3, r2, [r1]
 800b0b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b0b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1e3      	bne.n	800b084 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0c4:	d14f      	bne.n	800b166 <UART_Start_Receive_IT+0x196>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b0cc:	88fa      	ldrh	r2, [r7, #6]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d349      	bcc.n	800b166 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0da:	d107      	bne.n	800b0ec <UART_Start_Receive_IT+0x11c>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d103      	bne.n	800b0ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	4a47      	ldr	r2, [pc, #284]	@ (800b204 <UART_Start_Receive_IT+0x234>)
 800b0e8:	675a      	str	r2, [r3, #116]	@ 0x74
 800b0ea:	e002      	b.n	800b0f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	4a46      	ldr	r2, [pc, #280]	@ (800b208 <UART_Start_Receive_IT+0x238>)
 800b0f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d01a      	beq.n	800b130 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b102:	e853 3f00 	ldrex	r3, [r3]
 800b106:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b10a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b10e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b11c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b11e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b120:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b122:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b124:	e841 2300 	strex	r3, r2, [r1]
 800b128:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b12a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1e4      	bne.n	800b0fa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	3308      	adds	r3, #8
 800b136:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b13a:	e853 3f00 	ldrex	r3, [r3]
 800b13e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b146:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	3308      	adds	r3, #8
 800b14e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b150:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b152:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b154:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b156:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b158:	e841 2300 	strex	r3, r2, [r1]
 800b15c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b15e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1e5      	bne.n	800b130 <UART_Start_Receive_IT+0x160>
 800b164:	e046      	b.n	800b1f4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b16e:	d107      	bne.n	800b180 <UART_Start_Receive_IT+0x1b0>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d103      	bne.n	800b180 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	4a24      	ldr	r2, [pc, #144]	@ (800b20c <UART_Start_Receive_IT+0x23c>)
 800b17c:	675a      	str	r2, [r3, #116]	@ 0x74
 800b17e:	e002      	b.n	800b186 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	4a23      	ldr	r2, [pc, #140]	@ (800b210 <UART_Start_Receive_IT+0x240>)
 800b184:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d019      	beq.n	800b1c2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b196:	e853 3f00 	ldrex	r3, [r3]
 800b19a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b1a2:	677b      	str	r3, [r7, #116]	@ 0x74
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1ae:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b1b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1b4:	e841 2300 	strex	r3, r2, [r1]
 800b1b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1e6      	bne.n	800b18e <UART_Start_Receive_IT+0x1be>
 800b1c0:	e018      	b.n	800b1f4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	e853 3f00 	ldrex	r3, [r3]
 800b1ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	f043 0320 	orr.w	r3, r3, #32
 800b1d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1e0:	623b      	str	r3, [r7, #32]
 800b1e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e4:	69f9      	ldr	r1, [r7, #28]
 800b1e6:	6a3a      	ldr	r2, [r7, #32]
 800b1e8:	e841 2300 	strex	r3, r2, [r1]
 800b1ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1e6      	bne.n	800b1c2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	378c      	adds	r7, #140	@ 0x8c
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	0800bd7d 	.word	0x0800bd7d
 800b208:	0800ba19 	.word	0x0800ba19
 800b20c:	0800b861 	.word	0x0800b861
 800b210:	0800b6a9 	.word	0x0800b6a9

0800b214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b214:	b480      	push	{r7}
 800b216:	b095      	sub	sp, #84	@ 0x54
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b224:	e853 3f00 	ldrex	r3, [r3]
 800b228:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b230:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	461a      	mov	r2, r3
 800b238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b23a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b23c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b240:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b242:	e841 2300 	strex	r3, r2, [r1]
 800b246:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1e6      	bne.n	800b21c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3308      	adds	r3, #8
 800b254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	e853 3f00 	ldrex	r3, [r3]
 800b25c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b264:	f023 0301 	bic.w	r3, r3, #1
 800b268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	3308      	adds	r3, #8
 800b270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b272:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b274:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b276:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b27a:	e841 2300 	strex	r3, r2, [r1]
 800b27e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1e3      	bne.n	800b24e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d118      	bne.n	800b2c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	e853 3f00 	ldrex	r3, [r3]
 800b29a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	f023 0310 	bic.w	r3, r3, #16
 800b2a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2ac:	61bb      	str	r3, [r7, #24]
 800b2ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b0:	6979      	ldr	r1, [r7, #20]
 800b2b2:	69ba      	ldr	r2, [r7, #24]
 800b2b4:	e841 2300 	strex	r3, r2, [r1]
 800b2b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1e6      	bne.n	800b28e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b2d4:	bf00      	nop
 800b2d6:	3754      	adds	r7, #84	@ 0x54
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f7ff f99a 	bl	800a638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b304:	bf00      	nop
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b08f      	sub	sp, #60	@ 0x3c
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b31a:	2b21      	cmp	r3, #33	@ 0x21
 800b31c:	d14c      	bne.n	800b3b8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b324:	b29b      	uxth	r3, r3
 800b326:	2b00      	cmp	r3, #0
 800b328:	d132      	bne.n	800b390 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b330:	6a3b      	ldr	r3, [r7, #32]
 800b332:	e853 3f00 	ldrex	r3, [r3]
 800b336:	61fb      	str	r3, [r7, #28]
   return(result);
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b33e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	461a      	mov	r2, r3
 800b346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b34a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b34e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b350:	e841 2300 	strex	r3, r2, [r1]
 800b354:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1e6      	bne.n	800b32a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	e853 3f00 	ldrex	r3, [r3]
 800b368:	60bb      	str	r3, [r7, #8]
   return(result);
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b370:	633b      	str	r3, [r7, #48]	@ 0x30
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	461a      	mov	r2, r3
 800b378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37a:	61bb      	str	r3, [r7, #24]
 800b37c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37e:	6979      	ldr	r1, [r7, #20]
 800b380:	69ba      	ldr	r2, [r7, #24]
 800b382:	e841 2300 	strex	r3, r2, [r1]
 800b386:	613b      	str	r3, [r7, #16]
   return(result);
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1e6      	bne.n	800b35c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b38e:	e013      	b.n	800b3b8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b394:	781a      	ldrb	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3a0:	1c5a      	adds	r2, r3, #1
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800b3b8:	bf00      	nop
 800b3ba:	373c      	adds	r7, #60	@ 0x3c
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b091      	sub	sp, #68	@ 0x44
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3d2:	2b21      	cmp	r3, #33	@ 0x21
 800b3d4:	d151      	bne.n	800b47a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d132      	bne.n	800b448 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ea:	e853 3f00 	ldrex	r3, [r3]
 800b3ee:	623b      	str	r3, [r7, #32]
   return(result);
 800b3f0:	6a3b      	ldr	r3, [r7, #32]
 800b3f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b3f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b400:	633b      	str	r3, [r7, #48]	@ 0x30
 800b402:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b404:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b408:	e841 2300 	strex	r3, r2, [r1]
 800b40c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1e6      	bne.n	800b3e2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	e853 3f00 	ldrex	r3, [r3]
 800b420:	60fb      	str	r3, [r7, #12]
   return(result);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b428:	637b      	str	r3, [r7, #52]	@ 0x34
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	461a      	mov	r2, r3
 800b430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b432:	61fb      	str	r3, [r7, #28]
 800b434:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b436:	69b9      	ldr	r1, [r7, #24]
 800b438:	69fa      	ldr	r2, [r7, #28]
 800b43a:	e841 2300 	strex	r3, r2, [r1]
 800b43e:	617b      	str	r3, [r7, #20]
   return(result);
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1e6      	bne.n	800b414 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b446:	e018      	b.n	800b47a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b44e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b450:	881b      	ldrh	r3, [r3, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b45c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b462:	1c9a      	adds	r2, r3, #2
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b46e:	b29b      	uxth	r3, r3
 800b470:	3b01      	subs	r3, #1
 800b472:	b29a      	uxth	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800b47a:	bf00      	nop
 800b47c:	3744      	adds	r7, #68	@ 0x44
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr

0800b486 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b486:	b480      	push	{r7}
 800b488:	b091      	sub	sp, #68	@ 0x44
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b494:	2b21      	cmp	r3, #33	@ 0x21
 800b496:	d160      	bne.n	800b55a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b49e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b4a0:	e057      	b.n	800b552 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d133      	bne.n	800b516 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3308      	adds	r3, #8
 800b4b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b8:	e853 3f00 	ldrex	r3, [r3]
 800b4bc:	623b      	str	r3, [r7, #32]
   return(result);
 800b4be:	6a3b      	ldr	r3, [r7, #32]
 800b4c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b4c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3308      	adds	r3, #8
 800b4cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800b4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4d6:	e841 2300 	strex	r3, r2, [r1]
 800b4da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1e5      	bne.n	800b4ae <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	e853 3f00 	ldrex	r3, [r3]
 800b4ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b500:	61fb      	str	r3, [r7, #28]
 800b502:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b504:	69b9      	ldr	r1, [r7, #24]
 800b506:	69fa      	ldr	r2, [r7, #28]
 800b508:	e841 2300 	strex	r3, r2, [r1]
 800b50c:	617b      	str	r3, [r7, #20]
   return(result);
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1e6      	bne.n	800b4e2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b514:	e021      	b.n	800b55a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	69db      	ldr	r3, [r3, #28]
 800b51c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b520:	2b00      	cmp	r3, #0
 800b522:	d013      	beq.n	800b54c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b528:	781a      	ldrb	r2, [r3, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b540:	b29b      	uxth	r3, r3
 800b542:	3b01      	subs	r3, #1
 800b544:	b29a      	uxth	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b54c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b54e:	3b01      	subs	r3, #1
 800b550:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b552:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1a4      	bne.n	800b4a2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b558:	e7ff      	b.n	800b55a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800b55a:	bf00      	nop
 800b55c:	3744      	adds	r7, #68	@ 0x44
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b566:	b480      	push	{r7}
 800b568:	b091      	sub	sp, #68	@ 0x44
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b574:	2b21      	cmp	r3, #33	@ 0x21
 800b576:	d165      	bne.n	800b644 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b57e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b580:	e05c      	b.n	800b63c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b588:	b29b      	uxth	r3, r3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d133      	bne.n	800b5f6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3308      	adds	r3, #8
 800b594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b596:	6a3b      	ldr	r3, [r7, #32]
 800b598:	e853 3f00 	ldrex	r3, [r3]
 800b59c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b5a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	3308      	adds	r3, #8
 800b5ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b5ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b5b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b5b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5b6:	e841 2300 	strex	r3, r2, [r1]
 800b5ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1e5      	bne.n	800b58e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	e853 3f00 	ldrex	r3, [r3]
 800b5ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e0:	61bb      	str	r3, [r7, #24]
 800b5e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e4:	6979      	ldr	r1, [r7, #20]
 800b5e6:	69ba      	ldr	r2, [r7, #24]
 800b5e8:	e841 2300 	strex	r3, r2, [r1]
 800b5ec:	613b      	str	r3, [r7, #16]
   return(result);
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1e6      	bne.n	800b5c2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b5f4:	e026      	b.n	800b644 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	69db      	ldr	r3, [r3, #28]
 800b5fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b600:	2b00      	cmp	r3, #0
 800b602:	d018      	beq.n	800b636 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b608:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	461a      	mov	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b618:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b61e:	1c9a      	adds	r2, r3, #2
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	3b01      	subs	r3, #1
 800b62e:	b29a      	uxth	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b636:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b638:	3b01      	subs	r3, #1
 800b63a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b63c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d19f      	bne.n	800b582 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b642:	e7ff      	b.n	800b644 <UART_TxISR_16BIT_FIFOEN+0xde>
 800b644:	bf00      	nop
 800b646:	3744      	adds	r7, #68	@ 0x44
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b088      	sub	sp, #32
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	e853 3f00 	ldrex	r3, [r3]
 800b664:	60bb      	str	r3, [r7, #8]
   return(result);
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b66c:	61fb      	str	r3, [r7, #28]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	461a      	mov	r2, r3
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	61bb      	str	r3, [r7, #24]
 800b678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67a:	6979      	ldr	r1, [r7, #20]
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	e841 2300 	strex	r3, r2, [r1]
 800b682:	613b      	str	r3, [r7, #16]
   return(result);
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1e6      	bne.n	800b658 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2220      	movs	r2, #32
 800b68e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7fe ffc3 	bl	800a624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b69e:	bf00      	nop
 800b6a0:	3720      	adds	r7, #32
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b09c      	sub	sp, #112	@ 0x70
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b6b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6c0:	2b22      	cmp	r3, #34	@ 0x22
 800b6c2:	f040 80be 	bne.w	800b842 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b6d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b6d4:	b2d9      	uxtb	r1, r3
 800b6d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b6da:	b2da      	uxtb	r2, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6e0:	400a      	ands	r2, r1
 800b6e2:	b2d2      	uxtb	r2, r2
 800b6e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	b29a      	uxth	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b708:	b29b      	uxth	r3, r3
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	f040 80a1 	bne.w	800b852 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b718:	e853 3f00 	ldrex	r3, [r3]
 800b71c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b71e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b724:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b72e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b730:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b736:	e841 2300 	strex	r3, r2, [r1]
 800b73a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b73c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1e6      	bne.n	800b710 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	3308      	adds	r3, #8
 800b748:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74c:	e853 3f00 	ldrex	r3, [r3]
 800b750:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b754:	f023 0301 	bic.w	r3, r3, #1
 800b758:	667b      	str	r3, [r7, #100]	@ 0x64
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	3308      	adds	r3, #8
 800b760:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b762:	647a      	str	r2, [r7, #68]	@ 0x44
 800b764:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b766:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b76a:	e841 2300 	strex	r3, r2, [r1]
 800b76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b772:	2b00      	cmp	r3, #0
 800b774:	d1e5      	bne.n	800b742 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2220      	movs	r2, #32
 800b77a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a33      	ldr	r2, [pc, #204]	@ (800b85c <UART_RxISR_8BIT+0x1b4>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d01f      	beq.n	800b7d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d018      	beq.n	800b7d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7aa:	e853 3f00 	ldrex	r3, [r3]
 800b7ae:	623b      	str	r3, [r7, #32]
   return(result);
 800b7b0:	6a3b      	ldr	r3, [r7, #32]
 800b7b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b7b6:	663b      	str	r3, [r7, #96]	@ 0x60
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b7c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7c8:	e841 2300 	strex	r3, r2, [r1]
 800b7cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1e6      	bne.n	800b7a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d12e      	bne.n	800b83a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	e853 3f00 	ldrex	r3, [r3]
 800b7ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f023 0310 	bic.w	r3, r3, #16
 800b7f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b800:	61fb      	str	r3, [r7, #28]
 800b802:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b804:	69b9      	ldr	r1, [r7, #24]
 800b806:	69fa      	ldr	r2, [r7, #28]
 800b808:	e841 2300 	strex	r3, r2, [r1]
 800b80c:	617b      	str	r3, [r7, #20]
   return(result);
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1e6      	bne.n	800b7e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	69db      	ldr	r3, [r3, #28]
 800b81a:	f003 0310 	and.w	r3, r3, #16
 800b81e:	2b10      	cmp	r3, #16
 800b820:	d103      	bne.n	800b82a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2210      	movs	r2, #16
 800b828:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b830:	4619      	mov	r1, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f7fe ff0a 	bl	800a64c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b838:	e00b      	b.n	800b852 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7f5 fd76 	bl	800132c <HAL_UART_RxCpltCallback>
}
 800b840:	e007      	b.n	800b852 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	699a      	ldr	r2, [r3, #24]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f042 0208 	orr.w	r2, r2, #8
 800b850:	619a      	str	r2, [r3, #24]
}
 800b852:	bf00      	nop
 800b854:	3770      	adds	r7, #112	@ 0x70
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	40008000 	.word	0x40008000

0800b860 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b09c      	sub	sp, #112	@ 0x70
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b86e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b878:	2b22      	cmp	r3, #34	@ 0x22
 800b87a:	f040 80be 	bne.w	800b9fa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b884:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b88c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b88e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b892:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b896:	4013      	ands	r3, r2
 800b898:	b29a      	uxth	r2, r3
 800b89a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b89c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8a2:	1c9a      	adds	r2, r3, #2
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f040 80a1 	bne.w	800ba0a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8d0:	e853 3f00 	ldrex	r3, [r3]
 800b8d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b8d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8dc:	667b      	str	r3, [r7, #100]	@ 0x64
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8e6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b8ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b8ee:	e841 2300 	strex	r3, r2, [r1]
 800b8f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b8f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1e6      	bne.n	800b8c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	3308      	adds	r3, #8
 800b900:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b904:	e853 3f00 	ldrex	r3, [r3]
 800b908:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90c:	f023 0301 	bic.w	r3, r3, #1
 800b910:	663b      	str	r3, [r7, #96]	@ 0x60
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3308      	adds	r3, #8
 800b918:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b91a:	643a      	str	r2, [r7, #64]	@ 0x40
 800b91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b920:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b922:	e841 2300 	strex	r3, r2, [r1]
 800b926:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1e5      	bne.n	800b8fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2220      	movs	r2, #32
 800b932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a33      	ldr	r2, [pc, #204]	@ (800ba14 <UART_RxISR_16BIT+0x1b4>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d01f      	beq.n	800b98c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d018      	beq.n	800b98c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	e853 3f00 	ldrex	r3, [r3]
 800b966:	61fb      	str	r3, [r7, #28]
   return(result);
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b96e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	461a      	mov	r2, r3
 800b976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b97a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b97e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b980:	e841 2300 	strex	r3, r2, [r1]
 800b984:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1e6      	bne.n	800b95a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b990:	2b01      	cmp	r3, #1
 800b992:	d12e      	bne.n	800b9f2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	e853 3f00 	ldrex	r3, [r3]
 800b9a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	f023 0310 	bic.w	r3, r3, #16
 800b9ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9b8:	61bb      	str	r3, [r7, #24]
 800b9ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9bc:	6979      	ldr	r1, [r7, #20]
 800b9be:	69ba      	ldr	r2, [r7, #24]
 800b9c0:	e841 2300 	strex	r3, r2, [r1]
 800b9c4:	613b      	str	r3, [r7, #16]
   return(result);
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1e6      	bne.n	800b99a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	69db      	ldr	r3, [r3, #28]
 800b9d2:	f003 0310 	and.w	r3, r3, #16
 800b9d6:	2b10      	cmp	r3, #16
 800b9d8:	d103      	bne.n	800b9e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2210      	movs	r2, #16
 800b9e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7fe fe2e 	bl	800a64c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b9f0:	e00b      	b.n	800ba0a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f7f5 fc9a 	bl	800132c <HAL_UART_RxCpltCallback>
}
 800b9f8:	e007      	b.n	800ba0a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	699a      	ldr	r2, [r3, #24]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f042 0208 	orr.w	r2, r2, #8
 800ba08:	619a      	str	r2, [r3, #24]
}
 800ba0a:	bf00      	nop
 800ba0c:	3770      	adds	r7, #112	@ 0x70
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	40008000 	.word	0x40008000

0800ba18 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b0ac      	sub	sp, #176	@ 0xb0
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ba26:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	69db      	ldr	r3, [r3, #28]
 800ba30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba4e:	2b22      	cmp	r3, #34	@ 0x22
 800ba50:	f040 8183 	bne.w	800bd5a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ba5a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ba5e:	e126      	b.n	800bcae <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba66:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ba6a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ba6e:	b2d9      	uxtb	r1, r3
 800ba70:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba7a:	400a      	ands	r2, r1
 800ba7c:	b2d2      	uxtb	r2, r2
 800ba7e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba84:	1c5a      	adds	r2, r3, #1
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	3b01      	subs	r3, #1
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	69db      	ldr	r3, [r3, #28]
 800baa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800baa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800baaa:	f003 0307 	and.w	r3, r3, #7
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d053      	beq.n	800bb5a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bab6:	f003 0301 	and.w	r3, r3, #1
 800baba:	2b00      	cmp	r3, #0
 800babc:	d011      	beq.n	800bae2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800babe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00b      	beq.n	800bae2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2201      	movs	r2, #1
 800bad0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bad8:	f043 0201 	orr.w	r2, r3, #1
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bae6:	f003 0302 	and.w	r3, r3, #2
 800baea:	2b00      	cmp	r3, #0
 800baec:	d011      	beq.n	800bb12 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800baee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00b      	beq.n	800bb12 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2202      	movs	r2, #2
 800bb00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb08:	f043 0204 	orr.w	r2, r3, #4
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb16:	f003 0304 	and.w	r3, r3, #4
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d011      	beq.n	800bb42 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bb1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bb22:	f003 0301 	and.w	r3, r3, #1
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00b      	beq.n	800bb42 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2204      	movs	r2, #4
 800bb30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb38:	f043 0202 	orr.w	r2, r3, #2
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d006      	beq.n	800bb5a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7fe fd73 	bl	800a638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f040 80a3 	bne.w	800bcae <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb70:	e853 3f00 	ldrex	r3, [r3]
 800bb74:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800bb76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	461a      	mov	r2, r3
 800bb86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bb8c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800bb90:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800bb92:	e841 2300 	strex	r3, r2, [r1]
 800bb96:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800bb98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1e4      	bne.n	800bb68 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	3308      	adds	r3, #8
 800bba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bba8:	e853 3f00 	ldrex	r3, [r3]
 800bbac:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800bbae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bbb4:	f023 0301 	bic.w	r3, r3, #1
 800bbb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3308      	adds	r3, #8
 800bbc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bbc6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800bbc8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbca:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800bbcc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bbce:	e841 2300 	strex	r3, r2, [r1]
 800bbd2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800bbd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1e1      	bne.n	800bb9e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2220      	movs	r2, #32
 800bbde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a60      	ldr	r2, [pc, #384]	@ (800bd74 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d021      	beq.n	800bc3c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d01a      	beq.n	800bc3c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc0e:	e853 3f00 	ldrex	r3, [r3]
 800bc12:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bc14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bc1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	461a      	mov	r2, r3
 800bc24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bc28:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc2a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bc2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc30:	e841 2300 	strex	r3, r2, [r1]
 800bc34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bc36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1e4      	bne.n	800bc06 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d130      	bne.n	800bca6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc52:	e853 3f00 	ldrex	r3, [r3]
 800bc56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc5a:	f023 0310 	bic.w	r3, r3, #16
 800bc5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	461a      	mov	r2, r3
 800bc68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc6c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc74:	e841 2300 	strex	r3, r2, [r1]
 800bc78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1e4      	bne.n	800bc4a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	69db      	ldr	r3, [r3, #28]
 800bc86:	f003 0310 	and.w	r3, r3, #16
 800bc8a:	2b10      	cmp	r3, #16
 800bc8c:	d103      	bne.n	800bc96 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2210      	movs	r2, #16
 800bc94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f7fe fcd4 	bl	800a64c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800bca4:	e00e      	b.n	800bcc4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f7f5 fb40 	bl	800132c <HAL_UART_RxCpltCallback>
        break;
 800bcac:	e00a      	b.n	800bcc4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bcae:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d006      	beq.n	800bcc4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800bcb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcba:	f003 0320 	and.w	r3, r3, #32
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f47f aece 	bne.w	800ba60 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcca:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bcce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d049      	beq.n	800bd6a <UART_RxISR_8BIT_FIFOEN+0x352>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bcdc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d242      	bcs.n	800bd6a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	3308      	adds	r3, #8
 800bcea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcec:	6a3b      	ldr	r3, [r7, #32]
 800bcee:	e853 3f00 	ldrex	r3, [r3]
 800bcf2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bcfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	3308      	adds	r3, #8
 800bd04:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800bd08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bd0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd10:	e841 2300 	strex	r3, r2, [r1]
 800bd14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1e3      	bne.n	800bce4 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a16      	ldr	r2, [pc, #88]	@ (800bd78 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800bd20:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	e853 3f00 	ldrex	r3, [r3]
 800bd2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	f043 0320 	orr.w	r3, r3, #32
 800bd36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bd44:	61bb      	str	r3, [r7, #24]
 800bd46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd48:	6979      	ldr	r1, [r7, #20]
 800bd4a:	69ba      	ldr	r2, [r7, #24]
 800bd4c:	e841 2300 	strex	r3, r2, [r1]
 800bd50:	613b      	str	r3, [r7, #16]
   return(result);
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1e4      	bne.n	800bd22 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd58:	e007      	b.n	800bd6a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	699a      	ldr	r2, [r3, #24]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f042 0208 	orr.w	r2, r2, #8
 800bd68:	619a      	str	r2, [r3, #24]
}
 800bd6a:	bf00      	nop
 800bd6c:	37b0      	adds	r7, #176	@ 0xb0
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	40008000 	.word	0x40008000
 800bd78:	0800b6a9 	.word	0x0800b6a9

0800bd7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b0ae      	sub	sp, #184	@ 0xb8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bd8a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	69db      	ldr	r3, [r3, #28]
 800bd94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bdb2:	2b22      	cmp	r3, #34	@ 0x22
 800bdb4:	f040 8187 	bne.w	800c0c6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bdbe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bdc2:	e12a      	b.n	800c01a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdca:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800bdd6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800bdda:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800bdde:	4013      	ands	r3, r2
 800bde0:	b29a      	uxth	r2, r3
 800bde2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bde6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdec:	1c9a      	adds	r2, r3, #2
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	69db      	ldr	r3, [r3, #28]
 800be0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800be0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be12:	f003 0307 	and.w	r3, r3, #7
 800be16:	2b00      	cmp	r3, #0
 800be18:	d053      	beq.n	800bec2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be1e:	f003 0301 	and.w	r3, r3, #1
 800be22:	2b00      	cmp	r3, #0
 800be24:	d011      	beq.n	800be4a <UART_RxISR_16BIT_FIFOEN+0xce>
 800be26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00b      	beq.n	800be4a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2201      	movs	r2, #1
 800be38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be40:	f043 0201 	orr.w	r2, r3, #1
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be4e:	f003 0302 	and.w	r3, r3, #2
 800be52:	2b00      	cmp	r3, #0
 800be54:	d011      	beq.n	800be7a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800be56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00b      	beq.n	800be7a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2202      	movs	r2, #2
 800be68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be70:	f043 0204 	orr.w	r2, r3, #4
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be7e:	f003 0304 	and.w	r3, r3, #4
 800be82:	2b00      	cmp	r3, #0
 800be84:	d011      	beq.n	800beaa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800be86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be8a:	f003 0301 	and.w	r3, r3, #1
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00b      	beq.n	800beaa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2204      	movs	r2, #4
 800be98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bea0:	f043 0202 	orr.w	r2, r3, #2
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d006      	beq.n	800bec2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7fe fbbf 	bl	800a638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bec8:	b29b      	uxth	r3, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	f040 80a5 	bne.w	800c01a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bed8:	e853 3f00 	ldrex	r3, [r3]
 800bedc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bede:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	461a      	mov	r2, r3
 800beee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bef2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bef6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800befa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800befe:	e841 2300 	strex	r3, r2, [r1]
 800bf02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bf04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1e2      	bne.n	800bed0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3308      	adds	r3, #8
 800bf10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf14:	e853 3f00 	ldrex	r3, [r3]
 800bf18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bf1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf20:	f023 0301 	bic.w	r3, r3, #1
 800bf24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bf32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bf34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bf38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bf3a:	e841 2300 	strex	r3, r2, [r1]
 800bf3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bf40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1e1      	bne.n	800bf0a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2220      	movs	r2, #32
 800bf4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a60      	ldr	r2, [pc, #384]	@ (800c0e0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d021      	beq.n	800bfa8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d01a      	beq.n	800bfa8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf7a:	e853 3f00 	ldrex	r3, [r3]
 800bf7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bf80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bf86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bf94:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf96:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf9c:	e841 2300 	strex	r3, r2, [r1]
 800bfa0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bfa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1e4      	bne.n	800bf72 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d130      	bne.n	800c012 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfbe:	e853 3f00 	ldrex	r3, [r3]
 800bfc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfc6:	f023 0310 	bic.w	r3, r3, #16
 800bfca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bfd8:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bfde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfe0:	e841 2300 	strex	r3, r2, [r1]
 800bfe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bfe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1e4      	bne.n	800bfb6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	69db      	ldr	r3, [r3, #28]
 800bff2:	f003 0310 	and.w	r3, r3, #16
 800bff6:	2b10      	cmp	r3, #16
 800bff8:	d103      	bne.n	800c002 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2210      	movs	r2, #16
 800c000:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c008:	4619      	mov	r1, r3
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7fe fb1e 	bl	800a64c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c010:	e00e      	b.n	800c030 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7f5 f98a 	bl	800132c <HAL_UART_RxCpltCallback>
        break;
 800c018:	e00a      	b.n	800c030 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c01a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d006      	beq.n	800c030 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800c022:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c026:	f003 0320 	and.w	r3, r3, #32
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f47f aeca 	bne.w	800bdc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c036:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c03a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d049      	beq.n	800c0d6 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c048:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d242      	bcs.n	800c0d6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	3308      	adds	r3, #8
 800c056:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05a:	e853 3f00 	ldrex	r3, [r3]
 800c05e:	623b      	str	r3, [r7, #32]
   return(result);
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c066:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3308      	adds	r3, #8
 800c070:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c074:	633a      	str	r2, [r7, #48]	@ 0x30
 800c076:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c078:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c07a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c07c:	e841 2300 	strex	r3, r2, [r1]
 800c080:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1e3      	bne.n	800c050 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	4a16      	ldr	r2, [pc, #88]	@ (800c0e4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800c08c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	e853 3f00 	ldrex	r3, [r3]
 800c09a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f043 0320 	orr.w	r3, r3, #32
 800c0a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c0b0:	61fb      	str	r3, [r7, #28]
 800c0b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b4:	69b9      	ldr	r1, [r7, #24]
 800c0b6:	69fa      	ldr	r2, [r7, #28]
 800c0b8:	e841 2300 	strex	r3, r2, [r1]
 800c0bc:	617b      	str	r3, [r7, #20]
   return(result);
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d1e4      	bne.n	800c08e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c0c4:	e007      	b.n	800c0d6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	699a      	ldr	r2, [r3, #24]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f042 0208 	orr.w	r2, r2, #8
 800c0d4:	619a      	str	r2, [r3, #24]
}
 800c0d6:	bf00      	nop
 800c0d8:	37b8      	adds	r7, #184	@ 0xb8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	40008000 	.word	0x40008000
 800c0e4:	0800b861 	.word	0x0800b861

0800c0e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c0f0:	bf00      	nop
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c124:	b480      	push	{r7}
 800c126:	b085      	sub	sp, #20
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c132:	2b01      	cmp	r3, #1
 800c134:	d101      	bne.n	800c13a <HAL_UARTEx_DisableFifoMode+0x16>
 800c136:	2302      	movs	r3, #2
 800c138:	e027      	b.n	800c18a <HAL_UARTEx_DisableFifoMode+0x66>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2201      	movs	r2, #1
 800c13e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2224      	movs	r2, #36	@ 0x24
 800c146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f022 0201 	bic.w	r2, r2, #1
 800c160:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c168:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2220      	movs	r2, #32
 800c17c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3714      	adds	r7, #20
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b084      	sub	sp, #16
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d101      	bne.n	800c1ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	e02d      	b.n	800c20a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2224      	movs	r2, #36	@ 0x24
 800c1ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f022 0201 	bic.w	r2, r2, #1
 800c1d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	430a      	orrs	r2, r1
 800c1e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f850 	bl	800c290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2220      	movs	r2, #32
 800c1fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b084      	sub	sp, #16
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c222:	2b01      	cmp	r3, #1
 800c224:	d101      	bne.n	800c22a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c226:	2302      	movs	r3, #2
 800c228:	e02d      	b.n	800c286 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2224      	movs	r2, #36	@ 0x24
 800c236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f022 0201 	bic.w	r2, r2, #1
 800c250:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	683a      	ldr	r2, [r7, #0]
 800c262:	430a      	orrs	r2, r1
 800c264:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f812 	bl	800c290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2220      	movs	r2, #32
 800c278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
	...

0800c290 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d108      	bne.n	800c2b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c2b0:	e031      	b.n	800c316 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c2b2:	2308      	movs	r3, #8
 800c2b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c2b6:	2308      	movs	r3, #8
 800c2b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	0e5b      	lsrs	r3, r3, #25
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	f003 0307 	and.w	r3, r3, #7
 800c2c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	0f5b      	lsrs	r3, r3, #29
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	f003 0307 	and.w	r3, r3, #7
 800c2d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2da:	7bbb      	ldrb	r3, [r7, #14]
 800c2dc:	7b3a      	ldrb	r2, [r7, #12]
 800c2de:	4911      	ldr	r1, [pc, #68]	@ (800c324 <UARTEx_SetNbDataToProcess+0x94>)
 800c2e0:	5c8a      	ldrb	r2, [r1, r2]
 800c2e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c2e6:	7b3a      	ldrb	r2, [r7, #12]
 800c2e8:	490f      	ldr	r1, [pc, #60]	@ (800c328 <UARTEx_SetNbDataToProcess+0x98>)
 800c2ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2f0:	b29a      	uxth	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
 800c2fa:	7b7a      	ldrb	r2, [r7, #13]
 800c2fc:	4909      	ldr	r1, [pc, #36]	@ (800c324 <UARTEx_SetNbDataToProcess+0x94>)
 800c2fe:	5c8a      	ldrb	r2, [r1, r2]
 800c300:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c304:	7b7a      	ldrb	r2, [r7, #13]
 800c306:	4908      	ldr	r1, [pc, #32]	@ (800c328 <UARTEx_SetNbDataToProcess+0x98>)
 800c308:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c30a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c30e:	b29a      	uxth	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c316:	bf00      	nop
 800c318:	3714      	adds	r7, #20
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop
 800c324:	0800f690 	.word	0x0800f690
 800c328:	0800f698 	.word	0x0800f698

0800c32c <atof>:
 800c32c:	2100      	movs	r1, #0
 800c32e:	f000 be03 	b.w	800cf38 <strtod>

0800c332 <sulp>:
 800c332:	b570      	push	{r4, r5, r6, lr}
 800c334:	4604      	mov	r4, r0
 800c336:	460d      	mov	r5, r1
 800c338:	ec45 4b10 	vmov	d0, r4, r5
 800c33c:	4616      	mov	r6, r2
 800c33e:	f001 ff8b 	bl	800e258 <__ulp>
 800c342:	ec51 0b10 	vmov	r0, r1, d0
 800c346:	b17e      	cbz	r6, 800c368 <sulp+0x36>
 800c348:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c34c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c350:	2b00      	cmp	r3, #0
 800c352:	dd09      	ble.n	800c368 <sulp+0x36>
 800c354:	051b      	lsls	r3, r3, #20
 800c356:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c35a:	2400      	movs	r4, #0
 800c35c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c360:	4622      	mov	r2, r4
 800c362:	462b      	mov	r3, r5
 800c364:	f7f4 f970 	bl	8000648 <__aeabi_dmul>
 800c368:	ec41 0b10 	vmov	d0, r0, r1
 800c36c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c370 <_strtod_l>:
 800c370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c374:	b09f      	sub	sp, #124	@ 0x7c
 800c376:	460c      	mov	r4, r1
 800c378:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c37a:	2200      	movs	r2, #0
 800c37c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c37e:	9005      	str	r0, [sp, #20]
 800c380:	f04f 0a00 	mov.w	sl, #0
 800c384:	f04f 0b00 	mov.w	fp, #0
 800c388:	460a      	mov	r2, r1
 800c38a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c38c:	7811      	ldrb	r1, [r2, #0]
 800c38e:	292b      	cmp	r1, #43	@ 0x2b
 800c390:	d04a      	beq.n	800c428 <_strtod_l+0xb8>
 800c392:	d838      	bhi.n	800c406 <_strtod_l+0x96>
 800c394:	290d      	cmp	r1, #13
 800c396:	d832      	bhi.n	800c3fe <_strtod_l+0x8e>
 800c398:	2908      	cmp	r1, #8
 800c39a:	d832      	bhi.n	800c402 <_strtod_l+0x92>
 800c39c:	2900      	cmp	r1, #0
 800c39e:	d03b      	beq.n	800c418 <_strtod_l+0xa8>
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c3a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c3a6:	782a      	ldrb	r2, [r5, #0]
 800c3a8:	2a30      	cmp	r2, #48	@ 0x30
 800c3aa:	f040 80b3 	bne.w	800c514 <_strtod_l+0x1a4>
 800c3ae:	786a      	ldrb	r2, [r5, #1]
 800c3b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c3b4:	2a58      	cmp	r2, #88	@ 0x58
 800c3b6:	d16e      	bne.n	800c496 <_strtod_l+0x126>
 800c3b8:	9302      	str	r3, [sp, #8]
 800c3ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3bc:	9301      	str	r3, [sp, #4]
 800c3be:	ab1a      	add	r3, sp, #104	@ 0x68
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	4a8e      	ldr	r2, [pc, #568]	@ (800c5fc <_strtod_l+0x28c>)
 800c3c4:	9805      	ldr	r0, [sp, #20]
 800c3c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c3c8:	a919      	add	r1, sp, #100	@ 0x64
 800c3ca:	f001 f83f 	bl	800d44c <__gethex>
 800c3ce:	f010 060f 	ands.w	r6, r0, #15
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	d005      	beq.n	800c3e2 <_strtod_l+0x72>
 800c3d6:	2e06      	cmp	r6, #6
 800c3d8:	d128      	bne.n	800c42c <_strtod_l+0xbc>
 800c3da:	3501      	adds	r5, #1
 800c3dc:	2300      	movs	r3, #0
 800c3de:	9519      	str	r5, [sp, #100]	@ 0x64
 800c3e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f040 858e 	bne.w	800cf06 <_strtod_l+0xb96>
 800c3ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3ec:	b1cb      	cbz	r3, 800c422 <_strtod_l+0xb2>
 800c3ee:	4652      	mov	r2, sl
 800c3f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c3f4:	ec43 2b10 	vmov	d0, r2, r3
 800c3f8:	b01f      	add	sp, #124	@ 0x7c
 800c3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fe:	2920      	cmp	r1, #32
 800c400:	d1ce      	bne.n	800c3a0 <_strtod_l+0x30>
 800c402:	3201      	adds	r2, #1
 800c404:	e7c1      	b.n	800c38a <_strtod_l+0x1a>
 800c406:	292d      	cmp	r1, #45	@ 0x2d
 800c408:	d1ca      	bne.n	800c3a0 <_strtod_l+0x30>
 800c40a:	2101      	movs	r1, #1
 800c40c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c40e:	1c51      	adds	r1, r2, #1
 800c410:	9119      	str	r1, [sp, #100]	@ 0x64
 800c412:	7852      	ldrb	r2, [r2, #1]
 800c414:	2a00      	cmp	r2, #0
 800c416:	d1c5      	bne.n	800c3a4 <_strtod_l+0x34>
 800c418:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c41a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f040 8570 	bne.w	800cf02 <_strtod_l+0xb92>
 800c422:	4652      	mov	r2, sl
 800c424:	465b      	mov	r3, fp
 800c426:	e7e5      	b.n	800c3f4 <_strtod_l+0x84>
 800c428:	2100      	movs	r1, #0
 800c42a:	e7ef      	b.n	800c40c <_strtod_l+0x9c>
 800c42c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c42e:	b13a      	cbz	r2, 800c440 <_strtod_l+0xd0>
 800c430:	2135      	movs	r1, #53	@ 0x35
 800c432:	a81c      	add	r0, sp, #112	@ 0x70
 800c434:	f002 f80a 	bl	800e44c <__copybits>
 800c438:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c43a:	9805      	ldr	r0, [sp, #20]
 800c43c:	f001 fbd8 	bl	800dbf0 <_Bfree>
 800c440:	3e01      	subs	r6, #1
 800c442:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c444:	2e04      	cmp	r6, #4
 800c446:	d806      	bhi.n	800c456 <_strtod_l+0xe6>
 800c448:	e8df f006 	tbb	[pc, r6]
 800c44c:	201d0314 	.word	0x201d0314
 800c450:	14          	.byte	0x14
 800c451:	00          	.byte	0x00
 800c452:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c456:	05e1      	lsls	r1, r4, #23
 800c458:	bf48      	it	mi
 800c45a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c45e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c462:	0d1b      	lsrs	r3, r3, #20
 800c464:	051b      	lsls	r3, r3, #20
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1bb      	bne.n	800c3e2 <_strtod_l+0x72>
 800c46a:	f000 fef7 	bl	800d25c <__errno>
 800c46e:	2322      	movs	r3, #34	@ 0x22
 800c470:	6003      	str	r3, [r0, #0]
 800c472:	e7b6      	b.n	800c3e2 <_strtod_l+0x72>
 800c474:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c478:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c47c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c480:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c484:	e7e7      	b.n	800c456 <_strtod_l+0xe6>
 800c486:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c604 <_strtod_l+0x294>
 800c48a:	e7e4      	b.n	800c456 <_strtod_l+0xe6>
 800c48c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c490:	f04f 3aff 	mov.w	sl, #4294967295
 800c494:	e7df      	b.n	800c456 <_strtod_l+0xe6>
 800c496:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c498:	1c5a      	adds	r2, r3, #1
 800c49a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c49c:	785b      	ldrb	r3, [r3, #1]
 800c49e:	2b30      	cmp	r3, #48	@ 0x30
 800c4a0:	d0f9      	beq.n	800c496 <_strtod_l+0x126>
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d09d      	beq.n	800c3e2 <_strtod_l+0x72>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	9308      	str	r3, [sp, #32]
 800c4b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4b4:	461f      	mov	r7, r3
 800c4b6:	220a      	movs	r2, #10
 800c4b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c4ba:	7805      	ldrb	r5, [r0, #0]
 800c4bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c4c0:	b2d9      	uxtb	r1, r3
 800c4c2:	2909      	cmp	r1, #9
 800c4c4:	d928      	bls.n	800c518 <_strtod_l+0x1a8>
 800c4c6:	494e      	ldr	r1, [pc, #312]	@ (800c600 <_strtod_l+0x290>)
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f000 fe6e 	bl	800d1aa <strncmp>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d032      	beq.n	800c538 <_strtod_l+0x1c8>
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	462a      	mov	r2, r5
 800c4d6:	4681      	mov	r9, r0
 800c4d8:	463d      	mov	r5, r7
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2a65      	cmp	r2, #101	@ 0x65
 800c4de:	d001      	beq.n	800c4e4 <_strtod_l+0x174>
 800c4e0:	2a45      	cmp	r2, #69	@ 0x45
 800c4e2:	d114      	bne.n	800c50e <_strtod_l+0x19e>
 800c4e4:	b91d      	cbnz	r5, 800c4ee <_strtod_l+0x17e>
 800c4e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4e8:	4302      	orrs	r2, r0
 800c4ea:	d095      	beq.n	800c418 <_strtod_l+0xa8>
 800c4ec:	2500      	movs	r5, #0
 800c4ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c4f0:	1c62      	adds	r2, r4, #1
 800c4f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4f4:	7862      	ldrb	r2, [r4, #1]
 800c4f6:	2a2b      	cmp	r2, #43	@ 0x2b
 800c4f8:	d077      	beq.n	800c5ea <_strtod_l+0x27a>
 800c4fa:	2a2d      	cmp	r2, #45	@ 0x2d
 800c4fc:	d07b      	beq.n	800c5f6 <_strtod_l+0x286>
 800c4fe:	f04f 0c00 	mov.w	ip, #0
 800c502:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c506:	2909      	cmp	r1, #9
 800c508:	f240 8082 	bls.w	800c610 <_strtod_l+0x2a0>
 800c50c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c50e:	f04f 0800 	mov.w	r8, #0
 800c512:	e0a2      	b.n	800c65a <_strtod_l+0x2ea>
 800c514:	2300      	movs	r3, #0
 800c516:	e7c7      	b.n	800c4a8 <_strtod_l+0x138>
 800c518:	2f08      	cmp	r7, #8
 800c51a:	bfd5      	itete	le
 800c51c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c51e:	9908      	ldrgt	r1, [sp, #32]
 800c520:	fb02 3301 	mlale	r3, r2, r1, r3
 800c524:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c528:	f100 0001 	add.w	r0, r0, #1
 800c52c:	bfd4      	ite	le
 800c52e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c530:	9308      	strgt	r3, [sp, #32]
 800c532:	3701      	adds	r7, #1
 800c534:	9019      	str	r0, [sp, #100]	@ 0x64
 800c536:	e7bf      	b.n	800c4b8 <_strtod_l+0x148>
 800c538:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c53a:	1c5a      	adds	r2, r3, #1
 800c53c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c53e:	785a      	ldrb	r2, [r3, #1]
 800c540:	b37f      	cbz	r7, 800c5a2 <_strtod_l+0x232>
 800c542:	4681      	mov	r9, r0
 800c544:	463d      	mov	r5, r7
 800c546:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c54a:	2b09      	cmp	r3, #9
 800c54c:	d912      	bls.n	800c574 <_strtod_l+0x204>
 800c54e:	2301      	movs	r3, #1
 800c550:	e7c4      	b.n	800c4dc <_strtod_l+0x16c>
 800c552:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c554:	1c5a      	adds	r2, r3, #1
 800c556:	9219      	str	r2, [sp, #100]	@ 0x64
 800c558:	785a      	ldrb	r2, [r3, #1]
 800c55a:	3001      	adds	r0, #1
 800c55c:	2a30      	cmp	r2, #48	@ 0x30
 800c55e:	d0f8      	beq.n	800c552 <_strtod_l+0x1e2>
 800c560:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c564:	2b08      	cmp	r3, #8
 800c566:	f200 84d3 	bhi.w	800cf10 <_strtod_l+0xba0>
 800c56a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c56c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c56e:	4681      	mov	r9, r0
 800c570:	2000      	movs	r0, #0
 800c572:	4605      	mov	r5, r0
 800c574:	3a30      	subs	r2, #48	@ 0x30
 800c576:	f100 0301 	add.w	r3, r0, #1
 800c57a:	d02a      	beq.n	800c5d2 <_strtod_l+0x262>
 800c57c:	4499      	add	r9, r3
 800c57e:	eb00 0c05 	add.w	ip, r0, r5
 800c582:	462b      	mov	r3, r5
 800c584:	210a      	movs	r1, #10
 800c586:	4563      	cmp	r3, ip
 800c588:	d10d      	bne.n	800c5a6 <_strtod_l+0x236>
 800c58a:	1c69      	adds	r1, r5, #1
 800c58c:	4401      	add	r1, r0
 800c58e:	4428      	add	r0, r5
 800c590:	2808      	cmp	r0, #8
 800c592:	dc16      	bgt.n	800c5c2 <_strtod_l+0x252>
 800c594:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c596:	230a      	movs	r3, #10
 800c598:	fb03 2300 	mla	r3, r3, r0, r2
 800c59c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c59e:	2300      	movs	r3, #0
 800c5a0:	e018      	b.n	800c5d4 <_strtod_l+0x264>
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	e7da      	b.n	800c55c <_strtod_l+0x1ec>
 800c5a6:	2b08      	cmp	r3, #8
 800c5a8:	f103 0301 	add.w	r3, r3, #1
 800c5ac:	dc03      	bgt.n	800c5b6 <_strtod_l+0x246>
 800c5ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c5b0:	434e      	muls	r6, r1
 800c5b2:	960a      	str	r6, [sp, #40]	@ 0x28
 800c5b4:	e7e7      	b.n	800c586 <_strtod_l+0x216>
 800c5b6:	2b10      	cmp	r3, #16
 800c5b8:	bfde      	ittt	le
 800c5ba:	9e08      	ldrle	r6, [sp, #32]
 800c5bc:	434e      	mulle	r6, r1
 800c5be:	9608      	strle	r6, [sp, #32]
 800c5c0:	e7e1      	b.n	800c586 <_strtod_l+0x216>
 800c5c2:	280f      	cmp	r0, #15
 800c5c4:	dceb      	bgt.n	800c59e <_strtod_l+0x22e>
 800c5c6:	9808      	ldr	r0, [sp, #32]
 800c5c8:	230a      	movs	r3, #10
 800c5ca:	fb03 2300 	mla	r3, r3, r0, r2
 800c5ce:	9308      	str	r3, [sp, #32]
 800c5d0:	e7e5      	b.n	800c59e <_strtod_l+0x22e>
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c5d6:	1c50      	adds	r0, r2, #1
 800c5d8:	9019      	str	r0, [sp, #100]	@ 0x64
 800c5da:	7852      	ldrb	r2, [r2, #1]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	460d      	mov	r5, r1
 800c5e0:	e7b1      	b.n	800c546 <_strtod_l+0x1d6>
 800c5e2:	f04f 0900 	mov.w	r9, #0
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e77d      	b.n	800c4e6 <_strtod_l+0x176>
 800c5ea:	f04f 0c00 	mov.w	ip, #0
 800c5ee:	1ca2      	adds	r2, r4, #2
 800c5f0:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5f2:	78a2      	ldrb	r2, [r4, #2]
 800c5f4:	e785      	b.n	800c502 <_strtod_l+0x192>
 800c5f6:	f04f 0c01 	mov.w	ip, #1
 800c5fa:	e7f8      	b.n	800c5ee <_strtod_l+0x27e>
 800c5fc:	0800f6c4 	.word	0x0800f6c4
 800c600:	0800f6a0 	.word	0x0800f6a0
 800c604:	7ff00000 	.word	0x7ff00000
 800c608:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c60a:	1c51      	adds	r1, r2, #1
 800c60c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c60e:	7852      	ldrb	r2, [r2, #1]
 800c610:	2a30      	cmp	r2, #48	@ 0x30
 800c612:	d0f9      	beq.n	800c608 <_strtod_l+0x298>
 800c614:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c618:	2908      	cmp	r1, #8
 800c61a:	f63f af78 	bhi.w	800c50e <_strtod_l+0x19e>
 800c61e:	3a30      	subs	r2, #48	@ 0x30
 800c620:	920e      	str	r2, [sp, #56]	@ 0x38
 800c622:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c624:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c626:	f04f 080a 	mov.w	r8, #10
 800c62a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c62c:	1c56      	adds	r6, r2, #1
 800c62e:	9619      	str	r6, [sp, #100]	@ 0x64
 800c630:	7852      	ldrb	r2, [r2, #1]
 800c632:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c636:	f1be 0f09 	cmp.w	lr, #9
 800c63a:	d939      	bls.n	800c6b0 <_strtod_l+0x340>
 800c63c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c63e:	1a76      	subs	r6, r6, r1
 800c640:	2e08      	cmp	r6, #8
 800c642:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c646:	dc03      	bgt.n	800c650 <_strtod_l+0x2e0>
 800c648:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c64a:	4588      	cmp	r8, r1
 800c64c:	bfa8      	it	ge
 800c64e:	4688      	movge	r8, r1
 800c650:	f1bc 0f00 	cmp.w	ip, #0
 800c654:	d001      	beq.n	800c65a <_strtod_l+0x2ea>
 800c656:	f1c8 0800 	rsb	r8, r8, #0
 800c65a:	2d00      	cmp	r5, #0
 800c65c:	d14e      	bne.n	800c6fc <_strtod_l+0x38c>
 800c65e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c660:	4308      	orrs	r0, r1
 800c662:	f47f aebe 	bne.w	800c3e2 <_strtod_l+0x72>
 800c666:	2b00      	cmp	r3, #0
 800c668:	f47f aed6 	bne.w	800c418 <_strtod_l+0xa8>
 800c66c:	2a69      	cmp	r2, #105	@ 0x69
 800c66e:	d028      	beq.n	800c6c2 <_strtod_l+0x352>
 800c670:	dc25      	bgt.n	800c6be <_strtod_l+0x34e>
 800c672:	2a49      	cmp	r2, #73	@ 0x49
 800c674:	d025      	beq.n	800c6c2 <_strtod_l+0x352>
 800c676:	2a4e      	cmp	r2, #78	@ 0x4e
 800c678:	f47f aece 	bne.w	800c418 <_strtod_l+0xa8>
 800c67c:	499b      	ldr	r1, [pc, #620]	@ (800c8ec <_strtod_l+0x57c>)
 800c67e:	a819      	add	r0, sp, #100	@ 0x64
 800c680:	f001 f906 	bl	800d890 <__match>
 800c684:	2800      	cmp	r0, #0
 800c686:	f43f aec7 	beq.w	800c418 <_strtod_l+0xa8>
 800c68a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	2b28      	cmp	r3, #40	@ 0x28
 800c690:	d12e      	bne.n	800c6f0 <_strtod_l+0x380>
 800c692:	4997      	ldr	r1, [pc, #604]	@ (800c8f0 <_strtod_l+0x580>)
 800c694:	aa1c      	add	r2, sp, #112	@ 0x70
 800c696:	a819      	add	r0, sp, #100	@ 0x64
 800c698:	f001 f90e 	bl	800d8b8 <__hexnan>
 800c69c:	2805      	cmp	r0, #5
 800c69e:	d127      	bne.n	800c6f0 <_strtod_l+0x380>
 800c6a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c6a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c6a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c6aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c6ae:	e698      	b.n	800c3e2 <_strtod_l+0x72>
 800c6b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c6b2:	fb08 2101 	mla	r1, r8, r1, r2
 800c6b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c6ba:	920e      	str	r2, [sp, #56]	@ 0x38
 800c6bc:	e7b5      	b.n	800c62a <_strtod_l+0x2ba>
 800c6be:	2a6e      	cmp	r2, #110	@ 0x6e
 800c6c0:	e7da      	b.n	800c678 <_strtod_l+0x308>
 800c6c2:	498c      	ldr	r1, [pc, #560]	@ (800c8f4 <_strtod_l+0x584>)
 800c6c4:	a819      	add	r0, sp, #100	@ 0x64
 800c6c6:	f001 f8e3 	bl	800d890 <__match>
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	f43f aea4 	beq.w	800c418 <_strtod_l+0xa8>
 800c6d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6d2:	4989      	ldr	r1, [pc, #548]	@ (800c8f8 <_strtod_l+0x588>)
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	a819      	add	r0, sp, #100	@ 0x64
 800c6d8:	9319      	str	r3, [sp, #100]	@ 0x64
 800c6da:	f001 f8d9 	bl	800d890 <__match>
 800c6de:	b910      	cbnz	r0, 800c6e6 <_strtod_l+0x376>
 800c6e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c6e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c908 <_strtod_l+0x598>
 800c6ea:	f04f 0a00 	mov.w	sl, #0
 800c6ee:	e678      	b.n	800c3e2 <_strtod_l+0x72>
 800c6f0:	4882      	ldr	r0, [pc, #520]	@ (800c8fc <_strtod_l+0x58c>)
 800c6f2:	f000 fdf1 	bl	800d2d8 <nan>
 800c6f6:	ec5b ab10 	vmov	sl, fp, d0
 800c6fa:	e672      	b.n	800c3e2 <_strtod_l+0x72>
 800c6fc:	eba8 0309 	sub.w	r3, r8, r9
 800c700:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c702:	9309      	str	r3, [sp, #36]	@ 0x24
 800c704:	2f00      	cmp	r7, #0
 800c706:	bf08      	it	eq
 800c708:	462f      	moveq	r7, r5
 800c70a:	2d10      	cmp	r5, #16
 800c70c:	462c      	mov	r4, r5
 800c70e:	bfa8      	it	ge
 800c710:	2410      	movge	r4, #16
 800c712:	f7f3 ff1f 	bl	8000554 <__aeabi_ui2d>
 800c716:	2d09      	cmp	r5, #9
 800c718:	4682      	mov	sl, r0
 800c71a:	468b      	mov	fp, r1
 800c71c:	dc13      	bgt.n	800c746 <_strtod_l+0x3d6>
 800c71e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c720:	2b00      	cmp	r3, #0
 800c722:	f43f ae5e 	beq.w	800c3e2 <_strtod_l+0x72>
 800c726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c728:	dd78      	ble.n	800c81c <_strtod_l+0x4ac>
 800c72a:	2b16      	cmp	r3, #22
 800c72c:	dc5f      	bgt.n	800c7ee <_strtod_l+0x47e>
 800c72e:	4974      	ldr	r1, [pc, #464]	@ (800c900 <_strtod_l+0x590>)
 800c730:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c734:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c738:	4652      	mov	r2, sl
 800c73a:	465b      	mov	r3, fp
 800c73c:	f7f3 ff84 	bl	8000648 <__aeabi_dmul>
 800c740:	4682      	mov	sl, r0
 800c742:	468b      	mov	fp, r1
 800c744:	e64d      	b.n	800c3e2 <_strtod_l+0x72>
 800c746:	4b6e      	ldr	r3, [pc, #440]	@ (800c900 <_strtod_l+0x590>)
 800c748:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c74c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c750:	f7f3 ff7a 	bl	8000648 <__aeabi_dmul>
 800c754:	4682      	mov	sl, r0
 800c756:	9808      	ldr	r0, [sp, #32]
 800c758:	468b      	mov	fp, r1
 800c75a:	f7f3 fefb 	bl	8000554 <__aeabi_ui2d>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	4650      	mov	r0, sl
 800c764:	4659      	mov	r1, fp
 800c766:	f7f3 fdb9 	bl	80002dc <__adddf3>
 800c76a:	2d0f      	cmp	r5, #15
 800c76c:	4682      	mov	sl, r0
 800c76e:	468b      	mov	fp, r1
 800c770:	ddd5      	ble.n	800c71e <_strtod_l+0x3ae>
 800c772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c774:	1b2c      	subs	r4, r5, r4
 800c776:	441c      	add	r4, r3
 800c778:	2c00      	cmp	r4, #0
 800c77a:	f340 8096 	ble.w	800c8aa <_strtod_l+0x53a>
 800c77e:	f014 030f 	ands.w	r3, r4, #15
 800c782:	d00a      	beq.n	800c79a <_strtod_l+0x42a>
 800c784:	495e      	ldr	r1, [pc, #376]	@ (800c900 <_strtod_l+0x590>)
 800c786:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c78a:	4652      	mov	r2, sl
 800c78c:	465b      	mov	r3, fp
 800c78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c792:	f7f3 ff59 	bl	8000648 <__aeabi_dmul>
 800c796:	4682      	mov	sl, r0
 800c798:	468b      	mov	fp, r1
 800c79a:	f034 040f 	bics.w	r4, r4, #15
 800c79e:	d073      	beq.n	800c888 <_strtod_l+0x518>
 800c7a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c7a4:	dd48      	ble.n	800c838 <_strtod_l+0x4c8>
 800c7a6:	2400      	movs	r4, #0
 800c7a8:	46a0      	mov	r8, r4
 800c7aa:	940a      	str	r4, [sp, #40]	@ 0x28
 800c7ac:	46a1      	mov	r9, r4
 800c7ae:	9a05      	ldr	r2, [sp, #20]
 800c7b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c908 <_strtod_l+0x598>
 800c7b4:	2322      	movs	r3, #34	@ 0x22
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	f04f 0a00 	mov.w	sl, #0
 800c7bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f43f ae0f 	beq.w	800c3e2 <_strtod_l+0x72>
 800c7c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7c6:	9805      	ldr	r0, [sp, #20]
 800c7c8:	f001 fa12 	bl	800dbf0 <_Bfree>
 800c7cc:	9805      	ldr	r0, [sp, #20]
 800c7ce:	4649      	mov	r1, r9
 800c7d0:	f001 fa0e 	bl	800dbf0 <_Bfree>
 800c7d4:	9805      	ldr	r0, [sp, #20]
 800c7d6:	4641      	mov	r1, r8
 800c7d8:	f001 fa0a 	bl	800dbf0 <_Bfree>
 800c7dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c7de:	9805      	ldr	r0, [sp, #20]
 800c7e0:	f001 fa06 	bl	800dbf0 <_Bfree>
 800c7e4:	9805      	ldr	r0, [sp, #20]
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	f001 fa02 	bl	800dbf0 <_Bfree>
 800c7ec:	e5f9      	b.n	800c3e2 <_strtod_l+0x72>
 800c7ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	dbbc      	blt.n	800c772 <_strtod_l+0x402>
 800c7f8:	4c41      	ldr	r4, [pc, #260]	@ (800c900 <_strtod_l+0x590>)
 800c7fa:	f1c5 050f 	rsb	r5, r5, #15
 800c7fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c802:	4652      	mov	r2, sl
 800c804:	465b      	mov	r3, fp
 800c806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c80a:	f7f3 ff1d 	bl	8000648 <__aeabi_dmul>
 800c80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c810:	1b5d      	subs	r5, r3, r5
 800c812:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c816:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c81a:	e78f      	b.n	800c73c <_strtod_l+0x3cc>
 800c81c:	3316      	adds	r3, #22
 800c81e:	dba8      	blt.n	800c772 <_strtod_l+0x402>
 800c820:	4b37      	ldr	r3, [pc, #220]	@ (800c900 <_strtod_l+0x590>)
 800c822:	eba9 0808 	sub.w	r8, r9, r8
 800c826:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c82a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c82e:	4650      	mov	r0, sl
 800c830:	4659      	mov	r1, fp
 800c832:	f7f4 f833 	bl	800089c <__aeabi_ddiv>
 800c836:	e783      	b.n	800c740 <_strtod_l+0x3d0>
 800c838:	4b32      	ldr	r3, [pc, #200]	@ (800c904 <_strtod_l+0x594>)
 800c83a:	9308      	str	r3, [sp, #32]
 800c83c:	2300      	movs	r3, #0
 800c83e:	1124      	asrs	r4, r4, #4
 800c840:	4650      	mov	r0, sl
 800c842:	4659      	mov	r1, fp
 800c844:	461e      	mov	r6, r3
 800c846:	2c01      	cmp	r4, #1
 800c848:	dc21      	bgt.n	800c88e <_strtod_l+0x51e>
 800c84a:	b10b      	cbz	r3, 800c850 <_strtod_l+0x4e0>
 800c84c:	4682      	mov	sl, r0
 800c84e:	468b      	mov	fp, r1
 800c850:	492c      	ldr	r1, [pc, #176]	@ (800c904 <_strtod_l+0x594>)
 800c852:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c856:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c85a:	4652      	mov	r2, sl
 800c85c:	465b      	mov	r3, fp
 800c85e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c862:	f7f3 fef1 	bl	8000648 <__aeabi_dmul>
 800c866:	4b28      	ldr	r3, [pc, #160]	@ (800c908 <_strtod_l+0x598>)
 800c868:	460a      	mov	r2, r1
 800c86a:	400b      	ands	r3, r1
 800c86c:	4927      	ldr	r1, [pc, #156]	@ (800c90c <_strtod_l+0x59c>)
 800c86e:	428b      	cmp	r3, r1
 800c870:	4682      	mov	sl, r0
 800c872:	d898      	bhi.n	800c7a6 <_strtod_l+0x436>
 800c874:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c878:	428b      	cmp	r3, r1
 800c87a:	bf86      	itte	hi
 800c87c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c910 <_strtod_l+0x5a0>
 800c880:	f04f 3aff 	movhi.w	sl, #4294967295
 800c884:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c888:	2300      	movs	r3, #0
 800c88a:	9308      	str	r3, [sp, #32]
 800c88c:	e07a      	b.n	800c984 <_strtod_l+0x614>
 800c88e:	07e2      	lsls	r2, r4, #31
 800c890:	d505      	bpl.n	800c89e <_strtod_l+0x52e>
 800c892:	9b08      	ldr	r3, [sp, #32]
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	f7f3 fed6 	bl	8000648 <__aeabi_dmul>
 800c89c:	2301      	movs	r3, #1
 800c89e:	9a08      	ldr	r2, [sp, #32]
 800c8a0:	3208      	adds	r2, #8
 800c8a2:	3601      	adds	r6, #1
 800c8a4:	1064      	asrs	r4, r4, #1
 800c8a6:	9208      	str	r2, [sp, #32]
 800c8a8:	e7cd      	b.n	800c846 <_strtod_l+0x4d6>
 800c8aa:	d0ed      	beq.n	800c888 <_strtod_l+0x518>
 800c8ac:	4264      	negs	r4, r4
 800c8ae:	f014 020f 	ands.w	r2, r4, #15
 800c8b2:	d00a      	beq.n	800c8ca <_strtod_l+0x55a>
 800c8b4:	4b12      	ldr	r3, [pc, #72]	@ (800c900 <_strtod_l+0x590>)
 800c8b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8ba:	4650      	mov	r0, sl
 800c8bc:	4659      	mov	r1, fp
 800c8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c2:	f7f3 ffeb 	bl	800089c <__aeabi_ddiv>
 800c8c6:	4682      	mov	sl, r0
 800c8c8:	468b      	mov	fp, r1
 800c8ca:	1124      	asrs	r4, r4, #4
 800c8cc:	d0dc      	beq.n	800c888 <_strtod_l+0x518>
 800c8ce:	2c1f      	cmp	r4, #31
 800c8d0:	dd20      	ble.n	800c914 <_strtod_l+0x5a4>
 800c8d2:	2400      	movs	r4, #0
 800c8d4:	46a0      	mov	r8, r4
 800c8d6:	940a      	str	r4, [sp, #40]	@ 0x28
 800c8d8:	46a1      	mov	r9, r4
 800c8da:	9a05      	ldr	r2, [sp, #20]
 800c8dc:	2322      	movs	r3, #34	@ 0x22
 800c8de:	f04f 0a00 	mov.w	sl, #0
 800c8e2:	f04f 0b00 	mov.w	fp, #0
 800c8e6:	6013      	str	r3, [r2, #0]
 800c8e8:	e768      	b.n	800c7bc <_strtod_l+0x44c>
 800c8ea:	bf00      	nop
 800c8ec:	0800f6ab 	.word	0x0800f6ab
 800c8f0:	0800f6b0 	.word	0x0800f6b0
 800c8f4:	0800f6a2 	.word	0x0800f6a2
 800c8f8:	0800f6a5 	.word	0x0800f6a5
 800c8fc:	0800fa57 	.word	0x0800fa57
 800c900:	0800f820 	.word	0x0800f820
 800c904:	0800f7f8 	.word	0x0800f7f8
 800c908:	7ff00000 	.word	0x7ff00000
 800c90c:	7ca00000 	.word	0x7ca00000
 800c910:	7fefffff 	.word	0x7fefffff
 800c914:	f014 0310 	ands.w	r3, r4, #16
 800c918:	bf18      	it	ne
 800c91a:	236a      	movne	r3, #106	@ 0x6a
 800c91c:	4ea9      	ldr	r6, [pc, #676]	@ (800cbc4 <_strtod_l+0x854>)
 800c91e:	9308      	str	r3, [sp, #32]
 800c920:	4650      	mov	r0, sl
 800c922:	4659      	mov	r1, fp
 800c924:	2300      	movs	r3, #0
 800c926:	07e2      	lsls	r2, r4, #31
 800c928:	d504      	bpl.n	800c934 <_strtod_l+0x5c4>
 800c92a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c92e:	f7f3 fe8b 	bl	8000648 <__aeabi_dmul>
 800c932:	2301      	movs	r3, #1
 800c934:	1064      	asrs	r4, r4, #1
 800c936:	f106 0608 	add.w	r6, r6, #8
 800c93a:	d1f4      	bne.n	800c926 <_strtod_l+0x5b6>
 800c93c:	b10b      	cbz	r3, 800c942 <_strtod_l+0x5d2>
 800c93e:	4682      	mov	sl, r0
 800c940:	468b      	mov	fp, r1
 800c942:	9b08      	ldr	r3, [sp, #32]
 800c944:	b1b3      	cbz	r3, 800c974 <_strtod_l+0x604>
 800c946:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c94a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c94e:	2b00      	cmp	r3, #0
 800c950:	4659      	mov	r1, fp
 800c952:	dd0f      	ble.n	800c974 <_strtod_l+0x604>
 800c954:	2b1f      	cmp	r3, #31
 800c956:	dd55      	ble.n	800ca04 <_strtod_l+0x694>
 800c958:	2b34      	cmp	r3, #52	@ 0x34
 800c95a:	bfde      	ittt	le
 800c95c:	f04f 33ff 	movle.w	r3, #4294967295
 800c960:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c964:	4093      	lslle	r3, r2
 800c966:	f04f 0a00 	mov.w	sl, #0
 800c96a:	bfcc      	ite	gt
 800c96c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c970:	ea03 0b01 	andle.w	fp, r3, r1
 800c974:	2200      	movs	r2, #0
 800c976:	2300      	movs	r3, #0
 800c978:	4650      	mov	r0, sl
 800c97a:	4659      	mov	r1, fp
 800c97c:	f7f4 f8cc 	bl	8000b18 <__aeabi_dcmpeq>
 800c980:	2800      	cmp	r0, #0
 800c982:	d1a6      	bne.n	800c8d2 <_strtod_l+0x562>
 800c984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c98a:	9805      	ldr	r0, [sp, #20]
 800c98c:	462b      	mov	r3, r5
 800c98e:	463a      	mov	r2, r7
 800c990:	f001 f996 	bl	800dcc0 <__s2b>
 800c994:	900a      	str	r0, [sp, #40]	@ 0x28
 800c996:	2800      	cmp	r0, #0
 800c998:	f43f af05 	beq.w	800c7a6 <_strtod_l+0x436>
 800c99c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c99e:	2a00      	cmp	r2, #0
 800c9a0:	eba9 0308 	sub.w	r3, r9, r8
 800c9a4:	bfa8      	it	ge
 800c9a6:	2300      	movge	r3, #0
 800c9a8:	9312      	str	r3, [sp, #72]	@ 0x48
 800c9aa:	2400      	movs	r4, #0
 800c9ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c9b0:	9316      	str	r3, [sp, #88]	@ 0x58
 800c9b2:	46a0      	mov	r8, r4
 800c9b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9b6:	9805      	ldr	r0, [sp, #20]
 800c9b8:	6859      	ldr	r1, [r3, #4]
 800c9ba:	f001 f8d9 	bl	800db70 <_Balloc>
 800c9be:	4681      	mov	r9, r0
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	f43f aef4 	beq.w	800c7ae <_strtod_l+0x43e>
 800c9c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9c8:	691a      	ldr	r2, [r3, #16]
 800c9ca:	3202      	adds	r2, #2
 800c9cc:	f103 010c 	add.w	r1, r3, #12
 800c9d0:	0092      	lsls	r2, r2, #2
 800c9d2:	300c      	adds	r0, #12
 800c9d4:	f000 fc6f 	bl	800d2b6 <memcpy>
 800c9d8:	ec4b ab10 	vmov	d0, sl, fp
 800c9dc:	9805      	ldr	r0, [sp, #20]
 800c9de:	aa1c      	add	r2, sp, #112	@ 0x70
 800c9e0:	a91b      	add	r1, sp, #108	@ 0x6c
 800c9e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c9e6:	f001 fca7 	bl	800e338 <__d2b>
 800c9ea:	901a      	str	r0, [sp, #104]	@ 0x68
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	f43f aede 	beq.w	800c7ae <_strtod_l+0x43e>
 800c9f2:	9805      	ldr	r0, [sp, #20]
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	f001 f9f9 	bl	800ddec <__i2b>
 800c9fa:	4680      	mov	r8, r0
 800c9fc:	b948      	cbnz	r0, 800ca12 <_strtod_l+0x6a2>
 800c9fe:	f04f 0800 	mov.w	r8, #0
 800ca02:	e6d4      	b.n	800c7ae <_strtod_l+0x43e>
 800ca04:	f04f 32ff 	mov.w	r2, #4294967295
 800ca08:	fa02 f303 	lsl.w	r3, r2, r3
 800ca0c:	ea03 0a0a 	and.w	sl, r3, sl
 800ca10:	e7b0      	b.n	800c974 <_strtod_l+0x604>
 800ca12:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ca14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ca16:	2d00      	cmp	r5, #0
 800ca18:	bfab      	itete	ge
 800ca1a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ca1c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ca1e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ca20:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ca22:	bfac      	ite	ge
 800ca24:	18ef      	addge	r7, r5, r3
 800ca26:	1b5e      	sublt	r6, r3, r5
 800ca28:	9b08      	ldr	r3, [sp, #32]
 800ca2a:	1aed      	subs	r5, r5, r3
 800ca2c:	4415      	add	r5, r2
 800ca2e:	4b66      	ldr	r3, [pc, #408]	@ (800cbc8 <_strtod_l+0x858>)
 800ca30:	3d01      	subs	r5, #1
 800ca32:	429d      	cmp	r5, r3
 800ca34:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ca38:	da50      	bge.n	800cadc <_strtod_l+0x76c>
 800ca3a:	1b5b      	subs	r3, r3, r5
 800ca3c:	2b1f      	cmp	r3, #31
 800ca3e:	eba2 0203 	sub.w	r2, r2, r3
 800ca42:	f04f 0101 	mov.w	r1, #1
 800ca46:	dc3d      	bgt.n	800cac4 <_strtod_l+0x754>
 800ca48:	fa01 f303 	lsl.w	r3, r1, r3
 800ca4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ca4e:	2300      	movs	r3, #0
 800ca50:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca52:	18bd      	adds	r5, r7, r2
 800ca54:	9b08      	ldr	r3, [sp, #32]
 800ca56:	42af      	cmp	r7, r5
 800ca58:	4416      	add	r6, r2
 800ca5a:	441e      	add	r6, r3
 800ca5c:	463b      	mov	r3, r7
 800ca5e:	bfa8      	it	ge
 800ca60:	462b      	movge	r3, r5
 800ca62:	42b3      	cmp	r3, r6
 800ca64:	bfa8      	it	ge
 800ca66:	4633      	movge	r3, r6
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	bfc2      	ittt	gt
 800ca6c:	1aed      	subgt	r5, r5, r3
 800ca6e:	1af6      	subgt	r6, r6, r3
 800ca70:	1aff      	subgt	r7, r7, r3
 800ca72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	dd16      	ble.n	800caa6 <_strtod_l+0x736>
 800ca78:	4641      	mov	r1, r8
 800ca7a:	9805      	ldr	r0, [sp, #20]
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	f001 fa75 	bl	800df6c <__pow5mult>
 800ca82:	4680      	mov	r8, r0
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d0ba      	beq.n	800c9fe <_strtod_l+0x68e>
 800ca88:	4601      	mov	r1, r0
 800ca8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ca8c:	9805      	ldr	r0, [sp, #20]
 800ca8e:	f001 f9c3 	bl	800de18 <__multiply>
 800ca92:	900e      	str	r0, [sp, #56]	@ 0x38
 800ca94:	2800      	cmp	r0, #0
 800ca96:	f43f ae8a 	beq.w	800c7ae <_strtod_l+0x43e>
 800ca9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca9c:	9805      	ldr	r0, [sp, #20]
 800ca9e:	f001 f8a7 	bl	800dbf0 <_Bfree>
 800caa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800caa4:	931a      	str	r3, [sp, #104]	@ 0x68
 800caa6:	2d00      	cmp	r5, #0
 800caa8:	dc1d      	bgt.n	800cae6 <_strtod_l+0x776>
 800caaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caac:	2b00      	cmp	r3, #0
 800caae:	dd23      	ble.n	800caf8 <_strtod_l+0x788>
 800cab0:	4649      	mov	r1, r9
 800cab2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cab4:	9805      	ldr	r0, [sp, #20]
 800cab6:	f001 fa59 	bl	800df6c <__pow5mult>
 800caba:	4681      	mov	r9, r0
 800cabc:	b9e0      	cbnz	r0, 800caf8 <_strtod_l+0x788>
 800cabe:	f04f 0900 	mov.w	r9, #0
 800cac2:	e674      	b.n	800c7ae <_strtod_l+0x43e>
 800cac4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cac8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cacc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cad0:	35e2      	adds	r5, #226	@ 0xe2
 800cad2:	fa01 f305 	lsl.w	r3, r1, r5
 800cad6:	9310      	str	r3, [sp, #64]	@ 0x40
 800cad8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cada:	e7ba      	b.n	800ca52 <_strtod_l+0x6e2>
 800cadc:	2300      	movs	r3, #0
 800cade:	9310      	str	r3, [sp, #64]	@ 0x40
 800cae0:	2301      	movs	r3, #1
 800cae2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cae4:	e7b5      	b.n	800ca52 <_strtod_l+0x6e2>
 800cae6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cae8:	9805      	ldr	r0, [sp, #20]
 800caea:	462a      	mov	r2, r5
 800caec:	f001 fa98 	bl	800e020 <__lshift>
 800caf0:	901a      	str	r0, [sp, #104]	@ 0x68
 800caf2:	2800      	cmp	r0, #0
 800caf4:	d1d9      	bne.n	800caaa <_strtod_l+0x73a>
 800caf6:	e65a      	b.n	800c7ae <_strtod_l+0x43e>
 800caf8:	2e00      	cmp	r6, #0
 800cafa:	dd07      	ble.n	800cb0c <_strtod_l+0x79c>
 800cafc:	4649      	mov	r1, r9
 800cafe:	9805      	ldr	r0, [sp, #20]
 800cb00:	4632      	mov	r2, r6
 800cb02:	f001 fa8d 	bl	800e020 <__lshift>
 800cb06:	4681      	mov	r9, r0
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	d0d8      	beq.n	800cabe <_strtod_l+0x74e>
 800cb0c:	2f00      	cmp	r7, #0
 800cb0e:	dd08      	ble.n	800cb22 <_strtod_l+0x7b2>
 800cb10:	4641      	mov	r1, r8
 800cb12:	9805      	ldr	r0, [sp, #20]
 800cb14:	463a      	mov	r2, r7
 800cb16:	f001 fa83 	bl	800e020 <__lshift>
 800cb1a:	4680      	mov	r8, r0
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	f43f ae46 	beq.w	800c7ae <_strtod_l+0x43e>
 800cb22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb24:	9805      	ldr	r0, [sp, #20]
 800cb26:	464a      	mov	r2, r9
 800cb28:	f001 fb02 	bl	800e130 <__mdiff>
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	f43f ae3d 	beq.w	800c7ae <_strtod_l+0x43e>
 800cb34:	68c3      	ldr	r3, [r0, #12]
 800cb36:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb38:	2300      	movs	r3, #0
 800cb3a:	60c3      	str	r3, [r0, #12]
 800cb3c:	4641      	mov	r1, r8
 800cb3e:	f001 fadb 	bl	800e0f8 <__mcmp>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	da46      	bge.n	800cbd4 <_strtod_l+0x864>
 800cb46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb48:	ea53 030a 	orrs.w	r3, r3, sl
 800cb4c:	d16c      	bne.n	800cc28 <_strtod_l+0x8b8>
 800cb4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d168      	bne.n	800cc28 <_strtod_l+0x8b8>
 800cb56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb5a:	0d1b      	lsrs	r3, r3, #20
 800cb5c:	051b      	lsls	r3, r3, #20
 800cb5e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cb62:	d961      	bls.n	800cc28 <_strtod_l+0x8b8>
 800cb64:	6963      	ldr	r3, [r4, #20]
 800cb66:	b913      	cbnz	r3, 800cb6e <_strtod_l+0x7fe>
 800cb68:	6923      	ldr	r3, [r4, #16]
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	dd5c      	ble.n	800cc28 <_strtod_l+0x8b8>
 800cb6e:	4621      	mov	r1, r4
 800cb70:	2201      	movs	r2, #1
 800cb72:	9805      	ldr	r0, [sp, #20]
 800cb74:	f001 fa54 	bl	800e020 <__lshift>
 800cb78:	4641      	mov	r1, r8
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	f001 fabc 	bl	800e0f8 <__mcmp>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	dd51      	ble.n	800cc28 <_strtod_l+0x8b8>
 800cb84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb88:	9a08      	ldr	r2, [sp, #32]
 800cb8a:	0d1b      	lsrs	r3, r3, #20
 800cb8c:	051b      	lsls	r3, r3, #20
 800cb8e:	2a00      	cmp	r2, #0
 800cb90:	d06b      	beq.n	800cc6a <_strtod_l+0x8fa>
 800cb92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cb96:	d868      	bhi.n	800cc6a <_strtod_l+0x8fa>
 800cb98:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cb9c:	f67f ae9d 	bls.w	800c8da <_strtod_l+0x56a>
 800cba0:	4b0a      	ldr	r3, [pc, #40]	@ (800cbcc <_strtod_l+0x85c>)
 800cba2:	4650      	mov	r0, sl
 800cba4:	4659      	mov	r1, fp
 800cba6:	2200      	movs	r2, #0
 800cba8:	f7f3 fd4e 	bl	8000648 <__aeabi_dmul>
 800cbac:	4b08      	ldr	r3, [pc, #32]	@ (800cbd0 <_strtod_l+0x860>)
 800cbae:	400b      	ands	r3, r1
 800cbb0:	4682      	mov	sl, r0
 800cbb2:	468b      	mov	fp, r1
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f47f ae05 	bne.w	800c7c4 <_strtod_l+0x454>
 800cbba:	9a05      	ldr	r2, [sp, #20]
 800cbbc:	2322      	movs	r3, #34	@ 0x22
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	e600      	b.n	800c7c4 <_strtod_l+0x454>
 800cbc2:	bf00      	nop
 800cbc4:	0800f6d8 	.word	0x0800f6d8
 800cbc8:	fffffc02 	.word	0xfffffc02
 800cbcc:	39500000 	.word	0x39500000
 800cbd0:	7ff00000 	.word	0x7ff00000
 800cbd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cbd8:	d165      	bne.n	800cca6 <_strtod_l+0x936>
 800cbda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cbdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbe0:	b35a      	cbz	r2, 800cc3a <_strtod_l+0x8ca>
 800cbe2:	4a9f      	ldr	r2, [pc, #636]	@ (800ce60 <_strtod_l+0xaf0>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d12b      	bne.n	800cc40 <_strtod_l+0x8d0>
 800cbe8:	9b08      	ldr	r3, [sp, #32]
 800cbea:	4651      	mov	r1, sl
 800cbec:	b303      	cbz	r3, 800cc30 <_strtod_l+0x8c0>
 800cbee:	4b9d      	ldr	r3, [pc, #628]	@ (800ce64 <_strtod_l+0xaf4>)
 800cbf0:	465a      	mov	r2, fp
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbfc:	d81b      	bhi.n	800cc36 <_strtod_l+0x8c6>
 800cbfe:	0d1b      	lsrs	r3, r3, #20
 800cc00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cc04:	fa02 f303 	lsl.w	r3, r2, r3
 800cc08:	4299      	cmp	r1, r3
 800cc0a:	d119      	bne.n	800cc40 <_strtod_l+0x8d0>
 800cc0c:	4b96      	ldr	r3, [pc, #600]	@ (800ce68 <_strtod_l+0xaf8>)
 800cc0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d102      	bne.n	800cc1a <_strtod_l+0x8aa>
 800cc14:	3101      	adds	r1, #1
 800cc16:	f43f adca 	beq.w	800c7ae <_strtod_l+0x43e>
 800cc1a:	4b92      	ldr	r3, [pc, #584]	@ (800ce64 <_strtod_l+0xaf4>)
 800cc1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc1e:	401a      	ands	r2, r3
 800cc20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cc24:	f04f 0a00 	mov.w	sl, #0
 800cc28:	9b08      	ldr	r3, [sp, #32]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1b8      	bne.n	800cba0 <_strtod_l+0x830>
 800cc2e:	e5c9      	b.n	800c7c4 <_strtod_l+0x454>
 800cc30:	f04f 33ff 	mov.w	r3, #4294967295
 800cc34:	e7e8      	b.n	800cc08 <_strtod_l+0x898>
 800cc36:	4613      	mov	r3, r2
 800cc38:	e7e6      	b.n	800cc08 <_strtod_l+0x898>
 800cc3a:	ea53 030a 	orrs.w	r3, r3, sl
 800cc3e:	d0a1      	beq.n	800cb84 <_strtod_l+0x814>
 800cc40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cc42:	b1db      	cbz	r3, 800cc7c <_strtod_l+0x90c>
 800cc44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc46:	4213      	tst	r3, r2
 800cc48:	d0ee      	beq.n	800cc28 <_strtod_l+0x8b8>
 800cc4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc4c:	9a08      	ldr	r2, [sp, #32]
 800cc4e:	4650      	mov	r0, sl
 800cc50:	4659      	mov	r1, fp
 800cc52:	b1bb      	cbz	r3, 800cc84 <_strtod_l+0x914>
 800cc54:	f7ff fb6d 	bl	800c332 <sulp>
 800cc58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc5c:	ec53 2b10 	vmov	r2, r3, d0
 800cc60:	f7f3 fb3c 	bl	80002dc <__adddf3>
 800cc64:	4682      	mov	sl, r0
 800cc66:	468b      	mov	fp, r1
 800cc68:	e7de      	b.n	800cc28 <_strtod_l+0x8b8>
 800cc6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cc6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cc72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cc76:	f04f 3aff 	mov.w	sl, #4294967295
 800cc7a:	e7d5      	b.n	800cc28 <_strtod_l+0x8b8>
 800cc7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cc7e:	ea13 0f0a 	tst.w	r3, sl
 800cc82:	e7e1      	b.n	800cc48 <_strtod_l+0x8d8>
 800cc84:	f7ff fb55 	bl	800c332 <sulp>
 800cc88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc8c:	ec53 2b10 	vmov	r2, r3, d0
 800cc90:	f7f3 fb22 	bl	80002d8 <__aeabi_dsub>
 800cc94:	2200      	movs	r2, #0
 800cc96:	2300      	movs	r3, #0
 800cc98:	4682      	mov	sl, r0
 800cc9a:	468b      	mov	fp, r1
 800cc9c:	f7f3 ff3c 	bl	8000b18 <__aeabi_dcmpeq>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	d0c1      	beq.n	800cc28 <_strtod_l+0x8b8>
 800cca4:	e619      	b.n	800c8da <_strtod_l+0x56a>
 800cca6:	4641      	mov	r1, r8
 800cca8:	4620      	mov	r0, r4
 800ccaa:	f001 fb9d 	bl	800e3e8 <__ratio>
 800ccae:	ec57 6b10 	vmov	r6, r7, d0
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ccb8:	4630      	mov	r0, r6
 800ccba:	4639      	mov	r1, r7
 800ccbc:	f7f3 ff40 	bl	8000b40 <__aeabi_dcmple>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	d06f      	beq.n	800cda4 <_strtod_l+0xa34>
 800ccc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d17a      	bne.n	800cdc0 <_strtod_l+0xa50>
 800ccca:	f1ba 0f00 	cmp.w	sl, #0
 800ccce:	d158      	bne.n	800cd82 <_strtod_l+0xa12>
 800ccd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d15a      	bne.n	800cd90 <_strtod_l+0xa20>
 800ccda:	4b64      	ldr	r3, [pc, #400]	@ (800ce6c <_strtod_l+0xafc>)
 800ccdc:	2200      	movs	r2, #0
 800ccde:	4630      	mov	r0, r6
 800cce0:	4639      	mov	r1, r7
 800cce2:	f7f3 ff23 	bl	8000b2c <__aeabi_dcmplt>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	d159      	bne.n	800cd9e <_strtod_l+0xa2e>
 800ccea:	4630      	mov	r0, r6
 800ccec:	4639      	mov	r1, r7
 800ccee:	4b60      	ldr	r3, [pc, #384]	@ (800ce70 <_strtod_l+0xb00>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f7f3 fca9 	bl	8000648 <__aeabi_dmul>
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	460f      	mov	r7, r1
 800ccfa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ccfe:	9606      	str	r6, [sp, #24]
 800cd00:	9307      	str	r3, [sp, #28]
 800cd02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd06:	4d57      	ldr	r5, [pc, #348]	@ (800ce64 <_strtod_l+0xaf4>)
 800cd08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cd0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd0e:	401d      	ands	r5, r3
 800cd10:	4b58      	ldr	r3, [pc, #352]	@ (800ce74 <_strtod_l+0xb04>)
 800cd12:	429d      	cmp	r5, r3
 800cd14:	f040 80b2 	bne.w	800ce7c <_strtod_l+0xb0c>
 800cd18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cd1e:	ec4b ab10 	vmov	d0, sl, fp
 800cd22:	f001 fa99 	bl	800e258 <__ulp>
 800cd26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd2a:	ec51 0b10 	vmov	r0, r1, d0
 800cd2e:	f7f3 fc8b 	bl	8000648 <__aeabi_dmul>
 800cd32:	4652      	mov	r2, sl
 800cd34:	465b      	mov	r3, fp
 800cd36:	f7f3 fad1 	bl	80002dc <__adddf3>
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	4949      	ldr	r1, [pc, #292]	@ (800ce64 <_strtod_l+0xaf4>)
 800cd3e:	4a4e      	ldr	r2, [pc, #312]	@ (800ce78 <_strtod_l+0xb08>)
 800cd40:	4019      	ands	r1, r3
 800cd42:	4291      	cmp	r1, r2
 800cd44:	4682      	mov	sl, r0
 800cd46:	d942      	bls.n	800cdce <_strtod_l+0xa5e>
 800cd48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cd4a:	4b47      	ldr	r3, [pc, #284]	@ (800ce68 <_strtod_l+0xaf8>)
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d103      	bne.n	800cd58 <_strtod_l+0x9e8>
 800cd50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd52:	3301      	adds	r3, #1
 800cd54:	f43f ad2b 	beq.w	800c7ae <_strtod_l+0x43e>
 800cd58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ce68 <_strtod_l+0xaf8>
 800cd5c:	f04f 3aff 	mov.w	sl, #4294967295
 800cd60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd62:	9805      	ldr	r0, [sp, #20]
 800cd64:	f000 ff44 	bl	800dbf0 <_Bfree>
 800cd68:	9805      	ldr	r0, [sp, #20]
 800cd6a:	4649      	mov	r1, r9
 800cd6c:	f000 ff40 	bl	800dbf0 <_Bfree>
 800cd70:	9805      	ldr	r0, [sp, #20]
 800cd72:	4641      	mov	r1, r8
 800cd74:	f000 ff3c 	bl	800dbf0 <_Bfree>
 800cd78:	9805      	ldr	r0, [sp, #20]
 800cd7a:	4621      	mov	r1, r4
 800cd7c:	f000 ff38 	bl	800dbf0 <_Bfree>
 800cd80:	e618      	b.n	800c9b4 <_strtod_l+0x644>
 800cd82:	f1ba 0f01 	cmp.w	sl, #1
 800cd86:	d103      	bne.n	800cd90 <_strtod_l+0xa20>
 800cd88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f43f ada5 	beq.w	800c8da <_strtod_l+0x56a>
 800cd90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ce40 <_strtod_l+0xad0>
 800cd94:	4f35      	ldr	r7, [pc, #212]	@ (800ce6c <_strtod_l+0xafc>)
 800cd96:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cd9a:	2600      	movs	r6, #0
 800cd9c:	e7b1      	b.n	800cd02 <_strtod_l+0x992>
 800cd9e:	4f34      	ldr	r7, [pc, #208]	@ (800ce70 <_strtod_l+0xb00>)
 800cda0:	2600      	movs	r6, #0
 800cda2:	e7aa      	b.n	800ccfa <_strtod_l+0x98a>
 800cda4:	4b32      	ldr	r3, [pc, #200]	@ (800ce70 <_strtod_l+0xb00>)
 800cda6:	4630      	mov	r0, r6
 800cda8:	4639      	mov	r1, r7
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f7f3 fc4c 	bl	8000648 <__aeabi_dmul>
 800cdb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdb2:	4606      	mov	r6, r0
 800cdb4:	460f      	mov	r7, r1
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d09f      	beq.n	800ccfa <_strtod_l+0x98a>
 800cdba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cdbe:	e7a0      	b.n	800cd02 <_strtod_l+0x992>
 800cdc0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ce48 <_strtod_l+0xad8>
 800cdc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cdc8:	ec57 6b17 	vmov	r6, r7, d7
 800cdcc:	e799      	b.n	800cd02 <_strtod_l+0x992>
 800cdce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cdd2:	9b08      	ldr	r3, [sp, #32]
 800cdd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1c1      	bne.n	800cd60 <_strtod_l+0x9f0>
 800cddc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cde0:	0d1b      	lsrs	r3, r3, #20
 800cde2:	051b      	lsls	r3, r3, #20
 800cde4:	429d      	cmp	r5, r3
 800cde6:	d1bb      	bne.n	800cd60 <_strtod_l+0x9f0>
 800cde8:	4630      	mov	r0, r6
 800cdea:	4639      	mov	r1, r7
 800cdec:	f7f4 f89a 	bl	8000f24 <__aeabi_d2lz>
 800cdf0:	f7f3 fbfc 	bl	80005ec <__aeabi_l2d>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	4639      	mov	r1, r7
 800cdfc:	f7f3 fa6c 	bl	80002d8 <__aeabi_dsub>
 800ce00:	460b      	mov	r3, r1
 800ce02:	4602      	mov	r2, r0
 800ce04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ce08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ce0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce0e:	ea46 060a 	orr.w	r6, r6, sl
 800ce12:	431e      	orrs	r6, r3
 800ce14:	d06f      	beq.n	800cef6 <_strtod_l+0xb86>
 800ce16:	a30e      	add	r3, pc, #56	@ (adr r3, 800ce50 <_strtod_l+0xae0>)
 800ce18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1c:	f7f3 fe86 	bl	8000b2c <__aeabi_dcmplt>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	f47f accf 	bne.w	800c7c4 <_strtod_l+0x454>
 800ce26:	a30c      	add	r3, pc, #48	@ (adr r3, 800ce58 <_strtod_l+0xae8>)
 800ce28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce30:	f7f3 fe9a 	bl	8000b68 <__aeabi_dcmpgt>
 800ce34:	2800      	cmp	r0, #0
 800ce36:	d093      	beq.n	800cd60 <_strtod_l+0x9f0>
 800ce38:	e4c4      	b.n	800c7c4 <_strtod_l+0x454>
 800ce3a:	bf00      	nop
 800ce3c:	f3af 8000 	nop.w
 800ce40:	00000000 	.word	0x00000000
 800ce44:	bff00000 	.word	0xbff00000
 800ce48:	00000000 	.word	0x00000000
 800ce4c:	3ff00000 	.word	0x3ff00000
 800ce50:	94a03595 	.word	0x94a03595
 800ce54:	3fdfffff 	.word	0x3fdfffff
 800ce58:	35afe535 	.word	0x35afe535
 800ce5c:	3fe00000 	.word	0x3fe00000
 800ce60:	000fffff 	.word	0x000fffff
 800ce64:	7ff00000 	.word	0x7ff00000
 800ce68:	7fefffff 	.word	0x7fefffff
 800ce6c:	3ff00000 	.word	0x3ff00000
 800ce70:	3fe00000 	.word	0x3fe00000
 800ce74:	7fe00000 	.word	0x7fe00000
 800ce78:	7c9fffff 	.word	0x7c9fffff
 800ce7c:	9b08      	ldr	r3, [sp, #32]
 800ce7e:	b323      	cbz	r3, 800ceca <_strtod_l+0xb5a>
 800ce80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ce84:	d821      	bhi.n	800ceca <_strtod_l+0xb5a>
 800ce86:	a328      	add	r3, pc, #160	@ (adr r3, 800cf28 <_strtod_l+0xbb8>)
 800ce88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	4639      	mov	r1, r7
 800ce90:	f7f3 fe56 	bl	8000b40 <__aeabi_dcmple>
 800ce94:	b1a0      	cbz	r0, 800cec0 <_strtod_l+0xb50>
 800ce96:	4639      	mov	r1, r7
 800ce98:	4630      	mov	r0, r6
 800ce9a:	f7f3 fead 	bl	8000bf8 <__aeabi_d2uiz>
 800ce9e:	2801      	cmp	r0, #1
 800cea0:	bf38      	it	cc
 800cea2:	2001      	movcc	r0, #1
 800cea4:	f7f3 fb56 	bl	8000554 <__aeabi_ui2d>
 800cea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ceaa:	4606      	mov	r6, r0
 800ceac:	460f      	mov	r7, r1
 800ceae:	b9fb      	cbnz	r3, 800cef0 <_strtod_l+0xb80>
 800ceb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ceb4:	9014      	str	r0, [sp, #80]	@ 0x50
 800ceb6:	9315      	str	r3, [sp, #84]	@ 0x54
 800ceb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cebc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cec0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cec2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cec6:	1b5b      	subs	r3, r3, r5
 800cec8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ceca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cece:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ced2:	f001 f9c1 	bl	800e258 <__ulp>
 800ced6:	4650      	mov	r0, sl
 800ced8:	ec53 2b10 	vmov	r2, r3, d0
 800cedc:	4659      	mov	r1, fp
 800cede:	f7f3 fbb3 	bl	8000648 <__aeabi_dmul>
 800cee2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cee6:	f7f3 f9f9 	bl	80002dc <__adddf3>
 800ceea:	4682      	mov	sl, r0
 800ceec:	468b      	mov	fp, r1
 800ceee:	e770      	b.n	800cdd2 <_strtod_l+0xa62>
 800cef0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cef4:	e7e0      	b.n	800ceb8 <_strtod_l+0xb48>
 800cef6:	a30e      	add	r3, pc, #56	@ (adr r3, 800cf30 <_strtod_l+0xbc0>)
 800cef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cefc:	f7f3 fe16 	bl	8000b2c <__aeabi_dcmplt>
 800cf00:	e798      	b.n	800ce34 <_strtod_l+0xac4>
 800cf02:	2300      	movs	r3, #0
 800cf04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cf08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf0a:	6013      	str	r3, [r2, #0]
 800cf0c:	f7ff ba6d 	b.w	800c3ea <_strtod_l+0x7a>
 800cf10:	2a65      	cmp	r2, #101	@ 0x65
 800cf12:	f43f ab66 	beq.w	800c5e2 <_strtod_l+0x272>
 800cf16:	2a45      	cmp	r2, #69	@ 0x45
 800cf18:	f43f ab63 	beq.w	800c5e2 <_strtod_l+0x272>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	f7ff bb9e 	b.w	800c65e <_strtod_l+0x2ee>
 800cf22:	bf00      	nop
 800cf24:	f3af 8000 	nop.w
 800cf28:	ffc00000 	.word	0xffc00000
 800cf2c:	41dfffff 	.word	0x41dfffff
 800cf30:	94a03595 	.word	0x94a03595
 800cf34:	3fcfffff 	.word	0x3fcfffff

0800cf38 <strtod>:
 800cf38:	460a      	mov	r2, r1
 800cf3a:	4601      	mov	r1, r0
 800cf3c:	4802      	ldr	r0, [pc, #8]	@ (800cf48 <strtod+0x10>)
 800cf3e:	4b03      	ldr	r3, [pc, #12]	@ (800cf4c <strtod+0x14>)
 800cf40:	6800      	ldr	r0, [r0, #0]
 800cf42:	f7ff ba15 	b.w	800c370 <_strtod_l>
 800cf46:	bf00      	nop
 800cf48:	200001c0 	.word	0x200001c0
 800cf4c:	20000054 	.word	0x20000054

0800cf50 <std>:
 800cf50:	2300      	movs	r3, #0
 800cf52:	b510      	push	{r4, lr}
 800cf54:	4604      	mov	r4, r0
 800cf56:	e9c0 3300 	strd	r3, r3, [r0]
 800cf5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf5e:	6083      	str	r3, [r0, #8]
 800cf60:	8181      	strh	r1, [r0, #12]
 800cf62:	6643      	str	r3, [r0, #100]	@ 0x64
 800cf64:	81c2      	strh	r2, [r0, #14]
 800cf66:	6183      	str	r3, [r0, #24]
 800cf68:	4619      	mov	r1, r3
 800cf6a:	2208      	movs	r2, #8
 800cf6c:	305c      	adds	r0, #92	@ 0x5c
 800cf6e:	f000 f914 	bl	800d19a <memset>
 800cf72:	4b0d      	ldr	r3, [pc, #52]	@ (800cfa8 <std+0x58>)
 800cf74:	6263      	str	r3, [r4, #36]	@ 0x24
 800cf76:	4b0d      	ldr	r3, [pc, #52]	@ (800cfac <std+0x5c>)
 800cf78:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cf7a:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb0 <std+0x60>)
 800cf7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf7e:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb4 <std+0x64>)
 800cf80:	6323      	str	r3, [r4, #48]	@ 0x30
 800cf82:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb8 <std+0x68>)
 800cf84:	6224      	str	r4, [r4, #32]
 800cf86:	429c      	cmp	r4, r3
 800cf88:	d006      	beq.n	800cf98 <std+0x48>
 800cf8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cf8e:	4294      	cmp	r4, r2
 800cf90:	d002      	beq.n	800cf98 <std+0x48>
 800cf92:	33d0      	adds	r3, #208	@ 0xd0
 800cf94:	429c      	cmp	r4, r3
 800cf96:	d105      	bne.n	800cfa4 <std+0x54>
 800cf98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cf9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfa0:	f000 b986 	b.w	800d2b0 <__retarget_lock_init_recursive>
 800cfa4:	bd10      	pop	{r4, pc}
 800cfa6:	bf00      	nop
 800cfa8:	0800d115 	.word	0x0800d115
 800cfac:	0800d137 	.word	0x0800d137
 800cfb0:	0800d16f 	.word	0x0800d16f
 800cfb4:	0800d193 	.word	0x0800d193
 800cfb8:	20000c74 	.word	0x20000c74

0800cfbc <stdio_exit_handler>:
 800cfbc:	4a02      	ldr	r2, [pc, #8]	@ (800cfc8 <stdio_exit_handler+0xc>)
 800cfbe:	4903      	ldr	r1, [pc, #12]	@ (800cfcc <stdio_exit_handler+0x10>)
 800cfc0:	4803      	ldr	r0, [pc, #12]	@ (800cfd0 <stdio_exit_handler+0x14>)
 800cfc2:	f000 b869 	b.w	800d098 <_fwalk_sglue>
 800cfc6:	bf00      	nop
 800cfc8:	20000048 	.word	0x20000048
 800cfcc:	0800ebc1 	.word	0x0800ebc1
 800cfd0:	200001c4 	.word	0x200001c4

0800cfd4 <cleanup_stdio>:
 800cfd4:	6841      	ldr	r1, [r0, #4]
 800cfd6:	4b0c      	ldr	r3, [pc, #48]	@ (800d008 <cleanup_stdio+0x34>)
 800cfd8:	4299      	cmp	r1, r3
 800cfda:	b510      	push	{r4, lr}
 800cfdc:	4604      	mov	r4, r0
 800cfde:	d001      	beq.n	800cfe4 <cleanup_stdio+0x10>
 800cfe0:	f001 fdee 	bl	800ebc0 <_fflush_r>
 800cfe4:	68a1      	ldr	r1, [r4, #8]
 800cfe6:	4b09      	ldr	r3, [pc, #36]	@ (800d00c <cleanup_stdio+0x38>)
 800cfe8:	4299      	cmp	r1, r3
 800cfea:	d002      	beq.n	800cff2 <cleanup_stdio+0x1e>
 800cfec:	4620      	mov	r0, r4
 800cfee:	f001 fde7 	bl	800ebc0 <_fflush_r>
 800cff2:	68e1      	ldr	r1, [r4, #12]
 800cff4:	4b06      	ldr	r3, [pc, #24]	@ (800d010 <cleanup_stdio+0x3c>)
 800cff6:	4299      	cmp	r1, r3
 800cff8:	d004      	beq.n	800d004 <cleanup_stdio+0x30>
 800cffa:	4620      	mov	r0, r4
 800cffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d000:	f001 bdde 	b.w	800ebc0 <_fflush_r>
 800d004:	bd10      	pop	{r4, pc}
 800d006:	bf00      	nop
 800d008:	20000c74 	.word	0x20000c74
 800d00c:	20000cdc 	.word	0x20000cdc
 800d010:	20000d44 	.word	0x20000d44

0800d014 <global_stdio_init.part.0>:
 800d014:	b510      	push	{r4, lr}
 800d016:	4b0b      	ldr	r3, [pc, #44]	@ (800d044 <global_stdio_init.part.0+0x30>)
 800d018:	4c0b      	ldr	r4, [pc, #44]	@ (800d048 <global_stdio_init.part.0+0x34>)
 800d01a:	4a0c      	ldr	r2, [pc, #48]	@ (800d04c <global_stdio_init.part.0+0x38>)
 800d01c:	601a      	str	r2, [r3, #0]
 800d01e:	4620      	mov	r0, r4
 800d020:	2200      	movs	r2, #0
 800d022:	2104      	movs	r1, #4
 800d024:	f7ff ff94 	bl	800cf50 <std>
 800d028:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d02c:	2201      	movs	r2, #1
 800d02e:	2109      	movs	r1, #9
 800d030:	f7ff ff8e 	bl	800cf50 <std>
 800d034:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d038:	2202      	movs	r2, #2
 800d03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d03e:	2112      	movs	r1, #18
 800d040:	f7ff bf86 	b.w	800cf50 <std>
 800d044:	20000dac 	.word	0x20000dac
 800d048:	20000c74 	.word	0x20000c74
 800d04c:	0800cfbd 	.word	0x0800cfbd

0800d050 <__sfp_lock_acquire>:
 800d050:	4801      	ldr	r0, [pc, #4]	@ (800d058 <__sfp_lock_acquire+0x8>)
 800d052:	f000 b92e 	b.w	800d2b2 <__retarget_lock_acquire_recursive>
 800d056:	bf00      	nop
 800d058:	20000db5 	.word	0x20000db5

0800d05c <__sfp_lock_release>:
 800d05c:	4801      	ldr	r0, [pc, #4]	@ (800d064 <__sfp_lock_release+0x8>)
 800d05e:	f000 b929 	b.w	800d2b4 <__retarget_lock_release_recursive>
 800d062:	bf00      	nop
 800d064:	20000db5 	.word	0x20000db5

0800d068 <__sinit>:
 800d068:	b510      	push	{r4, lr}
 800d06a:	4604      	mov	r4, r0
 800d06c:	f7ff fff0 	bl	800d050 <__sfp_lock_acquire>
 800d070:	6a23      	ldr	r3, [r4, #32]
 800d072:	b11b      	cbz	r3, 800d07c <__sinit+0x14>
 800d074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d078:	f7ff bff0 	b.w	800d05c <__sfp_lock_release>
 800d07c:	4b04      	ldr	r3, [pc, #16]	@ (800d090 <__sinit+0x28>)
 800d07e:	6223      	str	r3, [r4, #32]
 800d080:	4b04      	ldr	r3, [pc, #16]	@ (800d094 <__sinit+0x2c>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1f5      	bne.n	800d074 <__sinit+0xc>
 800d088:	f7ff ffc4 	bl	800d014 <global_stdio_init.part.0>
 800d08c:	e7f2      	b.n	800d074 <__sinit+0xc>
 800d08e:	bf00      	nop
 800d090:	0800cfd5 	.word	0x0800cfd5
 800d094:	20000dac 	.word	0x20000dac

0800d098 <_fwalk_sglue>:
 800d098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d09c:	4607      	mov	r7, r0
 800d09e:	4688      	mov	r8, r1
 800d0a0:	4614      	mov	r4, r2
 800d0a2:	2600      	movs	r6, #0
 800d0a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0a8:	f1b9 0901 	subs.w	r9, r9, #1
 800d0ac:	d505      	bpl.n	800d0ba <_fwalk_sglue+0x22>
 800d0ae:	6824      	ldr	r4, [r4, #0]
 800d0b0:	2c00      	cmp	r4, #0
 800d0b2:	d1f7      	bne.n	800d0a4 <_fwalk_sglue+0xc>
 800d0b4:	4630      	mov	r0, r6
 800d0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ba:	89ab      	ldrh	r3, [r5, #12]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d907      	bls.n	800d0d0 <_fwalk_sglue+0x38>
 800d0c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	d003      	beq.n	800d0d0 <_fwalk_sglue+0x38>
 800d0c8:	4629      	mov	r1, r5
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	47c0      	blx	r8
 800d0ce:	4306      	orrs	r6, r0
 800d0d0:	3568      	adds	r5, #104	@ 0x68
 800d0d2:	e7e9      	b.n	800d0a8 <_fwalk_sglue+0x10>

0800d0d4 <siprintf>:
 800d0d4:	b40e      	push	{r1, r2, r3}
 800d0d6:	b500      	push	{lr}
 800d0d8:	b09c      	sub	sp, #112	@ 0x70
 800d0da:	ab1d      	add	r3, sp, #116	@ 0x74
 800d0dc:	9002      	str	r0, [sp, #8]
 800d0de:	9006      	str	r0, [sp, #24]
 800d0e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d0e4:	4809      	ldr	r0, [pc, #36]	@ (800d10c <siprintf+0x38>)
 800d0e6:	9107      	str	r1, [sp, #28]
 800d0e8:	9104      	str	r1, [sp, #16]
 800d0ea:	4909      	ldr	r1, [pc, #36]	@ (800d110 <siprintf+0x3c>)
 800d0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0f0:	9105      	str	r1, [sp, #20]
 800d0f2:	6800      	ldr	r0, [r0, #0]
 800d0f4:	9301      	str	r3, [sp, #4]
 800d0f6:	a902      	add	r1, sp, #8
 800d0f8:	f001 fa54 	bl	800e5a4 <_svfiprintf_r>
 800d0fc:	9b02      	ldr	r3, [sp, #8]
 800d0fe:	2200      	movs	r2, #0
 800d100:	701a      	strb	r2, [r3, #0]
 800d102:	b01c      	add	sp, #112	@ 0x70
 800d104:	f85d eb04 	ldr.w	lr, [sp], #4
 800d108:	b003      	add	sp, #12
 800d10a:	4770      	bx	lr
 800d10c:	200001c0 	.word	0x200001c0
 800d110:	ffff0208 	.word	0xffff0208

0800d114 <__sread>:
 800d114:	b510      	push	{r4, lr}
 800d116:	460c      	mov	r4, r1
 800d118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d11c:	f000 f87a 	bl	800d214 <_read_r>
 800d120:	2800      	cmp	r0, #0
 800d122:	bfab      	itete	ge
 800d124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d126:	89a3      	ldrhlt	r3, [r4, #12]
 800d128:	181b      	addge	r3, r3, r0
 800d12a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d12e:	bfac      	ite	ge
 800d130:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d132:	81a3      	strhlt	r3, [r4, #12]
 800d134:	bd10      	pop	{r4, pc}

0800d136 <__swrite>:
 800d136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d13a:	461f      	mov	r7, r3
 800d13c:	898b      	ldrh	r3, [r1, #12]
 800d13e:	05db      	lsls	r3, r3, #23
 800d140:	4605      	mov	r5, r0
 800d142:	460c      	mov	r4, r1
 800d144:	4616      	mov	r6, r2
 800d146:	d505      	bpl.n	800d154 <__swrite+0x1e>
 800d148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d14c:	2302      	movs	r3, #2
 800d14e:	2200      	movs	r2, #0
 800d150:	f000 f84e 	bl	800d1f0 <_lseek_r>
 800d154:	89a3      	ldrh	r3, [r4, #12]
 800d156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d15a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d15e:	81a3      	strh	r3, [r4, #12]
 800d160:	4632      	mov	r2, r6
 800d162:	463b      	mov	r3, r7
 800d164:	4628      	mov	r0, r5
 800d166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d16a:	f000 b865 	b.w	800d238 <_write_r>

0800d16e <__sseek>:
 800d16e:	b510      	push	{r4, lr}
 800d170:	460c      	mov	r4, r1
 800d172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d176:	f000 f83b 	bl	800d1f0 <_lseek_r>
 800d17a:	1c43      	adds	r3, r0, #1
 800d17c:	89a3      	ldrh	r3, [r4, #12]
 800d17e:	bf15      	itete	ne
 800d180:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d18a:	81a3      	strheq	r3, [r4, #12]
 800d18c:	bf18      	it	ne
 800d18e:	81a3      	strhne	r3, [r4, #12]
 800d190:	bd10      	pop	{r4, pc}

0800d192 <__sclose>:
 800d192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d196:	f000 b81b 	b.w	800d1d0 <_close_r>

0800d19a <memset>:
 800d19a:	4402      	add	r2, r0
 800d19c:	4603      	mov	r3, r0
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d100      	bne.n	800d1a4 <memset+0xa>
 800d1a2:	4770      	bx	lr
 800d1a4:	f803 1b01 	strb.w	r1, [r3], #1
 800d1a8:	e7f9      	b.n	800d19e <memset+0x4>

0800d1aa <strncmp>:
 800d1aa:	b510      	push	{r4, lr}
 800d1ac:	b16a      	cbz	r2, 800d1ca <strncmp+0x20>
 800d1ae:	3901      	subs	r1, #1
 800d1b0:	1884      	adds	r4, r0, r2
 800d1b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d103      	bne.n	800d1c6 <strncmp+0x1c>
 800d1be:	42a0      	cmp	r0, r4
 800d1c0:	d001      	beq.n	800d1c6 <strncmp+0x1c>
 800d1c2:	2a00      	cmp	r2, #0
 800d1c4:	d1f5      	bne.n	800d1b2 <strncmp+0x8>
 800d1c6:	1ad0      	subs	r0, r2, r3
 800d1c8:	bd10      	pop	{r4, pc}
 800d1ca:	4610      	mov	r0, r2
 800d1cc:	e7fc      	b.n	800d1c8 <strncmp+0x1e>
	...

0800d1d0 <_close_r>:
 800d1d0:	b538      	push	{r3, r4, r5, lr}
 800d1d2:	4d06      	ldr	r5, [pc, #24]	@ (800d1ec <_close_r+0x1c>)
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	4604      	mov	r4, r0
 800d1d8:	4608      	mov	r0, r1
 800d1da:	602b      	str	r3, [r5, #0]
 800d1dc:	f7f5 ffd2 	bl	8003184 <_close>
 800d1e0:	1c43      	adds	r3, r0, #1
 800d1e2:	d102      	bne.n	800d1ea <_close_r+0x1a>
 800d1e4:	682b      	ldr	r3, [r5, #0]
 800d1e6:	b103      	cbz	r3, 800d1ea <_close_r+0x1a>
 800d1e8:	6023      	str	r3, [r4, #0]
 800d1ea:	bd38      	pop	{r3, r4, r5, pc}
 800d1ec:	20000db0 	.word	0x20000db0

0800d1f0 <_lseek_r>:
 800d1f0:	b538      	push	{r3, r4, r5, lr}
 800d1f2:	4d07      	ldr	r5, [pc, #28]	@ (800d210 <_lseek_r+0x20>)
 800d1f4:	4604      	mov	r4, r0
 800d1f6:	4608      	mov	r0, r1
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	602a      	str	r2, [r5, #0]
 800d1fe:	461a      	mov	r2, r3
 800d200:	f7f5 ffe7 	bl	80031d2 <_lseek>
 800d204:	1c43      	adds	r3, r0, #1
 800d206:	d102      	bne.n	800d20e <_lseek_r+0x1e>
 800d208:	682b      	ldr	r3, [r5, #0]
 800d20a:	b103      	cbz	r3, 800d20e <_lseek_r+0x1e>
 800d20c:	6023      	str	r3, [r4, #0]
 800d20e:	bd38      	pop	{r3, r4, r5, pc}
 800d210:	20000db0 	.word	0x20000db0

0800d214 <_read_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	4d07      	ldr	r5, [pc, #28]	@ (800d234 <_read_r+0x20>)
 800d218:	4604      	mov	r4, r0
 800d21a:	4608      	mov	r0, r1
 800d21c:	4611      	mov	r1, r2
 800d21e:	2200      	movs	r2, #0
 800d220:	602a      	str	r2, [r5, #0]
 800d222:	461a      	mov	r2, r3
 800d224:	f7f5 ff75 	bl	8003112 <_read>
 800d228:	1c43      	adds	r3, r0, #1
 800d22a:	d102      	bne.n	800d232 <_read_r+0x1e>
 800d22c:	682b      	ldr	r3, [r5, #0]
 800d22e:	b103      	cbz	r3, 800d232 <_read_r+0x1e>
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	bd38      	pop	{r3, r4, r5, pc}
 800d234:	20000db0 	.word	0x20000db0

0800d238 <_write_r>:
 800d238:	b538      	push	{r3, r4, r5, lr}
 800d23a:	4d07      	ldr	r5, [pc, #28]	@ (800d258 <_write_r+0x20>)
 800d23c:	4604      	mov	r4, r0
 800d23e:	4608      	mov	r0, r1
 800d240:	4611      	mov	r1, r2
 800d242:	2200      	movs	r2, #0
 800d244:	602a      	str	r2, [r5, #0]
 800d246:	461a      	mov	r2, r3
 800d248:	f7f5 ff80 	bl	800314c <_write>
 800d24c:	1c43      	adds	r3, r0, #1
 800d24e:	d102      	bne.n	800d256 <_write_r+0x1e>
 800d250:	682b      	ldr	r3, [r5, #0]
 800d252:	b103      	cbz	r3, 800d256 <_write_r+0x1e>
 800d254:	6023      	str	r3, [r4, #0]
 800d256:	bd38      	pop	{r3, r4, r5, pc}
 800d258:	20000db0 	.word	0x20000db0

0800d25c <__errno>:
 800d25c:	4b01      	ldr	r3, [pc, #4]	@ (800d264 <__errno+0x8>)
 800d25e:	6818      	ldr	r0, [r3, #0]
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	200001c0 	.word	0x200001c0

0800d268 <__libc_init_array>:
 800d268:	b570      	push	{r4, r5, r6, lr}
 800d26a:	4d0d      	ldr	r5, [pc, #52]	@ (800d2a0 <__libc_init_array+0x38>)
 800d26c:	4c0d      	ldr	r4, [pc, #52]	@ (800d2a4 <__libc_init_array+0x3c>)
 800d26e:	1b64      	subs	r4, r4, r5
 800d270:	10a4      	asrs	r4, r4, #2
 800d272:	2600      	movs	r6, #0
 800d274:	42a6      	cmp	r6, r4
 800d276:	d109      	bne.n	800d28c <__libc_init_array+0x24>
 800d278:	4d0b      	ldr	r5, [pc, #44]	@ (800d2a8 <__libc_init_array+0x40>)
 800d27a:	4c0c      	ldr	r4, [pc, #48]	@ (800d2ac <__libc_init_array+0x44>)
 800d27c:	f002 f9ce 	bl	800f61c <_init>
 800d280:	1b64      	subs	r4, r4, r5
 800d282:	10a4      	asrs	r4, r4, #2
 800d284:	2600      	movs	r6, #0
 800d286:	42a6      	cmp	r6, r4
 800d288:	d105      	bne.n	800d296 <__libc_init_array+0x2e>
 800d28a:	bd70      	pop	{r4, r5, r6, pc}
 800d28c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d290:	4798      	blx	r3
 800d292:	3601      	adds	r6, #1
 800d294:	e7ee      	b.n	800d274 <__libc_init_array+0xc>
 800d296:	f855 3b04 	ldr.w	r3, [r5], #4
 800d29a:	4798      	blx	r3
 800d29c:	3601      	adds	r6, #1
 800d29e:	e7f2      	b.n	800d286 <__libc_init_array+0x1e>
 800d2a0:	0800fa70 	.word	0x0800fa70
 800d2a4:	0800fa70 	.word	0x0800fa70
 800d2a8:	0800fa70 	.word	0x0800fa70
 800d2ac:	0800fa74 	.word	0x0800fa74

0800d2b0 <__retarget_lock_init_recursive>:
 800d2b0:	4770      	bx	lr

0800d2b2 <__retarget_lock_acquire_recursive>:
 800d2b2:	4770      	bx	lr

0800d2b4 <__retarget_lock_release_recursive>:
 800d2b4:	4770      	bx	lr

0800d2b6 <memcpy>:
 800d2b6:	440a      	add	r2, r1
 800d2b8:	4291      	cmp	r1, r2
 800d2ba:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2be:	d100      	bne.n	800d2c2 <memcpy+0xc>
 800d2c0:	4770      	bx	lr
 800d2c2:	b510      	push	{r4, lr}
 800d2c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2cc:	4291      	cmp	r1, r2
 800d2ce:	d1f9      	bne.n	800d2c4 <memcpy+0xe>
 800d2d0:	bd10      	pop	{r4, pc}
 800d2d2:	0000      	movs	r0, r0
 800d2d4:	0000      	movs	r0, r0
	...

0800d2d8 <nan>:
 800d2d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d2e0 <nan+0x8>
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	00000000 	.word	0x00000000
 800d2e4:	7ff80000 	.word	0x7ff80000

0800d2e8 <_free_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4605      	mov	r5, r0
 800d2ec:	2900      	cmp	r1, #0
 800d2ee:	d041      	beq.n	800d374 <_free_r+0x8c>
 800d2f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2f4:	1f0c      	subs	r4, r1, #4
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	bfb8      	it	lt
 800d2fa:	18e4      	addlt	r4, r4, r3
 800d2fc:	f000 fc2c 	bl	800db58 <__malloc_lock>
 800d300:	4a1d      	ldr	r2, [pc, #116]	@ (800d378 <_free_r+0x90>)
 800d302:	6813      	ldr	r3, [r2, #0]
 800d304:	b933      	cbnz	r3, 800d314 <_free_r+0x2c>
 800d306:	6063      	str	r3, [r4, #4]
 800d308:	6014      	str	r4, [r2, #0]
 800d30a:	4628      	mov	r0, r5
 800d30c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d310:	f000 bc28 	b.w	800db64 <__malloc_unlock>
 800d314:	42a3      	cmp	r3, r4
 800d316:	d908      	bls.n	800d32a <_free_r+0x42>
 800d318:	6820      	ldr	r0, [r4, #0]
 800d31a:	1821      	adds	r1, r4, r0
 800d31c:	428b      	cmp	r3, r1
 800d31e:	bf01      	itttt	eq
 800d320:	6819      	ldreq	r1, [r3, #0]
 800d322:	685b      	ldreq	r3, [r3, #4]
 800d324:	1809      	addeq	r1, r1, r0
 800d326:	6021      	streq	r1, [r4, #0]
 800d328:	e7ed      	b.n	800d306 <_free_r+0x1e>
 800d32a:	461a      	mov	r2, r3
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	b10b      	cbz	r3, 800d334 <_free_r+0x4c>
 800d330:	42a3      	cmp	r3, r4
 800d332:	d9fa      	bls.n	800d32a <_free_r+0x42>
 800d334:	6811      	ldr	r1, [r2, #0]
 800d336:	1850      	adds	r0, r2, r1
 800d338:	42a0      	cmp	r0, r4
 800d33a:	d10b      	bne.n	800d354 <_free_r+0x6c>
 800d33c:	6820      	ldr	r0, [r4, #0]
 800d33e:	4401      	add	r1, r0
 800d340:	1850      	adds	r0, r2, r1
 800d342:	4283      	cmp	r3, r0
 800d344:	6011      	str	r1, [r2, #0]
 800d346:	d1e0      	bne.n	800d30a <_free_r+0x22>
 800d348:	6818      	ldr	r0, [r3, #0]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	6053      	str	r3, [r2, #4]
 800d34e:	4408      	add	r0, r1
 800d350:	6010      	str	r0, [r2, #0]
 800d352:	e7da      	b.n	800d30a <_free_r+0x22>
 800d354:	d902      	bls.n	800d35c <_free_r+0x74>
 800d356:	230c      	movs	r3, #12
 800d358:	602b      	str	r3, [r5, #0]
 800d35a:	e7d6      	b.n	800d30a <_free_r+0x22>
 800d35c:	6820      	ldr	r0, [r4, #0]
 800d35e:	1821      	adds	r1, r4, r0
 800d360:	428b      	cmp	r3, r1
 800d362:	bf04      	itt	eq
 800d364:	6819      	ldreq	r1, [r3, #0]
 800d366:	685b      	ldreq	r3, [r3, #4]
 800d368:	6063      	str	r3, [r4, #4]
 800d36a:	bf04      	itt	eq
 800d36c:	1809      	addeq	r1, r1, r0
 800d36e:	6021      	streq	r1, [r4, #0]
 800d370:	6054      	str	r4, [r2, #4]
 800d372:	e7ca      	b.n	800d30a <_free_r+0x22>
 800d374:	bd38      	pop	{r3, r4, r5, pc}
 800d376:	bf00      	nop
 800d378:	20000dbc 	.word	0x20000dbc

0800d37c <rshift>:
 800d37c:	6903      	ldr	r3, [r0, #16]
 800d37e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d386:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d38a:	f100 0414 	add.w	r4, r0, #20
 800d38e:	dd45      	ble.n	800d41c <rshift+0xa0>
 800d390:	f011 011f 	ands.w	r1, r1, #31
 800d394:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d398:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d39c:	d10c      	bne.n	800d3b8 <rshift+0x3c>
 800d39e:	f100 0710 	add.w	r7, r0, #16
 800d3a2:	4629      	mov	r1, r5
 800d3a4:	42b1      	cmp	r1, r6
 800d3a6:	d334      	bcc.n	800d412 <rshift+0x96>
 800d3a8:	1a9b      	subs	r3, r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	1eea      	subs	r2, r5, #3
 800d3ae:	4296      	cmp	r6, r2
 800d3b0:	bf38      	it	cc
 800d3b2:	2300      	movcc	r3, #0
 800d3b4:	4423      	add	r3, r4
 800d3b6:	e015      	b.n	800d3e4 <rshift+0x68>
 800d3b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d3bc:	f1c1 0820 	rsb	r8, r1, #32
 800d3c0:	40cf      	lsrs	r7, r1
 800d3c2:	f105 0e04 	add.w	lr, r5, #4
 800d3c6:	46a1      	mov	r9, r4
 800d3c8:	4576      	cmp	r6, lr
 800d3ca:	46f4      	mov	ip, lr
 800d3cc:	d815      	bhi.n	800d3fa <rshift+0x7e>
 800d3ce:	1a9a      	subs	r2, r3, r2
 800d3d0:	0092      	lsls	r2, r2, #2
 800d3d2:	3a04      	subs	r2, #4
 800d3d4:	3501      	adds	r5, #1
 800d3d6:	42ae      	cmp	r6, r5
 800d3d8:	bf38      	it	cc
 800d3da:	2200      	movcc	r2, #0
 800d3dc:	18a3      	adds	r3, r4, r2
 800d3de:	50a7      	str	r7, [r4, r2]
 800d3e0:	b107      	cbz	r7, 800d3e4 <rshift+0x68>
 800d3e2:	3304      	adds	r3, #4
 800d3e4:	1b1a      	subs	r2, r3, r4
 800d3e6:	42a3      	cmp	r3, r4
 800d3e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d3ec:	bf08      	it	eq
 800d3ee:	2300      	moveq	r3, #0
 800d3f0:	6102      	str	r2, [r0, #16]
 800d3f2:	bf08      	it	eq
 800d3f4:	6143      	streq	r3, [r0, #20]
 800d3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3fa:	f8dc c000 	ldr.w	ip, [ip]
 800d3fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800d402:	ea4c 0707 	orr.w	r7, ip, r7
 800d406:	f849 7b04 	str.w	r7, [r9], #4
 800d40a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d40e:	40cf      	lsrs	r7, r1
 800d410:	e7da      	b.n	800d3c8 <rshift+0x4c>
 800d412:	f851 cb04 	ldr.w	ip, [r1], #4
 800d416:	f847 cf04 	str.w	ip, [r7, #4]!
 800d41a:	e7c3      	b.n	800d3a4 <rshift+0x28>
 800d41c:	4623      	mov	r3, r4
 800d41e:	e7e1      	b.n	800d3e4 <rshift+0x68>

0800d420 <__hexdig_fun>:
 800d420:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d424:	2b09      	cmp	r3, #9
 800d426:	d802      	bhi.n	800d42e <__hexdig_fun+0xe>
 800d428:	3820      	subs	r0, #32
 800d42a:	b2c0      	uxtb	r0, r0
 800d42c:	4770      	bx	lr
 800d42e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d432:	2b05      	cmp	r3, #5
 800d434:	d801      	bhi.n	800d43a <__hexdig_fun+0x1a>
 800d436:	3847      	subs	r0, #71	@ 0x47
 800d438:	e7f7      	b.n	800d42a <__hexdig_fun+0xa>
 800d43a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d43e:	2b05      	cmp	r3, #5
 800d440:	d801      	bhi.n	800d446 <__hexdig_fun+0x26>
 800d442:	3827      	subs	r0, #39	@ 0x27
 800d444:	e7f1      	b.n	800d42a <__hexdig_fun+0xa>
 800d446:	2000      	movs	r0, #0
 800d448:	4770      	bx	lr
	...

0800d44c <__gethex>:
 800d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d450:	b085      	sub	sp, #20
 800d452:	468a      	mov	sl, r1
 800d454:	9302      	str	r3, [sp, #8]
 800d456:	680b      	ldr	r3, [r1, #0]
 800d458:	9001      	str	r0, [sp, #4]
 800d45a:	4690      	mov	r8, r2
 800d45c:	1c9c      	adds	r4, r3, #2
 800d45e:	46a1      	mov	r9, r4
 800d460:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d464:	2830      	cmp	r0, #48	@ 0x30
 800d466:	d0fa      	beq.n	800d45e <__gethex+0x12>
 800d468:	eba9 0303 	sub.w	r3, r9, r3
 800d46c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d470:	f7ff ffd6 	bl	800d420 <__hexdig_fun>
 800d474:	4605      	mov	r5, r0
 800d476:	2800      	cmp	r0, #0
 800d478:	d168      	bne.n	800d54c <__gethex+0x100>
 800d47a:	49a0      	ldr	r1, [pc, #640]	@ (800d6fc <__gethex+0x2b0>)
 800d47c:	2201      	movs	r2, #1
 800d47e:	4648      	mov	r0, r9
 800d480:	f7ff fe93 	bl	800d1aa <strncmp>
 800d484:	4607      	mov	r7, r0
 800d486:	2800      	cmp	r0, #0
 800d488:	d167      	bne.n	800d55a <__gethex+0x10e>
 800d48a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d48e:	4626      	mov	r6, r4
 800d490:	f7ff ffc6 	bl	800d420 <__hexdig_fun>
 800d494:	2800      	cmp	r0, #0
 800d496:	d062      	beq.n	800d55e <__gethex+0x112>
 800d498:	4623      	mov	r3, r4
 800d49a:	7818      	ldrb	r0, [r3, #0]
 800d49c:	2830      	cmp	r0, #48	@ 0x30
 800d49e:	4699      	mov	r9, r3
 800d4a0:	f103 0301 	add.w	r3, r3, #1
 800d4a4:	d0f9      	beq.n	800d49a <__gethex+0x4e>
 800d4a6:	f7ff ffbb 	bl	800d420 <__hexdig_fun>
 800d4aa:	fab0 f580 	clz	r5, r0
 800d4ae:	096d      	lsrs	r5, r5, #5
 800d4b0:	f04f 0b01 	mov.w	fp, #1
 800d4b4:	464a      	mov	r2, r9
 800d4b6:	4616      	mov	r6, r2
 800d4b8:	3201      	adds	r2, #1
 800d4ba:	7830      	ldrb	r0, [r6, #0]
 800d4bc:	f7ff ffb0 	bl	800d420 <__hexdig_fun>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d1f8      	bne.n	800d4b6 <__gethex+0x6a>
 800d4c4:	498d      	ldr	r1, [pc, #564]	@ (800d6fc <__gethex+0x2b0>)
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	f7ff fe6e 	bl	800d1aa <strncmp>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	d13f      	bne.n	800d552 <__gethex+0x106>
 800d4d2:	b944      	cbnz	r4, 800d4e6 <__gethex+0x9a>
 800d4d4:	1c74      	adds	r4, r6, #1
 800d4d6:	4622      	mov	r2, r4
 800d4d8:	4616      	mov	r6, r2
 800d4da:	3201      	adds	r2, #1
 800d4dc:	7830      	ldrb	r0, [r6, #0]
 800d4de:	f7ff ff9f 	bl	800d420 <__hexdig_fun>
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d1f8      	bne.n	800d4d8 <__gethex+0x8c>
 800d4e6:	1ba4      	subs	r4, r4, r6
 800d4e8:	00a7      	lsls	r7, r4, #2
 800d4ea:	7833      	ldrb	r3, [r6, #0]
 800d4ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d4f0:	2b50      	cmp	r3, #80	@ 0x50
 800d4f2:	d13e      	bne.n	800d572 <__gethex+0x126>
 800d4f4:	7873      	ldrb	r3, [r6, #1]
 800d4f6:	2b2b      	cmp	r3, #43	@ 0x2b
 800d4f8:	d033      	beq.n	800d562 <__gethex+0x116>
 800d4fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800d4fc:	d034      	beq.n	800d568 <__gethex+0x11c>
 800d4fe:	1c71      	adds	r1, r6, #1
 800d500:	2400      	movs	r4, #0
 800d502:	7808      	ldrb	r0, [r1, #0]
 800d504:	f7ff ff8c 	bl	800d420 <__hexdig_fun>
 800d508:	1e43      	subs	r3, r0, #1
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	2b18      	cmp	r3, #24
 800d50e:	d830      	bhi.n	800d572 <__gethex+0x126>
 800d510:	f1a0 0210 	sub.w	r2, r0, #16
 800d514:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d518:	f7ff ff82 	bl	800d420 <__hexdig_fun>
 800d51c:	f100 3cff 	add.w	ip, r0, #4294967295
 800d520:	fa5f fc8c 	uxtb.w	ip, ip
 800d524:	f1bc 0f18 	cmp.w	ip, #24
 800d528:	f04f 030a 	mov.w	r3, #10
 800d52c:	d91e      	bls.n	800d56c <__gethex+0x120>
 800d52e:	b104      	cbz	r4, 800d532 <__gethex+0xe6>
 800d530:	4252      	negs	r2, r2
 800d532:	4417      	add	r7, r2
 800d534:	f8ca 1000 	str.w	r1, [sl]
 800d538:	b1ed      	cbz	r5, 800d576 <__gethex+0x12a>
 800d53a:	f1bb 0f00 	cmp.w	fp, #0
 800d53e:	bf0c      	ite	eq
 800d540:	2506      	moveq	r5, #6
 800d542:	2500      	movne	r5, #0
 800d544:	4628      	mov	r0, r5
 800d546:	b005      	add	sp, #20
 800d548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54c:	2500      	movs	r5, #0
 800d54e:	462c      	mov	r4, r5
 800d550:	e7b0      	b.n	800d4b4 <__gethex+0x68>
 800d552:	2c00      	cmp	r4, #0
 800d554:	d1c7      	bne.n	800d4e6 <__gethex+0x9a>
 800d556:	4627      	mov	r7, r4
 800d558:	e7c7      	b.n	800d4ea <__gethex+0x9e>
 800d55a:	464e      	mov	r6, r9
 800d55c:	462f      	mov	r7, r5
 800d55e:	2501      	movs	r5, #1
 800d560:	e7c3      	b.n	800d4ea <__gethex+0x9e>
 800d562:	2400      	movs	r4, #0
 800d564:	1cb1      	adds	r1, r6, #2
 800d566:	e7cc      	b.n	800d502 <__gethex+0xb6>
 800d568:	2401      	movs	r4, #1
 800d56a:	e7fb      	b.n	800d564 <__gethex+0x118>
 800d56c:	fb03 0002 	mla	r0, r3, r2, r0
 800d570:	e7ce      	b.n	800d510 <__gethex+0xc4>
 800d572:	4631      	mov	r1, r6
 800d574:	e7de      	b.n	800d534 <__gethex+0xe8>
 800d576:	eba6 0309 	sub.w	r3, r6, r9
 800d57a:	3b01      	subs	r3, #1
 800d57c:	4629      	mov	r1, r5
 800d57e:	2b07      	cmp	r3, #7
 800d580:	dc0a      	bgt.n	800d598 <__gethex+0x14c>
 800d582:	9801      	ldr	r0, [sp, #4]
 800d584:	f000 faf4 	bl	800db70 <_Balloc>
 800d588:	4604      	mov	r4, r0
 800d58a:	b940      	cbnz	r0, 800d59e <__gethex+0x152>
 800d58c:	4b5c      	ldr	r3, [pc, #368]	@ (800d700 <__gethex+0x2b4>)
 800d58e:	4602      	mov	r2, r0
 800d590:	21e4      	movs	r1, #228	@ 0xe4
 800d592:	485c      	ldr	r0, [pc, #368]	@ (800d704 <__gethex+0x2b8>)
 800d594:	f001 fb66 	bl	800ec64 <__assert_func>
 800d598:	3101      	adds	r1, #1
 800d59a:	105b      	asrs	r3, r3, #1
 800d59c:	e7ef      	b.n	800d57e <__gethex+0x132>
 800d59e:	f100 0a14 	add.w	sl, r0, #20
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	4655      	mov	r5, sl
 800d5a6:	469b      	mov	fp, r3
 800d5a8:	45b1      	cmp	r9, r6
 800d5aa:	d337      	bcc.n	800d61c <__gethex+0x1d0>
 800d5ac:	f845 bb04 	str.w	fp, [r5], #4
 800d5b0:	eba5 050a 	sub.w	r5, r5, sl
 800d5b4:	10ad      	asrs	r5, r5, #2
 800d5b6:	6125      	str	r5, [r4, #16]
 800d5b8:	4658      	mov	r0, fp
 800d5ba:	f000 fbcb 	bl	800dd54 <__hi0bits>
 800d5be:	016d      	lsls	r5, r5, #5
 800d5c0:	f8d8 6000 	ldr.w	r6, [r8]
 800d5c4:	1a2d      	subs	r5, r5, r0
 800d5c6:	42b5      	cmp	r5, r6
 800d5c8:	dd54      	ble.n	800d674 <__gethex+0x228>
 800d5ca:	1bad      	subs	r5, r5, r6
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f000 ff5f 	bl	800e492 <__any_on>
 800d5d4:	4681      	mov	r9, r0
 800d5d6:	b178      	cbz	r0, 800d5f8 <__gethex+0x1ac>
 800d5d8:	1e6b      	subs	r3, r5, #1
 800d5da:	1159      	asrs	r1, r3, #5
 800d5dc:	f003 021f 	and.w	r2, r3, #31
 800d5e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d5e4:	f04f 0901 	mov.w	r9, #1
 800d5e8:	fa09 f202 	lsl.w	r2, r9, r2
 800d5ec:	420a      	tst	r2, r1
 800d5ee:	d003      	beq.n	800d5f8 <__gethex+0x1ac>
 800d5f0:	454b      	cmp	r3, r9
 800d5f2:	dc36      	bgt.n	800d662 <__gethex+0x216>
 800d5f4:	f04f 0902 	mov.w	r9, #2
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f7ff febe 	bl	800d37c <rshift>
 800d600:	442f      	add	r7, r5
 800d602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d606:	42bb      	cmp	r3, r7
 800d608:	da42      	bge.n	800d690 <__gethex+0x244>
 800d60a:	9801      	ldr	r0, [sp, #4]
 800d60c:	4621      	mov	r1, r4
 800d60e:	f000 faef 	bl	800dbf0 <_Bfree>
 800d612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d614:	2300      	movs	r3, #0
 800d616:	6013      	str	r3, [r2, #0]
 800d618:	25a3      	movs	r5, #163	@ 0xa3
 800d61a:	e793      	b.n	800d544 <__gethex+0xf8>
 800d61c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d620:	2a2e      	cmp	r2, #46	@ 0x2e
 800d622:	d012      	beq.n	800d64a <__gethex+0x1fe>
 800d624:	2b20      	cmp	r3, #32
 800d626:	d104      	bne.n	800d632 <__gethex+0x1e6>
 800d628:	f845 bb04 	str.w	fp, [r5], #4
 800d62c:	f04f 0b00 	mov.w	fp, #0
 800d630:	465b      	mov	r3, fp
 800d632:	7830      	ldrb	r0, [r6, #0]
 800d634:	9303      	str	r3, [sp, #12]
 800d636:	f7ff fef3 	bl	800d420 <__hexdig_fun>
 800d63a:	9b03      	ldr	r3, [sp, #12]
 800d63c:	f000 000f 	and.w	r0, r0, #15
 800d640:	4098      	lsls	r0, r3
 800d642:	ea4b 0b00 	orr.w	fp, fp, r0
 800d646:	3304      	adds	r3, #4
 800d648:	e7ae      	b.n	800d5a8 <__gethex+0x15c>
 800d64a:	45b1      	cmp	r9, r6
 800d64c:	d8ea      	bhi.n	800d624 <__gethex+0x1d8>
 800d64e:	492b      	ldr	r1, [pc, #172]	@ (800d6fc <__gethex+0x2b0>)
 800d650:	9303      	str	r3, [sp, #12]
 800d652:	2201      	movs	r2, #1
 800d654:	4630      	mov	r0, r6
 800d656:	f7ff fda8 	bl	800d1aa <strncmp>
 800d65a:	9b03      	ldr	r3, [sp, #12]
 800d65c:	2800      	cmp	r0, #0
 800d65e:	d1e1      	bne.n	800d624 <__gethex+0x1d8>
 800d660:	e7a2      	b.n	800d5a8 <__gethex+0x15c>
 800d662:	1ea9      	subs	r1, r5, #2
 800d664:	4620      	mov	r0, r4
 800d666:	f000 ff14 	bl	800e492 <__any_on>
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d0c2      	beq.n	800d5f4 <__gethex+0x1a8>
 800d66e:	f04f 0903 	mov.w	r9, #3
 800d672:	e7c1      	b.n	800d5f8 <__gethex+0x1ac>
 800d674:	da09      	bge.n	800d68a <__gethex+0x23e>
 800d676:	1b75      	subs	r5, r6, r5
 800d678:	4621      	mov	r1, r4
 800d67a:	9801      	ldr	r0, [sp, #4]
 800d67c:	462a      	mov	r2, r5
 800d67e:	f000 fccf 	bl	800e020 <__lshift>
 800d682:	1b7f      	subs	r7, r7, r5
 800d684:	4604      	mov	r4, r0
 800d686:	f100 0a14 	add.w	sl, r0, #20
 800d68a:	f04f 0900 	mov.w	r9, #0
 800d68e:	e7b8      	b.n	800d602 <__gethex+0x1b6>
 800d690:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d694:	42bd      	cmp	r5, r7
 800d696:	dd6f      	ble.n	800d778 <__gethex+0x32c>
 800d698:	1bed      	subs	r5, r5, r7
 800d69a:	42ae      	cmp	r6, r5
 800d69c:	dc34      	bgt.n	800d708 <__gethex+0x2bc>
 800d69e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d022      	beq.n	800d6ec <__gethex+0x2a0>
 800d6a6:	2b03      	cmp	r3, #3
 800d6a8:	d024      	beq.n	800d6f4 <__gethex+0x2a8>
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d115      	bne.n	800d6da <__gethex+0x28e>
 800d6ae:	42ae      	cmp	r6, r5
 800d6b0:	d113      	bne.n	800d6da <__gethex+0x28e>
 800d6b2:	2e01      	cmp	r6, #1
 800d6b4:	d10b      	bne.n	800d6ce <__gethex+0x282>
 800d6b6:	9a02      	ldr	r2, [sp, #8]
 800d6b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d6bc:	6013      	str	r3, [r2, #0]
 800d6be:	2301      	movs	r3, #1
 800d6c0:	6123      	str	r3, [r4, #16]
 800d6c2:	f8ca 3000 	str.w	r3, [sl]
 800d6c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6c8:	2562      	movs	r5, #98	@ 0x62
 800d6ca:	601c      	str	r4, [r3, #0]
 800d6cc:	e73a      	b.n	800d544 <__gethex+0xf8>
 800d6ce:	1e71      	subs	r1, r6, #1
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f000 fede 	bl	800e492 <__any_on>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	d1ed      	bne.n	800d6b6 <__gethex+0x26a>
 800d6da:	9801      	ldr	r0, [sp, #4]
 800d6dc:	4621      	mov	r1, r4
 800d6de:	f000 fa87 	bl	800dbf0 <_Bfree>
 800d6e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	6013      	str	r3, [r2, #0]
 800d6e8:	2550      	movs	r5, #80	@ 0x50
 800d6ea:	e72b      	b.n	800d544 <__gethex+0xf8>
 800d6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d1f3      	bne.n	800d6da <__gethex+0x28e>
 800d6f2:	e7e0      	b.n	800d6b6 <__gethex+0x26a>
 800d6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d1dd      	bne.n	800d6b6 <__gethex+0x26a>
 800d6fa:	e7ee      	b.n	800d6da <__gethex+0x28e>
 800d6fc:	0800f6a0 	.word	0x0800f6a0
 800d700:	0800f708 	.word	0x0800f708
 800d704:	0800f719 	.word	0x0800f719
 800d708:	1e6f      	subs	r7, r5, #1
 800d70a:	f1b9 0f00 	cmp.w	r9, #0
 800d70e:	d130      	bne.n	800d772 <__gethex+0x326>
 800d710:	b127      	cbz	r7, 800d71c <__gethex+0x2d0>
 800d712:	4639      	mov	r1, r7
 800d714:	4620      	mov	r0, r4
 800d716:	f000 febc 	bl	800e492 <__any_on>
 800d71a:	4681      	mov	r9, r0
 800d71c:	117a      	asrs	r2, r7, #5
 800d71e:	2301      	movs	r3, #1
 800d720:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d724:	f007 071f 	and.w	r7, r7, #31
 800d728:	40bb      	lsls	r3, r7
 800d72a:	4213      	tst	r3, r2
 800d72c:	4629      	mov	r1, r5
 800d72e:	4620      	mov	r0, r4
 800d730:	bf18      	it	ne
 800d732:	f049 0902 	orrne.w	r9, r9, #2
 800d736:	f7ff fe21 	bl	800d37c <rshift>
 800d73a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d73e:	1b76      	subs	r6, r6, r5
 800d740:	2502      	movs	r5, #2
 800d742:	f1b9 0f00 	cmp.w	r9, #0
 800d746:	d047      	beq.n	800d7d8 <__gethex+0x38c>
 800d748:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d015      	beq.n	800d77c <__gethex+0x330>
 800d750:	2b03      	cmp	r3, #3
 800d752:	d017      	beq.n	800d784 <__gethex+0x338>
 800d754:	2b01      	cmp	r3, #1
 800d756:	d109      	bne.n	800d76c <__gethex+0x320>
 800d758:	f019 0f02 	tst.w	r9, #2
 800d75c:	d006      	beq.n	800d76c <__gethex+0x320>
 800d75e:	f8da 3000 	ldr.w	r3, [sl]
 800d762:	ea49 0903 	orr.w	r9, r9, r3
 800d766:	f019 0f01 	tst.w	r9, #1
 800d76a:	d10e      	bne.n	800d78a <__gethex+0x33e>
 800d76c:	f045 0510 	orr.w	r5, r5, #16
 800d770:	e032      	b.n	800d7d8 <__gethex+0x38c>
 800d772:	f04f 0901 	mov.w	r9, #1
 800d776:	e7d1      	b.n	800d71c <__gethex+0x2d0>
 800d778:	2501      	movs	r5, #1
 800d77a:	e7e2      	b.n	800d742 <__gethex+0x2f6>
 800d77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d77e:	f1c3 0301 	rsb	r3, r3, #1
 800d782:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d786:	2b00      	cmp	r3, #0
 800d788:	d0f0      	beq.n	800d76c <__gethex+0x320>
 800d78a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d78e:	f104 0314 	add.w	r3, r4, #20
 800d792:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d796:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d79a:	f04f 0c00 	mov.w	ip, #0
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d7a8:	d01b      	beq.n	800d7e2 <__gethex+0x396>
 800d7aa:	3201      	adds	r2, #1
 800d7ac:	6002      	str	r2, [r0, #0]
 800d7ae:	2d02      	cmp	r5, #2
 800d7b0:	f104 0314 	add.w	r3, r4, #20
 800d7b4:	d13c      	bne.n	800d830 <__gethex+0x3e4>
 800d7b6:	f8d8 2000 	ldr.w	r2, [r8]
 800d7ba:	3a01      	subs	r2, #1
 800d7bc:	42b2      	cmp	r2, r6
 800d7be:	d109      	bne.n	800d7d4 <__gethex+0x388>
 800d7c0:	1171      	asrs	r1, r6, #5
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d7c8:	f006 061f 	and.w	r6, r6, #31
 800d7cc:	fa02 f606 	lsl.w	r6, r2, r6
 800d7d0:	421e      	tst	r6, r3
 800d7d2:	d13a      	bne.n	800d84a <__gethex+0x3fe>
 800d7d4:	f045 0520 	orr.w	r5, r5, #32
 800d7d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7da:	601c      	str	r4, [r3, #0]
 800d7dc:	9b02      	ldr	r3, [sp, #8]
 800d7de:	601f      	str	r7, [r3, #0]
 800d7e0:	e6b0      	b.n	800d544 <__gethex+0xf8>
 800d7e2:	4299      	cmp	r1, r3
 800d7e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d7e8:	d8d9      	bhi.n	800d79e <__gethex+0x352>
 800d7ea:	68a3      	ldr	r3, [r4, #8]
 800d7ec:	459b      	cmp	fp, r3
 800d7ee:	db17      	blt.n	800d820 <__gethex+0x3d4>
 800d7f0:	6861      	ldr	r1, [r4, #4]
 800d7f2:	9801      	ldr	r0, [sp, #4]
 800d7f4:	3101      	adds	r1, #1
 800d7f6:	f000 f9bb 	bl	800db70 <_Balloc>
 800d7fa:	4681      	mov	r9, r0
 800d7fc:	b918      	cbnz	r0, 800d806 <__gethex+0x3ba>
 800d7fe:	4b1a      	ldr	r3, [pc, #104]	@ (800d868 <__gethex+0x41c>)
 800d800:	4602      	mov	r2, r0
 800d802:	2184      	movs	r1, #132	@ 0x84
 800d804:	e6c5      	b.n	800d592 <__gethex+0x146>
 800d806:	6922      	ldr	r2, [r4, #16]
 800d808:	3202      	adds	r2, #2
 800d80a:	f104 010c 	add.w	r1, r4, #12
 800d80e:	0092      	lsls	r2, r2, #2
 800d810:	300c      	adds	r0, #12
 800d812:	f7ff fd50 	bl	800d2b6 <memcpy>
 800d816:	4621      	mov	r1, r4
 800d818:	9801      	ldr	r0, [sp, #4]
 800d81a:	f000 f9e9 	bl	800dbf0 <_Bfree>
 800d81e:	464c      	mov	r4, r9
 800d820:	6923      	ldr	r3, [r4, #16]
 800d822:	1c5a      	adds	r2, r3, #1
 800d824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d828:	6122      	str	r2, [r4, #16]
 800d82a:	2201      	movs	r2, #1
 800d82c:	615a      	str	r2, [r3, #20]
 800d82e:	e7be      	b.n	800d7ae <__gethex+0x362>
 800d830:	6922      	ldr	r2, [r4, #16]
 800d832:	455a      	cmp	r2, fp
 800d834:	dd0b      	ble.n	800d84e <__gethex+0x402>
 800d836:	2101      	movs	r1, #1
 800d838:	4620      	mov	r0, r4
 800d83a:	f7ff fd9f 	bl	800d37c <rshift>
 800d83e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d842:	3701      	adds	r7, #1
 800d844:	42bb      	cmp	r3, r7
 800d846:	f6ff aee0 	blt.w	800d60a <__gethex+0x1be>
 800d84a:	2501      	movs	r5, #1
 800d84c:	e7c2      	b.n	800d7d4 <__gethex+0x388>
 800d84e:	f016 061f 	ands.w	r6, r6, #31
 800d852:	d0fa      	beq.n	800d84a <__gethex+0x3fe>
 800d854:	4453      	add	r3, sl
 800d856:	f1c6 0620 	rsb	r6, r6, #32
 800d85a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d85e:	f000 fa79 	bl	800dd54 <__hi0bits>
 800d862:	42b0      	cmp	r0, r6
 800d864:	dbe7      	blt.n	800d836 <__gethex+0x3ea>
 800d866:	e7f0      	b.n	800d84a <__gethex+0x3fe>
 800d868:	0800f708 	.word	0x0800f708

0800d86c <L_shift>:
 800d86c:	f1c2 0208 	rsb	r2, r2, #8
 800d870:	0092      	lsls	r2, r2, #2
 800d872:	b570      	push	{r4, r5, r6, lr}
 800d874:	f1c2 0620 	rsb	r6, r2, #32
 800d878:	6843      	ldr	r3, [r0, #4]
 800d87a:	6804      	ldr	r4, [r0, #0]
 800d87c:	fa03 f506 	lsl.w	r5, r3, r6
 800d880:	432c      	orrs	r4, r5
 800d882:	40d3      	lsrs	r3, r2
 800d884:	6004      	str	r4, [r0, #0]
 800d886:	f840 3f04 	str.w	r3, [r0, #4]!
 800d88a:	4288      	cmp	r0, r1
 800d88c:	d3f4      	bcc.n	800d878 <L_shift+0xc>
 800d88e:	bd70      	pop	{r4, r5, r6, pc}

0800d890 <__match>:
 800d890:	b530      	push	{r4, r5, lr}
 800d892:	6803      	ldr	r3, [r0, #0]
 800d894:	3301      	adds	r3, #1
 800d896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d89a:	b914      	cbnz	r4, 800d8a2 <__match+0x12>
 800d89c:	6003      	str	r3, [r0, #0]
 800d89e:	2001      	movs	r0, #1
 800d8a0:	bd30      	pop	{r4, r5, pc}
 800d8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d8aa:	2d19      	cmp	r5, #25
 800d8ac:	bf98      	it	ls
 800d8ae:	3220      	addls	r2, #32
 800d8b0:	42a2      	cmp	r2, r4
 800d8b2:	d0f0      	beq.n	800d896 <__match+0x6>
 800d8b4:	2000      	movs	r0, #0
 800d8b6:	e7f3      	b.n	800d8a0 <__match+0x10>

0800d8b8 <__hexnan>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	680b      	ldr	r3, [r1, #0]
 800d8be:	6801      	ldr	r1, [r0, #0]
 800d8c0:	115e      	asrs	r6, r3, #5
 800d8c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d8c6:	f013 031f 	ands.w	r3, r3, #31
 800d8ca:	b087      	sub	sp, #28
 800d8cc:	bf18      	it	ne
 800d8ce:	3604      	addne	r6, #4
 800d8d0:	2500      	movs	r5, #0
 800d8d2:	1f37      	subs	r7, r6, #4
 800d8d4:	4682      	mov	sl, r0
 800d8d6:	4690      	mov	r8, r2
 800d8d8:	9301      	str	r3, [sp, #4]
 800d8da:	f846 5c04 	str.w	r5, [r6, #-4]
 800d8de:	46b9      	mov	r9, r7
 800d8e0:	463c      	mov	r4, r7
 800d8e2:	9502      	str	r5, [sp, #8]
 800d8e4:	46ab      	mov	fp, r5
 800d8e6:	784a      	ldrb	r2, [r1, #1]
 800d8e8:	1c4b      	adds	r3, r1, #1
 800d8ea:	9303      	str	r3, [sp, #12]
 800d8ec:	b342      	cbz	r2, 800d940 <__hexnan+0x88>
 800d8ee:	4610      	mov	r0, r2
 800d8f0:	9105      	str	r1, [sp, #20]
 800d8f2:	9204      	str	r2, [sp, #16]
 800d8f4:	f7ff fd94 	bl	800d420 <__hexdig_fun>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d151      	bne.n	800d9a0 <__hexnan+0xe8>
 800d8fc:	9a04      	ldr	r2, [sp, #16]
 800d8fe:	9905      	ldr	r1, [sp, #20]
 800d900:	2a20      	cmp	r2, #32
 800d902:	d818      	bhi.n	800d936 <__hexnan+0x7e>
 800d904:	9b02      	ldr	r3, [sp, #8]
 800d906:	459b      	cmp	fp, r3
 800d908:	dd13      	ble.n	800d932 <__hexnan+0x7a>
 800d90a:	454c      	cmp	r4, r9
 800d90c:	d206      	bcs.n	800d91c <__hexnan+0x64>
 800d90e:	2d07      	cmp	r5, #7
 800d910:	dc04      	bgt.n	800d91c <__hexnan+0x64>
 800d912:	462a      	mov	r2, r5
 800d914:	4649      	mov	r1, r9
 800d916:	4620      	mov	r0, r4
 800d918:	f7ff ffa8 	bl	800d86c <L_shift>
 800d91c:	4544      	cmp	r4, r8
 800d91e:	d952      	bls.n	800d9c6 <__hexnan+0x10e>
 800d920:	2300      	movs	r3, #0
 800d922:	f1a4 0904 	sub.w	r9, r4, #4
 800d926:	f844 3c04 	str.w	r3, [r4, #-4]
 800d92a:	f8cd b008 	str.w	fp, [sp, #8]
 800d92e:	464c      	mov	r4, r9
 800d930:	461d      	mov	r5, r3
 800d932:	9903      	ldr	r1, [sp, #12]
 800d934:	e7d7      	b.n	800d8e6 <__hexnan+0x2e>
 800d936:	2a29      	cmp	r2, #41	@ 0x29
 800d938:	d157      	bne.n	800d9ea <__hexnan+0x132>
 800d93a:	3102      	adds	r1, #2
 800d93c:	f8ca 1000 	str.w	r1, [sl]
 800d940:	f1bb 0f00 	cmp.w	fp, #0
 800d944:	d051      	beq.n	800d9ea <__hexnan+0x132>
 800d946:	454c      	cmp	r4, r9
 800d948:	d206      	bcs.n	800d958 <__hexnan+0xa0>
 800d94a:	2d07      	cmp	r5, #7
 800d94c:	dc04      	bgt.n	800d958 <__hexnan+0xa0>
 800d94e:	462a      	mov	r2, r5
 800d950:	4649      	mov	r1, r9
 800d952:	4620      	mov	r0, r4
 800d954:	f7ff ff8a 	bl	800d86c <L_shift>
 800d958:	4544      	cmp	r4, r8
 800d95a:	d936      	bls.n	800d9ca <__hexnan+0x112>
 800d95c:	f1a8 0204 	sub.w	r2, r8, #4
 800d960:	4623      	mov	r3, r4
 800d962:	f853 1b04 	ldr.w	r1, [r3], #4
 800d966:	f842 1f04 	str.w	r1, [r2, #4]!
 800d96a:	429f      	cmp	r7, r3
 800d96c:	d2f9      	bcs.n	800d962 <__hexnan+0xaa>
 800d96e:	1b3b      	subs	r3, r7, r4
 800d970:	f023 0303 	bic.w	r3, r3, #3
 800d974:	3304      	adds	r3, #4
 800d976:	3401      	adds	r4, #1
 800d978:	3e03      	subs	r6, #3
 800d97a:	42b4      	cmp	r4, r6
 800d97c:	bf88      	it	hi
 800d97e:	2304      	movhi	r3, #4
 800d980:	4443      	add	r3, r8
 800d982:	2200      	movs	r2, #0
 800d984:	f843 2b04 	str.w	r2, [r3], #4
 800d988:	429f      	cmp	r7, r3
 800d98a:	d2fb      	bcs.n	800d984 <__hexnan+0xcc>
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	b91b      	cbnz	r3, 800d998 <__hexnan+0xe0>
 800d990:	4547      	cmp	r7, r8
 800d992:	d128      	bne.n	800d9e6 <__hexnan+0x12e>
 800d994:	2301      	movs	r3, #1
 800d996:	603b      	str	r3, [r7, #0]
 800d998:	2005      	movs	r0, #5
 800d99a:	b007      	add	sp, #28
 800d99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a0:	3501      	adds	r5, #1
 800d9a2:	2d08      	cmp	r5, #8
 800d9a4:	f10b 0b01 	add.w	fp, fp, #1
 800d9a8:	dd06      	ble.n	800d9b8 <__hexnan+0x100>
 800d9aa:	4544      	cmp	r4, r8
 800d9ac:	d9c1      	bls.n	800d932 <__hexnan+0x7a>
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d9b4:	2501      	movs	r5, #1
 800d9b6:	3c04      	subs	r4, #4
 800d9b8:	6822      	ldr	r2, [r4, #0]
 800d9ba:	f000 000f 	and.w	r0, r0, #15
 800d9be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d9c2:	6020      	str	r0, [r4, #0]
 800d9c4:	e7b5      	b.n	800d932 <__hexnan+0x7a>
 800d9c6:	2508      	movs	r5, #8
 800d9c8:	e7b3      	b.n	800d932 <__hexnan+0x7a>
 800d9ca:	9b01      	ldr	r3, [sp, #4]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d0dd      	beq.n	800d98c <__hexnan+0xd4>
 800d9d0:	f1c3 0320 	rsb	r3, r3, #32
 800d9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9d8:	40da      	lsrs	r2, r3
 800d9da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d9de:	4013      	ands	r3, r2
 800d9e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d9e4:	e7d2      	b.n	800d98c <__hexnan+0xd4>
 800d9e6:	3f04      	subs	r7, #4
 800d9e8:	e7d0      	b.n	800d98c <__hexnan+0xd4>
 800d9ea:	2004      	movs	r0, #4
 800d9ec:	e7d5      	b.n	800d99a <__hexnan+0xe2>
	...

0800d9f0 <sbrk_aligned>:
 800d9f0:	b570      	push	{r4, r5, r6, lr}
 800d9f2:	4e0f      	ldr	r6, [pc, #60]	@ (800da30 <sbrk_aligned+0x40>)
 800d9f4:	460c      	mov	r4, r1
 800d9f6:	6831      	ldr	r1, [r6, #0]
 800d9f8:	4605      	mov	r5, r0
 800d9fa:	b911      	cbnz	r1, 800da02 <sbrk_aligned+0x12>
 800d9fc:	f001 f922 	bl	800ec44 <_sbrk_r>
 800da00:	6030      	str	r0, [r6, #0]
 800da02:	4621      	mov	r1, r4
 800da04:	4628      	mov	r0, r5
 800da06:	f001 f91d 	bl	800ec44 <_sbrk_r>
 800da0a:	1c43      	adds	r3, r0, #1
 800da0c:	d103      	bne.n	800da16 <sbrk_aligned+0x26>
 800da0e:	f04f 34ff 	mov.w	r4, #4294967295
 800da12:	4620      	mov	r0, r4
 800da14:	bd70      	pop	{r4, r5, r6, pc}
 800da16:	1cc4      	adds	r4, r0, #3
 800da18:	f024 0403 	bic.w	r4, r4, #3
 800da1c:	42a0      	cmp	r0, r4
 800da1e:	d0f8      	beq.n	800da12 <sbrk_aligned+0x22>
 800da20:	1a21      	subs	r1, r4, r0
 800da22:	4628      	mov	r0, r5
 800da24:	f001 f90e 	bl	800ec44 <_sbrk_r>
 800da28:	3001      	adds	r0, #1
 800da2a:	d1f2      	bne.n	800da12 <sbrk_aligned+0x22>
 800da2c:	e7ef      	b.n	800da0e <sbrk_aligned+0x1e>
 800da2e:	bf00      	nop
 800da30:	20000db8 	.word	0x20000db8

0800da34 <_malloc_r>:
 800da34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da38:	1ccd      	adds	r5, r1, #3
 800da3a:	f025 0503 	bic.w	r5, r5, #3
 800da3e:	3508      	adds	r5, #8
 800da40:	2d0c      	cmp	r5, #12
 800da42:	bf38      	it	cc
 800da44:	250c      	movcc	r5, #12
 800da46:	2d00      	cmp	r5, #0
 800da48:	4606      	mov	r6, r0
 800da4a:	db01      	blt.n	800da50 <_malloc_r+0x1c>
 800da4c:	42a9      	cmp	r1, r5
 800da4e:	d904      	bls.n	800da5a <_malloc_r+0x26>
 800da50:	230c      	movs	r3, #12
 800da52:	6033      	str	r3, [r6, #0]
 800da54:	2000      	movs	r0, #0
 800da56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800db30 <_malloc_r+0xfc>
 800da5e:	f000 f87b 	bl	800db58 <__malloc_lock>
 800da62:	f8d8 3000 	ldr.w	r3, [r8]
 800da66:	461c      	mov	r4, r3
 800da68:	bb44      	cbnz	r4, 800dabc <_malloc_r+0x88>
 800da6a:	4629      	mov	r1, r5
 800da6c:	4630      	mov	r0, r6
 800da6e:	f7ff ffbf 	bl	800d9f0 <sbrk_aligned>
 800da72:	1c43      	adds	r3, r0, #1
 800da74:	4604      	mov	r4, r0
 800da76:	d158      	bne.n	800db2a <_malloc_r+0xf6>
 800da78:	f8d8 4000 	ldr.w	r4, [r8]
 800da7c:	4627      	mov	r7, r4
 800da7e:	2f00      	cmp	r7, #0
 800da80:	d143      	bne.n	800db0a <_malloc_r+0xd6>
 800da82:	2c00      	cmp	r4, #0
 800da84:	d04b      	beq.n	800db1e <_malloc_r+0xea>
 800da86:	6823      	ldr	r3, [r4, #0]
 800da88:	4639      	mov	r1, r7
 800da8a:	4630      	mov	r0, r6
 800da8c:	eb04 0903 	add.w	r9, r4, r3
 800da90:	f001 f8d8 	bl	800ec44 <_sbrk_r>
 800da94:	4581      	cmp	r9, r0
 800da96:	d142      	bne.n	800db1e <_malloc_r+0xea>
 800da98:	6821      	ldr	r1, [r4, #0]
 800da9a:	1a6d      	subs	r5, r5, r1
 800da9c:	4629      	mov	r1, r5
 800da9e:	4630      	mov	r0, r6
 800daa0:	f7ff ffa6 	bl	800d9f0 <sbrk_aligned>
 800daa4:	3001      	adds	r0, #1
 800daa6:	d03a      	beq.n	800db1e <_malloc_r+0xea>
 800daa8:	6823      	ldr	r3, [r4, #0]
 800daaa:	442b      	add	r3, r5
 800daac:	6023      	str	r3, [r4, #0]
 800daae:	f8d8 3000 	ldr.w	r3, [r8]
 800dab2:	685a      	ldr	r2, [r3, #4]
 800dab4:	bb62      	cbnz	r2, 800db10 <_malloc_r+0xdc>
 800dab6:	f8c8 7000 	str.w	r7, [r8]
 800daba:	e00f      	b.n	800dadc <_malloc_r+0xa8>
 800dabc:	6822      	ldr	r2, [r4, #0]
 800dabe:	1b52      	subs	r2, r2, r5
 800dac0:	d420      	bmi.n	800db04 <_malloc_r+0xd0>
 800dac2:	2a0b      	cmp	r2, #11
 800dac4:	d917      	bls.n	800daf6 <_malloc_r+0xc2>
 800dac6:	1961      	adds	r1, r4, r5
 800dac8:	42a3      	cmp	r3, r4
 800daca:	6025      	str	r5, [r4, #0]
 800dacc:	bf18      	it	ne
 800dace:	6059      	strne	r1, [r3, #4]
 800dad0:	6863      	ldr	r3, [r4, #4]
 800dad2:	bf08      	it	eq
 800dad4:	f8c8 1000 	streq.w	r1, [r8]
 800dad8:	5162      	str	r2, [r4, r5]
 800dada:	604b      	str	r3, [r1, #4]
 800dadc:	4630      	mov	r0, r6
 800dade:	f000 f841 	bl	800db64 <__malloc_unlock>
 800dae2:	f104 000b 	add.w	r0, r4, #11
 800dae6:	1d23      	adds	r3, r4, #4
 800dae8:	f020 0007 	bic.w	r0, r0, #7
 800daec:	1ac2      	subs	r2, r0, r3
 800daee:	bf1c      	itt	ne
 800daf0:	1a1b      	subne	r3, r3, r0
 800daf2:	50a3      	strne	r3, [r4, r2]
 800daf4:	e7af      	b.n	800da56 <_malloc_r+0x22>
 800daf6:	6862      	ldr	r2, [r4, #4]
 800daf8:	42a3      	cmp	r3, r4
 800dafa:	bf0c      	ite	eq
 800dafc:	f8c8 2000 	streq.w	r2, [r8]
 800db00:	605a      	strne	r2, [r3, #4]
 800db02:	e7eb      	b.n	800dadc <_malloc_r+0xa8>
 800db04:	4623      	mov	r3, r4
 800db06:	6864      	ldr	r4, [r4, #4]
 800db08:	e7ae      	b.n	800da68 <_malloc_r+0x34>
 800db0a:	463c      	mov	r4, r7
 800db0c:	687f      	ldr	r7, [r7, #4]
 800db0e:	e7b6      	b.n	800da7e <_malloc_r+0x4a>
 800db10:	461a      	mov	r2, r3
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	42a3      	cmp	r3, r4
 800db16:	d1fb      	bne.n	800db10 <_malloc_r+0xdc>
 800db18:	2300      	movs	r3, #0
 800db1a:	6053      	str	r3, [r2, #4]
 800db1c:	e7de      	b.n	800dadc <_malloc_r+0xa8>
 800db1e:	230c      	movs	r3, #12
 800db20:	6033      	str	r3, [r6, #0]
 800db22:	4630      	mov	r0, r6
 800db24:	f000 f81e 	bl	800db64 <__malloc_unlock>
 800db28:	e794      	b.n	800da54 <_malloc_r+0x20>
 800db2a:	6005      	str	r5, [r0, #0]
 800db2c:	e7d6      	b.n	800dadc <_malloc_r+0xa8>
 800db2e:	bf00      	nop
 800db30:	20000dbc 	.word	0x20000dbc

0800db34 <__ascii_mbtowc>:
 800db34:	b082      	sub	sp, #8
 800db36:	b901      	cbnz	r1, 800db3a <__ascii_mbtowc+0x6>
 800db38:	a901      	add	r1, sp, #4
 800db3a:	b142      	cbz	r2, 800db4e <__ascii_mbtowc+0x1a>
 800db3c:	b14b      	cbz	r3, 800db52 <__ascii_mbtowc+0x1e>
 800db3e:	7813      	ldrb	r3, [r2, #0]
 800db40:	600b      	str	r3, [r1, #0]
 800db42:	7812      	ldrb	r2, [r2, #0]
 800db44:	1e10      	subs	r0, r2, #0
 800db46:	bf18      	it	ne
 800db48:	2001      	movne	r0, #1
 800db4a:	b002      	add	sp, #8
 800db4c:	4770      	bx	lr
 800db4e:	4610      	mov	r0, r2
 800db50:	e7fb      	b.n	800db4a <__ascii_mbtowc+0x16>
 800db52:	f06f 0001 	mvn.w	r0, #1
 800db56:	e7f8      	b.n	800db4a <__ascii_mbtowc+0x16>

0800db58 <__malloc_lock>:
 800db58:	4801      	ldr	r0, [pc, #4]	@ (800db60 <__malloc_lock+0x8>)
 800db5a:	f7ff bbaa 	b.w	800d2b2 <__retarget_lock_acquire_recursive>
 800db5e:	bf00      	nop
 800db60:	20000db4 	.word	0x20000db4

0800db64 <__malloc_unlock>:
 800db64:	4801      	ldr	r0, [pc, #4]	@ (800db6c <__malloc_unlock+0x8>)
 800db66:	f7ff bba5 	b.w	800d2b4 <__retarget_lock_release_recursive>
 800db6a:	bf00      	nop
 800db6c:	20000db4 	.word	0x20000db4

0800db70 <_Balloc>:
 800db70:	b570      	push	{r4, r5, r6, lr}
 800db72:	69c6      	ldr	r6, [r0, #28]
 800db74:	4604      	mov	r4, r0
 800db76:	460d      	mov	r5, r1
 800db78:	b976      	cbnz	r6, 800db98 <_Balloc+0x28>
 800db7a:	2010      	movs	r0, #16
 800db7c:	f001 f8a4 	bl	800ecc8 <malloc>
 800db80:	4602      	mov	r2, r0
 800db82:	61e0      	str	r0, [r4, #28]
 800db84:	b920      	cbnz	r0, 800db90 <_Balloc+0x20>
 800db86:	4b18      	ldr	r3, [pc, #96]	@ (800dbe8 <_Balloc+0x78>)
 800db88:	4818      	ldr	r0, [pc, #96]	@ (800dbec <_Balloc+0x7c>)
 800db8a:	216b      	movs	r1, #107	@ 0x6b
 800db8c:	f001 f86a 	bl	800ec64 <__assert_func>
 800db90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db94:	6006      	str	r6, [r0, #0]
 800db96:	60c6      	str	r6, [r0, #12]
 800db98:	69e6      	ldr	r6, [r4, #28]
 800db9a:	68f3      	ldr	r3, [r6, #12]
 800db9c:	b183      	cbz	r3, 800dbc0 <_Balloc+0x50>
 800db9e:	69e3      	ldr	r3, [r4, #28]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dba6:	b9b8      	cbnz	r0, 800dbd8 <_Balloc+0x68>
 800dba8:	2101      	movs	r1, #1
 800dbaa:	fa01 f605 	lsl.w	r6, r1, r5
 800dbae:	1d72      	adds	r2, r6, #5
 800dbb0:	0092      	lsls	r2, r2, #2
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f001 f874 	bl	800eca0 <_calloc_r>
 800dbb8:	b160      	cbz	r0, 800dbd4 <_Balloc+0x64>
 800dbba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dbbe:	e00e      	b.n	800dbde <_Balloc+0x6e>
 800dbc0:	2221      	movs	r2, #33	@ 0x21
 800dbc2:	2104      	movs	r1, #4
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f001 f86b 	bl	800eca0 <_calloc_r>
 800dbca:	69e3      	ldr	r3, [r4, #28]
 800dbcc:	60f0      	str	r0, [r6, #12]
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d1e4      	bne.n	800db9e <_Balloc+0x2e>
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	bd70      	pop	{r4, r5, r6, pc}
 800dbd8:	6802      	ldr	r2, [r0, #0]
 800dbda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dbde:	2300      	movs	r3, #0
 800dbe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dbe4:	e7f7      	b.n	800dbd6 <_Balloc+0x66>
 800dbe6:	bf00      	nop
 800dbe8:	0800f779 	.word	0x0800f779
 800dbec:	0800f790 	.word	0x0800f790

0800dbf0 <_Bfree>:
 800dbf0:	b570      	push	{r4, r5, r6, lr}
 800dbf2:	69c6      	ldr	r6, [r0, #28]
 800dbf4:	4605      	mov	r5, r0
 800dbf6:	460c      	mov	r4, r1
 800dbf8:	b976      	cbnz	r6, 800dc18 <_Bfree+0x28>
 800dbfa:	2010      	movs	r0, #16
 800dbfc:	f001 f864 	bl	800ecc8 <malloc>
 800dc00:	4602      	mov	r2, r0
 800dc02:	61e8      	str	r0, [r5, #28]
 800dc04:	b920      	cbnz	r0, 800dc10 <_Bfree+0x20>
 800dc06:	4b09      	ldr	r3, [pc, #36]	@ (800dc2c <_Bfree+0x3c>)
 800dc08:	4809      	ldr	r0, [pc, #36]	@ (800dc30 <_Bfree+0x40>)
 800dc0a:	218f      	movs	r1, #143	@ 0x8f
 800dc0c:	f001 f82a 	bl	800ec64 <__assert_func>
 800dc10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc14:	6006      	str	r6, [r0, #0]
 800dc16:	60c6      	str	r6, [r0, #12]
 800dc18:	b13c      	cbz	r4, 800dc2a <_Bfree+0x3a>
 800dc1a:	69eb      	ldr	r3, [r5, #28]
 800dc1c:	6862      	ldr	r2, [r4, #4]
 800dc1e:	68db      	ldr	r3, [r3, #12]
 800dc20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc24:	6021      	str	r1, [r4, #0]
 800dc26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc2a:	bd70      	pop	{r4, r5, r6, pc}
 800dc2c:	0800f779 	.word	0x0800f779
 800dc30:	0800f790 	.word	0x0800f790

0800dc34 <__multadd>:
 800dc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc38:	690d      	ldr	r5, [r1, #16]
 800dc3a:	4607      	mov	r7, r0
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	461e      	mov	r6, r3
 800dc40:	f101 0c14 	add.w	ip, r1, #20
 800dc44:	2000      	movs	r0, #0
 800dc46:	f8dc 3000 	ldr.w	r3, [ip]
 800dc4a:	b299      	uxth	r1, r3
 800dc4c:	fb02 6101 	mla	r1, r2, r1, r6
 800dc50:	0c1e      	lsrs	r6, r3, #16
 800dc52:	0c0b      	lsrs	r3, r1, #16
 800dc54:	fb02 3306 	mla	r3, r2, r6, r3
 800dc58:	b289      	uxth	r1, r1
 800dc5a:	3001      	adds	r0, #1
 800dc5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc60:	4285      	cmp	r5, r0
 800dc62:	f84c 1b04 	str.w	r1, [ip], #4
 800dc66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc6a:	dcec      	bgt.n	800dc46 <__multadd+0x12>
 800dc6c:	b30e      	cbz	r6, 800dcb2 <__multadd+0x7e>
 800dc6e:	68a3      	ldr	r3, [r4, #8]
 800dc70:	42ab      	cmp	r3, r5
 800dc72:	dc19      	bgt.n	800dca8 <__multadd+0x74>
 800dc74:	6861      	ldr	r1, [r4, #4]
 800dc76:	4638      	mov	r0, r7
 800dc78:	3101      	adds	r1, #1
 800dc7a:	f7ff ff79 	bl	800db70 <_Balloc>
 800dc7e:	4680      	mov	r8, r0
 800dc80:	b928      	cbnz	r0, 800dc8e <__multadd+0x5a>
 800dc82:	4602      	mov	r2, r0
 800dc84:	4b0c      	ldr	r3, [pc, #48]	@ (800dcb8 <__multadd+0x84>)
 800dc86:	480d      	ldr	r0, [pc, #52]	@ (800dcbc <__multadd+0x88>)
 800dc88:	21ba      	movs	r1, #186	@ 0xba
 800dc8a:	f000 ffeb 	bl	800ec64 <__assert_func>
 800dc8e:	6922      	ldr	r2, [r4, #16]
 800dc90:	3202      	adds	r2, #2
 800dc92:	f104 010c 	add.w	r1, r4, #12
 800dc96:	0092      	lsls	r2, r2, #2
 800dc98:	300c      	adds	r0, #12
 800dc9a:	f7ff fb0c 	bl	800d2b6 <memcpy>
 800dc9e:	4621      	mov	r1, r4
 800dca0:	4638      	mov	r0, r7
 800dca2:	f7ff ffa5 	bl	800dbf0 <_Bfree>
 800dca6:	4644      	mov	r4, r8
 800dca8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dcac:	3501      	adds	r5, #1
 800dcae:	615e      	str	r6, [r3, #20]
 800dcb0:	6125      	str	r5, [r4, #16]
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb8:	0800f708 	.word	0x0800f708
 800dcbc:	0800f790 	.word	0x0800f790

0800dcc0 <__s2b>:
 800dcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcc4:	460c      	mov	r4, r1
 800dcc6:	4615      	mov	r5, r2
 800dcc8:	461f      	mov	r7, r3
 800dcca:	2209      	movs	r2, #9
 800dccc:	3308      	adds	r3, #8
 800dcce:	4606      	mov	r6, r0
 800dcd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	db09      	blt.n	800dcf0 <__s2b+0x30>
 800dcdc:	4630      	mov	r0, r6
 800dcde:	f7ff ff47 	bl	800db70 <_Balloc>
 800dce2:	b940      	cbnz	r0, 800dcf6 <__s2b+0x36>
 800dce4:	4602      	mov	r2, r0
 800dce6:	4b19      	ldr	r3, [pc, #100]	@ (800dd4c <__s2b+0x8c>)
 800dce8:	4819      	ldr	r0, [pc, #100]	@ (800dd50 <__s2b+0x90>)
 800dcea:	21d3      	movs	r1, #211	@ 0xd3
 800dcec:	f000 ffba 	bl	800ec64 <__assert_func>
 800dcf0:	0052      	lsls	r2, r2, #1
 800dcf2:	3101      	adds	r1, #1
 800dcf4:	e7f0      	b.n	800dcd8 <__s2b+0x18>
 800dcf6:	9b08      	ldr	r3, [sp, #32]
 800dcf8:	6143      	str	r3, [r0, #20]
 800dcfa:	2d09      	cmp	r5, #9
 800dcfc:	f04f 0301 	mov.w	r3, #1
 800dd00:	6103      	str	r3, [r0, #16]
 800dd02:	dd16      	ble.n	800dd32 <__s2b+0x72>
 800dd04:	f104 0909 	add.w	r9, r4, #9
 800dd08:	46c8      	mov	r8, r9
 800dd0a:	442c      	add	r4, r5
 800dd0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dd10:	4601      	mov	r1, r0
 800dd12:	3b30      	subs	r3, #48	@ 0x30
 800dd14:	220a      	movs	r2, #10
 800dd16:	4630      	mov	r0, r6
 800dd18:	f7ff ff8c 	bl	800dc34 <__multadd>
 800dd1c:	45a0      	cmp	r8, r4
 800dd1e:	d1f5      	bne.n	800dd0c <__s2b+0x4c>
 800dd20:	f1a5 0408 	sub.w	r4, r5, #8
 800dd24:	444c      	add	r4, r9
 800dd26:	1b2d      	subs	r5, r5, r4
 800dd28:	1963      	adds	r3, r4, r5
 800dd2a:	42bb      	cmp	r3, r7
 800dd2c:	db04      	blt.n	800dd38 <__s2b+0x78>
 800dd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd32:	340a      	adds	r4, #10
 800dd34:	2509      	movs	r5, #9
 800dd36:	e7f6      	b.n	800dd26 <__s2b+0x66>
 800dd38:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd3c:	4601      	mov	r1, r0
 800dd3e:	3b30      	subs	r3, #48	@ 0x30
 800dd40:	220a      	movs	r2, #10
 800dd42:	4630      	mov	r0, r6
 800dd44:	f7ff ff76 	bl	800dc34 <__multadd>
 800dd48:	e7ee      	b.n	800dd28 <__s2b+0x68>
 800dd4a:	bf00      	nop
 800dd4c:	0800f708 	.word	0x0800f708
 800dd50:	0800f790 	.word	0x0800f790

0800dd54 <__hi0bits>:
 800dd54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dd58:	4603      	mov	r3, r0
 800dd5a:	bf36      	itet	cc
 800dd5c:	0403      	lslcc	r3, r0, #16
 800dd5e:	2000      	movcs	r0, #0
 800dd60:	2010      	movcc	r0, #16
 800dd62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd66:	bf3c      	itt	cc
 800dd68:	021b      	lslcc	r3, r3, #8
 800dd6a:	3008      	addcc	r0, #8
 800dd6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd70:	bf3c      	itt	cc
 800dd72:	011b      	lslcc	r3, r3, #4
 800dd74:	3004      	addcc	r0, #4
 800dd76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd7a:	bf3c      	itt	cc
 800dd7c:	009b      	lslcc	r3, r3, #2
 800dd7e:	3002      	addcc	r0, #2
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	db05      	blt.n	800dd90 <__hi0bits+0x3c>
 800dd84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dd88:	f100 0001 	add.w	r0, r0, #1
 800dd8c:	bf08      	it	eq
 800dd8e:	2020      	moveq	r0, #32
 800dd90:	4770      	bx	lr

0800dd92 <__lo0bits>:
 800dd92:	6803      	ldr	r3, [r0, #0]
 800dd94:	4602      	mov	r2, r0
 800dd96:	f013 0007 	ands.w	r0, r3, #7
 800dd9a:	d00b      	beq.n	800ddb4 <__lo0bits+0x22>
 800dd9c:	07d9      	lsls	r1, r3, #31
 800dd9e:	d421      	bmi.n	800dde4 <__lo0bits+0x52>
 800dda0:	0798      	lsls	r0, r3, #30
 800dda2:	bf49      	itett	mi
 800dda4:	085b      	lsrmi	r3, r3, #1
 800dda6:	089b      	lsrpl	r3, r3, #2
 800dda8:	2001      	movmi	r0, #1
 800ddaa:	6013      	strmi	r3, [r2, #0]
 800ddac:	bf5c      	itt	pl
 800ddae:	6013      	strpl	r3, [r2, #0]
 800ddb0:	2002      	movpl	r0, #2
 800ddb2:	4770      	bx	lr
 800ddb4:	b299      	uxth	r1, r3
 800ddb6:	b909      	cbnz	r1, 800ddbc <__lo0bits+0x2a>
 800ddb8:	0c1b      	lsrs	r3, r3, #16
 800ddba:	2010      	movs	r0, #16
 800ddbc:	b2d9      	uxtb	r1, r3
 800ddbe:	b909      	cbnz	r1, 800ddc4 <__lo0bits+0x32>
 800ddc0:	3008      	adds	r0, #8
 800ddc2:	0a1b      	lsrs	r3, r3, #8
 800ddc4:	0719      	lsls	r1, r3, #28
 800ddc6:	bf04      	itt	eq
 800ddc8:	091b      	lsreq	r3, r3, #4
 800ddca:	3004      	addeq	r0, #4
 800ddcc:	0799      	lsls	r1, r3, #30
 800ddce:	bf04      	itt	eq
 800ddd0:	089b      	lsreq	r3, r3, #2
 800ddd2:	3002      	addeq	r0, #2
 800ddd4:	07d9      	lsls	r1, r3, #31
 800ddd6:	d403      	bmi.n	800dde0 <__lo0bits+0x4e>
 800ddd8:	085b      	lsrs	r3, r3, #1
 800ddda:	f100 0001 	add.w	r0, r0, #1
 800ddde:	d003      	beq.n	800dde8 <__lo0bits+0x56>
 800dde0:	6013      	str	r3, [r2, #0]
 800dde2:	4770      	bx	lr
 800dde4:	2000      	movs	r0, #0
 800dde6:	4770      	bx	lr
 800dde8:	2020      	movs	r0, #32
 800ddea:	4770      	bx	lr

0800ddec <__i2b>:
 800ddec:	b510      	push	{r4, lr}
 800ddee:	460c      	mov	r4, r1
 800ddf0:	2101      	movs	r1, #1
 800ddf2:	f7ff febd 	bl	800db70 <_Balloc>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	b928      	cbnz	r0, 800de06 <__i2b+0x1a>
 800ddfa:	4b05      	ldr	r3, [pc, #20]	@ (800de10 <__i2b+0x24>)
 800ddfc:	4805      	ldr	r0, [pc, #20]	@ (800de14 <__i2b+0x28>)
 800ddfe:	f240 1145 	movw	r1, #325	@ 0x145
 800de02:	f000 ff2f 	bl	800ec64 <__assert_func>
 800de06:	2301      	movs	r3, #1
 800de08:	6144      	str	r4, [r0, #20]
 800de0a:	6103      	str	r3, [r0, #16]
 800de0c:	bd10      	pop	{r4, pc}
 800de0e:	bf00      	nop
 800de10:	0800f708 	.word	0x0800f708
 800de14:	0800f790 	.word	0x0800f790

0800de18 <__multiply>:
 800de18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1c:	4614      	mov	r4, r2
 800de1e:	690a      	ldr	r2, [r1, #16]
 800de20:	6923      	ldr	r3, [r4, #16]
 800de22:	429a      	cmp	r2, r3
 800de24:	bfa8      	it	ge
 800de26:	4623      	movge	r3, r4
 800de28:	460f      	mov	r7, r1
 800de2a:	bfa4      	itt	ge
 800de2c:	460c      	movge	r4, r1
 800de2e:	461f      	movge	r7, r3
 800de30:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800de34:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800de38:	68a3      	ldr	r3, [r4, #8]
 800de3a:	6861      	ldr	r1, [r4, #4]
 800de3c:	eb0a 0609 	add.w	r6, sl, r9
 800de40:	42b3      	cmp	r3, r6
 800de42:	b085      	sub	sp, #20
 800de44:	bfb8      	it	lt
 800de46:	3101      	addlt	r1, #1
 800de48:	f7ff fe92 	bl	800db70 <_Balloc>
 800de4c:	b930      	cbnz	r0, 800de5c <__multiply+0x44>
 800de4e:	4602      	mov	r2, r0
 800de50:	4b44      	ldr	r3, [pc, #272]	@ (800df64 <__multiply+0x14c>)
 800de52:	4845      	ldr	r0, [pc, #276]	@ (800df68 <__multiply+0x150>)
 800de54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800de58:	f000 ff04 	bl	800ec64 <__assert_func>
 800de5c:	f100 0514 	add.w	r5, r0, #20
 800de60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de64:	462b      	mov	r3, r5
 800de66:	2200      	movs	r2, #0
 800de68:	4543      	cmp	r3, r8
 800de6a:	d321      	bcc.n	800deb0 <__multiply+0x98>
 800de6c:	f107 0114 	add.w	r1, r7, #20
 800de70:	f104 0214 	add.w	r2, r4, #20
 800de74:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800de78:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800de7c:	9302      	str	r3, [sp, #8]
 800de7e:	1b13      	subs	r3, r2, r4
 800de80:	3b15      	subs	r3, #21
 800de82:	f023 0303 	bic.w	r3, r3, #3
 800de86:	3304      	adds	r3, #4
 800de88:	f104 0715 	add.w	r7, r4, #21
 800de8c:	42ba      	cmp	r2, r7
 800de8e:	bf38      	it	cc
 800de90:	2304      	movcc	r3, #4
 800de92:	9301      	str	r3, [sp, #4]
 800de94:	9b02      	ldr	r3, [sp, #8]
 800de96:	9103      	str	r1, [sp, #12]
 800de98:	428b      	cmp	r3, r1
 800de9a:	d80c      	bhi.n	800deb6 <__multiply+0x9e>
 800de9c:	2e00      	cmp	r6, #0
 800de9e:	dd03      	ble.n	800dea8 <__multiply+0x90>
 800dea0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d05b      	beq.n	800df60 <__multiply+0x148>
 800dea8:	6106      	str	r6, [r0, #16]
 800deaa:	b005      	add	sp, #20
 800deac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb0:	f843 2b04 	str.w	r2, [r3], #4
 800deb4:	e7d8      	b.n	800de68 <__multiply+0x50>
 800deb6:	f8b1 a000 	ldrh.w	sl, [r1]
 800deba:	f1ba 0f00 	cmp.w	sl, #0
 800debe:	d024      	beq.n	800df0a <__multiply+0xf2>
 800dec0:	f104 0e14 	add.w	lr, r4, #20
 800dec4:	46a9      	mov	r9, r5
 800dec6:	f04f 0c00 	mov.w	ip, #0
 800deca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dece:	f8d9 3000 	ldr.w	r3, [r9]
 800ded2:	fa1f fb87 	uxth.w	fp, r7
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	fb0a 330b 	mla	r3, sl, fp, r3
 800dedc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dee0:	f8d9 7000 	ldr.w	r7, [r9]
 800dee4:	4463      	add	r3, ip
 800dee6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800deea:	fb0a c70b 	mla	r7, sl, fp, ip
 800deee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800def2:	b29b      	uxth	r3, r3
 800def4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800def8:	4572      	cmp	r2, lr
 800defa:	f849 3b04 	str.w	r3, [r9], #4
 800defe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800df02:	d8e2      	bhi.n	800deca <__multiply+0xb2>
 800df04:	9b01      	ldr	r3, [sp, #4]
 800df06:	f845 c003 	str.w	ip, [r5, r3]
 800df0a:	9b03      	ldr	r3, [sp, #12]
 800df0c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800df10:	3104      	adds	r1, #4
 800df12:	f1b9 0f00 	cmp.w	r9, #0
 800df16:	d021      	beq.n	800df5c <__multiply+0x144>
 800df18:	682b      	ldr	r3, [r5, #0]
 800df1a:	f104 0c14 	add.w	ip, r4, #20
 800df1e:	46ae      	mov	lr, r5
 800df20:	f04f 0a00 	mov.w	sl, #0
 800df24:	f8bc b000 	ldrh.w	fp, [ip]
 800df28:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800df2c:	fb09 770b 	mla	r7, r9, fp, r7
 800df30:	4457      	add	r7, sl
 800df32:	b29b      	uxth	r3, r3
 800df34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800df38:	f84e 3b04 	str.w	r3, [lr], #4
 800df3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800df40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df44:	f8be 3000 	ldrh.w	r3, [lr]
 800df48:	fb09 330a 	mla	r3, r9, sl, r3
 800df4c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800df50:	4562      	cmp	r2, ip
 800df52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df56:	d8e5      	bhi.n	800df24 <__multiply+0x10c>
 800df58:	9f01      	ldr	r7, [sp, #4]
 800df5a:	51eb      	str	r3, [r5, r7]
 800df5c:	3504      	adds	r5, #4
 800df5e:	e799      	b.n	800de94 <__multiply+0x7c>
 800df60:	3e01      	subs	r6, #1
 800df62:	e79b      	b.n	800de9c <__multiply+0x84>
 800df64:	0800f708 	.word	0x0800f708
 800df68:	0800f790 	.word	0x0800f790

0800df6c <__pow5mult>:
 800df6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df70:	4615      	mov	r5, r2
 800df72:	f012 0203 	ands.w	r2, r2, #3
 800df76:	4607      	mov	r7, r0
 800df78:	460e      	mov	r6, r1
 800df7a:	d007      	beq.n	800df8c <__pow5mult+0x20>
 800df7c:	4c25      	ldr	r4, [pc, #148]	@ (800e014 <__pow5mult+0xa8>)
 800df7e:	3a01      	subs	r2, #1
 800df80:	2300      	movs	r3, #0
 800df82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df86:	f7ff fe55 	bl	800dc34 <__multadd>
 800df8a:	4606      	mov	r6, r0
 800df8c:	10ad      	asrs	r5, r5, #2
 800df8e:	d03d      	beq.n	800e00c <__pow5mult+0xa0>
 800df90:	69fc      	ldr	r4, [r7, #28]
 800df92:	b97c      	cbnz	r4, 800dfb4 <__pow5mult+0x48>
 800df94:	2010      	movs	r0, #16
 800df96:	f000 fe97 	bl	800ecc8 <malloc>
 800df9a:	4602      	mov	r2, r0
 800df9c:	61f8      	str	r0, [r7, #28]
 800df9e:	b928      	cbnz	r0, 800dfac <__pow5mult+0x40>
 800dfa0:	4b1d      	ldr	r3, [pc, #116]	@ (800e018 <__pow5mult+0xac>)
 800dfa2:	481e      	ldr	r0, [pc, #120]	@ (800e01c <__pow5mult+0xb0>)
 800dfa4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dfa8:	f000 fe5c 	bl	800ec64 <__assert_func>
 800dfac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dfb0:	6004      	str	r4, [r0, #0]
 800dfb2:	60c4      	str	r4, [r0, #12]
 800dfb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dfb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dfbc:	b94c      	cbnz	r4, 800dfd2 <__pow5mult+0x66>
 800dfbe:	f240 2171 	movw	r1, #625	@ 0x271
 800dfc2:	4638      	mov	r0, r7
 800dfc4:	f7ff ff12 	bl	800ddec <__i2b>
 800dfc8:	2300      	movs	r3, #0
 800dfca:	f8c8 0008 	str.w	r0, [r8, #8]
 800dfce:	4604      	mov	r4, r0
 800dfd0:	6003      	str	r3, [r0, #0]
 800dfd2:	f04f 0900 	mov.w	r9, #0
 800dfd6:	07eb      	lsls	r3, r5, #31
 800dfd8:	d50a      	bpl.n	800dff0 <__pow5mult+0x84>
 800dfda:	4631      	mov	r1, r6
 800dfdc:	4622      	mov	r2, r4
 800dfde:	4638      	mov	r0, r7
 800dfe0:	f7ff ff1a 	bl	800de18 <__multiply>
 800dfe4:	4631      	mov	r1, r6
 800dfe6:	4680      	mov	r8, r0
 800dfe8:	4638      	mov	r0, r7
 800dfea:	f7ff fe01 	bl	800dbf0 <_Bfree>
 800dfee:	4646      	mov	r6, r8
 800dff0:	106d      	asrs	r5, r5, #1
 800dff2:	d00b      	beq.n	800e00c <__pow5mult+0xa0>
 800dff4:	6820      	ldr	r0, [r4, #0]
 800dff6:	b938      	cbnz	r0, 800e008 <__pow5mult+0x9c>
 800dff8:	4622      	mov	r2, r4
 800dffa:	4621      	mov	r1, r4
 800dffc:	4638      	mov	r0, r7
 800dffe:	f7ff ff0b 	bl	800de18 <__multiply>
 800e002:	6020      	str	r0, [r4, #0]
 800e004:	f8c0 9000 	str.w	r9, [r0]
 800e008:	4604      	mov	r4, r0
 800e00a:	e7e4      	b.n	800dfd6 <__pow5mult+0x6a>
 800e00c:	4630      	mov	r0, r6
 800e00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e012:	bf00      	nop
 800e014:	0800f7ec 	.word	0x0800f7ec
 800e018:	0800f779 	.word	0x0800f779
 800e01c:	0800f790 	.word	0x0800f790

0800e020 <__lshift>:
 800e020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e024:	460c      	mov	r4, r1
 800e026:	6849      	ldr	r1, [r1, #4]
 800e028:	6923      	ldr	r3, [r4, #16]
 800e02a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e02e:	68a3      	ldr	r3, [r4, #8]
 800e030:	4607      	mov	r7, r0
 800e032:	4691      	mov	r9, r2
 800e034:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e038:	f108 0601 	add.w	r6, r8, #1
 800e03c:	42b3      	cmp	r3, r6
 800e03e:	db0b      	blt.n	800e058 <__lshift+0x38>
 800e040:	4638      	mov	r0, r7
 800e042:	f7ff fd95 	bl	800db70 <_Balloc>
 800e046:	4605      	mov	r5, r0
 800e048:	b948      	cbnz	r0, 800e05e <__lshift+0x3e>
 800e04a:	4602      	mov	r2, r0
 800e04c:	4b28      	ldr	r3, [pc, #160]	@ (800e0f0 <__lshift+0xd0>)
 800e04e:	4829      	ldr	r0, [pc, #164]	@ (800e0f4 <__lshift+0xd4>)
 800e050:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e054:	f000 fe06 	bl	800ec64 <__assert_func>
 800e058:	3101      	adds	r1, #1
 800e05a:	005b      	lsls	r3, r3, #1
 800e05c:	e7ee      	b.n	800e03c <__lshift+0x1c>
 800e05e:	2300      	movs	r3, #0
 800e060:	f100 0114 	add.w	r1, r0, #20
 800e064:	f100 0210 	add.w	r2, r0, #16
 800e068:	4618      	mov	r0, r3
 800e06a:	4553      	cmp	r3, sl
 800e06c:	db33      	blt.n	800e0d6 <__lshift+0xb6>
 800e06e:	6920      	ldr	r0, [r4, #16]
 800e070:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e074:	f104 0314 	add.w	r3, r4, #20
 800e078:	f019 091f 	ands.w	r9, r9, #31
 800e07c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e080:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e084:	d02b      	beq.n	800e0de <__lshift+0xbe>
 800e086:	f1c9 0e20 	rsb	lr, r9, #32
 800e08a:	468a      	mov	sl, r1
 800e08c:	2200      	movs	r2, #0
 800e08e:	6818      	ldr	r0, [r3, #0]
 800e090:	fa00 f009 	lsl.w	r0, r0, r9
 800e094:	4310      	orrs	r0, r2
 800e096:	f84a 0b04 	str.w	r0, [sl], #4
 800e09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e09e:	459c      	cmp	ip, r3
 800e0a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e0a4:	d8f3      	bhi.n	800e08e <__lshift+0x6e>
 800e0a6:	ebac 0304 	sub.w	r3, ip, r4
 800e0aa:	3b15      	subs	r3, #21
 800e0ac:	f023 0303 	bic.w	r3, r3, #3
 800e0b0:	3304      	adds	r3, #4
 800e0b2:	f104 0015 	add.w	r0, r4, #21
 800e0b6:	4584      	cmp	ip, r0
 800e0b8:	bf38      	it	cc
 800e0ba:	2304      	movcc	r3, #4
 800e0bc:	50ca      	str	r2, [r1, r3]
 800e0be:	b10a      	cbz	r2, 800e0c4 <__lshift+0xa4>
 800e0c0:	f108 0602 	add.w	r6, r8, #2
 800e0c4:	3e01      	subs	r6, #1
 800e0c6:	4638      	mov	r0, r7
 800e0c8:	612e      	str	r6, [r5, #16]
 800e0ca:	4621      	mov	r1, r4
 800e0cc:	f7ff fd90 	bl	800dbf0 <_Bfree>
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e0da:	3301      	adds	r3, #1
 800e0dc:	e7c5      	b.n	800e06a <__lshift+0x4a>
 800e0de:	3904      	subs	r1, #4
 800e0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e0e8:	459c      	cmp	ip, r3
 800e0ea:	d8f9      	bhi.n	800e0e0 <__lshift+0xc0>
 800e0ec:	e7ea      	b.n	800e0c4 <__lshift+0xa4>
 800e0ee:	bf00      	nop
 800e0f0:	0800f708 	.word	0x0800f708
 800e0f4:	0800f790 	.word	0x0800f790

0800e0f8 <__mcmp>:
 800e0f8:	690a      	ldr	r2, [r1, #16]
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	6900      	ldr	r0, [r0, #16]
 800e0fe:	1a80      	subs	r0, r0, r2
 800e100:	b530      	push	{r4, r5, lr}
 800e102:	d10e      	bne.n	800e122 <__mcmp+0x2a>
 800e104:	3314      	adds	r3, #20
 800e106:	3114      	adds	r1, #20
 800e108:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e10c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e110:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e114:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e118:	4295      	cmp	r5, r2
 800e11a:	d003      	beq.n	800e124 <__mcmp+0x2c>
 800e11c:	d205      	bcs.n	800e12a <__mcmp+0x32>
 800e11e:	f04f 30ff 	mov.w	r0, #4294967295
 800e122:	bd30      	pop	{r4, r5, pc}
 800e124:	42a3      	cmp	r3, r4
 800e126:	d3f3      	bcc.n	800e110 <__mcmp+0x18>
 800e128:	e7fb      	b.n	800e122 <__mcmp+0x2a>
 800e12a:	2001      	movs	r0, #1
 800e12c:	e7f9      	b.n	800e122 <__mcmp+0x2a>
	...

0800e130 <__mdiff>:
 800e130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e134:	4689      	mov	r9, r1
 800e136:	4606      	mov	r6, r0
 800e138:	4611      	mov	r1, r2
 800e13a:	4648      	mov	r0, r9
 800e13c:	4614      	mov	r4, r2
 800e13e:	f7ff ffdb 	bl	800e0f8 <__mcmp>
 800e142:	1e05      	subs	r5, r0, #0
 800e144:	d112      	bne.n	800e16c <__mdiff+0x3c>
 800e146:	4629      	mov	r1, r5
 800e148:	4630      	mov	r0, r6
 800e14a:	f7ff fd11 	bl	800db70 <_Balloc>
 800e14e:	4602      	mov	r2, r0
 800e150:	b928      	cbnz	r0, 800e15e <__mdiff+0x2e>
 800e152:	4b3f      	ldr	r3, [pc, #252]	@ (800e250 <__mdiff+0x120>)
 800e154:	f240 2137 	movw	r1, #567	@ 0x237
 800e158:	483e      	ldr	r0, [pc, #248]	@ (800e254 <__mdiff+0x124>)
 800e15a:	f000 fd83 	bl	800ec64 <__assert_func>
 800e15e:	2301      	movs	r3, #1
 800e160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e164:	4610      	mov	r0, r2
 800e166:	b003      	add	sp, #12
 800e168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16c:	bfbc      	itt	lt
 800e16e:	464b      	movlt	r3, r9
 800e170:	46a1      	movlt	r9, r4
 800e172:	4630      	mov	r0, r6
 800e174:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e178:	bfba      	itte	lt
 800e17a:	461c      	movlt	r4, r3
 800e17c:	2501      	movlt	r5, #1
 800e17e:	2500      	movge	r5, #0
 800e180:	f7ff fcf6 	bl	800db70 <_Balloc>
 800e184:	4602      	mov	r2, r0
 800e186:	b918      	cbnz	r0, 800e190 <__mdiff+0x60>
 800e188:	4b31      	ldr	r3, [pc, #196]	@ (800e250 <__mdiff+0x120>)
 800e18a:	f240 2145 	movw	r1, #581	@ 0x245
 800e18e:	e7e3      	b.n	800e158 <__mdiff+0x28>
 800e190:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e194:	6926      	ldr	r6, [r4, #16]
 800e196:	60c5      	str	r5, [r0, #12]
 800e198:	f109 0310 	add.w	r3, r9, #16
 800e19c:	f109 0514 	add.w	r5, r9, #20
 800e1a0:	f104 0e14 	add.w	lr, r4, #20
 800e1a4:	f100 0b14 	add.w	fp, r0, #20
 800e1a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e1ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e1b0:	9301      	str	r3, [sp, #4]
 800e1b2:	46d9      	mov	r9, fp
 800e1b4:	f04f 0c00 	mov.w	ip, #0
 800e1b8:	9b01      	ldr	r3, [sp, #4]
 800e1ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e1be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e1c2:	9301      	str	r3, [sp, #4]
 800e1c4:	fa1f f38a 	uxth.w	r3, sl
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	b283      	uxth	r3, r0
 800e1cc:	1acb      	subs	r3, r1, r3
 800e1ce:	0c00      	lsrs	r0, r0, #16
 800e1d0:	4463      	add	r3, ip
 800e1d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e1d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e1e0:	4576      	cmp	r6, lr
 800e1e2:	f849 3b04 	str.w	r3, [r9], #4
 800e1e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e1ea:	d8e5      	bhi.n	800e1b8 <__mdiff+0x88>
 800e1ec:	1b33      	subs	r3, r6, r4
 800e1ee:	3b15      	subs	r3, #21
 800e1f0:	f023 0303 	bic.w	r3, r3, #3
 800e1f4:	3415      	adds	r4, #21
 800e1f6:	3304      	adds	r3, #4
 800e1f8:	42a6      	cmp	r6, r4
 800e1fa:	bf38      	it	cc
 800e1fc:	2304      	movcc	r3, #4
 800e1fe:	441d      	add	r5, r3
 800e200:	445b      	add	r3, fp
 800e202:	461e      	mov	r6, r3
 800e204:	462c      	mov	r4, r5
 800e206:	4544      	cmp	r4, r8
 800e208:	d30e      	bcc.n	800e228 <__mdiff+0xf8>
 800e20a:	f108 0103 	add.w	r1, r8, #3
 800e20e:	1b49      	subs	r1, r1, r5
 800e210:	f021 0103 	bic.w	r1, r1, #3
 800e214:	3d03      	subs	r5, #3
 800e216:	45a8      	cmp	r8, r5
 800e218:	bf38      	it	cc
 800e21a:	2100      	movcc	r1, #0
 800e21c:	440b      	add	r3, r1
 800e21e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e222:	b191      	cbz	r1, 800e24a <__mdiff+0x11a>
 800e224:	6117      	str	r7, [r2, #16]
 800e226:	e79d      	b.n	800e164 <__mdiff+0x34>
 800e228:	f854 1b04 	ldr.w	r1, [r4], #4
 800e22c:	46e6      	mov	lr, ip
 800e22e:	0c08      	lsrs	r0, r1, #16
 800e230:	fa1c fc81 	uxtah	ip, ip, r1
 800e234:	4471      	add	r1, lr
 800e236:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e23a:	b289      	uxth	r1, r1
 800e23c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e240:	f846 1b04 	str.w	r1, [r6], #4
 800e244:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e248:	e7dd      	b.n	800e206 <__mdiff+0xd6>
 800e24a:	3f01      	subs	r7, #1
 800e24c:	e7e7      	b.n	800e21e <__mdiff+0xee>
 800e24e:	bf00      	nop
 800e250:	0800f708 	.word	0x0800f708
 800e254:	0800f790 	.word	0x0800f790

0800e258 <__ulp>:
 800e258:	b082      	sub	sp, #8
 800e25a:	ed8d 0b00 	vstr	d0, [sp]
 800e25e:	9a01      	ldr	r2, [sp, #4]
 800e260:	4b0f      	ldr	r3, [pc, #60]	@ (800e2a0 <__ulp+0x48>)
 800e262:	4013      	ands	r3, r2
 800e264:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e268:	2b00      	cmp	r3, #0
 800e26a:	dc08      	bgt.n	800e27e <__ulp+0x26>
 800e26c:	425b      	negs	r3, r3
 800e26e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e272:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e276:	da04      	bge.n	800e282 <__ulp+0x2a>
 800e278:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e27c:	4113      	asrs	r3, r2
 800e27e:	2200      	movs	r2, #0
 800e280:	e008      	b.n	800e294 <__ulp+0x3c>
 800e282:	f1a2 0314 	sub.w	r3, r2, #20
 800e286:	2b1e      	cmp	r3, #30
 800e288:	bfda      	itte	le
 800e28a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e28e:	40da      	lsrle	r2, r3
 800e290:	2201      	movgt	r2, #1
 800e292:	2300      	movs	r3, #0
 800e294:	4619      	mov	r1, r3
 800e296:	4610      	mov	r0, r2
 800e298:	ec41 0b10 	vmov	d0, r0, r1
 800e29c:	b002      	add	sp, #8
 800e29e:	4770      	bx	lr
 800e2a0:	7ff00000 	.word	0x7ff00000

0800e2a4 <__b2d>:
 800e2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a8:	6906      	ldr	r6, [r0, #16]
 800e2aa:	f100 0814 	add.w	r8, r0, #20
 800e2ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e2b2:	1f37      	subs	r7, r6, #4
 800e2b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e2b8:	4610      	mov	r0, r2
 800e2ba:	f7ff fd4b 	bl	800dd54 <__hi0bits>
 800e2be:	f1c0 0320 	rsb	r3, r0, #32
 800e2c2:	280a      	cmp	r0, #10
 800e2c4:	600b      	str	r3, [r1, #0]
 800e2c6:	491b      	ldr	r1, [pc, #108]	@ (800e334 <__b2d+0x90>)
 800e2c8:	dc15      	bgt.n	800e2f6 <__b2d+0x52>
 800e2ca:	f1c0 0c0b 	rsb	ip, r0, #11
 800e2ce:	fa22 f30c 	lsr.w	r3, r2, ip
 800e2d2:	45b8      	cmp	r8, r7
 800e2d4:	ea43 0501 	orr.w	r5, r3, r1
 800e2d8:	bf34      	ite	cc
 800e2da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e2de:	2300      	movcs	r3, #0
 800e2e0:	3015      	adds	r0, #21
 800e2e2:	fa02 f000 	lsl.w	r0, r2, r0
 800e2e6:	fa23 f30c 	lsr.w	r3, r3, ip
 800e2ea:	4303      	orrs	r3, r0
 800e2ec:	461c      	mov	r4, r3
 800e2ee:	ec45 4b10 	vmov	d0, r4, r5
 800e2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f6:	45b8      	cmp	r8, r7
 800e2f8:	bf3a      	itte	cc
 800e2fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e2fe:	f1a6 0708 	subcc.w	r7, r6, #8
 800e302:	2300      	movcs	r3, #0
 800e304:	380b      	subs	r0, #11
 800e306:	d012      	beq.n	800e32e <__b2d+0x8a>
 800e308:	f1c0 0120 	rsb	r1, r0, #32
 800e30c:	fa23 f401 	lsr.w	r4, r3, r1
 800e310:	4082      	lsls	r2, r0
 800e312:	4322      	orrs	r2, r4
 800e314:	4547      	cmp	r7, r8
 800e316:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e31a:	bf8c      	ite	hi
 800e31c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e320:	2200      	movls	r2, #0
 800e322:	4083      	lsls	r3, r0
 800e324:	40ca      	lsrs	r2, r1
 800e326:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e32a:	4313      	orrs	r3, r2
 800e32c:	e7de      	b.n	800e2ec <__b2d+0x48>
 800e32e:	ea42 0501 	orr.w	r5, r2, r1
 800e332:	e7db      	b.n	800e2ec <__b2d+0x48>
 800e334:	3ff00000 	.word	0x3ff00000

0800e338 <__d2b>:
 800e338:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e33c:	460f      	mov	r7, r1
 800e33e:	2101      	movs	r1, #1
 800e340:	ec59 8b10 	vmov	r8, r9, d0
 800e344:	4616      	mov	r6, r2
 800e346:	f7ff fc13 	bl	800db70 <_Balloc>
 800e34a:	4604      	mov	r4, r0
 800e34c:	b930      	cbnz	r0, 800e35c <__d2b+0x24>
 800e34e:	4602      	mov	r2, r0
 800e350:	4b23      	ldr	r3, [pc, #140]	@ (800e3e0 <__d2b+0xa8>)
 800e352:	4824      	ldr	r0, [pc, #144]	@ (800e3e4 <__d2b+0xac>)
 800e354:	f240 310f 	movw	r1, #783	@ 0x30f
 800e358:	f000 fc84 	bl	800ec64 <__assert_func>
 800e35c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e364:	b10d      	cbz	r5, 800e36a <__d2b+0x32>
 800e366:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e36a:	9301      	str	r3, [sp, #4]
 800e36c:	f1b8 0300 	subs.w	r3, r8, #0
 800e370:	d023      	beq.n	800e3ba <__d2b+0x82>
 800e372:	4668      	mov	r0, sp
 800e374:	9300      	str	r3, [sp, #0]
 800e376:	f7ff fd0c 	bl	800dd92 <__lo0bits>
 800e37a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e37e:	b1d0      	cbz	r0, 800e3b6 <__d2b+0x7e>
 800e380:	f1c0 0320 	rsb	r3, r0, #32
 800e384:	fa02 f303 	lsl.w	r3, r2, r3
 800e388:	430b      	orrs	r3, r1
 800e38a:	40c2      	lsrs	r2, r0
 800e38c:	6163      	str	r3, [r4, #20]
 800e38e:	9201      	str	r2, [sp, #4]
 800e390:	9b01      	ldr	r3, [sp, #4]
 800e392:	61a3      	str	r3, [r4, #24]
 800e394:	2b00      	cmp	r3, #0
 800e396:	bf0c      	ite	eq
 800e398:	2201      	moveq	r2, #1
 800e39a:	2202      	movne	r2, #2
 800e39c:	6122      	str	r2, [r4, #16]
 800e39e:	b1a5      	cbz	r5, 800e3ca <__d2b+0x92>
 800e3a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e3a4:	4405      	add	r5, r0
 800e3a6:	603d      	str	r5, [r7, #0]
 800e3a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e3ac:	6030      	str	r0, [r6, #0]
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	b003      	add	sp, #12
 800e3b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3b6:	6161      	str	r1, [r4, #20]
 800e3b8:	e7ea      	b.n	800e390 <__d2b+0x58>
 800e3ba:	a801      	add	r0, sp, #4
 800e3bc:	f7ff fce9 	bl	800dd92 <__lo0bits>
 800e3c0:	9b01      	ldr	r3, [sp, #4]
 800e3c2:	6163      	str	r3, [r4, #20]
 800e3c4:	3020      	adds	r0, #32
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	e7e8      	b.n	800e39c <__d2b+0x64>
 800e3ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e3ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e3d2:	6038      	str	r0, [r7, #0]
 800e3d4:	6918      	ldr	r0, [r3, #16]
 800e3d6:	f7ff fcbd 	bl	800dd54 <__hi0bits>
 800e3da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e3de:	e7e5      	b.n	800e3ac <__d2b+0x74>
 800e3e0:	0800f708 	.word	0x0800f708
 800e3e4:	0800f790 	.word	0x0800f790

0800e3e8 <__ratio>:
 800e3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ec:	b085      	sub	sp, #20
 800e3ee:	e9cd 1000 	strd	r1, r0, [sp]
 800e3f2:	a902      	add	r1, sp, #8
 800e3f4:	f7ff ff56 	bl	800e2a4 <__b2d>
 800e3f8:	9800      	ldr	r0, [sp, #0]
 800e3fa:	a903      	add	r1, sp, #12
 800e3fc:	ec55 4b10 	vmov	r4, r5, d0
 800e400:	f7ff ff50 	bl	800e2a4 <__b2d>
 800e404:	9b01      	ldr	r3, [sp, #4]
 800e406:	6919      	ldr	r1, [r3, #16]
 800e408:	9b00      	ldr	r3, [sp, #0]
 800e40a:	691b      	ldr	r3, [r3, #16]
 800e40c:	1ac9      	subs	r1, r1, r3
 800e40e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e412:	1a9b      	subs	r3, r3, r2
 800e414:	ec5b ab10 	vmov	sl, fp, d0
 800e418:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	bfce      	itee	gt
 800e420:	462a      	movgt	r2, r5
 800e422:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e426:	465a      	movle	r2, fp
 800e428:	462f      	mov	r7, r5
 800e42a:	46d9      	mov	r9, fp
 800e42c:	bfcc      	ite	gt
 800e42e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e432:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e436:	464b      	mov	r3, r9
 800e438:	4652      	mov	r2, sl
 800e43a:	4620      	mov	r0, r4
 800e43c:	4639      	mov	r1, r7
 800e43e:	f7f2 fa2d 	bl	800089c <__aeabi_ddiv>
 800e442:	ec41 0b10 	vmov	d0, r0, r1
 800e446:	b005      	add	sp, #20
 800e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e44c <__copybits>:
 800e44c:	3901      	subs	r1, #1
 800e44e:	b570      	push	{r4, r5, r6, lr}
 800e450:	1149      	asrs	r1, r1, #5
 800e452:	6914      	ldr	r4, [r2, #16]
 800e454:	3101      	adds	r1, #1
 800e456:	f102 0314 	add.w	r3, r2, #20
 800e45a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e45e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e462:	1f05      	subs	r5, r0, #4
 800e464:	42a3      	cmp	r3, r4
 800e466:	d30c      	bcc.n	800e482 <__copybits+0x36>
 800e468:	1aa3      	subs	r3, r4, r2
 800e46a:	3b11      	subs	r3, #17
 800e46c:	f023 0303 	bic.w	r3, r3, #3
 800e470:	3211      	adds	r2, #17
 800e472:	42a2      	cmp	r2, r4
 800e474:	bf88      	it	hi
 800e476:	2300      	movhi	r3, #0
 800e478:	4418      	add	r0, r3
 800e47a:	2300      	movs	r3, #0
 800e47c:	4288      	cmp	r0, r1
 800e47e:	d305      	bcc.n	800e48c <__copybits+0x40>
 800e480:	bd70      	pop	{r4, r5, r6, pc}
 800e482:	f853 6b04 	ldr.w	r6, [r3], #4
 800e486:	f845 6f04 	str.w	r6, [r5, #4]!
 800e48a:	e7eb      	b.n	800e464 <__copybits+0x18>
 800e48c:	f840 3b04 	str.w	r3, [r0], #4
 800e490:	e7f4      	b.n	800e47c <__copybits+0x30>

0800e492 <__any_on>:
 800e492:	f100 0214 	add.w	r2, r0, #20
 800e496:	6900      	ldr	r0, [r0, #16]
 800e498:	114b      	asrs	r3, r1, #5
 800e49a:	4298      	cmp	r0, r3
 800e49c:	b510      	push	{r4, lr}
 800e49e:	db11      	blt.n	800e4c4 <__any_on+0x32>
 800e4a0:	dd0a      	ble.n	800e4b8 <__any_on+0x26>
 800e4a2:	f011 011f 	ands.w	r1, r1, #31
 800e4a6:	d007      	beq.n	800e4b8 <__any_on+0x26>
 800e4a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e4ac:	fa24 f001 	lsr.w	r0, r4, r1
 800e4b0:	fa00 f101 	lsl.w	r1, r0, r1
 800e4b4:	428c      	cmp	r4, r1
 800e4b6:	d10b      	bne.n	800e4d0 <__any_on+0x3e>
 800e4b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d803      	bhi.n	800e4c8 <__any_on+0x36>
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	bd10      	pop	{r4, pc}
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	e7f7      	b.n	800e4b8 <__any_on+0x26>
 800e4c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e4cc:	2900      	cmp	r1, #0
 800e4ce:	d0f5      	beq.n	800e4bc <__any_on+0x2a>
 800e4d0:	2001      	movs	r0, #1
 800e4d2:	e7f6      	b.n	800e4c2 <__any_on+0x30>

0800e4d4 <__ascii_wctomb>:
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	4608      	mov	r0, r1
 800e4d8:	b141      	cbz	r1, 800e4ec <__ascii_wctomb+0x18>
 800e4da:	2aff      	cmp	r2, #255	@ 0xff
 800e4dc:	d904      	bls.n	800e4e8 <__ascii_wctomb+0x14>
 800e4de:	228a      	movs	r2, #138	@ 0x8a
 800e4e0:	601a      	str	r2, [r3, #0]
 800e4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e6:	4770      	bx	lr
 800e4e8:	700a      	strb	r2, [r1, #0]
 800e4ea:	2001      	movs	r0, #1
 800e4ec:	4770      	bx	lr

0800e4ee <__ssputs_r>:
 800e4ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f2:	688e      	ldr	r6, [r1, #8]
 800e4f4:	461f      	mov	r7, r3
 800e4f6:	42be      	cmp	r6, r7
 800e4f8:	680b      	ldr	r3, [r1, #0]
 800e4fa:	4682      	mov	sl, r0
 800e4fc:	460c      	mov	r4, r1
 800e4fe:	4690      	mov	r8, r2
 800e500:	d82d      	bhi.n	800e55e <__ssputs_r+0x70>
 800e502:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e506:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e50a:	d026      	beq.n	800e55a <__ssputs_r+0x6c>
 800e50c:	6965      	ldr	r5, [r4, #20]
 800e50e:	6909      	ldr	r1, [r1, #16]
 800e510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e514:	eba3 0901 	sub.w	r9, r3, r1
 800e518:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e51c:	1c7b      	adds	r3, r7, #1
 800e51e:	444b      	add	r3, r9
 800e520:	106d      	asrs	r5, r5, #1
 800e522:	429d      	cmp	r5, r3
 800e524:	bf38      	it	cc
 800e526:	461d      	movcc	r5, r3
 800e528:	0553      	lsls	r3, r2, #21
 800e52a:	d527      	bpl.n	800e57c <__ssputs_r+0x8e>
 800e52c:	4629      	mov	r1, r5
 800e52e:	f7ff fa81 	bl	800da34 <_malloc_r>
 800e532:	4606      	mov	r6, r0
 800e534:	b360      	cbz	r0, 800e590 <__ssputs_r+0xa2>
 800e536:	6921      	ldr	r1, [r4, #16]
 800e538:	464a      	mov	r2, r9
 800e53a:	f7fe febc 	bl	800d2b6 <memcpy>
 800e53e:	89a3      	ldrh	r3, [r4, #12]
 800e540:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e548:	81a3      	strh	r3, [r4, #12]
 800e54a:	6126      	str	r6, [r4, #16]
 800e54c:	6165      	str	r5, [r4, #20]
 800e54e:	444e      	add	r6, r9
 800e550:	eba5 0509 	sub.w	r5, r5, r9
 800e554:	6026      	str	r6, [r4, #0]
 800e556:	60a5      	str	r5, [r4, #8]
 800e558:	463e      	mov	r6, r7
 800e55a:	42be      	cmp	r6, r7
 800e55c:	d900      	bls.n	800e560 <__ssputs_r+0x72>
 800e55e:	463e      	mov	r6, r7
 800e560:	6820      	ldr	r0, [r4, #0]
 800e562:	4632      	mov	r2, r6
 800e564:	4641      	mov	r1, r8
 800e566:	f000 fb53 	bl	800ec10 <memmove>
 800e56a:	68a3      	ldr	r3, [r4, #8]
 800e56c:	1b9b      	subs	r3, r3, r6
 800e56e:	60a3      	str	r3, [r4, #8]
 800e570:	6823      	ldr	r3, [r4, #0]
 800e572:	4433      	add	r3, r6
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	2000      	movs	r0, #0
 800e578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e57c:	462a      	mov	r2, r5
 800e57e:	f000 fbab 	bl	800ecd8 <_realloc_r>
 800e582:	4606      	mov	r6, r0
 800e584:	2800      	cmp	r0, #0
 800e586:	d1e0      	bne.n	800e54a <__ssputs_r+0x5c>
 800e588:	6921      	ldr	r1, [r4, #16]
 800e58a:	4650      	mov	r0, sl
 800e58c:	f7fe feac 	bl	800d2e8 <_free_r>
 800e590:	230c      	movs	r3, #12
 800e592:	f8ca 3000 	str.w	r3, [sl]
 800e596:	89a3      	ldrh	r3, [r4, #12]
 800e598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e59c:	81a3      	strh	r3, [r4, #12]
 800e59e:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a2:	e7e9      	b.n	800e578 <__ssputs_r+0x8a>

0800e5a4 <_svfiprintf_r>:
 800e5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a8:	4698      	mov	r8, r3
 800e5aa:	898b      	ldrh	r3, [r1, #12]
 800e5ac:	061b      	lsls	r3, r3, #24
 800e5ae:	b09d      	sub	sp, #116	@ 0x74
 800e5b0:	4607      	mov	r7, r0
 800e5b2:	460d      	mov	r5, r1
 800e5b4:	4614      	mov	r4, r2
 800e5b6:	d510      	bpl.n	800e5da <_svfiprintf_r+0x36>
 800e5b8:	690b      	ldr	r3, [r1, #16]
 800e5ba:	b973      	cbnz	r3, 800e5da <_svfiprintf_r+0x36>
 800e5bc:	2140      	movs	r1, #64	@ 0x40
 800e5be:	f7ff fa39 	bl	800da34 <_malloc_r>
 800e5c2:	6028      	str	r0, [r5, #0]
 800e5c4:	6128      	str	r0, [r5, #16]
 800e5c6:	b930      	cbnz	r0, 800e5d6 <_svfiprintf_r+0x32>
 800e5c8:	230c      	movs	r3, #12
 800e5ca:	603b      	str	r3, [r7, #0]
 800e5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d0:	b01d      	add	sp, #116	@ 0x74
 800e5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d6:	2340      	movs	r3, #64	@ 0x40
 800e5d8:	616b      	str	r3, [r5, #20]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5de:	2320      	movs	r3, #32
 800e5e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5e8:	2330      	movs	r3, #48	@ 0x30
 800e5ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e788 <_svfiprintf_r+0x1e4>
 800e5ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e5f2:	f04f 0901 	mov.w	r9, #1
 800e5f6:	4623      	mov	r3, r4
 800e5f8:	469a      	mov	sl, r3
 800e5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5fe:	b10a      	cbz	r2, 800e604 <_svfiprintf_r+0x60>
 800e600:	2a25      	cmp	r2, #37	@ 0x25
 800e602:	d1f9      	bne.n	800e5f8 <_svfiprintf_r+0x54>
 800e604:	ebba 0b04 	subs.w	fp, sl, r4
 800e608:	d00b      	beq.n	800e622 <_svfiprintf_r+0x7e>
 800e60a:	465b      	mov	r3, fp
 800e60c:	4622      	mov	r2, r4
 800e60e:	4629      	mov	r1, r5
 800e610:	4638      	mov	r0, r7
 800e612:	f7ff ff6c 	bl	800e4ee <__ssputs_r>
 800e616:	3001      	adds	r0, #1
 800e618:	f000 80a7 	beq.w	800e76a <_svfiprintf_r+0x1c6>
 800e61c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e61e:	445a      	add	r2, fp
 800e620:	9209      	str	r2, [sp, #36]	@ 0x24
 800e622:	f89a 3000 	ldrb.w	r3, [sl]
 800e626:	2b00      	cmp	r3, #0
 800e628:	f000 809f 	beq.w	800e76a <_svfiprintf_r+0x1c6>
 800e62c:	2300      	movs	r3, #0
 800e62e:	f04f 32ff 	mov.w	r2, #4294967295
 800e632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e636:	f10a 0a01 	add.w	sl, sl, #1
 800e63a:	9304      	str	r3, [sp, #16]
 800e63c:	9307      	str	r3, [sp, #28]
 800e63e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e642:	931a      	str	r3, [sp, #104]	@ 0x68
 800e644:	4654      	mov	r4, sl
 800e646:	2205      	movs	r2, #5
 800e648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e64c:	484e      	ldr	r0, [pc, #312]	@ (800e788 <_svfiprintf_r+0x1e4>)
 800e64e:	f7f1 fdef 	bl	8000230 <memchr>
 800e652:	9a04      	ldr	r2, [sp, #16]
 800e654:	b9d8      	cbnz	r0, 800e68e <_svfiprintf_r+0xea>
 800e656:	06d0      	lsls	r0, r2, #27
 800e658:	bf44      	itt	mi
 800e65a:	2320      	movmi	r3, #32
 800e65c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e660:	0711      	lsls	r1, r2, #28
 800e662:	bf44      	itt	mi
 800e664:	232b      	movmi	r3, #43	@ 0x2b
 800e666:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e66a:	f89a 3000 	ldrb.w	r3, [sl]
 800e66e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e670:	d015      	beq.n	800e69e <_svfiprintf_r+0xfa>
 800e672:	9a07      	ldr	r2, [sp, #28]
 800e674:	4654      	mov	r4, sl
 800e676:	2000      	movs	r0, #0
 800e678:	f04f 0c0a 	mov.w	ip, #10
 800e67c:	4621      	mov	r1, r4
 800e67e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e682:	3b30      	subs	r3, #48	@ 0x30
 800e684:	2b09      	cmp	r3, #9
 800e686:	d94b      	bls.n	800e720 <_svfiprintf_r+0x17c>
 800e688:	b1b0      	cbz	r0, 800e6b8 <_svfiprintf_r+0x114>
 800e68a:	9207      	str	r2, [sp, #28]
 800e68c:	e014      	b.n	800e6b8 <_svfiprintf_r+0x114>
 800e68e:	eba0 0308 	sub.w	r3, r0, r8
 800e692:	fa09 f303 	lsl.w	r3, r9, r3
 800e696:	4313      	orrs	r3, r2
 800e698:	9304      	str	r3, [sp, #16]
 800e69a:	46a2      	mov	sl, r4
 800e69c:	e7d2      	b.n	800e644 <_svfiprintf_r+0xa0>
 800e69e:	9b03      	ldr	r3, [sp, #12]
 800e6a0:	1d19      	adds	r1, r3, #4
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	9103      	str	r1, [sp, #12]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	bfbb      	ittet	lt
 800e6aa:	425b      	neglt	r3, r3
 800e6ac:	f042 0202 	orrlt.w	r2, r2, #2
 800e6b0:	9307      	strge	r3, [sp, #28]
 800e6b2:	9307      	strlt	r3, [sp, #28]
 800e6b4:	bfb8      	it	lt
 800e6b6:	9204      	strlt	r2, [sp, #16]
 800e6b8:	7823      	ldrb	r3, [r4, #0]
 800e6ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6bc:	d10a      	bne.n	800e6d4 <_svfiprintf_r+0x130>
 800e6be:	7863      	ldrb	r3, [r4, #1]
 800e6c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6c2:	d132      	bne.n	800e72a <_svfiprintf_r+0x186>
 800e6c4:	9b03      	ldr	r3, [sp, #12]
 800e6c6:	1d1a      	adds	r2, r3, #4
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	9203      	str	r2, [sp, #12]
 800e6cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6d0:	3402      	adds	r4, #2
 800e6d2:	9305      	str	r3, [sp, #20]
 800e6d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e798 <_svfiprintf_r+0x1f4>
 800e6d8:	7821      	ldrb	r1, [r4, #0]
 800e6da:	2203      	movs	r2, #3
 800e6dc:	4650      	mov	r0, sl
 800e6de:	f7f1 fda7 	bl	8000230 <memchr>
 800e6e2:	b138      	cbz	r0, 800e6f4 <_svfiprintf_r+0x150>
 800e6e4:	9b04      	ldr	r3, [sp, #16]
 800e6e6:	eba0 000a 	sub.w	r0, r0, sl
 800e6ea:	2240      	movs	r2, #64	@ 0x40
 800e6ec:	4082      	lsls	r2, r0
 800e6ee:	4313      	orrs	r3, r2
 800e6f0:	3401      	adds	r4, #1
 800e6f2:	9304      	str	r3, [sp, #16]
 800e6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6f8:	4824      	ldr	r0, [pc, #144]	@ (800e78c <_svfiprintf_r+0x1e8>)
 800e6fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e6fe:	2206      	movs	r2, #6
 800e700:	f7f1 fd96 	bl	8000230 <memchr>
 800e704:	2800      	cmp	r0, #0
 800e706:	d036      	beq.n	800e776 <_svfiprintf_r+0x1d2>
 800e708:	4b21      	ldr	r3, [pc, #132]	@ (800e790 <_svfiprintf_r+0x1ec>)
 800e70a:	bb1b      	cbnz	r3, 800e754 <_svfiprintf_r+0x1b0>
 800e70c:	9b03      	ldr	r3, [sp, #12]
 800e70e:	3307      	adds	r3, #7
 800e710:	f023 0307 	bic.w	r3, r3, #7
 800e714:	3308      	adds	r3, #8
 800e716:	9303      	str	r3, [sp, #12]
 800e718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e71a:	4433      	add	r3, r6
 800e71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e71e:	e76a      	b.n	800e5f6 <_svfiprintf_r+0x52>
 800e720:	fb0c 3202 	mla	r2, ip, r2, r3
 800e724:	460c      	mov	r4, r1
 800e726:	2001      	movs	r0, #1
 800e728:	e7a8      	b.n	800e67c <_svfiprintf_r+0xd8>
 800e72a:	2300      	movs	r3, #0
 800e72c:	3401      	adds	r4, #1
 800e72e:	9305      	str	r3, [sp, #20]
 800e730:	4619      	mov	r1, r3
 800e732:	f04f 0c0a 	mov.w	ip, #10
 800e736:	4620      	mov	r0, r4
 800e738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e73c:	3a30      	subs	r2, #48	@ 0x30
 800e73e:	2a09      	cmp	r2, #9
 800e740:	d903      	bls.n	800e74a <_svfiprintf_r+0x1a6>
 800e742:	2b00      	cmp	r3, #0
 800e744:	d0c6      	beq.n	800e6d4 <_svfiprintf_r+0x130>
 800e746:	9105      	str	r1, [sp, #20]
 800e748:	e7c4      	b.n	800e6d4 <_svfiprintf_r+0x130>
 800e74a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e74e:	4604      	mov	r4, r0
 800e750:	2301      	movs	r3, #1
 800e752:	e7f0      	b.n	800e736 <_svfiprintf_r+0x192>
 800e754:	ab03      	add	r3, sp, #12
 800e756:	9300      	str	r3, [sp, #0]
 800e758:	462a      	mov	r2, r5
 800e75a:	4b0e      	ldr	r3, [pc, #56]	@ (800e794 <_svfiprintf_r+0x1f0>)
 800e75c:	a904      	add	r1, sp, #16
 800e75e:	4638      	mov	r0, r7
 800e760:	f3af 8000 	nop.w
 800e764:	1c42      	adds	r2, r0, #1
 800e766:	4606      	mov	r6, r0
 800e768:	d1d6      	bne.n	800e718 <_svfiprintf_r+0x174>
 800e76a:	89ab      	ldrh	r3, [r5, #12]
 800e76c:	065b      	lsls	r3, r3, #25
 800e76e:	f53f af2d 	bmi.w	800e5cc <_svfiprintf_r+0x28>
 800e772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e774:	e72c      	b.n	800e5d0 <_svfiprintf_r+0x2c>
 800e776:	ab03      	add	r3, sp, #12
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	462a      	mov	r2, r5
 800e77c:	4b05      	ldr	r3, [pc, #20]	@ (800e794 <_svfiprintf_r+0x1f0>)
 800e77e:	a904      	add	r1, sp, #16
 800e780:	4638      	mov	r0, r7
 800e782:	f000 f879 	bl	800e878 <_printf_i>
 800e786:	e7ed      	b.n	800e764 <_svfiprintf_r+0x1c0>
 800e788:	0800f9e9 	.word	0x0800f9e9
 800e78c:	0800f9f3 	.word	0x0800f9f3
 800e790:	00000000 	.word	0x00000000
 800e794:	0800e4ef 	.word	0x0800e4ef
 800e798:	0800f9ef 	.word	0x0800f9ef

0800e79c <_printf_common>:
 800e79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7a0:	4616      	mov	r6, r2
 800e7a2:	4698      	mov	r8, r3
 800e7a4:	688a      	ldr	r2, [r1, #8]
 800e7a6:	690b      	ldr	r3, [r1, #16]
 800e7a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	bfb8      	it	lt
 800e7b0:	4613      	movlt	r3, r2
 800e7b2:	6033      	str	r3, [r6, #0]
 800e7b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e7b8:	4607      	mov	r7, r0
 800e7ba:	460c      	mov	r4, r1
 800e7bc:	b10a      	cbz	r2, 800e7c2 <_printf_common+0x26>
 800e7be:	3301      	adds	r3, #1
 800e7c0:	6033      	str	r3, [r6, #0]
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	0699      	lsls	r1, r3, #26
 800e7c6:	bf42      	ittt	mi
 800e7c8:	6833      	ldrmi	r3, [r6, #0]
 800e7ca:	3302      	addmi	r3, #2
 800e7cc:	6033      	strmi	r3, [r6, #0]
 800e7ce:	6825      	ldr	r5, [r4, #0]
 800e7d0:	f015 0506 	ands.w	r5, r5, #6
 800e7d4:	d106      	bne.n	800e7e4 <_printf_common+0x48>
 800e7d6:	f104 0a19 	add.w	sl, r4, #25
 800e7da:	68e3      	ldr	r3, [r4, #12]
 800e7dc:	6832      	ldr	r2, [r6, #0]
 800e7de:	1a9b      	subs	r3, r3, r2
 800e7e0:	42ab      	cmp	r3, r5
 800e7e2:	dc26      	bgt.n	800e832 <_printf_common+0x96>
 800e7e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e7e8:	6822      	ldr	r2, [r4, #0]
 800e7ea:	3b00      	subs	r3, #0
 800e7ec:	bf18      	it	ne
 800e7ee:	2301      	movne	r3, #1
 800e7f0:	0692      	lsls	r2, r2, #26
 800e7f2:	d42b      	bmi.n	800e84c <_printf_common+0xb0>
 800e7f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e7f8:	4641      	mov	r1, r8
 800e7fa:	4638      	mov	r0, r7
 800e7fc:	47c8      	blx	r9
 800e7fe:	3001      	adds	r0, #1
 800e800:	d01e      	beq.n	800e840 <_printf_common+0xa4>
 800e802:	6823      	ldr	r3, [r4, #0]
 800e804:	6922      	ldr	r2, [r4, #16]
 800e806:	f003 0306 	and.w	r3, r3, #6
 800e80a:	2b04      	cmp	r3, #4
 800e80c:	bf02      	ittt	eq
 800e80e:	68e5      	ldreq	r5, [r4, #12]
 800e810:	6833      	ldreq	r3, [r6, #0]
 800e812:	1aed      	subeq	r5, r5, r3
 800e814:	68a3      	ldr	r3, [r4, #8]
 800e816:	bf0c      	ite	eq
 800e818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e81c:	2500      	movne	r5, #0
 800e81e:	4293      	cmp	r3, r2
 800e820:	bfc4      	itt	gt
 800e822:	1a9b      	subgt	r3, r3, r2
 800e824:	18ed      	addgt	r5, r5, r3
 800e826:	2600      	movs	r6, #0
 800e828:	341a      	adds	r4, #26
 800e82a:	42b5      	cmp	r5, r6
 800e82c:	d11a      	bne.n	800e864 <_printf_common+0xc8>
 800e82e:	2000      	movs	r0, #0
 800e830:	e008      	b.n	800e844 <_printf_common+0xa8>
 800e832:	2301      	movs	r3, #1
 800e834:	4652      	mov	r2, sl
 800e836:	4641      	mov	r1, r8
 800e838:	4638      	mov	r0, r7
 800e83a:	47c8      	blx	r9
 800e83c:	3001      	adds	r0, #1
 800e83e:	d103      	bne.n	800e848 <_printf_common+0xac>
 800e840:	f04f 30ff 	mov.w	r0, #4294967295
 800e844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e848:	3501      	adds	r5, #1
 800e84a:	e7c6      	b.n	800e7da <_printf_common+0x3e>
 800e84c:	18e1      	adds	r1, r4, r3
 800e84e:	1c5a      	adds	r2, r3, #1
 800e850:	2030      	movs	r0, #48	@ 0x30
 800e852:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e856:	4422      	add	r2, r4
 800e858:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e85c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e860:	3302      	adds	r3, #2
 800e862:	e7c7      	b.n	800e7f4 <_printf_common+0x58>
 800e864:	2301      	movs	r3, #1
 800e866:	4622      	mov	r2, r4
 800e868:	4641      	mov	r1, r8
 800e86a:	4638      	mov	r0, r7
 800e86c:	47c8      	blx	r9
 800e86e:	3001      	adds	r0, #1
 800e870:	d0e6      	beq.n	800e840 <_printf_common+0xa4>
 800e872:	3601      	adds	r6, #1
 800e874:	e7d9      	b.n	800e82a <_printf_common+0x8e>
	...

0800e878 <_printf_i>:
 800e878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e87c:	7e0f      	ldrb	r7, [r1, #24]
 800e87e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e880:	2f78      	cmp	r7, #120	@ 0x78
 800e882:	4691      	mov	r9, r2
 800e884:	4680      	mov	r8, r0
 800e886:	460c      	mov	r4, r1
 800e888:	469a      	mov	sl, r3
 800e88a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e88e:	d807      	bhi.n	800e8a0 <_printf_i+0x28>
 800e890:	2f62      	cmp	r7, #98	@ 0x62
 800e892:	d80a      	bhi.n	800e8aa <_printf_i+0x32>
 800e894:	2f00      	cmp	r7, #0
 800e896:	f000 80d2 	beq.w	800ea3e <_printf_i+0x1c6>
 800e89a:	2f58      	cmp	r7, #88	@ 0x58
 800e89c:	f000 80b9 	beq.w	800ea12 <_printf_i+0x19a>
 800e8a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e8a8:	e03a      	b.n	800e920 <_printf_i+0xa8>
 800e8aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e8ae:	2b15      	cmp	r3, #21
 800e8b0:	d8f6      	bhi.n	800e8a0 <_printf_i+0x28>
 800e8b2:	a101      	add	r1, pc, #4	@ (adr r1, 800e8b8 <_printf_i+0x40>)
 800e8b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8b8:	0800e911 	.word	0x0800e911
 800e8bc:	0800e925 	.word	0x0800e925
 800e8c0:	0800e8a1 	.word	0x0800e8a1
 800e8c4:	0800e8a1 	.word	0x0800e8a1
 800e8c8:	0800e8a1 	.word	0x0800e8a1
 800e8cc:	0800e8a1 	.word	0x0800e8a1
 800e8d0:	0800e925 	.word	0x0800e925
 800e8d4:	0800e8a1 	.word	0x0800e8a1
 800e8d8:	0800e8a1 	.word	0x0800e8a1
 800e8dc:	0800e8a1 	.word	0x0800e8a1
 800e8e0:	0800e8a1 	.word	0x0800e8a1
 800e8e4:	0800ea25 	.word	0x0800ea25
 800e8e8:	0800e94f 	.word	0x0800e94f
 800e8ec:	0800e9df 	.word	0x0800e9df
 800e8f0:	0800e8a1 	.word	0x0800e8a1
 800e8f4:	0800e8a1 	.word	0x0800e8a1
 800e8f8:	0800ea47 	.word	0x0800ea47
 800e8fc:	0800e8a1 	.word	0x0800e8a1
 800e900:	0800e94f 	.word	0x0800e94f
 800e904:	0800e8a1 	.word	0x0800e8a1
 800e908:	0800e8a1 	.word	0x0800e8a1
 800e90c:	0800e9e7 	.word	0x0800e9e7
 800e910:	6833      	ldr	r3, [r6, #0]
 800e912:	1d1a      	adds	r2, r3, #4
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	6032      	str	r2, [r6, #0]
 800e918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e91c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e920:	2301      	movs	r3, #1
 800e922:	e09d      	b.n	800ea60 <_printf_i+0x1e8>
 800e924:	6833      	ldr	r3, [r6, #0]
 800e926:	6820      	ldr	r0, [r4, #0]
 800e928:	1d19      	adds	r1, r3, #4
 800e92a:	6031      	str	r1, [r6, #0]
 800e92c:	0606      	lsls	r6, r0, #24
 800e92e:	d501      	bpl.n	800e934 <_printf_i+0xbc>
 800e930:	681d      	ldr	r5, [r3, #0]
 800e932:	e003      	b.n	800e93c <_printf_i+0xc4>
 800e934:	0645      	lsls	r5, r0, #25
 800e936:	d5fb      	bpl.n	800e930 <_printf_i+0xb8>
 800e938:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e93c:	2d00      	cmp	r5, #0
 800e93e:	da03      	bge.n	800e948 <_printf_i+0xd0>
 800e940:	232d      	movs	r3, #45	@ 0x2d
 800e942:	426d      	negs	r5, r5
 800e944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e948:	4859      	ldr	r0, [pc, #356]	@ (800eab0 <_printf_i+0x238>)
 800e94a:	230a      	movs	r3, #10
 800e94c:	e011      	b.n	800e972 <_printf_i+0xfa>
 800e94e:	6821      	ldr	r1, [r4, #0]
 800e950:	6833      	ldr	r3, [r6, #0]
 800e952:	0608      	lsls	r0, r1, #24
 800e954:	f853 5b04 	ldr.w	r5, [r3], #4
 800e958:	d402      	bmi.n	800e960 <_printf_i+0xe8>
 800e95a:	0649      	lsls	r1, r1, #25
 800e95c:	bf48      	it	mi
 800e95e:	b2ad      	uxthmi	r5, r5
 800e960:	2f6f      	cmp	r7, #111	@ 0x6f
 800e962:	4853      	ldr	r0, [pc, #332]	@ (800eab0 <_printf_i+0x238>)
 800e964:	6033      	str	r3, [r6, #0]
 800e966:	bf14      	ite	ne
 800e968:	230a      	movne	r3, #10
 800e96a:	2308      	moveq	r3, #8
 800e96c:	2100      	movs	r1, #0
 800e96e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e972:	6866      	ldr	r6, [r4, #4]
 800e974:	60a6      	str	r6, [r4, #8]
 800e976:	2e00      	cmp	r6, #0
 800e978:	bfa2      	ittt	ge
 800e97a:	6821      	ldrge	r1, [r4, #0]
 800e97c:	f021 0104 	bicge.w	r1, r1, #4
 800e980:	6021      	strge	r1, [r4, #0]
 800e982:	b90d      	cbnz	r5, 800e988 <_printf_i+0x110>
 800e984:	2e00      	cmp	r6, #0
 800e986:	d04b      	beq.n	800ea20 <_printf_i+0x1a8>
 800e988:	4616      	mov	r6, r2
 800e98a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e98e:	fb03 5711 	mls	r7, r3, r1, r5
 800e992:	5dc7      	ldrb	r7, [r0, r7]
 800e994:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e998:	462f      	mov	r7, r5
 800e99a:	42bb      	cmp	r3, r7
 800e99c:	460d      	mov	r5, r1
 800e99e:	d9f4      	bls.n	800e98a <_printf_i+0x112>
 800e9a0:	2b08      	cmp	r3, #8
 800e9a2:	d10b      	bne.n	800e9bc <_printf_i+0x144>
 800e9a4:	6823      	ldr	r3, [r4, #0]
 800e9a6:	07df      	lsls	r7, r3, #31
 800e9a8:	d508      	bpl.n	800e9bc <_printf_i+0x144>
 800e9aa:	6923      	ldr	r3, [r4, #16]
 800e9ac:	6861      	ldr	r1, [r4, #4]
 800e9ae:	4299      	cmp	r1, r3
 800e9b0:	bfde      	ittt	le
 800e9b2:	2330      	movle	r3, #48	@ 0x30
 800e9b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e9b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e9bc:	1b92      	subs	r2, r2, r6
 800e9be:	6122      	str	r2, [r4, #16]
 800e9c0:	f8cd a000 	str.w	sl, [sp]
 800e9c4:	464b      	mov	r3, r9
 800e9c6:	aa03      	add	r2, sp, #12
 800e9c8:	4621      	mov	r1, r4
 800e9ca:	4640      	mov	r0, r8
 800e9cc:	f7ff fee6 	bl	800e79c <_printf_common>
 800e9d0:	3001      	adds	r0, #1
 800e9d2:	d14a      	bne.n	800ea6a <_printf_i+0x1f2>
 800e9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9d8:	b004      	add	sp, #16
 800e9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9de:	6823      	ldr	r3, [r4, #0]
 800e9e0:	f043 0320 	orr.w	r3, r3, #32
 800e9e4:	6023      	str	r3, [r4, #0]
 800e9e6:	4833      	ldr	r0, [pc, #204]	@ (800eab4 <_printf_i+0x23c>)
 800e9e8:	2778      	movs	r7, #120	@ 0x78
 800e9ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e9ee:	6823      	ldr	r3, [r4, #0]
 800e9f0:	6831      	ldr	r1, [r6, #0]
 800e9f2:	061f      	lsls	r7, r3, #24
 800e9f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800e9f8:	d402      	bmi.n	800ea00 <_printf_i+0x188>
 800e9fa:	065f      	lsls	r7, r3, #25
 800e9fc:	bf48      	it	mi
 800e9fe:	b2ad      	uxthmi	r5, r5
 800ea00:	6031      	str	r1, [r6, #0]
 800ea02:	07d9      	lsls	r1, r3, #31
 800ea04:	bf44      	itt	mi
 800ea06:	f043 0320 	orrmi.w	r3, r3, #32
 800ea0a:	6023      	strmi	r3, [r4, #0]
 800ea0c:	b11d      	cbz	r5, 800ea16 <_printf_i+0x19e>
 800ea0e:	2310      	movs	r3, #16
 800ea10:	e7ac      	b.n	800e96c <_printf_i+0xf4>
 800ea12:	4827      	ldr	r0, [pc, #156]	@ (800eab0 <_printf_i+0x238>)
 800ea14:	e7e9      	b.n	800e9ea <_printf_i+0x172>
 800ea16:	6823      	ldr	r3, [r4, #0]
 800ea18:	f023 0320 	bic.w	r3, r3, #32
 800ea1c:	6023      	str	r3, [r4, #0]
 800ea1e:	e7f6      	b.n	800ea0e <_printf_i+0x196>
 800ea20:	4616      	mov	r6, r2
 800ea22:	e7bd      	b.n	800e9a0 <_printf_i+0x128>
 800ea24:	6833      	ldr	r3, [r6, #0]
 800ea26:	6825      	ldr	r5, [r4, #0]
 800ea28:	6961      	ldr	r1, [r4, #20]
 800ea2a:	1d18      	adds	r0, r3, #4
 800ea2c:	6030      	str	r0, [r6, #0]
 800ea2e:	062e      	lsls	r6, r5, #24
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	d501      	bpl.n	800ea38 <_printf_i+0x1c0>
 800ea34:	6019      	str	r1, [r3, #0]
 800ea36:	e002      	b.n	800ea3e <_printf_i+0x1c6>
 800ea38:	0668      	lsls	r0, r5, #25
 800ea3a:	d5fb      	bpl.n	800ea34 <_printf_i+0x1bc>
 800ea3c:	8019      	strh	r1, [r3, #0]
 800ea3e:	2300      	movs	r3, #0
 800ea40:	6123      	str	r3, [r4, #16]
 800ea42:	4616      	mov	r6, r2
 800ea44:	e7bc      	b.n	800e9c0 <_printf_i+0x148>
 800ea46:	6833      	ldr	r3, [r6, #0]
 800ea48:	1d1a      	adds	r2, r3, #4
 800ea4a:	6032      	str	r2, [r6, #0]
 800ea4c:	681e      	ldr	r6, [r3, #0]
 800ea4e:	6862      	ldr	r2, [r4, #4]
 800ea50:	2100      	movs	r1, #0
 800ea52:	4630      	mov	r0, r6
 800ea54:	f7f1 fbec 	bl	8000230 <memchr>
 800ea58:	b108      	cbz	r0, 800ea5e <_printf_i+0x1e6>
 800ea5a:	1b80      	subs	r0, r0, r6
 800ea5c:	6060      	str	r0, [r4, #4]
 800ea5e:	6863      	ldr	r3, [r4, #4]
 800ea60:	6123      	str	r3, [r4, #16]
 800ea62:	2300      	movs	r3, #0
 800ea64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea68:	e7aa      	b.n	800e9c0 <_printf_i+0x148>
 800ea6a:	6923      	ldr	r3, [r4, #16]
 800ea6c:	4632      	mov	r2, r6
 800ea6e:	4649      	mov	r1, r9
 800ea70:	4640      	mov	r0, r8
 800ea72:	47d0      	blx	sl
 800ea74:	3001      	adds	r0, #1
 800ea76:	d0ad      	beq.n	800e9d4 <_printf_i+0x15c>
 800ea78:	6823      	ldr	r3, [r4, #0]
 800ea7a:	079b      	lsls	r3, r3, #30
 800ea7c:	d413      	bmi.n	800eaa6 <_printf_i+0x22e>
 800ea7e:	68e0      	ldr	r0, [r4, #12]
 800ea80:	9b03      	ldr	r3, [sp, #12]
 800ea82:	4298      	cmp	r0, r3
 800ea84:	bfb8      	it	lt
 800ea86:	4618      	movlt	r0, r3
 800ea88:	e7a6      	b.n	800e9d8 <_printf_i+0x160>
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	4632      	mov	r2, r6
 800ea8e:	4649      	mov	r1, r9
 800ea90:	4640      	mov	r0, r8
 800ea92:	47d0      	blx	sl
 800ea94:	3001      	adds	r0, #1
 800ea96:	d09d      	beq.n	800e9d4 <_printf_i+0x15c>
 800ea98:	3501      	adds	r5, #1
 800ea9a:	68e3      	ldr	r3, [r4, #12]
 800ea9c:	9903      	ldr	r1, [sp, #12]
 800ea9e:	1a5b      	subs	r3, r3, r1
 800eaa0:	42ab      	cmp	r3, r5
 800eaa2:	dcf2      	bgt.n	800ea8a <_printf_i+0x212>
 800eaa4:	e7eb      	b.n	800ea7e <_printf_i+0x206>
 800eaa6:	2500      	movs	r5, #0
 800eaa8:	f104 0619 	add.w	r6, r4, #25
 800eaac:	e7f5      	b.n	800ea9a <_printf_i+0x222>
 800eaae:	bf00      	nop
 800eab0:	0800f9fa 	.word	0x0800f9fa
 800eab4:	0800fa0b 	.word	0x0800fa0b

0800eab8 <__sflush_r>:
 800eab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eac0:	0716      	lsls	r6, r2, #28
 800eac2:	4605      	mov	r5, r0
 800eac4:	460c      	mov	r4, r1
 800eac6:	d454      	bmi.n	800eb72 <__sflush_r+0xba>
 800eac8:	684b      	ldr	r3, [r1, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	dc02      	bgt.n	800ead4 <__sflush_r+0x1c>
 800eace:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	dd48      	ble.n	800eb66 <__sflush_r+0xae>
 800ead4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ead6:	2e00      	cmp	r6, #0
 800ead8:	d045      	beq.n	800eb66 <__sflush_r+0xae>
 800eada:	2300      	movs	r3, #0
 800eadc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eae0:	682f      	ldr	r7, [r5, #0]
 800eae2:	6a21      	ldr	r1, [r4, #32]
 800eae4:	602b      	str	r3, [r5, #0]
 800eae6:	d030      	beq.n	800eb4a <__sflush_r+0x92>
 800eae8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eaea:	89a3      	ldrh	r3, [r4, #12]
 800eaec:	0759      	lsls	r1, r3, #29
 800eaee:	d505      	bpl.n	800eafc <__sflush_r+0x44>
 800eaf0:	6863      	ldr	r3, [r4, #4]
 800eaf2:	1ad2      	subs	r2, r2, r3
 800eaf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eaf6:	b10b      	cbz	r3, 800eafc <__sflush_r+0x44>
 800eaf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eafa:	1ad2      	subs	r2, r2, r3
 800eafc:	2300      	movs	r3, #0
 800eafe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb00:	6a21      	ldr	r1, [r4, #32]
 800eb02:	4628      	mov	r0, r5
 800eb04:	47b0      	blx	r6
 800eb06:	1c43      	adds	r3, r0, #1
 800eb08:	89a3      	ldrh	r3, [r4, #12]
 800eb0a:	d106      	bne.n	800eb1a <__sflush_r+0x62>
 800eb0c:	6829      	ldr	r1, [r5, #0]
 800eb0e:	291d      	cmp	r1, #29
 800eb10:	d82b      	bhi.n	800eb6a <__sflush_r+0xb2>
 800eb12:	4a2a      	ldr	r2, [pc, #168]	@ (800ebbc <__sflush_r+0x104>)
 800eb14:	410a      	asrs	r2, r1
 800eb16:	07d6      	lsls	r6, r2, #31
 800eb18:	d427      	bmi.n	800eb6a <__sflush_r+0xb2>
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	6062      	str	r2, [r4, #4]
 800eb1e:	04d9      	lsls	r1, r3, #19
 800eb20:	6922      	ldr	r2, [r4, #16]
 800eb22:	6022      	str	r2, [r4, #0]
 800eb24:	d504      	bpl.n	800eb30 <__sflush_r+0x78>
 800eb26:	1c42      	adds	r2, r0, #1
 800eb28:	d101      	bne.n	800eb2e <__sflush_r+0x76>
 800eb2a:	682b      	ldr	r3, [r5, #0]
 800eb2c:	b903      	cbnz	r3, 800eb30 <__sflush_r+0x78>
 800eb2e:	6560      	str	r0, [r4, #84]	@ 0x54
 800eb30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb32:	602f      	str	r7, [r5, #0]
 800eb34:	b1b9      	cbz	r1, 800eb66 <__sflush_r+0xae>
 800eb36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb3a:	4299      	cmp	r1, r3
 800eb3c:	d002      	beq.n	800eb44 <__sflush_r+0x8c>
 800eb3e:	4628      	mov	r0, r5
 800eb40:	f7fe fbd2 	bl	800d2e8 <_free_r>
 800eb44:	2300      	movs	r3, #0
 800eb46:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb48:	e00d      	b.n	800eb66 <__sflush_r+0xae>
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	47b0      	blx	r6
 800eb50:	4602      	mov	r2, r0
 800eb52:	1c50      	adds	r0, r2, #1
 800eb54:	d1c9      	bne.n	800eaea <__sflush_r+0x32>
 800eb56:	682b      	ldr	r3, [r5, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d0c6      	beq.n	800eaea <__sflush_r+0x32>
 800eb5c:	2b1d      	cmp	r3, #29
 800eb5e:	d001      	beq.n	800eb64 <__sflush_r+0xac>
 800eb60:	2b16      	cmp	r3, #22
 800eb62:	d11e      	bne.n	800eba2 <__sflush_r+0xea>
 800eb64:	602f      	str	r7, [r5, #0]
 800eb66:	2000      	movs	r0, #0
 800eb68:	e022      	b.n	800ebb0 <__sflush_r+0xf8>
 800eb6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb6e:	b21b      	sxth	r3, r3
 800eb70:	e01b      	b.n	800ebaa <__sflush_r+0xf2>
 800eb72:	690f      	ldr	r7, [r1, #16]
 800eb74:	2f00      	cmp	r7, #0
 800eb76:	d0f6      	beq.n	800eb66 <__sflush_r+0xae>
 800eb78:	0793      	lsls	r3, r2, #30
 800eb7a:	680e      	ldr	r6, [r1, #0]
 800eb7c:	bf08      	it	eq
 800eb7e:	694b      	ldreq	r3, [r1, #20]
 800eb80:	600f      	str	r7, [r1, #0]
 800eb82:	bf18      	it	ne
 800eb84:	2300      	movne	r3, #0
 800eb86:	eba6 0807 	sub.w	r8, r6, r7
 800eb8a:	608b      	str	r3, [r1, #8]
 800eb8c:	f1b8 0f00 	cmp.w	r8, #0
 800eb90:	dde9      	ble.n	800eb66 <__sflush_r+0xae>
 800eb92:	6a21      	ldr	r1, [r4, #32]
 800eb94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eb96:	4643      	mov	r3, r8
 800eb98:	463a      	mov	r2, r7
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	47b0      	blx	r6
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	dc08      	bgt.n	800ebb4 <__sflush_r+0xfc>
 800eba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebaa:	81a3      	strh	r3, [r4, #12]
 800ebac:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb4:	4407      	add	r7, r0
 800ebb6:	eba8 0800 	sub.w	r8, r8, r0
 800ebba:	e7e7      	b.n	800eb8c <__sflush_r+0xd4>
 800ebbc:	dfbffffe 	.word	0xdfbffffe

0800ebc0 <_fflush_r>:
 800ebc0:	b538      	push	{r3, r4, r5, lr}
 800ebc2:	690b      	ldr	r3, [r1, #16]
 800ebc4:	4605      	mov	r5, r0
 800ebc6:	460c      	mov	r4, r1
 800ebc8:	b913      	cbnz	r3, 800ebd0 <_fflush_r+0x10>
 800ebca:	2500      	movs	r5, #0
 800ebcc:	4628      	mov	r0, r5
 800ebce:	bd38      	pop	{r3, r4, r5, pc}
 800ebd0:	b118      	cbz	r0, 800ebda <_fflush_r+0x1a>
 800ebd2:	6a03      	ldr	r3, [r0, #32]
 800ebd4:	b90b      	cbnz	r3, 800ebda <_fflush_r+0x1a>
 800ebd6:	f7fe fa47 	bl	800d068 <__sinit>
 800ebda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d0f3      	beq.n	800ebca <_fflush_r+0xa>
 800ebe2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ebe4:	07d0      	lsls	r0, r2, #31
 800ebe6:	d404      	bmi.n	800ebf2 <_fflush_r+0x32>
 800ebe8:	0599      	lsls	r1, r3, #22
 800ebea:	d402      	bmi.n	800ebf2 <_fflush_r+0x32>
 800ebec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ebee:	f7fe fb60 	bl	800d2b2 <__retarget_lock_acquire_recursive>
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	4621      	mov	r1, r4
 800ebf6:	f7ff ff5f 	bl	800eab8 <__sflush_r>
 800ebfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ebfc:	07da      	lsls	r2, r3, #31
 800ebfe:	4605      	mov	r5, r0
 800ec00:	d4e4      	bmi.n	800ebcc <_fflush_r+0xc>
 800ec02:	89a3      	ldrh	r3, [r4, #12]
 800ec04:	059b      	lsls	r3, r3, #22
 800ec06:	d4e1      	bmi.n	800ebcc <_fflush_r+0xc>
 800ec08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec0a:	f7fe fb53 	bl	800d2b4 <__retarget_lock_release_recursive>
 800ec0e:	e7dd      	b.n	800ebcc <_fflush_r+0xc>

0800ec10 <memmove>:
 800ec10:	4288      	cmp	r0, r1
 800ec12:	b510      	push	{r4, lr}
 800ec14:	eb01 0402 	add.w	r4, r1, r2
 800ec18:	d902      	bls.n	800ec20 <memmove+0x10>
 800ec1a:	4284      	cmp	r4, r0
 800ec1c:	4623      	mov	r3, r4
 800ec1e:	d807      	bhi.n	800ec30 <memmove+0x20>
 800ec20:	1e43      	subs	r3, r0, #1
 800ec22:	42a1      	cmp	r1, r4
 800ec24:	d008      	beq.n	800ec38 <memmove+0x28>
 800ec26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec2e:	e7f8      	b.n	800ec22 <memmove+0x12>
 800ec30:	4402      	add	r2, r0
 800ec32:	4601      	mov	r1, r0
 800ec34:	428a      	cmp	r2, r1
 800ec36:	d100      	bne.n	800ec3a <memmove+0x2a>
 800ec38:	bd10      	pop	{r4, pc}
 800ec3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec42:	e7f7      	b.n	800ec34 <memmove+0x24>

0800ec44 <_sbrk_r>:
 800ec44:	b538      	push	{r3, r4, r5, lr}
 800ec46:	4d06      	ldr	r5, [pc, #24]	@ (800ec60 <_sbrk_r+0x1c>)
 800ec48:	2300      	movs	r3, #0
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	4608      	mov	r0, r1
 800ec4e:	602b      	str	r3, [r5, #0]
 800ec50:	f7f4 facc 	bl	80031ec <_sbrk>
 800ec54:	1c43      	adds	r3, r0, #1
 800ec56:	d102      	bne.n	800ec5e <_sbrk_r+0x1a>
 800ec58:	682b      	ldr	r3, [r5, #0]
 800ec5a:	b103      	cbz	r3, 800ec5e <_sbrk_r+0x1a>
 800ec5c:	6023      	str	r3, [r4, #0]
 800ec5e:	bd38      	pop	{r3, r4, r5, pc}
 800ec60:	20000db0 	.word	0x20000db0

0800ec64 <__assert_func>:
 800ec64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec66:	4614      	mov	r4, r2
 800ec68:	461a      	mov	r2, r3
 800ec6a:	4b09      	ldr	r3, [pc, #36]	@ (800ec90 <__assert_func+0x2c>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4605      	mov	r5, r0
 800ec70:	68d8      	ldr	r0, [r3, #12]
 800ec72:	b954      	cbnz	r4, 800ec8a <__assert_func+0x26>
 800ec74:	4b07      	ldr	r3, [pc, #28]	@ (800ec94 <__assert_func+0x30>)
 800ec76:	461c      	mov	r4, r3
 800ec78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec7c:	9100      	str	r1, [sp, #0]
 800ec7e:	462b      	mov	r3, r5
 800ec80:	4905      	ldr	r1, [pc, #20]	@ (800ec98 <__assert_func+0x34>)
 800ec82:	f000 f857 	bl	800ed34 <fiprintf>
 800ec86:	f000 f867 	bl	800ed58 <abort>
 800ec8a:	4b04      	ldr	r3, [pc, #16]	@ (800ec9c <__assert_func+0x38>)
 800ec8c:	e7f4      	b.n	800ec78 <__assert_func+0x14>
 800ec8e:	bf00      	nop
 800ec90:	200001c0 	.word	0x200001c0
 800ec94:	0800fa57 	.word	0x0800fa57
 800ec98:	0800fa29 	.word	0x0800fa29
 800ec9c:	0800fa1c 	.word	0x0800fa1c

0800eca0 <_calloc_r>:
 800eca0:	b570      	push	{r4, r5, r6, lr}
 800eca2:	fba1 5402 	umull	r5, r4, r1, r2
 800eca6:	b93c      	cbnz	r4, 800ecb8 <_calloc_r+0x18>
 800eca8:	4629      	mov	r1, r5
 800ecaa:	f7fe fec3 	bl	800da34 <_malloc_r>
 800ecae:	4606      	mov	r6, r0
 800ecb0:	b928      	cbnz	r0, 800ecbe <_calloc_r+0x1e>
 800ecb2:	2600      	movs	r6, #0
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	bd70      	pop	{r4, r5, r6, pc}
 800ecb8:	220c      	movs	r2, #12
 800ecba:	6002      	str	r2, [r0, #0]
 800ecbc:	e7f9      	b.n	800ecb2 <_calloc_r+0x12>
 800ecbe:	462a      	mov	r2, r5
 800ecc0:	4621      	mov	r1, r4
 800ecc2:	f7fe fa6a 	bl	800d19a <memset>
 800ecc6:	e7f5      	b.n	800ecb4 <_calloc_r+0x14>

0800ecc8 <malloc>:
 800ecc8:	4b02      	ldr	r3, [pc, #8]	@ (800ecd4 <malloc+0xc>)
 800ecca:	4601      	mov	r1, r0
 800eccc:	6818      	ldr	r0, [r3, #0]
 800ecce:	f7fe beb1 	b.w	800da34 <_malloc_r>
 800ecd2:	bf00      	nop
 800ecd4:	200001c0 	.word	0x200001c0

0800ecd8 <_realloc_r>:
 800ecd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecdc:	4680      	mov	r8, r0
 800ecde:	4615      	mov	r5, r2
 800ece0:	460c      	mov	r4, r1
 800ece2:	b921      	cbnz	r1, 800ecee <_realloc_r+0x16>
 800ece4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ece8:	4611      	mov	r1, r2
 800ecea:	f7fe bea3 	b.w	800da34 <_malloc_r>
 800ecee:	b92a      	cbnz	r2, 800ecfc <_realloc_r+0x24>
 800ecf0:	f7fe fafa 	bl	800d2e8 <_free_r>
 800ecf4:	2400      	movs	r4, #0
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecfc:	f000 f833 	bl	800ed66 <_malloc_usable_size_r>
 800ed00:	4285      	cmp	r5, r0
 800ed02:	4606      	mov	r6, r0
 800ed04:	d802      	bhi.n	800ed0c <_realloc_r+0x34>
 800ed06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ed0a:	d8f4      	bhi.n	800ecf6 <_realloc_r+0x1e>
 800ed0c:	4629      	mov	r1, r5
 800ed0e:	4640      	mov	r0, r8
 800ed10:	f7fe fe90 	bl	800da34 <_malloc_r>
 800ed14:	4607      	mov	r7, r0
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d0ec      	beq.n	800ecf4 <_realloc_r+0x1c>
 800ed1a:	42b5      	cmp	r5, r6
 800ed1c:	462a      	mov	r2, r5
 800ed1e:	4621      	mov	r1, r4
 800ed20:	bf28      	it	cs
 800ed22:	4632      	movcs	r2, r6
 800ed24:	f7fe fac7 	bl	800d2b6 <memcpy>
 800ed28:	4621      	mov	r1, r4
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	f7fe fadc 	bl	800d2e8 <_free_r>
 800ed30:	463c      	mov	r4, r7
 800ed32:	e7e0      	b.n	800ecf6 <_realloc_r+0x1e>

0800ed34 <fiprintf>:
 800ed34:	b40e      	push	{r1, r2, r3}
 800ed36:	b503      	push	{r0, r1, lr}
 800ed38:	4601      	mov	r1, r0
 800ed3a:	ab03      	add	r3, sp, #12
 800ed3c:	4805      	ldr	r0, [pc, #20]	@ (800ed54 <fiprintf+0x20>)
 800ed3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed42:	6800      	ldr	r0, [r0, #0]
 800ed44:	9301      	str	r3, [sp, #4]
 800ed46:	f000 f83f 	bl	800edc8 <_vfiprintf_r>
 800ed4a:	b002      	add	sp, #8
 800ed4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed50:	b003      	add	sp, #12
 800ed52:	4770      	bx	lr
 800ed54:	200001c0 	.word	0x200001c0

0800ed58 <abort>:
 800ed58:	b508      	push	{r3, lr}
 800ed5a:	2006      	movs	r0, #6
 800ed5c:	f000 fa08 	bl	800f170 <raise>
 800ed60:	2001      	movs	r0, #1
 800ed62:	f7f4 f9cb 	bl	80030fc <_exit>

0800ed66 <_malloc_usable_size_r>:
 800ed66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed6a:	1f18      	subs	r0, r3, #4
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	bfbc      	itt	lt
 800ed70:	580b      	ldrlt	r3, [r1, r0]
 800ed72:	18c0      	addlt	r0, r0, r3
 800ed74:	4770      	bx	lr

0800ed76 <__sfputc_r>:
 800ed76:	6893      	ldr	r3, [r2, #8]
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	b410      	push	{r4}
 800ed7e:	6093      	str	r3, [r2, #8]
 800ed80:	da08      	bge.n	800ed94 <__sfputc_r+0x1e>
 800ed82:	6994      	ldr	r4, [r2, #24]
 800ed84:	42a3      	cmp	r3, r4
 800ed86:	db01      	blt.n	800ed8c <__sfputc_r+0x16>
 800ed88:	290a      	cmp	r1, #10
 800ed8a:	d103      	bne.n	800ed94 <__sfputc_r+0x1e>
 800ed8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed90:	f000 b932 	b.w	800eff8 <__swbuf_r>
 800ed94:	6813      	ldr	r3, [r2, #0]
 800ed96:	1c58      	adds	r0, r3, #1
 800ed98:	6010      	str	r0, [r2, #0]
 800ed9a:	7019      	strb	r1, [r3, #0]
 800ed9c:	4608      	mov	r0, r1
 800ed9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <__sfputs_r>:
 800eda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda6:	4606      	mov	r6, r0
 800eda8:	460f      	mov	r7, r1
 800edaa:	4614      	mov	r4, r2
 800edac:	18d5      	adds	r5, r2, r3
 800edae:	42ac      	cmp	r4, r5
 800edb0:	d101      	bne.n	800edb6 <__sfputs_r+0x12>
 800edb2:	2000      	movs	r0, #0
 800edb4:	e007      	b.n	800edc6 <__sfputs_r+0x22>
 800edb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edba:	463a      	mov	r2, r7
 800edbc:	4630      	mov	r0, r6
 800edbe:	f7ff ffda 	bl	800ed76 <__sfputc_r>
 800edc2:	1c43      	adds	r3, r0, #1
 800edc4:	d1f3      	bne.n	800edae <__sfputs_r+0xa>
 800edc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800edc8 <_vfiprintf_r>:
 800edc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edcc:	460d      	mov	r5, r1
 800edce:	b09d      	sub	sp, #116	@ 0x74
 800edd0:	4614      	mov	r4, r2
 800edd2:	4698      	mov	r8, r3
 800edd4:	4606      	mov	r6, r0
 800edd6:	b118      	cbz	r0, 800ede0 <_vfiprintf_r+0x18>
 800edd8:	6a03      	ldr	r3, [r0, #32]
 800edda:	b90b      	cbnz	r3, 800ede0 <_vfiprintf_r+0x18>
 800eddc:	f7fe f944 	bl	800d068 <__sinit>
 800ede0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ede2:	07d9      	lsls	r1, r3, #31
 800ede4:	d405      	bmi.n	800edf2 <_vfiprintf_r+0x2a>
 800ede6:	89ab      	ldrh	r3, [r5, #12]
 800ede8:	059a      	lsls	r2, r3, #22
 800edea:	d402      	bmi.n	800edf2 <_vfiprintf_r+0x2a>
 800edec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edee:	f7fe fa60 	bl	800d2b2 <__retarget_lock_acquire_recursive>
 800edf2:	89ab      	ldrh	r3, [r5, #12]
 800edf4:	071b      	lsls	r3, r3, #28
 800edf6:	d501      	bpl.n	800edfc <_vfiprintf_r+0x34>
 800edf8:	692b      	ldr	r3, [r5, #16]
 800edfa:	b99b      	cbnz	r3, 800ee24 <_vfiprintf_r+0x5c>
 800edfc:	4629      	mov	r1, r5
 800edfe:	4630      	mov	r0, r6
 800ee00:	f000 f938 	bl	800f074 <__swsetup_r>
 800ee04:	b170      	cbz	r0, 800ee24 <_vfiprintf_r+0x5c>
 800ee06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee08:	07dc      	lsls	r4, r3, #31
 800ee0a:	d504      	bpl.n	800ee16 <_vfiprintf_r+0x4e>
 800ee0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee10:	b01d      	add	sp, #116	@ 0x74
 800ee12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee16:	89ab      	ldrh	r3, [r5, #12]
 800ee18:	0598      	lsls	r0, r3, #22
 800ee1a:	d4f7      	bmi.n	800ee0c <_vfiprintf_r+0x44>
 800ee1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee1e:	f7fe fa49 	bl	800d2b4 <__retarget_lock_release_recursive>
 800ee22:	e7f3      	b.n	800ee0c <_vfiprintf_r+0x44>
 800ee24:	2300      	movs	r3, #0
 800ee26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee28:	2320      	movs	r3, #32
 800ee2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee32:	2330      	movs	r3, #48	@ 0x30
 800ee34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800efe4 <_vfiprintf_r+0x21c>
 800ee38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee3c:	f04f 0901 	mov.w	r9, #1
 800ee40:	4623      	mov	r3, r4
 800ee42:	469a      	mov	sl, r3
 800ee44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee48:	b10a      	cbz	r2, 800ee4e <_vfiprintf_r+0x86>
 800ee4a:	2a25      	cmp	r2, #37	@ 0x25
 800ee4c:	d1f9      	bne.n	800ee42 <_vfiprintf_r+0x7a>
 800ee4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ee52:	d00b      	beq.n	800ee6c <_vfiprintf_r+0xa4>
 800ee54:	465b      	mov	r3, fp
 800ee56:	4622      	mov	r2, r4
 800ee58:	4629      	mov	r1, r5
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f7ff ffa2 	bl	800eda4 <__sfputs_r>
 800ee60:	3001      	adds	r0, #1
 800ee62:	f000 80a7 	beq.w	800efb4 <_vfiprintf_r+0x1ec>
 800ee66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee68:	445a      	add	r2, fp
 800ee6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	f000 809f 	beq.w	800efb4 <_vfiprintf_r+0x1ec>
 800ee76:	2300      	movs	r3, #0
 800ee78:	f04f 32ff 	mov.w	r2, #4294967295
 800ee7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee80:	f10a 0a01 	add.w	sl, sl, #1
 800ee84:	9304      	str	r3, [sp, #16]
 800ee86:	9307      	str	r3, [sp, #28]
 800ee88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee8e:	4654      	mov	r4, sl
 800ee90:	2205      	movs	r2, #5
 800ee92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee96:	4853      	ldr	r0, [pc, #332]	@ (800efe4 <_vfiprintf_r+0x21c>)
 800ee98:	f7f1 f9ca 	bl	8000230 <memchr>
 800ee9c:	9a04      	ldr	r2, [sp, #16]
 800ee9e:	b9d8      	cbnz	r0, 800eed8 <_vfiprintf_r+0x110>
 800eea0:	06d1      	lsls	r1, r2, #27
 800eea2:	bf44      	itt	mi
 800eea4:	2320      	movmi	r3, #32
 800eea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeaa:	0713      	lsls	r3, r2, #28
 800eeac:	bf44      	itt	mi
 800eeae:	232b      	movmi	r3, #43	@ 0x2b
 800eeb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeb4:	f89a 3000 	ldrb.w	r3, [sl]
 800eeb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800eeba:	d015      	beq.n	800eee8 <_vfiprintf_r+0x120>
 800eebc:	9a07      	ldr	r2, [sp, #28]
 800eebe:	4654      	mov	r4, sl
 800eec0:	2000      	movs	r0, #0
 800eec2:	f04f 0c0a 	mov.w	ip, #10
 800eec6:	4621      	mov	r1, r4
 800eec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eecc:	3b30      	subs	r3, #48	@ 0x30
 800eece:	2b09      	cmp	r3, #9
 800eed0:	d94b      	bls.n	800ef6a <_vfiprintf_r+0x1a2>
 800eed2:	b1b0      	cbz	r0, 800ef02 <_vfiprintf_r+0x13a>
 800eed4:	9207      	str	r2, [sp, #28]
 800eed6:	e014      	b.n	800ef02 <_vfiprintf_r+0x13a>
 800eed8:	eba0 0308 	sub.w	r3, r0, r8
 800eedc:	fa09 f303 	lsl.w	r3, r9, r3
 800eee0:	4313      	orrs	r3, r2
 800eee2:	9304      	str	r3, [sp, #16]
 800eee4:	46a2      	mov	sl, r4
 800eee6:	e7d2      	b.n	800ee8e <_vfiprintf_r+0xc6>
 800eee8:	9b03      	ldr	r3, [sp, #12]
 800eeea:	1d19      	adds	r1, r3, #4
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	9103      	str	r1, [sp, #12]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	bfbb      	ittet	lt
 800eef4:	425b      	neglt	r3, r3
 800eef6:	f042 0202 	orrlt.w	r2, r2, #2
 800eefa:	9307      	strge	r3, [sp, #28]
 800eefc:	9307      	strlt	r3, [sp, #28]
 800eefe:	bfb8      	it	lt
 800ef00:	9204      	strlt	r2, [sp, #16]
 800ef02:	7823      	ldrb	r3, [r4, #0]
 800ef04:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef06:	d10a      	bne.n	800ef1e <_vfiprintf_r+0x156>
 800ef08:	7863      	ldrb	r3, [r4, #1]
 800ef0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef0c:	d132      	bne.n	800ef74 <_vfiprintf_r+0x1ac>
 800ef0e:	9b03      	ldr	r3, [sp, #12]
 800ef10:	1d1a      	adds	r2, r3, #4
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	9203      	str	r2, [sp, #12]
 800ef16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef1a:	3402      	adds	r4, #2
 800ef1c:	9305      	str	r3, [sp, #20]
 800ef1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eff4 <_vfiprintf_r+0x22c>
 800ef22:	7821      	ldrb	r1, [r4, #0]
 800ef24:	2203      	movs	r2, #3
 800ef26:	4650      	mov	r0, sl
 800ef28:	f7f1 f982 	bl	8000230 <memchr>
 800ef2c:	b138      	cbz	r0, 800ef3e <_vfiprintf_r+0x176>
 800ef2e:	9b04      	ldr	r3, [sp, #16]
 800ef30:	eba0 000a 	sub.w	r0, r0, sl
 800ef34:	2240      	movs	r2, #64	@ 0x40
 800ef36:	4082      	lsls	r2, r0
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	3401      	adds	r4, #1
 800ef3c:	9304      	str	r3, [sp, #16]
 800ef3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef42:	4829      	ldr	r0, [pc, #164]	@ (800efe8 <_vfiprintf_r+0x220>)
 800ef44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef48:	2206      	movs	r2, #6
 800ef4a:	f7f1 f971 	bl	8000230 <memchr>
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d03f      	beq.n	800efd2 <_vfiprintf_r+0x20a>
 800ef52:	4b26      	ldr	r3, [pc, #152]	@ (800efec <_vfiprintf_r+0x224>)
 800ef54:	bb1b      	cbnz	r3, 800ef9e <_vfiprintf_r+0x1d6>
 800ef56:	9b03      	ldr	r3, [sp, #12]
 800ef58:	3307      	adds	r3, #7
 800ef5a:	f023 0307 	bic.w	r3, r3, #7
 800ef5e:	3308      	adds	r3, #8
 800ef60:	9303      	str	r3, [sp, #12]
 800ef62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef64:	443b      	add	r3, r7
 800ef66:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef68:	e76a      	b.n	800ee40 <_vfiprintf_r+0x78>
 800ef6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef6e:	460c      	mov	r4, r1
 800ef70:	2001      	movs	r0, #1
 800ef72:	e7a8      	b.n	800eec6 <_vfiprintf_r+0xfe>
 800ef74:	2300      	movs	r3, #0
 800ef76:	3401      	adds	r4, #1
 800ef78:	9305      	str	r3, [sp, #20]
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	f04f 0c0a 	mov.w	ip, #10
 800ef80:	4620      	mov	r0, r4
 800ef82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef86:	3a30      	subs	r2, #48	@ 0x30
 800ef88:	2a09      	cmp	r2, #9
 800ef8a:	d903      	bls.n	800ef94 <_vfiprintf_r+0x1cc>
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d0c6      	beq.n	800ef1e <_vfiprintf_r+0x156>
 800ef90:	9105      	str	r1, [sp, #20]
 800ef92:	e7c4      	b.n	800ef1e <_vfiprintf_r+0x156>
 800ef94:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef98:	4604      	mov	r4, r0
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e7f0      	b.n	800ef80 <_vfiprintf_r+0x1b8>
 800ef9e:	ab03      	add	r3, sp, #12
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	462a      	mov	r2, r5
 800efa4:	4b12      	ldr	r3, [pc, #72]	@ (800eff0 <_vfiprintf_r+0x228>)
 800efa6:	a904      	add	r1, sp, #16
 800efa8:	4630      	mov	r0, r6
 800efaa:	f3af 8000 	nop.w
 800efae:	4607      	mov	r7, r0
 800efb0:	1c78      	adds	r0, r7, #1
 800efb2:	d1d6      	bne.n	800ef62 <_vfiprintf_r+0x19a>
 800efb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efb6:	07d9      	lsls	r1, r3, #31
 800efb8:	d405      	bmi.n	800efc6 <_vfiprintf_r+0x1fe>
 800efba:	89ab      	ldrh	r3, [r5, #12]
 800efbc:	059a      	lsls	r2, r3, #22
 800efbe:	d402      	bmi.n	800efc6 <_vfiprintf_r+0x1fe>
 800efc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efc2:	f7fe f977 	bl	800d2b4 <__retarget_lock_release_recursive>
 800efc6:	89ab      	ldrh	r3, [r5, #12]
 800efc8:	065b      	lsls	r3, r3, #25
 800efca:	f53f af1f 	bmi.w	800ee0c <_vfiprintf_r+0x44>
 800efce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efd0:	e71e      	b.n	800ee10 <_vfiprintf_r+0x48>
 800efd2:	ab03      	add	r3, sp, #12
 800efd4:	9300      	str	r3, [sp, #0]
 800efd6:	462a      	mov	r2, r5
 800efd8:	4b05      	ldr	r3, [pc, #20]	@ (800eff0 <_vfiprintf_r+0x228>)
 800efda:	a904      	add	r1, sp, #16
 800efdc:	4630      	mov	r0, r6
 800efde:	f7ff fc4b 	bl	800e878 <_printf_i>
 800efe2:	e7e4      	b.n	800efae <_vfiprintf_r+0x1e6>
 800efe4:	0800f9e9 	.word	0x0800f9e9
 800efe8:	0800f9f3 	.word	0x0800f9f3
 800efec:	00000000 	.word	0x00000000
 800eff0:	0800eda5 	.word	0x0800eda5
 800eff4:	0800f9ef 	.word	0x0800f9ef

0800eff8 <__swbuf_r>:
 800eff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800effa:	460e      	mov	r6, r1
 800effc:	4614      	mov	r4, r2
 800effe:	4605      	mov	r5, r0
 800f000:	b118      	cbz	r0, 800f00a <__swbuf_r+0x12>
 800f002:	6a03      	ldr	r3, [r0, #32]
 800f004:	b90b      	cbnz	r3, 800f00a <__swbuf_r+0x12>
 800f006:	f7fe f82f 	bl	800d068 <__sinit>
 800f00a:	69a3      	ldr	r3, [r4, #24]
 800f00c:	60a3      	str	r3, [r4, #8]
 800f00e:	89a3      	ldrh	r3, [r4, #12]
 800f010:	071a      	lsls	r2, r3, #28
 800f012:	d501      	bpl.n	800f018 <__swbuf_r+0x20>
 800f014:	6923      	ldr	r3, [r4, #16]
 800f016:	b943      	cbnz	r3, 800f02a <__swbuf_r+0x32>
 800f018:	4621      	mov	r1, r4
 800f01a:	4628      	mov	r0, r5
 800f01c:	f000 f82a 	bl	800f074 <__swsetup_r>
 800f020:	b118      	cbz	r0, 800f02a <__swbuf_r+0x32>
 800f022:	f04f 37ff 	mov.w	r7, #4294967295
 800f026:	4638      	mov	r0, r7
 800f028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	6922      	ldr	r2, [r4, #16]
 800f02e:	1a98      	subs	r0, r3, r2
 800f030:	6963      	ldr	r3, [r4, #20]
 800f032:	b2f6      	uxtb	r6, r6
 800f034:	4283      	cmp	r3, r0
 800f036:	4637      	mov	r7, r6
 800f038:	dc05      	bgt.n	800f046 <__swbuf_r+0x4e>
 800f03a:	4621      	mov	r1, r4
 800f03c:	4628      	mov	r0, r5
 800f03e:	f7ff fdbf 	bl	800ebc0 <_fflush_r>
 800f042:	2800      	cmp	r0, #0
 800f044:	d1ed      	bne.n	800f022 <__swbuf_r+0x2a>
 800f046:	68a3      	ldr	r3, [r4, #8]
 800f048:	3b01      	subs	r3, #1
 800f04a:	60a3      	str	r3, [r4, #8]
 800f04c:	6823      	ldr	r3, [r4, #0]
 800f04e:	1c5a      	adds	r2, r3, #1
 800f050:	6022      	str	r2, [r4, #0]
 800f052:	701e      	strb	r6, [r3, #0]
 800f054:	6962      	ldr	r2, [r4, #20]
 800f056:	1c43      	adds	r3, r0, #1
 800f058:	429a      	cmp	r2, r3
 800f05a:	d004      	beq.n	800f066 <__swbuf_r+0x6e>
 800f05c:	89a3      	ldrh	r3, [r4, #12]
 800f05e:	07db      	lsls	r3, r3, #31
 800f060:	d5e1      	bpl.n	800f026 <__swbuf_r+0x2e>
 800f062:	2e0a      	cmp	r6, #10
 800f064:	d1df      	bne.n	800f026 <__swbuf_r+0x2e>
 800f066:	4621      	mov	r1, r4
 800f068:	4628      	mov	r0, r5
 800f06a:	f7ff fda9 	bl	800ebc0 <_fflush_r>
 800f06e:	2800      	cmp	r0, #0
 800f070:	d0d9      	beq.n	800f026 <__swbuf_r+0x2e>
 800f072:	e7d6      	b.n	800f022 <__swbuf_r+0x2a>

0800f074 <__swsetup_r>:
 800f074:	b538      	push	{r3, r4, r5, lr}
 800f076:	4b29      	ldr	r3, [pc, #164]	@ (800f11c <__swsetup_r+0xa8>)
 800f078:	4605      	mov	r5, r0
 800f07a:	6818      	ldr	r0, [r3, #0]
 800f07c:	460c      	mov	r4, r1
 800f07e:	b118      	cbz	r0, 800f088 <__swsetup_r+0x14>
 800f080:	6a03      	ldr	r3, [r0, #32]
 800f082:	b90b      	cbnz	r3, 800f088 <__swsetup_r+0x14>
 800f084:	f7fd fff0 	bl	800d068 <__sinit>
 800f088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f08c:	0719      	lsls	r1, r3, #28
 800f08e:	d422      	bmi.n	800f0d6 <__swsetup_r+0x62>
 800f090:	06da      	lsls	r2, r3, #27
 800f092:	d407      	bmi.n	800f0a4 <__swsetup_r+0x30>
 800f094:	2209      	movs	r2, #9
 800f096:	602a      	str	r2, [r5, #0]
 800f098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f09c:	81a3      	strh	r3, [r4, #12]
 800f09e:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a2:	e033      	b.n	800f10c <__swsetup_r+0x98>
 800f0a4:	0758      	lsls	r0, r3, #29
 800f0a6:	d512      	bpl.n	800f0ce <__swsetup_r+0x5a>
 800f0a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f0aa:	b141      	cbz	r1, 800f0be <__swsetup_r+0x4a>
 800f0ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0b0:	4299      	cmp	r1, r3
 800f0b2:	d002      	beq.n	800f0ba <__swsetup_r+0x46>
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	f7fe f917 	bl	800d2e8 <_free_r>
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f0c4:	81a3      	strh	r3, [r4, #12]
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	6063      	str	r3, [r4, #4]
 800f0ca:	6923      	ldr	r3, [r4, #16]
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	89a3      	ldrh	r3, [r4, #12]
 800f0d0:	f043 0308 	orr.w	r3, r3, #8
 800f0d4:	81a3      	strh	r3, [r4, #12]
 800f0d6:	6923      	ldr	r3, [r4, #16]
 800f0d8:	b94b      	cbnz	r3, 800f0ee <__swsetup_r+0x7a>
 800f0da:	89a3      	ldrh	r3, [r4, #12]
 800f0dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f0e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f0e4:	d003      	beq.n	800f0ee <__swsetup_r+0x7a>
 800f0e6:	4621      	mov	r1, r4
 800f0e8:	4628      	mov	r0, r5
 800f0ea:	f000 f883 	bl	800f1f4 <__smakebuf_r>
 800f0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0f2:	f013 0201 	ands.w	r2, r3, #1
 800f0f6:	d00a      	beq.n	800f10e <__swsetup_r+0x9a>
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	60a2      	str	r2, [r4, #8]
 800f0fc:	6962      	ldr	r2, [r4, #20]
 800f0fe:	4252      	negs	r2, r2
 800f100:	61a2      	str	r2, [r4, #24]
 800f102:	6922      	ldr	r2, [r4, #16]
 800f104:	b942      	cbnz	r2, 800f118 <__swsetup_r+0xa4>
 800f106:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f10a:	d1c5      	bne.n	800f098 <__swsetup_r+0x24>
 800f10c:	bd38      	pop	{r3, r4, r5, pc}
 800f10e:	0799      	lsls	r1, r3, #30
 800f110:	bf58      	it	pl
 800f112:	6962      	ldrpl	r2, [r4, #20]
 800f114:	60a2      	str	r2, [r4, #8]
 800f116:	e7f4      	b.n	800f102 <__swsetup_r+0x8e>
 800f118:	2000      	movs	r0, #0
 800f11a:	e7f7      	b.n	800f10c <__swsetup_r+0x98>
 800f11c:	200001c0 	.word	0x200001c0

0800f120 <_raise_r>:
 800f120:	291f      	cmp	r1, #31
 800f122:	b538      	push	{r3, r4, r5, lr}
 800f124:	4605      	mov	r5, r0
 800f126:	460c      	mov	r4, r1
 800f128:	d904      	bls.n	800f134 <_raise_r+0x14>
 800f12a:	2316      	movs	r3, #22
 800f12c:	6003      	str	r3, [r0, #0]
 800f12e:	f04f 30ff 	mov.w	r0, #4294967295
 800f132:	bd38      	pop	{r3, r4, r5, pc}
 800f134:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f136:	b112      	cbz	r2, 800f13e <_raise_r+0x1e>
 800f138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f13c:	b94b      	cbnz	r3, 800f152 <_raise_r+0x32>
 800f13e:	4628      	mov	r0, r5
 800f140:	f000 f830 	bl	800f1a4 <_getpid_r>
 800f144:	4622      	mov	r2, r4
 800f146:	4601      	mov	r1, r0
 800f148:	4628      	mov	r0, r5
 800f14a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f14e:	f000 b817 	b.w	800f180 <_kill_r>
 800f152:	2b01      	cmp	r3, #1
 800f154:	d00a      	beq.n	800f16c <_raise_r+0x4c>
 800f156:	1c59      	adds	r1, r3, #1
 800f158:	d103      	bne.n	800f162 <_raise_r+0x42>
 800f15a:	2316      	movs	r3, #22
 800f15c:	6003      	str	r3, [r0, #0]
 800f15e:	2001      	movs	r0, #1
 800f160:	e7e7      	b.n	800f132 <_raise_r+0x12>
 800f162:	2100      	movs	r1, #0
 800f164:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f168:	4620      	mov	r0, r4
 800f16a:	4798      	blx	r3
 800f16c:	2000      	movs	r0, #0
 800f16e:	e7e0      	b.n	800f132 <_raise_r+0x12>

0800f170 <raise>:
 800f170:	4b02      	ldr	r3, [pc, #8]	@ (800f17c <raise+0xc>)
 800f172:	4601      	mov	r1, r0
 800f174:	6818      	ldr	r0, [r3, #0]
 800f176:	f7ff bfd3 	b.w	800f120 <_raise_r>
 800f17a:	bf00      	nop
 800f17c:	200001c0 	.word	0x200001c0

0800f180 <_kill_r>:
 800f180:	b538      	push	{r3, r4, r5, lr}
 800f182:	4d07      	ldr	r5, [pc, #28]	@ (800f1a0 <_kill_r+0x20>)
 800f184:	2300      	movs	r3, #0
 800f186:	4604      	mov	r4, r0
 800f188:	4608      	mov	r0, r1
 800f18a:	4611      	mov	r1, r2
 800f18c:	602b      	str	r3, [r5, #0]
 800f18e:	f7f3 ffa5 	bl	80030dc <_kill>
 800f192:	1c43      	adds	r3, r0, #1
 800f194:	d102      	bne.n	800f19c <_kill_r+0x1c>
 800f196:	682b      	ldr	r3, [r5, #0]
 800f198:	b103      	cbz	r3, 800f19c <_kill_r+0x1c>
 800f19a:	6023      	str	r3, [r4, #0]
 800f19c:	bd38      	pop	{r3, r4, r5, pc}
 800f19e:	bf00      	nop
 800f1a0:	20000db0 	.word	0x20000db0

0800f1a4 <_getpid_r>:
 800f1a4:	f7f3 bf92 	b.w	80030cc <_getpid>

0800f1a8 <__swhatbuf_r>:
 800f1a8:	b570      	push	{r4, r5, r6, lr}
 800f1aa:	460c      	mov	r4, r1
 800f1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b0:	2900      	cmp	r1, #0
 800f1b2:	b096      	sub	sp, #88	@ 0x58
 800f1b4:	4615      	mov	r5, r2
 800f1b6:	461e      	mov	r6, r3
 800f1b8:	da0d      	bge.n	800f1d6 <__swhatbuf_r+0x2e>
 800f1ba:	89a3      	ldrh	r3, [r4, #12]
 800f1bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f1c0:	f04f 0100 	mov.w	r1, #0
 800f1c4:	bf14      	ite	ne
 800f1c6:	2340      	movne	r3, #64	@ 0x40
 800f1c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	6031      	str	r1, [r6, #0]
 800f1d0:	602b      	str	r3, [r5, #0]
 800f1d2:	b016      	add	sp, #88	@ 0x58
 800f1d4:	bd70      	pop	{r4, r5, r6, pc}
 800f1d6:	466a      	mov	r2, sp
 800f1d8:	f000 f848 	bl	800f26c <_fstat_r>
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	dbec      	blt.n	800f1ba <__swhatbuf_r+0x12>
 800f1e0:	9901      	ldr	r1, [sp, #4]
 800f1e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f1e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f1ea:	4259      	negs	r1, r3
 800f1ec:	4159      	adcs	r1, r3
 800f1ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f1f2:	e7eb      	b.n	800f1cc <__swhatbuf_r+0x24>

0800f1f4 <__smakebuf_r>:
 800f1f4:	898b      	ldrh	r3, [r1, #12]
 800f1f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1f8:	079d      	lsls	r5, r3, #30
 800f1fa:	4606      	mov	r6, r0
 800f1fc:	460c      	mov	r4, r1
 800f1fe:	d507      	bpl.n	800f210 <__smakebuf_r+0x1c>
 800f200:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	6123      	str	r3, [r4, #16]
 800f208:	2301      	movs	r3, #1
 800f20a:	6163      	str	r3, [r4, #20]
 800f20c:	b003      	add	sp, #12
 800f20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f210:	ab01      	add	r3, sp, #4
 800f212:	466a      	mov	r2, sp
 800f214:	f7ff ffc8 	bl	800f1a8 <__swhatbuf_r>
 800f218:	9f00      	ldr	r7, [sp, #0]
 800f21a:	4605      	mov	r5, r0
 800f21c:	4639      	mov	r1, r7
 800f21e:	4630      	mov	r0, r6
 800f220:	f7fe fc08 	bl	800da34 <_malloc_r>
 800f224:	b948      	cbnz	r0, 800f23a <__smakebuf_r+0x46>
 800f226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f22a:	059a      	lsls	r2, r3, #22
 800f22c:	d4ee      	bmi.n	800f20c <__smakebuf_r+0x18>
 800f22e:	f023 0303 	bic.w	r3, r3, #3
 800f232:	f043 0302 	orr.w	r3, r3, #2
 800f236:	81a3      	strh	r3, [r4, #12]
 800f238:	e7e2      	b.n	800f200 <__smakebuf_r+0xc>
 800f23a:	89a3      	ldrh	r3, [r4, #12]
 800f23c:	6020      	str	r0, [r4, #0]
 800f23e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f242:	81a3      	strh	r3, [r4, #12]
 800f244:	9b01      	ldr	r3, [sp, #4]
 800f246:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f24a:	b15b      	cbz	r3, 800f264 <__smakebuf_r+0x70>
 800f24c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f250:	4630      	mov	r0, r6
 800f252:	f000 f81d 	bl	800f290 <_isatty_r>
 800f256:	b128      	cbz	r0, 800f264 <__smakebuf_r+0x70>
 800f258:	89a3      	ldrh	r3, [r4, #12]
 800f25a:	f023 0303 	bic.w	r3, r3, #3
 800f25e:	f043 0301 	orr.w	r3, r3, #1
 800f262:	81a3      	strh	r3, [r4, #12]
 800f264:	89a3      	ldrh	r3, [r4, #12]
 800f266:	431d      	orrs	r5, r3
 800f268:	81a5      	strh	r5, [r4, #12]
 800f26a:	e7cf      	b.n	800f20c <__smakebuf_r+0x18>

0800f26c <_fstat_r>:
 800f26c:	b538      	push	{r3, r4, r5, lr}
 800f26e:	4d07      	ldr	r5, [pc, #28]	@ (800f28c <_fstat_r+0x20>)
 800f270:	2300      	movs	r3, #0
 800f272:	4604      	mov	r4, r0
 800f274:	4608      	mov	r0, r1
 800f276:	4611      	mov	r1, r2
 800f278:	602b      	str	r3, [r5, #0]
 800f27a:	f7f3 ff8f 	bl	800319c <_fstat>
 800f27e:	1c43      	adds	r3, r0, #1
 800f280:	d102      	bne.n	800f288 <_fstat_r+0x1c>
 800f282:	682b      	ldr	r3, [r5, #0]
 800f284:	b103      	cbz	r3, 800f288 <_fstat_r+0x1c>
 800f286:	6023      	str	r3, [r4, #0]
 800f288:	bd38      	pop	{r3, r4, r5, pc}
 800f28a:	bf00      	nop
 800f28c:	20000db0 	.word	0x20000db0

0800f290 <_isatty_r>:
 800f290:	b538      	push	{r3, r4, r5, lr}
 800f292:	4d06      	ldr	r5, [pc, #24]	@ (800f2ac <_isatty_r+0x1c>)
 800f294:	2300      	movs	r3, #0
 800f296:	4604      	mov	r4, r0
 800f298:	4608      	mov	r0, r1
 800f29a:	602b      	str	r3, [r5, #0]
 800f29c:	f7f3 ff8e 	bl	80031bc <_isatty>
 800f2a0:	1c43      	adds	r3, r0, #1
 800f2a2:	d102      	bne.n	800f2aa <_isatty_r+0x1a>
 800f2a4:	682b      	ldr	r3, [r5, #0]
 800f2a6:	b103      	cbz	r3, 800f2aa <_isatty_r+0x1a>
 800f2a8:	6023      	str	r3, [r4, #0]
 800f2aa:	bd38      	pop	{r3, r4, r5, pc}
 800f2ac:	20000db0 	.word	0x20000db0

0800f2b0 <fmod>:
 800f2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b2:	ed2d 8b02 	vpush	{d8}
 800f2b6:	ec57 6b10 	vmov	r6, r7, d0
 800f2ba:	ec55 4b11 	vmov	r4, r5, d1
 800f2be:	f000 f8a3 	bl	800f408 <__ieee754_fmod>
 800f2c2:	4622      	mov	r2, r4
 800f2c4:	462b      	mov	r3, r5
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	4639      	mov	r1, r7
 800f2ca:	eeb0 8a40 	vmov.f32	s16, s0
 800f2ce:	eef0 8a60 	vmov.f32	s17, s1
 800f2d2:	f7f1 fc53 	bl	8000b7c <__aeabi_dcmpun>
 800f2d6:	b990      	cbnz	r0, 800f2fe <fmod+0x4e>
 800f2d8:	2200      	movs	r2, #0
 800f2da:	2300      	movs	r3, #0
 800f2dc:	4620      	mov	r0, r4
 800f2de:	4629      	mov	r1, r5
 800f2e0:	f7f1 fc1a 	bl	8000b18 <__aeabi_dcmpeq>
 800f2e4:	b158      	cbz	r0, 800f2fe <fmod+0x4e>
 800f2e6:	f7fd ffb9 	bl	800d25c <__errno>
 800f2ea:	2321      	movs	r3, #33	@ 0x21
 800f2ec:	6003      	str	r3, [r0, #0]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	4610      	mov	r0, r2
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	f7f1 fad1 	bl	800089c <__aeabi_ddiv>
 800f2fa:	ec41 0b18 	vmov	d8, r0, r1
 800f2fe:	eeb0 0a48 	vmov.f32	s0, s16
 800f302:	eef0 0a68 	vmov.f32	s1, s17
 800f306:	ecbd 8b02 	vpop	{d8}
 800f30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f30c:	0000      	movs	r0, r0
	...

0800f310 <floor>:
 800f310:	ec51 0b10 	vmov	r0, r1, d0
 800f314:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f31c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f320:	2e13      	cmp	r6, #19
 800f322:	460c      	mov	r4, r1
 800f324:	4605      	mov	r5, r0
 800f326:	4680      	mov	r8, r0
 800f328:	dc34      	bgt.n	800f394 <floor+0x84>
 800f32a:	2e00      	cmp	r6, #0
 800f32c:	da17      	bge.n	800f35e <floor+0x4e>
 800f32e:	a332      	add	r3, pc, #200	@ (adr r3, 800f3f8 <floor+0xe8>)
 800f330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f334:	f7f0 ffd2 	bl	80002dc <__adddf3>
 800f338:	2200      	movs	r2, #0
 800f33a:	2300      	movs	r3, #0
 800f33c:	f7f1 fc14 	bl	8000b68 <__aeabi_dcmpgt>
 800f340:	b150      	cbz	r0, 800f358 <floor+0x48>
 800f342:	2c00      	cmp	r4, #0
 800f344:	da55      	bge.n	800f3f2 <floor+0xe2>
 800f346:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f34a:	432c      	orrs	r4, r5
 800f34c:	2500      	movs	r5, #0
 800f34e:	42ac      	cmp	r4, r5
 800f350:	4c2b      	ldr	r4, [pc, #172]	@ (800f400 <floor+0xf0>)
 800f352:	bf08      	it	eq
 800f354:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f358:	4621      	mov	r1, r4
 800f35a:	4628      	mov	r0, r5
 800f35c:	e023      	b.n	800f3a6 <floor+0x96>
 800f35e:	4f29      	ldr	r7, [pc, #164]	@ (800f404 <floor+0xf4>)
 800f360:	4137      	asrs	r7, r6
 800f362:	ea01 0307 	and.w	r3, r1, r7
 800f366:	4303      	orrs	r3, r0
 800f368:	d01d      	beq.n	800f3a6 <floor+0x96>
 800f36a:	a323      	add	r3, pc, #140	@ (adr r3, 800f3f8 <floor+0xe8>)
 800f36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f370:	f7f0 ffb4 	bl	80002dc <__adddf3>
 800f374:	2200      	movs	r2, #0
 800f376:	2300      	movs	r3, #0
 800f378:	f7f1 fbf6 	bl	8000b68 <__aeabi_dcmpgt>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d0eb      	beq.n	800f358 <floor+0x48>
 800f380:	2c00      	cmp	r4, #0
 800f382:	bfbe      	ittt	lt
 800f384:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f388:	4133      	asrlt	r3, r6
 800f38a:	18e4      	addlt	r4, r4, r3
 800f38c:	ea24 0407 	bic.w	r4, r4, r7
 800f390:	2500      	movs	r5, #0
 800f392:	e7e1      	b.n	800f358 <floor+0x48>
 800f394:	2e33      	cmp	r6, #51	@ 0x33
 800f396:	dd0a      	ble.n	800f3ae <floor+0x9e>
 800f398:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f39c:	d103      	bne.n	800f3a6 <floor+0x96>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	460b      	mov	r3, r1
 800f3a2:	f7f0 ff9b 	bl	80002dc <__adddf3>
 800f3a6:	ec41 0b10 	vmov	d0, r0, r1
 800f3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f3b2:	f04f 37ff 	mov.w	r7, #4294967295
 800f3b6:	40df      	lsrs	r7, r3
 800f3b8:	4207      	tst	r7, r0
 800f3ba:	d0f4      	beq.n	800f3a6 <floor+0x96>
 800f3bc:	a30e      	add	r3, pc, #56	@ (adr r3, 800f3f8 <floor+0xe8>)
 800f3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c2:	f7f0 ff8b 	bl	80002dc <__adddf3>
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	f7f1 fbcd 	bl	8000b68 <__aeabi_dcmpgt>
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	d0c2      	beq.n	800f358 <floor+0x48>
 800f3d2:	2c00      	cmp	r4, #0
 800f3d4:	da0a      	bge.n	800f3ec <floor+0xdc>
 800f3d6:	2e14      	cmp	r6, #20
 800f3d8:	d101      	bne.n	800f3de <floor+0xce>
 800f3da:	3401      	adds	r4, #1
 800f3dc:	e006      	b.n	800f3ec <floor+0xdc>
 800f3de:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	40b3      	lsls	r3, r6
 800f3e6:	441d      	add	r5, r3
 800f3e8:	4545      	cmp	r5, r8
 800f3ea:	d3f6      	bcc.n	800f3da <floor+0xca>
 800f3ec:	ea25 0507 	bic.w	r5, r5, r7
 800f3f0:	e7b2      	b.n	800f358 <floor+0x48>
 800f3f2:	2500      	movs	r5, #0
 800f3f4:	462c      	mov	r4, r5
 800f3f6:	e7af      	b.n	800f358 <floor+0x48>
 800f3f8:	8800759c 	.word	0x8800759c
 800f3fc:	7e37e43c 	.word	0x7e37e43c
 800f400:	bff00000 	.word	0xbff00000
 800f404:	000fffff 	.word	0x000fffff

0800f408 <__ieee754_fmod>:
 800f408:	ec53 2b11 	vmov	r2, r3, d1
 800f40c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800f410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f414:	ea52 040c 	orrs.w	r4, r2, ip
 800f418:	ec51 0b10 	vmov	r0, r1, d0
 800f41c:	461e      	mov	r6, r3
 800f41e:	4617      	mov	r7, r2
 800f420:	4696      	mov	lr, r2
 800f422:	d00c      	beq.n	800f43e <__ieee754_fmod+0x36>
 800f424:	4c77      	ldr	r4, [pc, #476]	@ (800f604 <__ieee754_fmod+0x1fc>)
 800f426:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800f42a:	45a0      	cmp	r8, r4
 800f42c:	4689      	mov	r9, r1
 800f42e:	d806      	bhi.n	800f43e <__ieee754_fmod+0x36>
 800f430:	4254      	negs	r4, r2
 800f432:	4d75      	ldr	r5, [pc, #468]	@ (800f608 <__ieee754_fmod+0x200>)
 800f434:	4314      	orrs	r4, r2
 800f436:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800f43a:	42ac      	cmp	r4, r5
 800f43c:	d909      	bls.n	800f452 <__ieee754_fmod+0x4a>
 800f43e:	f7f1 f903 	bl	8000648 <__aeabi_dmul>
 800f442:	4602      	mov	r2, r0
 800f444:	460b      	mov	r3, r1
 800f446:	f7f1 fa29 	bl	800089c <__aeabi_ddiv>
 800f44a:	ec41 0b10 	vmov	d0, r0, r1
 800f44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f452:	45e0      	cmp	r8, ip
 800f454:	4682      	mov	sl, r0
 800f456:	4604      	mov	r4, r0
 800f458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800f45c:	dc09      	bgt.n	800f472 <__ieee754_fmod+0x6a>
 800f45e:	dbf4      	blt.n	800f44a <__ieee754_fmod+0x42>
 800f460:	4282      	cmp	r2, r0
 800f462:	d8f2      	bhi.n	800f44a <__ieee754_fmod+0x42>
 800f464:	d105      	bne.n	800f472 <__ieee754_fmod+0x6a>
 800f466:	4b69      	ldr	r3, [pc, #420]	@ (800f60c <__ieee754_fmod+0x204>)
 800f468:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800f46c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f470:	e7eb      	b.n	800f44a <__ieee754_fmod+0x42>
 800f472:	4a65      	ldr	r2, [pc, #404]	@ (800f608 <__ieee754_fmod+0x200>)
 800f474:	ea19 0f02 	tst.w	r9, r2
 800f478:	d148      	bne.n	800f50c <__ieee754_fmod+0x104>
 800f47a:	f1b8 0f00 	cmp.w	r8, #0
 800f47e:	d13d      	bne.n	800f4fc <__ieee754_fmod+0xf4>
 800f480:	4963      	ldr	r1, [pc, #396]	@ (800f610 <__ieee754_fmod+0x208>)
 800f482:	4653      	mov	r3, sl
 800f484:	2b00      	cmp	r3, #0
 800f486:	dc36      	bgt.n	800f4f6 <__ieee754_fmod+0xee>
 800f488:	4216      	tst	r6, r2
 800f48a:	d14f      	bne.n	800f52c <__ieee754_fmod+0x124>
 800f48c:	f1bc 0f00 	cmp.w	ip, #0
 800f490:	d144      	bne.n	800f51c <__ieee754_fmod+0x114>
 800f492:	4a5f      	ldr	r2, [pc, #380]	@ (800f610 <__ieee754_fmod+0x208>)
 800f494:	463b      	mov	r3, r7
 800f496:	2b00      	cmp	r3, #0
 800f498:	dc3d      	bgt.n	800f516 <__ieee754_fmod+0x10e>
 800f49a:	485e      	ldr	r0, [pc, #376]	@ (800f614 <__ieee754_fmod+0x20c>)
 800f49c:	4281      	cmp	r1, r0
 800f49e:	db4a      	blt.n	800f536 <__ieee754_fmod+0x12e>
 800f4a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f4a8:	485a      	ldr	r0, [pc, #360]	@ (800f614 <__ieee754_fmod+0x20c>)
 800f4aa:	4282      	cmp	r2, r0
 800f4ac:	db57      	blt.n	800f55e <__ieee754_fmod+0x156>
 800f4ae:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800f4b2:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800f4b6:	1a89      	subs	r1, r1, r2
 800f4b8:	1b98      	subs	r0, r3, r6
 800f4ba:	eba4 070e 	sub.w	r7, r4, lr
 800f4be:	2900      	cmp	r1, #0
 800f4c0:	d162      	bne.n	800f588 <__ieee754_fmod+0x180>
 800f4c2:	4574      	cmp	r4, lr
 800f4c4:	bf38      	it	cc
 800f4c6:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800f4ca:	2800      	cmp	r0, #0
 800f4cc:	bfa4      	itt	ge
 800f4ce:	463c      	movge	r4, r7
 800f4d0:	4603      	movge	r3, r0
 800f4d2:	ea53 0104 	orrs.w	r1, r3, r4
 800f4d6:	d0c6      	beq.n	800f466 <__ieee754_fmod+0x5e>
 800f4d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f4dc:	db69      	blt.n	800f5b2 <__ieee754_fmod+0x1aa>
 800f4de:	494d      	ldr	r1, [pc, #308]	@ (800f614 <__ieee754_fmod+0x20c>)
 800f4e0:	428a      	cmp	r2, r1
 800f4e2:	db6c      	blt.n	800f5be <__ieee754_fmod+0x1b6>
 800f4e4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f4e8:	432b      	orrs	r3, r5
 800f4ea:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800f4ee:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	e7a9      	b.n	800f44a <__ieee754_fmod+0x42>
 800f4f6:	3901      	subs	r1, #1
 800f4f8:	005b      	lsls	r3, r3, #1
 800f4fa:	e7c3      	b.n	800f484 <__ieee754_fmod+0x7c>
 800f4fc:	4945      	ldr	r1, [pc, #276]	@ (800f614 <__ieee754_fmod+0x20c>)
 800f4fe:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800f502:	2b00      	cmp	r3, #0
 800f504:	ddc0      	ble.n	800f488 <__ieee754_fmod+0x80>
 800f506:	3901      	subs	r1, #1
 800f508:	005b      	lsls	r3, r3, #1
 800f50a:	e7fa      	b.n	800f502 <__ieee754_fmod+0xfa>
 800f50c:	ea4f 5128 	mov.w	r1, r8, asr #20
 800f510:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f514:	e7b8      	b.n	800f488 <__ieee754_fmod+0x80>
 800f516:	3a01      	subs	r2, #1
 800f518:	005b      	lsls	r3, r3, #1
 800f51a:	e7bc      	b.n	800f496 <__ieee754_fmod+0x8e>
 800f51c:	4a3d      	ldr	r2, [pc, #244]	@ (800f614 <__ieee754_fmod+0x20c>)
 800f51e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800f522:	2b00      	cmp	r3, #0
 800f524:	ddb9      	ble.n	800f49a <__ieee754_fmod+0x92>
 800f526:	3a01      	subs	r2, #1
 800f528:	005b      	lsls	r3, r3, #1
 800f52a:	e7fa      	b.n	800f522 <__ieee754_fmod+0x11a>
 800f52c:	ea4f 522c 	mov.w	r2, ip, asr #20
 800f530:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f534:	e7b1      	b.n	800f49a <__ieee754_fmod+0x92>
 800f536:	1a40      	subs	r0, r0, r1
 800f538:	281f      	cmp	r0, #31
 800f53a:	dc0a      	bgt.n	800f552 <__ieee754_fmod+0x14a>
 800f53c:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800f540:	fa08 f800 	lsl.w	r8, r8, r0
 800f544:	fa2a f303 	lsr.w	r3, sl, r3
 800f548:	ea43 0308 	orr.w	r3, r3, r8
 800f54c:	fa0a f400 	lsl.w	r4, sl, r0
 800f550:	e7aa      	b.n	800f4a8 <__ieee754_fmod+0xa0>
 800f552:	4b31      	ldr	r3, [pc, #196]	@ (800f618 <__ieee754_fmod+0x210>)
 800f554:	1a5b      	subs	r3, r3, r1
 800f556:	fa0a f303 	lsl.w	r3, sl, r3
 800f55a:	2400      	movs	r4, #0
 800f55c:	e7a4      	b.n	800f4a8 <__ieee754_fmod+0xa0>
 800f55e:	1a80      	subs	r0, r0, r2
 800f560:	281f      	cmp	r0, #31
 800f562:	dc0a      	bgt.n	800f57a <__ieee754_fmod+0x172>
 800f564:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800f568:	fa0c fc00 	lsl.w	ip, ip, r0
 800f56c:	fa27 f606 	lsr.w	r6, r7, r6
 800f570:	ea46 060c 	orr.w	r6, r6, ip
 800f574:	fa07 fe00 	lsl.w	lr, r7, r0
 800f578:	e79d      	b.n	800f4b6 <__ieee754_fmod+0xae>
 800f57a:	4e27      	ldr	r6, [pc, #156]	@ (800f618 <__ieee754_fmod+0x210>)
 800f57c:	1ab6      	subs	r6, r6, r2
 800f57e:	fa07 f606 	lsl.w	r6, r7, r6
 800f582:	f04f 0e00 	mov.w	lr, #0
 800f586:	e796      	b.n	800f4b6 <__ieee754_fmod+0xae>
 800f588:	4574      	cmp	r4, lr
 800f58a:	bf38      	it	cc
 800f58c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800f590:	2800      	cmp	r0, #0
 800f592:	da05      	bge.n	800f5a0 <__ieee754_fmod+0x198>
 800f594:	0fe0      	lsrs	r0, r4, #31
 800f596:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f59a:	0064      	lsls	r4, r4, #1
 800f59c:	3901      	subs	r1, #1
 800f59e:	e78b      	b.n	800f4b8 <__ieee754_fmod+0xb0>
 800f5a0:	ea50 0307 	orrs.w	r3, r0, r7
 800f5a4:	f43f af5f 	beq.w	800f466 <__ieee754_fmod+0x5e>
 800f5a8:	0ffb      	lsrs	r3, r7, #31
 800f5aa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800f5ae:	007c      	lsls	r4, r7, #1
 800f5b0:	e7f4      	b.n	800f59c <__ieee754_fmod+0x194>
 800f5b2:	0fe1      	lsrs	r1, r4, #31
 800f5b4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800f5b8:	0064      	lsls	r4, r4, #1
 800f5ba:	3a01      	subs	r2, #1
 800f5bc:	e78c      	b.n	800f4d8 <__ieee754_fmod+0xd0>
 800f5be:	1a89      	subs	r1, r1, r2
 800f5c0:	2914      	cmp	r1, #20
 800f5c2:	dc0a      	bgt.n	800f5da <__ieee754_fmod+0x1d2>
 800f5c4:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800f5c8:	fa03 f202 	lsl.w	r2, r3, r2
 800f5cc:	40cc      	lsrs	r4, r1
 800f5ce:	4322      	orrs	r2, r4
 800f5d0:	410b      	asrs	r3, r1
 800f5d2:	ea43 0105 	orr.w	r1, r3, r5
 800f5d6:	4610      	mov	r0, r2
 800f5d8:	e737      	b.n	800f44a <__ieee754_fmod+0x42>
 800f5da:	291f      	cmp	r1, #31
 800f5dc:	dc07      	bgt.n	800f5ee <__ieee754_fmod+0x1e6>
 800f5de:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800f5e2:	40cc      	lsrs	r4, r1
 800f5e4:	fa03 f202 	lsl.w	r2, r3, r2
 800f5e8:	4322      	orrs	r2, r4
 800f5ea:	462b      	mov	r3, r5
 800f5ec:	e7f1      	b.n	800f5d2 <__ieee754_fmod+0x1ca>
 800f5ee:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800f5f2:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800f5f6:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800f5fa:	32e2      	adds	r2, #226	@ 0xe2
 800f5fc:	fa43 f202 	asr.w	r2, r3, r2
 800f600:	e7f3      	b.n	800f5ea <__ieee754_fmod+0x1e2>
 800f602:	bf00      	nop
 800f604:	7fefffff 	.word	0x7fefffff
 800f608:	7ff00000 	.word	0x7ff00000
 800f60c:	0800fa58 	.word	0x0800fa58
 800f610:	fffffbed 	.word	0xfffffbed
 800f614:	fffffc02 	.word	0xfffffc02
 800f618:	fffffbe2 	.word	0xfffffbe2

0800f61c <_init>:
 800f61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f61e:	bf00      	nop
 800f620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f622:	bc08      	pop	{r3}
 800f624:	469e      	mov	lr, r3
 800f626:	4770      	bx	lr

0800f628 <_fini>:
 800f628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f62a:	bf00      	nop
 800f62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f62e:	bc08      	pop	{r3}
 800f630:	469e      	mov	lr, r3
 800f632:	4770      	bx	lr
