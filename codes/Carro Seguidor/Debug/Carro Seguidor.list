
Carro Seguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001068c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08010870  08010870  00011870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e90  08010e90  00012210  2**0
                  CONTENTS
  4 .ARM          00000008  08010e90  08010e90  00011e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e98  08010e98  00012210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e98  08010e98  00011e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e9c  08010e9c  00011e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08010ea0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f6c  20000210  080110b0  00012210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000117c  080110b0  0001317c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8aa  00000000  00000000  00012240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004160  00000000  00000000  0002faea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00033c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001244  00000000  00000000  000353e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006235  00000000  00000000  0003662c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020157  00000000  00000000  0003c861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001027b5  00000000  00000000  0005c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f16d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075f4  00000000  00000000  0015f1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001667a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010854 	.word	0x08010854

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	08010854 	.word	0x08010854

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_frsub>:
 8000cd8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cdc:	e002      	b.n	8000ce4 <__addsf3>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fsub>:
 8000ce0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ce4 <__addsf3>:
 8000ce4:	0042      	lsls	r2, r0, #1
 8000ce6:	bf1f      	itttt	ne
 8000ce8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cec:	ea92 0f03 	teqne	r2, r3
 8000cf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf8:	d06a      	beq.n	8000dd0 <__addsf3+0xec>
 8000cfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d02:	bfc1      	itttt	gt
 8000d04:	18d2      	addgt	r2, r2, r3
 8000d06:	4041      	eorgt	r1, r0
 8000d08:	4048      	eorgt	r0, r1
 8000d0a:	4041      	eorgt	r1, r0
 8000d0c:	bfb8      	it	lt
 8000d0e:	425b      	neglt	r3, r3
 8000d10:	2b19      	cmp	r3, #25
 8000d12:	bf88      	it	hi
 8000d14:	4770      	bxhi	lr
 8000d16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4240      	negne	r0, r0
 8000d26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d32:	bf18      	it	ne
 8000d34:	4249      	negne	r1, r1
 8000d36:	ea92 0f03 	teq	r2, r3
 8000d3a:	d03f      	beq.n	8000dbc <__addsf3+0xd8>
 8000d3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d40:	fa41 fc03 	asr.w	ip, r1, r3
 8000d44:	eb10 000c 	adds.w	r0, r0, ip
 8000d48:	f1c3 0320 	rsb	r3, r3, #32
 8000d4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__addsf3+0x78>
 8000d56:	4249      	negs	r1, r1
 8000d58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d60:	d313      	bcc.n	8000d8a <__addsf3+0xa6>
 8000d62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d66:	d306      	bcc.n	8000d76 <__addsf3+0x92>
 8000d68:	0840      	lsrs	r0, r0, #1
 8000d6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d6e:	f102 0201 	add.w	r2, r2, #1
 8000d72:	2afe      	cmp	r2, #254	@ 0xfe
 8000d74:	d251      	bcs.n	8000e1a <__addsf3+0x136>
 8000d76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7e:	bf08      	it	eq
 8000d80:	f020 0001 	biceq.w	r0, r0, #1
 8000d84:	ea40 0003 	orr.w	r0, r0, r3
 8000d88:	4770      	bx	lr
 8000d8a:	0049      	lsls	r1, r1, #1
 8000d8c:	eb40 0000 	adc.w	r0, r0, r0
 8000d90:	3a01      	subs	r2, #1
 8000d92:	bf28      	it	cs
 8000d94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d98:	d2ed      	bcs.n	8000d76 <__addsf3+0x92>
 8000d9a:	fab0 fc80 	clz	ip, r0
 8000d9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000da2:	ebb2 020c 	subs.w	r2, r2, ip
 8000da6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000daa:	bfaa      	itet	ge
 8000dac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000db0:	4252      	neglt	r2, r2
 8000db2:	4318      	orrge	r0, r3
 8000db4:	bfbc      	itt	lt
 8000db6:	40d0      	lsrlt	r0, r2
 8000db8:	4318      	orrlt	r0, r3
 8000dba:	4770      	bx	lr
 8000dbc:	f092 0f00 	teq	r2, #0
 8000dc0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dc4:	bf06      	itte	eq
 8000dc6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dca:	3201      	addeq	r2, #1
 8000dcc:	3b01      	subne	r3, #1
 8000dce:	e7b5      	b.n	8000d3c <__addsf3+0x58>
 8000dd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	bf18      	it	ne
 8000dda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dde:	d021      	beq.n	8000e24 <__addsf3+0x140>
 8000de0:	ea92 0f03 	teq	r2, r3
 8000de4:	d004      	beq.n	8000df0 <__addsf3+0x10c>
 8000de6:	f092 0f00 	teq	r2, #0
 8000dea:	bf08      	it	eq
 8000dec:	4608      	moveq	r0, r1
 8000dee:	4770      	bx	lr
 8000df0:	ea90 0f01 	teq	r0, r1
 8000df4:	bf1c      	itt	ne
 8000df6:	2000      	movne	r0, #0
 8000df8:	4770      	bxne	lr
 8000dfa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dfe:	d104      	bne.n	8000e0a <__addsf3+0x126>
 8000e00:	0040      	lsls	r0, r0, #1
 8000e02:	bf28      	it	cs
 8000e04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e08:	4770      	bx	lr
 8000e0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e0e:	bf3c      	itt	cc
 8000e10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bxcc	lr
 8000e16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e22:	4770      	bx	lr
 8000e24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e28:	bf16      	itet	ne
 8000e2a:	4608      	movne	r0, r1
 8000e2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e30:	4601      	movne	r1, r0
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	bf06      	itte	eq
 8000e36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e3a:	ea90 0f01 	teqeq	r0, r1
 8000e3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_ui2f>:
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e004      	b.n	8000e54 <__aeabi_i2f+0x8>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_i2f>:
 8000e4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e50:	bf48      	it	mi
 8000e52:	4240      	negmi	r0, r0
 8000e54:	ea5f 0c00 	movs.w	ip, r0
 8000e58:	bf08      	it	eq
 8000e5a:	4770      	bxeq	lr
 8000e5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e60:	4601      	mov	r1, r0
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	e01c      	b.n	8000ea2 <__aeabi_l2f+0x2a>

08000e68 <__aeabi_ul2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	e00a      	b.n	8000e8c <__aeabi_l2f+0x14>
 8000e76:	bf00      	nop

08000e78 <__aeabi_l2f>:
 8000e78:	ea50 0201 	orrs.w	r2, r0, r1
 8000e7c:	bf08      	it	eq
 8000e7e:	4770      	bxeq	lr
 8000e80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e84:	d502      	bpl.n	8000e8c <__aeabi_l2f+0x14>
 8000e86:	4240      	negs	r0, r0
 8000e88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e8c:	ea5f 0c01 	movs.w	ip, r1
 8000e90:	bf02      	ittt	eq
 8000e92:	4684      	moveq	ip, r0
 8000e94:	4601      	moveq	r1, r0
 8000e96:	2000      	moveq	r0, #0
 8000e98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e9c:	bf08      	it	eq
 8000e9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ea2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ea6:	fabc f28c 	clz	r2, ip
 8000eaa:	3a08      	subs	r2, #8
 8000eac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000eb0:	db10      	blt.n	8000ed4 <__aeabi_l2f+0x5c>
 8000eb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ec4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f102 0220 	add.w	r2, r2, #32
 8000ed8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000edc:	f1c2 0220 	rsb	r2, r2, #32
 8000ee0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ee4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee8:	eb43 0002 	adc.w	r0, r3, r2
 8000eec:	bf08      	it	eq
 8000eee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ef2:	4770      	bx	lr

08000ef4 <__aeabi_uldivmod>:
 8000ef4:	b953      	cbnz	r3, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef6:	b94a      	cbnz	r2, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	bf08      	it	eq
 8000efc:	2800      	cmpeq	r0, #0
 8000efe:	bf1c      	itt	ne
 8000f00:	f04f 31ff 	movne.w	r1, #4294967295
 8000f04:	f04f 30ff 	movne.w	r0, #4294967295
 8000f08:	f000 b9a0 	b.w	800124c <__aeabi_idiv0>
 8000f0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f14:	f000 f83c 	bl	8000f90 <__udivmoddi4>
 8000f18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_d2lz>:
 8000f24:	b538      	push	{r3, r4, r5, lr}
 8000f26:	2200      	movs	r2, #0
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	460d      	mov	r5, r1
 8000f2e:	f7ff fdfd 	bl	8000b2c <__aeabi_dcmplt>
 8000f32:	b928      	cbnz	r0, 8000f40 <__aeabi_d2lz+0x1c>
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f3c:	f000 b80a 	b.w	8000f54 <__aeabi_d2ulz>
 8000f40:	4620      	mov	r0, r4
 8000f42:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f46:	f000 f805 	bl	8000f54 <__aeabi_d2ulz>
 8000f4a:	4240      	negs	r0, r0
 8000f4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f50:	bd38      	pop	{r3, r4, r5, pc}
 8000f52:	bf00      	nop

08000f54 <__aeabi_d2ulz>:
 8000f54:	b5d0      	push	{r4, r6, r7, lr}
 8000f56:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <__aeabi_d2ulz+0x34>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4606      	mov	r6, r0
 8000f5c:	460f      	mov	r7, r1
 8000f5e:	f7ff fb73 	bl	8000648 <__aeabi_dmul>
 8000f62:	f7ff fe49 	bl	8000bf8 <__aeabi_d2uiz>
 8000f66:	4604      	mov	r4, r0
 8000f68:	f7ff faf4 	bl	8000554 <__aeabi_ui2d>
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <__aeabi_d2ulz+0x38>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f7ff fb6a 	bl	8000648 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4630      	mov	r0, r6
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	f7ff f9ac 	bl	80002d8 <__aeabi_dsub>
 8000f80:	f7ff fe3a 	bl	8000bf8 <__aeabi_d2uiz>
 8000f84:	4621      	mov	r1, r4
 8000f86:	bdd0      	pop	{r4, r6, r7, pc}
 8000f88:	3df00000 	.word	0x3df00000
 8000f8c:	41f00000 	.word	0x41f00000

08000f90 <__udivmoddi4>:
 8000f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f94:	9d08      	ldr	r5, [sp, #32]
 8000f96:	460c      	mov	r4, r1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d14e      	bne.n	800103a <__udivmoddi4+0xaa>
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	458c      	cmp	ip, r1
 8000fa0:	4686      	mov	lr, r0
 8000fa2:	fab2 f282 	clz	r2, r2
 8000fa6:	d962      	bls.n	800106e <__udivmoddi4+0xde>
 8000fa8:	b14a      	cbz	r2, 8000fbe <__udivmoddi4+0x2e>
 8000faa:	f1c2 0320 	rsb	r3, r2, #32
 8000fae:	4091      	lsls	r1, r2
 8000fb0:	fa20 f303 	lsr.w	r3, r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	4319      	orrs	r1, r3
 8000fba:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc2:	fa1f f68c 	uxth.w	r6, ip
 8000fc6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	d90a      	bls.n	8000ff4 <__udivmoddi4+0x64>
 8000fde:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fe6:	f080 8112 	bcs.w	800120e <__udivmoddi4+0x27e>
 8000fea:	4299      	cmp	r1, r3
 8000fec:	f240 810f 	bls.w	800120e <__udivmoddi4+0x27e>
 8000ff0:	3c02      	subs	r4, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1a59      	subs	r1, r3, r1
 8000ff6:	fa1f f38e 	uxth.w	r3, lr
 8000ffa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ffe:	fb07 1110 	mls	r1, r7, r0, r1
 8001002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001006:	fb00 f606 	mul.w	r6, r0, r6
 800100a:	429e      	cmp	r6, r3
 800100c:	d90a      	bls.n	8001024 <__udivmoddi4+0x94>
 800100e:	eb1c 0303 	adds.w	r3, ip, r3
 8001012:	f100 31ff 	add.w	r1, r0, #4294967295
 8001016:	f080 80fc 	bcs.w	8001212 <__udivmoddi4+0x282>
 800101a:	429e      	cmp	r6, r3
 800101c:	f240 80f9 	bls.w	8001212 <__udivmoddi4+0x282>
 8001020:	4463      	add	r3, ip
 8001022:	3802      	subs	r0, #2
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800102a:	2100      	movs	r1, #0
 800102c:	b11d      	cbz	r5, 8001036 <__udivmoddi4+0xa6>
 800102e:	40d3      	lsrs	r3, r2
 8001030:	2200      	movs	r2, #0
 8001032:	e9c5 3200 	strd	r3, r2, [r5]
 8001036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103a:	428b      	cmp	r3, r1
 800103c:	d905      	bls.n	800104a <__udivmoddi4+0xba>
 800103e:	b10d      	cbz	r5, 8001044 <__udivmoddi4+0xb4>
 8001040:	e9c5 0100 	strd	r0, r1, [r5]
 8001044:	2100      	movs	r1, #0
 8001046:	4608      	mov	r0, r1
 8001048:	e7f5      	b.n	8001036 <__udivmoddi4+0xa6>
 800104a:	fab3 f183 	clz	r1, r3
 800104e:	2900      	cmp	r1, #0
 8001050:	d146      	bne.n	80010e0 <__udivmoddi4+0x150>
 8001052:	42a3      	cmp	r3, r4
 8001054:	d302      	bcc.n	800105c <__udivmoddi4+0xcc>
 8001056:	4290      	cmp	r0, r2
 8001058:	f0c0 80f0 	bcc.w	800123c <__udivmoddi4+0x2ac>
 800105c:	1a86      	subs	r6, r0, r2
 800105e:	eb64 0303 	sbc.w	r3, r4, r3
 8001062:	2001      	movs	r0, #1
 8001064:	2d00      	cmp	r5, #0
 8001066:	d0e6      	beq.n	8001036 <__udivmoddi4+0xa6>
 8001068:	e9c5 6300 	strd	r6, r3, [r5]
 800106c:	e7e3      	b.n	8001036 <__udivmoddi4+0xa6>
 800106e:	2a00      	cmp	r2, #0
 8001070:	f040 8090 	bne.w	8001194 <__udivmoddi4+0x204>
 8001074:	eba1 040c 	sub.w	r4, r1, ip
 8001078:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800107c:	fa1f f78c 	uxth.w	r7, ip
 8001080:	2101      	movs	r1, #1
 8001082:	fbb4 f6f8 	udiv	r6, r4, r8
 8001086:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800108a:	fb08 4416 	mls	r4, r8, r6, r4
 800108e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001092:	fb07 f006 	mul.w	r0, r7, r6
 8001096:	4298      	cmp	r0, r3
 8001098:	d908      	bls.n	80010ac <__udivmoddi4+0x11c>
 800109a:	eb1c 0303 	adds.w	r3, ip, r3
 800109e:	f106 34ff 	add.w	r4, r6, #4294967295
 80010a2:	d202      	bcs.n	80010aa <__udivmoddi4+0x11a>
 80010a4:	4298      	cmp	r0, r3
 80010a6:	f200 80cd 	bhi.w	8001244 <__udivmoddi4+0x2b4>
 80010aa:	4626      	mov	r6, r4
 80010ac:	1a1c      	subs	r4, r3, r0
 80010ae:	fa1f f38e 	uxth.w	r3, lr
 80010b2:	fbb4 f0f8 	udiv	r0, r4, r8
 80010b6:	fb08 4410 	mls	r4, r8, r0, r4
 80010ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010be:	fb00 f707 	mul.w	r7, r0, r7
 80010c2:	429f      	cmp	r7, r3
 80010c4:	d908      	bls.n	80010d8 <__udivmoddi4+0x148>
 80010c6:	eb1c 0303 	adds.w	r3, ip, r3
 80010ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80010ce:	d202      	bcs.n	80010d6 <__udivmoddi4+0x146>
 80010d0:	429f      	cmp	r7, r3
 80010d2:	f200 80b0 	bhi.w	8001236 <__udivmoddi4+0x2a6>
 80010d6:	4620      	mov	r0, r4
 80010d8:	1bdb      	subs	r3, r3, r7
 80010da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010de:	e7a5      	b.n	800102c <__udivmoddi4+0x9c>
 80010e0:	f1c1 0620 	rsb	r6, r1, #32
 80010e4:	408b      	lsls	r3, r1
 80010e6:	fa22 f706 	lsr.w	r7, r2, r6
 80010ea:	431f      	orrs	r7, r3
 80010ec:	fa20 fc06 	lsr.w	ip, r0, r6
 80010f0:	fa04 f301 	lsl.w	r3, r4, r1
 80010f4:	ea43 030c 	orr.w	r3, r3, ip
 80010f8:	40f4      	lsrs	r4, r6
 80010fa:	fa00 f801 	lsl.w	r8, r0, r1
 80010fe:	0c38      	lsrs	r0, r7, #16
 8001100:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001104:	fbb4 fef0 	udiv	lr, r4, r0
 8001108:	fa1f fc87 	uxth.w	ip, r7
 800110c:	fb00 441e 	mls	r4, r0, lr, r4
 8001110:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001114:	fb0e f90c 	mul.w	r9, lr, ip
 8001118:	45a1      	cmp	r9, r4
 800111a:	fa02 f201 	lsl.w	r2, r2, r1
 800111e:	d90a      	bls.n	8001136 <__udivmoddi4+0x1a6>
 8001120:	193c      	adds	r4, r7, r4
 8001122:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001126:	f080 8084 	bcs.w	8001232 <__udivmoddi4+0x2a2>
 800112a:	45a1      	cmp	r9, r4
 800112c:	f240 8081 	bls.w	8001232 <__udivmoddi4+0x2a2>
 8001130:	f1ae 0e02 	sub.w	lr, lr, #2
 8001134:	443c      	add	r4, r7
 8001136:	eba4 0409 	sub.w	r4, r4, r9
 800113a:	fa1f f983 	uxth.w	r9, r3
 800113e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001142:	fb00 4413 	mls	r4, r0, r3, r4
 8001146:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800114a:	fb03 fc0c 	mul.w	ip, r3, ip
 800114e:	45a4      	cmp	ip, r4
 8001150:	d907      	bls.n	8001162 <__udivmoddi4+0x1d2>
 8001152:	193c      	adds	r4, r7, r4
 8001154:	f103 30ff 	add.w	r0, r3, #4294967295
 8001158:	d267      	bcs.n	800122a <__udivmoddi4+0x29a>
 800115a:	45a4      	cmp	ip, r4
 800115c:	d965      	bls.n	800122a <__udivmoddi4+0x29a>
 800115e:	3b02      	subs	r3, #2
 8001160:	443c      	add	r4, r7
 8001162:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001166:	fba0 9302 	umull	r9, r3, r0, r2
 800116a:	eba4 040c 	sub.w	r4, r4, ip
 800116e:	429c      	cmp	r4, r3
 8001170:	46ce      	mov	lr, r9
 8001172:	469c      	mov	ip, r3
 8001174:	d351      	bcc.n	800121a <__udivmoddi4+0x28a>
 8001176:	d04e      	beq.n	8001216 <__udivmoddi4+0x286>
 8001178:	b155      	cbz	r5, 8001190 <__udivmoddi4+0x200>
 800117a:	ebb8 030e 	subs.w	r3, r8, lr
 800117e:	eb64 040c 	sbc.w	r4, r4, ip
 8001182:	fa04 f606 	lsl.w	r6, r4, r6
 8001186:	40cb      	lsrs	r3, r1
 8001188:	431e      	orrs	r6, r3
 800118a:	40cc      	lsrs	r4, r1
 800118c:	e9c5 6400 	strd	r6, r4, [r5]
 8001190:	2100      	movs	r1, #0
 8001192:	e750      	b.n	8001036 <__udivmoddi4+0xa6>
 8001194:	f1c2 0320 	rsb	r3, r2, #32
 8001198:	fa20 f103 	lsr.w	r1, r0, r3
 800119c:	fa0c fc02 	lsl.w	ip, ip, r2
 80011a0:	fa24 f303 	lsr.w	r3, r4, r3
 80011a4:	4094      	lsls	r4, r2
 80011a6:	430c      	orrs	r4, r1
 80011a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80011b0:	fa1f f78c 	uxth.w	r7, ip
 80011b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80011b8:	fb08 3110 	mls	r1, r8, r0, r3
 80011bc:	0c23      	lsrs	r3, r4, #16
 80011be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011c2:	fb00 f107 	mul.w	r1, r0, r7
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d908      	bls.n	80011dc <__udivmoddi4+0x24c>
 80011ca:	eb1c 0303 	adds.w	r3, ip, r3
 80011ce:	f100 36ff 	add.w	r6, r0, #4294967295
 80011d2:	d22c      	bcs.n	800122e <__udivmoddi4+0x29e>
 80011d4:	4299      	cmp	r1, r3
 80011d6:	d92a      	bls.n	800122e <__udivmoddi4+0x29e>
 80011d8:	3802      	subs	r0, #2
 80011da:	4463      	add	r3, ip
 80011dc:	1a5b      	subs	r3, r3, r1
 80011de:	b2a4      	uxth	r4, r4
 80011e0:	fbb3 f1f8 	udiv	r1, r3, r8
 80011e4:	fb08 3311 	mls	r3, r8, r1, r3
 80011e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011ec:	fb01 f307 	mul.w	r3, r1, r7
 80011f0:	42a3      	cmp	r3, r4
 80011f2:	d908      	bls.n	8001206 <__udivmoddi4+0x276>
 80011f4:	eb1c 0404 	adds.w	r4, ip, r4
 80011f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80011fc:	d213      	bcs.n	8001226 <__udivmoddi4+0x296>
 80011fe:	42a3      	cmp	r3, r4
 8001200:	d911      	bls.n	8001226 <__udivmoddi4+0x296>
 8001202:	3902      	subs	r1, #2
 8001204:	4464      	add	r4, ip
 8001206:	1ae4      	subs	r4, r4, r3
 8001208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800120c:	e739      	b.n	8001082 <__udivmoddi4+0xf2>
 800120e:	4604      	mov	r4, r0
 8001210:	e6f0      	b.n	8000ff4 <__udivmoddi4+0x64>
 8001212:	4608      	mov	r0, r1
 8001214:	e706      	b.n	8001024 <__udivmoddi4+0x94>
 8001216:	45c8      	cmp	r8, r9
 8001218:	d2ae      	bcs.n	8001178 <__udivmoddi4+0x1e8>
 800121a:	ebb9 0e02 	subs.w	lr, r9, r2
 800121e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001222:	3801      	subs	r0, #1
 8001224:	e7a8      	b.n	8001178 <__udivmoddi4+0x1e8>
 8001226:	4631      	mov	r1, r6
 8001228:	e7ed      	b.n	8001206 <__udivmoddi4+0x276>
 800122a:	4603      	mov	r3, r0
 800122c:	e799      	b.n	8001162 <__udivmoddi4+0x1d2>
 800122e:	4630      	mov	r0, r6
 8001230:	e7d4      	b.n	80011dc <__udivmoddi4+0x24c>
 8001232:	46d6      	mov	lr, sl
 8001234:	e77f      	b.n	8001136 <__udivmoddi4+0x1a6>
 8001236:	4463      	add	r3, ip
 8001238:	3802      	subs	r0, #2
 800123a:	e74d      	b.n	80010d8 <__udivmoddi4+0x148>
 800123c:	4606      	mov	r6, r0
 800123e:	4623      	mov	r3, r4
 8001240:	4608      	mov	r0, r1
 8001242:	e70f      	b.n	8001064 <__udivmoddi4+0xd4>
 8001244:	3e02      	subs	r6, #2
 8001246:	4463      	add	r3, ip
 8001248:	e730      	b.n	80010ac <__udivmoddi4+0x11c>
 800124a:	bf00      	nop

0800124c <__aeabi_idiv0>:
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <vCommStateMachineInit>:
UART_HandleTypeDef *pV2VUART;

//-----------------------------------------------Functions---------------------------------------------//


void vCommStateMachineInit(UART_HandleTypeDef *huartV2V){
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	pV2VUART =huartV2V;
 8001258:	4a06      	ldr	r2, [pc, #24]	@ (8001274 <vCommStateMachineInit+0x24>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(pV2VUART, &ucDigit, 1);
 800125e:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <vCommStateMachineInit+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2201      	movs	r2, #1
 8001264:	4904      	ldr	r1, [pc, #16]	@ (8001278 <vCommStateMachineInit+0x28>)
 8001266:	4618      	mov	r0, r3
 8001268:	f009 face 	bl	800a808 <HAL_UART_Receive_IT>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000238 	.word	0x20000238
 8001278:	20000235 	.word	0x20000235

0800127c <HAL_UART_RxCpltCallback>:
//	 Description	:	Makes the treatment when recieve one byte from the uart, making a
//		                state machine to pass trought any input
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucByte
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    static unsigned char ucParam;

    if (huart == pV2VUART){
 8001284:	4b77      	ldr	r3, [pc, #476]	@ (8001464 <HAL_UART_RxCpltCallback+0x1e8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	f040 80e5 	bne.w	800145a <HAL_UART_RxCpltCallback+0x1de>
        HAL_UART_Receive_IT(huart, &ucDigit, 1);
 8001290:	2201      	movs	r2, #1
 8001292:	4975      	ldr	r1, [pc, #468]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f009 fab7 	bl	800a808 <HAL_UART_Receive_IT>

        if('#' == ucDigit){
 800129a:	4b73      	ldr	r3, [pc, #460]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b23      	cmp	r3, #35	@ 0x23
 80012a0:	d103      	bne.n	80012aa <HAL_UART_RxCpltCallback+0x2e>
                   ucState = _READY;
 80012a2:	4b72      	ldr	r3, [pc, #456]	@ (800146c <HAL_UART_RxCpltCallback+0x1f0>)
 80012a4:	2231      	movs	r2, #49	@ 0x31
 80012a6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
    }
//    HAL_UART_Receive_IT(pBluetoothControllerUART, &ucDigit, 1);
}
 80012a8:	e0d7      	b.n	800145a <HAL_UART_RxCpltCallback+0x1de>
			if (ucState != _IDDLE){
 80012aa:	4b70      	ldr	r3, [pc, #448]	@ (800146c <HAL_UART_RxCpltCallback+0x1f0>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b30      	cmp	r3, #48	@ 0x30
 80012b0:	f000 80d3 	beq.w	800145a <HAL_UART_RxCpltCallback+0x1de>
				switch (ucState){
 80012b4:	4b6d      	ldr	r3, [pc, #436]	@ (800146c <HAL_UART_RxCpltCallback+0x1f0>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3b31      	subs	r3, #49	@ 0x31
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	f200 80cd 	bhi.w	800145a <HAL_UART_RxCpltCallback+0x1de>
 80012c0:	a201      	add	r2, pc, #4	@ (adr r2, 80012c8 <HAL_UART_RxCpltCallback+0x4c>)
 80012c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c6:	bf00      	nop
 80012c8:	080012e1 	.word	0x080012e1
 80012cc:	0800145b 	.word	0x0800145b
 80012d0:	08001309 	.word	0x08001309
 80012d4:	08001371 	.word	0x08001371
 80012d8:	080013df 	.word	0x080013df
 80012dc:	080013f9 	.word	0x080013f9
					switch (ucDigit){
 80012e0:	4b61      	ldr	r3, [pc, #388]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b67      	cmp	r3, #103	@ 0x67
 80012e6:	d002      	beq.n	80012ee <HAL_UART_RxCpltCallback+0x72>
 80012e8:	2b73      	cmp	r3, #115	@ 0x73
 80012ea:	d004      	beq.n	80012f6 <HAL_UART_RxCpltCallback+0x7a>
 80012ec:	e007      	b.n	80012fe <HAL_UART_RxCpltCallback+0x82>
						ucState = _GET;
 80012ee:	4b5f      	ldr	r3, [pc, #380]	@ (800146c <HAL_UART_RxCpltCallback+0x1f0>)
 80012f0:	2233      	movs	r2, #51	@ 0x33
 80012f2:	701a      	strb	r2, [r3, #0]
						break;
 80012f4:	e007      	b.n	8001306 <HAL_UART_RxCpltCallback+0x8a>
						ucState = _SET;
 80012f6:	4b5d      	ldr	r3, [pc, #372]	@ (800146c <HAL_UART_RxCpltCallback+0x1f0>)
 80012f8:	2234      	movs	r2, #52	@ 0x34
 80012fa:	701a      	strb	r2, [r3, #0]
						break;
 80012fc:	e003      	b.n	8001306 <HAL_UART_RxCpltCallback+0x8a>
						ucState = _IDDLE;
 80012fe:	4b5b      	ldr	r3, [pc, #364]	@ (800146c <HAL_UART_RxCpltCallback+0x1f0>)
 8001300:	2230      	movs	r2, #48	@ 0x30
 8001302:	701a      	strb	r2, [r3, #0]
					break;
 8001304:	e0a9      	b.n	800145a <HAL_UART_RxCpltCallback+0x1de>
 8001306:	e0a8      	b.n	800145a <HAL_UART_RxCpltCallback+0x1de>
					if ('v' == ucDigit || 'a' == ucDigit || 'b' == ucDigit || 'c' == ucDigit || 'd' == ucDigit || 'e' == ucDigit || 'f' == ucDigit|| 'l' == ucDigit || 'r' == ucDigit|| 'o' == ucDigit){
 8001308:	4b57      	ldr	r3, [pc, #348]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b76      	cmp	r3, #118	@ 0x76
 800130e:	d023      	beq.n	8001358 <HAL_UART_RxCpltCallback+0xdc>
 8001310:	4b55      	ldr	r3, [pc, #340]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b61      	cmp	r3, #97	@ 0x61
 8001316:	d01f      	beq.n	8001358 <HAL_UART_RxCpltCallback+0xdc>
 8001318:	4b53      	ldr	r3, [pc, #332]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b62      	cmp	r3, #98	@ 0x62
 800131e:	d01b      	beq.n	8001358 <HAL_UART_RxCpltCallback+0xdc>
 8001320:	4b51      	ldr	r3, [pc, #324]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b63      	cmp	r3, #99	@ 0x63
 8001326:	d017      	beq.n	8001358 <HAL_UART_RxCpltCallback+0xdc>
 8001328:	4b4f      	ldr	r3, [pc, #316]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b64      	cmp	r3, #100	@ 0x64
 800132e:	d013      	beq.n	8001358 <HAL_UART_RxCpltCallback+0xdc>
 8001330:	4b4d      	ldr	r3, [pc, #308]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b65      	cmp	r3, #101	@ 0x65
 8001336:	d00f      	beq.n	8001358 <HAL_UART_RxCpltCallback+0xdc>
 8001338:	4b4b      	ldr	r3, [pc, #300]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b66      	cmp	r3, #102	@ 0x66
 800133e:	d00b      	beq.n	8001358 <HAL_UART_RxCpltCallback+0xdc>
 8001340:	4b49      	ldr	r3, [pc, #292]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b6c      	cmp	r3, #108	@ 0x6c
 8001346:	d007      	beq.n	8001358 <HAL_UART_RxCpltCallback+0xdc>
 8001348:	4b47      	ldr	r3, [pc, #284]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b72      	cmp	r3, #114	@ 0x72
 800134e:	d003      	beq.n	8001358 <HAL_UART_RxCpltCallback+0xdc>
 8001350:	4b45      	ldr	r3, [pc, #276]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b6f      	cmp	r3, #111	@ 0x6f
 8001356:	d107      	bne.n	8001368 <HAL_UART_RxCpltCallback+0xec>
					ucParam = ucDigit;
 8001358:	4b43      	ldr	r3, [pc, #268]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	4b44      	ldr	r3, [pc, #272]	@ (8001470 <HAL_UART_RxCpltCallback+0x1f4>)
 800135e:	701a      	strb	r2, [r3, #0]
					ucState = _PARAM;
 8001360:	4b42      	ldr	r3, [pc, #264]	@ (800146c <HAL_UART_RxCpltCallback+0x1f0>)
 8001362:	2235      	movs	r2, #53	@ 0x35
 8001364:	701a      	strb	r2, [r3, #0]
					break;
 8001366:	e078      	b.n	800145a <HAL_UART_RxCpltCallback+0x1de>
					ucState = _IDDLE;
 8001368:	4b40      	ldr	r3, [pc, #256]	@ (800146c <HAL_UART_RxCpltCallback+0x1f0>)
 800136a:	2230      	movs	r2, #48	@ 0x30
 800136c:	701a      	strb	r2, [r3, #0]
					break;
 800136e:	e074      	b.n	800145a <HAL_UART_RxCpltCallback+0x1de>
					if ('a' == ucDigit ||'v' == ucDigit || 'b' == ucDigit || 'c' == ucDigit || 'd' == ucDigit || 'e' == ucDigit || 'f' == ucDigit || 'l' == ucDigit || 'r' == ucDigit|| 'o' == ucDigit){
 8001370:	4b3d      	ldr	r3, [pc, #244]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b61      	cmp	r3, #97	@ 0x61
 8001376:	d023      	beq.n	80013c0 <HAL_UART_RxCpltCallback+0x144>
 8001378:	4b3b      	ldr	r3, [pc, #236]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b76      	cmp	r3, #118	@ 0x76
 800137e:	d01f      	beq.n	80013c0 <HAL_UART_RxCpltCallback+0x144>
 8001380:	4b39      	ldr	r3, [pc, #228]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b62      	cmp	r3, #98	@ 0x62
 8001386:	d01b      	beq.n	80013c0 <HAL_UART_RxCpltCallback+0x144>
 8001388:	4b37      	ldr	r3, [pc, #220]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b63      	cmp	r3, #99	@ 0x63
 800138e:	d017      	beq.n	80013c0 <HAL_UART_RxCpltCallback+0x144>
 8001390:	4b35      	ldr	r3, [pc, #212]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b64      	cmp	r3, #100	@ 0x64
 8001396:	d013      	beq.n	80013c0 <HAL_UART_RxCpltCallback+0x144>
 8001398:	4b33      	ldr	r3, [pc, #204]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b65      	cmp	r3, #101	@ 0x65
 800139e:	d00f      	beq.n	80013c0 <HAL_UART_RxCpltCallback+0x144>
 80013a0:	4b31      	ldr	r3, [pc, #196]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b66      	cmp	r3, #102	@ 0x66
 80013a6:	d00b      	beq.n	80013c0 <HAL_UART_RxCpltCallback+0x144>
 80013a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b6c      	cmp	r3, #108	@ 0x6c
 80013ae:	d007      	beq.n	80013c0 <HAL_UART_RxCpltCallback+0x144>
 80013b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b72      	cmp	r3, #114	@ 0x72
 80013b6:	d003      	beq.n	80013c0 <HAL_UART_RxCpltCallback+0x144>
 80013b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b6f      	cmp	r3, #111	@ 0x6f
 80013be:	d10a      	bne.n	80013d6 <HAL_UART_RxCpltCallback+0x15a>
					ucParam = ucDigit;
 80013c0:	4b29      	ldr	r3, [pc, #164]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 80013c2:	781a      	ldrb	r2, [r3, #0]
 80013c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001470 <HAL_UART_RxCpltCallback+0x1f4>)
 80013c6:	701a      	strb	r2, [r3, #0]
					ucValueCount = 0;
 80013c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <HAL_UART_RxCpltCallback+0x1f8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
					ucState = _VALUE;
 80013ce:	4b27      	ldr	r3, [pc, #156]	@ (800146c <HAL_UART_RxCpltCallback+0x1f0>)
 80013d0:	2236      	movs	r2, #54	@ 0x36
 80013d2:	701a      	strb	r2, [r3, #0]
					break;
 80013d4:	e041      	b.n	800145a <HAL_UART_RxCpltCallback+0x1de>
					ucState = _IDDLE;
 80013d6:	4b25      	ldr	r3, [pc, #148]	@ (800146c <HAL_UART_RxCpltCallback+0x1f0>)
 80013d8:	2230      	movs	r2, #48	@ 0x30
 80013da:	701a      	strb	r2, [r3, #0]
					break;
 80013dc:	e03d      	b.n	800145a <HAL_UART_RxCpltCallback+0x1de>
					if (';' == ucDigit){
 80013de:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b3b      	cmp	r3, #59	@ 0x3b
 80013e4:	d104      	bne.n	80013f0 <HAL_UART_RxCpltCallback+0x174>
						vCommStateMachineReturnParam(ucParam);
 80013e6:	4b22      	ldr	r3, [pc, #136]	@ (8001470 <HAL_UART_RxCpltCallback+0x1f4>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f846 	bl	800147c <vCommStateMachineReturnParam>
					ucState = _IDDLE;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <HAL_UART_RxCpltCallback+0x1f0>)
 80013f2:	2230      	movs	r2, #48	@ 0x30
 80013f4:	701a      	strb	r2, [r3, #0]
					break;
 80013f6:	e030      	b.n	800145a <HAL_UART_RxCpltCallback+0x1de>
					if ((ucDigit >= '0' && ucDigit <= '9') || ',' == ucDigit){
 80013f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80013fe:	d903      	bls.n	8001408 <HAL_UART_RxCpltCallback+0x18c>
 8001400:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b39      	cmp	r3, #57	@ 0x39
 8001406:	d903      	bls.n	8001410 <HAL_UART_RxCpltCallback+0x194>
 8001408:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b2c      	cmp	r3, #44	@ 0x2c
 800140e:	d10f      	bne.n	8001430 <HAL_UART_RxCpltCallback+0x1b4>
						if (ucValueCount < MAX_VALUE_LENGTH){
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <HAL_UART_RxCpltCallback+0x1f8>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b06      	cmp	r3, #6
 8001416:	d81f      	bhi.n	8001458 <HAL_UART_RxCpltCallback+0x1dc>
							ucValue[ucValueCount++] = ucDigit;
 8001418:	4b16      	ldr	r3, [pc, #88]	@ (8001474 <HAL_UART_RxCpltCallback+0x1f8>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	b2d1      	uxtb	r1, r2
 8001420:	4a14      	ldr	r2, [pc, #80]	@ (8001474 <HAL_UART_RxCpltCallback+0x1f8>)
 8001422:	7011      	strb	r1, [r2, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 8001428:	7819      	ldrb	r1, [r3, #0]
 800142a:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <HAL_UART_RxCpltCallback+0x1fc>)
 800142c:	5499      	strb	r1, [r3, r2]
						if (ucValueCount < MAX_VALUE_LENGTH){
 800142e:	e013      	b.n	8001458 <HAL_UART_RxCpltCallback+0x1dc>
						if (';' == ucDigit){
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <HAL_UART_RxCpltCallback+0x1ec>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b3b      	cmp	r3, #59	@ 0x3b
 8001436:	d10b      	bne.n	8001450 <HAL_UART_RxCpltCallback+0x1d4>
							ucValue[ucValueCount] = '\0';
 8001438:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <HAL_UART_RxCpltCallback+0x1f8>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <HAL_UART_RxCpltCallback+0x1fc>)
 8001440:	2100      	movs	r1, #0
 8001442:	5499      	strb	r1, [r3, r2]
							vCommStateMachineSetParam(ucParam, &ucValue);
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <HAL_UART_RxCpltCallback+0x1f4>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	490b      	ldr	r1, [pc, #44]	@ (8001478 <HAL_UART_RxCpltCallback+0x1fc>)
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f948 	bl	80016e0 <vCommStateMachineSetParam>
						ucState = _IDDLE;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_UART_RxCpltCallback+0x1f0>)
 8001452:	2230      	movs	r2, #48	@ 0x30
 8001454:	701a      	strb	r2, [r3, #0]
					break;
 8001456:	e7ff      	b.n	8001458 <HAL_UART_RxCpltCallback+0x1dc>
 8001458:	bf00      	nop
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000238 	.word	0x20000238
 8001468:	20000235 	.word	0x20000235
 800146c:	20000000 	.word	0x20000000
 8001470:	2000023c 	.word	0x2000023c
 8001474:	20000234 	.word	0x20000234
 8001478:	2000022c 	.word	0x2000022c

0800147c <vCommStateMachineReturnParam>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	Returns the parameter indicated by the ucParam variable
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucParam
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineReturnParam(unsigned char ucParam){
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	unsigned char ucValue[MAX_VALUE_LENGTH];
	char * pMessage;
	//caso seja carro lider
	switch (ucParam){
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	3b61      	subs	r3, #97	@ 0x61
 800148a:	2b15      	cmp	r3, #21
 800148c:	f200 810c 	bhi.w	80016a8 <vCommStateMachineReturnParam+0x22c>
 8001490:	a201      	add	r2, pc, #4	@ (adr r2, 8001498 <vCommStateMachineReturnParam+0x1c>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	08001549 	.word	0x08001549
 800149c:	08001575 	.word	0x08001575
 80014a0:	080015a1 	.word	0x080015a1
 80014a4:	080015cd 	.word	0x080015cd
 80014a8:	080015f9 	.word	0x080015f9
 80014ac:	08001625 	.word	0x08001625
 80014b0:	080016a9 	.word	0x080016a9
 80014b4:	080016a9 	.word	0x080016a9
 80014b8:	080016a9 	.word	0x080016a9
 80014bc:	080016a9 	.word	0x080016a9
 80014c0:	080016a9 	.word	0x080016a9
 80014c4:	080014f1 	.word	0x080014f1
 80014c8:	080016a9 	.word	0x080016a9
 80014cc:	080016a9 	.word	0x080016a9
 80014d0:	0800167d 	.word	0x0800167d
 80014d4:	080016a9 	.word	0x080016a9
 80014d8:	080016a9 	.word	0x080016a9
 80014dc:	0800151d 	.word	0x0800151d
 80014e0:	080016a9 	.word	0x080016a9
 80014e4:	080016a9 	.word	0x080016a9
 80014e8:	080016a9 	.word	0x080016a9
 80014ec:	08001651 	.word	0x08001651
		case 'l': //left speed
			pMessage = pCommunicationFloatToString(fLeftSpeed, 2);
 80014f0:	4b6f      	ldr	r3, [pc, #444]	@ (80016b0 <vCommStateMachineReturnParam+0x234>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	2002      	movs	r0, #2
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f000 fa64 	bl	80019c8 <pCommunicationFloatToString>
 8001500:	6178      	str	r0, [r7, #20]
			vCommStateMachineSendMessage(pV2VUART, pMessage);
 8001502:	4b6c      	ldr	r3, [pc, #432]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6979      	ldr	r1, [r7, #20]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fa01 	bl	8001910 <vCommStateMachineSendMessage>
			vCommStateMachineSendMessage(pV2VUART, ";");
 800150e:	4b69      	ldr	r3, [pc, #420]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4969      	ldr	r1, [pc, #420]	@ (80016b8 <vCommStateMachineReturnParam+0x23c>)
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f9fb 	bl	8001910 <vCommStateMachineSendMessage>
			break;
 800151a:	e0c5      	b.n	80016a8 <vCommStateMachineReturnParam+0x22c>
		case 'r': //right speed
			pMessage = pCommunicationFloatToString(fRightSpeed, 2);
 800151c:	4b67      	ldr	r3, [pc, #412]	@ (80016bc <vCommStateMachineReturnParam+0x240>)
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	2002      	movs	r0, #2
 8001524:	eeb0 0a67 	vmov.f32	s0, s15
 8001528:	f000 fa4e 	bl	80019c8 <pCommunicationFloatToString>
 800152c:	6178      	str	r0, [r7, #20]
			vCommStateMachineSendMessage(pV2VUART, pMessage);
 800152e:	4b61      	ldr	r3, [pc, #388]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6979      	ldr	r1, [r7, #20]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f9eb 	bl	8001910 <vCommStateMachineSendMessage>
			vCommStateMachineSendMessage(pV2VUART, ";");
 800153a:	4b5e      	ldr	r3, [pc, #376]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	495e      	ldr	r1, [pc, #376]	@ (80016b8 <vCommStateMachineReturnParam+0x23c>)
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f9e5 	bl	8001910 <vCommStateMachineSendMessage>
			break;
 8001546:	e0af      	b.n	80016a8 <vCommStateMachineReturnParam+0x22c>
		case 'a': //kp left
			pMessage = pCommunicationFloatToString(fLeftMotorKp, 4);
 8001548:	4b5d      	ldr	r3, [pc, #372]	@ (80016c0 <vCommStateMachineReturnParam+0x244>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	2004      	movs	r0, #4
 8001550:	eeb0 0a67 	vmov.f32	s0, s15
 8001554:	f000 fa38 	bl	80019c8 <pCommunicationFloatToString>
 8001558:	6178      	str	r0, [r7, #20]
			vCommStateMachineSendMessage(pV2VUART, pMessage);
 800155a:	4b56      	ldr	r3, [pc, #344]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6979      	ldr	r1, [r7, #20]
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f9d5 	bl	8001910 <vCommStateMachineSendMessage>
			vCommStateMachineSendMessage(pV2VUART, ";");
 8001566:	4b53      	ldr	r3, [pc, #332]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4953      	ldr	r1, [pc, #332]	@ (80016b8 <vCommStateMachineReturnParam+0x23c>)
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f9cf 	bl	8001910 <vCommStateMachineSendMessage>


			break;
 8001572:	e099      	b.n	80016a8 <vCommStateMachineReturnParam+0x22c>
		case 'b': //ki left
			pMessage = pCommunicationFloatToString(fLeftMotorKi, 4);
 8001574:	4b53      	ldr	r3, [pc, #332]	@ (80016c4 <vCommStateMachineReturnParam+0x248>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	2004      	movs	r0, #4
 800157c:	eeb0 0a67 	vmov.f32	s0, s15
 8001580:	f000 fa22 	bl	80019c8 <pCommunicationFloatToString>
 8001584:	6178      	str	r0, [r7, #20]
			vCommStateMachineSendMessage(pV2VUART, pMessage);
 8001586:	4b4b      	ldr	r3, [pc, #300]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6979      	ldr	r1, [r7, #20]
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f9bf 	bl	8001910 <vCommStateMachineSendMessage>
			vCommStateMachineSendMessage(pV2VUART, ";");
 8001592:	4b48      	ldr	r3, [pc, #288]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4948      	ldr	r1, [pc, #288]	@ (80016b8 <vCommStateMachineReturnParam+0x23c>)
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f9b9 	bl	8001910 <vCommStateMachineSendMessage>

			break;
 800159e:	e083      	b.n	80016a8 <vCommStateMachineReturnParam+0x22c>
		case 'c': //kp right
			pMessage = pCommunicationFloatToString(fRightMotorKp, 4);
 80015a0:	4b49      	ldr	r3, [pc, #292]	@ (80016c8 <vCommStateMachineReturnParam+0x24c>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	2004      	movs	r0, #4
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	f000 fa0c 	bl	80019c8 <pCommunicationFloatToString>
 80015b0:	6178      	str	r0, [r7, #20]
			vCommStateMachineSendMessage(pV2VUART, pMessage);
 80015b2:	4b40      	ldr	r3, [pc, #256]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6979      	ldr	r1, [r7, #20]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f9a9 	bl	8001910 <vCommStateMachineSendMessage>
			vCommStateMachineSendMessage(pV2VUART, ";");
 80015be:	4b3d      	ldr	r3, [pc, #244]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	493d      	ldr	r1, [pc, #244]	@ (80016b8 <vCommStateMachineReturnParam+0x23c>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f9a3 	bl	8001910 <vCommStateMachineSendMessage>
			break;
 80015ca:	e06d      	b.n	80016a8 <vCommStateMachineReturnParam+0x22c>
		case 'd': //ki left
			pMessage = pCommunicationFloatToString(fRightMotorKi, 4);
 80015cc:	4b3f      	ldr	r3, [pc, #252]	@ (80016cc <vCommStateMachineReturnParam+0x250>)
 80015ce:	edd3 7a00 	vldr	s15, [r3]
 80015d2:	2004      	movs	r0, #4
 80015d4:	eeb0 0a67 	vmov.f32	s0, s15
 80015d8:	f000 f9f6 	bl	80019c8 <pCommunicationFloatToString>
 80015dc:	6178      	str	r0, [r7, #20]
			vCommStateMachineSendMessage(pV2VUART, pMessage);
 80015de:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6979      	ldr	r1, [r7, #20]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 f993 	bl	8001910 <vCommStateMachineSendMessage>
			vCommStateMachineSendMessage(pV2VUART, ";");
 80015ea:	4b32      	ldr	r3, [pc, #200]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4932      	ldr	r1, [pc, #200]	@ (80016b8 <vCommStateMachineReturnParam+0x23c>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 f98d 	bl	8001910 <vCommStateMachineSendMessage>
			break;
 80015f6:	e057      	b.n	80016a8 <vCommStateMachineReturnParam+0x22c>
		case 'e': //setpoint left
			pMessage = pCommunicationFloatToString(fSetPoint_left, 2);
 80015f8:	4b35      	ldr	r3, [pc, #212]	@ (80016d0 <vCommStateMachineReturnParam+0x254>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	2002      	movs	r0, #2
 8001600:	eeb0 0a67 	vmov.f32	s0, s15
 8001604:	f000 f9e0 	bl	80019c8 <pCommunicationFloatToString>
 8001608:	6178      	str	r0, [r7, #20]
			vCommStateMachineSendMessage(pV2VUART, pMessage);
 800160a:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6979      	ldr	r1, [r7, #20]
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f97d 	bl	8001910 <vCommStateMachineSendMessage>
			vCommStateMachineSendMessage(pV2VUART, ";");
 8001616:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4927      	ldr	r1, [pc, #156]	@ (80016b8 <vCommStateMachineReturnParam+0x23c>)
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f977 	bl	8001910 <vCommStateMachineSendMessage>
			break;
 8001622:	e041      	b.n	80016a8 <vCommStateMachineReturnParam+0x22c>
		case 'f': //setpoint right
			pMessage = pCommunicationFloatToString(fSetPoint_right, 2);
 8001624:	4b2b      	ldr	r3, [pc, #172]	@ (80016d4 <vCommStateMachineReturnParam+0x258>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	2002      	movs	r0, #2
 800162c:	eeb0 0a67 	vmov.f32	s0, s15
 8001630:	f000 f9ca 	bl	80019c8 <pCommunicationFloatToString>
 8001634:	6178      	str	r0, [r7, #20]
			vCommStateMachineSendMessage(pV2VUART, pMessage);
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6979      	ldr	r1, [r7, #20]
 800163c:	4618      	mov	r0, r3
 800163e:	f000 f967 	bl	8001910 <vCommStateMachineSendMessage>
			vCommStateMachineSendMessage(pV2VUART, ";");
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	491c      	ldr	r1, [pc, #112]	@ (80016b8 <vCommStateMachineReturnParam+0x23c>)
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f961 	bl	8001910 <vCommStateMachineSendMessage>
			break;
 800164e:	e02b      	b.n	80016a8 <vCommStateMachineReturnParam+0x22c>
		case 'v': //fVMax
			pMessage = pCommunicationFloatToString(fVMax, 2);
 8001650:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <vCommStateMachineReturnParam+0x25c>)
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	2002      	movs	r0, #2
 8001658:	eeb0 0a67 	vmov.f32	s0, s15
 800165c:	f000 f9b4 	bl	80019c8 <pCommunicationFloatToString>
 8001660:	6178      	str	r0, [r7, #20]
			vCommStateMachineSendMessage(pV2VUART, pMessage);
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6979      	ldr	r1, [r7, #20]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 f951 	bl	8001910 <vCommStateMachineSendMessage>
			vCommStateMachineSendMessage(pV2VUART, ";");
 800166e:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4911      	ldr	r1, [pc, #68]	@ (80016b8 <vCommStateMachineReturnParam+0x23c>)
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f94b 	bl	8001910 <vCommStateMachineSendMessage>
			break;
 800167a:	e015      	b.n	80016a8 <vCommStateMachineReturnParam+0x22c>
        case 'o': //operation
        	pMessage=pCommunicationFloatToString(fOperation,0);
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <vCommStateMachineReturnParam+0x260>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	2000      	movs	r0, #0
 8001684:	eeb0 0a67 	vmov.f32	s0, s15
 8001688:	f000 f99e 	bl	80019c8 <pCommunicationFloatToString>
 800168c:	6178      	str	r0, [r7, #20]
			vCommStateMachineSendMessage(pV2VUART, pMessage);
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6979      	ldr	r1, [r7, #20]
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f93b 	bl	8001910 <vCommStateMachineSendMessage>
			vCommStateMachineSendMessage(pV2VUART, ";");
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <vCommStateMachineReturnParam+0x238>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4906      	ldr	r1, [pc, #24]	@ (80016b8 <vCommStateMachineReturnParam+0x23c>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f935 	bl	8001910 <vCommStateMachineSendMessage>
			break;
 80016a6:	bf00      	nop
	}
}
 80016a8:	bf00      	nop
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200003f8 	.word	0x200003f8
 80016b4:	20000238 	.word	0x20000238
 80016b8:	08010870 	.word	0x08010870
 80016bc:	200003fc 	.word	0x200003fc
 80016c0:	20000024 	.word	0x20000024
 80016c4:	20000028 	.word	0x20000028
 80016c8:	2000002c 	.word	0x2000002c
 80016cc:	20000030 	.word	0x20000030
 80016d0:	20000b1c 	.word	0x20000b1c
 80016d4:	20000b20 	.word	0x20000b20
 80016d8:	20000034 	.word	0x20000034
 80016dc:	20000b2c 	.word	0x20000b2c

080016e0 <vCommStateMachineSetParam>:
//	 Description	:	set the parameter indicated by the ucParam by ucValue
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucParam
//		                ucValue
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineSetParam(unsigned char ucParam, unsigned char * pValue){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
	float fValue;
	char cAux;
	switch (ucParam){
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	3b61      	subs	r3, #97	@ 0x61
 80016f0:	2b15      	cmp	r3, #21
 80016f2:	f200 80bd 	bhi.w	8001870 <vCommStateMachineSetParam+0x190>
 80016f6:	a201      	add	r2, pc, #4	@ (adr r2, 80016fc <vCommStateMachineSetParam+0x1c>)
 80016f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fc:	08001755 	.word	0x08001755
 8001700:	08001767 	.word	0x08001767
 8001704:	08001779 	.word	0x08001779
 8001708:	0800178b 	.word	0x0800178b
 800170c:	0800179d 	.word	0x0800179d
 8001710:	080017d3 	.word	0x080017d3
 8001714:	08001871 	.word	0x08001871
 8001718:	08001871 	.word	0x08001871
 800171c:	08001871 	.word	0x08001871
 8001720:	08001871 	.word	0x08001871
 8001724:	08001871 	.word	0x08001871
 8001728:	08001871 	.word	0x08001871
 800172c:	08001871 	.word	0x08001871
 8001730:	08001871 	.word	0x08001871
 8001734:	0800183f 	.word	0x0800183f
 8001738:	08001871 	.word	0x08001871
 800173c:	08001871 	.word	0x08001871
 8001740:	08001871 	.word	0x08001871
 8001744:	08001871 	.word	0x08001871
 8001748:	08001871 	.word	0x08001871
 800174c:	08001871 	.word	0x08001871
 8001750:	08001809 	.word	0x08001809
		case 'a': //left kp
			fLeftMotorKp = fCommStateMachineStringToFloat(pValue);
 8001754:	6838      	ldr	r0, [r7, #0]
 8001756:	f000 f8a1 	bl	800189c <fCommStateMachineStringToFloat>
 800175a:	eef0 7a40 	vmov.f32	s15, s0
 800175e:	4b46      	ldr	r3, [pc, #280]	@ (8001878 <vCommStateMachineSetParam+0x198>)
 8001760:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001764:	e084      	b.n	8001870 <vCommStateMachineSetParam+0x190>
		case 'b': //left ki
			fLeftMotorKi = fCommStateMachineStringToFloat(pValue);
 8001766:	6838      	ldr	r0, [r7, #0]
 8001768:	f000 f898 	bl	800189c <fCommStateMachineStringToFloat>
 800176c:	eef0 7a40 	vmov.f32	s15, s0
 8001770:	4b42      	ldr	r3, [pc, #264]	@ (800187c <vCommStateMachineSetParam+0x19c>)
 8001772:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001776:	e07b      	b.n	8001870 <vCommStateMachineSetParam+0x190>
		case 'c': //right kp
			fRightMotorKp = fCommStateMachineStringToFloat(pValue);
 8001778:	6838      	ldr	r0, [r7, #0]
 800177a:	f000 f88f 	bl	800189c <fCommStateMachineStringToFloat>
 800177e:	eef0 7a40 	vmov.f32	s15, s0
 8001782:	4b3f      	ldr	r3, [pc, #252]	@ (8001880 <vCommStateMachineSetParam+0x1a0>)
 8001784:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001788:	e072      	b.n	8001870 <vCommStateMachineSetParam+0x190>
		case 'd': //left ki
			fRightMotorKi=fCommStateMachineStringToFloat(pValue);
 800178a:	6838      	ldr	r0, [r7, #0]
 800178c:	f000 f886 	bl	800189c <fCommStateMachineStringToFloat>
 8001790:	eef0 7a40 	vmov.f32	s15, s0
 8001794:	4b3b      	ldr	r3, [pc, #236]	@ (8001884 <vCommStateMachineSetParam+0x1a4>)
 8001796:	edc3 7a00 	vstr	s15, [r3]
			break;
 800179a:	e069      	b.n	8001870 <vCommStateMachineSetParam+0x190>
		case 'e': //set left
			fValue = fCommStateMachineStringToFloat(pValue);
 800179c:	6838      	ldr	r0, [r7, #0]
 800179e:	f000 f87d 	bl	800189c <fCommStateMachineStringToFloat>
 80017a2:	ed87 0a03 	vstr	s0, [r7, #12]
			if (fValue >= 0 && fValue<= 700){
 80017a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b2:	da00      	bge.n	80017b6 <vCommStateMachineSetParam+0xd6>
				fSetPoint_left=fValue;
			}
			break;
 80017b4:	e05c      	b.n	8001870 <vCommStateMachineSetParam+0x190>
			if (fValue >= 0 && fValue<= 700){
 80017b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ba:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001888 <vCommStateMachineSetParam+0x1a8>
 80017be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c6:	d900      	bls.n	80017ca <vCommStateMachineSetParam+0xea>
			break;
 80017c8:	e052      	b.n	8001870 <vCommStateMachineSetParam+0x190>
				fSetPoint_left=fValue;
 80017ca:	4a30      	ldr	r2, [pc, #192]	@ (800188c <vCommStateMachineSetParam+0x1ac>)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6013      	str	r3, [r2, #0]
			break;
 80017d0:	e04e      	b.n	8001870 <vCommStateMachineSetParam+0x190>
		case 'f': //set right
			fValue = fCommStateMachineStringToFloat(pValue);
 80017d2:	6838      	ldr	r0, [r7, #0]
 80017d4:	f000 f862 	bl	800189c <fCommStateMachineStringToFloat>
 80017d8:	ed87 0a03 	vstr	s0, [r7, #12]
			if (fValue >= 0 && fValue<= 700){
 80017dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e8:	da00      	bge.n	80017ec <vCommStateMachineSetParam+0x10c>
				fSetPoint_right=fValue;
			}
			break;
 80017ea:	e041      	b.n	8001870 <vCommStateMachineSetParam+0x190>
			if (fValue >= 0 && fValue<= 700){
 80017ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f0:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001888 <vCommStateMachineSetParam+0x1a8>
 80017f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fc:	d900      	bls.n	8001800 <vCommStateMachineSetParam+0x120>
			break;
 80017fe:	e037      	b.n	8001870 <vCommStateMachineSetParam+0x190>
				fSetPoint_right=fValue;
 8001800:	4a23      	ldr	r2, [pc, #140]	@ (8001890 <vCommStateMachineSetParam+0x1b0>)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6013      	str	r3, [r2, #0]
			break;
 8001806:	e033      	b.n	8001870 <vCommStateMachineSetParam+0x190>
		case 'v': //set vMax
			fValue = fCommStateMachineStringToFloat(pValue);
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f000 f847 	bl	800189c <fCommStateMachineStringToFloat>
 800180e:	ed87 0a03 	vstr	s0, [r7, #12]
			if (fValue >= 0 && fValue<= 700){
 8001812:	edd7 7a03 	vldr	s15, [r7, #12]
 8001816:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181e:	da00      	bge.n	8001822 <vCommStateMachineSetParam+0x142>
				fVMax=fValue;
			}
			break;
 8001820:	e026      	b.n	8001870 <vCommStateMachineSetParam+0x190>
			if (fValue >= 0 && fValue<= 700){
 8001822:	edd7 7a03 	vldr	s15, [r7, #12]
 8001826:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001888 <vCommStateMachineSetParam+0x1a8>
 800182a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001832:	d900      	bls.n	8001836 <vCommStateMachineSetParam+0x156>
			break;
 8001834:	e01c      	b.n	8001870 <vCommStateMachineSetParam+0x190>
				fVMax=fValue;
 8001836:	4a17      	ldr	r2, [pc, #92]	@ (8001894 <vCommStateMachineSetParam+0x1b4>)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6013      	str	r3, [r2, #0]
			break;
 800183c:	e018      	b.n	8001870 <vCommStateMachineSetParam+0x190>
        case 'o': //operation
			fValue = fCommStateMachineStringToFloat(pValue);
 800183e:	6838      	ldr	r0, [r7, #0]
 8001840:	f000 f82c 	bl	800189c <fCommStateMachineStringToFloat>
 8001844:	ed87 0a03 	vstr	s0, [r7, #12]
			if (fValue == 1 || fValue ==0)
 8001848:	edd7 7a03 	vldr	s15, [r7, #12]
 800184c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001850:	eef4 7a47 	vcmp.f32	s15, s14
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	d006      	beq.n	8001868 <vCommStateMachineSetParam+0x188>
 800185a:	edd7 7a03 	vldr	s15, [r7, #12]
 800185e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001866:	d102      	bne.n	800186e <vCommStateMachineSetParam+0x18e>
				fOperation = fValue;
 8001868:	4a0b      	ldr	r2, [pc, #44]	@ (8001898 <vCommStateMachineSetParam+0x1b8>)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6013      	str	r3, [r2, #0]
			break;
 800186e:	bf00      	nop
	}
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000024 	.word	0x20000024
 800187c:	20000028 	.word	0x20000028
 8001880:	2000002c 	.word	0x2000002c
 8001884:	20000030 	.word	0x20000030
 8001888:	442f0000 	.word	0x442f0000
 800188c:	20000b1c 	.word	0x20000b1c
 8001890:	20000b20 	.word	0x20000b20
 8001894:	20000034 	.word	0x20000034
 8001898:	20000b2c 	.word	0x20000b2c

0800189c <fCommStateMachineStringToFloat>:
//	 Description	:	Turns Strings to float using atof functon and set a "." instead a ","
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	unsigned char * ucInputNumber
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//float fCommunicationStateMachineStringToFloat(unsigned char * ucValue){
float fCommStateMachineStringToFloat(){
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
	float fInputNumber=0;
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	603b      	str	r3, [r7, #0]
	int iPos=0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
	while (iPos >= 0){
 80018ac:	e017      	b.n	80018de <fCommStateMachineStringToFloat+0x42>
		if ('\0'!=ucValue[iPos]){
 80018ae:	4a17      	ldr	r2, [pc, #92]	@ (800190c <fCommStateMachineStringToFloat+0x70>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00e      	beq.n	80018d8 <fCommStateMachineStringToFloat+0x3c>
			if (ucValue[iPos] == ','){
 80018ba:	4a14      	ldr	r2, [pc, #80]	@ (800190c <fCommStateMachineStringToFloat+0x70>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b2c      	cmp	r3, #44	@ 0x2c
 80018c4:	d104      	bne.n	80018d0 <fCommStateMachineStringToFloat+0x34>
				ucValue[iPos] = '.';
 80018c6:	4a11      	ldr	r2, [pc, #68]	@ (800190c <fCommStateMachineStringToFloat+0x70>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	222e      	movs	r2, #46	@ 0x2e
 80018ce:	701a      	strb	r2, [r3, #0]
			}
			iPos++;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3301      	adds	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	e002      	b.n	80018de <fCommStateMachineStringToFloat+0x42>
		}
		else{
			iPos = -1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	607b      	str	r3, [r7, #4]
	while (iPos >= 0){
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dae4      	bge.n	80018ae <fCommStateMachineStringToFloat+0x12>
		}
	}
	fInputNumber = atof (ucValue);
 80018e4:	4809      	ldr	r0, [pc, #36]	@ (800190c <fCommStateMachineStringToFloat+0x70>)
 80018e6:	f00a ffff 	bl	800c8e8 <atof>
 80018ea:	ec53 2b10 	vmov	r2, r3, d0
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff f9a1 	bl	8000c38 <__aeabi_d2f>
 80018f6:	4603      	mov	r3, r0
 80018f8:	603b      	str	r3, [r7, #0]
	return fInputNumber;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	ee07 3a90 	vmov	s15, r3
}
 8001900:	eeb0 0a67 	vmov.f32	s0, s15
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000022c 	.word	0x2000022c

08001910 <vCommStateMachineSendMessage>:
//	 Description	:	Send message to putty from HAL_UART_Transmit
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	UART_HandleTypeDef * huart
//		                unsigned char* ucMessage
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineSendMessage (UART_HandleTypeDef * huart, unsigned char* ucMessage){
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	int iPos = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
	unsigned char a;
	while(iPos >= 0 && iPos < _MAX_NUMBER_OF_CHARS){
 800191e:	e02b      	b.n	8001978 <vCommStateMachineSendMessage+0x68>
		a = ucMessage[iPos];
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	4413      	add	r3, r2
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	72fb      	strb	r3, [r7, #11]
		if(ucMessage[iPos] =='\000'){
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	4413      	add	r3, r2
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <vCommStateMachineSendMessage+0x2e>
			iPos = -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e01c      	b.n	8001978 <vCommStateMachineSendMessage+0x68>
		}
		else if(ucMessage[iPos] =='\n'){
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b0a      	cmp	r3, #10
 8001948:	d10b      	bne.n	8001962 <vCommStateMachineSendMessage+0x52>
			HAL_UART_Transmit(huart, &ucMessage[iPos], 1, 100);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	18d1      	adds	r1, r2, r3
 8001950:	2364      	movs	r3, #100	@ 0x64
 8001952:	2201      	movs	r2, #1
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f008 fec9 	bl	800a6ec <HAL_UART_Transmit>
			iPos = -1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	e00a      	b.n	8001978 <vCommStateMachineSendMessage+0x68>
		}
		else{
			HAL_UART_Transmit(huart, &ucMessage[iPos], 1, 100);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	18d1      	adds	r1, r2, r3
 8001968:	2364      	movs	r3, #100	@ 0x64
 800196a:	2201      	movs	r2, #1
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f008 febd 	bl	800a6ec <HAL_UART_Transmit>
			iPos ++;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3301      	adds	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
	while(iPos >= 0 && iPos < _MAX_NUMBER_OF_CHARS){
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db02      	blt.n	8001984 <vCommStateMachineSendMessage+0x74>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b63      	cmp	r3, #99	@ 0x63
 8001982:	ddcd      	ble.n	8001920 <vCommStateMachineSendMessage+0x10>
		}
	}
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <vCommunicationInit>:
//
// INPUT PARAMS: n/a
//
// OUTPUT PARAMS: n/a
// ********************************************** //
void vCommunicationInit() {
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0

	for (int i = 0; i < 10; i++)
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	e007      	b.n	80019a8 <vCommunicationInit+0x1c>
		cNumeroString[i] = 0;
 8001998:	4a09      	ldr	r2, [pc, #36]	@ (80019c0 <vCommunicationInit+0x34>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3301      	adds	r3, #1
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b09      	cmp	r3, #9
 80019ac:	ddf4      	ble.n	8001998 <vCommunicationInit+0xc>

	ucInputChar = 0;
 80019ae:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <vCommunicationInit+0x38>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	20000240 	.word	0x20000240
 80019c4:	2000023d 	.word	0x2000023d

080019c8 <pCommunicationFloatToString>:
// INPUT PARAMS: num - numero a ser convertido
//               nCasasDec - numero de casas decimais a serem consideradas
//
// OUTPUT PARAMS: char* - string contendo o num
// ********************************************** //
char* pCommunicationFloatToString(float num, int nCasasDec) { // n casas decimais // para numeros < 1
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	@ 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80019d2:	6038      	str	r0, [r7, #0]
	float fAux = num;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
	// Utilizado na quantidade de casas que a string vai ter
	int iN = nCasasDec;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	623b      	str	r3, [r7, #32]
	int iPos = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
	// "mapping" para facilitar na adicao de char na string
	char pNumberToChar[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 80019e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001b20 <pCommunicationFloatToString+0x158>)
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80019e8:	c303      	stmia	r3!, {r0, r1}
 80019ea:	801a      	strh	r2, [r3, #0]

	// Limpa a string global
	for (int i = 0; i < 100; i++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	e007      	b.n	8001a02 <pCommunicationFloatToString+0x3a>
		pOutputString[i] = 0;
 80019f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001b24 <pCommunicationFloatToString+0x15c>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	4413      	add	r3, r2
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	3301      	adds	r3, #1
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	2b63      	cmp	r3, #99	@ 0x63
 8001a06:	ddf4      	ble.n	80019f2 <pCommunicationFloatToString+0x2a>

	// Caso float negativo, adiciona '-' na string
	if (fAux < 0) {
 8001a08:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d50d      	bpl.n	8001a32 <pCommunicationFloatToString+0x6a>
		fAux = fAux*-1;
 8001a16:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a1a:	eef1 7a67 	vneg.f32	s15, s15
 8001a1e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		pOutputString[iPos] = '-';
 8001a22:	4a40      	ldr	r2, [pc, #256]	@ (8001b24 <pCommunicationFloatToString+0x15c>)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	4413      	add	r3, r2
 8001a28:	222d      	movs	r2, #45	@ 0x2d
 8001a2a:	701a      	strb	r2, [r3, #0]
		iPos++;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	61fb      	str	r3, [r7, #28]
	}

	// Caso menor que 1, adiciona 0 na string
	if (fAux < 1) {
 8001a32:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	d507      	bpl.n	8001a54 <pCommunicationFloatToString+0x8c>
		pOutputString[iPos] = '0';
 8001a44:	4a37      	ldr	r2, [pc, #220]	@ (8001b24 <pCommunicationFloatToString+0x15c>)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	4413      	add	r3, r2
 8001a4a:	2230      	movs	r2, #48	@ 0x30
 8001a4c:	701a      	strb	r2, [r3, #0]
		iPos++;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
	}

	// Move a virgula do numero ate que fique menor que 1
	while (fAux >= 1) {
 8001a54:	e00a      	b.n	8001a6c <pCommunicationFloatToString+0xa4>
		fAux = fAux/10;
 8001a56:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001a5a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001a5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a62:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		iN++;
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	623b      	str	r3, [r7, #32]
	while (fAux >= 1) {
 8001a6c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7c:	daeb      	bge.n	8001a56 <pCommunicationFloatToString+0x8e>
	}

	// Enquanto ainda nao tiver preenchido o numero de casas desejadas
	while (iN > 0) {
 8001a7e:	e040      	b.n	8001b02 <pCommunicationFloatToString+0x13a>
		fAux = fAux*10;
 8001a80:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a84:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a8c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		// Seleciona o numero da enesima posicao
		int iNumber = floor(fmod(fAux, 10));
 8001a90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a92:	f7fe fd81 	bl	8000598 <__aeabi_f2d>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8001b18 <pCommunicationFloatToString+0x150>
 8001a9e:	ec43 2b10 	vmov	d0, r2, r3
 8001aa2:	f00d fd1f 	bl	800f4e4 <fmod>
 8001aa6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aaa:	eef0 7a60 	vmov.f32	s15, s1
 8001aae:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab2:	eef0 0a67 	vmov.f32	s1, s15
 8001ab6:	f00d fdeb 	bl	800f690 <floor>
 8001aba:	ec53 2b10 	vmov	r2, r3, d0
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff f871 	bl	8000ba8 <__aeabi_d2iz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	617b      	str	r3, [r7, #20]
		// Adiciona virgula na posicao correta
		if (iN == nCasasDec) {
 8001aca:	6a3a      	ldr	r2, [r7, #32]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d107      	bne.n	8001ae2 <pCommunicationFloatToString+0x11a>
			pOutputString[iPos] = ',';
 8001ad2:	4a14      	ldr	r2, [pc, #80]	@ (8001b24 <pCommunicationFloatToString+0x15c>)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	222c      	movs	r2, #44	@ 0x2c
 8001ada:	701a      	strb	r2, [r3, #0]
			iPos++;
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	61fb      	str	r3, [r7, #28]
		}

		// Adiciona char igual ao numero, na string de retorno
		pOutputString[iPos] = pNumberToChar[iNumber];
 8001ae2:	f107 0208 	add.w	r2, r7, #8
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	4413      	add	r3, r2
 8001aea:	7819      	ldrb	r1, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <pCommunicationFloatToString+0x15c>)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	4413      	add	r3, r2
 8001af2:	460a      	mov	r2, r1
 8001af4:	701a      	strb	r2, [r3, #0]
		iPos++;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
		iN--;
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	623b      	str	r3, [r7, #32]
	while (iN > 0) {
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	dcbb      	bgt.n	8001a80 <pCommunicationFloatToString+0xb8>
	}

	return &pOutputString;
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <pCommunicationFloatToString+0x15c>)
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3728      	adds	r7, #40	@ 0x28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	f3af 8000 	nop.w
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	40240000 	.word	0x40240000
 8001b20:	08010880 	.word	0x08010880
 8001b24:	2000024c 	.word	0x2000024c

08001b28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b2e:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <MX_DMA_Init+0x60>)
 8001b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b32:	4a15      	ldr	r2, [pc, #84]	@ (8001b88 <MX_DMA_Init+0x60>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b3a:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <MX_DMA_Init+0x60>)
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <MX_DMA_Init+0x60>)
 8001b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <MX_DMA_Init+0x60>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b52:	4b0d      	ldr	r3, [pc, #52]	@ (8001b88 <MX_DMA_Init+0x60>)
 8001b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2105      	movs	r1, #5
 8001b62:	200d      	movs	r0, #13
 8001b64:	f003 f9c7 	bl	8004ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b68:	200d      	movs	r0, #13
 8001b6a:	f003 f9de 	bl	8004f2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2105      	movs	r1, #5
 8001b72:	200e      	movs	r0, #14
 8001b74:	f003 f9bf 	bl	8004ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001b78:	200e      	movs	r0, #14
 8001b7a:	f003 f9d6 	bl	8004f2a <HAL_NVIC_EnableIRQ>

}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000

08001b8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	@ 0x28
 8001b90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8001c90 <MX_GPIO_Init+0x104>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	4a3a      	ldr	r2, [pc, #232]	@ (8001c90 <MX_GPIO_Init+0x104>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bae:	4b38      	ldr	r3, [pc, #224]	@ (8001c90 <MX_GPIO_Init+0x104>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bba:	4b35      	ldr	r3, [pc, #212]	@ (8001c90 <MX_GPIO_Init+0x104>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	4a34      	ldr	r2, [pc, #208]	@ (8001c90 <MX_GPIO_Init+0x104>)
 8001bc0:	f043 0320 	orr.w	r3, r3, #32
 8001bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc6:	4b32      	ldr	r3, [pc, #200]	@ (8001c90 <MX_GPIO_Init+0x104>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c90 <MX_GPIO_Init+0x104>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c90 <MX_GPIO_Init+0x104>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bde:	4b2c      	ldr	r3, [pc, #176]	@ (8001c90 <MX_GPIO_Init+0x104>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <MX_GPIO_Init+0x104>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	4a28      	ldr	r2, [pc, #160]	@ (8001c90 <MX_GPIO_Init+0x104>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf6:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <MX_GPIO_Init+0x104>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Motor_Dir_IN2_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	f44f 6142 	mov.w	r1, #3104	@ 0xc20
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c0c:	f003 fe78 	bl	8005900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Esq_IN3_Pin|Motor_Dir_IN1_Pin|Motor_Esq_IN4_Pin, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	f44f 5194 	mov.w	r1, #4736	@ 0x1280
 8001c16:	481f      	ldr	r0, [pc, #124]	@ (8001c94 <MX_GPIO_Init+0x108>)
 8001c18:	f003 fe72 	bl	8005900 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|BT_Baixo_Pin;
 8001c1c:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8001c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4819      	ldr	r0, [pc, #100]	@ (8001c98 <MX_GPIO_Init+0x10c>)
 8001c34:	f003 fce2 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Motor_Dir_IN2_Pin|RED_LED_Pin;
 8001c38:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8001c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c54:	f003 fcd2 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN3_Pin|Motor_Dir_IN1_Pin|Motor_Esq_IN4_Pin;
 8001c58:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8001c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4808      	ldr	r0, [pc, #32]	@ (8001c94 <MX_GPIO_Init+0x108>)
 8001c72:	f003 fcc3 	bl	80055fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2103      	movs	r1, #3
 8001c7a:	2028      	movs	r0, #40	@ 0x28
 8001c7c:	f003 f93b 	bl	8004ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c80:	2028      	movs	r0, #40	@ 0x28
 8001c82:	f003 f952 	bl	8004f2a <HAL_NVIC_EnableIRQ>

}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	@ 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	48000400 	.word	0x48000400
 8001c98:	48000800 	.word	0x48000800

08001c9c <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <MX_I2C2_Init+0x74>)
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d14 <MX_I2C2_Init+0x78>)
 8001ca4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <MX_I2C2_Init+0x74>)
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d18 <MX_I2C2_Init+0x7c>)
 8001caa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001cac:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <MX_I2C2_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <MX_I2C2_Init+0x74>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <MX_I2C2_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001cbe:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <MX_I2C2_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <MX_I2C2_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <MX_I2C2_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_I2C2_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cd6:	480e      	ldr	r0, [pc, #56]	@ (8001d10 <MX_I2C2_Init+0x74>)
 8001cd8:	f003 fe42 	bl	8005960 <HAL_I2C_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ce2:	f001 fa38 	bl	8003156 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4809      	ldr	r0, [pc, #36]	@ (8001d10 <MX_I2C2_Init+0x74>)
 8001cea:	f005 fc49 	bl	8007580 <HAL_I2CEx_ConfigAnalogFilter>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001cf4:	f001 fa2f 	bl	8003156 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_I2C2_Init+0x74>)
 8001cfc:	f005 fc8b 	bl	8007616 <HAL_I2CEx_ConfigDigitalFilter>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d06:	f001 fa26 	bl	8003156 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200002b0 	.word	0x200002b0
 8001d14:	40005800 	.word	0x40005800
 8001d18:	30a0a7fb 	.word	0x30a0a7fb

08001d1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b0a0      	sub	sp, #128	@ 0x80
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d34:	f107 0318 	add.w	r3, r7, #24
 8001d38:	2254      	movs	r2, #84	@ 0x54
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f00b fcec 	bl	800d71a <memset>
  if(i2cHandle->Instance==I2C2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a5f      	ldr	r2, [pc, #380]	@ (8001ec4 <HAL_I2C_MspInit+0x1a8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	f040 80b6 	bne.w	8001eba <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d4e:	2380      	movs	r3, #128	@ 0x80
 8001d50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d56:	f107 0318 	add.w	r3, r7, #24
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f006 fa8a 	bl	8008274 <HAL_RCCEx_PeriphCLKConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d66:	f001 f9f6 	bl	8003156 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	4b57      	ldr	r3, [pc, #348]	@ (8001ec8 <HAL_I2C_MspInit+0x1ac>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	4a56      	ldr	r2, [pc, #344]	@ (8001ec8 <HAL_I2C_MspInit+0x1ac>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d76:	4b54      	ldr	r3, [pc, #336]	@ (8001ec8 <HAL_I2C_MspInit+0x1ac>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b51      	ldr	r3, [pc, #324]	@ (8001ec8 <HAL_I2C_MspInit+0x1ac>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	4a50      	ldr	r2, [pc, #320]	@ (8001ec8 <HAL_I2C_MspInit+0x1ac>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec8 <HAL_I2C_MspInit+0x1ac>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d9a:	2310      	movs	r3, #16
 8001d9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d9e:	2312      	movs	r3, #18
 8001da0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001daa:	2304      	movs	r3, #4
 8001dac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001db2:	4619      	mov	r1, r3
 8001db4:	4845      	ldr	r0, [pc, #276]	@ (8001ecc <HAL_I2C_MspInit+0x1b0>)
 8001db6:	f003 fc21 	bl	80055fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc0:	2312      	movs	r3, #18
 8001dc2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dda:	f003 fc0f 	bl	80055fc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dde:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec8 <HAL_I2C_MspInit+0x1ac>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	4a39      	ldr	r2, [pc, #228]	@ (8001ec8 <HAL_I2C_MspInit+0x1ac>)
 8001de4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dea:	4b37      	ldr	r3, [pc, #220]	@ (8001ec8 <HAL_I2C_MspInit+0x1ac>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel3;
 8001df6:	4b36      	ldr	r3, [pc, #216]	@ (8001ed0 <HAL_I2C_MspInit+0x1b4>)
 8001df8:	4a36      	ldr	r2, [pc, #216]	@ (8001ed4 <HAL_I2C_MspInit+0x1b8>)
 8001dfa:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001dfc:	4b34      	ldr	r3, [pc, #208]	@ (8001ed0 <HAL_I2C_MspInit+0x1b4>)
 8001dfe:	2212      	movs	r2, #18
 8001e00:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e02:	4b33      	ldr	r3, [pc, #204]	@ (8001ed0 <HAL_I2C_MspInit+0x1b4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e08:	4b31      	ldr	r3, [pc, #196]	@ (8001ed0 <HAL_I2C_MspInit+0x1b4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e0e:	4b30      	ldr	r3, [pc, #192]	@ (8001ed0 <HAL_I2C_MspInit+0x1b4>)
 8001e10:	2280      	movs	r2, #128	@ 0x80
 8001e12:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e14:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed0 <HAL_I2C_MspInit+0x1b4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed0 <HAL_I2C_MspInit+0x1b4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001e20:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed0 <HAL_I2C_MspInit+0x1b4>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e26:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed0 <HAL_I2C_MspInit+0x1b4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001e2c:	4828      	ldr	r0, [pc, #160]	@ (8001ed0 <HAL_I2C_MspInit+0x1b4>)
 8001e2e:	f003 f8a5 	bl	8004f7c <HAL_DMA_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001e38:	f001 f98d 	bl	8003156 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a24      	ldr	r2, [pc, #144]	@ (8001ed0 <HAL_I2C_MspInit+0x1b4>)
 8001e40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e42:	4a23      	ldr	r2, [pc, #140]	@ (8001ed0 <HAL_I2C_MspInit+0x1b4>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8001e48:	4b23      	ldr	r3, [pc, #140]	@ (8001ed8 <HAL_I2C_MspInit+0x1bc>)
 8001e4a:	4a24      	ldr	r2, [pc, #144]	@ (8001edc <HAL_I2C_MspInit+0x1c0>)
 8001e4c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001e4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <HAL_I2C_MspInit+0x1bc>)
 8001e50:	2213      	movs	r2, #19
 8001e52:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e54:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <HAL_I2C_MspInit+0x1bc>)
 8001e56:	2210      	movs	r2, #16
 8001e58:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed8 <HAL_I2C_MspInit+0x1bc>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <HAL_I2C_MspInit+0x1bc>)
 8001e62:	2280      	movs	r2, #128	@ 0x80
 8001e64:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <HAL_I2C_MspInit+0x1bc>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed8 <HAL_I2C_MspInit+0x1bc>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <HAL_I2C_MspInit+0x1bc>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e78:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <HAL_I2C_MspInit+0x1bc>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001e7e:	4816      	ldr	r0, [pc, #88]	@ (8001ed8 <HAL_I2C_MspInit+0x1bc>)
 8001e80:	f003 f87c 	bl	8004f7c <HAL_DMA_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001e8a:	f001 f964 	bl	8003156 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a11      	ldr	r2, [pc, #68]	@ (8001ed8 <HAL_I2C_MspInit+0x1bc>)
 8001e92:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e94:	4a10      	ldr	r2, [pc, #64]	@ (8001ed8 <HAL_I2C_MspInit+0x1bc>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	2021      	movs	r0, #33	@ 0x21
 8001ea0:	f003 f829 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001ea4:	2021      	movs	r0, #33	@ 0x21
 8001ea6:	f003 f840 	bl	8004f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2105      	movs	r1, #5
 8001eae:	2022      	movs	r0, #34	@ 0x22
 8001eb0:	f003 f821 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001eb4:	2022      	movs	r0, #34	@ 0x22
 8001eb6:	f003 f838 	bl	8004f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3780      	adds	r7, #128	@ 0x80
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40005800 	.word	0x40005800
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	20000304 	.word	0x20000304
 8001ed4:	40020030 	.word	0x40020030
 8001ed8:	20000364 	.word	0x20000364
 8001edc:	40020044 	.word	0x40020044

08001ee0 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         0 if success
 */
char lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	4608      	mov	r0, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	70fb      	strb	r3, [r7, #3]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	70bb      	strb	r3, [r7, #2]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	707b      	strb	r3, [r7, #1]

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001efa:	2300      	movs	r3, #0
 8001efc:	733b      	strb	r3, [r7, #12]
    unsigned short usCont;

    lcdParams.hi2c      = hi2c;
 8001efe:	4a53      	ldr	r2, [pc, #332]	@ (800204c <lcdInit+0x16c>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b50      	ldr	r3, [pc, #320]	@ (800204c <lcdInit+0x16c>)
 8001f0c:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8001f0e:	4a4f      	ldr	r2, [pc, #316]	@ (800204c <lcdInit+0x16c>)
 8001f10:	78bb      	ldrb	r3, [r7, #2]
 8001f12:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8001f14:	4a4d      	ldr	r2, [pc, #308]	@ (800204c <lcdInit+0x16c>)
 8001f16:	787b      	ldrb	r3, [r7, #1]
 8001f18:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001f1a:	4b4c      	ldr	r3, [pc, #304]	@ (800204c <lcdInit+0x16c>)
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001f20:	4b4b      	ldr	r3, [pc, #300]	@ (8002050 <lcdInit+0x170>)
 8001f22:	2234      	movs	r2, #52	@ 0x34
 8001f24:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001f26:	4b4a      	ldr	r3, [pc, #296]	@ (8002050 <lcdInit+0x170>)
 8001f28:	781a      	ldrb	r2, [r3, #0]
 8001f2a:	4b49      	ldr	r3, [pc, #292]	@ (8002050 <lcdInit+0x170>)
 8001f2c:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001f2e:	4b48      	ldr	r3, [pc, #288]	@ (8002050 <lcdInit+0x170>)
 8001f30:	2230      	movs	r2, #48	@ 0x30
 8001f32:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8001f34:	2300      	movs	r3, #0
 8001f36:	737b      	strb	r3, [r7, #13]
 8001f38:	e02f      	b.n	8001f9a <lcdInit+0xba>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001f3a:	4b44      	ldr	r3, [pc, #272]	@ (800204c <lcdInit+0x16c>)
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	4b43      	ldr	r3, [pc, #268]	@ (800204c <lcdInit+0x16c>)
 8001f40:	799b      	ldrb	r3, [r3, #6]
 8001f42:	4619      	mov	r1, r3
 8001f44:	2303      	movs	r3, #3
 8001f46:	4a42      	ldr	r2, [pc, #264]	@ (8002050 <lcdInit+0x170>)
 8001f48:	f003 fda6 	bl	8005a98 <HAL_I2C_Master_Transmit_DMA>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <lcdInit+0x76>
            return -1;
 8001f52:	23ff      	movs	r3, #255	@ 0xff
 8001f54:	e076      	b.n	8002044 <lcdInit+0x164>
        }

        usCont = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	81fb      	strh	r3, [r7, #14]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001f5a:	e009      	b.n	8001f70 <lcdInit+0x90>
        	if(usCont++ == LCD_COMM_TIMEOUT)
 8001f5c:	89fb      	ldrh	r3, [r7, #14]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	81fa      	strh	r2, [r7, #14]
 8001f62:	2bc8      	cmp	r3, #200	@ 0xc8
 8001f64:	d101      	bne.n	8001f6a <lcdInit+0x8a>
        		return -1;
 8001f66:	23ff      	movs	r3, #255	@ 0xff
 8001f68:	e06c      	b.n	8002044 <lcdInit+0x164>
        	HAL_Delay(5);
 8001f6a:	2005      	movs	r0, #5
 8001f6c:	f002 fea2 	bl	8004cb4 <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001f70:	4b36      	ldr	r3, [pc, #216]	@ (800204c <lcdInit+0x16c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 ff80 	bl	8005e7a <HAL_I2C_GetState>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	d1ed      	bne.n	8001f5c <lcdInit+0x7c>
        }

        if (i == 2) {
 8001f80:	7b7b      	ldrb	r3, [r7, #13]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d103      	bne.n	8001f8e <lcdInit+0xae>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
        	HAL_Delay(5);
 8001f86:	2005      	movs	r0, #5
 8001f88:	f002 fe94 	bl	8004cb4 <HAL_Delay>
 8001f8c:	e002      	b.n	8001f94 <lcdInit+0xb4>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
        	HAL_Delay(5);
 8001f8e:	2005      	movs	r0, #5
 8001f90:	f002 fe90 	bl	8004cb4 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 8001f94:	7b7b      	ldrb	r3, [r7, #13]
 8001f96:	3301      	adds	r3, #1
 8001f98:	737b      	strb	r3, [r7, #13]
 8001f9a:	7b7b      	ldrb	r3, [r7, #13]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d9cc      	bls.n	8001f3a <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8002050 <lcdInit+0x170>)
 8001fa2:	222c      	movs	r2, #44	@ 0x2c
 8001fa4:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8002050 <lcdInit+0x170>)
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	4b29      	ldr	r3, [pc, #164]	@ (8002050 <lcdInit+0x170>)
 8001fac:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001fae:	4b28      	ldr	r3, [pc, #160]	@ (8002050 <lcdInit+0x170>)
 8001fb0:	2228      	movs	r2, #40	@ 0x28
 8001fb2:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001fb4:	4b25      	ldr	r3, [pc, #148]	@ (800204c <lcdInit+0x16c>)
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	4b24      	ldr	r3, [pc, #144]	@ (800204c <lcdInit+0x16c>)
 8001fba:	799b      	ldrb	r3, [r3, #6]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	4a23      	ldr	r2, [pc, #140]	@ (8002050 <lcdInit+0x170>)
 8001fc2:	f003 fd69 	bl	8005a98 <HAL_I2C_Master_Transmit_DMA>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <lcdInit+0xf0>
        return -1;
 8001fcc:	23ff      	movs	r3, #255	@ 0xff
 8001fce:	e039      	b.n	8002044 <lcdInit+0x164>
    }

    usCont = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001fd4:	e009      	b.n	8001fea <lcdInit+0x10a>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	81fa      	strh	r2, [r7, #14]
 8001fdc:	2bc8      	cmp	r3, #200	@ 0xc8
 8001fde:	d101      	bne.n	8001fe4 <lcdInit+0x104>
    		return -1;
 8001fe0:	23ff      	movs	r3, #255	@ 0xff
 8001fe2:	e02f      	b.n	8002044 <lcdInit+0x164>
    	HAL_Delay(5);
 8001fe4:	2005      	movs	r0, #5
 8001fe6:	f002 fe65 	bl	8004cb4 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001fea:	4b18      	ldr	r3, [pc, #96]	@ (800204c <lcdInit+0x16c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 ff43 	bl	8005e7a <HAL_I2C_GetState>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	d1ed      	bne.n	8001fd6 <lcdInit+0xf6>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001ffa:	7b3b      	ldrb	r3, [r7, #12]
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	b2db      	uxtb	r3, r3
 8002002:	733b      	strb	r3, [r7, #12]

    if (lcdParams.lines > 1) {
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <lcdInit+0x16c>)
 8002006:	791b      	ldrb	r3, [r3, #4]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d904      	bls.n	8002016 <lcdInit+0x136>
        lcdData |= LCD_BIT_2LINE;
 800200c:	7b3b      	ldrb	r3, [r7, #12]
 800200e:	f043 0308 	orr.w	r3, r3, #8
 8002012:	b2db      	uxtb	r3, r3
 8002014:	733b      	strb	r3, [r7, #12]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	4619      	mov	r1, r3
 800201c:	2000      	movs	r0, #0
 800201e:	f000 f945 	bl	80022ac <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8002022:	2101      	movs	r1, #1
 8002024:	2001      	movs	r0, #1
 8002026:	f000 f815 	bl	8002054 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 800202a:	2101      	movs	r1, #1
 800202c:	2007      	movs	r0, #7
 800202e:	f000 f811 	bl	8002054 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8002032:	2101      	movs	r1, #1
 8002034:	2002      	movs	r0, #2
 8002036:	f000 f80d 	bl	8002054 <lcdCommand>
    lcdCursorHome();
 800203a:	2101      	movs	r1, #1
 800203c:	2005      	movs	r0, #5
 800203e:	f000 f809 	bl	8002054 <lcdCommand>

    return 0;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	200003cc 	.word	0x200003cc
 8002050:	200003c4 	.word	0x200003c4

08002054 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          0 if success
 */
char lcdCommand(LCDCommands command, LCDParamsActions action) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	460a      	mov	r2, r1
 800205e:	71fb      	strb	r3, [r7, #7]
 8002060:	4613      	mov	r3, r2
 8002062:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8002068:	79bb      	ldrb	r3, [r7, #6]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d064      	beq.n	8002138 <lcdCommand+0xe4>
 800206e:	2b01      	cmp	r3, #1
 8002070:	f040 80aa 	bne.w	80021c8 <lcdCommand+0x174>
        case LCD_PARAM_SET:
            switch (command) {
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	3b01      	subs	r3, #1
 8002078:	2b07      	cmp	r3, #7
 800207a:	d85a      	bhi.n	8002132 <lcdCommand+0xde>
 800207c:	a201      	add	r2, pc, #4	@ (adr r2, 8002084 <lcdCommand+0x30>)
 800207e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002082:	bf00      	nop
 8002084:	080020a5 	.word	0x080020a5
 8002088:	080020d5 	.word	0x080020d5
 800208c:	080020b5 	.word	0x080020b5
 8002090:	080020c5 	.word	0x080020c5
 8002094:	080020ef 	.word	0x080020ef
 8002098:	08002119 	.word	0x08002119
 800209c:	08002109 	.word	0x08002109
 80020a0:	08002123 	.word	0x08002123
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 80020a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002218 <lcdCommand+0x1c4>)
 80020a6:	7a1b      	ldrb	r3, [r3, #8]
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002218 <lcdCommand+0x1c4>)
 80020b0:	721a      	strb	r2, [r3, #8]
                    break;
 80020b2:	e040      	b.n	8002136 <lcdCommand+0xe2>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 80020b4:	4b58      	ldr	r3, [pc, #352]	@ (8002218 <lcdCommand+0x1c4>)
 80020b6:	7a1b      	ldrb	r3, [r3, #8]
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b56      	ldr	r3, [pc, #344]	@ (8002218 <lcdCommand+0x1c4>)
 80020c0:	721a      	strb	r2, [r3, #8]
                    break;
 80020c2:	e038      	b.n	8002136 <lcdCommand+0xe2>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 80020c4:	4b54      	ldr	r3, [pc, #336]	@ (8002218 <lcdCommand+0x1c4>)
 80020c6:	7a1b      	ldrb	r3, [r3, #8]
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4b52      	ldr	r3, [pc, #328]	@ (8002218 <lcdCommand+0x1c4>)
 80020d0:	721a      	strb	r2, [r3, #8]
                    break;
 80020d2:	e030      	b.n	8002136 <lcdCommand+0xe2>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 80020d8:	f107 030f 	add.w	r3, r7, #15
 80020dc:	4619      	mov	r1, r3
 80020de:	2000      	movs	r0, #0
 80020e0:	f000 f8e4 	bl	80022ac <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(5);
 80020e4:	2005      	movs	r0, #5
 80020e6:	f002 fde5 	bl	8004cb4 <HAL_Delay>
                        return 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e090      	b.n	8002210 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 80020ee:	2302      	movs	r3, #2
 80020f0:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 80020f2:	f107 030f 	add.w	r3, r7, #15
 80020f6:	4619      	mov	r1, r3
 80020f8:	2000      	movs	r0, #0
 80020fa:	f000 f8d7 	bl	80022ac <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(5);
 80020fe:	2005      	movs	r0, #5
 8002100:	f002 fdd8 	bl	8004cb4 <HAL_Delay>
                        return 0;
 8002104:	2300      	movs	r3, #0
 8002106:	e083      	b.n	8002210 <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8002108:	4b43      	ldr	r3, [pc, #268]	@ (8002218 <lcdCommand+0x1c4>)
 800210a:	7a5b      	ldrb	r3, [r3, #9]
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4b41      	ldr	r3, [pc, #260]	@ (8002218 <lcdCommand+0x1c4>)
 8002114:	725a      	strb	r2, [r3, #9]
                    break;
 8002116:	e00e      	b.n	8002136 <lcdCommand+0xe2>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8002118:	4b3f      	ldr	r3, [pc, #252]	@ (8002218 <lcdCommand+0x1c4>)
 800211a:	7a5a      	ldrb	r2, [r3, #9]
 800211c:	4b3e      	ldr	r3, [pc, #248]	@ (8002218 <lcdCommand+0x1c4>)
 800211e:	725a      	strb	r2, [r3, #9]
                    break;
 8002120:	e009      	b.n	8002136 <lcdCommand+0xe2>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8002122:	4b3d      	ldr	r3, [pc, #244]	@ (8002218 <lcdCommand+0x1c4>)
 8002124:	7a5b      	ldrb	r3, [r3, #9]
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b3a      	ldr	r3, [pc, #232]	@ (8002218 <lcdCommand+0x1c4>)
 800212e:	725a      	strb	r2, [r3, #9]
                    break;
 8002130:	e001      	b.n	8002136 <lcdCommand+0xe2>

                default:
                    return -1;
 8002132:	23ff      	movs	r3, #255	@ 0xff
 8002134:	e06c      	b.n	8002210 <lcdCommand+0x1bc>
            }

            break;
 8002136:	e049      	b.n	80021cc <lcdCommand+0x178>

        case LCD_PARAM_UNSET:
            switch (command) {
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	3b01      	subs	r3, #1
 800213c:	2b07      	cmp	r3, #7
 800213e:	d840      	bhi.n	80021c2 <lcdCommand+0x16e>
 8002140:	a201      	add	r2, pc, #4	@ (adr r2, 8002148 <lcdCommand+0xf4>)
 8002142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002146:	bf00      	nop
 8002148:	08002169 	.word	0x08002169
 800214c:	080021c3 	.word	0x080021c3
 8002150:	08002179 	.word	0x08002179
 8002154:	08002189 	.word	0x08002189
 8002158:	080021c3 	.word	0x080021c3
 800215c:	080021a9 	.word	0x080021a9
 8002160:	08002199 	.word	0x08002199
 8002164:	080021b3 	.word	0x080021b3
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8002168:	4b2b      	ldr	r3, [pc, #172]	@ (8002218 <lcdCommand+0x1c4>)
 800216a:	7a1b      	ldrb	r3, [r3, #8]
 800216c:	f023 0304 	bic.w	r3, r3, #4
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4b29      	ldr	r3, [pc, #164]	@ (8002218 <lcdCommand+0x1c4>)
 8002174:	721a      	strb	r2, [r3, #8]
                    break;
 8002176:	e026      	b.n	80021c6 <lcdCommand+0x172>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8002178:	4b27      	ldr	r3, [pc, #156]	@ (8002218 <lcdCommand+0x1c4>)
 800217a:	7a1b      	ldrb	r3, [r3, #8]
 800217c:	f023 0302 	bic.w	r3, r3, #2
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <lcdCommand+0x1c4>)
 8002184:	721a      	strb	r2, [r3, #8]
                    break;
 8002186:	e01e      	b.n	80021c6 <lcdCommand+0x172>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8002188:	4b23      	ldr	r3, [pc, #140]	@ (8002218 <lcdCommand+0x1c4>)
 800218a:	7a1b      	ldrb	r3, [r3, #8]
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <lcdCommand+0x1c4>)
 8002194:	721a      	strb	r2, [r3, #8]
                    break;
 8002196:	e016      	b.n	80021c6 <lcdCommand+0x172>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8002198:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <lcdCommand+0x1c4>)
 800219a:	7a5b      	ldrb	r3, [r3, #9]
 800219c:	f023 0302 	bic.w	r3, r3, #2
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <lcdCommand+0x1c4>)
 80021a4:	725a      	strb	r2, [r3, #9]
                    break;
 80021a6:	e00e      	b.n	80021c6 <lcdCommand+0x172>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 80021a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002218 <lcdCommand+0x1c4>)
 80021aa:	7a5a      	ldrb	r2, [r3, #9]
 80021ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <lcdCommand+0x1c4>)
 80021ae:	725a      	strb	r2, [r3, #9]
                    break;
 80021b0:	e009      	b.n	80021c6 <lcdCommand+0x172>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 80021b2:	4b19      	ldr	r3, [pc, #100]	@ (8002218 <lcdCommand+0x1c4>)
 80021b4:	7a5b      	ldrb	r3, [r3, #9]
 80021b6:	f023 0301 	bic.w	r3, r3, #1
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <lcdCommand+0x1c4>)
 80021be:	725a      	strb	r2, [r3, #9]
                    break;
 80021c0:	e001      	b.n	80021c6 <lcdCommand+0x172>

                default:
                    return -1;
 80021c2:	23ff      	movs	r3, #255	@ 0xff
 80021c4:	e024      	b.n	8002210 <lcdCommand+0x1bc>
            }

            break;
 80021c6:	e001      	b.n	80021cc <lcdCommand+0x178>

        default:
            return -1;
 80021c8:	23ff      	movs	r3, #255	@ 0xff
 80021ca:	e021      	b.n	8002210 <lcdCommand+0x1bc>
    }

    /* Now lets send the command */
    switch (command) {
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	dc16      	bgt.n	8002200 <lcdCommand+0x1ac>
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	da0d      	bge.n	80021f2 <lcdCommand+0x19e>
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d004      	beq.n	80021e4 <lcdCommand+0x190>
 80021da:	2b00      	cmp	r3, #0
 80021dc:	dd10      	ble.n	8002200 <lcdCommand+0x1ac>
 80021de:	3b03      	subs	r3, #3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d80d      	bhi.n	8002200 <lcdCommand+0x1ac>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <lcdCommand+0x1c4>)
 80021e6:	7a1b      	ldrb	r3, [r3, #8]
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	73fb      	strb	r3, [r7, #15]
            break;
 80021f0:	e007      	b.n	8002202 <lcdCommand+0x1ae>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <lcdCommand+0x1c4>)
 80021f4:	7a5b      	ldrb	r3, [r3, #9]
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	73fb      	strb	r3, [r7, #15]
            break;
 80021fe:	e000      	b.n	8002202 <lcdCommand+0x1ae>

        default:
            break;
 8002200:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8002202:	f107 030f 	add.w	r3, r7, #15
 8002206:	4619      	mov	r1, r3
 8002208:	2000      	movs	r0, #0
 800220a:	f000 f84f 	bl	80022ac <lcdWriteByte>
 800220e:	4603      	mov	r3, r0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200003cc 	.word	0x200003cc

0800221c <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        0 if success
 */
char lcdSetCursorPosition(uint8_t column, uint8_t line) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	460a      	mov	r2, r1
 8002226:	71fb      	strb	r3, [r7, #7]
 8002228:	4613      	mov	r3, r2
 800222a:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 800222c:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <lcdSetCursorPosition+0x50>)
 800222e:	791b      	ldrb	r3, [r3, #4]
 8002230:	79ba      	ldrb	r2, [r7, #6]
 8002232:	429a      	cmp	r2, r3
 8002234:	d303      	bcc.n	800223e <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8002236:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <lcdSetCursorPosition+0x50>)
 8002238:	791b      	ldrb	r3, [r3, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 800223e:	79bb      	ldrb	r3, [r7, #6]
 8002240:	4a0b      	ldr	r2, [pc, #44]	@ (8002270 <lcdSetCursorPosition+0x54>)
 8002242:	5cd2      	ldrb	r2, [r2, r3]
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	4413      	add	r3, r2
 8002248:	b2db      	uxtb	r3, r3
 800224a:	b25b      	sxtb	r3, r3
 800224c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002250:	b25b      	sxtb	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8002256:	f107 030f 	add.w	r3, r7, #15
 800225a:	4619      	mov	r1, r3
 800225c:	2000      	movs	r0, #0
 800225e:	f000 f825 	bl	80022ac <lcdWriteByte>
 8002262:	4603      	mov	r3, r0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200003cc 	.word	0x200003cc
 8002270:	080108ac 	.word	0x080108ac

08002274 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        0 if success
 */
char lcdPrintStr(uint8_t * data, uint8_t length) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e009      	b.n	800229a <lcdPrintStr+0x26>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == -1) {
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	4619      	mov	r1, r3
 800228e:	2001      	movs	r0, #1
 8002290:	f000 f80c 	bl	80022ac <lcdWriteByte>
    for (uint8_t i = 0; i < length; ++i) {
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	3301      	adds	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d3f1      	bcc.n	8002286 <lcdPrintStr+0x12>
            return -1;
        }
    }

    return 0;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          0 if success
 */
static char lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
	unsigned short usCont;

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 80022b8:	4b38      	ldr	r3, [pc, #224]	@ (800239c <lcdWriteByte+0xf0>)
 80022ba:	79da      	ldrb	r2, [r3, #7]
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	4313      	orrs	r3, r2
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	f023 030f 	bic.w	r3, r3, #15
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	4313      	orrs	r3, r2
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4b32      	ldr	r3, [pc, #200]	@ (80023a0 <lcdWriteByte+0xf4>)
 80022d8:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 80022da:	4b31      	ldr	r3, [pc, #196]	@ (80023a0 <lcdWriteByte+0xf4>)
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	4b30      	ldr	r3, [pc, #192]	@ (80023a0 <lcdWriteByte+0xf4>)
 80022e0:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 80022e2:	4b2e      	ldr	r3, [pc, #184]	@ (800239c <lcdWriteByte+0xf0>)
 80022e4:	79da      	ldrb	r2, [r3, #7]
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	b25a      	sxtb	r2, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	f023 030f 	bic.w	r3, r3, #15
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	4313      	orrs	r3, r2
 80022fc:	b25b      	sxtb	r3, r3
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b27      	ldr	r3, [pc, #156]	@ (80023a0 <lcdWriteByte+0xf4>)
 8002302:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8002304:	4b25      	ldr	r3, [pc, #148]	@ (800239c <lcdWriteByte+0xf0>)
 8002306:	79da      	ldrb	r2, [r3, #7]
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	4313      	orrs	r3, r2
 800230c:	b2da      	uxtb	r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	b2db      	uxtb	r3, r3
 8002316:	4313      	orrs	r3, r2
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b1f      	ldr	r3, [pc, #124]	@ (80023a0 <lcdWriteByte+0xf4>)
 8002322:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8002324:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <lcdWriteByte+0xf4>)
 8002326:	78da      	ldrb	r2, [r3, #3]
 8002328:	4b1d      	ldr	r3, [pc, #116]	@ (80023a0 <lcdWriteByte+0xf4>)
 800232a:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 800232c:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <lcdWriteByte+0xf0>)
 800232e:	79da      	ldrb	r2, [r3, #7]
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	4313      	orrs	r3, r2
 8002334:	b2db      	uxtb	r3, r3
 8002336:	b25a      	sxtb	r2, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	b25b      	sxtb	r3, r3
 8002340:	4313      	orrs	r3, r2
 8002342:	b25b      	sxtb	r3, r3
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b16      	ldr	r3, [pc, #88]	@ (80023a0 <lcdWriteByte+0xf4>)
 8002348:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 800234a:	4b14      	ldr	r3, [pc, #80]	@ (800239c <lcdWriteByte+0xf0>)
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	4b13      	ldr	r3, [pc, #76]	@ (800239c <lcdWriteByte+0xf0>)
 8002350:	799b      	ldrb	r3, [r3, #6]
 8002352:	4619      	mov	r1, r3
 8002354:	2306      	movs	r3, #6
 8002356:	4a12      	ldr	r2, [pc, #72]	@ (80023a0 <lcdWriteByte+0xf4>)
 8002358:	f003 fb9e 	bl	8005a98 <HAL_I2C_Master_Transmit_DMA>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <lcdWriteByte+0xba>
        return -1;
 8002362:	23ff      	movs	r3, #255	@ 0xff
 8002364:	e015      	b.n	8002392 <lcdWriteByte+0xe6>
    }

    usCont = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800236a:	e009      	b.n	8002380 <lcdWriteByte+0xd4>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 800236c:	89fb      	ldrh	r3, [r7, #14]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	81fa      	strh	r2, [r7, #14]
 8002372:	2bc8      	cmp	r3, #200	@ 0xc8
 8002374:	d101      	bne.n	800237a <lcdWriteByte+0xce>
    		return -1;
 8002376:	23ff      	movs	r3, #255	@ 0xff
 8002378:	e00b      	b.n	8002392 <lcdWriteByte+0xe6>
    	HAL_Delay(1);
 800237a:	2001      	movs	r0, #1
 800237c:	f002 fc9a 	bl	8004cb4 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <lcdWriteByte+0xf0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f003 fd78 	bl	8005e7a <HAL_I2C_GetState>
 800238a:	4603      	mov	r3, r0
 800238c:	2b20      	cmp	r3, #32
 800238e:	d1ed      	bne.n	800236c <lcdWriteByte+0xc0>
    }

    return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200003cc 	.word	0x200003cc
 80023a0:	200003c4 	.word	0x200003c4

080023a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a6:	ed2d 8b02 	vpush	{d8}
 80023aa:	f5ad 7d5f 	sub.w	sp, sp, #892	@ 0x37c
 80023ae:	af6e      	add	r7, sp, #440	@ 0x1b8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b0:	f002 fc0f 	bl	8004bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b4:	f000 f9fe 	bl	80027b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023b8:	f7ff fbe8 	bl	8001b8c <MX_GPIO_Init>
  MX_DMA_Init();
 80023bc:	f7ff fbb4 	bl	8001b28 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80023c0:	f002 f9e6 	bl	8004790 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 80023c4:	f001 fcd2 	bl	8003d6c <MX_TIM3_Init>
  MX_TIM20_Init();
 80023c8:	f001 fe72 	bl	80040b0 <MX_TIM20_Init>
  MX_I2C2_Init();
 80023cc:	f7ff fc66 	bl	8001c9c <MX_I2C2_Init>
  MX_TIM1_Init();
 80023d0:	f001 fbde 	bl	8003b90 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80023d4:	f002 fa72 	bl	80048bc <MX_USART3_UART_Init>
  MX_TIM5_Init();
 80023d8:	f001 fd50 	bl	8003e7c <MX_TIM5_Init>
  MX_TIM16_Init();
 80023dc:	f001 fdd4 	bl	8003f88 <MX_TIM16_Init>
  MX_TIM17_Init();
 80023e0:	f001 fe1c 	bl	800401c <MX_TIM17_Init>
  MX_TIM6_Init();
 80023e4:	f001 fd98 	bl	8003f18 <MX_TIM6_Init>
  MX_TIM2_Init();
 80023e8:	f001 fc72 	bl	8003cd0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80023ec:	f002 fa1a 	bl	8004824 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(&hi2c2, (uint8_t)0x27, (uint8_t)2, (uint8_t)16);
 80023f0:	2310      	movs	r3, #16
 80023f2:	2202      	movs	r2, #2
 80023f4:	2127      	movs	r1, #39	@ 0x27
 80023f6:	48ca      	ldr	r0, [pc, #808]	@ (8002720 <main+0x37c>)
 80023f8:	f7ff fd72 	bl	8001ee0 <lcdInit>
  vUltrassonicoInit(pTimerEcoUltrassonicoFrontal,pTimerPWMTrigger) ;
 80023fc:	4bc9      	ldr	r3, [pc, #804]	@ (8002724 <main+0x380>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4ac9      	ldr	r2, [pc, #804]	@ (8002728 <main+0x384>)
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f002 f958 	bl	80046bc <vUltrassonicoInit>
  vCommunicationInit();
 800240c:	f7ff fabe 	bl	800198c <vCommunicationInit>

  vMotorsInit(pTimPWMMotor, pTimDurationMotor);
 8002410:	4bc6      	ldr	r3, [pc, #792]	@ (800272c <main+0x388>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4ac6      	ldr	r2, [pc, #792]	@ (8002730 <main+0x38c>)
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fea2 	bl	8003164 <vMotorsInit>
  vCommStateMachineInit(pV2V);
 8002420:	4bc4      	ldr	r3, [pc, #784]	@ (8002734 <main+0x390>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe ff13 	bl	8001250 <vCommStateMachineInit>

  vOdometriaInit();
 800242a:	f000 ffa5 	bl	8003378 <vOdometriaInit>

  vTimerInit();
 800242e:	f002 f8d9 	bl	80045e4 <vTimerInit>
  iSetTimer(100);
 8002432:	2064      	movs	r0, #100	@ 0x64
 8002434:	f002 f8fc 	bl	8004630 <iSetTimer>
  iSetTimer(500);
 8002438:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800243c:	f002 f8f8 	bl	8004630 <iSetTimer>


// seguidor
   xPidMotorLeft = vPidInit(xPidMotorLeft, fLeftMotorKp, fLeftMotorKi, 0, 100, 0.7);
 8002440:	4bbd      	ldr	r3, [pc, #756]	@ (8002738 <main+0x394>)
 8002442:	ed93 8a00 	vldr	s16, [r3]
 8002446:	4bbd      	ldr	r3, [pc, #756]	@ (800273c <main+0x398>)
 8002448:	edd3 8a00 	vldr	s17, [r3]
 800244c:	4ebc      	ldr	r6, [pc, #752]	@ (8002740 <main+0x39c>)
 800244e:	463d      	mov	r5, r7
 8002450:	4cbb      	ldr	r4, [pc, #748]	@ (8002740 <main+0x39c>)
 8002452:	2364      	movs	r3, #100	@ 0x64
 8002454:	936c      	str	r3, [sp, #432]	@ 0x1b0
 8002456:	4668      	mov	r0, sp
 8002458:	f104 030c 	add.w	r3, r4, #12
 800245c:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8002460:	4619      	mov	r1, r3
 8002462:	f00b f9e8 	bl	800d836 <memcpy>
 8002466:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800246a:	eddf 1ab6 	vldr	s3, [pc, #728]	@ 8002744 <main+0x3a0>
 800246e:	ed9f 1ab6 	vldr	s2, [pc, #728]	@ 8002748 <main+0x3a4>
 8002472:	eef0 0a68 	vmov.f32	s1, s17
 8002476:	eeb0 0a48 	vmov.f32	s0, s16
 800247a:	4628      	mov	r0, r5
 800247c:	f001 f8ca 	bl	8003614 <vPidInit>
 8002480:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002484:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002488:	4630      	mov	r0, r6
 800248a:	4619      	mov	r1, r3
 800248c:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 8002490:	461a      	mov	r2, r3
 8002492:	f00b f9d0 	bl	800d836 <memcpy>
   xPidMotorRight = vPidInit(xPidMotorRight, fRightMotorKp, fRightMotorKi, 0, 100, 0.7);
 8002496:	4bad      	ldr	r3, [pc, #692]	@ (800274c <main+0x3a8>)
 8002498:	ed93 8a00 	vldr	s16, [r3]
 800249c:	4bac      	ldr	r3, [pc, #688]	@ (8002750 <main+0x3ac>)
 800249e:	edd3 8a00 	vldr	s17, [r3]
 80024a2:	4eac      	ldr	r6, [pc, #688]	@ (8002754 <main+0x3b0>)
 80024a4:	463d      	mov	r5, r7
 80024a6:	4cab      	ldr	r4, [pc, #684]	@ (8002754 <main+0x3b0>)
 80024a8:	2364      	movs	r3, #100	@ 0x64
 80024aa:	936c      	str	r3, [sp, #432]	@ 0x1b0
 80024ac:	4668      	mov	r0, sp
 80024ae:	f104 030c 	add.w	r3, r4, #12
 80024b2:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80024b6:	4619      	mov	r1, r3
 80024b8:	f00b f9bd 	bl	800d836 <memcpy>
 80024bc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80024c0:	eddf 1aa0 	vldr	s3, [pc, #640]	@ 8002744 <main+0x3a0>
 80024c4:	ed9f 1aa0 	vldr	s2, [pc, #640]	@ 8002748 <main+0x3a4>
 80024c8:	eef0 0a68 	vmov.f32	s1, s17
 80024cc:	eeb0 0a48 	vmov.f32	s0, s16
 80024d0:	4628      	mov	r0, r5
 80024d2:	f001 f89f 	bl	8003614 <vPidInit>
 80024d6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024da:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80024de:	4630      	mov	r0, r6
 80024e0:	4619      	mov	r1, r3
 80024e2:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 80024e6:	461a      	mov	r2, r3
 80024e8:	f00b f9a5 	bl	800d836 <memcpy>
   xPidDistance = vPidInit(xPidDistance, 0.03, 0.02, 0, 100, 1);
 80024ec:	4e9a      	ldr	r6, [pc, #616]	@ (8002758 <main+0x3b4>)
 80024ee:	463d      	mov	r5, r7
 80024f0:	4c99      	ldr	r4, [pc, #612]	@ (8002758 <main+0x3b4>)
 80024f2:	2364      	movs	r3, #100	@ 0x64
 80024f4:	936c      	str	r3, [sp, #432]	@ 0x1b0
 80024f6:	4668      	mov	r0, sp
 80024f8:	f104 030c 	add.w	r3, r4, #12
 80024fc:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8002500:	4619      	mov	r1, r3
 8002502:	f00b f998 	bl	800d836 <memcpy>
 8002506:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800250a:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800250e:	ed9f 1a8e 	vldr	s2, [pc, #568]	@ 8002748 <main+0x3a4>
 8002512:	eddf 0a92 	vldr	s1, [pc, #584]	@ 800275c <main+0x3b8>
 8002516:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8002760 <main+0x3bc>
 800251a:	4628      	mov	r0, r5
 800251c:	f001 f87a 	bl	8003614 <vPidInit>
 8002520:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002524:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002528:	4630      	mov	r0, r6
 800252a:	4619      	mov	r1, r3
 800252c:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 8002530:	461a      	mov	r2, r3
 8002532:	f00b f980 	bl	800d836 <memcpy>

   xPidSetSpeed = vPidInit(xPidSetSpeed, 0.015, 0.02, 0, 100, 1);
 8002536:	4e8b      	ldr	r6, [pc, #556]	@ (8002764 <main+0x3c0>)
 8002538:	463d      	mov	r5, r7
 800253a:	4c8a      	ldr	r4, [pc, #552]	@ (8002764 <main+0x3c0>)
 800253c:	2364      	movs	r3, #100	@ 0x64
 800253e:	936c      	str	r3, [sp, #432]	@ 0x1b0
 8002540:	4668      	mov	r0, sp
 8002542:	f104 030c 	add.w	r3, r4, #12
 8002546:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 800254a:	4619      	mov	r1, r3
 800254c:	f00b f973 	bl	800d836 <memcpy>
 8002550:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002554:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8002558:	ed9f 1a7b 	vldr	s2, [pc, #492]	@ 8002748 <main+0x3a4>
 800255c:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 800275c <main+0x3b8>
 8002560:	ed9f 0a81 	vldr	s0, [pc, #516]	@ 8002768 <main+0x3c4>
 8002564:	4628      	mov	r0, r5
 8002566:	f001 f855 	bl	8003614 <vPidInit>
 800256a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800256e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002572:	4630      	mov	r0, r6
 8002574:	4619      	mov	r1, r3
 8002576:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 800257a:	461a      	mov	r2, r3
 800257c:	f00b f95b 	bl	800d836 <memcpy>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(pTimDurationMotor);
 8002580:	4b6b      	ldr	r3, [pc, #428]	@ (8002730 <main+0x38c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f006 f91b 	bl	80087c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(pTimFreqFixa_esq);
 800258a:	4b78      	ldr	r3, [pc, #480]	@ (800276c <main+0x3c8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f006 f916 	bl	80087c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(pTimFreqFixa_dir);
 8002594:	4b76      	ldr	r3, [pc, #472]	@ (8002770 <main+0x3cc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f006 f911 	bl	80087c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(pTimerGeral);
 800259e:	4b75      	ldr	r3, [pc, #468]	@ (8002774 <main+0x3d0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f006 f90c 	bl	80087c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(pTimFreqFixa_esq, TIM_CHANNEL_1);
 80025a8:	4b70      	ldr	r3, [pc, #448]	@ (800276c <main+0x3c8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f006 fb4a 	bl	8008c48 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(pTimFreqFixa_dir, TIM_CHANNEL_1);
 80025b4:	4b6e      	ldr	r3, [pc, #440]	@ (8002770 <main+0x3cc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f006 fb44 	bl	8008c48 <HAL_TIM_IC_Start_IT>

  fSetPoint_right=0;
 80025c0:	4b6d      	ldr	r3, [pc, #436]	@ (8002778 <main+0x3d4>)
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
  fSetPoint_left=0;
 80025c8:	4b6c      	ldr	r3, [pc, #432]	@ (800277c <main+0x3d8>)
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
  	  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  		if(5==iCount500ms)
 80025d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002780 <main+0x3dc>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	f040 8082 	bne.w	80026de <main+0x33a>
  		{
  	   	  // PRINT ODOMETRIA
  			lcdDisplayClear();
 80025da:	2101      	movs	r1, #1
 80025dc:	2002      	movs	r0, #2
 80025de:	f7ff fd39 	bl	8002054 <lcdCommand>
  	   	    vShowOdometry();
 80025e2:	f000 f933 	bl	800284c <vShowOdometry>

  			lcdDisplayClear();
 80025e6:	2101      	movs	r1, #1
 80025e8:	2002      	movs	r0, #2
 80025ea:	f7ff fd33 	bl	8002054 <lcdCommand>
  			lcdSetCursorPosition(0, 0);
 80025ee:	2100      	movs	r1, #0
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7ff fe13 	bl	800221c <lcdSetCursorPosition>
  			lcdPrintStr("DF:", 3);
 80025f6:	2103      	movs	r1, #3
 80025f8:	4862      	ldr	r0, [pc, #392]	@ (8002784 <main+0x3e0>)
 80025fa:	f7ff fe3b 	bl	8002274 <lcdPrintStr>

  		  	lcdSetCursorPosition(3, 0);
 80025fe:	2100      	movs	r1, #0
 8002600:	2003      	movs	r0, #3
 8002602:	f7ff fe0b 	bl	800221c <lcdSetCursorPosition>
  		    lcdPrintStr((uint8_t*)pCommunicationFloatToString(fDistanceFrontal, 1), strlen((char *)pCommunicationFloatToString(fDistanceFrontal, 1)));
 8002606:	4b60      	ldr	r3, [pc, #384]	@ (8002788 <main+0x3e4>)
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	2001      	movs	r0, #1
 800260e:	eeb0 0a67 	vmov.f32	s0, s15
 8002612:	f7ff f9d9 	bl	80019c8 <pCommunicationFloatToString>
 8002616:	4604      	mov	r4, r0
 8002618:	4b5b      	ldr	r3, [pc, #364]	@ (8002788 <main+0x3e4>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	2001      	movs	r0, #1
 8002620:	eeb0 0a67 	vmov.f32	s0, s15
 8002624:	f7ff f9d0 	bl	80019c8 <pCommunicationFloatToString>
 8002628:	4603      	mov	r3, r0
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd fdf8 	bl	8000220 <strlen>
 8002630:	4603      	mov	r3, r0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4619      	mov	r1, r3
 8002636:	4620      	mov	r0, r4
 8002638:	f7ff fe1c 	bl	8002274 <lcdPrintStr>

  		    lcdSetCursorPosition(8, 0);
 800263c:	2100      	movs	r1, #0
 800263e:	2008      	movs	r0, #8
 8002640:	f7ff fdec 	bl	800221c <lcdSetCursorPosition>
  		    lcdPrintStr("VE:", 3);
 8002644:	2103      	movs	r1, #3
 8002646:	4851      	ldr	r0, [pc, #324]	@ (800278c <main+0x3e8>)
 8002648:	f7ff fe14 	bl	8002274 <lcdPrintStr>
  		  lcdSetCursorPosition(11, 0);
 800264c:	2100      	movs	r1, #0
 800264e:	200b      	movs	r0, #11
 8002650:	f7ff fde4 	bl	800221c <lcdSetCursorPosition>
  		  	lcdPrintStr((uint8_t*)pCommunicationFloatToString(fLeftSpeed, 1), strlen((char *)pCommunicationFloatToString(fLeftSpeed, 1)));
 8002654:	4b4e      	ldr	r3, [pc, #312]	@ (8002790 <main+0x3ec>)
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	2001      	movs	r0, #1
 800265c:	eeb0 0a67 	vmov.f32	s0, s15
 8002660:	f7ff f9b2 	bl	80019c8 <pCommunicationFloatToString>
 8002664:	4604      	mov	r4, r0
 8002666:	4b4a      	ldr	r3, [pc, #296]	@ (8002790 <main+0x3ec>)
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	2001      	movs	r0, #1
 800266e:	eeb0 0a67 	vmov.f32	s0, s15
 8002672:	f7ff f9a9 	bl	80019c8 <pCommunicationFloatToString>
 8002676:	4603      	mov	r3, r0
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd fdd1 	bl	8000220 <strlen>
 800267e:	4603      	mov	r3, r0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4619      	mov	r1, r3
 8002684:	4620      	mov	r0, r4
 8002686:	f7ff fdf5 	bl	8002274 <lcdPrintStr>

  		    lcdSetCursorPosition(8, 1);
 800268a:	2101      	movs	r1, #1
 800268c:	2008      	movs	r0, #8
 800268e:	f7ff fdc5 	bl	800221c <lcdSetCursorPosition>
  		    lcdPrintStr("VD:", 3);
 8002692:	2103      	movs	r1, #3
 8002694:	483f      	ldr	r0, [pc, #252]	@ (8002794 <main+0x3f0>)
 8002696:	f7ff fded 	bl	8002274 <lcdPrintStr>
  		 	lcdSetCursorPosition(11, 1);
 800269a:	2101      	movs	r1, #1
 800269c:	200b      	movs	r0, #11
 800269e:	f7ff fdbd 	bl	800221c <lcdSetCursorPosition>
  		  	lcdPrintStr((uint8_t*)pCommunicationFloatToString(fRightSpeed, 1), strlen((char *)pCommunicationFloatToString(fRightSpeed, 1)));
 80026a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002798 <main+0x3f4>)
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	2001      	movs	r0, #1
 80026aa:	eeb0 0a67 	vmov.f32	s0, s15
 80026ae:	f7ff f98b 	bl	80019c8 <pCommunicationFloatToString>
 80026b2:	4604      	mov	r4, r0
 80026b4:	4b38      	ldr	r3, [pc, #224]	@ (8002798 <main+0x3f4>)
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	2001      	movs	r0, #1
 80026bc:	eeb0 0a67 	vmov.f32	s0, s15
 80026c0:	f7ff f982 	bl	80019c8 <pCommunicationFloatToString>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fd fdaa 	bl	8000220 <strlen>
 80026cc:	4603      	mov	r3, r0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4619      	mov	r1, r3
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7ff fdce 	bl	8002274 <lcdPrintStr>
  		  	iCount500ms=0;
 80026d8:	4b29      	ldr	r3, [pc, #164]	@ (8002780 <main+0x3dc>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
  		}
  		dif=fDistanceEsquerdo-fDistanceDireito;
 80026de:	4b2f      	ldr	r3, [pc, #188]	@ (800279c <main+0x3f8>)
 80026e0:	ed93 7a00 	vldr	s14, [r3]
 80026e4:	4b2e      	ldr	r3, [pc, #184]	@ (80027a0 <main+0x3fc>)
 80026e6:	edd3 7a00 	vldr	s15, [r3]
 80026ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ee:	4b2d      	ldr	r3, [pc, #180]	@ (80027a4 <main+0x400>)
 80026f0:	edc3 7a00 	vstr	s15, [r3]

  		if(fDistanceFrontal>400){
 80026f4:	4b24      	ldr	r3, [pc, #144]	@ (8002788 <main+0x3e4>)
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80027a8 <main+0x404>
 80026fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	dd09      	ble.n	800271c <main+0x378>
  			fOperation=0;
 8002708:	4b28      	ldr	r3, [pc, #160]	@ (80027ac <main+0x408>)
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
  			vCommStateMachineSendMessage(pV2V, "#1so0;");
 8002710:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <main+0x390>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4926      	ldr	r1, [pc, #152]	@ (80027b0 <main+0x40c>)
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f8fa 	bl	8001910 <vCommStateMachineSendMessage>
  		if(5==iCount500ms)
 800271c:	e758      	b.n	80025d0 <main+0x22c>
 800271e:	bf00      	nop
 8002720:	200002b0 	.word	0x200002b0
 8002724:	20000008 	.word	0x20000008
 8002728:	20000004 	.word	0x20000004
 800272c:	20000014 	.word	0x20000014
 8002730:	20000010 	.word	0x20000010
 8002734:	2000000c 	.word	0x2000000c
 8002738:	20000024 	.word	0x20000024
 800273c:	20000028 	.word	0x20000028
 8002740:	200005d0 	.word	0x200005d0
 8002744:	3f333333 	.word	0x3f333333
 8002748:	00000000 	.word	0x00000000
 800274c:	2000002c 	.word	0x2000002c
 8002750:	20000030 	.word	0x20000030
 8002754:	20000414 	.word	0x20000414
 8002758:	2000078c 	.word	0x2000078c
 800275c:	3ca3d70a 	.word	0x3ca3d70a
 8002760:	3cf5c28f 	.word	0x3cf5c28f
 8002764:	20000948 	.word	0x20000948
 8002768:	3c75c28f 	.word	0x3c75c28f
 800276c:	2000001c 	.word	0x2000001c
 8002770:	20000020 	.word	0x20000020
 8002774:	20000018 	.word	0x20000018
 8002778:	20000b20 	.word	0x20000b20
 800277c:	20000b1c 	.word	0x20000b1c
 8002780:	20000400 	.word	0x20000400
 8002784:	0801088c 	.word	0x0801088c
 8002788:	20000b30 	.word	0x20000b30
 800278c:	08010890 	.word	0x08010890
 8002790:	200003f8 	.word	0x200003f8
 8002794:	08010894 	.word	0x08010894
 8002798:	200003fc 	.word	0x200003fc
 800279c:	20000b34 	.word	0x20000b34
 80027a0:	20000b38 	.word	0x20000b38
 80027a4:	20000b3c 	.word	0x20000b3c
 80027a8:	43c80000 	.word	0x43c80000
 80027ac:	20000b2c 	.word	0x20000b2c
 80027b0:	08010898 	.word	0x08010898

080027b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b094      	sub	sp, #80	@ 0x50
 80027b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ba:	f107 0318 	add.w	r3, r7, #24
 80027be:	2238      	movs	r2, #56	@ 0x38
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f00a ffa9 	bl	800d71a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f004 ff6a 	bl	80076b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027dc:	2302      	movs	r3, #2
 80027de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027e6:	2340      	movs	r3, #64	@ 0x40
 80027e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ea:	2302      	movs	r3, #2
 80027ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027ee:	2302      	movs	r3, #2
 80027f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80027f2:	2304      	movs	r3, #4
 80027f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80027f6:	2355      	movs	r3, #85	@ 0x55
 80027f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027fa:	2302      	movs	r3, #2
 80027fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027fe:	2302      	movs	r3, #2
 8002800:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002802:	2302      	movs	r3, #2
 8002804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002806:	f107 0318 	add.w	r3, r7, #24
 800280a:	4618      	mov	r0, r3
 800280c:	f005 f804 	bl	8007818 <HAL_RCC_OscConfig>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002816:	f000 fc9e 	bl	8003156 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800281a:	230f      	movs	r3, #15
 800281c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800281e:	2303      	movs	r3, #3
 8002820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	2104      	movs	r1, #4
 8002832:	4618      	mov	r0, r3
 8002834:	f005 fb02 	bl	8007e3c <HAL_RCC_ClockConfig>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800283e:	f000 fc8a 	bl	8003156 <Error_Handler>
  }
}
 8002842:	bf00      	nop
 8002844:	3750      	adds	r7, #80	@ 0x50
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <vShowOdometry>:

/* USER CODE BEGIN 4 */

void vShowOdometry() {
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
	odometry_state actual = xGetCurrentState();
 8002852:	f000 febb 	bl	80035cc <xGetCurrentState>
 8002856:	eeb0 6a40 	vmov.f32	s12, s0
 800285a:	eef0 6a60 	vmov.f32	s13, s1
 800285e:	eeb0 7a41 	vmov.f32	s14, s2
 8002862:	eef0 7a61 	vmov.f32	s15, s3
 8002866:	ed87 6a00 	vstr	s12, [r7]
 800286a:	edc7 6a01 	vstr	s13, [r7, #4]
 800286e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002872:	edc7 7a03 	vstr	s15, [r7, #12]

	lcdSetCursorPosition(0, 0);
 8002876:	2100      	movs	r1, #0
 8002878:	2000      	movs	r0, #0
 800287a:	f7ff fccf 	bl	800221c <lcdSetCursorPosition>
	lcdPrintStr("x:", 2);
 800287e:	2102      	movs	r1, #2
 8002880:	483c      	ldr	r0, [pc, #240]	@ (8002974 <vShowOdometry+0x128>)
 8002882:	f7ff fcf7 	bl	8002274 <lcdPrintStr>
	lcdSetCursorPosition(2, 0);
 8002886:	2100      	movs	r1, #0
 8002888:	2002      	movs	r0, #2
 800288a:	f7ff fcc7 	bl	800221c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)pCommunicationFloatToString(actual.x, 3), strlen((char *)pCommunicationFloatToString(actual.x, 3)));
 800288e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002892:	2003      	movs	r0, #3
 8002894:	eeb0 0a67 	vmov.f32	s0, s15
 8002898:	f7ff f896 	bl	80019c8 <pCommunicationFloatToString>
 800289c:	4604      	mov	r4, r0
 800289e:	edd7 7a02 	vldr	s15, [r7, #8]
 80028a2:	2003      	movs	r0, #3
 80028a4:	eeb0 0a67 	vmov.f32	s0, s15
 80028a8:	f7ff f88e 	bl	80019c8 <pCommunicationFloatToString>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd fcb6 	bl	8000220 <strlen>
 80028b4:	4603      	mov	r3, r0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4619      	mov	r1, r3
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7ff fcda 	bl	8002274 <lcdPrintStr>

	lcdSetCursorPosition(8, 0);
 80028c0:	2100      	movs	r1, #0
 80028c2:	2008      	movs	r0, #8
 80028c4:	f7ff fcaa 	bl	800221c <lcdSetCursorPosition>
	lcdPrintStr("o:", 2);
 80028c8:	2102      	movs	r1, #2
 80028ca:	482b      	ldr	r0, [pc, #172]	@ (8002978 <vShowOdometry+0x12c>)
 80028cc:	f7ff fcd2 	bl	8002274 <lcdPrintStr>
	lcdSetCursorPosition(10, 0);
 80028d0:	2100      	movs	r1, #0
 80028d2:	200a      	movs	r0, #10
 80028d4:	f7ff fca2 	bl	800221c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)pCommunicationFloatToString(fRadToDegree(actual.angle_orientation), 1), strlen((char *)pCommunicationFloatToString(fRadToDegree(actual.angle_orientation), 1)));
 80028d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80028dc:	eeb0 0a67 	vmov.f32	s0, s15
 80028e0:	f000 fe4a 	bl	8003578 <fRadToDegree>
 80028e4:	eef0 7a40 	vmov.f32	s15, s0
 80028e8:	2001      	movs	r0, #1
 80028ea:	eeb0 0a67 	vmov.f32	s0, s15
 80028ee:	f7ff f86b 	bl	80019c8 <pCommunicationFloatToString>
 80028f2:	4604      	mov	r4, r0
 80028f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80028f8:	eeb0 0a67 	vmov.f32	s0, s15
 80028fc:	f000 fe3c 	bl	8003578 <fRadToDegree>
 8002900:	eef0 7a40 	vmov.f32	s15, s0
 8002904:	2001      	movs	r0, #1
 8002906:	eeb0 0a67 	vmov.f32	s0, s15
 800290a:	f7ff f85d 	bl	80019c8 <pCommunicationFloatToString>
 800290e:	4603      	mov	r3, r0
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fc85 	bl	8000220 <strlen>
 8002916:	4603      	mov	r3, r0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	4619      	mov	r1, r3
 800291c:	4620      	mov	r0, r4
 800291e:	f7ff fca9 	bl	8002274 <lcdPrintStr>

	lcdSetCursorPosition(0, 1);
 8002922:	2101      	movs	r1, #1
 8002924:	2000      	movs	r0, #0
 8002926:	f7ff fc79 	bl	800221c <lcdSetCursorPosition>
	lcdPrintStr("y:", 2);
 800292a:	2102      	movs	r1, #2
 800292c:	4813      	ldr	r0, [pc, #76]	@ (800297c <vShowOdometry+0x130>)
 800292e:	f7ff fca1 	bl	8002274 <lcdPrintStr>
	lcdSetCursorPosition(2, 1);
 8002932:	2101      	movs	r1, #1
 8002934:	2002      	movs	r0, #2
 8002936:	f7ff fc71 	bl	800221c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)pCommunicationFloatToString(actual.y, 3), strlen((char *)pCommunicationFloatToString(actual.y, 3)));
 800293a:	edd7 7a03 	vldr	s15, [r7, #12]
 800293e:	2003      	movs	r0, #3
 8002940:	eeb0 0a67 	vmov.f32	s0, s15
 8002944:	f7ff f840 	bl	80019c8 <pCommunicationFloatToString>
 8002948:	4604      	mov	r4, r0
 800294a:	edd7 7a03 	vldr	s15, [r7, #12]
 800294e:	2003      	movs	r0, #3
 8002950:	eeb0 0a67 	vmov.f32	s0, s15
 8002954:	f7ff f838 	bl	80019c8 <pCommunicationFloatToString>
 8002958:	4603      	mov	r3, r0
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fc60 	bl	8000220 <strlen>
 8002960:	4603      	mov	r3, r0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4619      	mov	r1, r3
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff fc84 	bl	8002274 <lcdPrintStr>
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bd90      	pop	{r4, r7, pc}
 8002974:	080108a0 	.word	0x080108a0
 8002978:	080108a4 	.word	0x080108a4
 800297c:	080108a8 	.word	0x080108a8

08002980 <vPeriodicControlTask>:


void vPeriodicControlTask(){
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	ed2d 8b02 	vpush	{d8}
 8002986:	b0ed      	sub	sp, #436	@ 0x1b4
 8002988:	af6c      	add	r7, sp, #432	@ 0x1b0

	   //seguidor

	fActuatorValue_SetSpeed=fPidUpdateData(xPidSetSpeed,-fDistanceFrontal, 6);
 800298a:	4b9b      	ldr	r3, [pc, #620]	@ (8002bf8 <vPeriodicControlTask+0x278>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	eeb1 8a67 	vneg.f32	s16, s15
 8002994:	4c99      	ldr	r4, [pc, #612]	@ (8002bfc <vPeriodicControlTask+0x27c>)
 8002996:	4668      	mov	r0, sp
 8002998:	f104 0310 	add.w	r3, r4, #16
 800299c:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 80029a0:	4619      	mov	r1, r3
 80029a2:	f00a ff48 	bl	800d836 <memcpy>
 80029a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029aa:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 80029ae:	eeb0 0a48 	vmov.f32	s0, s16
 80029b2:	f000 fe89 	bl	80036c8 <fPidUpdateData>
 80029b6:	eef0 7a40 	vmov.f32	s15, s0
 80029ba:	4b91      	ldr	r3, [pc, #580]	@ (8002c00 <vPeriodicControlTask+0x280>)
 80029bc:	edc3 7a00 	vstr	s15, [r3]
	  fSetPoint_right=fActuatorValue_SetSpeed*fVMax;
 80029c0:	4b8f      	ldr	r3, [pc, #572]	@ (8002c00 <vPeriodicControlTask+0x280>)
 80029c2:	ed93 7a00 	vldr	s14, [r3]
 80029c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002c04 <vPeriodicControlTask+0x284>)
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002c08 <vPeriodicControlTask+0x288>)
 80029d2:	edc3 7a00 	vstr	s15, [r3]
	  fSetPoint_left=fActuatorValue_SetSpeed*fVMax;
 80029d6:	4b8a      	ldr	r3, [pc, #552]	@ (8002c00 <vPeriodicControlTask+0x280>)
 80029d8:	ed93 7a00 	vldr	s14, [r3]
 80029dc:	4b89      	ldr	r3, [pc, #548]	@ (8002c04 <vPeriodicControlTask+0x284>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e6:	4b89      	ldr	r3, [pc, #548]	@ (8002c0c <vPeriodicControlTask+0x28c>)
 80029e8:	edc3 7a00 	vstr	s15, [r3]

	if(dif<0&&fDistanceFrontal<200){
 80029ec:	4b88      	ldr	r3, [pc, #544]	@ (8002c10 <vPeriodicControlTask+0x290>)
 80029ee:	edd3 7a00 	vldr	s15, [r3]
 80029f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fa:	d523      	bpl.n	8002a44 <vPeriodicControlTask+0xc4>
 80029fc:	4b7e      	ldr	r3, [pc, #504]	@ (8002bf8 <vPeriodicControlTask+0x278>)
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8002c14 <vPeriodicControlTask+0x294>
 8002a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0e:	d519      	bpl.n	8002a44 <vPeriodicControlTask+0xc4>
		//Curva para a direita
		fActuatorValue_Distance=fPidUpdateData(xPidDistance,dif, 0);
 8002a10:	4b7f      	ldr	r3, [pc, #508]	@ (8002c10 <vPeriodicControlTask+0x290>)
 8002a12:	ed93 8a00 	vldr	s16, [r3]
 8002a16:	4c80      	ldr	r4, [pc, #512]	@ (8002c18 <vPeriodicControlTask+0x298>)
 8002a18:	4668      	mov	r0, sp
 8002a1a:	f104 0310 	add.w	r3, r4, #16
 8002a1e:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8002a22:	4619      	mov	r1, r3
 8002a24:	f00a ff07 	bl	800d836 <memcpy>
 8002a28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a2c:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8002c1c <vPeriodicControlTask+0x29c>
 8002a30:	eeb0 0a48 	vmov.f32	s0, s16
 8002a34:	f000 fe48 	bl	80036c8 <fPidUpdateData>
 8002a38:	eef0 7a40 	vmov.f32	s15, s0
 8002a3c:	4b78      	ldr	r3, [pc, #480]	@ (8002c20 <vPeriodicControlTask+0x2a0>)
 8002a3e:	edc3 7a00 	vstr	s15, [r3]
 8002a42:	e033      	b.n	8002aac <vPeriodicControlTask+0x12c>
	}else if (dif>0&&fDistanceFrontal<200){
 8002a44:	4b72      	ldr	r3, [pc, #456]	@ (8002c10 <vPeriodicControlTask+0x290>)
 8002a46:	edd3 7a00 	vldr	s15, [r3]
 8002a4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a52:	dd27      	ble.n	8002aa4 <vPeriodicControlTask+0x124>
 8002a54:	4b68      	ldr	r3, [pc, #416]	@ (8002bf8 <vPeriodicControlTask+0x278>)
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8002c14 <vPeriodicControlTask+0x294>
 8002a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a66:	d51d      	bpl.n	8002aa4 <vPeriodicControlTask+0x124>
		fActuatorValue_Distance=-1*fPidUpdateData(xPidDistance,dif*-1, 0);
 8002a68:	4b69      	ldr	r3, [pc, #420]	@ (8002c10 <vPeriodicControlTask+0x290>)
 8002a6a:	edd3 7a00 	vldr	s15, [r3]
 8002a6e:	eeb1 8a67 	vneg.f32	s16, s15
 8002a72:	4c69      	ldr	r4, [pc, #420]	@ (8002c18 <vPeriodicControlTask+0x298>)
 8002a74:	4668      	mov	r0, sp
 8002a76:	f104 0310 	add.w	r3, r4, #16
 8002a7a:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f00a fed9 	bl	800d836 <memcpy>
 8002a84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a88:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8002c1c <vPeriodicControlTask+0x29c>
 8002a8c:	eeb0 0a48 	vmov.f32	s0, s16
 8002a90:	f000 fe1a 	bl	80036c8 <fPidUpdateData>
 8002a94:	eef0 7a40 	vmov.f32	s15, s0
 8002a98:	eef1 7a67 	vneg.f32	s15, s15
 8002a9c:	4b60      	ldr	r3, [pc, #384]	@ (8002c20 <vPeriodicControlTask+0x2a0>)
 8002a9e:	edc3 7a00 	vstr	s15, [r3]
 8002aa2:	e003      	b.n	8002aac <vPeriodicControlTask+0x12c>
	}
	else
		fActuatorValue_Distance=0;
 8002aa4:	4b5e      	ldr	r3, [pc, #376]	@ (8002c20 <vPeriodicControlTask+0x2a0>)
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]



	  fActuatorValue_left = fPidUpdateData(xPidMotorLeft,fLeftSpeed, fSetPoint_left - (120*fActuatorValue_Distance));
 8002aac:	4b5d      	ldr	r3, [pc, #372]	@ (8002c24 <vPeriodicControlTask+0x2a4>)
 8002aae:	ed93 8a00 	vldr	s16, [r3]
 8002ab2:	4b56      	ldr	r3, [pc, #344]	@ (8002c0c <vPeriodicControlTask+0x28c>)
 8002ab4:	ed93 7a00 	vldr	s14, [r3]
 8002ab8:	4b59      	ldr	r3, [pc, #356]	@ (8002c20 <vPeriodicControlTask+0x2a0>)
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8002c28 <vPeriodicControlTask+0x2a8>
 8002ac2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ac6:	ee77 8a67 	vsub.f32	s17, s14, s15
 8002aca:	4c58      	ldr	r4, [pc, #352]	@ (8002c2c <vPeriodicControlTask+0x2ac>)
 8002acc:	4668      	mov	r0, sp
 8002ace:	f104 0310 	add.w	r3, r4, #16
 8002ad2:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f00a fead 	bl	800d836 <memcpy>
 8002adc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ae0:	eef0 0a68 	vmov.f32	s1, s17
 8002ae4:	eeb0 0a48 	vmov.f32	s0, s16
 8002ae8:	f000 fdee 	bl	80036c8 <fPidUpdateData>
 8002aec:	eef0 7a40 	vmov.f32	s15, s0
 8002af0:	4b4f      	ldr	r3, [pc, #316]	@ (8002c30 <vPeriodicControlTask+0x2b0>)
 8002af2:	edc3 7a00 	vstr	s15, [r3]
	  fActuatorValue_left = fOffset + fActuatorValue_left ;
 8002af6:	4b4f      	ldr	r3, [pc, #316]	@ (8002c34 <vPeriodicControlTask+0x2b4>)
 8002af8:	ed93 7a00 	vldr	s14, [r3]
 8002afc:	4b4c      	ldr	r3, [pc, #304]	@ (8002c30 <vPeriodicControlTask+0x2b0>)
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	4b4a      	ldr	r3, [pc, #296]	@ (8002c30 <vPeriodicControlTask+0x2b0>)
 8002b08:	edc3 7a00 	vstr	s15, [r3]

	  fActuatorValue_right = fPidUpdateData(xPidMotorRight, fRightSpeed , fSetPoint_right +(120*fActuatorValue_Distance));
 8002b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c38 <vPeriodicControlTask+0x2b8>)
 8002b0e:	ed93 8a00 	vldr	s16, [r3]
 8002b12:	4b43      	ldr	r3, [pc, #268]	@ (8002c20 <vPeriodicControlTask+0x2a0>)
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8002c28 <vPeriodicControlTask+0x2a8>
 8002b1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b20:	4b39      	ldr	r3, [pc, #228]	@ (8002c08 <vPeriodicControlTask+0x288>)
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	ee77 8a27 	vadd.f32	s17, s14, s15
 8002b2a:	4c44      	ldr	r4, [pc, #272]	@ (8002c3c <vPeriodicControlTask+0x2bc>)
 8002b2c:	4668      	mov	r0, sp
 8002b2e:	f104 0310 	add.w	r3, r4, #16
 8002b32:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8002b36:	4619      	mov	r1, r3
 8002b38:	f00a fe7d 	bl	800d836 <memcpy>
 8002b3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b40:	eef0 0a68 	vmov.f32	s1, s17
 8002b44:	eeb0 0a48 	vmov.f32	s0, s16
 8002b48:	f000 fdbe 	bl	80036c8 <fPidUpdateData>
 8002b4c:	eef0 7a40 	vmov.f32	s15, s0
 8002b50:	4b3b      	ldr	r3, [pc, #236]	@ (8002c40 <vPeriodicControlTask+0x2c0>)
 8002b52:	edc3 7a00 	vstr	s15, [r3]
	  fActuatorValue_right = fOffset  + fActuatorValue_right;
 8002b56:	4b37      	ldr	r3, [pc, #220]	@ (8002c34 <vPeriodicControlTask+0x2b4>)
 8002b58:	ed93 7a00 	vldr	s14, [r3]
 8002b5c:	4b38      	ldr	r3, [pc, #224]	@ (8002c40 <vPeriodicControlTask+0x2c0>)
 8002b5e:	edd3 7a00 	vldr	s15, [r3]
 8002b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b66:	4b36      	ldr	r3, [pc, #216]	@ (8002c40 <vPeriodicControlTask+0x2c0>)
 8002b68:	edc3 7a00 	vstr	s15, [r3]


	  if(16.0>fDistanceFrontal || fDistanceEsquerdo<15  || fDistanceDireito<15|| fOperation==0){
 8002b6c:	4b22      	ldr	r3, [pc, #136]	@ (8002bf8 <vPeriodicControlTask+0x278>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7e:	d41b      	bmi.n	8002bb8 <vPeriodicControlTask+0x238>
 8002b80:	4b30      	ldr	r3, [pc, #192]	@ (8002c44 <vPeriodicControlTask+0x2c4>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8002b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b92:	d411      	bmi.n	8002bb8 <vPeriodicControlTask+0x238>
 8002b94:	4b2c      	ldr	r3, [pc, #176]	@ (8002c48 <vPeriodicControlTask+0x2c8>)
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8002b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba6:	d407      	bmi.n	8002bb8 <vPeriodicControlTask+0x238>
 8002ba8:	4b28      	ldr	r3, [pc, #160]	@ (8002c4c <vPeriodicControlTask+0x2cc>)
 8002baa:	edd3 7a00 	vldr	s15, [r3]
 8002bae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb6:	d107      	bne.n	8002bc8 <vPeriodicControlTask+0x248>
		  fActuatorValue_left=0;
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <vPeriodicControlTask+0x2b0>)
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
	  	  fActuatorValue_right=0;
 8002bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c40 <vPeriodicControlTask+0x2c0>)
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
	  }
	  vMotorsSetPWM(left, fActuatorValue_left, 1);
 8002bc8:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <vPeriodicControlTask+0x2b0>)
 8002bca:	edd3 7a00 	vldr	s15, [r3]
 8002bce:	2101      	movs	r1, #1
 8002bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f000 faf1 	bl	80031bc <vMotorsSetPWM>
	  vMotorsSetPWM(right, fActuatorValue_right, 1);
 8002bda:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <vPeriodicControlTask+0x2c0>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	2101      	movs	r1, #1
 8002be2:	eeb0 0a67 	vmov.f32	s0, s15
 8002be6:	2001      	movs	r0, #1
 8002be8:	f000 fae8 	bl	80031bc <vMotorsSetPWM>
}
 8002bec:	bf00      	nop
 8002bee:	3704      	adds	r7, #4
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	ecbd 8b02 	vpop	{d8}
 8002bf6:	bd90      	pop	{r4, r7, pc}
 8002bf8:	20000b30 	.word	0x20000b30
 8002bfc:	20000948 	.word	0x20000948
 8002c00:	20000b10 	.word	0x20000b10
 8002c04:	20000034 	.word	0x20000034
 8002c08:	20000b20 	.word	0x20000b20
 8002c0c:	20000b1c 	.word	0x20000b1c
 8002c10:	20000b3c 	.word	0x20000b3c
 8002c14:	43480000 	.word	0x43480000
 8002c18:	2000078c 	.word	0x2000078c
 8002c1c:	00000000 	.word	0x00000000
 8002c20:	20000b0c 	.word	0x20000b0c
 8002c24:	200003f8 	.word	0x200003f8
 8002c28:	42f00000 	.word	0x42f00000
 8002c2c:	200005d0 	.word	0x200005d0
 8002c30:	20000b04 	.word	0x20000b04
 8002c34:	20000038 	.word	0x20000038
 8002c38:	200003fc 	.word	0x200003fc
 8002c3c:	20000414 	.word	0x20000414
 8002c40:	20000b08 	.word	0x20000b08
 8002c44:	20000b34 	.word	0x20000b34
 8002c48:	20000b38 	.word	0x20000b38
 8002c4c:	20000b2c 	.word	0x20000b2c

08002c50 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	if (htim == pTimDurationMotor)
 8002c58:	4b63      	ldr	r3, [pc, #396]	@ (8002de8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
	vMotorsDurationCallback();
 8002c62:	f000 fb5f 	bl	8003324 <vMotorsDurationCallback>
	}

	//conta 10 ms
	if (htim == pTimerGeral) {
 8002c66:	4b61      	ldr	r3, [pc, #388]	@ (8002dec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	f040 8086 	bne.w	8002d7e <HAL_TIM_PeriodElapsedCallback+0x12e>

		if (fRightSpeed > 700) {
 8002c72:	4b5f      	ldr	r3, [pc, #380]	@ (8002df0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002df4 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8002c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c84:	dd04      	ble.n	8002c90 <HAL_TIM_PeriodElapsedCallback+0x40>
			iContaOutlier_right++;
 8002c86:	4b5c      	ldr	r3, [pc, #368]	@ (8002df8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	4a5a      	ldr	r2, [pc, #360]	@ (8002df8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002c8e:	6013      	str	r3, [r2, #0]
		}
		fAvgLeftSpeed += fLeftSpeed;
 8002c90:	4b5a      	ldr	r3, [pc, #360]	@ (8002dfc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002c92:	ed93 7a00 	vldr	s14, [r3]
 8002c96:	4b5a      	ldr	r3, [pc, #360]	@ (8002e00 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca0:	4b56      	ldr	r3, [pc, #344]	@ (8002dfc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002ca2:	edc3 7a00 	vstr	s15, [r3]

		if (fLeftSpeed > 700) {
 8002ca6:	4b56      	ldr	r3, [pc, #344]	@ (8002e00 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002ca8:	edd3 7a00 	vldr	s15, [r3]
 8002cac:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002df4 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8002cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb8:	dd04      	ble.n	8002cc4 <HAL_TIM_PeriodElapsedCallback+0x74>
			iContaOutlier_left++;
 8002cba:	4b52      	ldr	r3, [pc, #328]	@ (8002e04 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	4a50      	ldr	r2, [pc, #320]	@ (8002e04 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002cc2:	6013      	str	r3, [r2, #0]
		}
		fAvgRightSpeed += fRightSpeed;
 8002cc4:	4b50      	ldr	r3, [pc, #320]	@ (8002e08 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002cc6:	ed93 7a00 	vldr	s14, [r3]
 8002cca:	4b49      	ldr	r3, [pc, #292]	@ (8002df0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002ccc:	edd3 7a00 	vldr	s15, [r3]
 8002cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd4:	4b4c      	ldr	r3, [pc, #304]	@ (8002e08 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002cd6:	edc3 7a00 	vstr	s15, [r3]

		//conta 100 ms
		if (cCountTime(10, 0)) {
 8002cda:	2100      	movs	r1, #0
 8002cdc:	200a      	movs	r0, #10
 8002cde:	f001 fcc3 	bl	8004668 <cCountTime>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d04a      	beq.n	8002d7e <HAL_TIM_PeriodElapsedCallback+0x12e>
			fAvgRightSpeed /= 10;
 8002ce8:	4b47      	ldr	r3, [pc, #284]	@ (8002e08 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002cea:	ed93 7a00 	vldr	s14, [r3]
 8002cee:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cf6:	4b44      	ldr	r3, [pc, #272]	@ (8002e08 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002cf8:	edc3 7a00 	vstr	s15, [r3]
			fAvgLeftSpeed /= 10;
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8002dfc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002cfe:	ed93 7a00 	vldr	s14, [r3]
 8002d02:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002dfc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002d0c:	edc3 7a00 	vstr	s15, [r3]
			vPeriodicControlTask();
 8002d10:	f7ff fe36 	bl	8002980 <vPeriodicControlTask>

			// d = v*t (x10^-3) [m]
			vCountOdometria(fAvgLeftSpeed*0.0001, fAvgRightSpeed*0.0001);
 8002d14:	4b39      	ldr	r3, [pc, #228]	@ (8002dfc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fc3d 	bl	8000598 <__aeabi_f2d>
 8002d1e:	a330      	add	r3, pc, #192	@ (adr r3, 8002de0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f7fd fc90 	bl	8000648 <__aeabi_dmul>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f7fd ff82 	bl	8000c38 <__aeabi_d2f>
 8002d34:	4604      	mov	r4, r0
 8002d36:	4b34      	ldr	r3, [pc, #208]	@ (8002e08 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fc2c 	bl	8000598 <__aeabi_f2d>
 8002d40:	a327      	add	r3, pc, #156	@ (adr r3, 8002de0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f7fd fc7f 	bl	8000648 <__aeabi_dmul>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	f7fd ff71 	bl	8000c38 <__aeabi_d2f>
 8002d56:	4603      	mov	r3, r0
 8002d58:	ee00 3a90 	vmov	s1, r3
 8002d5c:	ee00 4a10 	vmov	s0, r4
 8002d60:	f000 fb26 	bl	80033b0 <vCountOdometria>

			fAvgRightSpeed = 0;
 8002d64:	4b28      	ldr	r3, [pc, #160]	@ (8002e08 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
			fAvgLeftSpeed = 0;
 8002d6c:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
			iCount500ms++;
 8002d74:	4b25      	ldr	r3, [pc, #148]	@ (8002e0c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	4a24      	ldr	r2, [pc, #144]	@ (8002e0c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002d7c:	6013      	str	r3, [r2, #0]
		}

	}

	if (htim == pTimFreqFixa_esq){
 8002d7e:	4b24      	ldr	r3, [pc, #144]	@ (8002e10 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d110      	bne.n	8002daa <HAL_TIM_PeriodElapsedCallback+0x15a>
		if(uiLeftTimeBurst > 200){
 8002d88:	4b22      	ldr	r3, [pc, #136]	@ (8002e14 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2bc8      	cmp	r3, #200	@ 0xc8
 8002d8e:	d907      	bls.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0x150>
			uiLeftTimeBurst = 1;
 8002d90:	4b20      	ldr	r3, [pc, #128]	@ (8002e14 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
			fLeftSpeed = 0;
 8002d96:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e004      	b.n	8002daa <HAL_TIM_PeriodElapsedCallback+0x15a>
		}else{
		uiLeftTimeBurst++;
 8002da0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e14 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3301      	adds	r3, #1
 8002da6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e14 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002da8:	6013      	str	r3, [r2, #0]
		}
	}

	if (htim == pTimFreqFixa_dir){
 8002daa:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d110      	bne.n	8002dd6 <HAL_TIM_PeriodElapsedCallback+0x186>
		if(uiRightTimeBurst > 200){
 8002db4:	4b19      	ldr	r3, [pc, #100]	@ (8002e1c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2bc8      	cmp	r3, #200	@ 0xc8
 8002dba:	d907      	bls.n	8002dcc <HAL_TIM_PeriodElapsedCallback+0x17c>
			uiRightTimeBurst = 1;
 8002dbc:	4b17      	ldr	r3, [pc, #92]	@ (8002e1c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
			fRightSpeed = 0;
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e004      	b.n	8002dd6 <HAL_TIM_PeriodElapsedCallback+0x186>
		}else{
		uiRightTimeBurst++;
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	4a12      	ldr	r2, [pc, #72]	@ (8002e1c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002dd4:	6013      	str	r3, [r2, #0]
	}

	if (htim == pTimerBuzzer){
//		vBuzzerStop();
	}
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	bf00      	nop
 8002de0:	eb1c432d 	.word	0xeb1c432d
 8002de4:	3f1a36e2 	.word	0x3f1a36e2
 8002de8:	20000010 	.word	0x20000010
 8002dec:	20000018 	.word	0x20000018
 8002df0:	200003fc 	.word	0x200003fc
 8002df4:	442f0000 	.word	0x442f0000
 8002df8:	20000b18 	.word	0x20000b18
 8002dfc:	20000b24 	.word	0x20000b24
 8002e00:	200003f8 	.word	0x200003f8
 8002e04:	20000b14 	.word	0x20000b14
 8002e08:	20000b28 	.word	0x20000b28
 8002e0c:	20000400 	.word	0x20000400
 8002e10:	2000001c 	.word	0x2000001c
 8002e14:	200003e0 	.word	0x200003e0
 8002e18:	20000020 	.word	0x20000020
 8002e1c:	200003e4 	.word	0x200003e4

08002e20 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
 8002e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
//Ultrassonicos
	 if(htim == pTimerEcoUltrassonicoFrontal){
 8002e2a:	4ba2      	ldr	r3, [pc, #648]	@ (80030b4 <HAL_TIM_IC_CaptureCallback+0x294>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	f040 80b2 	bne.w	8002f9a <HAL_TIM_IC_CaptureCallback+0x17a>

	  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	7f1b      	ldrb	r3, [r3, #28]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d12c      	bne.n	8002e98 <HAL_TIM_IC_CaptureCallback+0x78>
	      {
		  if(0==CountModeF){
 8002e3e:	4b9e      	ldr	r3, [pc, #632]	@ (80030b8 <HAL_TIM_IC_CaptureCallback+0x298>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <HAL_TIM_IC_CaptureCallback+0x42>
			  uiAuxDistanceUltrassonicoFrontal1= HAL_TIM_ReadCapturedValue(pTimerEcoUltrassonicoFrontal,TIM_CHANNEL_1);
 8002e46:	4b9b      	ldr	r3, [pc, #620]	@ (80030b4 <HAL_TIM_IC_CaptureCallback+0x294>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f006 fc61 	bl	8009714 <HAL_TIM_ReadCapturedValue>
 8002e52:	4603      	mov	r3, r0
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	4b99      	ldr	r3, [pc, #612]	@ (80030bc <HAL_TIM_IC_CaptureCallback+0x29c>)
 8002e58:	801a      	strh	r2, [r3, #0]
			  CountModeF=1;
 8002e5a:	4b97      	ldr	r3, [pc, #604]	@ (80030b8 <HAL_TIM_IC_CaptureCallback+0x298>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
 8002e60:	e07b      	b.n	8002f5a <HAL_TIM_IC_CaptureCallback+0x13a>
		  }else{
			  uiAuxDistanceUltrassonicoFrontal2 = HAL_TIM_ReadCapturedValue(pTimerEcoUltrassonicoFrontal,TIM_CHANNEL_1);
 8002e62:	4b94      	ldr	r3, [pc, #592]	@ (80030b4 <HAL_TIM_IC_CaptureCallback+0x294>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f006 fc53 	bl	8009714 <HAL_TIM_ReadCapturedValue>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b93      	ldr	r3, [pc, #588]	@ (80030c0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8002e74:	801a      	strh	r2, [r3, #0]
    		  //if(!(fUltrassonicoGetDistance( uiAuxDistanceUltrassonicoFrontal1 , uiAuxDistanceUltrassonicoFrontal2)-fDistanceFrontal>50 ||fUltrassonicoGetDistance( uiAuxDistanceUltrassonicoFrontal1 , uiAuxDistanceUltrassonicoFrontal2)-fDistanceFrontal<-50) )
			   fDistanceFrontal=fUltrassonicoGetDistance( uiAuxDistanceUltrassonicoFrontal1 , uiAuxDistanceUltrassonicoFrontal2);
 8002e76:	4b91      	ldr	r3, [pc, #580]	@ (80030bc <HAL_TIM_IC_CaptureCallback+0x29c>)
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	4a91      	ldr	r2, [pc, #580]	@ (80030c0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8002e7c:	8812      	ldrh	r2, [r2, #0]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f001 fc4d 	bl	8004720 <fUltrassonicoGetDistance>
 8002e86:	eef0 7a40 	vmov.f32	s15, s0
 8002e8a:	4b8e      	ldr	r3, [pc, #568]	@ (80030c4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8002e8c:	edc3 7a00 	vstr	s15, [r3]
			  CountModeF=0;
 8002e90:	4b89      	ldr	r3, [pc, #548]	@ (80030b8 <HAL_TIM_IC_CaptureCallback+0x298>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	e060      	b.n	8002f5a <HAL_TIM_IC_CaptureCallback+0x13a>
		  }
	      }

	      else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	7f1b      	ldrb	r3, [r3, #28]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d12c      	bne.n	8002efa <HAL_TIM_IC_CaptureCallback+0xda>
	      {
	    	  if(0==CountModeE){
 8002ea0:	4b89      	ldr	r3, [pc, #548]	@ (80030c8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10d      	bne.n	8002ec4 <HAL_TIM_IC_CaptureCallback+0xa4>
	    		  uiAuxDistanceUltrassonicoEsquerdo1=HAL_TIM_ReadCapturedValue(pTimerEcoUltrassonicoFrontal,TIM_CHANNEL_2);
 8002ea8:	4b82      	ldr	r3, [pc, #520]	@ (80030b4 <HAL_TIM_IC_CaptureCallback+0x294>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2104      	movs	r1, #4
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f006 fc30 	bl	8009714 <HAL_TIM_ReadCapturedValue>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	4b84      	ldr	r3, [pc, #528]	@ (80030cc <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002eba:	801a      	strh	r2, [r3, #0]
	    		  CountModeE=1;
 8002ebc:	4b82      	ldr	r3, [pc, #520]	@ (80030c8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
 8002ec2:	e04a      	b.n	8002f5a <HAL_TIM_IC_CaptureCallback+0x13a>
	    	  }else{
	    		  uiAuxDistanceUltrassonicoEsquerdo2=HAL_TIM_ReadCapturedValue(pTimerEcoUltrassonicoFrontal,TIM_CHANNEL_2);
 8002ec4:	4b7b      	ldr	r3, [pc, #492]	@ (80030b4 <HAL_TIM_IC_CaptureCallback+0x294>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2104      	movs	r1, #4
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f006 fc22 	bl	8009714 <HAL_TIM_ReadCapturedValue>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	4b7e      	ldr	r3, [pc, #504]	@ (80030d0 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002ed6:	801a      	strh	r2, [r3, #0]
	    		  //if(!(fUltrassonicoGetDistance( uiAuxDistanceUltrassonicoEsquerdo1 , uiAuxDistanceUltrassonicoEsquerdo2)-fDistanceEsquerdo>50 ||fUltrassonicoGetDistance( uiAuxDistanceUltrassonicoEsquerdo1 , uiAuxDistanceUltrassonicoEsquerdo2)-fDistanceEsquerdo<-50) )
				   fDistanceEsquerdo=fUltrassonicoGetDistance( uiAuxDistanceUltrassonicoEsquerdo1 , uiAuxDistanceUltrassonicoEsquerdo2);
 8002ed8:	4b7c      	ldr	r3, [pc, #496]	@ (80030cc <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	4a7c      	ldr	r2, [pc, #496]	@ (80030d0 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8002ede:	8812      	ldrh	r2, [r2, #0]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 fc1c 	bl	8004720 <fUltrassonicoGetDistance>
 8002ee8:	eef0 7a40 	vmov.f32	s15, s0
 8002eec:	4b79      	ldr	r3, [pc, #484]	@ (80030d4 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8002eee:	edc3 7a00 	vstr	s15, [r3]
	    		  CountModeE=0;
 8002ef2:	4b75      	ldr	r3, [pc, #468]	@ (80030c8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	e02f      	b.n	8002f5a <HAL_TIM_IC_CaptureCallback+0x13a>
	    	  }

	      }
	      else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	7f1b      	ldrb	r3, [r3, #28]
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d12b      	bne.n	8002f5a <HAL_TIM_IC_CaptureCallback+0x13a>
	      {
	    	  if(0==CountModeD){
 8002f02:	4b75      	ldr	r3, [pc, #468]	@ (80030d8 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10d      	bne.n	8002f26 <HAL_TIM_IC_CaptureCallback+0x106>
	    		  uiAuxDistanceUltrassonicoDireito1=HAL_TIM_ReadCapturedValue(pTimerEcoUltrassonicoFrontal,TIM_CHANNEL_3);
 8002f0a:	4b6a      	ldr	r3, [pc, #424]	@ (80030b4 <HAL_TIM_IC_CaptureCallback+0x294>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2108      	movs	r1, #8
 8002f10:	4618      	mov	r0, r3
 8002f12:	f006 fbff 	bl	8009714 <HAL_TIM_ReadCapturedValue>
 8002f16:	4603      	mov	r3, r0
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b70      	ldr	r3, [pc, #448]	@ (80030dc <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8002f1c:	801a      	strh	r2, [r3, #0]
	    		  CountModeD=1;
 8002f1e:	4b6e      	ldr	r3, [pc, #440]	@ (80030d8 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	e019      	b.n	8002f5a <HAL_TIM_IC_CaptureCallback+0x13a>
	    	  }else{
	    		  uiAuxDistanceUltrassonicoDireito2=HAL_TIM_ReadCapturedValue(pTimerEcoUltrassonicoFrontal,TIM_CHANNEL_3);
 8002f26:	4b63      	ldr	r3, [pc, #396]	@ (80030b4 <HAL_TIM_IC_CaptureCallback+0x294>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2108      	movs	r1, #8
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f006 fbf1 	bl	8009714 <HAL_TIM_ReadCapturedValue>
 8002f32:	4603      	mov	r3, r0
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	4b6a      	ldr	r3, [pc, #424]	@ (80030e0 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8002f38:	801a      	strh	r2, [r3, #0]

	    		  //if(!(fUltrassonicoGetDistance( uiAuxDistanceUltrassonicoDireito1 , uiAuxDistanceUltrassonicoDireito2)-fDistanceDireito>50 ||fUltrassonicoGetDistance( uiAuxDistanceUltrassonicoDireito1 , uiAuxDistanceUltrassonicoDireito2)-fDistanceDireito<-50) )
				   fDistanceDireito=fUltrassonicoGetDistance( uiAuxDistanceUltrassonicoDireito1 , uiAuxDistanceUltrassonicoDireito2);
 8002f3a:	4b68      	ldr	r3, [pc, #416]	@ (80030dc <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	4a68      	ldr	r2, [pc, #416]	@ (80030e0 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8002f40:	8812      	ldrh	r2, [r2, #0]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f001 fbeb 	bl	8004720 <fUltrassonicoGetDistance>
 8002f4a:	eef0 7a40 	vmov.f32	s15, s0
 8002f4e:	4b65      	ldr	r3, [pc, #404]	@ (80030e4 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8002f50:	edc3 7a00 	vstr	s15, [r3]
	    		  CountModeD=0;
 8002f54:	4b60      	ldr	r3, [pc, #384]	@ (80030d8 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
	    	  }
	      }


	  if(fDistanceFrontal<0){
 8002f5a:	4b5a      	ldr	r3, [pc, #360]	@ (80030c4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8002f5c:	edd3 7a00 	vldr	s15, [r3]
 8002f60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f68:	d507      	bpl.n	8002f7a <HAL_TIM_IC_CaptureCallback+0x15a>
		  fDistanceFrontal=fDistanceFrontal*(-1);
 8002f6a:	4b56      	ldr	r3, [pc, #344]	@ (80030c4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8002f6c:	edd3 7a00 	vldr	s15, [r3]
 8002f70:	eef1 7a67 	vneg.f32	s15, s15
 8002f74:	4b53      	ldr	r3, [pc, #332]	@ (80030c4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8002f76:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if(fDistanceEsquerdo<0)
 8002f7a:	4b56      	ldr	r3, [pc, #344]	@ (80030d4 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8002f7c:	edd3 7a00 	vldr	s15, [r3]
 8002f80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f88:	d507      	bpl.n	8002f9a <HAL_TIM_IC_CaptureCallback+0x17a>
		  fDistanceEsquerdo=fDistanceEsquerdo*(-1);
 8002f8a:	4b52      	ldr	r3, [pc, #328]	@ (80030d4 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	eef1 7a67 	vneg.f32	s15, s15
 8002f94:	4b4f      	ldr	r3, [pc, #316]	@ (80030d4 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8002f96:	edc3 7a00 	vstr	s15, [r3]

	  }
//ENCODERS
  if (htim == pTimFreqFixa_esq)
 8002f9a:	4b53      	ldr	r3, [pc, #332]	@ (80030e8 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d13f      	bne.n	8003024 <HAL_TIM_IC_CaptureCallback+0x204>
  	{
  		uiLeftCapturedTime =  HAL_TIM_ReadCapturedValue(htim,  TIM_CHANNEL_1);
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f006 fbb4 	bl	8009714 <HAL_TIM_ReadCapturedValue>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4a4f      	ldr	r2, [pc, #316]	@ (80030ec <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8002fb0:	6013      	str	r3, [r2, #0]
  		if (uiLeftTimeBurst != 0)
 8002fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80030f0 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d011      	beq.n	8002fde <HAL_TIM_IC_CaptureCallback+0x1be>
  			ullLeftTimeRan = uiLeftCapturedTime + uiLeftTimeBurst*10000;
 8002fba:	4b4d      	ldr	r3, [pc, #308]	@ (80030f0 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002fc2:	fb03 f202 	mul.w	r2, r3, r2
 8002fc6:	4b49      	ldr	r3, [pc, #292]	@ (80030ec <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	2200      	movs	r2, #0
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	4b48      	ldr	r3, [pc, #288]	@ (80030f4 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8002fd4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002fd8:	e9c3 1200 	strd	r1, r2, [r3]
 8002fdc:	e007      	b.n	8002fee <HAL_TIM_IC_CaptureCallback+0x1ce>
  		else
  			ullLeftTimeRan = uiLeftCapturedTime;
 8002fde:	4b43      	ldr	r3, [pc, #268]	@ (80030ec <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	469a      	mov	sl, r3
 8002fe6:	4693      	mov	fp, r2
 8002fe8:	4b42      	ldr	r3, [pc, #264]	@ (80030f4 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8002fea:	e9c3 ab00 	strd	sl, fp, [r3]
  		__HAL_TIM_SET_COUNTER(htim, 0);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  		uiLeftTimeBurst = 0;
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80030f0 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
  		fLeftSpeed = 10.0f/(ullLeftTimeRan/1000000.0f); //velocidade em mm/s
 8002ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80030f4 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	f7fd ff2f 	bl	8000e68 <__aeabi_ul2f>
 800300a:	ee06 0a90 	vmov	s13, r0
 800300e:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 80030f8 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8003012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003016:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800301a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301e:	4b37      	ldr	r3, [pc, #220]	@ (80030fc <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8003020:	edc3 7a00 	vstr	s15, [r3]
  	}

  if (htim == pTimFreqFixa_dir)
 8003024:	4b36      	ldr	r3, [pc, #216]	@ (8003100 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	429a      	cmp	r2, r3
 800302c:	d13d      	bne.n	80030aa <HAL_TIM_IC_CaptureCallback+0x28a>
  	{
  		uiRightCapturedTime =  HAL_TIM_ReadCapturedValue(htim,  TIM_CHANNEL_1);
 800302e:	2100      	movs	r1, #0
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f006 fb6f 	bl	8009714 <HAL_TIM_ReadCapturedValue>
 8003036:	4603      	mov	r3, r0
 8003038:	4a32      	ldr	r2, [pc, #200]	@ (8003104 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800303a:	6013      	str	r3, [r2, #0]
  		if (uiRightTimeBurst != 0)
 800303c:	4b32      	ldr	r3, [pc, #200]	@ (8003108 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00f      	beq.n	8003064 <HAL_TIM_IC_CaptureCallback+0x244>
  		{
  			ullRightTimeRan = uiRightCapturedTime + uiRightTimeBurst*10000;
 8003044:	4b30      	ldr	r3, [pc, #192]	@ (8003108 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f242 7210 	movw	r2, #10000	@ 0x2710
 800304c:	fb03 f202 	mul.w	r2, r3, r2
 8003050:	4b2c      	ldr	r3, [pc, #176]	@ (8003104 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4413      	add	r3, r2
 8003056:	2200      	movs	r2, #0
 8003058:	4698      	mov	r8, r3
 800305a:	4691      	mov	r9, r2
 800305c:	4b2b      	ldr	r3, [pc, #172]	@ (800310c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800305e:	e9c3 8900 	strd	r8, r9, [r3]
 8003062:	e007      	b.n	8003074 <HAL_TIM_IC_CaptureCallback+0x254>
  		}
  		else
  		{
  			ullRightTimeRan = uiRightCapturedTime;
 8003064:	4b27      	ldr	r3, [pc, #156]	@ (8003104 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2200      	movs	r2, #0
 800306a:	461c      	mov	r4, r3
 800306c:	4615      	mov	r5, r2
 800306e:	4b27      	ldr	r3, [pc, #156]	@ (800310c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003070:	e9c3 4500 	strd	r4, r5, [r3]
  		}
  		__HAL_TIM_SET_COUNTER(htim, 0);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2200      	movs	r2, #0
 800307a:	625a      	str	r2, [r3, #36]	@ 0x24
  		uiRightTimeBurst = 0;
 800307c:	4b22      	ldr	r3, [pc, #136]	@ (8003108 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
  		fRightSpeed = 10.0f/(ullRightTimeRan/1000000.0f); //velocidade em mm/s
 8003082:	4b22      	ldr	r3, [pc, #136]	@ (800310c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	f7fd feec 	bl	8000e68 <__aeabi_ul2f>
 8003090:	ee06 0a90 	vmov	s13, r0
 8003094:	eddf 7a18 	vldr	s15, [pc, #96]	@ 80030f8 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8003098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800309c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003110 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80030a6:	edc3 7a00 	vstr	s15, [r3]
  	}
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b4:	20000008 	.word	0x20000008
 80030b8:	20000404 	.word	0x20000404
 80030bc:	20000408 	.word	0x20000408
 80030c0:	2000040a 	.word	0x2000040a
 80030c4:	20000b30 	.word	0x20000b30
 80030c8:	20000405 	.word	0x20000405
 80030cc:	2000040c 	.word	0x2000040c
 80030d0:	2000040e 	.word	0x2000040e
 80030d4:	20000b34 	.word	0x20000b34
 80030d8:	20000406 	.word	0x20000406
 80030dc:	20000410 	.word	0x20000410
 80030e0:	20000412 	.word	0x20000412
 80030e4:	20000b38 	.word	0x20000b38
 80030e8:	2000001c 	.word	0x2000001c
 80030ec:	200003d8 	.word	0x200003d8
 80030f0:	200003e0 	.word	0x200003e0
 80030f4:	200003e8 	.word	0x200003e8
 80030f8:	49742400 	.word	0x49742400
 80030fc:	200003f8 	.word	0x200003f8
 8003100:	20000020 	.word	0x20000020
 8003104:	200003dc 	.word	0x200003dc
 8003108:	200003e4 	.word	0x200003e4
 800310c:	200003f0 	.word	0x200003f0
 8003110:	200003fc 	.word	0x200003fc

08003114 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==GPIO_PIN_7){
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	2b80      	cmp	r3, #128	@ 0x80
 8003122:	d10b      	bne.n	800313c <HAL_GPIO_EXTI_Callback+0x28>
		vMotorsSetPWM(left, 1, 1);
 8003124:	2101      	movs	r1, #1
 8003126:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800312a:	2000      	movs	r0, #0
 800312c:	f000 f846 	bl	80031bc <vMotorsSetPWM>
		vMotorsSetPWM(right, 1, 0);
 8003130:	2100      	movs	r1, #0
 8003132:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003136:	2001      	movs	r0, #1
 8003138:	f000 f840 	bl	80031bc <vMotorsSetPWM>
	}

	if(GPIO_Pin==GPIO_PIN_5){
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	2b20      	cmp	r3, #32
 8003140:	d105      	bne.n	800314e <HAL_GPIO_EXTI_Callback+0x3a>
		vMotorsSetOff(left);
 8003142:	2000      	movs	r0, #0
 8003144:	f000 f8b8 	bl	80032b8 <vMotorsSetOff>
		vMotorsSetOff(right);
 8003148:	2001      	movs	r0, #1
 800314a:	f000 f8b5 	bl	80032b8 <vMotorsSetOff>
	}

}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800315a:	b672      	cpsid	i
}
 800315c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800315e:	bf00      	nop
 8003160:	e7fd      	b.n	800315e <Error_Handler+0x8>
	...

08003164 <vMotorsInit>:
TIM_HandleTypeDef* pTimPWM;
TIM_HandleTypeDef* pTimDuration;
unsigned char ucDurationCounter;
unsigned short int usTimeOn;

void vMotorsInit(TIM_HandleTypeDef* htimPWM, TIM_HandleTypeDef* htimTimer) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
	pTimPWM = htimPWM;
 800316e:	4a0f      	ldr	r2, [pc, #60]	@ (80031ac <vMotorsInit+0x48>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6013      	str	r3, [r2, #0]
	pTimDuration =htimPWM;
 8003174:	4a0e      	ldr	r2, [pc, #56]	@ (80031b0 <vMotorsInit+0x4c>)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pTimPWM, TIM_CHANNEL_1);
 800317a:	4b0c      	ldr	r3, [pc, #48]	@ (80031ac <vMotorsInit+0x48>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f005 fbed 	bl	8008960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pTimPWM, TIM_CHANNEL_2);
 8003186:	4b09      	ldr	r3, [pc, #36]	@ (80031ac <vMotorsInit+0x48>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2104      	movs	r1, #4
 800318c:	4618      	mov	r0, r3
 800318e:	f005 fbe7 	bl	8008960 <HAL_TIM_PWM_Start>
	//pTimPWM->Instance->CCR1 = 0;
	HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8003192:	2032      	movs	r0, #50	@ 0x32
 8003194:	f001 fed7 	bl	8004f46 <HAL_NVIC_DisableIRQ>

	ucDurationCounter = 0;
 8003198:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <vMotorsInit+0x50>)
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
	usTimeOn =0;
 800319e:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <vMotorsInit+0x54>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	801a      	strh	r2, [r3, #0]

}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000b40 	.word	0x20000b40
 80031b0:	20000b44 	.word	0x20000b44
 80031b4:	20000b48 	.word	0x20000b48
 80031b8:	20000b4a 	.word	0x20000b4a

080031bc <vMotorsSetPWM>:

//char: motor da direita ou esquerda
//float: PWM de 0 a 1
void vMotorsSetPWM(char motor, float PWM, char rotation) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	ed87 0a00 	vstr	s0, [r7]
 80031c8:	460a      	mov	r2, r1
 80031ca:	71fb      	strb	r3, [r7, #7]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71bb      	strb	r3, [r7, #6]
	if (motor == left) {
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d131      	bne.n	800323a <vMotorsSetPWM+0x7e>
		pTimPWM->Instance->CCR2 = (PWM*1000) - 1;
 80031d6:	edd7 7a00 	vldr	s15, [r7]
 80031da:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80032ac <vMotorsSetPWM+0xf0>
 80031de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031ea:	4b31      	ldr	r3, [pc, #196]	@ (80032b0 <vMotorsSetPWM+0xf4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031f4:	ee17 2a90 	vmov	r2, s15
 80031f8:	639a      	str	r2, [r3, #56]	@ 0x38

		if (rotation) {
 80031fa:	79bb      	ldrb	r3, [r7, #6]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00c      	beq.n	800321a <vMotorsSetPWM+0x5e>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 1);
 8003200:	2201      	movs	r2, #1
 8003202:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003206:	482b      	ldr	r0, [pc, #172]	@ (80032b4 <vMotorsSetPWM+0xf8>)
 8003208:	f002 fb7a 	bl	8005900 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 0);
 800320c:	2200      	movs	r2, #0
 800320e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003212:	4828      	ldr	r0, [pc, #160]	@ (80032b4 <vMotorsSetPWM+0xf8>)
 8003214:	f002 fb74 	bl	8005900 <HAL_GPIO_WritePin>
		} else if (!rotation) {
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 1);
		}
	}
}
 8003218:	e043      	b.n	80032a2 <vMotorsSetPWM+0xe6>
		} else if (!rotation) {
 800321a:	79bb      	ldrb	r3, [r7, #6]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d140      	bne.n	80032a2 <vMotorsSetPWM+0xe6>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 0);
 8003220:	2200      	movs	r2, #0
 8003222:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003226:	4823      	ldr	r0, [pc, #140]	@ (80032b4 <vMotorsSetPWM+0xf8>)
 8003228:	f002 fb6a 	bl	8005900 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 1);
 800322c:	2201      	movs	r2, #1
 800322e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003232:	4820      	ldr	r0, [pc, #128]	@ (80032b4 <vMotorsSetPWM+0xf8>)
 8003234:	f002 fb64 	bl	8005900 <HAL_GPIO_WritePin>
}
 8003238:	e033      	b.n	80032a2 <vMotorsSetPWM+0xe6>
	} else if (motor == right) {
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d130      	bne.n	80032a2 <vMotorsSetPWM+0xe6>
		pTimPWM->Instance->CCR1 = (PWM*1000) - 1;
 8003240:	edd7 7a00 	vldr	s15, [r7]
 8003244:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80032ac <vMotorsSetPWM+0xf0>
 8003248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800324c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003250:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003254:	4b16      	ldr	r3, [pc, #88]	@ (80032b0 <vMotorsSetPWM+0xf4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800325e:	ee17 2a90 	vmov	r2, s15
 8003262:	635a      	str	r2, [r3, #52]	@ 0x34
		if (rotation) {
 8003264:	79bb      	ldrb	r3, [r7, #6]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <vMotorsSetPWM+0xc8>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 1);
 800326a:	2201      	movs	r2, #1
 800326c:	2180      	movs	r1, #128	@ 0x80
 800326e:	4811      	ldr	r0, [pc, #68]	@ (80032b4 <vMotorsSetPWM+0xf8>)
 8003270:	f002 fb46 	bl	8005900 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);
 8003274:	2200      	movs	r2, #0
 8003276:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800327a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800327e:	f002 fb3f 	bl	8005900 <HAL_GPIO_WritePin>
}
 8003282:	e00e      	b.n	80032a2 <vMotorsSetPWM+0xe6>
		} else if (!rotation) {
 8003284:	79bb      	ldrb	r3, [r7, #6]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10b      	bne.n	80032a2 <vMotorsSetPWM+0xe6>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2180      	movs	r1, #128	@ 0x80
 800328e:	4809      	ldr	r0, [pc, #36]	@ (80032b4 <vMotorsSetPWM+0xf8>)
 8003290:	f002 fb36 	bl	8005900 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 1);
 8003294:	2201      	movs	r2, #1
 8003296:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800329a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800329e:	f002 fb2f 	bl	8005900 <HAL_GPIO_WritePin>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	447a0000 	.word	0x447a0000
 80032b0:	20000b40 	.word	0x20000b40
 80032b4:	48000400 	.word	0x48000400

080032b8 <vMotorsSetOff>:
	HAL_NVIC_EnableIRQ(TIM5_IRQn);

//	vMotorsSetOff(motor);
}

void vMotorsSetOff(char motor) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	71fb      	strb	r3, [r7, #7]
	if (motor == left) {
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d111      	bne.n	80032ec <vMotorsSetOff+0x34>
		pTimPWM->Instance->CCR2 = 0;
 80032c8:	4b14      	ldr	r3, [pc, #80]	@ (800331c <vMotorsSetOff+0x64>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	639a      	str	r2, [r3, #56]	@ 0x38

		HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 0);
 80032d2:	2200      	movs	r2, #0
 80032d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032d8:	4811      	ldr	r0, [pc, #68]	@ (8003320 <vMotorsSetOff+0x68>)
 80032da:	f002 fb11 	bl	8005900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032e4:	480e      	ldr	r0, [pc, #56]	@ (8003320 <vMotorsSetOff+0x68>)
 80032e6:	f002 fb0b 	bl	8005900 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
		HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);

	}
}
 80032ea:	e013      	b.n	8003314 <vMotorsSetOff+0x5c>
	} else if (motor == right) {
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d110      	bne.n	8003314 <vMotorsSetOff+0x5c>
		pTimPWM->Instance->CCR1 = 0;
 80032f2:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <vMotorsSetOff+0x64>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2200      	movs	r2, #0
 80032fa:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2180      	movs	r1, #128	@ 0x80
 8003300:	4807      	ldr	r0, [pc, #28]	@ (8003320 <vMotorsSetOff+0x68>)
 8003302:	f002 fafd 	bl	8005900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);
 8003306:	2200      	movs	r2, #0
 8003308:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800330c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003310:	f002 faf6 	bl	8005900 <HAL_GPIO_WritePin>
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000b40 	.word	0x20000b40
 8003320:	48000400 	.word	0x48000400

08003324 <vMotorsDurationCallback>:
//						many interruptions for stop the motor based on usTimeOn (duration set) then	   //
//						stops the motors.															   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vMotorsDurationCallback(){
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
	if((ucDurationCounter*10)==usTimeOn){
 8003328:	4b11      	ldr	r3, [pc, #68]	@ (8003370 <vMotorsDurationCallback+0x4c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	461a      	mov	r2, r3
 8003338:	4b0e      	ldr	r3, [pc, #56]	@ (8003374 <vMotorsDurationCallback+0x50>)
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d10f      	bne.n	8003360 <vMotorsDurationCallback+0x3c>
		vMotorsSetOff(left);
 8003340:	2000      	movs	r0, #0
 8003342:	f7ff ffb9 	bl	80032b8 <vMotorsSetOff>
		vMotorsSetOff(right);
 8003346:	2001      	movs	r0, #1
 8003348:	f7ff ffb6 	bl	80032b8 <vMotorsSetOff>
		usTimeOn = 0;
 800334c:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <vMotorsDurationCallback+0x50>)
 800334e:	2200      	movs	r2, #0
 8003350:	801a      	strh	r2, [r3, #0]
		ucDurationCounter = 0;
 8003352:	4b07      	ldr	r3, [pc, #28]	@ (8003370 <vMotorsDurationCallback+0x4c>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8003358:	2032      	movs	r0, #50	@ 0x32
 800335a:	f001 fdf4 	bl	8004f46 <HAL_NVIC_DisableIRQ>
	}
	else
	{
		ucDurationCounter++;
	}
}
 800335e:	e005      	b.n	800336c <vMotorsDurationCallback+0x48>
		ucDurationCounter++;
 8003360:	4b03      	ldr	r3, [pc, #12]	@ (8003370 <vMotorsDurationCallback+0x4c>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	b2da      	uxtb	r2, r3
 8003368:	4b01      	ldr	r3, [pc, #4]	@ (8003370 <vMotorsDurationCallback+0x4c>)
 800336a:	701a      	strb	r2, [r3, #0]
}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000b48 	.word	0x20000b48
 8003374:	20000b4a 	.word	0x20000b4a

08003378 <vOdometriaInit>:
#define PI 3.141592654
#define BITOLA 0.13325 // [m]

odometry_state current_state;

void vOdometriaInit() {
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
	current_state.distance_traveled = 0;
 800337c:	4b0a      	ldr	r3, [pc, #40]	@ (80033a8 <vOdometriaInit+0x30>)
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
	current_state.angle_orientation = 0;
 8003384:	4b08      	ldr	r3, [pc, #32]	@ (80033a8 <vOdometriaInit+0x30>)
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	605a      	str	r2, [r3, #4]
	current_state.x = 0;
 800338c:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <vOdometriaInit+0x30>)
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
	current_state.y = 0;
 8003394:	4b04      	ldr	r3, [pc, #16]	@ (80033a8 <vOdometriaInit+0x30>)
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	60da      	str	r2, [r3, #12]
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000b4c 	.word	0x20000b4c
 80033ac:	00000000 	.word	0x00000000

080033b0 <vCountOdometria>:

void vCountOdometria(float d_left, float d_right) {
 80033b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	ed87 0a01 	vstr	s0, [r7, #4]
 80033bc:	edc7 0a00 	vstr	s1, [r7]
	float diff_distance;
	diff_distance = (d_left + d_right)/2;
 80033c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80033c4:	edd7 7a00 	vldr	s15, [r7]
 80033c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033cc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80033d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033d4:	edc7 7a03 	vstr	s15, [r7, #12]
	current_state.distance_traveled += diff_distance;
 80033d8:	4b63      	ldr	r3, [pc, #396]	@ (8003568 <vCountOdometria+0x1b8>)
 80033da:	ed93 7a00 	vldr	s14, [r3]
 80033de:	edd7 7a03 	vldr	s15, [r7, #12]
 80033e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e6:	4b60      	ldr	r3, [pc, #384]	@ (8003568 <vCountOdometria+0x1b8>)
 80033e8:	edc3 7a00 	vstr	s15, [r3]

	float diff_angle;
	diff_angle = (d_right - d_left)/BITOLA; //rad
 80033ec:	ed97 7a00 	vldr	s14, [r7]
 80033f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f8:	ee17 0a90 	vmov	r0, s15
 80033fc:	f7fd f8cc 	bl	8000598 <__aeabi_f2d>
 8003400:	a357      	add	r3, pc, #348	@ (adr r3, 8003560 <vCountOdometria+0x1b0>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f7fd fa49 	bl	800089c <__aeabi_ddiv>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	f7fd fc11 	bl	8000c38 <__aeabi_d2f>
 8003416:	4603      	mov	r3, r0
 8003418:	60bb      	str	r3, [r7, #8]

	current_state.x += diff_distance*cos(current_state.angle_orientation + diff_angle/2);
 800341a:	4b53      	ldr	r3, [pc, #332]	@ (8003568 <vCountOdometria+0x1b8>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd f8ba 	bl	8000598 <__aeabi_f2d>
 8003424:	4604      	mov	r4, r0
 8003426:	460d      	mov	r5, r1
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7fd f8b5 	bl	8000598 <__aeabi_f2d>
 800342e:	4680      	mov	r8, r0
 8003430:	4689      	mov	r9, r1
 8003432:	4b4d      	ldr	r3, [pc, #308]	@ (8003568 <vCountOdometria+0x1b8>)
 8003434:	ed93 7a01 	vldr	s14, [r3, #4]
 8003438:	edd7 6a02 	vldr	s13, [r7, #8]
 800343c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003440:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003448:	ee17 0a90 	vmov	r0, s15
 800344c:	f7fd f8a4 	bl	8000598 <__aeabi_f2d>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	ec43 2b10 	vmov	d0, r2, r3
 8003458:	f00c f872 	bl	800f540 <cos>
 800345c:	ec53 2b10 	vmov	r2, r3, d0
 8003460:	4640      	mov	r0, r8
 8003462:	4649      	mov	r1, r9
 8003464:	f7fd f8f0 	bl	8000648 <__aeabi_dmul>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4620      	mov	r0, r4
 800346e:	4629      	mov	r1, r5
 8003470:	f7fc ff34 	bl	80002dc <__adddf3>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	f7fd fbdc 	bl	8000c38 <__aeabi_d2f>
 8003480:	4603      	mov	r3, r0
 8003482:	4a39      	ldr	r2, [pc, #228]	@ (8003568 <vCountOdometria+0x1b8>)
 8003484:	6093      	str	r3, [r2, #8]
	current_state.y += diff_distance*sin(current_state.angle_orientation + diff_angle/2);
 8003486:	4b38      	ldr	r3, [pc, #224]	@ (8003568 <vCountOdometria+0x1b8>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd f884 	bl	8000598 <__aeabi_f2d>
 8003490:	4604      	mov	r4, r0
 8003492:	460d      	mov	r5, r1
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7fd f87f 	bl	8000598 <__aeabi_f2d>
 800349a:	4680      	mov	r8, r0
 800349c:	4689      	mov	r9, r1
 800349e:	4b32      	ldr	r3, [pc, #200]	@ (8003568 <vCountOdometria+0x1b8>)
 80034a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80034a4:	edd7 6a02 	vldr	s13, [r7, #8]
 80034a8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80034ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b4:	ee17 0a90 	vmov	r0, s15
 80034b8:	f7fd f86e 	bl	8000598 <__aeabi_f2d>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	ec43 2b10 	vmov	d0, r2, r3
 80034c4:	f00c f890 	bl	800f5e8 <sin>
 80034c8:	ec53 2b10 	vmov	r2, r3, d0
 80034cc:	4640      	mov	r0, r8
 80034ce:	4649      	mov	r1, r9
 80034d0:	f7fd f8ba 	bl	8000648 <__aeabi_dmul>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4620      	mov	r0, r4
 80034da:	4629      	mov	r1, r5
 80034dc:	f7fc fefe 	bl	80002dc <__adddf3>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	f7fd fba6 	bl	8000c38 <__aeabi_d2f>
 80034ec:	4603      	mov	r3, r0
 80034ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003568 <vCountOdometria+0x1b8>)
 80034f0:	60d3      	str	r3, [r2, #12]
	current_state.angle_orientation += diff_angle;
 80034f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003568 <vCountOdometria+0x1b8>)
 80034f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80034f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80034fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003500:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <vCountOdometria+0x1b8>)
 8003502:	edc3 7a01 	vstr	s15, [r3, #4]

	//correção do explode
	if (fabs(current_state.x) > 100 || fabs(current_state.y) > 100 || fabs(current_state.angle_orientation) > 200)
 8003506:	4b18      	ldr	r3, [pc, #96]	@ (8003568 <vCountOdometria+0x1b8>)
 8003508:	edd3 7a02 	vldr	s15, [r3, #8]
 800350c:	eef0 7ae7 	vabs.f32	s15, s15
 8003510:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800356c <vCountOdometria+0x1bc>
 8003514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351c:	dc18      	bgt.n	8003550 <vCountOdometria+0x1a0>
 800351e:	4b12      	ldr	r3, [pc, #72]	@ (8003568 <vCountOdometria+0x1b8>)
 8003520:	edd3 7a03 	vldr	s15, [r3, #12]
 8003524:	eef0 7ae7 	vabs.f32	s15, s15
 8003528:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800356c <vCountOdometria+0x1bc>
 800352c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003534:	dc0c      	bgt.n	8003550 <vCountOdometria+0x1a0>
 8003536:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <vCountOdometria+0x1b8>)
 8003538:	edd3 7a01 	vldr	s15, [r3, #4]
 800353c:	eef0 7ae7 	vabs.f32	s15, s15
 8003540:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003570 <vCountOdometria+0x1c0>
 8003544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354c:	dc00      	bgt.n	8003550 <vCountOdometria+0x1a0>
		vOdometriaInit();
}
 800354e:	e001      	b.n	8003554 <vCountOdometria+0x1a4>
		vOdometriaInit();
 8003550:	f7ff ff12 	bl	8003378 <vOdometriaInit>
}
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800355e:	bf00      	nop
 8003560:	04189375 	.word	0x04189375
 8003564:	3fc10e56 	.word	0x3fc10e56
 8003568:	20000b4c 	.word	0x20000b4c
 800356c:	42c80000 	.word	0x42c80000
 8003570:	43480000 	.word	0x43480000
 8003574:	00000000 	.word	0x00000000

08003578 <fRadToDegree>:

float fDegreeToRad(float angle) {
	return (angle * PI)/180;
}

float fRadToDegree(float angle) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (angle * 180)/PI;
 8003582:	edd7 7a01 	vldr	s15, [r7, #4]
 8003586:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80035c8 <fRadToDegree+0x50>
 800358a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800358e:	ee17 0a90 	vmov	r0, s15
 8003592:	f7fd f801 	bl	8000598 <__aeabi_f2d>
 8003596:	a30a      	add	r3, pc, #40	@ (adr r3, 80035c0 <fRadToDegree+0x48>)
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f7fd f97e 	bl	800089c <__aeabi_ddiv>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	f7fd fb46 	bl	8000c38 <__aeabi_d2f>
 80035ac:	4603      	mov	r3, r0
 80035ae:	ee07 3a90 	vmov	s15, r3
}
 80035b2:	eeb0 0a67 	vmov.f32	s0, s15
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	f3af 8000 	nop.w
 80035c0:	54524550 	.word	0x54524550
 80035c4:	400921fb 	.word	0x400921fb
 80035c8:	43340000 	.word	0x43340000

080035cc <xGetCurrentState>:

odometry_state xGetCurrentState() {
 80035cc:	b490      	push	{r4, r7}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
	return current_state;
 80035d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003610 <xGetCurrentState+0x44>)
 80035d4:	f107 0410 	add.w	r4, r7, #16
 80035d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035de:	6938      	ldr	r0, [r7, #16]
 80035e0:	6979      	ldr	r1, [r7, #20]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	ee06 0a10 	vmov	s12, r0
 80035ea:	ee06 1a90 	vmov	s13, r1
 80035ee:	ee07 2a10 	vmov	s14, r2
 80035f2:	ee07 3a90 	vmov	s15, r3
}
 80035f6:	eeb0 0a46 	vmov.f32	s0, s12
 80035fa:	eef0 0a66 	vmov.f32	s1, s13
 80035fe:	eeb0 1a47 	vmov.f32	s2, s14
 8003602:	eef0 1a67 	vmov.f32	s3, s15
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bc90      	pop	{r4, r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000b4c 	.word	0x20000b4c

08003614 <vPidInit>:
/* Method description: Initialize the PID controller*/
/* Input params:       n/a                          */
/* Output params:      n/a                          */
/* ************************************************ */
pid_data_type vPidInit(pid_data_type xPidConfig, float fKp, float fKi, float fKd, unsigned short usIntSizeMs, float fOutputSaturation)
{
 8003614:	b084      	sub	sp, #16
 8003616:	b580      	push	{r7, lr}
 8003618:	b088      	sub	sp, #32
 800361a:	af00      	add	r7, sp, #0
 800361c:	6178      	str	r0, [r7, #20]
 800361e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8003622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003626:	ed87 0a04 	vstr	s0, [r7, #16]
 800362a:	edc7 0a03 	vstr	s1, [r7, #12]
 800362e:	ed87 1a02 	vstr	s2, [r7, #8]
 8003632:	edc7 1a01 	vstr	s3, [r7, #4]
	xPidConfig.fKp = fKp;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
	xPidConfig.fKd = fKd;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	637b      	str	r3, [r7, #52]	@ 0x34
	xPidConfig.fKi = fKi;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	633b      	str	r3, [r7, #48]	@ 0x30
	xPidConfig.fError_previous = 0;
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	63bb      	str	r3, [r7, #56]	@ 0x38
	xPidConfig.fError_sum = 0.0;
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// Saturates Integrator size (up to 10 s)
	if((usIntSizeMs/UPDATE_RATE_MS)> INTEGRATOR_MAX_SIZE)
 800364e:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8003652:	f242 7273 	movw	r2, #10099	@ 0x2773
 8003656:	4293      	cmp	r3, r2
 8003658:	d903      	bls.n	8003662 <vPidInit+0x4e>
	  usIntSizeMs = INTEGRATOR_MAX_SIZE * UPDATE_RATE_MS;
 800365a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800365e:	f8a7 31e8 	strh.w	r3, [r7, #488]	@ 0x1e8

	xPidConfig.usIntegratorSize = usIntSizeMs/UPDATE_RATE_MS;
 8003662:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8003666:	4a17      	ldr	r2, [pc, #92]	@ (80036c4 <vPidInit+0xb0>)
 8003668:	fba2 2303 	umull	r2, r3, r2, r3
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	b29b      	uxth	r3, r3
 8003670:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

	xPidConfig.fOutputSaturation = fOutputSaturation;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	647b      	str	r3, [r7, #68]	@ 0x44
	xPidConfig.usIntegratorCount = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	for (int i =0; i<INTEGRATOR_MAX_SIZE; i++){
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	e00b      	b.n	800369c <vPidInit+0x88>
		xPidConfig.fIntegratorBuffer[i] = 0;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	330a      	adds	r3, #10
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	3328      	adds	r3, #40	@ 0x28
 800368c:	443b      	add	r3, r7
 800368e:	3308      	adds	r3, #8
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
	for (int i =0; i<INTEGRATOR_MAX_SIZE; i++){
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3301      	adds	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b63      	cmp	r3, #99	@ 0x63
 80036a0:	ddf0      	ble.n	8003684 <vPidInit+0x70>
	}
	return xPidConfig;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036aa:	f44f 72de 	mov.w	r2, #444	@ 0x1bc
 80036ae:	4619      	mov	r1, r3
 80036b0:	f00a f8c1 	bl	800d836 <memcpy>
}
 80036b4:	6978      	ldr	r0, [r7, #20]
 80036b6:	3720      	adds	r7, #32
 80036b8:	46bd      	mov	sp, r7
 80036ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036be:	b004      	add	sp, #16
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	51eb851f 	.word	0x51eb851f

080036c8 <fPidUpdateData>:
/*                     fReferenceValue: Value used as */
/*                     control reference              */
/* Output params:      float: New Control effort      */
/* ************************************************** */
float fPidUpdateData(pid_data_type xPidConfig, float fSensorValue, float fSetValue)
{
 80036c8:	b084      	sub	sp, #16
 80036ca:	b5b0      	push	{r4, r5, r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	f107 0418 	add.w	r4, r7, #24
 80036d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80036d8:	ed87 0a01 	vstr	s0, [r7, #4]
 80036dc:	edc7 0a00 	vstr	s1, [r7]
//	float fError, fDifference, fOut;

	// Proportional error
	xPidConfig.fError = fSetValue - fSensorValue;
 80036e0:	ed97 7a00 	vldr	s14, [r7]
 80036e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ec:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	//Ingtegral error
	xPidConfig.fError_sum = xPidConfig.fError_sum - xPidConfig.fIntegratorBuffer[xPidConfig.usIntegratorCount] + xPidConfig.fError;
 80036f0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80036f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80036f8:	330a      	adds	r3, #10
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	3318      	adds	r3, #24
 80036fe:	443b      	add	r3, r7
 8003700:	3304      	adds	r3, #4
 8003702:	edd3 7a00 	vldr	s15, [r3]
 8003706:	ee37 7a67 	vsub.f32	s14, s14, s15
 800370a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800370e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003712:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	xPidConfig.fIntegratorBuffer[xPidConfig.usIntegratorCount] = xPidConfig.fError;
 8003716:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800371a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800371c:	330a      	adds	r3, #10
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	3318      	adds	r3, #24
 8003722:	443b      	add	r3, r7
 8003724:	3304      	adds	r3, #4
 8003726:	601a      	str	r2, [r3, #0]

	if(++xPidConfig.usIntegratorCount >= xPidConfig.usIntegratorSize)
 8003728:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800372c:	3301      	adds	r3, #1
 800372e:	b29b      	uxth	r3, r3
 8003730:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003734:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8003738:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800373a:	429a      	cmp	r2, r3
 800373c:	d302      	bcc.n	8003744 <fPidUpdateData+0x7c>
		xPidConfig.usIntegratorCount = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

	// Differential error
	xPidConfig.fDifference = (xPidConfig.fError - xPidConfig.fError_previous);
 8003744:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003748:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800374c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003750:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	xPidConfig.fOut = xPidConfig.fKp * xPidConfig.fError
 8003754:	ed97 7a06 	vldr	s14, [r7, #24]
 8003758:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800375c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003760:	ee17 0a90 	vmov	r0, s15
 8003764:	f7fc ff18 	bl	8000598 <__aeabi_f2d>
 8003768:	4604      	mov	r4, r0
 800376a:	460d      	mov	r5, r1
		 + xPidConfig.fKi * xPidConfig.fError_sum * UPDATE_RATE
 800376c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003770:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003778:	ee17 0a90 	vmov	r0, s15
 800377c:	f7fc ff0c 	bl	8000598 <__aeabi_f2d>
 8003780:	a327      	add	r3, pc, #156	@ (adr r3, 8003820 <fPidUpdateData+0x158>)
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	f7fc ff5f 	bl	8000648 <__aeabi_dmul>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4620      	mov	r0, r4
 8003790:	4629      	mov	r1, r5
 8003792:	f7fc fda3 	bl	80002dc <__adddf3>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4614      	mov	r4, r2
 800379c:	461d      	mov	r5, r3
		 + xPidConfig.fKd * xPidConfig.fDifference / UPDATE_RATE;
 800379e:	ed97 7a08 	vldr	s14, [r7, #32]
 80037a2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80037a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037aa:	ee17 0a90 	vmov	r0, s15
 80037ae:	f7fc fef3 	bl	8000598 <__aeabi_f2d>
 80037b2:	a31b      	add	r3, pc, #108	@ (adr r3, 8003820 <fPidUpdateData+0x158>)
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f7fd f870 	bl	800089c <__aeabi_ddiv>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4620      	mov	r0, r4
 80037c2:	4629      	mov	r1, r5
 80037c4:	f7fc fd8a 	bl	80002dc <__adddf3>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4610      	mov	r0, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	f7fd fa32 	bl	8000c38 <__aeabi_d2f>
 80037d4:	4603      	mov	r3, r0
	xPidConfig.fOut = xPidConfig.fKp * xPidConfig.fError
 80037d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

	xPidConfig.fError_previous = xPidConfig.fError;
 80037d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24

    // Output Saturation
//	if(isnan(fOut))
//		fOut=0;
	if(xPidConfig.fOut > xPidConfig.fOutputSaturation)
 80037dc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80037e0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80037e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ec:	dd02      	ble.n	80037f4 <fPidUpdateData+0x12c>
		xPidConfig.fOut = xPidConfig.fOutputSaturation;
 80037ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037f2:	e009      	b.n	8003808 <fPidUpdateData+0x140>
	else
		if (xPidConfig.fOut < 0)
 80037f4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80037f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003800:	d502      	bpl.n	8003808 <fPidUpdateData+0x140>
			xPidConfig.fOut = 0;
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	63fb      	str	r3, [r7, #60]	@ 0x3c

	return xPidConfig.fOut;
 8003808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800380a:	ee07 3a90 	vmov	s15, r3
}
 800380e:	eeb0 0a67 	vmov.f32	s0, s15
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800381a:	b004      	add	sp, #16
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	9999999a 	.word	0x9999999a
 8003824:	3fb99999 	.word	0x3fb99999

08003828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382e:	4b0f      	ldr	r3, [pc, #60]	@ (800386c <HAL_MspInit+0x44>)
 8003830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003832:	4a0e      	ldr	r2, [pc, #56]	@ (800386c <HAL_MspInit+0x44>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6613      	str	r3, [r2, #96]	@ 0x60
 800383a:	4b0c      	ldr	r3, [pc, #48]	@ (800386c <HAL_MspInit+0x44>)
 800383c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	607b      	str	r3, [r7, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	4b09      	ldr	r3, [pc, #36]	@ (800386c <HAL_MspInit+0x44>)
 8003848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384a:	4a08      	ldr	r2, [pc, #32]	@ (800386c <HAL_MspInit+0x44>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003850:	6593      	str	r3, [r2, #88]	@ 0x58
 8003852:	4b06      	ldr	r3, [pc, #24]	@ (800386c <HAL_MspInit+0x44>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800385e:	f003 ffcb 	bl	80077f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000

08003870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003874:	bf00      	nop
 8003876:	e7fd      	b.n	8003874 <NMI_Handler+0x4>

08003878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <HardFault_Handler+0x4>

08003880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003884:	bf00      	nop
 8003886:	e7fd      	b.n	8003884 <MemManage_Handler+0x4>

08003888 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800388c:	bf00      	nop
 800388e:	e7fd      	b.n	800388c <BusFault_Handler+0x4>

08003890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003894:	bf00      	nop
 8003896:	e7fd      	b.n	8003894 <UsageFault_Handler+0x4>

08003898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c6:	f001 f9d7 	bl	8004c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80038d4:	4802      	ldr	r0, [pc, #8]	@ (80038e0 <DMA1_Channel3_IRQHandler+0x10>)
 80038d6:	f001 fd34 	bl	8005342 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000304 	.word	0x20000304

080038e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80038e8:	4802      	ldr	r0, [pc, #8]	@ (80038f4 <DMA1_Channel4_IRQHandler+0x10>)
 80038ea:	f001 fd2a 	bl	8005342 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000364 	.word	0x20000364

080038f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038fc:	4803      	ldr	r0, [pc, #12]	@ (800390c <TIM1_UP_TIM16_IRQHandler+0x14>)
 80038fe:	f005 faf3 	bl	8008ee8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003902:	4803      	ldr	r0, [pc, #12]	@ (8003910 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003904:	f005 faf0 	bl	8008ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003908:	bf00      	nop
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000b60 	.word	0x20000b60
 8003910:	20000cdc 	.word	0x20000cdc

08003914 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003918:	4803      	ldr	r0, [pc, #12]	@ (8003928 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800391a:	f005 fae5 	bl	8008ee8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800391e:	4803      	ldr	r0, [pc, #12]	@ (800392c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8003920:	f005 fae2 	bl	8008ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000b60 	.word	0x20000b60
 800392c:	20000d28 	.word	0x20000d28

08003930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003934:	4802      	ldr	r0, [pc, #8]	@ (8003940 <TIM2_IRQHandler+0x10>)
 8003936:	f005 fad7 	bl	8008ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000bac 	.word	0x20000bac

08003944 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003948:	4802      	ldr	r0, [pc, #8]	@ (8003954 <TIM3_IRQHandler+0x10>)
 800394a:	f005 facd 	bl	8008ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000bf8 	.word	0x20000bf8

08003958 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800395c:	4802      	ldr	r0, [pc, #8]	@ (8003968 <I2C2_EV_IRQHandler+0x10>)
 800395e:	f002 f9af 	bl	8005cc0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	200002b0 	.word	0x200002b0

0800396c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003970:	4802      	ldr	r0, [pc, #8]	@ (800397c <I2C2_ER_IRQHandler+0x10>)
 8003972:	f002 f9bf 	bl	8005cf4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200002b0 	.word	0x200002b0

08003980 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003984:	4802      	ldr	r0, [pc, #8]	@ (8003990 <USART1_IRQHandler+0x10>)
 8003986:	f006 ff8b 	bl	800a8a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000f04 	.word	0x20000f04

08003994 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003998:	4802      	ldr	r0, [pc, #8]	@ (80039a4 <USART3_IRQHandler+0x10>)
 800399a:	f006 ff81 	bl	800a8a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000f98 	.word	0x20000f98

080039a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80039ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80039b0:	f001 ffbe 	bl	8005930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039b4:	bf00      	nop
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80039bc:	4802      	ldr	r0, [pc, #8]	@ (80039c8 <TIM5_IRQHandler+0x10>)
 80039be:	f005 fa93 	bl	8008ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000c44 	.word	0x20000c44

080039cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039d0:	4802      	ldr	r0, [pc, #8]	@ (80039dc <TIM6_DAC_IRQHandler+0x10>)
 80039d2:	f005 fa89 	bl	8008ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000c90 	.word	0x20000c90

080039e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return 1;
 80039e4:	2301      	movs	r3, #1
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <_kill>:

int _kill(int pid, int sig)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039fa:	f009 feef 	bl	800d7dc <__errno>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2216      	movs	r2, #22
 8003a02:	601a      	str	r2, [r3, #0]
  return -1;
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_exit>:

void _exit (int status)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a18:	f04f 31ff 	mov.w	r1, #4294967295
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff ffe7 	bl	80039f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a22:	bf00      	nop
 8003a24:	e7fd      	b.n	8003a22 <_exit+0x12>

08003a26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b086      	sub	sp, #24
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	e00a      	b.n	8003a4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a38:	f3af 8000 	nop.w
 8003a3c:	4601      	mov	r1, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	60ba      	str	r2, [r7, #8]
 8003a44:	b2ca      	uxtb	r2, r1
 8003a46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	dbf0      	blt.n	8003a38 <_read+0x12>
  }

  return len;
 8003a56:	687b      	ldr	r3, [r7, #4]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e009      	b.n	8003a86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	60ba      	str	r2, [r7, #8]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	3301      	adds	r3, #1
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	dbf1      	blt.n	8003a72 <_write+0x12>
  }
  return len;
 8003a8e:	687b      	ldr	r3, [r7, #4]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <_close>:

int _close(int file)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ac0:	605a      	str	r2, [r3, #4]
  return 0;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <_isatty>:

int _isatty(int file)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ad8:	2301      	movs	r3, #1
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b085      	sub	sp, #20
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b08:	4a14      	ldr	r2, [pc, #80]	@ (8003b5c <_sbrk+0x5c>)
 8003b0a:	4b15      	ldr	r3, [pc, #84]	@ (8003b60 <_sbrk+0x60>)
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b14:	4b13      	ldr	r3, [pc, #76]	@ (8003b64 <_sbrk+0x64>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <_sbrk+0x64>)
 8003b1e:	4a12      	ldr	r2, [pc, #72]	@ (8003b68 <_sbrk+0x68>)
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b22:	4b10      	ldr	r3, [pc, #64]	@ (8003b64 <_sbrk+0x64>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d207      	bcs.n	8003b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b30:	f009 fe54 	bl	800d7dc <__errno>
 8003b34:	4603      	mov	r3, r0
 8003b36:	220c      	movs	r2, #12
 8003b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	e009      	b.n	8003b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b40:	4b08      	ldr	r3, [pc, #32]	@ (8003b64 <_sbrk+0x64>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b46:	4b07      	ldr	r3, [pc, #28]	@ (8003b64 <_sbrk+0x64>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	4a05      	ldr	r2, [pc, #20]	@ (8003b64 <_sbrk+0x64>)
 8003b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20020000 	.word	0x20020000
 8003b60:	00000400 	.word	0x00000400
 8003b64:	20000b5c 	.word	0x20000b5c
 8003b68:	20001180 	.word	0x20001180

08003b6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b70:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <SystemInit+0x20>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b76:	4a05      	ldr	r2, [pc, #20]	@ (8003b8c <SystemInit+0x20>)
 8003b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b098      	sub	sp, #96	@ 0x60
 8003b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b96:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ba2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	609a      	str	r2, [r3, #8]
 8003bae:	60da      	str	r2, [r3, #12]
 8003bb0:	611a      	str	r2, [r3, #16]
 8003bb2:	615a      	str	r2, [r3, #20]
 8003bb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bb6:	1d3b      	adds	r3, r7, #4
 8003bb8:	2234      	movs	r2, #52	@ 0x34
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f009 fdac 	bl	800d71a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003bc2:	4b41      	ldr	r3, [pc, #260]	@ (8003cc8 <MX_TIM1_Init+0x138>)
 8003bc4:	4a41      	ldr	r2, [pc, #260]	@ (8003ccc <MX_TIM1_Init+0x13c>)
 8003bc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 85-1;
 8003bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8003cc8 <MX_TIM1_Init+0x138>)
 8003bca:	2254      	movs	r2, #84	@ 0x54
 8003bcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bce:	4b3e      	ldr	r3, [pc, #248]	@ (8003cc8 <MX_TIM1_Init+0x138>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8003bd4:	4b3c      	ldr	r3, [pc, #240]	@ (8003cc8 <MX_TIM1_Init+0x138>)
 8003bd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003bda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8003cc8 <MX_TIM1_Init+0x138>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003be2:	4b39      	ldr	r3, [pc, #228]	@ (8003cc8 <MX_TIM1_Init+0x138>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003be8:	4b37      	ldr	r3, [pc, #220]	@ (8003cc8 <MX_TIM1_Init+0x138>)
 8003bea:	2280      	movs	r2, #128	@ 0x80
 8003bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003bee:	4836      	ldr	r0, [pc, #216]	@ (8003cc8 <MX_TIM1_Init+0x138>)
 8003bf0:	f004 fe5e 	bl	80088b0 <HAL_TIM_PWM_Init>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003bfa:	f7ff faac 	bl	8003156 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c0e:	4619      	mov	r1, r3
 8003c10:	482d      	ldr	r0, [pc, #180]	@ (8003cc8 <MX_TIM1_Init+0x138>)
 8003c12:	f006 fbab 	bl	800a36c <HAL_TIMEx_MasterConfigSynchronization>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003c1c:	f7ff fa9b 	bl	8003156 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c20:	2360      	movs	r3, #96	@ 0x60
 8003c22:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c34:	2300      	movs	r3, #0
 8003c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003c40:	2200      	movs	r2, #0
 8003c42:	4619      	mov	r1, r3
 8003c44:	4820      	ldr	r0, [pc, #128]	@ (8003cc8 <MX_TIM1_Init+0x138>)
 8003c46:	f005 fb3b 	bl	80092c0 <HAL_TIM_PWM_ConfigChannel>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003c50:	f7ff fa81 	bl	8003156 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c54:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003c58:	2204      	movs	r2, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	481a      	ldr	r0, [pc, #104]	@ (8003cc8 <MX_TIM1_Init+0x138>)
 8003c5e:	f005 fb2f 	bl	80092c0 <HAL_TIM_PWM_ConfigChannel>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003c68:	f7ff fa75 	bl	8003156 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003c92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ca4:	1d3b      	adds	r3, r7, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4807      	ldr	r0, [pc, #28]	@ (8003cc8 <MX_TIM1_Init+0x138>)
 8003caa:	f006 fbf5 	bl	800a498 <HAL_TIMEx_ConfigBreakDeadTime>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003cb4:	f7ff fa4f 	bl	8003156 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003cb8:	4803      	ldr	r0, [pc, #12]	@ (8003cc8 <MX_TIM1_Init+0x138>)
 8003cba:	f000 fc35 	bl	8004528 <HAL_TIM_MspPostInit>

}
 8003cbe:	bf00      	nop
 8003cc0:	3760      	adds	r7, #96	@ 0x60
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000b60 	.word	0x20000b60
 8003ccc:	40012c00 	.word	0x40012c00

08003cd0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cd6:	f107 0310 	add.w	r3, r7, #16
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	609a      	str	r2, [r3, #8]
 8003ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ce4:	1d3b      	adds	r3, r7, #4
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003cee:	4b1e      	ldr	r3, [pc, #120]	@ (8003d68 <MX_TIM2_Init+0x98>)
 8003cf0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003cf4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8003cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d68 <MX_TIM2_Init+0x98>)
 8003cf8:	22a9      	movs	r2, #169	@ 0xa9
 8003cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d68 <MX_TIM2_Init+0x98>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8003d02:	4b19      	ldr	r3, [pc, #100]	@ (8003d68 <MX_TIM2_Init+0x98>)
 8003d04:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003d08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d0a:	4b17      	ldr	r3, [pc, #92]	@ (8003d68 <MX_TIM2_Init+0x98>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d10:	4b15      	ldr	r3, [pc, #84]	@ (8003d68 <MX_TIM2_Init+0x98>)
 8003d12:	2280      	movs	r2, #128	@ 0x80
 8003d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d16:	4814      	ldr	r0, [pc, #80]	@ (8003d68 <MX_TIM2_Init+0x98>)
 8003d18:	f004 fcfa 	bl	8008710 <HAL_TIM_Base_Init>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003d22:	f7ff fa18 	bl	8003156 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d2c:	f107 0310 	add.w	r3, r7, #16
 8003d30:	4619      	mov	r1, r3
 8003d32:	480d      	ldr	r0, [pc, #52]	@ (8003d68 <MX_TIM2_Init+0x98>)
 8003d34:	f005 fbd8 	bl	80094e8 <HAL_TIM_ConfigClockSource>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003d3e:	f7ff fa0a 	bl	8003156 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d4a:	1d3b      	adds	r3, r7, #4
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4806      	ldr	r0, [pc, #24]	@ (8003d68 <MX_TIM2_Init+0x98>)
 8003d50:	f006 fb0c 	bl	800a36c <HAL_TIMEx_MasterConfigSynchronization>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003d5a:	f7ff f9fc 	bl	8003156 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d5e:	bf00      	nop
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000bac 	.word	0x20000bac

08003d6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	@ 0x30
 8003d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d72:	f107 0320 	add.w	r3, r7, #32
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
 8003d7c:	609a      	str	r2, [r3, #8]
 8003d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	605a      	str	r2, [r3, #4]
 8003d94:	609a      	str	r2, [r3, #8]
 8003d96:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d98:	4b36      	ldr	r3, [pc, #216]	@ (8003e74 <MX_TIM3_Init+0x108>)
 8003d9a:	4a37      	ldr	r2, [pc, #220]	@ (8003e78 <MX_TIM3_Init+0x10c>)
 8003d9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 260-1;
 8003d9e:	4b35      	ldr	r3, [pc, #212]	@ (8003e74 <MX_TIM3_Init+0x108>)
 8003da0:	f240 1203 	movw	r2, #259	@ 0x103
 8003da4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003da6:	4b33      	ldr	r3, [pc, #204]	@ (8003e74 <MX_TIM3_Init+0x108>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003dac:	4b31      	ldr	r3, [pc, #196]	@ (8003e74 <MX_TIM3_Init+0x108>)
 8003dae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003db2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003db4:	4b2f      	ldr	r3, [pc, #188]	@ (8003e74 <MX_TIM3_Init+0x108>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dba:	4b2e      	ldr	r3, [pc, #184]	@ (8003e74 <MX_TIM3_Init+0x108>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003dc0:	482c      	ldr	r0, [pc, #176]	@ (8003e74 <MX_TIM3_Init+0x108>)
 8003dc2:	f004 fca5 	bl	8008710 <HAL_TIM_Base_Init>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003dcc:	f7ff f9c3 	bl	8003156 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dd4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003dd6:	f107 0320 	add.w	r3, r7, #32
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4825      	ldr	r0, [pc, #148]	@ (8003e74 <MX_TIM3_Init+0x108>)
 8003dde:	f005 fb83 	bl	80094e8 <HAL_TIM_ConfigClockSource>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003de8:	f7ff f9b5 	bl	8003156 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003dec:	4821      	ldr	r0, [pc, #132]	@ (8003e74 <MX_TIM3_Init+0x108>)
 8003dee:	f004 fec9 	bl	8008b84 <HAL_TIM_IC_Init>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003df8:	f7ff f9ad 	bl	8003156 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e04:	f107 0314 	add.w	r3, r7, #20
 8003e08:	4619      	mov	r1, r3
 8003e0a:	481a      	ldr	r0, [pc, #104]	@ (8003e74 <MX_TIM3_Init+0x108>)
 8003e0c:	f006 faae 	bl	800a36c <HAL_TIMEx_MasterConfigSynchronization>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003e16:	f7ff f99e 	bl	8003156 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003e1a:	230a      	movs	r3, #10
 8003e1c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4810      	ldr	r0, [pc, #64]	@ (8003e74 <MX_TIM3_Init+0x108>)
 8003e32:	f005 f9a8 	bl	8009186 <HAL_TIM_IC_ConfigChannel>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003e3c:	f7ff f98b 	bl	8003156 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	2204      	movs	r2, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	480b      	ldr	r0, [pc, #44]	@ (8003e74 <MX_TIM3_Init+0x108>)
 8003e48:	f005 f99d 	bl	8009186 <HAL_TIM_IC_ConfigChannel>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8003e52:	f7ff f980 	bl	8003156 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	2208      	movs	r2, #8
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4805      	ldr	r0, [pc, #20]	@ (8003e74 <MX_TIM3_Init+0x108>)
 8003e5e:	f005 f992 	bl	8009186 <HAL_TIM_IC_ConfigChannel>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8003e68:	f7ff f975 	bl	8003156 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003e6c:	bf00      	nop
 8003e6e:	3730      	adds	r7, #48	@ 0x30
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000bf8 	.word	0x20000bf8
 8003e78:	40000400 	.word	0x40000400

08003e7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e82:	f107 0310 	add.w	r3, r7, #16
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	609a      	str	r2, [r3, #8]
 8003e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003f10 <MX_TIM5_Init+0x94>)
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f14 <MX_TIM5_Init+0x98>)
 8003e9e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f10 <MX_TIM5_Init+0x94>)
 8003ea2:	22a9      	movs	r2, #169	@ 0xa9
 8003ea4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f10 <MX_TIM5_Init+0x94>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8003eac:	4b18      	ldr	r3, [pc, #96]	@ (8003f10 <MX_TIM5_Init+0x94>)
 8003eae:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003eb2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eb4:	4b16      	ldr	r3, [pc, #88]	@ (8003f10 <MX_TIM5_Init+0x94>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eba:	4b15      	ldr	r3, [pc, #84]	@ (8003f10 <MX_TIM5_Init+0x94>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003ec0:	4813      	ldr	r0, [pc, #76]	@ (8003f10 <MX_TIM5_Init+0x94>)
 8003ec2:	f004 fc25 	bl	8008710 <HAL_TIM_Base_Init>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003ecc:	f7ff f943 	bl	8003156 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ed4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003ed6:	f107 0310 	add.w	r3, r7, #16
 8003eda:	4619      	mov	r1, r3
 8003edc:	480c      	ldr	r0, [pc, #48]	@ (8003f10 <MX_TIM5_Init+0x94>)
 8003ede:	f005 fb03 	bl	80094e8 <HAL_TIM_ConfigClockSource>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003ee8:	f7ff f935 	bl	8003156 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eec:	2300      	movs	r3, #0
 8003eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003ef4:	1d3b      	adds	r3, r7, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4805      	ldr	r0, [pc, #20]	@ (8003f10 <MX_TIM5_Init+0x94>)
 8003efa:	f006 fa37 	bl	800a36c <HAL_TIMEx_MasterConfigSynchronization>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003f04:	f7ff f927 	bl	8003156 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003f08:	bf00      	nop
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000c44 	.word	0x20000c44
 8003f14:	40000c00 	.word	0x40000c00

08003f18 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f1e:	1d3b      	adds	r3, r7, #4
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003f28:	4b15      	ldr	r3, [pc, #84]	@ (8003f80 <MX_TIM6_Init+0x68>)
 8003f2a:	4a16      	ldr	r2, [pc, #88]	@ (8003f84 <MX_TIM6_Init+0x6c>)
 8003f2c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1700-1;
 8003f2e:	4b14      	ldr	r3, [pc, #80]	@ (8003f80 <MX_TIM6_Init+0x68>)
 8003f30:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8003f34:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f36:	4b12      	ldr	r3, [pc, #72]	@ (8003f80 <MX_TIM6_Init+0x68>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003f3c:	4b10      	ldr	r3, [pc, #64]	@ (8003f80 <MX_TIM6_Init+0x68>)
 8003f3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f42:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f44:	4b0e      	ldr	r3, [pc, #56]	@ (8003f80 <MX_TIM6_Init+0x68>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f4a:	480d      	ldr	r0, [pc, #52]	@ (8003f80 <MX_TIM6_Init+0x68>)
 8003f4c:	f004 fbe0 	bl	8008710 <HAL_TIM_Base_Init>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003f56:	f7ff f8fe 	bl	8003156 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4806      	ldr	r0, [pc, #24]	@ (8003f80 <MX_TIM6_Init+0x68>)
 8003f68:	f006 fa00 	bl	800a36c <HAL_TIMEx_MasterConfigSynchronization>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003f72:	f7ff f8f0 	bl	8003156 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000c90 	.word	0x20000c90
 8003f84:	40001000 	.word	0x40001000

08003f88 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003f8e:	463b      	mov	r3, r7
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004014 <MX_TIM16_Init+0x8c>)
 8003f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004018 <MX_TIM16_Init+0x90>)
 8003f9e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8003fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8004014 <MX_TIM16_Init+0x8c>)
 8003fa2:	22a9      	movs	r2, #169	@ 0xa9
 8003fa4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <MX_TIM16_Init+0x8c>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8003fac:	4b19      	ldr	r3, [pc, #100]	@ (8004014 <MX_TIM16_Init+0x8c>)
 8003fae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003fb2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fb4:	4b17      	ldr	r3, [pc, #92]	@ (8004014 <MX_TIM16_Init+0x8c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003fba:	4b16      	ldr	r3, [pc, #88]	@ (8004014 <MX_TIM16_Init+0x8c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc0:	4b14      	ldr	r3, [pc, #80]	@ (8004014 <MX_TIM16_Init+0x8c>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003fc6:	4813      	ldr	r0, [pc, #76]	@ (8004014 <MX_TIM16_Init+0x8c>)
 8003fc8:	f004 fba2 	bl	8008710 <HAL_TIM_Base_Init>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8003fd2:	f7ff f8c0 	bl	8003156 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8003fd6:	480f      	ldr	r0, [pc, #60]	@ (8004014 <MX_TIM16_Init+0x8c>)
 8003fd8:	f004 fdd4 	bl	8008b84 <HAL_TIM_IC_Init>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8003fe2:	f7ff f8b8 	bl	8003156 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003fea:	2301      	movs	r3, #1
 8003fec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8003ff2:	230f      	movs	r3, #15
 8003ff4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003ff6:	463b      	mov	r3, r7
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4805      	ldr	r0, [pc, #20]	@ (8004014 <MX_TIM16_Init+0x8c>)
 8003ffe:	f005 f8c2 	bl	8009186 <HAL_TIM_IC_ConfigChannel>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8004008:	f7ff f8a5 	bl	8003156 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000cdc 	.word	0x20000cdc
 8004018:	40014400 	.word	0x40014400

0800401c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8004022:	463b      	mov	r3, r7
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800402e:	4b1e      	ldr	r3, [pc, #120]	@ (80040a8 <MX_TIM17_Init+0x8c>)
 8004030:	4a1e      	ldr	r2, [pc, #120]	@ (80040ac <MX_TIM17_Init+0x90>)
 8004032:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8004034:	4b1c      	ldr	r3, [pc, #112]	@ (80040a8 <MX_TIM17_Init+0x8c>)
 8004036:	22a9      	movs	r2, #169	@ 0xa9
 8004038:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403a:	4b1b      	ldr	r3, [pc, #108]	@ (80040a8 <MX_TIM17_Init+0x8c>)
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 8004040:	4b19      	ldr	r3, [pc, #100]	@ (80040a8 <MX_TIM17_Init+0x8c>)
 8004042:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004046:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004048:	4b17      	ldr	r3, [pc, #92]	@ (80040a8 <MX_TIM17_Init+0x8c>)
 800404a:	2200      	movs	r2, #0
 800404c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800404e:	4b16      	ldr	r3, [pc, #88]	@ (80040a8 <MX_TIM17_Init+0x8c>)
 8004050:	2200      	movs	r2, #0
 8004052:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004054:	4b14      	ldr	r3, [pc, #80]	@ (80040a8 <MX_TIM17_Init+0x8c>)
 8004056:	2200      	movs	r2, #0
 8004058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800405a:	4813      	ldr	r0, [pc, #76]	@ (80040a8 <MX_TIM17_Init+0x8c>)
 800405c:	f004 fb58 	bl	8008710 <HAL_TIM_Base_Init>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8004066:	f7ff f876 	bl	8003156 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 800406a:	480f      	ldr	r0, [pc, #60]	@ (80040a8 <MX_TIM17_Init+0x8c>)
 800406c:	f004 fd8a 	bl	8008b84 <HAL_TIM_IC_Init>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8004076:	f7ff f86e 	bl	8003156 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800407a:	2300      	movs	r3, #0
 800407c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800407e:	2301      	movs	r3, #1
 8004080:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004082:	2300      	movs	r3, #0
 8004084:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8004086:	230f      	movs	r3, #15
 8004088:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800408a:	463b      	mov	r3, r7
 800408c:	2200      	movs	r2, #0
 800408e:	4619      	mov	r1, r3
 8004090:	4805      	ldr	r0, [pc, #20]	@ (80040a8 <MX_TIM17_Init+0x8c>)
 8004092:	f005 f878 	bl	8009186 <HAL_TIM_IC_ConfigChannel>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 800409c:	f7ff f85b 	bl	8003156 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000d28 	.word	0x20000d28
 80040ac:	40014800 	.word	0x40014800

080040b0 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b09c      	sub	sp, #112	@ 0x70
 80040b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040b6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	605a      	str	r2, [r3, #4]
 80040ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	611a      	str	r2, [r3, #16]
 80040e0:	615a      	str	r2, [r3, #20]
 80040e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80040e4:	1d3b      	adds	r3, r7, #4
 80040e6:	2234      	movs	r2, #52	@ 0x34
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f009 fb15 	bl	800d71a <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80040f0:	4b46      	ldr	r3, [pc, #280]	@ (800420c <MX_TIM20_Init+0x15c>)
 80040f2:	4a47      	ldr	r2, [pc, #284]	@ (8004210 <MX_TIM20_Init+0x160>)
 80040f4:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 260-1;
 80040f6:	4b45      	ldr	r3, [pc, #276]	@ (800420c <MX_TIM20_Init+0x15c>)
 80040f8:	f240 1203 	movw	r2, #259	@ 0x103
 80040fc:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040fe:	4b43      	ldr	r3, [pc, #268]	@ (800420c <MX_TIM20_Init+0x15c>)
 8004100:	2200      	movs	r2, #0
 8004102:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8004104:	4b41      	ldr	r3, [pc, #260]	@ (800420c <MX_TIM20_Init+0x15c>)
 8004106:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800410a:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800410c:	4b3f      	ldr	r3, [pc, #252]	@ (800420c <MX_TIM20_Init+0x15c>)
 800410e:	2200      	movs	r2, #0
 8004110:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8004112:	4b3e      	ldr	r3, [pc, #248]	@ (800420c <MX_TIM20_Init+0x15c>)
 8004114:	2200      	movs	r2, #0
 8004116:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004118:	4b3c      	ldr	r3, [pc, #240]	@ (800420c <MX_TIM20_Init+0x15c>)
 800411a:	2200      	movs	r2, #0
 800411c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 800411e:	483b      	ldr	r0, [pc, #236]	@ (800420c <MX_TIM20_Init+0x15c>)
 8004120:	f004 faf6 	bl	8008710 <HAL_TIM_Base_Init>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_TIM20_Init+0x7e>
  {
    Error_Handler();
 800412a:	f7ff f814 	bl	8003156 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800412e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004132:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8004134:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004138:	4619      	mov	r1, r3
 800413a:	4834      	ldr	r0, [pc, #208]	@ (800420c <MX_TIM20_Init+0x15c>)
 800413c:	f005 f9d4 	bl	80094e8 <HAL_TIM_ConfigClockSource>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM20_Init+0x9a>
  {
    Error_Handler();
 8004146:	f7ff f806 	bl	8003156 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 800414a:	4830      	ldr	r0, [pc, #192]	@ (800420c <MX_TIM20_Init+0x15c>)
 800414c:	f004 fbb0 	bl	80088b0 <HAL_TIM_PWM_Init>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <MX_TIM20_Init+0xaa>
  {
    Error_Handler();
 8004156:	f7fe fffe 	bl	8003156 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800415a:	2300      	movs	r3, #0
 800415c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800415e:	2300      	movs	r3, #0
 8004160:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004162:	2300      	movs	r3, #0
 8004164:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8004166:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800416a:	4619      	mov	r1, r3
 800416c:	4827      	ldr	r0, [pc, #156]	@ (800420c <MX_TIM20_Init+0x15c>)
 800416e:	f006 f8fd 	bl	800a36c <HAL_TIMEx_MasterConfigSynchronization>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <MX_TIM20_Init+0xcc>
  {
    Error_Handler();
 8004178:	f7fe ffed 	bl	8003156 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800417c:	2360      	movs	r3, #96	@ 0x60
 800417e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004184:	2300      	movs	r3, #0
 8004186:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004188:	2300      	movs	r3, #0
 800418a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800418c:	2300      	movs	r3, #0
 800418e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004190:	2300      	movs	r3, #0
 8004192:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004194:	2300      	movs	r3, #0
 8004196:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004198:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800419c:	2200      	movs	r2, #0
 800419e:	4619      	mov	r1, r3
 80041a0:	481a      	ldr	r0, [pc, #104]	@ (800420c <MX_TIM20_Init+0x15c>)
 80041a2:	f005 f88d 	bl	80092c0 <HAL_TIM_PWM_ConfigChannel>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <MX_TIM20_Init+0x100>
  {
    Error_Handler();
 80041ac:	f7fe ffd3 	bl	8003156 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80041ce:	2300      	movs	r3, #0
 80041d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80041d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80041dc:	2300      	movs	r3, #0
 80041de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80041e0:	2300      	movs	r3, #0
 80041e2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041e4:	2300      	movs	r3, #0
 80041e6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80041e8:	1d3b      	adds	r3, r7, #4
 80041ea:	4619      	mov	r1, r3
 80041ec:	4807      	ldr	r0, [pc, #28]	@ (800420c <MX_TIM20_Init+0x15c>)
 80041ee:	f006 f953 	bl	800a498 <HAL_TIMEx_ConfigBreakDeadTime>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <MX_TIM20_Init+0x14c>
  {
    Error_Handler();
 80041f8:	f7fe ffad 	bl	8003156 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 80041fc:	4803      	ldr	r0, [pc, #12]	@ (800420c <MX_TIM20_Init+0x15c>)
 80041fe:	f000 f993 	bl	8004528 <HAL_TIM_MspPostInit>

}
 8004202:	bf00      	nop
 8004204:	3770      	adds	r7, #112	@ 0x70
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000d74 	.word	0x20000d74
 8004210:	40015000 	.word	0x40015000

08004214 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a11      	ldr	r2, [pc, #68]	@ (8004268 <HAL_TIM_PWM_MspInit+0x54>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d11b      	bne.n	800425e <HAL_TIM_PWM_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004226:	4b11      	ldr	r3, [pc, #68]	@ (800426c <HAL_TIM_PWM_MspInit+0x58>)
 8004228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422a:	4a10      	ldr	r2, [pc, #64]	@ (800426c <HAL_TIM_PWM_MspInit+0x58>)
 800422c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004230:	6613      	str	r3, [r2, #96]	@ 0x60
 8004232:	4b0e      	ldr	r3, [pc, #56]	@ (800426c <HAL_TIM_PWM_MspInit+0x58>)
 8004234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004236:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800423e:	2200      	movs	r2, #0
 8004240:	2100      	movs	r1, #0
 8004242:	2019      	movs	r0, #25
 8004244:	f000 fe57 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004248:	2019      	movs	r0, #25
 800424a:	f000 fe6e 	bl	8004f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800424e:	2200      	movs	r2, #0
 8004250:	2100      	movs	r1, #0
 8004252:	201a      	movs	r0, #26
 8004254:	f000 fe4f 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004258:	201a      	movs	r0, #26
 800425a:	f000 fe66 	bl	8004f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40021000 	.word	0x40021000

08004270 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b094      	sub	sp, #80	@ 0x50
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004290:	d114      	bne.n	80042bc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004292:	4b9c      	ldr	r3, [pc, #624]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004296:	4a9b      	ldr	r2, [pc, #620]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6593      	str	r3, [r2, #88]	@ 0x58
 800429e:	4b99      	ldr	r3, [pc, #612]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80042aa:	2200      	movs	r2, #0
 80042ac:	2100      	movs	r1, #0
 80042ae:	201c      	movs	r0, #28
 80042b0:	f000 fe21 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042b4:	201c      	movs	r0, #28
 80042b6:	f000 fe38 	bl	8004f2a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 80042ba:	e11f      	b.n	80044fc <HAL_TIM_Base_MspInit+0x28c>
  else if(tim_baseHandle->Instance==TIM3)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a91      	ldr	r2, [pc, #580]	@ (8004508 <HAL_TIM_Base_MspInit+0x298>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d169      	bne.n	800439a <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042c6:	4b8f      	ldr	r3, [pc, #572]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ca:	4a8e      	ldr	r2, [pc, #568]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80042cc:	f043 0302 	orr.w	r3, r3, #2
 80042d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80042d2:	4b8c      	ldr	r3, [pc, #560]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80042d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	637b      	str	r3, [r7, #52]	@ 0x34
 80042dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042de:	4b89      	ldr	r3, [pc, #548]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80042e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e2:	4a88      	ldr	r2, [pc, #544]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ea:	4b86      	ldr	r3, [pc, #536]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80042ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80042f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f6:	4b83      	ldr	r3, [pc, #524]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80042f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fa:	4a82      	ldr	r2, [pc, #520]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80042fc:	f043 0302 	orr.w	r3, r3, #2
 8004300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004302:	4b80      	ldr	r3, [pc, #512]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 8004304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800430c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800430e:	4b7d      	ldr	r3, [pc, #500]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 8004310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004312:	4a7c      	ldr	r2, [pc, #496]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 8004314:	f043 0304 	orr.w	r3, r3, #4
 8004318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800431a:	4b7a      	ldr	r3, [pc, #488]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 800431c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004326:	2310      	movs	r3, #16
 8004328:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432a:	2302      	movs	r3, #2
 800432c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432e:	2300      	movs	r3, #0
 8004330:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004332:	2300      	movs	r3, #0
 8004334:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004336:	2302      	movs	r3, #2
 8004338:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800433a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800433e:	4619      	mov	r1, r3
 8004340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004344:	f001 f95a 	bl	80055fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004348:	2301      	movs	r3, #1
 800434a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434c:	2302      	movs	r3, #2
 800434e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004350:	2300      	movs	r3, #0
 8004352:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004354:	2300      	movs	r3, #0
 8004356:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004358:	2302      	movs	r3, #2
 800435a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800435c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004360:	4619      	mov	r1, r3
 8004362:	486a      	ldr	r0, [pc, #424]	@ (800450c <HAL_TIM_Base_MspInit+0x29c>)
 8004364:	f001 f94a 	bl	80055fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004368:	2340      	movs	r3, #64	@ 0x40
 800436a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436c:	2302      	movs	r3, #2
 800436e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004370:	2300      	movs	r3, #0
 8004372:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004374:	2300      	movs	r3, #0
 8004376:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004378:	2302      	movs	r3, #2
 800437a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800437c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004380:	4619      	mov	r1, r3
 8004382:	4863      	ldr	r0, [pc, #396]	@ (8004510 <HAL_TIM_Base_MspInit+0x2a0>)
 8004384:	f001 f93a 	bl	80055fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004388:	2200      	movs	r2, #0
 800438a:	2101      	movs	r1, #1
 800438c:	201d      	movs	r0, #29
 800438e:	f000 fdb2 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004392:	201d      	movs	r0, #29
 8004394:	f000 fdc9 	bl	8004f2a <HAL_NVIC_EnableIRQ>
}
 8004398:	e0b0      	b.n	80044fc <HAL_TIM_Base_MspInit+0x28c>
  else if(tim_baseHandle->Instance==TIM5)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a5d      	ldr	r2, [pc, #372]	@ (8004514 <HAL_TIM_Base_MspInit+0x2a4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d114      	bne.n	80043ce <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80043a4:	4b57      	ldr	r3, [pc, #348]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80043a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a8:	4a56      	ldr	r2, [pc, #344]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80043aa:	f043 0308 	orr.w	r3, r3, #8
 80043ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80043b0:	4b54      	ldr	r3, [pc, #336]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80043bc:	2200      	movs	r2, #0
 80043be:	2100      	movs	r1, #0
 80043c0:	2032      	movs	r0, #50	@ 0x32
 80043c2:	f000 fd98 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80043c6:	2032      	movs	r0, #50	@ 0x32
 80043c8:	f000 fdaf 	bl	8004f2a <HAL_NVIC_EnableIRQ>
}
 80043cc:	e096      	b.n	80044fc <HAL_TIM_Base_MspInit+0x28c>
  else if(tim_baseHandle->Instance==TIM6)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a51      	ldr	r2, [pc, #324]	@ (8004518 <HAL_TIM_Base_MspInit+0x2a8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d114      	bne.n	8004402 <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043d8:	4b4a      	ldr	r3, [pc, #296]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80043da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043dc:	4a49      	ldr	r2, [pc, #292]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80043de:	f043 0310 	orr.w	r3, r3, #16
 80043e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80043e4:	4b47      	ldr	r3, [pc, #284]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80043e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	623b      	str	r3, [r7, #32]
 80043ee:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80043f0:	2200      	movs	r2, #0
 80043f2:	2100      	movs	r1, #0
 80043f4:	2036      	movs	r0, #54	@ 0x36
 80043f6:	f000 fd7e 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80043fa:	2036      	movs	r0, #54	@ 0x36
 80043fc:	f000 fd95 	bl	8004f2a <HAL_NVIC_EnableIRQ>
}
 8004400:	e07c      	b.n	80044fc <HAL_TIM_Base_MspInit+0x28c>
  else if(tim_baseHandle->Instance==TIM16)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a45      	ldr	r2, [pc, #276]	@ (800451c <HAL_TIM_Base_MspInit+0x2ac>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d130      	bne.n	800446e <HAL_TIM_Base_MspInit+0x1fe>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800440c:	4b3d      	ldr	r3, [pc, #244]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 800440e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004410:	4a3c      	ldr	r2, [pc, #240]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 8004412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004416:	6613      	str	r3, [r2, #96]	@ 0x60
 8004418:	4b3a      	ldr	r3, [pc, #232]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 800441a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800441c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004424:	4b37      	ldr	r3, [pc, #220]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 8004426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004428:	4a36      	ldr	r2, [pc, #216]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 800442a:	f043 0302 	orr.w	r3, r3, #2
 800442e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004430:	4b34      	ldr	r3, [pc, #208]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 8004432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800443c:	2310      	movs	r3, #16
 800443e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004440:	2302      	movs	r3, #2
 8004442:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	2300      	movs	r3, #0
 8004446:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004448:	2300      	movs	r3, #0
 800444a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800444c:	2301      	movs	r3, #1
 800444e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004450:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004454:	4619      	mov	r1, r3
 8004456:	482d      	ldr	r0, [pc, #180]	@ (800450c <HAL_TIM_Base_MspInit+0x29c>)
 8004458:	f001 f8d0 	bl	80055fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800445c:	2200      	movs	r2, #0
 800445e:	2100      	movs	r1, #0
 8004460:	2019      	movs	r0, #25
 8004462:	f000 fd48 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004466:	2019      	movs	r0, #25
 8004468:	f000 fd5f 	bl	8004f2a <HAL_NVIC_EnableIRQ>
}
 800446c:	e046      	b.n	80044fc <HAL_TIM_Base_MspInit+0x28c>
  else if(tim_baseHandle->Instance==TIM17)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a2b      	ldr	r2, [pc, #172]	@ (8004520 <HAL_TIM_Base_MspInit+0x2b0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d130      	bne.n	80044da <HAL_TIM_Base_MspInit+0x26a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004478:	4b22      	ldr	r3, [pc, #136]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 800447a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800447c:	4a21      	ldr	r2, [pc, #132]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 800447e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004482:	6613      	str	r3, [r2, #96]	@ 0x60
 8004484:	4b1f      	ldr	r3, [pc, #124]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 8004486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004488:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004490:	4b1c      	ldr	r3, [pc, #112]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 8004492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004494:	4a1b      	ldr	r2, [pc, #108]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 8004496:	f043 0302 	orr.w	r3, r3, #2
 800449a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800449c:	4b19      	ldr	r3, [pc, #100]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 800449e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80044a8:	2320      	movs	r3, #32
 80044aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ac:	2302      	movs	r3, #2
 80044ae:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b4:	2300      	movs	r3, #0
 80044b6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80044b8:	230a      	movs	r3, #10
 80044ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80044c0:	4619      	mov	r1, r3
 80044c2:	4812      	ldr	r0, [pc, #72]	@ (800450c <HAL_TIM_Base_MspInit+0x29c>)
 80044c4:	f001 f89a 	bl	80055fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80044c8:	2200      	movs	r2, #0
 80044ca:	2100      	movs	r1, #0
 80044cc:	201a      	movs	r0, #26
 80044ce:	f000 fd12 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80044d2:	201a      	movs	r0, #26
 80044d4:	f000 fd29 	bl	8004f2a <HAL_NVIC_EnableIRQ>
}
 80044d8:	e010      	b.n	80044fc <HAL_TIM_Base_MspInit+0x28c>
  else if(tim_baseHandle->Instance==TIM20)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a11      	ldr	r2, [pc, #68]	@ (8004524 <HAL_TIM_Base_MspInit+0x2b4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d10b      	bne.n	80044fc <HAL_TIM_Base_MspInit+0x28c>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80044e4:	4b07      	ldr	r3, [pc, #28]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80044e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e8:	4a06      	ldr	r2, [pc, #24]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80044ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80044f0:	4b04      	ldr	r3, [pc, #16]	@ (8004504 <HAL_TIM_Base_MspInit+0x294>)
 80044f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
}
 80044fc:	bf00      	nop
 80044fe:	3750      	adds	r7, #80	@ 0x50
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000
 8004508:	40000400 	.word	0x40000400
 800450c:	48000400 	.word	0x48000400
 8004510:	48000800 	.word	0x48000800
 8004514:	40000c00 	.word	0x40000c00
 8004518:	40001000 	.word	0x40001000
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800
 8004524:	40015000 	.word	0x40015000

08004528 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	@ 0x28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004530:	f107 0314 	add.w	r3, r7, #20
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	605a      	str	r2, [r3, #4]
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	60da      	str	r2, [r3, #12]
 800453e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a22      	ldr	r2, [pc, #136]	@ (80045d0 <HAL_TIM_MspPostInit+0xa8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d11c      	bne.n	8004584 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800454a:	4b22      	ldr	r3, [pc, #136]	@ (80045d4 <HAL_TIM_MspPostInit+0xac>)
 800454c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454e:	4a21      	ldr	r2, [pc, #132]	@ (80045d4 <HAL_TIM_MspPostInit+0xac>)
 8004550:	f043 0304 	orr.w	r3, r3, #4
 8004554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004556:	4b1f      	ldr	r3, [pc, #124]	@ (80045d4 <HAL_TIM_MspPostInit+0xac>)
 8004558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 8004562:	2303      	movs	r3, #3
 8004564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004566:	2302      	movs	r3, #2
 8004568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800456e:	2300      	movs	r3, #0
 8004570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004572:	2302      	movs	r3, #2
 8004574:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004576:	f107 0314 	add.w	r3, r7, #20
 800457a:	4619      	mov	r1, r3
 800457c:	4816      	ldr	r0, [pc, #88]	@ (80045d8 <HAL_TIM_MspPostInit+0xb0>)
 800457e:	f001 f83d 	bl	80055fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8004582:	e020      	b.n	80045c6 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM20)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a14      	ldr	r2, [pc, #80]	@ (80045dc <HAL_TIM_MspPostInit+0xb4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d11b      	bne.n	80045c6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800458e:	4b11      	ldr	r3, [pc, #68]	@ (80045d4 <HAL_TIM_MspPostInit+0xac>)
 8004590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004592:	4a10      	ldr	r2, [pc, #64]	@ (80045d4 <HAL_TIM_MspPostInit+0xac>)
 8004594:	f043 0302 	orr.w	r3, r3, #2
 8004598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800459a:	4b0e      	ldr	r3, [pc, #56]	@ (80045d4 <HAL_TIM_MspPostInit+0xac>)
 800459c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045a6:	2304      	movs	r3, #4
 80045a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045aa:	2302      	movs	r3, #2
 80045ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b2:	2300      	movs	r3, #0
 80045b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 80045b6:	2303      	movs	r3, #3
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ba:	f107 0314 	add.w	r3, r7, #20
 80045be:	4619      	mov	r1, r3
 80045c0:	4807      	ldr	r0, [pc, #28]	@ (80045e0 <HAL_TIM_MspPostInit+0xb8>)
 80045c2:	f001 f81b 	bl	80055fc <HAL_GPIO_Init>
}
 80045c6:	bf00      	nop
 80045c8:	3728      	adds	r7, #40	@ 0x28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40021000 	.word	0x40021000
 80045d8:	48000800 	.word	0x48000800
 80045dc:	40015000 	.word	0x40015000
 80045e0:	48000400 	.word	0x48000400

080045e4 <vTimerInit>:
#include "timer.h"

int iIndex;
single_timer iActiveTimers[20]; //Consegue guardar 20 contadores diferentes

void vTimerInit() {
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
	iIndex = 0;
 80045ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004628 <vTimerInit+0x44>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 20; i++) {
 80045f0:	2300      	movs	r3, #0
 80045f2:	607b      	str	r3, [r7, #4]
 80045f4:	e00d      	b.n	8004612 <vTimerInit+0x2e>
		iActiveTimers[i].iCounter = 0;
 80045f6:	4a0d      	ldr	r2, [pc, #52]	@ (800462c <vTimerInit+0x48>)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2100      	movs	r1, #0
 80045fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		iActiveTimers[i].iTotalMs = 0;
 8004600:	4a0a      	ldr	r2, [pc, #40]	@ (800462c <vTimerInit+0x48>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	2200      	movs	r2, #0
 800460a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 20; i++) {
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3301      	adds	r3, #1
 8004610:	607b      	str	r3, [r7, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b13      	cmp	r3, #19
 8004616:	ddee      	ble.n	80045f6 <vTimerInit+0x12>
	}
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000dc0 	.word	0x20000dc0
 800462c:	20000dc4 	.word	0x20000dc4

08004630 <iSetTimer>:

//set o timer para comecar a contar, conta até total_ms, no timerCode
//Retorna o "codigo' do timer
int iSetTimer(int total_ms) {
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	iActiveTimers[iIndex].iTotalMs = total_ms;
 8004638:	4b09      	ldr	r3, [pc, #36]	@ (8004660 <iSetTimer+0x30>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a09      	ldr	r2, [pc, #36]	@ (8004664 <iSetTimer+0x34>)
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	4413      	add	r3, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	605a      	str	r2, [r3, #4]
	return ++iIndex;
 8004646:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <iSetTimer+0x30>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	4a04      	ldr	r2, [pc, #16]	@ (8004660 <iSetTimer+0x30>)
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	4b03      	ldr	r3, [pc, #12]	@ (8004660 <iSetTimer+0x30>)
 8004652:	681b      	ldr	r3, [r3, #0]
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	20000dc0 	.word	0x20000dc0
 8004664:	20000dc4 	.word	0x20000dc4

08004668 <cCountTime>:

// conta (ms) ms, funcao chamada a cada 10 ms, pela main (pTimGeral)
char cCountTime(int ms, int timerCode) {
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
	iActiveTimers[timerCode].iCounter += ms;
 8004672:	4a11      	ldr	r2, [pc, #68]	@ (80046b8 <cCountTime+0x50>)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	441a      	add	r2, r3
 800467e:	490e      	ldr	r1, [pc, #56]	@ (80046b8 <cCountTime+0x50>)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	if (iActiveTimers[timerCode].iCounter >= iActiveTimers[timerCode].iTotalMs) {
 8004686:	4a0c      	ldr	r2, [pc, #48]	@ (80046b8 <cCountTime+0x50>)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800468e:	490a      	ldr	r1, [pc, #40]	@ (80046b8 <cCountTime+0x50>)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	440b      	add	r3, r1
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	db06      	blt.n	80046aa <cCountTime+0x42>
		iActiveTimers[timerCode].iCounter = 0;
 800469c:	4a06      	ldr	r2, [pc, #24]	@ (80046b8 <cCountTime+0x50>)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2100      	movs	r1, #0
 80046a2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		return 1;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <cCountTime+0x44>
	}

	return 0;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	20000dc4 	.word	0x20000dc4

080046bc <vUltrassonicoInit>:
//
// INPUT PARAMS: TIM_HandleTypeDef* pTimerEcoUltrassonicoFrontal ,TIM_HandleTypeDef* TimerTrigger
//
// OUTPUT PARAMS: n/a
// ********************************************** //
void vUltrassonicoInit(TIM_HandleTypeDef* pTimerEcoUltrassonicoFrontal ,TIM_HandleTypeDef* TimerTrigger) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]

  xUltrassonicoData.pTimerEcoUltrassonicoFrontal=pTimerEcoUltrassonicoFrontal;
 80046c6:	4a15      	ldr	r2, [pc, #84]	@ (800471c <vUltrassonicoInit+0x60>)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6013      	str	r3, [r2, #0]
  xUltrassonicoData.TimerTrigger= TimerTrigger;
 80046cc:	4a13      	ldr	r2, [pc, #76]	@ (800471c <vUltrassonicoInit+0x60>)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6053      	str	r3, [r2, #4]
  xUltrassonicoData.Distance=0.0;
 80046d2:	4b12      	ldr	r3, [pc, #72]	@ (800471c <vUltrassonicoInit+0x60>)
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	609a      	str	r2, [r3, #8]

  HAL_TIM_PWM_Start(xUltrassonicoData.TimerTrigger, TIM_CHANNEL_1);
 80046da:	4b10      	ldr	r3, [pc, #64]	@ (800471c <vUltrassonicoInit+0x60>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2100      	movs	r1, #0
 80046e0:	4618      	mov	r0, r3
 80046e2:	f004 f93d 	bl	8008960 <HAL_TIM_PWM_Start>
  //Define um pulso de 10us a cada 100ms no trigger, utilizando logica pwm
  xUltrassonicoData.TimerTrigger->Instance->CCR1 = 8;
 80046e6:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <vUltrassonicoInit+0x60>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2208      	movs	r2, #8
 80046ee:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_TIM_IC_Start_IT(xUltrassonicoData.pTimerEcoUltrassonicoFrontal, TIM_CHANNEL_1);
 80046f0:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <vUltrassonicoInit+0x60>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f004 faa6 	bl	8008c48 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(xUltrassonicoData.pTimerEcoUltrassonicoFrontal, TIM_CHANNEL_2);
 80046fc:	4b07      	ldr	r3, [pc, #28]	@ (800471c <vUltrassonicoInit+0x60>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2104      	movs	r1, #4
 8004702:	4618      	mov	r0, r3
 8004704:	f004 faa0 	bl	8008c48 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(xUltrassonicoData.pTimerEcoUltrassonicoFrontal, TIM_CHANNEL_3);
 8004708:	4b04      	ldr	r3, [pc, #16]	@ (800471c <vUltrassonicoInit+0x60>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2108      	movs	r1, #8
 800470e:	4618      	mov	r0, r3
 8004710:	f004 fa9a 	bl	8008c48 <HAL_TIM_IC_Start_IT>

}
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000e64 	.word	0x20000e64

08004720 <fUltrassonicoGetDistance>:
// INPUT PARAMS: uint16_t uiAuxDistanceUltrassonicoFrontal1,uint16_t uiAuxDistanceUltrassonicoFrontal2
//
// OUTPUT PARAMS: Distance
// ********************************************** //

float fUltrassonicoGetDistance(uint16_t uiAuxDistanceUltrassonicoFrontal1,uint16_t uiAuxDistanceUltrassonicoFrontal2){
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	460a      	mov	r2, r1
 800472a:	80fb      	strh	r3, [r7, #6]
 800472c:	4613      	mov	r3, r2
 800472e:	80bb      	strh	r3, [r7, #4]
	 1-Realiza-se a subtracao dos dois valores de contagem do eco
	 2-Multiplica-se esse valor por 1.5, que é o tempo em microsegundos de cada contagem.
	 3-Divide-se esse valor por 58.772 us, que é o tempo que leva para 1 cm refletir a onda no sensor.
	 4-Obtem-se o valor da distancia em cm.
	 */
	xUltrassonicoData.Distance=(uiAuxDistanceUltrassonicoFrontal2-uiAuxDistanceUltrassonicoFrontal1)*1.5/(58.772);
 8004730:	88ba      	ldrh	r2, [r7, #4]
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	4618      	mov	r0, r3
 8004738:	f7fb ff1c 	bl	8000574 <__aeabi_i2d>
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	4b11      	ldr	r3, [pc, #68]	@ (8004788 <fUltrassonicoGetDistance+0x68>)
 8004742:	f7fb ff81 	bl	8000648 <__aeabi_dmul>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	a30c      	add	r3, pc, #48	@ (adr r3, 8004780 <fUltrassonicoGetDistance+0x60>)
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	f7fc f8a2 	bl	800089c <__aeabi_ddiv>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	f7fc fa6a 	bl	8000c38 <__aeabi_d2f>
 8004764:	4603      	mov	r3, r0
 8004766:	4a09      	ldr	r2, [pc, #36]	@ (800478c <fUltrassonicoGetDistance+0x6c>)
 8004768:	6093      	str	r3, [r2, #8]
	return xUltrassonicoData.Distance;
 800476a:	4b08      	ldr	r3, [pc, #32]	@ (800478c <fUltrassonicoGetDistance+0x6c>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	ee07 3a90 	vmov	s15, r3
}
 8004772:	eeb0 0a67 	vmov.f32	s0, s15
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	f3af 8000 	nop.w
 8004780:	e5604189 	.word	0xe5604189
 8004784:	404d62d0 	.word	0x404d62d0
 8004788:	3ff80000 	.word	0x3ff80000
 800478c:	20000e64 	.word	0x20000e64

08004790 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004794:	4b21      	ldr	r3, [pc, #132]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 8004796:	4a22      	ldr	r2, [pc, #136]	@ (8004820 <MX_LPUART1_UART_Init+0x90>)
 8004798:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800479a:	4b20      	ldr	r3, [pc, #128]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 800479c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80047a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047a2:	4b1e      	ldr	r3, [pc, #120]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80047a8:	4b1c      	ldr	r3, [pc, #112]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80047ae:	4b1b      	ldr	r3, [pc, #108]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80047b4:	4b19      	ldr	r3, [pc, #100]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 80047b6:	220c      	movs	r2, #12
 80047b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047ba:	4b18      	ldr	r3, [pc, #96]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 80047bc:	2200      	movs	r2, #0
 80047be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047c0:	4b16      	ldr	r3, [pc, #88]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80047c6:	4b15      	ldr	r3, [pc, #84]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047cc:	4b13      	ldr	r3, [pc, #76]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80047d2:	4812      	ldr	r0, [pc, #72]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 80047d4:	f005 ff3a 	bl	800a64c <HAL_UART_Init>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80047de:	f7fe fcba 	bl	8003156 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047e2:	2100      	movs	r1, #0
 80047e4:	480d      	ldr	r0, [pc, #52]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 80047e6:	f007 ffb4 	bl	800c752 <HAL_UARTEx_SetTxFifoThreshold>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80047f0:	f7fe fcb1 	bl	8003156 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047f4:	2100      	movs	r1, #0
 80047f6:	4809      	ldr	r0, [pc, #36]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 80047f8:	f007 ffe9 	bl	800c7ce <HAL_UARTEx_SetRxFifoThreshold>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8004802:	f7fe fca8 	bl	8003156 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004806:	4805      	ldr	r0, [pc, #20]	@ (800481c <MX_LPUART1_UART_Init+0x8c>)
 8004808:	f007 ff6a 	bl	800c6e0 <HAL_UARTEx_DisableFifoMode>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8004812:	f7fe fca0 	bl	8003156 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004816:	bf00      	nop
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000e70 	.word	0x20000e70
 8004820:	40008000 	.word	0x40008000

08004824 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004828:	4b22      	ldr	r3, [pc, #136]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 800482a:	4a23      	ldr	r2, [pc, #140]	@ (80048b8 <MX_USART1_UART_Init+0x94>)
 800482c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800482e:	4b21      	ldr	r3, [pc, #132]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 8004830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004836:	4b1f      	ldr	r3, [pc, #124]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 8004838:	2200      	movs	r2, #0
 800483a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800483c:	4b1d      	ldr	r3, [pc, #116]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 800483e:	2200      	movs	r2, #0
 8004840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004842:	4b1c      	ldr	r3, [pc, #112]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 8004844:	2200      	movs	r2, #0
 8004846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004848:	4b1a      	ldr	r3, [pc, #104]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 800484a:	220c      	movs	r2, #12
 800484c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800484e:	4b19      	ldr	r3, [pc, #100]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 8004850:	2200      	movs	r2, #0
 8004852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004854:	4b17      	ldr	r3, [pc, #92]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 8004856:	2200      	movs	r2, #0
 8004858:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800485a:	4b16      	ldr	r3, [pc, #88]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 800485c:	2200      	movs	r2, #0
 800485e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004860:	4b14      	ldr	r3, [pc, #80]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 8004862:	2200      	movs	r2, #0
 8004864:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004866:	4b13      	ldr	r3, [pc, #76]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 8004868:	2200      	movs	r2, #0
 800486a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800486c:	4811      	ldr	r0, [pc, #68]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 800486e:	f005 feed 	bl	800a64c <HAL_UART_Init>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004878:	f7fe fc6d 	bl	8003156 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800487c:	2100      	movs	r1, #0
 800487e:	480d      	ldr	r0, [pc, #52]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 8004880:	f007 ff67 	bl	800c752 <HAL_UARTEx_SetTxFifoThreshold>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800488a:	f7fe fc64 	bl	8003156 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800488e:	2100      	movs	r1, #0
 8004890:	4808      	ldr	r0, [pc, #32]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 8004892:	f007 ff9c 	bl	800c7ce <HAL_UARTEx_SetRxFifoThreshold>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800489c:	f7fe fc5b 	bl	8003156 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80048a0:	4804      	ldr	r0, [pc, #16]	@ (80048b4 <MX_USART1_UART_Init+0x90>)
 80048a2:	f007 ff1d 	bl	800c6e0 <HAL_UARTEx_DisableFifoMode>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80048ac:	f7fe fc53 	bl	8003156 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80048b0:	bf00      	nop
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000f04 	.word	0x20000f04
 80048b8:	40013800 	.word	0x40013800

080048bc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80048c0:	4b22      	ldr	r3, [pc, #136]	@ (800494c <MX_USART3_UART_Init+0x90>)
 80048c2:	4a23      	ldr	r2, [pc, #140]	@ (8004950 <MX_USART3_UART_Init+0x94>)
 80048c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80048c6:	4b21      	ldr	r3, [pc, #132]	@ (800494c <MX_USART3_UART_Init+0x90>)
 80048c8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80048cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80048ce:	4b1f      	ldr	r3, [pc, #124]	@ (800494c <MX_USART3_UART_Init+0x90>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048d4:	4b1d      	ldr	r3, [pc, #116]	@ (800494c <MX_USART3_UART_Init+0x90>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80048da:	4b1c      	ldr	r3, [pc, #112]	@ (800494c <MX_USART3_UART_Init+0x90>)
 80048dc:	2200      	movs	r2, #0
 80048de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80048e0:	4b1a      	ldr	r3, [pc, #104]	@ (800494c <MX_USART3_UART_Init+0x90>)
 80048e2:	220c      	movs	r2, #12
 80048e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048e6:	4b19      	ldr	r3, [pc, #100]	@ (800494c <MX_USART3_UART_Init+0x90>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80048ec:	4b17      	ldr	r3, [pc, #92]	@ (800494c <MX_USART3_UART_Init+0x90>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048f2:	4b16      	ldr	r3, [pc, #88]	@ (800494c <MX_USART3_UART_Init+0x90>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048f8:	4b14      	ldr	r3, [pc, #80]	@ (800494c <MX_USART3_UART_Init+0x90>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048fe:	4b13      	ldr	r3, [pc, #76]	@ (800494c <MX_USART3_UART_Init+0x90>)
 8004900:	2200      	movs	r2, #0
 8004902:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004904:	4811      	ldr	r0, [pc, #68]	@ (800494c <MX_USART3_UART_Init+0x90>)
 8004906:	f005 fea1 	bl	800a64c <HAL_UART_Init>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004910:	f7fe fc21 	bl	8003156 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004914:	2100      	movs	r1, #0
 8004916:	480d      	ldr	r0, [pc, #52]	@ (800494c <MX_USART3_UART_Init+0x90>)
 8004918:	f007 ff1b 	bl	800c752 <HAL_UARTEx_SetTxFifoThreshold>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004922:	f7fe fc18 	bl	8003156 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004926:	2100      	movs	r1, #0
 8004928:	4808      	ldr	r0, [pc, #32]	@ (800494c <MX_USART3_UART_Init+0x90>)
 800492a:	f007 ff50 	bl	800c7ce <HAL_UARTEx_SetRxFifoThreshold>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004934:	f7fe fc0f 	bl	8003156 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004938:	4804      	ldr	r0, [pc, #16]	@ (800494c <MX_USART3_UART_Init+0x90>)
 800493a:	f007 fed1 	bl	800c6e0 <HAL_UARTEx_DisableFifoMode>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004944:	f7fe fc07 	bl	8003156 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004948:	bf00      	nop
 800494a:	bd80      	pop	{r7, pc}
 800494c:	20000f98 	.word	0x20000f98
 8004950:	40004800 	.word	0x40004800

08004954 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b0a4      	sub	sp, #144	@ 0x90
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800496c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004970:	2254      	movs	r2, #84	@ 0x54
 8004972:	2100      	movs	r1, #0
 8004974:	4618      	mov	r0, r3
 8004976:	f008 fed0 	bl	800d71a <memset>
  if(uartHandle->Instance==LPUART1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a7a      	ldr	r2, [pc, #488]	@ (8004b68 <HAL_UART_MspInit+0x214>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d13b      	bne.n	80049fc <HAL_UART_MspInit+0xa8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004984:	2320      	movs	r3, #32
 8004986:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004988:	2300      	movs	r3, #0
 800498a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800498c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004990:	4618      	mov	r0, r3
 8004992:	f003 fc6f 	bl	8008274 <HAL_RCCEx_PeriphCLKConfig>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800499c:	f7fe fbdb 	bl	8003156 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80049a0:	4b72      	ldr	r3, [pc, #456]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 80049a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a4:	4a71      	ldr	r2, [pc, #452]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80049ac:	4b6f      	ldr	r3, [pc, #444]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 80049ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049b8:	4b6c      	ldr	r3, [pc, #432]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 80049ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049bc:	4a6b      	ldr	r2, [pc, #428]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049c4:	4b69      	ldr	r3, [pc, #420]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 80049c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	623b      	str	r3, [r7, #32]
 80049ce:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80049d0:	230c      	movs	r3, #12
 80049d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d4:	2302      	movs	r3, #2
 80049d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049da:	2300      	movs	r3, #0
 80049dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80049e6:	230c      	movs	r3, #12
 80049e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ec:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80049f0:	4619      	mov	r1, r3
 80049f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049f6:	f000 fe01 	bl	80055fc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80049fa:	e0b1      	b.n	8004b60 <HAL_UART_MspInit+0x20c>
  else if(uartHandle->Instance==USART1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a5b      	ldr	r2, [pc, #364]	@ (8004b70 <HAL_UART_MspInit+0x21c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d164      	bne.n	8004ad0 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004a06:	2301      	movs	r3, #1
 8004a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a12:	4618      	mov	r0, r3
 8004a14:	f003 fc2e 	bl	8008274 <HAL_RCCEx_PeriphCLKConfig>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8004a1e:	f7fe fb9a 	bl	8003156 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a22:	4b52      	ldr	r3, [pc, #328]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a26:	4a51      	ldr	r2, [pc, #324]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a3a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a3e:	4a4b      	ldr	r2, [pc, #300]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a40:	f043 0304 	orr.w	r3, r3, #4
 8004a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a46:	4b49      	ldr	r3, [pc, #292]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	61bb      	str	r3, [r7, #24]
 8004a50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a52:	4b46      	ldr	r3, [pc, #280]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a56:	4a45      	ldr	r2, [pc, #276]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a5e:	4b43      	ldr	r3, [pc, #268]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004a6a:	2320      	movs	r3, #32
 8004a6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a80:	2307      	movs	r3, #7
 8004a82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a86:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4839      	ldr	r0, [pc, #228]	@ (8004b74 <HAL_UART_MspInit+0x220>)
 8004a8e:	f000 fdb5 	bl	80055fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a96:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004aaa:	2307      	movs	r3, #7
 8004aac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004aba:	f000 fd9f 	bl	80055fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	2025      	movs	r0, #37	@ 0x25
 8004ac4:	f000 fa17 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ac8:	2025      	movs	r0, #37	@ 0x25
 8004aca:	f000 fa2e 	bl	8004f2a <HAL_NVIC_EnableIRQ>
}
 8004ace:	e047      	b.n	8004b60 <HAL_UART_MspInit+0x20c>
  else if(uartHandle->Instance==USART3)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a28      	ldr	r2, [pc, #160]	@ (8004b78 <HAL_UART_MspInit+0x224>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d142      	bne.n	8004b60 <HAL_UART_MspInit+0x20c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004ada:	2304      	movs	r3, #4
 8004adc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ae2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f003 fbc4 	bl	8008274 <HAL_RCCEx_PeriphCLKConfig>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8004af2:	f7fe fb30 	bl	8003156 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004af6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afa:	4a1c      	ldr	r2, [pc, #112]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b02:	4b1a      	ldr	r3, [pc, #104]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b0e:	4b17      	ldr	r3, [pc, #92]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b12:	4a16      	ldr	r2, [pc, #88]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004b14:	f043 0302 	orr.w	r3, r3, #2
 8004b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b1a:	4b14      	ldr	r3, [pc, #80]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b26:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004b3e:	2307      	movs	r3, #7
 8004b40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b44:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004b48:	4619      	mov	r1, r3
 8004b4a:	480c      	ldr	r0, [pc, #48]	@ (8004b7c <HAL_UART_MspInit+0x228>)
 8004b4c:	f000 fd56 	bl	80055fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8004b50:	2200      	movs	r2, #0
 8004b52:	2101      	movs	r1, #1
 8004b54:	2027      	movs	r0, #39	@ 0x27
 8004b56:	f000 f9ce 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004b5a:	2027      	movs	r0, #39	@ 0x27
 8004b5c:	f000 f9e5 	bl	8004f2a <HAL_NVIC_EnableIRQ>
}
 8004b60:	bf00      	nop
 8004b62:	3790      	adds	r7, #144	@ 0x90
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40008000 	.word	0x40008000
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40013800 	.word	0x40013800
 8004b74:	48000800 	.word	0x48000800
 8004b78:	40004800 	.word	0x40004800
 8004b7c:	48000400 	.word	0x48000400

08004b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004b80:	480d      	ldr	r0, [pc, #52]	@ (8004bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004b82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004b84:	f7fe fff2 	bl	8003b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b88:	480c      	ldr	r0, [pc, #48]	@ (8004bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8004b8a:	490d      	ldr	r1, [pc, #52]	@ (8004bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc4 <LoopForever+0xe>)
  movs r3, #0
 8004b8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004b90:	e002      	b.n	8004b98 <LoopCopyDataInit>

08004b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b96:	3304      	adds	r3, #4

08004b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b9c:	d3f9      	bcc.n	8004b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8004bcc <LoopForever+0x16>)
  movs r3, #0
 8004ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ba4:	e001      	b.n	8004baa <LoopFillZerobss>

08004ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ba8:	3204      	adds	r2, #4

08004baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bac:	d3fb      	bcc.n	8004ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bae:	f008 fe1b 	bl	800d7e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004bb2:	f7fd fbf7 	bl	80023a4 <main>

08004bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8004bb6:	e7fe      	b.n	8004bb6 <LoopForever>
  ldr   r0, =_estack
 8004bb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bc0:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8004bc4:	08010ea0 	.word	0x08010ea0
  ldr r2, =_sbss
 8004bc8:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004bcc:	2000117c 	.word	0x2000117c

08004bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004bd0:	e7fe      	b.n	8004bd0 <ADC1_2_IRQHandler>

08004bd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bdc:	2003      	movs	r0, #3
 8004bde:	f000 f97f 	bl	8004ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004be2:	200f      	movs	r0, #15
 8004be4:	f000 f80e 	bl	8004c04 <HAL_InitTick>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	71fb      	strb	r3, [r7, #7]
 8004bf2:	e001      	b.n	8004bf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004bf4:	f7fe fe18 	bl	8003828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004bf8:	79fb      	ldrb	r3, [r7, #7]

}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004c10:	4b16      	ldr	r3, [pc, #88]	@ (8004c6c <HAL_InitTick+0x68>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d022      	beq.n	8004c5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004c18:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <HAL_InitTick+0x6c>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b13      	ldr	r3, [pc, #76]	@ (8004c6c <HAL_InitTick+0x68>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 f998 	bl	8004f62 <HAL_SYSTICK_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10f      	bne.n	8004c58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b0f      	cmp	r3, #15
 8004c3c:	d809      	bhi.n	8004c52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	f04f 30ff 	mov.w	r0, #4294967295
 8004c46:	f000 f956 	bl	8004ef6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c74 <HAL_InitTick+0x70>)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e007      	b.n	8004c62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
 8004c56:	e004      	b.n	8004c62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
 8004c5c:	e001      	b.n	8004c62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000044 	.word	0x20000044
 8004c70:	2000003c 	.word	0x2000003c
 8004c74:	20000040 	.word	0x20000040

08004c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <HAL_IncTick+0x1c>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b05      	ldr	r3, [pc, #20]	@ (8004c98 <HAL_IncTick+0x20>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4413      	add	r3, r2
 8004c86:	4a03      	ldr	r2, [pc, #12]	@ (8004c94 <HAL_IncTick+0x1c>)
 8004c88:	6013      	str	r3, [r2, #0]
}
 8004c8a:	bf00      	nop
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	2000102c 	.word	0x2000102c
 8004c98:	20000044 	.word	0x20000044

08004c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8004ca0:	4b03      	ldr	r3, [pc, #12]	@ (8004cb0 <HAL_GetTick+0x14>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	2000102c 	.word	0x2000102c

08004cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cbc:	f7ff ffee 	bl	8004c9c <HAL_GetTick>
 8004cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d004      	beq.n	8004cd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cce:	4b09      	ldr	r3, [pc, #36]	@ (8004cf4 <HAL_Delay+0x40>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004cd8:	bf00      	nop
 8004cda:	f7ff ffdf 	bl	8004c9c <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d8f7      	bhi.n	8004cda <HAL_Delay+0x26>
  {
  }
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20000044 	.word	0x20000044

08004cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d08:	4b0c      	ldr	r3, [pc, #48]	@ (8004d3c <__NVIC_SetPriorityGrouping+0x44>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d14:	4013      	ands	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d2a:	4a04      	ldr	r2, [pc, #16]	@ (8004d3c <__NVIC_SetPriorityGrouping+0x44>)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	60d3      	str	r3, [r2, #12]
}
 8004d30:	bf00      	nop
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	e000ed00 	.word	0xe000ed00

08004d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d44:	4b04      	ldr	r3, [pc, #16]	@ (8004d58 <__NVIC_GetPriorityGrouping+0x18>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	0a1b      	lsrs	r3, r3, #8
 8004d4a:	f003 0307 	and.w	r3, r3, #7
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	db0b      	blt.n	8004d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	f003 021f 	and.w	r2, r3, #31
 8004d74:	4907      	ldr	r1, [pc, #28]	@ (8004d94 <__NVIC_EnableIRQ+0x38>)
 8004d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	e000e100 	.word	0xe000e100

08004d98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	db12      	blt.n	8004dd0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	f003 021f 	and.w	r2, r3, #31
 8004db0:	490a      	ldr	r1, [pc, #40]	@ (8004ddc <__NVIC_DisableIRQ+0x44>)
 8004db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	2001      	movs	r0, #1
 8004dba:	fa00 f202 	lsl.w	r2, r0, r2
 8004dbe:	3320      	adds	r3, #32
 8004dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004dc4:	f3bf 8f4f 	dsb	sy
}
 8004dc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004dca:	f3bf 8f6f 	isb	sy
}
 8004dce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	e000e100 	.word	0xe000e100

08004de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	6039      	str	r1, [r7, #0]
 8004dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	db0a      	blt.n	8004e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	490c      	ldr	r1, [pc, #48]	@ (8004e2c <__NVIC_SetPriority+0x4c>)
 8004dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfe:	0112      	lsls	r2, r2, #4
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	440b      	add	r3, r1
 8004e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e08:	e00a      	b.n	8004e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	4908      	ldr	r1, [pc, #32]	@ (8004e30 <__NVIC_SetPriority+0x50>)
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	3b04      	subs	r3, #4
 8004e18:	0112      	lsls	r2, r2, #4
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	761a      	strb	r2, [r3, #24]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	e000e100 	.word	0xe000e100
 8004e30:	e000ed00 	.word	0xe000ed00

08004e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b089      	sub	sp, #36	@ 0x24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f1c3 0307 	rsb	r3, r3, #7
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	bf28      	it	cs
 8004e52:	2304      	movcs	r3, #4
 8004e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	2b06      	cmp	r3, #6
 8004e5c:	d902      	bls.n	8004e64 <NVIC_EncodePriority+0x30>
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3b03      	subs	r3, #3
 8004e62:	e000      	b.n	8004e66 <NVIC_EncodePriority+0x32>
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	43da      	mvns	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	401a      	ands	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	fa01 f303 	lsl.w	r3, r1, r3
 8004e86:	43d9      	mvns	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e8c:	4313      	orrs	r3, r2
         );
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3724      	adds	r7, #36	@ 0x24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eac:	d301      	bcc.n	8004eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e00f      	b.n	8004ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004edc <SysTick_Config+0x40>)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eba:	210f      	movs	r1, #15
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec0:	f7ff ff8e 	bl	8004de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ec4:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <SysTick_Config+0x40>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eca:	4b04      	ldr	r3, [pc, #16]	@ (8004edc <SysTick_Config+0x40>)
 8004ecc:	2207      	movs	r2, #7
 8004ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	e000e010 	.word	0xe000e010

08004ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff ff05 	bl	8004cf8 <__NVIC_SetPriorityGrouping>
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b086      	sub	sp, #24
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	4603      	mov	r3, r0
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f04:	f7ff ff1c 	bl	8004d40 <__NVIC_GetPriorityGrouping>
 8004f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	6978      	ldr	r0, [r7, #20]
 8004f10:	f7ff ff90 	bl	8004e34 <NVIC_EncodePriority>
 8004f14:	4602      	mov	r2, r0
 8004f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff ff5f 	bl	8004de0 <__NVIC_SetPriority>
}
 8004f22:	bf00      	nop
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	4603      	mov	r3, r0
 8004f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff ff0f 	bl	8004d5c <__NVIC_EnableIRQ>
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b082      	sub	sp, #8
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff ff1f 	bl	8004d98 <__NVIC_DisableIRQ>
}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff ff96 	bl	8004e9c <SysTick_Config>
 8004f70:	4603      	mov	r3, r0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e08d      	b.n	80050aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	4b47      	ldr	r3, [pc, #284]	@ (80050b4 <HAL_DMA_Init+0x138>)
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d80f      	bhi.n	8004fba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	4b45      	ldr	r3, [pc, #276]	@ (80050b8 <HAL_DMA_Init+0x13c>)
 8004fa2:	4413      	add	r3, r2
 8004fa4:	4a45      	ldr	r2, [pc, #276]	@ (80050bc <HAL_DMA_Init+0x140>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	009a      	lsls	r2, r3, #2
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a42      	ldr	r2, [pc, #264]	@ (80050c0 <HAL_DMA_Init+0x144>)
 8004fb6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004fb8:	e00e      	b.n	8004fd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4b40      	ldr	r3, [pc, #256]	@ (80050c4 <HAL_DMA_Init+0x148>)
 8004fc2:	4413      	add	r3, r2
 8004fc4:	4a3d      	ldr	r2, [pc, #244]	@ (80050bc <HAL_DMA_Init+0x140>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	091b      	lsrs	r3, r3, #4
 8004fcc:	009a      	lsls	r2, r3, #2
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a3c      	ldr	r2, [pc, #240]	@ (80050c8 <HAL_DMA_Init+0x14c>)
 8004fd6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa84 	bl	8005538 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005038:	d102      	bne.n	8005040 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005054:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d010      	beq.n	8005080 <HAL_DMA_Init+0x104>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b04      	cmp	r3, #4
 8005064:	d80c      	bhi.n	8005080 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 faa4 	bl	80055b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	e008      	b.n	8005092 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40020407 	.word	0x40020407
 80050b8:	bffdfff8 	.word	0xbffdfff8
 80050bc:	cccccccd 	.word	0xcccccccd
 80050c0:	40020000 	.word	0x40020000
 80050c4:	bffdfbf8 	.word	0xbffdfbf8
 80050c8:	40020400 	.word	0x40020400

080050cc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_DMA_Start_IT+0x20>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e066      	b.n	80051ba <HAL_DMA_Start_IT+0xee>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d155      	bne.n	80051ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0201 	bic.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f9c9 	bl	80054bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512e:	2b00      	cmp	r3, #0
 8005130:	d008      	beq.n	8005144 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 020e 	orr.w	r2, r2, #14
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	e00f      	b.n	8005164 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0204 	bic.w	r2, r2, #4
 8005152:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 020a 	orr.w	r2, r2, #10
 8005162:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d007      	beq.n	8005182 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800517c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005180:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005194:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005198:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	e005      	b.n	80051b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80051b4:	2302      	movs	r3, #2
 80051b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d005      	beq.n	80051e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2204      	movs	r2, #4
 80051de:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
 80051e4:	e037      	b.n	8005256 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 020e 	bic.w	r2, r2, #14
 80051f4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005204:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0201 	bic.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521a:	f003 021f 	and.w	r2, r3, #31
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	2101      	movs	r1, #1
 8005224:	fa01 f202 	lsl.w	r2, r1, r2
 8005228:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005232:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00c      	beq.n	8005256 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005246:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800524a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005254:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d00d      	beq.n	80052a8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2204      	movs	r2, #4
 8005290:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	73fb      	strb	r3, [r7, #15]
 80052a6:	e047      	b.n	8005338 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 020e 	bic.w	r2, r2, #14
 80052b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052dc:	f003 021f 	and.w	r2, r3, #31
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e4:	2101      	movs	r1, #1
 80052e6:	fa01 f202 	lsl.w	r2, r1, r2
 80052ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00c      	beq.n	8005318 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005308:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800530c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005316:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	4798      	blx	r3
    }
  }
  return status;
 8005338:	7bfb      	ldrb	r3, [r7, #15]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	2204      	movs	r2, #4
 8005364:	409a      	lsls	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d026      	beq.n	80053bc <HAL_DMA_IRQHandler+0x7a>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d021      	beq.n	80053bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d107      	bne.n	8005396 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0204 	bic.w	r2, r2, #4
 8005394:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539a:	f003 021f 	and.w	r2, r3, #31
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a2:	2104      	movs	r1, #4
 80053a4:	fa01 f202 	lsl.w	r2, r1, r2
 80053a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d071      	beq.n	8005496 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80053ba:	e06c      	b.n	8005496 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c0:	f003 031f 	and.w	r3, r3, #31
 80053c4:	2202      	movs	r2, #2
 80053c6:	409a      	lsls	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d02e      	beq.n	800542e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d029      	beq.n	800542e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10b      	bne.n	8005400 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 020a 	bic.w	r2, r2, #10
 80053f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005404:	f003 021f 	and.w	r2, r3, #31
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540c:	2102      	movs	r1, #2
 800540e:	fa01 f202 	lsl.w	r2, r1, r2
 8005412:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d038      	beq.n	8005496 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800542c:	e033      	b.n	8005496 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	2208      	movs	r2, #8
 8005438:	409a      	lsls	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4013      	ands	r3, r2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d02a      	beq.n	8005498 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d025      	beq.n	8005498 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 020e 	bic.w	r2, r2, #14
 800545a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005460:	f003 021f 	and.w	r2, r3, #31
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005468:	2101      	movs	r1, #1
 800546a:	fa01 f202 	lsl.w	r2, r1, r2
 800546e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005496:	bf00      	nop
 8005498:	bf00      	nop
}
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054ae:	b2db      	uxtb	r3, r3
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d004      	beq.n	80054e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80054e4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	f003 021f 	and.w	r2, r3, #31
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	2101      	movs	r1, #1
 80054f4:	fa01 f202 	lsl.w	r2, r1, r2
 80054f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b10      	cmp	r3, #16
 8005508:	d108      	bne.n	800551c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800551a:	e007      	b.n	800552c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	60da      	str	r2, [r3, #12]
}
 800552c:	bf00      	nop
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	4b16      	ldr	r3, [pc, #88]	@ (80055a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005548:	429a      	cmp	r2, r3
 800554a:	d802      	bhi.n	8005552 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800554c:	4b15      	ldr	r3, [pc, #84]	@ (80055a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	e001      	b.n	8005556 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005552:	4b15      	ldr	r3, [pc, #84]	@ (80055a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005554:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	3b08      	subs	r3, #8
 8005562:	4a12      	ldr	r2, [pc, #72]	@ (80055ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005564:	fba2 2303 	umull	r2, r3, r2, r3
 8005568:	091b      	lsrs	r3, r3, #4
 800556a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005570:	089b      	lsrs	r3, r3, #2
 8005572:	009a      	lsls	r2, r3, #2
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4413      	add	r3, r2
 8005578:	461a      	mov	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a0b      	ldr	r2, [pc, #44]	@ (80055b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005582:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	2201      	movs	r2, #1
 800558c:	409a      	lsls	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40020407 	.word	0x40020407
 80055a4:	40020800 	.word	0x40020800
 80055a8:	40020820 	.word	0x40020820
 80055ac:	cccccccd 	.word	0xcccccccd
 80055b0:	40020880 	.word	0x40020880

080055b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4b0b      	ldr	r3, [pc, #44]	@ (80055f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	461a      	mov	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a08      	ldr	r2, [pc, #32]	@ (80055f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055d6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3b01      	subs	r3, #1
 80055dc:	f003 031f 	and.w	r3, r3, #31
 80055e0:	2201      	movs	r2, #1
 80055e2:	409a      	lsls	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	1000823f 	.word	0x1000823f
 80055f8:	40020940 	.word	0x40020940

080055fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800560a:	e15a      	b.n	80058c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	2101      	movs	r1, #1
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	fa01 f303 	lsl.w	r3, r1, r3
 8005618:	4013      	ands	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 814c 	beq.w	80058bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d005      	beq.n	800563c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005638:	2b02      	cmp	r3, #2
 800563a:	d130      	bne.n	800569e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	2203      	movs	r2, #3
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4013      	ands	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005672:	2201      	movs	r2, #1
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	43db      	mvns	r3, r3
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4013      	ands	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	091b      	lsrs	r3, r3, #4
 8005688:	f003 0201 	and.w	r2, r3, #1
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d017      	beq.n	80056da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	2203      	movs	r2, #3
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	43db      	mvns	r3, r3
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4013      	ands	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d123      	bne.n	800572e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	08da      	lsrs	r2, r3, #3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3208      	adds	r2, #8
 80056ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	220f      	movs	r2, #15
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	43db      	mvns	r3, r3
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4013      	ands	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	08da      	lsrs	r2, r3, #3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3208      	adds	r2, #8
 8005728:	6939      	ldr	r1, [r7, #16]
 800572a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	2203      	movs	r2, #3
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43db      	mvns	r3, r3
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4013      	ands	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f003 0203 	and.w	r2, r3, #3
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80a6 	beq.w	80058bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005770:	4b5b      	ldr	r3, [pc, #364]	@ (80058e0 <HAL_GPIO_Init+0x2e4>)
 8005772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005774:	4a5a      	ldr	r2, [pc, #360]	@ (80058e0 <HAL_GPIO_Init+0x2e4>)
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	6613      	str	r3, [r2, #96]	@ 0x60
 800577c:	4b58      	ldr	r3, [pc, #352]	@ (80058e0 <HAL_GPIO_Init+0x2e4>)
 800577e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005788:	4a56      	ldr	r2, [pc, #344]	@ (80058e4 <HAL_GPIO_Init+0x2e8>)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	089b      	lsrs	r3, r3, #2
 800578e:	3302      	adds	r3, #2
 8005790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005794:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f003 0303 	and.w	r3, r3, #3
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	220f      	movs	r2, #15
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	43db      	mvns	r3, r3
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4013      	ands	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80057b2:	d01f      	beq.n	80057f4 <HAL_GPIO_Init+0x1f8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a4c      	ldr	r2, [pc, #304]	@ (80058e8 <HAL_GPIO_Init+0x2ec>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d019      	beq.n	80057f0 <HAL_GPIO_Init+0x1f4>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a4b      	ldr	r2, [pc, #300]	@ (80058ec <HAL_GPIO_Init+0x2f0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d013      	beq.n	80057ec <HAL_GPIO_Init+0x1f0>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a4a      	ldr	r2, [pc, #296]	@ (80058f0 <HAL_GPIO_Init+0x2f4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00d      	beq.n	80057e8 <HAL_GPIO_Init+0x1ec>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a49      	ldr	r2, [pc, #292]	@ (80058f4 <HAL_GPIO_Init+0x2f8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d007      	beq.n	80057e4 <HAL_GPIO_Init+0x1e8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a48      	ldr	r2, [pc, #288]	@ (80058f8 <HAL_GPIO_Init+0x2fc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d101      	bne.n	80057e0 <HAL_GPIO_Init+0x1e4>
 80057dc:	2305      	movs	r3, #5
 80057de:	e00a      	b.n	80057f6 <HAL_GPIO_Init+0x1fa>
 80057e0:	2306      	movs	r3, #6
 80057e2:	e008      	b.n	80057f6 <HAL_GPIO_Init+0x1fa>
 80057e4:	2304      	movs	r3, #4
 80057e6:	e006      	b.n	80057f6 <HAL_GPIO_Init+0x1fa>
 80057e8:	2303      	movs	r3, #3
 80057ea:	e004      	b.n	80057f6 <HAL_GPIO_Init+0x1fa>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e002      	b.n	80057f6 <HAL_GPIO_Init+0x1fa>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <HAL_GPIO_Init+0x1fa>
 80057f4:	2300      	movs	r3, #0
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	f002 0203 	and.w	r2, r2, #3
 80057fc:	0092      	lsls	r2, r2, #2
 80057fe:	4093      	lsls	r3, r2
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005806:	4937      	ldr	r1, [pc, #220]	@ (80058e4 <HAL_GPIO_Init+0x2e8>)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	089b      	lsrs	r3, r3, #2
 800580c:	3302      	adds	r3, #2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005814:	4b39      	ldr	r3, [pc, #228]	@ (80058fc <HAL_GPIO_Init+0x300>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	43db      	mvns	r3, r3
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4013      	ands	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005838:	4a30      	ldr	r2, [pc, #192]	@ (80058fc <HAL_GPIO_Init+0x300>)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800583e:	4b2f      	ldr	r3, [pc, #188]	@ (80058fc <HAL_GPIO_Init+0x300>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	43db      	mvns	r3, r3
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4013      	ands	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005862:	4a26      	ldr	r2, [pc, #152]	@ (80058fc <HAL_GPIO_Init+0x300>)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005868:	4b24      	ldr	r3, [pc, #144]	@ (80058fc <HAL_GPIO_Init+0x300>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	43db      	mvns	r3, r3
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4013      	ands	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800588c:	4a1b      	ldr	r2, [pc, #108]	@ (80058fc <HAL_GPIO_Init+0x300>)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005892:	4b1a      	ldr	r3, [pc, #104]	@ (80058fc <HAL_GPIO_Init+0x300>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	43db      	mvns	r3, r3
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4013      	ands	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80058b6:	4a11      	ldr	r2, [pc, #68]	@ (80058fc <HAL_GPIO_Init+0x300>)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	3301      	adds	r3, #1
 80058c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f47f ae9d 	bne.w	800560c <HAL_GPIO_Init+0x10>
  }
}
 80058d2:	bf00      	nop
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	40021000 	.word	0x40021000
 80058e4:	40010000 	.word	0x40010000
 80058e8:	48000400 	.word	0x48000400
 80058ec:	48000800 	.word	0x48000800
 80058f0:	48000c00 	.word	0x48000c00
 80058f4:	48001000 	.word	0x48001000
 80058f8:	48001400 	.word	0x48001400
 80058fc:	40010400 	.word	0x40010400

08005900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	807b      	strh	r3, [r7, #2]
 800590c:	4613      	mov	r3, r2
 800590e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005910:	787b      	ldrb	r3, [r7, #1]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005916:	887a      	ldrh	r2, [r7, #2]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800591c:	e002      	b.n	8005924 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800591e:	887a      	ldrh	r2, [r7, #2]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	4603      	mov	r3, r0
 8005938:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800593a:	4b08      	ldr	r3, [pc, #32]	@ (800595c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800593c:	695a      	ldr	r2, [r3, #20]
 800593e:	88fb      	ldrh	r3, [r7, #6]
 8005940:	4013      	ands	r3, r2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d006      	beq.n	8005954 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005946:	4a05      	ldr	r2, [pc, #20]	@ (800595c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800594c:	88fb      	ldrh	r3, [r7, #6]
 800594e:	4618      	mov	r0, r3
 8005950:	f7fd fbe0 	bl	8003114 <HAL_GPIO_EXTI_Callback>
  }
}
 8005954:	bf00      	nop
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40010400 	.word	0x40010400

08005960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e08d      	b.n	8005a8e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fc f9c8 	bl	8001d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2224      	movs	r2, #36	@ 0x24
 8005990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0201 	bic.w	r2, r2, #1
 80059a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80059b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d107      	bne.n	80059da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059d6:	609a      	str	r2, [r3, #8]
 80059d8:	e006      	b.n	80059e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80059e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d108      	bne.n	8005a02 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059fe:	605a      	str	r2, [r3, #4]
 8005a00:	e007      	b.n	8005a12 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691a      	ldr	r2, [r3, #16]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	69d9      	ldr	r1, [r3, #28]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1a      	ldr	r2, [r3, #32]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	@ 0x28
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	607a      	str	r2, [r7, #4]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	817b      	strh	r3, [r7, #10]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	f040 80ef 	bne.w	8005c9c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005acc:	d101      	bne.n	8005ad2 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e0e5      	b.n	8005c9e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e0de      	b.n	8005c9e <HAL_I2C_Master_Transmit_DMA+0x206>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2221      	movs	r2, #33	@ 0x21
 8005aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2210      	movs	r2, #16
 8005af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	893a      	ldrh	r2, [r7, #8]
 8005b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4a66      	ldr	r2, [pc, #408]	@ (8005ca8 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a66      	ldr	r2, [pc, #408]	@ (8005cac <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005b14:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2bff      	cmp	r3, #255	@ 0xff
 8005b1e:	d906      	bls.n	8005b2e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	22ff      	movs	r2, #255	@ 0xff
 8005b24:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005b26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	e007      	b.n	8005b3e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005b38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b3c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d01a      	beq.n	8005b7c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b60:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d074      	beq.n	8005c6e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d022      	beq.n	8005bd2 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b90:	4a47      	ldr	r2, [pc, #284]	@ (8005cb0 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005b92:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b98:	4a46      	ldr	r2, [pc, #280]	@ (8005cb4 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005b9a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba8:	2200      	movs	r2, #0
 8005baa:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb4:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005bbc:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005bc2:	f7ff fa83 	bl	80050cc <HAL_DMA_Start_IT>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d13a      	bne.n	8005c46 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005bd0:	e013      	b.n	8005bfa <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e051      	b.n	8005c9e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	3301      	adds	r3, #1
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	8979      	ldrh	r1, [r7, #10]
 8005c06:	4b2c      	ldr	r3, [pc, #176]	@ (8005cb8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f001 fba3 	bl	8007358 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005c2c:	2110      	movs	r1, #16
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f001 fbc4 	bl	80073bc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e028      	b.n	8005c98 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5a:	f043 0210 	orr.w	r2, r3, #16
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e017      	b.n	8005c9e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4a12      	ldr	r2, [pc, #72]	@ (8005cbc <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005c72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	8979      	ldrh	r1, [r7, #10]
 8005c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f001 fb68 	bl	8007358 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005c90:	2101      	movs	r1, #1
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f001 fb92 	bl	80073bc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e000      	b.n	8005c9e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	ffff0000 	.word	0xffff0000
 8005cac:	080062d7 	.word	0x080062d7
 8005cb0:	08007257 	.word	0x08007257
 8005cb4:	080072ed 	.word	0x080072ed
 8005cb8:	80002000 	.word	0x80002000
 8005cbc:	08005e97 	.word	0x08005e97

08005cc0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	68f9      	ldr	r1, [r7, #12]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
  }
}
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00f      	beq.n	8005d36 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d24:	f043 0201 	orr.w	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d34:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00f      	beq.n	8005d60 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4e:	f043 0208 	orr.w	r2, r3, #8
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d5e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00f      	beq.n	8005d8a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d78:	f043 0202 	orr.w	r2, r3, #2
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d88:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f003 030b 	and.w	r3, r3, #11
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005d9a:	68f9      	ldr	r1, [r7, #12]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 f91f 	bl	8006fe0 <I2C_ITError>
  }
}
 8005da2:	bf00      	nop
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	70fb      	strb	r3, [r7, #3]
 8005e06:	4613      	mov	r3, r2
 8005e08:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e88:	b2db      	uxtb	r3, r3
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b088      	sub	sp, #32
 8005e9a:	af02      	add	r7, sp, #8
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <I2C_Master_ISR_IT+0x1e>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e113      	b.n	80060dc <I2C_Master_ISR_IT+0x246>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f003 0310 	and.w	r3, r3, #16
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d012      	beq.n	8005eec <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00d      	beq.n	8005eec <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005edc:	f043 0204 	orr.w	r2, r3, #4
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f001 f992 	bl	800720e <I2C_Flush_TXDR>
 8005eea:	e0e4      	b.n	80060b6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d022      	beq.n	8005f3c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01d      	beq.n	8005f3c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f023 0304 	bic.w	r3, r3, #4
 8005f06:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f3a:	e0bc      	b.n	80060b6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d128      	bne.n	8005f98 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d023      	beq.n	8005f98 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01e      	beq.n	8005f98 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 80a8 	beq.w	80060b6 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6a:	781a      	ldrb	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005f96:	e08e      	b.n	80060b6 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d05c      	beq.n	800605c <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d057      	beq.n	800605c <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d040      	beq.n	8006038 <I2C_Master_ISR_IT+0x1a2>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d13c      	bne.n	8006038 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fca:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	2bff      	cmp	r3, #255	@ 0xff
 8005fd4:	d90e      	bls.n	8005ff4 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	22ff      	movs	r2, #255	@ 0xff
 8005fda:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	8a79      	ldrh	r1, [r7, #18]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f001 f9b3 	bl	8007358 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ff2:	e032      	b.n	800605a <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006002:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006006:	d00b      	beq.n	8006020 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800600c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006012:	8a79      	ldrh	r1, [r7, #18]
 8006014:	2000      	movs	r0, #0
 8006016:	9000      	str	r0, [sp, #0]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f001 f99d 	bl	8007358 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800601e:	e01c      	b.n	800605a <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006024:	b2da      	uxtb	r2, r3
 8006026:	8a79      	ldrh	r1, [r7, #18]
 8006028:	2300      	movs	r3, #0
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f001 f991 	bl	8007358 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006036:	e010      	b.n	800605a <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006042:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006046:	d003      	beq.n	8006050 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fcb0 	bl	80069ae <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800604e:	e032      	b.n	80060b6 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006050:	2140      	movs	r1, #64	@ 0x40
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 ffc4 	bl	8006fe0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006058:	e02d      	b.n	80060b6 <I2C_Master_ISR_IT+0x220>
 800605a:	e02c      	b.n	80060b6 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d027      	beq.n	80060b6 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800606c:	2b00      	cmp	r3, #0
 800606e:	d022      	beq.n	80060b6 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d119      	bne.n	80060ae <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006088:	d015      	beq.n	80060b6 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006092:	d108      	bne.n	80060a6 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060a2:	605a      	str	r2, [r3, #4]
 80060a4:	e007      	b.n	80060b6 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fc81 	bl	80069ae <I2C_ITMasterSeqCplt>
 80060ac:	e003      	b.n	80060b6 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80060ae:	2140      	movs	r1, #64	@ 0x40
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 ff95 	bl	8006fe0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80060ca:	6979      	ldr	r1, [r7, #20]
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 fd07 	bl	8006ae0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <I2C_Slave_ISR_IT+0x24>
 8006104:	2302      	movs	r3, #2
 8006106:	e0e2      	b.n	80062ce <I2C_Slave_ISR_IT+0x1ea>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006124:	6939      	ldr	r1, [r7, #16]
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fda2 	bl	8006c70 <I2C_ITSlaveCplt>
 800612c:	e0ca      	b.n	80062c4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	2b00      	cmp	r3, #0
 8006136:	d04b      	beq.n	80061d0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800613e:	2b00      	cmp	r3, #0
 8006140:	d046      	beq.n	80061d0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d128      	bne.n	800619e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b28      	cmp	r3, #40	@ 0x28
 8006156:	d108      	bne.n	800616a <I2C_Slave_ISR_IT+0x86>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800615e:	d104      	bne.n	800616a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006160:	6939      	ldr	r1, [r7, #16]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fee8 	bl	8006f38 <I2C_ITListenCplt>
 8006168:	e031      	b.n	80061ce <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b29      	cmp	r3, #41	@ 0x29
 8006174:	d10e      	bne.n	8006194 <I2C_Slave_ISR_IT+0xb0>
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800617c:	d00a      	beq.n	8006194 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2210      	movs	r2, #16
 8006184:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f001 f841 	bl	800720e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fc4b 	bl	8006a28 <I2C_ITSlaveSeqCplt>
 8006192:	e01c      	b.n	80061ce <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2210      	movs	r2, #16
 800619a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800619c:	e08f      	b.n	80062be <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2210      	movs	r2, #16
 80061a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061aa:	f043 0204 	orr.w	r2, r3, #4
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <I2C_Slave_ISR_IT+0xdc>
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061be:	d17e      	bne.n	80062be <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c4:	4619      	mov	r1, r3
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 ff0a 	bl	8006fe0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80061cc:	e077      	b.n	80062be <I2C_Slave_ISR_IT+0x1da>
 80061ce:	e076      	b.n	80062be <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d02f      	beq.n	800623a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d02a      	beq.n	800623a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d018      	beq.n	8006220 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d14b      	bne.n	80062c2 <I2C_Slave_ISR_IT+0x1de>
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006230:	d047      	beq.n	80062c2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fbf8 	bl	8006a28 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006238:	e043      	b.n	80062c2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	2b00      	cmp	r3, #0
 8006242:	d009      	beq.n	8006258 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800624a:	2b00      	cmp	r3, #0
 800624c:	d004      	beq.n	8006258 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800624e:	6939      	ldr	r1, [r7, #16]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fb28 	bl	80068a6 <I2C_ITAddrCplt>
 8006256:	e035      	b.n	80062c4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d030      	beq.n	80062c4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006268:	2b00      	cmp	r3, #0
 800626a:	d02b      	beq.n	80062c4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d018      	beq.n	80062a8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627a:	781a      	ldrb	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80062a6:	e00d      	b.n	80062c4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062ae:	d002      	beq.n	80062b6 <I2C_Slave_ISR_IT+0x1d2>
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 fbb6 	bl	8006a28 <I2C_ITSlaveSeqCplt>
 80062bc:	e002      	b.n	80062c4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80062be:	bf00      	nop
 80062c0:	e000      	b.n	80062c4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80062c2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b088      	sub	sp, #32
 80062da:	af02      	add	r7, sp, #8
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <I2C_Master_ISR_DMA+0x1a>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e0d9      	b.n	80064a4 <I2C_Master_ISR_DMA+0x1ce>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d016      	beq.n	8006330 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006308:	2b00      	cmp	r3, #0
 800630a:	d011      	beq.n	8006330 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2210      	movs	r2, #16
 8006312:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006318:	f043 0204 	orr.w	r2, r3, #4
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006320:	2120      	movs	r1, #32
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f001 f84a 	bl	80073bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 ff70 	bl	800720e <I2C_Flush_TXDR>
 800632e:	e0b4      	b.n	800649a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006336:	2b00      	cmp	r3, #0
 8006338:	d071      	beq.n	800641e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006340:	2b00      	cmp	r3, #0
 8006342:	d06c      	beq.n	800641e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006352:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d04e      	beq.n	80063fc <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	b29b      	uxth	r3, r3
 8006366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800636a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006370:	b29b      	uxth	r3, r3
 8006372:	2bff      	cmp	r3, #255	@ 0xff
 8006374:	d906      	bls.n	8006384 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	22ff      	movs	r2, #255	@ 0xff
 800637a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800637c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	e010      	b.n	80063a6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006392:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006396:	d003      	beq.n	80063a0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	e002      	b.n	80063a6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80063a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063a4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	8a79      	ldrh	r1, [r7, #18]
 80063ae:	2300      	movs	r3, #0
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 ffcf 	bl	8007358 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b22      	cmp	r3, #34	@ 0x22
 80063d6:	d108      	bne.n	80063ea <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063e6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063e8:	e057      	b.n	800649a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063fa:	e04e      	b.n	800649a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006406:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800640a:	d003      	beq.n	8006414 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 face 	bl	80069ae <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006412:	e042      	b.n	800649a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006414:	2140      	movs	r1, #64	@ 0x40
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fde2 	bl	8006fe0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800641c:	e03d      	b.n	800649a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d028      	beq.n	800647a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800642e:	2b00      	cmp	r3, #0
 8006430:	d023      	beq.n	800647a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d119      	bne.n	8006470 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800644a:	d025      	beq.n	8006498 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006450:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006454:	d108      	bne.n	8006468 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006464:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006466:	e017      	b.n	8006498 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 faa0 	bl	80069ae <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800646e:	e013      	b.n	8006498 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006470:	2140      	movs	r1, #64	@ 0x40
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 fdb4 	bl	8006fe0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006478:	e00e      	b.n	8006498 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fb25 	bl	8006ae0 <I2C_ITMasterCplt>
 8006496:	e000      	b.n	800649a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006498:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80064b8:	4b8d      	ldr	r3, [pc, #564]	@ (80066f0 <I2C_Mem_ISR_DMA+0x244>)
 80064ba:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <I2C_Mem_ISR_DMA+0x1e>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e10e      	b.n	80066e8 <I2C_Mem_ISR_DMA+0x23c>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f003 0310 	and.w	r3, r3, #16
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d016      	beq.n	800650a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d011      	beq.n	800650a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2210      	movs	r2, #16
 80064ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f2:	f043 0204 	orr.w	r2, r3, #4
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80064fa:	2120      	movs	r1, #32
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 ff5d 	bl	80073bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 fe83 	bl	800720e <I2C_Flush_TXDR>
 8006508:	e0e9      	b.n	80066de <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00e      	beq.n	8006532 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006526:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f04f 32ff 	mov.w	r2, #4294967295
 800652e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006530:	e0d5      	b.n	80066de <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006538:	2b00      	cmp	r3, #0
 800653a:	d05f      	beq.n	80065fc <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006542:	2b00      	cmp	r3, #0
 8006544:	d05a      	beq.n	80065fc <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006546:	2101      	movs	r1, #1
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 ffbb 	bl	80074c4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800654e:	2110      	movs	r1, #16
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 ff33 	bl	80073bc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d048      	beq.n	80065f2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006564:	b29b      	uxth	r3, r3
 8006566:	2bff      	cmp	r3, #255	@ 0xff
 8006568:	d910      	bls.n	800658c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	22ff      	movs	r2, #255	@ 0xff
 800656e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006574:	b299      	uxth	r1, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800657a:	b2da      	uxtb	r2, r3
 800657c:	2300      	movs	r3, #0
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 fee7 	bl	8007358 <I2C_TransferConfig>
 800658a:	e011      	b.n	80065b0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800659a:	b299      	uxth	r1, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	2300      	movs	r3, #0
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 fed4 	bl	8007358 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b22      	cmp	r3, #34	@ 0x22
 80065cc:	d108      	bne.n	80065e0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065dc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065de:	e07e      	b.n	80066de <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065ee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065f0:	e075      	b.n	80066de <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065f2:	2140      	movs	r1, #64	@ 0x40
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 fcf3 	bl	8006fe0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80065fa:	e070      	b.n	80066de <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	d05d      	beq.n	80066c2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800660c:	2b00      	cmp	r3, #0
 800660e:	d058      	beq.n	80066c2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006610:	2101      	movs	r1, #1
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 ff56 	bl	80074c4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006618:	2110      	movs	r1, #16
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 fece 	bl	80073bc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b22      	cmp	r3, #34	@ 0x22
 800662a:	d101      	bne.n	8006630 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800662c:	4b31      	ldr	r3, [pc, #196]	@ (80066f4 <I2C_Mem_ISR_DMA+0x248>)
 800662e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	2bff      	cmp	r3, #255	@ 0xff
 8006638:	d910      	bls.n	800665c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	22ff      	movs	r2, #255	@ 0xff
 800663e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006644:	b299      	uxth	r1, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800664a:	b2da      	uxtb	r2, r3
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fe7f 	bl	8007358 <I2C_TransferConfig>
 800665a:	e011      	b.n	8006680 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800666a:	b299      	uxth	r1, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006670:	b2da      	uxtb	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fe6c 	bl	8007358 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b22      	cmp	r3, #34	@ 0x22
 800669c:	d108      	bne.n	80066b0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066ac:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066ae:	e016      	b.n	80066de <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066be:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066c0:	e00d      	b.n	80066de <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d008      	beq.n	80066de <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 fa01 	bl	8006ae0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	80002000 	.word	0x80002000
 80066f4:	80002400 	.word	0x80002400

080066f8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006708:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <I2C_Slave_ISR_DMA+0x24>
 8006718:	2302      	movs	r3, #2
 800671a:	e0c0      	b.n	800689e <I2C_Slave_ISR_DMA+0x1a6>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d009      	beq.n	8006742 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006734:	2b00      	cmp	r3, #0
 8006736:	d004      	beq.n	8006742 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 fa98 	bl	8006c70 <I2C_ITSlaveCplt>
 8006740:	e0a8      	b.n	8006894 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 8095 	beq.w	8006878 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 808f 	beq.w	8006878 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800676a:	2b00      	cmp	r3, #0
 800676c:	d07d      	beq.n	800686a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00c      	beq.n	8006790 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d007      	beq.n	8006790 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 800678c:	2301      	movs	r3, #1
 800678e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00c      	beq.n	80067b2 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d007      	beq.n	80067b2 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80067ae:	2301      	movs	r3, #1
 80067b0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d128      	bne.n	800680a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b28      	cmp	r3, #40	@ 0x28
 80067c2:	d108      	bne.n	80067d6 <I2C_Slave_ISR_DMA+0xde>
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067ca:	d104      	bne.n	80067d6 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 fbb2 	bl	8006f38 <I2C_ITListenCplt>
 80067d4:	e048      	b.n	8006868 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b29      	cmp	r3, #41	@ 0x29
 80067e0:	d10e      	bne.n	8006800 <I2C_Slave_ISR_DMA+0x108>
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067e8:	d00a      	beq.n	8006800 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2210      	movs	r2, #16
 80067f0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 fd0b 	bl	800720e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 f915 	bl	8006a28 <I2C_ITSlaveSeqCplt>
 80067fe:	e033      	b.n	8006868 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2210      	movs	r2, #16
 8006806:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006808:	e034      	b.n	8006874 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2210      	movs	r2, #16
 8006810:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006816:	f043 0204 	orr.w	r2, r3, #4
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006824:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <I2C_Slave_ISR_DMA+0x13c>
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006832:	d11f      	bne.n	8006874 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	2b21      	cmp	r3, #33	@ 0x21
 8006838:	d002      	beq.n	8006840 <I2C_Slave_ISR_DMA+0x148>
 800683a:	7dfb      	ldrb	r3, [r7, #23]
 800683c:	2b29      	cmp	r3, #41	@ 0x29
 800683e:	d103      	bne.n	8006848 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2221      	movs	r2, #33	@ 0x21
 8006844:	631a      	str	r2, [r3, #48]	@ 0x30
 8006846:	e008      	b.n	800685a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	2b22      	cmp	r3, #34	@ 0x22
 800684c:	d002      	beq.n	8006854 <I2C_Slave_ISR_DMA+0x15c>
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	2b2a      	cmp	r3, #42	@ 0x2a
 8006852:	d102      	bne.n	800685a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2222      	movs	r2, #34	@ 0x22
 8006858:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800685e:	4619      	mov	r1, r3
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fbbd 	bl	8006fe0 <I2C_ITError>
      if (treatdmanack == 1U)
 8006866:	e005      	b.n	8006874 <I2C_Slave_ISR_DMA+0x17c>
 8006868:	e004      	b.n	8006874 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2210      	movs	r2, #16
 8006870:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006872:	e00f      	b.n	8006894 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8006874:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006876:	e00d      	b.n	8006894 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d008      	beq.n	8006894 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f809 	bl	80068a6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80068bc:	2b28      	cmp	r3, #40	@ 0x28
 80068be:	d16a      	bne.n	8006996 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	0c1b      	lsrs	r3, r3, #16
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	0c1b      	lsrs	r3, r3, #16
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80068de:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068ec:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80068fa:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	2b02      	cmp	r3, #2
 8006902:	d138      	bne.n	8006976 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006904:	897b      	ldrh	r3, [r7, #10]
 8006906:	09db      	lsrs	r3, r3, #7
 8006908:	b29a      	uxth	r2, r3
 800690a:	89bb      	ldrh	r3, [r7, #12]
 800690c:	4053      	eors	r3, r2
 800690e:	b29b      	uxth	r3, r3
 8006910:	f003 0306 	and.w	r3, r3, #6
 8006914:	2b00      	cmp	r3, #0
 8006916:	d11c      	bne.n	8006952 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006918:	897b      	ldrh	r3, [r7, #10]
 800691a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800692a:	2b02      	cmp	r3, #2
 800692c:	d13b      	bne.n	80069a6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2208      	movs	r2, #8
 800693a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006944:	89ba      	ldrh	r2, [r7, #12]
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff fa55 	bl	8005dfa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006950:	e029      	b.n	80069a6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006952:	893b      	ldrh	r3, [r7, #8]
 8006954:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006956:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fdb2 	bl	80074c4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006968:	89ba      	ldrh	r2, [r7, #12]
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff fa43 	bl	8005dfa <HAL_I2C_AddrCallback>
}
 8006974:	e017      	b.n	80069a6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006976:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fda2 	bl	80074c4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006988:	89ba      	ldrh	r2, [r7, #12]
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff fa33 	bl	8005dfa <HAL_I2C_AddrCallback>
}
 8006994:	e007      	b.n	80069a6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2208      	movs	r2, #8
 800699c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80069a6:	bf00      	nop
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b21      	cmp	r3, #33	@ 0x21
 80069c8:	d115      	bne.n	80069f6 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2211      	movs	r2, #17
 80069d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069de:	2101      	movs	r1, #1
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fd6f 	bl	80074c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff f9db 	bl	8005daa <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069f4:	e014      	b.n	8006a20 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2212      	movs	r2, #18
 8006a02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a0a:	2102      	movs	r1, #2
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fd59 	bl	80074c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff f9cf 	bl	8005dbe <HAL_I2C_MasterRxCpltCallback>
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d008      	beq.n	8006a5c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e00c      	b.n	8006a76 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d007      	beq.n	8006a76 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a74:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b29      	cmp	r3, #41	@ 0x29
 8006a80:	d112      	bne.n	8006aa8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2228      	movs	r2, #40	@ 0x28
 8006a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2221      	movs	r2, #33	@ 0x21
 8006a8e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a90:	2101      	movs	r1, #1
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fd16 	bl	80074c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff f996 	bl	8005dd2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006aa6:	e017      	b.n	8006ad8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ab2:	d111      	bne.n	8006ad8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2228      	movs	r2, #40	@ 0x28
 8006ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2222      	movs	r2, #34	@ 0x22
 8006ac0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ac2:	2102      	movs	r1, #2
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fcfd 	bl	80074c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff f987 	bl	8005de6 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2220      	movs	r2, #32
 8006af4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b21      	cmp	r3, #33	@ 0x21
 8006b00:	d107      	bne.n	8006b12 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b02:	2101      	movs	r1, #1
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fcdd 	bl	80074c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2211      	movs	r2, #17
 8006b0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b10:	e00c      	b.n	8006b2c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b22      	cmp	r3, #34	@ 0x22
 8006b1c:	d106      	bne.n	8006b2c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b1e:	2102      	movs	r1, #2
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fccf 	bl	80074c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2212      	movs	r2, #18
 8006b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6859      	ldr	r1, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	4b4c      	ldr	r3, [pc, #304]	@ (8006c68 <I2C_ITMasterCplt+0x188>)
 8006b38:	400b      	ands	r3, r1
 8006b3a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a49      	ldr	r2, [pc, #292]	@ (8006c6c <I2C_ITMasterCplt+0x18c>)
 8006b46:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f003 0310 	and.w	r3, r3, #16
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d009      	beq.n	8006b66 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2210      	movs	r2, #16
 8006b58:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b5e:	f043 0204 	orr.w	r2, r3, #4
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b60      	cmp	r3, #96	@ 0x60
 8006b70:	d10a      	bne.n	8006b88 <I2C_ITMasterCplt+0xa8>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006b86:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fb40 	bl	800720e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b92:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b60      	cmp	r3, #96	@ 0x60
 8006b9e:	d002      	beq.n	8006ba6 <I2C_ITMasterCplt+0xc6>
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d006      	beq.n	8006bb4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fa17 	bl	8006fe0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006bb2:	e054      	b.n	8006c5e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b21      	cmp	r3, #33	@ 0x21
 8006bbe:	d124      	bne.n	8006c0a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b40      	cmp	r3, #64	@ 0x40
 8006bd8:	d10b      	bne.n	8006bf2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff f91d 	bl	8005e2a <HAL_I2C_MemTxCpltCallback>
}
 8006bf0:	e035      	b.n	8006c5e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff f8d1 	bl	8005daa <HAL_I2C_MasterTxCpltCallback>
}
 8006c08:	e029      	b.n	8006c5e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b22      	cmp	r3, #34	@ 0x22
 8006c14:	d123      	bne.n	8006c5e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b40      	cmp	r3, #64	@ 0x40
 8006c2e:	d10b      	bne.n	8006c48 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff f8fc 	bl	8005e3e <HAL_I2C_MemRxCpltCallback>
}
 8006c46:	e00a      	b.n	8006c5e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff f8b0 	bl	8005dbe <HAL_I2C_MasterRxCpltCallback>
}
 8006c5e:	bf00      	nop
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	fe00e800 	.word	0xfe00e800
 8006c6c:	ffff0000 	.word	0xffff0000

08006c70 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c92:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c9c:	7afb      	ldrb	r3, [r7, #11]
 8006c9e:	2b21      	cmp	r3, #33	@ 0x21
 8006ca0:	d002      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x38>
 8006ca2:	7afb      	ldrb	r3, [r7, #11]
 8006ca4:	2b29      	cmp	r3, #41	@ 0x29
 8006ca6:	d108      	bne.n	8006cba <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ca8:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fc09 	bl	80074c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2221      	movs	r2, #33	@ 0x21
 8006cb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cb8:	e019      	b.n	8006cee <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cba:	7afb      	ldrb	r3, [r7, #11]
 8006cbc:	2b22      	cmp	r3, #34	@ 0x22
 8006cbe:	d002      	beq.n	8006cc6 <I2C_ITSlaveCplt+0x56>
 8006cc0:	7afb      	ldrb	r3, [r7, #11]
 8006cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cc4:	d108      	bne.n	8006cd8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006cc6:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fbfa 	bl	80074c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2222      	movs	r2, #34	@ 0x22
 8006cd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cd6:	e00a      	b.n	8006cee <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006cd8:	7afb      	ldrb	r3, [r7, #11]
 8006cda:	2b28      	cmp	r3, #40	@ 0x28
 8006cdc:	d107      	bne.n	8006cee <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006cde:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fbee 	bl	80074c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cfc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6859      	ldr	r1, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	4b89      	ldr	r3, [pc, #548]	@ (8006f30 <I2C_ITSlaveCplt+0x2c0>)
 8006d0a:	400b      	ands	r3, r1
 8006d0c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fa7d 	bl	800720e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d013      	beq.n	8006d46 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d2c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01f      	beq.n	8006d76 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d44:	e017      	b.n	8006d76 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d012      	beq.n	8006d76 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d5e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d006      	beq.n	8006d76 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d020      	beq.n	8006dc2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f023 0304 	bic.w	r3, r3, #4
 8006d86:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00c      	beq.n	8006dc2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd0:	f043 0204 	orr.w	r2, r3, #4
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f003 0310 	and.w	r3, r3, #16
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d049      	beq.n	8006e76 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d044      	beq.n	8006e76 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d128      	bne.n	8006e48 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b28      	cmp	r3, #40	@ 0x28
 8006e00:	d108      	bne.n	8006e14 <I2C_ITSlaveCplt+0x1a4>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e08:	d104      	bne.n	8006e14 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e0a:	6979      	ldr	r1, [r7, #20]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f893 	bl	8006f38 <I2C_ITListenCplt>
 8006e12:	e030      	b.n	8006e76 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b29      	cmp	r3, #41	@ 0x29
 8006e1e:	d10e      	bne.n	8006e3e <I2C_ITSlaveCplt+0x1ce>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e26:	d00a      	beq.n	8006e3e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2210      	movs	r2, #16
 8006e2e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f9ec 	bl	800720e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff fdf6 	bl	8006a28 <I2C_ITSlaveSeqCplt>
 8006e3c:	e01b      	b.n	8006e76 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2210      	movs	r2, #16
 8006e44:	61da      	str	r2, [r3, #28]
 8006e46:	e016      	b.n	8006e76 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2210      	movs	r2, #16
 8006e4e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e54:	f043 0204 	orr.w	r2, r3, #4
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <I2C_ITSlaveCplt+0x1fa>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e68:	d105      	bne.n	8006e76 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f8b5 	bl	8006fe0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d010      	beq.n	8006eae <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f8a4 	bl	8006fe0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b28      	cmp	r3, #40	@ 0x28
 8006ea2:	d141      	bne.n	8006f28 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ea4:	6979      	ldr	r1, [r7, #20]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f846 	bl	8006f38 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006eac:	e03c      	b.n	8006f28 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006eb6:	d014      	beq.n	8006ee2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff fdb5 	bl	8006a28 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8006f34 <I2C_ITSlaveCplt+0x2c4>)
 8006ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fe ff9b 	bl	8005e16 <HAL_I2C_ListenCpltCallback>
}
 8006ee0:	e022      	b.n	8006f28 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b22      	cmp	r3, #34	@ 0x22
 8006eec:	d10e      	bne.n	8006f0c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7fe ff6e 	bl	8005de6 <HAL_I2C_SlaveRxCpltCallback>
}
 8006f0a:	e00d      	b.n	8006f28 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fe ff55 	bl	8005dd2 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f28:	bf00      	nop
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	fe00e800 	.word	0xfe00e800
 8006f34:	ffff0000 	.word	0xffff0000

08006f38 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a25      	ldr	r2, [pc, #148]	@ (8006fdc <I2C_ITListenCplt+0xa4>)
 8006f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d022      	beq.n	8006fb4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d012      	beq.n	8006fb4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fac:	f043 0204 	orr.w	r2, r3, #4
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fb4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fa83 	bl	80074c4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2210      	movs	r2, #16
 8006fc4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fe ff21 	bl	8005e16 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	ffff0000 	.word	0xffff0000

08006fe0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ff0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a6d      	ldr	r2, [pc, #436]	@ (80071b4 <I2C_ITError+0x1d4>)
 8006ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	2b28      	cmp	r3, #40	@ 0x28
 8007016:	d005      	beq.n	8007024 <I2C_ITError+0x44>
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	2b29      	cmp	r3, #41	@ 0x29
 800701c:	d002      	beq.n	8007024 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	2b2a      	cmp	r3, #42	@ 0x2a
 8007022:	d10b      	bne.n	800703c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007024:	2103      	movs	r1, #3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa4c 	bl	80074c4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2228      	movs	r2, #40	@ 0x28
 8007030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a60      	ldr	r2, [pc, #384]	@ (80071b8 <I2C_ITError+0x1d8>)
 8007038:	635a      	str	r2, [r3, #52]	@ 0x34
 800703a:	e030      	b.n	800709e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800703c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fa3f 	bl	80074c4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f8e1 	bl	800720e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b60      	cmp	r3, #96	@ 0x60
 8007056:	d01f      	beq.n	8007098 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b20      	cmp	r3, #32
 800706c:	d114      	bne.n	8007098 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	f003 0310 	and.w	r3, r3, #16
 8007078:	2b10      	cmp	r3, #16
 800707a:	d109      	bne.n	8007090 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2210      	movs	r2, #16
 8007082:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007088:	f043 0204 	orr.w	r2, r3, #4
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2220      	movs	r2, #32
 8007096:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d039      	beq.n	8007120 <I2C_ITError+0x140>
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b11      	cmp	r3, #17
 80070b0:	d002      	beq.n	80070b8 <I2C_ITError+0xd8>
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b21      	cmp	r3, #33	@ 0x21
 80070b6:	d133      	bne.n	8007120 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070c6:	d107      	bne.n	80070d8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe f9df 	bl	80054a0 <HAL_DMA_GetState>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d017      	beq.n	8007118 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ec:	4a33      	ldr	r2, [pc, #204]	@ (80071bc <I2C_ITError+0x1dc>)
 80070ee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe f8b9 	bl	8005274 <HAL_DMA_Abort_IT>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d04d      	beq.n	80071a4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007112:	4610      	mov	r0, r2
 8007114:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007116:	e045      	b.n	80071a4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f851 	bl	80071c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800711e:	e041      	b.n	80071a4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007124:	2b00      	cmp	r3, #0
 8007126:	d039      	beq.n	800719c <I2C_ITError+0x1bc>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2b12      	cmp	r3, #18
 800712c:	d002      	beq.n	8007134 <I2C_ITError+0x154>
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b22      	cmp	r3, #34	@ 0x22
 8007132:	d133      	bne.n	800719c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800713e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007142:	d107      	bne.n	8007154 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007152:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe f9a1 	bl	80054a0 <HAL_DMA_GetState>
 800715e:	4603      	mov	r3, r0
 8007160:	2b01      	cmp	r3, #1
 8007162:	d017      	beq.n	8007194 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007168:	4a14      	ldr	r2, [pc, #80]	@ (80071bc <I2C_ITError+0x1dc>)
 800716a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe f87b 	bl	8005274 <HAL_DMA_Abort_IT>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d011      	beq.n	80071a8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800718e:	4610      	mov	r0, r2
 8007190:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007192:	e009      	b.n	80071a8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f813 	bl	80071c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800719a:	e005      	b.n	80071a8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f80f 	bl	80071c0 <I2C_TreatErrorCallback>
  }
}
 80071a2:	e002      	b.n	80071aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071a4:	bf00      	nop
 80071a6:	e000      	b.n	80071aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071a8:	bf00      	nop
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	ffff0000 	.word	0xffff0000
 80071b8:	080060e5 	.word	0x080060e5
 80071bc:	0800731b 	.word	0x0800731b

080071c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b60      	cmp	r3, #96	@ 0x60
 80071d2:	d10e      	bne.n	80071f2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7fe fe3b 	bl	8005e66 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071f0:	e009      	b.n	8007206 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7fe fe26 	bl	8005e52 <HAL_I2C_ErrorCallback>
}
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b02      	cmp	r3, #2
 8007222:	d103      	bne.n	800722c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2200      	movs	r2, #0
 800722a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b01      	cmp	r3, #1
 8007238:	d007      	beq.n	800724a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699a      	ldr	r2, [r3, #24]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0201 	orr.w	r2, r2, #1
 8007248:	619a      	str	r2, [r3, #24]
  }
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007262:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007272:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007278:	b29b      	uxth	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d104      	bne.n	8007288 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800727e:	2120      	movs	r1, #32
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 f89b 	bl	80073bc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007286:	e02d      	b.n	80072e4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007290:	441a      	add	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800729a:	b29b      	uxth	r3, r3
 800729c:	2bff      	cmp	r3, #255	@ 0xff
 800729e:	d903      	bls.n	80072a8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	22ff      	movs	r2, #255	@ 0xff
 80072a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80072a6:	e004      	b.n	80072b2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ba:	4619      	mov	r1, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3328      	adds	r3, #40	@ 0x28
 80072c2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80072c8:	f7fd ff00 	bl	80050cc <HAL_DMA_Start_IT>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d004      	beq.n	80072dc <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80072d2:	2110      	movs	r1, #16
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7ff fe83 	bl	8006fe0 <I2C_ITError>
}
 80072da:	e003      	b.n	80072e4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80072dc:	2140      	movs	r1, #64	@ 0x40
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 f86c 	bl	80073bc <I2C_Enable_IRQ>
}
 80072e4:	bf00      	nop
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f8:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007308:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800730a:	2110      	movs	r1, #16
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7ff fe67 	bl	8006fe0 <I2C_ITError>
}
 8007312:	bf00      	nop
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007326:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007334:	2200      	movs	r2, #0
 8007336:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007344:	2200      	movs	r2, #0
 8007346:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f7ff ff39 	bl	80071c0 <I2C_TreatErrorCallback>
}
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	607b      	str	r3, [r7, #4]
 8007362:	460b      	mov	r3, r1
 8007364:	817b      	strh	r3, [r7, #10]
 8007366:	4613      	mov	r3, r2
 8007368:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800736a:	897b      	ldrh	r3, [r7, #10]
 800736c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007370:	7a7b      	ldrb	r3, [r7, #9]
 8007372:	041b      	lsls	r3, r3, #16
 8007374:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007378:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	4313      	orrs	r3, r2
 8007382:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007386:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	0d5b      	lsrs	r3, r3, #21
 8007392:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007396:	4b08      	ldr	r3, [pc, #32]	@ (80073b8 <I2C_TransferConfig+0x60>)
 8007398:	430b      	orrs	r3, r1
 800739a:	43db      	mvns	r3, r3
 800739c:	ea02 0103 	and.w	r1, r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	03ff63ff 	.word	0x03ff63ff

080073bc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073d0:	4a39      	ldr	r2, [pc, #228]	@ (80074b8 <I2C_Enable_IRQ+0xfc>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d032      	beq.n	800743c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80073da:	4a38      	ldr	r2, [pc, #224]	@ (80074bc <I2C_Enable_IRQ+0x100>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d02d      	beq.n	800743c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80073e4:	4a36      	ldr	r2, [pc, #216]	@ (80074c0 <I2C_Enable_IRQ+0x104>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d028      	beq.n	800743c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80073ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	da03      	bge.n	80073fa <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80073f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80073fa:	887b      	ldrh	r3, [r7, #2]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800740a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800740c:	887b      	ldrh	r3, [r7, #2]
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800741c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800741e:	887b      	ldrh	r3, [r7, #2]
 8007420:	2b10      	cmp	r3, #16
 8007422:	d103      	bne.n	800742c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800742a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800742c:	887b      	ldrh	r3, [r7, #2]
 800742e:	2b20      	cmp	r3, #32
 8007430:	d133      	bne.n	800749a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f043 0320 	orr.w	r3, r3, #32
 8007438:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800743a:	e02e      	b.n	800749a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800743c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007440:	2b00      	cmp	r3, #0
 8007442:	da03      	bge.n	800744c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800744a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800744c:	887b      	ldrh	r3, [r7, #2]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800745c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800745e:	887b      	ldrh	r3, [r7, #2]
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800746e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007470:	887b      	ldrh	r3, [r7, #2]
 8007472:	2b10      	cmp	r3, #16
 8007474:	d103      	bne.n	800747e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800747c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800747e:	887b      	ldrh	r3, [r7, #2]
 8007480:	2b20      	cmp	r3, #32
 8007482:	d103      	bne.n	800748c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800748a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800748c:	887b      	ldrh	r3, [r7, #2]
 800748e:	2b40      	cmp	r3, #64	@ 0x40
 8007490:	d103      	bne.n	800749a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007498:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6819      	ldr	r1, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	601a      	str	r2, [r3, #0]
}
 80074aa:	bf00      	nop
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	080062d7 	.word	0x080062d7
 80074bc:	080066f9 	.word	0x080066f9
 80074c0:	080064ad 	.word	0x080064ad

080074c4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80074d4:	887b      	ldrh	r3, [r7, #2]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00f      	beq.n	80074fe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80074e4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80074f2:	2b28      	cmp	r3, #40	@ 0x28
 80074f4:	d003      	beq.n	80074fe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80074fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80074fe:	887b      	ldrh	r3, [r7, #2]
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00f      	beq.n	8007528 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800750e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007516:	b2db      	uxtb	r3, r3
 8007518:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800751c:	2b28      	cmp	r3, #40	@ 0x28
 800751e:	d003      	beq.n	8007528 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007526:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007528:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800752c:	2b00      	cmp	r3, #0
 800752e:	da03      	bge.n	8007538 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007536:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007538:	887b      	ldrh	r3, [r7, #2]
 800753a:	2b10      	cmp	r3, #16
 800753c:	d103      	bne.n	8007546 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007544:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007546:	887b      	ldrh	r3, [r7, #2]
 8007548:	2b20      	cmp	r3, #32
 800754a:	d103      	bne.n	8007554 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f043 0320 	orr.w	r3, r3, #32
 8007552:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007554:	887b      	ldrh	r3, [r7, #2]
 8007556:	2b40      	cmp	r3, #64	@ 0x40
 8007558:	d103      	bne.n	8007562 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007560:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6819      	ldr	r1, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	43da      	mvns	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	400a      	ands	r2, r1
 8007572:	601a      	str	r2, [r3, #0]
}
 8007574:	bf00      	nop
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b20      	cmp	r3, #32
 8007594:	d138      	bne.n	8007608 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e032      	b.n	800760a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2224      	movs	r2, #36	@ 0x24
 80075b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0201 	bic.w	r2, r2, #1
 80075c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80075d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6819      	ldr	r1, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	430a      	orrs	r2, r1
 80075e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 0201 	orr.w	r2, r2, #1
 80075f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	e000      	b.n	800760a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007608:	2302      	movs	r3, #2
  }
}
 800760a:	4618      	mov	r0, r3
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b20      	cmp	r3, #32
 800762a:	d139      	bne.n	80076a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007632:	2b01      	cmp	r3, #1
 8007634:	d101      	bne.n	800763a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007636:	2302      	movs	r3, #2
 8007638:	e033      	b.n	80076a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2224      	movs	r2, #36	@ 0x24
 8007646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0201 	bic.w	r2, r2, #1
 8007658:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007668:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0201 	orr.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	e000      	b.n	80076a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076a0:	2302      	movs	r3, #2
  }
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
	...

080076b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d141      	bne.n	8007742 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80076be:	4b4b      	ldr	r3, [pc, #300]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80076c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ca:	d131      	bne.n	8007730 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80076cc:	4b47      	ldr	r3, [pc, #284]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d2:	4a46      	ldr	r2, [pc, #280]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80076dc:	4b43      	ldr	r3, [pc, #268]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80076e4:	4a41      	ldr	r2, [pc, #260]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80076ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80076ec:	4b40      	ldr	r3, [pc, #256]	@ (80077f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2232      	movs	r2, #50	@ 0x32
 80076f2:	fb02 f303 	mul.w	r3, r2, r3
 80076f6:	4a3f      	ldr	r2, [pc, #252]	@ (80077f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80076f8:	fba2 2303 	umull	r2, r3, r2, r3
 80076fc:	0c9b      	lsrs	r3, r3, #18
 80076fe:	3301      	adds	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007702:	e002      	b.n	800770a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3b01      	subs	r3, #1
 8007708:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800770a:	4b38      	ldr	r3, [pc, #224]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007716:	d102      	bne.n	800771e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f2      	bne.n	8007704 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800771e:	4b33      	ldr	r3, [pc, #204]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800772a:	d158      	bne.n	80077de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e057      	b.n	80077e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007730:	4b2e      	ldr	r3, [pc, #184]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007736:	4a2d      	ldr	r2, [pc, #180]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800773c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007740:	e04d      	b.n	80077de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007748:	d141      	bne.n	80077ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800774a:	4b28      	ldr	r3, [pc, #160]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007756:	d131      	bne.n	80077bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007758:	4b24      	ldr	r3, [pc, #144]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800775a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800775e:	4a23      	ldr	r2, [pc, #140]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007764:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007768:	4b20      	ldr	r3, [pc, #128]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007770:	4a1e      	ldr	r2, [pc, #120]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007776:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007778:	4b1d      	ldr	r3, [pc, #116]	@ (80077f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2232      	movs	r2, #50	@ 0x32
 800777e:	fb02 f303 	mul.w	r3, r2, r3
 8007782:	4a1c      	ldr	r2, [pc, #112]	@ (80077f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007784:	fba2 2303 	umull	r2, r3, r2, r3
 8007788:	0c9b      	lsrs	r3, r3, #18
 800778a:	3301      	adds	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800778e:	e002      	b.n	8007796 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	3b01      	subs	r3, #1
 8007794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007796:	4b15      	ldr	r3, [pc, #84]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800779e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077a2:	d102      	bne.n	80077aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1f2      	bne.n	8007790 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80077aa:	4b10      	ldr	r3, [pc, #64]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077b6:	d112      	bne.n	80077de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e011      	b.n	80077e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80077bc:	4b0b      	ldr	r3, [pc, #44]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077c2:	4a0a      	ldr	r2, [pc, #40]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80077cc:	e007      	b.n	80077de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80077ce:	4b07      	ldr	r3, [pc, #28]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80077d6:	4a05      	ldr	r2, [pc, #20]	@ (80077ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80077dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	40007000 	.word	0x40007000
 80077f0:	2000003c 	.word	0x2000003c
 80077f4:	431bde83 	.word	0x431bde83

080077f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80077f8:	b480      	push	{r7}
 80077fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80077fc:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	4a04      	ldr	r2, [pc, #16]	@ (8007814 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007806:	6093      	str	r3, [r2, #8]
}
 8007808:	bf00      	nop
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	40007000 	.word	0x40007000

08007818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b088      	sub	sp, #32
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e2fe      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d075      	beq.n	8007922 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007836:	4b97      	ldr	r3, [pc, #604]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 030c 	and.w	r3, r3, #12
 800783e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007840:	4b94      	ldr	r3, [pc, #592]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f003 0303 	and.w	r3, r3, #3
 8007848:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	2b0c      	cmp	r3, #12
 800784e:	d102      	bne.n	8007856 <HAL_RCC_OscConfig+0x3e>
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2b03      	cmp	r3, #3
 8007854:	d002      	beq.n	800785c <HAL_RCC_OscConfig+0x44>
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	2b08      	cmp	r3, #8
 800785a:	d10b      	bne.n	8007874 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800785c:	4b8d      	ldr	r3, [pc, #564]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d05b      	beq.n	8007920 <HAL_RCC_OscConfig+0x108>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d157      	bne.n	8007920 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e2d9      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800787c:	d106      	bne.n	800788c <HAL_RCC_OscConfig+0x74>
 800787e:	4b85      	ldr	r3, [pc, #532]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a84      	ldr	r2, [pc, #528]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	e01d      	b.n	80078c8 <HAL_RCC_OscConfig+0xb0>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007894:	d10c      	bne.n	80078b0 <HAL_RCC_OscConfig+0x98>
 8007896:	4b7f      	ldr	r3, [pc, #508]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a7e      	ldr	r2, [pc, #504]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 800789c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	4b7c      	ldr	r3, [pc, #496]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a7b      	ldr	r2, [pc, #492]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 80078a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	e00b      	b.n	80078c8 <HAL_RCC_OscConfig+0xb0>
 80078b0:	4b78      	ldr	r3, [pc, #480]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a77      	ldr	r2, [pc, #476]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 80078b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	4b75      	ldr	r3, [pc, #468]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a74      	ldr	r2, [pc, #464]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 80078c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d013      	beq.n	80078f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d0:	f7fd f9e4 	bl	8004c9c <HAL_GetTick>
 80078d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078d6:	e008      	b.n	80078ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078d8:	f7fd f9e0 	bl	8004c9c <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	2b64      	cmp	r3, #100	@ 0x64
 80078e4:	d901      	bls.n	80078ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e29e      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078ea:	4b6a      	ldr	r3, [pc, #424]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0f0      	beq.n	80078d8 <HAL_RCC_OscConfig+0xc0>
 80078f6:	e014      	b.n	8007922 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f8:	f7fd f9d0 	bl	8004c9c <HAL_GetTick>
 80078fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007900:	f7fd f9cc 	bl	8004c9c <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b64      	cmp	r3, #100	@ 0x64
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e28a      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007912:	4b60      	ldr	r3, [pc, #384]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1f0      	bne.n	8007900 <HAL_RCC_OscConfig+0xe8>
 800791e:	e000      	b.n	8007922 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d075      	beq.n	8007a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800792e:	4b59      	ldr	r3, [pc, #356]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f003 030c 	and.w	r3, r3, #12
 8007936:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007938:	4b56      	ldr	r3, [pc, #344]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	2b0c      	cmp	r3, #12
 8007946:	d102      	bne.n	800794e <HAL_RCC_OscConfig+0x136>
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2b02      	cmp	r3, #2
 800794c:	d002      	beq.n	8007954 <HAL_RCC_OscConfig+0x13c>
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b04      	cmp	r3, #4
 8007952:	d11f      	bne.n	8007994 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007954:	4b4f      	ldr	r3, [pc, #316]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <HAL_RCC_OscConfig+0x154>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e25d      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800796c:	4b49      	ldr	r3, [pc, #292]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	061b      	lsls	r3, r3, #24
 800797a:	4946      	ldr	r1, [pc, #280]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 800797c:	4313      	orrs	r3, r2
 800797e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007980:	4b45      	ldr	r3, [pc, #276]	@ (8007a98 <HAL_RCC_OscConfig+0x280>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4618      	mov	r0, r3
 8007986:	f7fd f93d 	bl	8004c04 <HAL_InitTick>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d043      	beq.n	8007a18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e249      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d023      	beq.n	80079e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800799c:	4b3d      	ldr	r3, [pc, #244]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a3c      	ldr	r2, [pc, #240]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 80079a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a8:	f7fd f978 	bl	8004c9c <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079b0:	f7fd f974 	bl	8004c9c <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e232      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079c2:	4b34      	ldr	r3, [pc, #208]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0f0      	beq.n	80079b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ce:	4b31      	ldr	r3, [pc, #196]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	061b      	lsls	r3, r3, #24
 80079dc:	492d      	ldr	r1, [pc, #180]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	604b      	str	r3, [r1, #4]
 80079e2:	e01a      	b.n	8007a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a2a      	ldr	r2, [pc, #168]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 80079ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f0:	f7fd f954 	bl	8004c9c <HAL_GetTick>
 80079f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079f6:	e008      	b.n	8007a0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079f8:	f7fd f950 	bl	8004c9c <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e20e      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a0a:	4b22      	ldr	r3, [pc, #136]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1f0      	bne.n	80079f8 <HAL_RCC_OscConfig+0x1e0>
 8007a16:	e000      	b.n	8007a1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0308 	and.w	r3, r3, #8
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d041      	beq.n	8007aaa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d01c      	beq.n	8007a68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a2e:	4b19      	ldr	r3, [pc, #100]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a34:	4a17      	ldr	r2, [pc, #92]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007a36:	f043 0301 	orr.w	r3, r3, #1
 8007a3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a3e:	f7fd f92d 	bl	8004c9c <HAL_GetTick>
 8007a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a44:	e008      	b.n	8007a58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a46:	f7fd f929 	bl	8004c9c <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d901      	bls.n	8007a58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e1e7      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a58:	4b0e      	ldr	r3, [pc, #56]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0ef      	beq.n	8007a46 <HAL_RCC_OscConfig+0x22e>
 8007a66:	e020      	b.n	8007aaa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a68:	4b0a      	ldr	r3, [pc, #40]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a6e:	4a09      	ldr	r2, [pc, #36]	@ (8007a94 <HAL_RCC_OscConfig+0x27c>)
 8007a70:	f023 0301 	bic.w	r3, r3, #1
 8007a74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a78:	f7fd f910 	bl	8004c9c <HAL_GetTick>
 8007a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a7e:	e00d      	b.n	8007a9c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a80:	f7fd f90c 	bl	8004c9c <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d906      	bls.n	8007a9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e1ca      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
 8007a92:	bf00      	nop
 8007a94:	40021000 	.word	0x40021000
 8007a98:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a9c:	4b8c      	ldr	r3, [pc, #560]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1ea      	bne.n	8007a80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0304 	and.w	r3, r3, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 80a6 	beq.w	8007c04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007abc:	4b84      	ldr	r3, [pc, #528]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <HAL_RCC_OscConfig+0x2b4>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e000      	b.n	8007ace <HAL_RCC_OscConfig+0x2b6>
 8007acc:	2300      	movs	r3, #0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00d      	beq.n	8007aee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad6:	4a7e      	ldr	r2, [pc, #504]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007adc:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ade:	4b7c      	ldr	r3, [pc, #496]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007aea:	2301      	movs	r3, #1
 8007aec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007aee:	4b79      	ldr	r3, [pc, #484]	@ (8007cd4 <HAL_RCC_OscConfig+0x4bc>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d118      	bne.n	8007b2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007afa:	4b76      	ldr	r3, [pc, #472]	@ (8007cd4 <HAL_RCC_OscConfig+0x4bc>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a75      	ldr	r2, [pc, #468]	@ (8007cd4 <HAL_RCC_OscConfig+0x4bc>)
 8007b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b06:	f7fd f8c9 	bl	8004c9c <HAL_GetTick>
 8007b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b0c:	e008      	b.n	8007b20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b0e:	f7fd f8c5 	bl	8004c9c <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d901      	bls.n	8007b20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e183      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b20:	4b6c      	ldr	r3, [pc, #432]	@ (8007cd4 <HAL_RCC_OscConfig+0x4bc>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d0f0      	beq.n	8007b0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d108      	bne.n	8007b46 <HAL_RCC_OscConfig+0x32e>
 8007b34:	4b66      	ldr	r3, [pc, #408]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b3a:	4a65      	ldr	r2, [pc, #404]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b44:	e024      	b.n	8007b90 <HAL_RCC_OscConfig+0x378>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	2b05      	cmp	r3, #5
 8007b4c:	d110      	bne.n	8007b70 <HAL_RCC_OscConfig+0x358>
 8007b4e:	4b60      	ldr	r3, [pc, #384]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b54:	4a5e      	ldr	r2, [pc, #376]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007b56:	f043 0304 	orr.w	r3, r3, #4
 8007b5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b5e:	4b5c      	ldr	r3, [pc, #368]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b64:	4a5a      	ldr	r2, [pc, #360]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007b66:	f043 0301 	orr.w	r3, r3, #1
 8007b6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b6e:	e00f      	b.n	8007b90 <HAL_RCC_OscConfig+0x378>
 8007b70:	4b57      	ldr	r3, [pc, #348]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b76:	4a56      	ldr	r2, [pc, #344]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007b78:	f023 0301 	bic.w	r3, r3, #1
 8007b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b80:	4b53      	ldr	r3, [pc, #332]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b86:	4a52      	ldr	r2, [pc, #328]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007b88:	f023 0304 	bic.w	r3, r3, #4
 8007b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d016      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b98:	f7fd f880 	bl	8004c9c <HAL_GetTick>
 8007b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b9e:	e00a      	b.n	8007bb6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ba0:	f7fd f87c 	bl	8004c9c <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e138      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bb6:	4b46      	ldr	r3, [pc, #280]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0ed      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x388>
 8007bc4:	e015      	b.n	8007bf2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bc6:	f7fd f869 	bl	8004c9c <HAL_GetTick>
 8007bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007bcc:	e00a      	b.n	8007be4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bce:	f7fd f865 	bl	8004c9c <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d901      	bls.n	8007be4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e121      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007be4:	4b3a      	ldr	r3, [pc, #232]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1ed      	bne.n	8007bce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007bf2:	7ffb      	ldrb	r3, [r7, #31]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d105      	bne.n	8007c04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bf8:	4b35      	ldr	r3, [pc, #212]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bfc:	4a34      	ldr	r2, [pc, #208]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0320 	and.w	r3, r3, #32
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d03c      	beq.n	8007c8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d01c      	beq.n	8007c52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c18:	4b2d      	ldr	r3, [pc, #180]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007c20:	f043 0301 	orr.w	r3, r3, #1
 8007c24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c28:	f7fd f838 	bl	8004c9c <HAL_GetTick>
 8007c2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007c2e:	e008      	b.n	8007c42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c30:	f7fd f834 	bl	8004c9c <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e0f2      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007c42:	4b23      	ldr	r3, [pc, #140]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0ef      	beq.n	8007c30 <HAL_RCC_OscConfig+0x418>
 8007c50:	e01b      	b.n	8007c8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c52:	4b1f      	ldr	r3, [pc, #124]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c58:	4a1d      	ldr	r2, [pc, #116]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c62:	f7fd f81b 	bl	8004c9c <HAL_GetTick>
 8007c66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c68:	e008      	b.n	8007c7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c6a:	f7fd f817 	bl	8004c9c <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d901      	bls.n	8007c7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e0d5      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c7c:	4b14      	ldr	r3, [pc, #80]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1ef      	bne.n	8007c6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 80c9 	beq.w	8007e26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c94:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	f003 030c 	and.w	r3, r3, #12
 8007c9c:	2b0c      	cmp	r3, #12
 8007c9e:	f000 8083 	beq.w	8007da8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d15e      	bne.n	8007d68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007caa:	4b09      	ldr	r3, [pc, #36]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a08      	ldr	r2, [pc, #32]	@ (8007cd0 <HAL_RCC_OscConfig+0x4b8>)
 8007cb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb6:	f7fc fff1 	bl	8004c9c <HAL_GetTick>
 8007cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cbc:	e00c      	b.n	8007cd8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cbe:	f7fc ffed 	bl	8004c9c <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d905      	bls.n	8007cd8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e0ab      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
 8007cd0:	40021000 	.word	0x40021000
 8007cd4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cd8:	4b55      	ldr	r3, [pc, #340]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1ec      	bne.n	8007cbe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ce4:	4b52      	ldr	r3, [pc, #328]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007ce6:	68da      	ldr	r2, [r3, #12]
 8007ce8:	4b52      	ldr	r3, [pc, #328]	@ (8007e34 <HAL_RCC_OscConfig+0x61c>)
 8007cea:	4013      	ands	r3, r2
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6a11      	ldr	r1, [r2, #32]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007cf4:	3a01      	subs	r2, #1
 8007cf6:	0112      	lsls	r2, r2, #4
 8007cf8:	4311      	orrs	r1, r2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007cfe:	0212      	lsls	r2, r2, #8
 8007d00:	4311      	orrs	r1, r2
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007d06:	0852      	lsrs	r2, r2, #1
 8007d08:	3a01      	subs	r2, #1
 8007d0a:	0552      	lsls	r2, r2, #21
 8007d0c:	4311      	orrs	r1, r2
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007d12:	0852      	lsrs	r2, r2, #1
 8007d14:	3a01      	subs	r2, #1
 8007d16:	0652      	lsls	r2, r2, #25
 8007d18:	4311      	orrs	r1, r2
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007d1e:	06d2      	lsls	r2, r2, #27
 8007d20:	430a      	orrs	r2, r1
 8007d22:	4943      	ldr	r1, [pc, #268]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d28:	4b41      	ldr	r3, [pc, #260]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a40      	ldr	r2, [pc, #256]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007d2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d34:	4b3e      	ldr	r3, [pc, #248]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	4a3d      	ldr	r2, [pc, #244]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d40:	f7fc ffac 	bl	8004c9c <HAL_GetTick>
 8007d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d46:	e008      	b.n	8007d5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d48:	f7fc ffa8 	bl	8004c9c <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e066      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d5a:	4b35      	ldr	r3, [pc, #212]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0f0      	beq.n	8007d48 <HAL_RCC_OscConfig+0x530>
 8007d66:	e05e      	b.n	8007e26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d68:	4b31      	ldr	r3, [pc, #196]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a30      	ldr	r2, [pc, #192]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007d6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d74:	f7fc ff92 	bl	8004c9c <HAL_GetTick>
 8007d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d7a:	e008      	b.n	8007d8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d7c:	f7fc ff8e 	bl	8004c9c <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e04c      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d8e:	4b28      	ldr	r3, [pc, #160]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f0      	bne.n	8007d7c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007d9a:	4b25      	ldr	r3, [pc, #148]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	4924      	ldr	r1, [pc, #144]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007da0:	4b25      	ldr	r3, [pc, #148]	@ (8007e38 <HAL_RCC_OscConfig+0x620>)
 8007da2:	4013      	ands	r3, r2
 8007da4:	60cb      	str	r3, [r1, #12]
 8007da6:	e03e      	b.n	8007e26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e039      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007db4:	4b1e      	ldr	r3, [pc, #120]	@ (8007e30 <HAL_RCC_OscConfig+0x618>)
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f003 0203 	and.w	r2, r3, #3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d12c      	bne.n	8007e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d123      	bne.n	8007e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d11b      	bne.n	8007e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d113      	bne.n	8007e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e04:	085b      	lsrs	r3, r3, #1
 8007e06:	3b01      	subs	r3, #1
 8007e08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d109      	bne.n	8007e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e18:	085b      	lsrs	r3, r3, #1
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d001      	beq.n	8007e26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e000      	b.n	8007e28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3720      	adds	r7, #32
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	40021000 	.word	0x40021000
 8007e34:	019f800c 	.word	0x019f800c
 8007e38:	feeefffc 	.word	0xfeeefffc

08007e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007e46:	2300      	movs	r3, #0
 8007e48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e11e      	b.n	8008092 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e54:	4b91      	ldr	r3, [pc, #580]	@ (800809c <HAL_RCC_ClockConfig+0x260>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 030f 	and.w	r3, r3, #15
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d910      	bls.n	8007e84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e62:	4b8e      	ldr	r3, [pc, #568]	@ (800809c <HAL_RCC_ClockConfig+0x260>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f023 020f 	bic.w	r2, r3, #15
 8007e6a:	498c      	ldr	r1, [pc, #560]	@ (800809c <HAL_RCC_ClockConfig+0x260>)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e72:	4b8a      	ldr	r3, [pc, #552]	@ (800809c <HAL_RCC_ClockConfig+0x260>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 030f 	and.w	r3, r3, #15
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d001      	beq.n	8007e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e106      	b.n	8008092 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d073      	beq.n	8007f78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d129      	bne.n	8007eec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e98:	4b81      	ldr	r3, [pc, #516]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e0f4      	b.n	8008092 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007ea8:	f000 f99e 	bl	80081e8 <RCC_GetSysClockFreqFromPLLSource>
 8007eac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	4a7c      	ldr	r2, [pc, #496]	@ (80080a4 <HAL_RCC_ClockConfig+0x268>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d93f      	bls.n	8007f36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d009      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d033      	beq.n	8007f36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d12f      	bne.n	8007f36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007ed6:	4b72      	ldr	r3, [pc, #456]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ede:	4a70      	ldr	r2, [pc, #448]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ee4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007ee6:	2380      	movs	r3, #128	@ 0x80
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	e024      	b.n	8007f36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d107      	bne.n	8007f04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d109      	bne.n	8007f14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e0c6      	b.n	8008092 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f04:	4b66      	ldr	r3, [pc, #408]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e0be      	b.n	8008092 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007f14:	f000 f8ce 	bl	80080b4 <HAL_RCC_GetSysClockFreq>
 8007f18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	4a61      	ldr	r2, [pc, #388]	@ (80080a4 <HAL_RCC_ClockConfig+0x268>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d909      	bls.n	8007f36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007f22:	4b5f      	ldr	r3, [pc, #380]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f2a:	4a5d      	ldr	r2, [pc, #372]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007f32:	2380      	movs	r3, #128	@ 0x80
 8007f34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f36:	4b5a      	ldr	r3, [pc, #360]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f023 0203 	bic.w	r2, r3, #3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	4957      	ldr	r1, [pc, #348]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007f44:	4313      	orrs	r3, r2
 8007f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f48:	f7fc fea8 	bl	8004c9c <HAL_GetTick>
 8007f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f4e:	e00a      	b.n	8007f66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f50:	f7fc fea4 	bl	8004c9c <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d901      	bls.n	8007f66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e095      	b.n	8008092 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f66:	4b4e      	ldr	r3, [pc, #312]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 020c 	and.w	r2, r3, #12
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d1eb      	bne.n	8007f50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d023      	beq.n	8007fcc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0304 	and.w	r3, r3, #4
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f90:	4b43      	ldr	r3, [pc, #268]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	4a42      	ldr	r2, [pc, #264]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007f96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007f9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0308 	and.w	r3, r3, #8
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d007      	beq.n	8007fb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007fb0:	4a3b      	ldr	r2, [pc, #236]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007fb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007fb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fb8:	4b39      	ldr	r3, [pc, #228]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	4936      	ldr	r1, [pc, #216]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	608b      	str	r3, [r1, #8]
 8007fca:	e008      	b.n	8007fde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	2b80      	cmp	r3, #128	@ 0x80
 8007fd0:	d105      	bne.n	8007fde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007fd2:	4b33      	ldr	r3, [pc, #204]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	4a32      	ldr	r2, [pc, #200]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8007fd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fdc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fde:	4b2f      	ldr	r3, [pc, #188]	@ (800809c <HAL_RCC_ClockConfig+0x260>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 030f 	and.w	r3, r3, #15
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d21d      	bcs.n	8008028 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fec:	4b2b      	ldr	r3, [pc, #172]	@ (800809c <HAL_RCC_ClockConfig+0x260>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f023 020f 	bic.w	r2, r3, #15
 8007ff4:	4929      	ldr	r1, [pc, #164]	@ (800809c <HAL_RCC_ClockConfig+0x260>)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007ffc:	f7fc fe4e 	bl	8004c9c <HAL_GetTick>
 8008000:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008002:	e00a      	b.n	800801a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008004:	f7fc fe4a 	bl	8004c9c <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008012:	4293      	cmp	r3, r2
 8008014:	d901      	bls.n	800801a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e03b      	b.n	8008092 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800801a:	4b20      	ldr	r3, [pc, #128]	@ (800809c <HAL_RCC_ClockConfig+0x260>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d1ed      	bne.n	8008004 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	d008      	beq.n	8008046 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008034:	4b1a      	ldr	r3, [pc, #104]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	4917      	ldr	r1, [pc, #92]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8008042:	4313      	orrs	r3, r2
 8008044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008052:	4b13      	ldr	r3, [pc, #76]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	490f      	ldr	r1, [pc, #60]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 8008062:	4313      	orrs	r3, r2
 8008064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008066:	f000 f825 	bl	80080b4 <HAL_RCC_GetSysClockFreq>
 800806a:	4602      	mov	r2, r0
 800806c:	4b0c      	ldr	r3, [pc, #48]	@ (80080a0 <HAL_RCC_ClockConfig+0x264>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	091b      	lsrs	r3, r3, #4
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	490c      	ldr	r1, [pc, #48]	@ (80080a8 <HAL_RCC_ClockConfig+0x26c>)
 8008078:	5ccb      	ldrb	r3, [r1, r3]
 800807a:	f003 031f 	and.w	r3, r3, #31
 800807e:	fa22 f303 	lsr.w	r3, r2, r3
 8008082:	4a0a      	ldr	r2, [pc, #40]	@ (80080ac <HAL_RCC_ClockConfig+0x270>)
 8008084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008086:	4b0a      	ldr	r3, [pc, #40]	@ (80080b0 <HAL_RCC_ClockConfig+0x274>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4618      	mov	r0, r3
 800808c:	f7fc fdba 	bl	8004c04 <HAL_InitTick>
 8008090:	4603      	mov	r3, r0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	40022000 	.word	0x40022000
 80080a0:	40021000 	.word	0x40021000
 80080a4:	04c4b400 	.word	0x04c4b400
 80080a8:	080108b0 	.word	0x080108b0
 80080ac:	2000003c 	.word	0x2000003c
 80080b0:	20000040 	.word	0x20000040

080080b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80080ba:	4b2c      	ldr	r3, [pc, #176]	@ (800816c <HAL_RCC_GetSysClockFreq+0xb8>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f003 030c 	and.w	r3, r3, #12
 80080c2:	2b04      	cmp	r3, #4
 80080c4:	d102      	bne.n	80080cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80080c6:	4b2a      	ldr	r3, [pc, #168]	@ (8008170 <HAL_RCC_GetSysClockFreq+0xbc>)
 80080c8:	613b      	str	r3, [r7, #16]
 80080ca:	e047      	b.n	800815c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80080cc:	4b27      	ldr	r3, [pc, #156]	@ (800816c <HAL_RCC_GetSysClockFreq+0xb8>)
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f003 030c 	and.w	r3, r3, #12
 80080d4:	2b08      	cmp	r3, #8
 80080d6:	d102      	bne.n	80080de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80080d8:	4b26      	ldr	r3, [pc, #152]	@ (8008174 <HAL_RCC_GetSysClockFreq+0xc0>)
 80080da:	613b      	str	r3, [r7, #16]
 80080dc:	e03e      	b.n	800815c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80080de:	4b23      	ldr	r3, [pc, #140]	@ (800816c <HAL_RCC_GetSysClockFreq+0xb8>)
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 030c 	and.w	r3, r3, #12
 80080e6:	2b0c      	cmp	r3, #12
 80080e8:	d136      	bne.n	8008158 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80080ea:	4b20      	ldr	r3, [pc, #128]	@ (800816c <HAL_RCC_GetSysClockFreq+0xb8>)
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80080f4:	4b1d      	ldr	r3, [pc, #116]	@ (800816c <HAL_RCC_GetSysClockFreq+0xb8>)
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	091b      	lsrs	r3, r3, #4
 80080fa:	f003 030f 	and.w	r3, r3, #15
 80080fe:	3301      	adds	r3, #1
 8008100:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b03      	cmp	r3, #3
 8008106:	d10c      	bne.n	8008122 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008108:	4a1a      	ldr	r2, [pc, #104]	@ (8008174 <HAL_RCC_GetSysClockFreq+0xc0>)
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008110:	4a16      	ldr	r2, [pc, #88]	@ (800816c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008112:	68d2      	ldr	r2, [r2, #12]
 8008114:	0a12      	lsrs	r2, r2, #8
 8008116:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800811a:	fb02 f303 	mul.w	r3, r2, r3
 800811e:	617b      	str	r3, [r7, #20]
      break;
 8008120:	e00c      	b.n	800813c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008122:	4a13      	ldr	r2, [pc, #76]	@ (8008170 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	fbb2 f3f3 	udiv	r3, r2, r3
 800812a:	4a10      	ldr	r2, [pc, #64]	@ (800816c <HAL_RCC_GetSysClockFreq+0xb8>)
 800812c:	68d2      	ldr	r2, [r2, #12]
 800812e:	0a12      	lsrs	r2, r2, #8
 8008130:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008134:	fb02 f303 	mul.w	r3, r2, r3
 8008138:	617b      	str	r3, [r7, #20]
      break;
 800813a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800813c:	4b0b      	ldr	r3, [pc, #44]	@ (800816c <HAL_RCC_GetSysClockFreq+0xb8>)
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	0e5b      	lsrs	r3, r3, #25
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	3301      	adds	r3, #1
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	fbb2 f3f3 	udiv	r3, r2, r3
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	e001      	b.n	800815c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800815c:	693b      	ldr	r3, [r7, #16]
}
 800815e:	4618      	mov	r0, r3
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	40021000 	.word	0x40021000
 8008170:	00f42400 	.word	0x00f42400
 8008174:	016e3600 	.word	0x016e3600

08008178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008178:	b480      	push	{r7}
 800817a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800817c:	4b03      	ldr	r3, [pc, #12]	@ (800818c <HAL_RCC_GetHCLKFreq+0x14>)
 800817e:	681b      	ldr	r3, [r3, #0]
}
 8008180:	4618      	mov	r0, r3
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	2000003c 	.word	0x2000003c

08008190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008194:	f7ff fff0 	bl	8008178 <HAL_RCC_GetHCLKFreq>
 8008198:	4602      	mov	r2, r0
 800819a:	4b06      	ldr	r3, [pc, #24]	@ (80081b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	0a1b      	lsrs	r3, r3, #8
 80081a0:	f003 0307 	and.w	r3, r3, #7
 80081a4:	4904      	ldr	r1, [pc, #16]	@ (80081b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80081a6:	5ccb      	ldrb	r3, [r1, r3]
 80081a8:	f003 031f 	and.w	r3, r3, #31
 80081ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	40021000 	.word	0x40021000
 80081b8:	080108c0 	.word	0x080108c0

080081bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80081c0:	f7ff ffda 	bl	8008178 <HAL_RCC_GetHCLKFreq>
 80081c4:	4602      	mov	r2, r0
 80081c6:	4b06      	ldr	r3, [pc, #24]	@ (80081e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	0adb      	lsrs	r3, r3, #11
 80081cc:	f003 0307 	and.w	r3, r3, #7
 80081d0:	4904      	ldr	r1, [pc, #16]	@ (80081e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80081d2:	5ccb      	ldrb	r3, [r1, r3]
 80081d4:	f003 031f 	and.w	r3, r3, #31
 80081d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081dc:	4618      	mov	r0, r3
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	40021000 	.word	0x40021000
 80081e4:	080108c0 	.word	0x080108c0

080081e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80081ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f003 0303 	and.w	r3, r3, #3
 80081f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80081f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	091b      	lsrs	r3, r3, #4
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	3301      	adds	r3, #1
 8008204:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2b03      	cmp	r3, #3
 800820a:	d10c      	bne.n	8008226 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800820c:	4a17      	ldr	r2, [pc, #92]	@ (800826c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	fbb2 f3f3 	udiv	r3, r2, r3
 8008214:	4a14      	ldr	r2, [pc, #80]	@ (8008268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008216:	68d2      	ldr	r2, [r2, #12]
 8008218:	0a12      	lsrs	r2, r2, #8
 800821a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800821e:	fb02 f303 	mul.w	r3, r2, r3
 8008222:	617b      	str	r3, [r7, #20]
    break;
 8008224:	e00c      	b.n	8008240 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008226:	4a12      	ldr	r2, [pc, #72]	@ (8008270 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	fbb2 f3f3 	udiv	r3, r2, r3
 800822e:	4a0e      	ldr	r2, [pc, #56]	@ (8008268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008230:	68d2      	ldr	r2, [r2, #12]
 8008232:	0a12      	lsrs	r2, r2, #8
 8008234:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008238:	fb02 f303 	mul.w	r3, r2, r3
 800823c:	617b      	str	r3, [r7, #20]
    break;
 800823e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008240:	4b09      	ldr	r3, [pc, #36]	@ (8008268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	0e5b      	lsrs	r3, r3, #25
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	3301      	adds	r3, #1
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	fbb2 f3f3 	udiv	r3, r2, r3
 8008258:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800825a:	687b      	ldr	r3, [r7, #4]
}
 800825c:	4618      	mov	r0, r3
 800825e:	371c      	adds	r7, #28
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	40021000 	.word	0x40021000
 800826c:	016e3600 	.word	0x016e3600
 8008270:	00f42400 	.word	0x00f42400

08008274 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800827c:	2300      	movs	r3, #0
 800827e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008280:	2300      	movs	r3, #0
 8008282:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8098 	beq.w	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008292:	2300      	movs	r3, #0
 8008294:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008296:	4b43      	ldr	r3, [pc, #268]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800829a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10d      	bne.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082a2:	4b40      	ldr	r3, [pc, #256]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082a6:	4a3f      	ldr	r2, [pc, #252]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80082ae:	4b3d      	ldr	r3, [pc, #244]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082b6:	60bb      	str	r3, [r7, #8]
 80082b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082ba:	2301      	movs	r3, #1
 80082bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082be:	4b3a      	ldr	r3, [pc, #232]	@ (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a39      	ldr	r2, [pc, #228]	@ (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80082c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082ca:	f7fc fce7 	bl	8004c9c <HAL_GetTick>
 80082ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082d0:	e009      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082d2:	f7fc fce3 	bl	8004c9c <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d902      	bls.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	74fb      	strb	r3, [r7, #19]
        break;
 80082e4:	e005      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082e6:	4b30      	ldr	r3, [pc, #192]	@ (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0ef      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80082f2:	7cfb      	ldrb	r3, [r7, #19]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d159      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80082f8:	4b2a      	ldr	r3, [pc, #168]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008302:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d01e      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	429a      	cmp	r2, r3
 8008312:	d019      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008314:	4b23      	ldr	r3, [pc, #140]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800831a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800831e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008320:	4b20      	ldr	r3, [pc, #128]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008326:	4a1f      	ldr	r2, [pc, #124]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800832c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008330:	4b1c      	ldr	r3, [pc, #112]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008336:	4a1b      	ldr	r2, [pc, #108]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800833c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008340:	4a18      	ldr	r2, [pc, #96]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d016      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008352:	f7fc fca3 	bl	8004c9c <HAL_GetTick>
 8008356:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008358:	e00b      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800835a:	f7fc fc9f 	bl	8004c9c <HAL_GetTick>
 800835e:	4602      	mov	r2, r0
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008368:	4293      	cmp	r3, r2
 800836a:	d902      	bls.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	74fb      	strb	r3, [r7, #19]
            break;
 8008370:	e006      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008372:	4b0c      	ldr	r3, [pc, #48]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0ec      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008380:	7cfb      	ldrb	r3, [r7, #19]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10b      	bne.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008386:	4b07      	ldr	r3, [pc, #28]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800838c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008394:	4903      	ldr	r1, [pc, #12]	@ (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008396:	4313      	orrs	r3, r2
 8008398:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800839c:	e008      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800839e:	7cfb      	ldrb	r3, [r7, #19]
 80083a0:	74bb      	strb	r3, [r7, #18]
 80083a2:	e005      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80083a4:	40021000 	.word	0x40021000
 80083a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ac:	7cfb      	ldrb	r3, [r7, #19]
 80083ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083b0:	7c7b      	ldrb	r3, [r7, #17]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d105      	bne.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083b6:	4ba7      	ldr	r3, [pc, #668]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ba:	4aa6      	ldr	r2, [pc, #664]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80083ce:	4ba1      	ldr	r3, [pc, #644]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083d4:	f023 0203 	bic.w	r2, r3, #3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	499d      	ldr	r1, [pc, #628]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0302 	and.w	r3, r3, #2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00a      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083f0:	4b98      	ldr	r3, [pc, #608]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f6:	f023 020c 	bic.w	r2, r3, #12
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	4995      	ldr	r1, [pc, #596]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008400:	4313      	orrs	r3, r2
 8008402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0304 	and.w	r3, r3, #4
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008412:	4b90      	ldr	r3, [pc, #576]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008418:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	498c      	ldr	r1, [pc, #560]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008422:	4313      	orrs	r3, r2
 8008424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0308 	and.w	r3, r3, #8
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00a      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008434:	4b87      	ldr	r3, [pc, #540]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800843a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	4984      	ldr	r1, [pc, #528]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008444:	4313      	orrs	r3, r2
 8008446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0310 	and.w	r3, r3, #16
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008456:	4b7f      	ldr	r3, [pc, #508]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800845c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	497b      	ldr	r1, [pc, #492]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008466:	4313      	orrs	r3, r2
 8008468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00a      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008478:	4b76      	ldr	r3, [pc, #472]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800847a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800847e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	4973      	ldr	r1, [pc, #460]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008488:	4313      	orrs	r3, r2
 800848a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00a      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800849a:	4b6e      	ldr	r3, [pc, #440]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800849c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	496a      	ldr	r1, [pc, #424]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084bc:	4b65      	ldr	r3, [pc, #404]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	4962      	ldr	r1, [pc, #392]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00a      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084de:	4b5d      	ldr	r3, [pc, #372]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ec:	4959      	ldr	r1, [pc, #356]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00a      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008500:	4b54      	ldr	r3, [pc, #336]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008502:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008506:	f023 0203 	bic.w	r2, r3, #3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850e:	4951      	ldr	r1, [pc, #324]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008510:	4313      	orrs	r3, r2
 8008512:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00a      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008522:	4b4c      	ldr	r3, [pc, #304]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008528:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008530:	4948      	ldr	r1, [pc, #288]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008532:	4313      	orrs	r3, r2
 8008534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008540:	2b00      	cmp	r3, #0
 8008542:	d015      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008544:	4b43      	ldr	r3, [pc, #268]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800854a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008552:	4940      	ldr	r1, [pc, #256]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008554:	4313      	orrs	r3, r2
 8008556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800855e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008562:	d105      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008564:	4b3b      	ldr	r3, [pc, #236]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	4a3a      	ldr	r2, [pc, #232]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800856a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800856e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008578:	2b00      	cmp	r3, #0
 800857a:	d015      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800857c:	4b35      	ldr	r3, [pc, #212]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800857e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008582:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800858a:	4932      	ldr	r1, [pc, #200]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800858c:	4313      	orrs	r3, r2
 800858e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800859a:	d105      	bne.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800859c:	4b2d      	ldr	r3, [pc, #180]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	4a2c      	ldr	r2, [pc, #176]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085a6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d015      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085b4:	4b27      	ldr	r3, [pc, #156]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c2:	4924      	ldr	r1, [pc, #144]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085d2:	d105      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085d4:	4b1f      	ldr	r3, [pc, #124]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	4a1e      	ldr	r2, [pc, #120]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d015      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085ec:	4b19      	ldr	r3, [pc, #100]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085fa:	4916      	ldr	r1, [pc, #88]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800860a:	d105      	bne.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800860c:	4b11      	ldr	r3, [pc, #68]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	4a10      	ldr	r2, [pc, #64]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008616:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d019      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008624:	4b0b      	ldr	r3, [pc, #44]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800862a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008632:	4908      	ldr	r1, [pc, #32]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008634:	4313      	orrs	r3, r2
 8008636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008642:	d109      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008644:	4b03      	ldr	r3, [pc, #12]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	4a02      	ldr	r2, [pc, #8]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800864a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800864e:	60d3      	str	r3, [r2, #12]
 8008650:	e002      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008652:	bf00      	nop
 8008654:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d015      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008664:	4b29      	ldr	r3, [pc, #164]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800866a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008672:	4926      	ldr	r1, [pc, #152]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008674:	4313      	orrs	r3, r2
 8008676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800867e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008682:	d105      	bne.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008684:	4b21      	ldr	r3, [pc, #132]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	4a20      	ldr	r2, [pc, #128]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800868a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800868e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d015      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800869c:	4b1b      	ldr	r3, [pc, #108]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800869e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086a2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086aa:	4918      	ldr	r1, [pc, #96]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ba:	d105      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80086bc:	4b13      	ldr	r3, [pc, #76]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	4a12      	ldr	r2, [pc, #72]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d015      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80086d4:	4b0d      	ldr	r3, [pc, #52]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086e2:	490a      	ldr	r1, [pc, #40]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086e4:	4313      	orrs	r3, r2
 80086e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086f2:	d105      	bne.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086f4:	4b05      	ldr	r3, [pc, #20]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	4a04      	ldr	r2, [pc, #16]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008700:	7cbb      	ldrb	r3, [r7, #18]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	40021000 	.word	0x40021000

08008710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e049      	b.n	80087b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d106      	bne.n	800873c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7fb fd9a 	bl	8004270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3304      	adds	r3, #4
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	f001 f842 	bl	80097d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d001      	beq.n	80087d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e054      	b.n	8008882 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0201 	orr.w	r2, r2, #1
 80087ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a26      	ldr	r2, [pc, #152]	@ (8008890 <HAL_TIM_Base_Start_IT+0xd0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d022      	beq.n	8008840 <HAL_TIM_Base_Start_IT+0x80>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008802:	d01d      	beq.n	8008840 <HAL_TIM_Base_Start_IT+0x80>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a22      	ldr	r2, [pc, #136]	@ (8008894 <HAL_TIM_Base_Start_IT+0xd4>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d018      	beq.n	8008840 <HAL_TIM_Base_Start_IT+0x80>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a21      	ldr	r2, [pc, #132]	@ (8008898 <HAL_TIM_Base_Start_IT+0xd8>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d013      	beq.n	8008840 <HAL_TIM_Base_Start_IT+0x80>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a1f      	ldr	r2, [pc, #124]	@ (800889c <HAL_TIM_Base_Start_IT+0xdc>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00e      	beq.n	8008840 <HAL_TIM_Base_Start_IT+0x80>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a1e      	ldr	r2, [pc, #120]	@ (80088a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d009      	beq.n	8008840 <HAL_TIM_Base_Start_IT+0x80>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1c      	ldr	r2, [pc, #112]	@ (80088a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d004      	beq.n	8008840 <HAL_TIM_Base_Start_IT+0x80>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a1b      	ldr	r2, [pc, #108]	@ (80088a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d115      	bne.n	800886c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689a      	ldr	r2, [r3, #8]
 8008846:	4b19      	ldr	r3, [pc, #100]	@ (80088ac <HAL_TIM_Base_Start_IT+0xec>)
 8008848:	4013      	ands	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b06      	cmp	r3, #6
 8008850:	d015      	beq.n	800887e <HAL_TIM_Base_Start_IT+0xbe>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008858:	d011      	beq.n	800887e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f042 0201 	orr.w	r2, r2, #1
 8008868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800886a:	e008      	b.n	800887e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f042 0201 	orr.w	r2, r2, #1
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e000      	b.n	8008880 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	40012c00 	.word	0x40012c00
 8008894:	40000400 	.word	0x40000400
 8008898:	40000800 	.word	0x40000800
 800889c:	40000c00 	.word	0x40000c00
 80088a0:	40013400 	.word	0x40013400
 80088a4:	40014000 	.word	0x40014000
 80088a8:	40015000 	.word	0x40015000
 80088ac:	00010007 	.word	0x00010007

080088b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e049      	b.n	8008956 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fb fc9c 	bl	8004214 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2202      	movs	r2, #2
 80088e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3304      	adds	r3, #4
 80088ec:	4619      	mov	r1, r3
 80088ee:	4610      	mov	r0, r2
 80088f0:	f000 ff72 	bl	80097d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d109      	bne.n	8008984 <HAL_TIM_PWM_Start+0x24>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b01      	cmp	r3, #1
 800897a:	bf14      	ite	ne
 800897c:	2301      	movne	r3, #1
 800897e:	2300      	moveq	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	e03c      	b.n	80089fe <HAL_TIM_PWM_Start+0x9e>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2b04      	cmp	r3, #4
 8008988:	d109      	bne.n	800899e <HAL_TIM_PWM_Start+0x3e>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b01      	cmp	r3, #1
 8008994:	bf14      	ite	ne
 8008996:	2301      	movne	r3, #1
 8008998:	2300      	moveq	r3, #0
 800899a:	b2db      	uxtb	r3, r3
 800899c:	e02f      	b.n	80089fe <HAL_TIM_PWM_Start+0x9e>
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b08      	cmp	r3, #8
 80089a2:	d109      	bne.n	80089b8 <HAL_TIM_PWM_Start+0x58>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	bf14      	ite	ne
 80089b0:	2301      	movne	r3, #1
 80089b2:	2300      	moveq	r3, #0
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	e022      	b.n	80089fe <HAL_TIM_PWM_Start+0x9e>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b0c      	cmp	r3, #12
 80089bc:	d109      	bne.n	80089d2 <HAL_TIM_PWM_Start+0x72>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	bf14      	ite	ne
 80089ca:	2301      	movne	r3, #1
 80089cc:	2300      	moveq	r3, #0
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	e015      	b.n	80089fe <HAL_TIM_PWM_Start+0x9e>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b10      	cmp	r3, #16
 80089d6:	d109      	bne.n	80089ec <HAL_TIM_PWM_Start+0x8c>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	bf14      	ite	ne
 80089e4:	2301      	movne	r3, #1
 80089e6:	2300      	moveq	r3, #0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	e008      	b.n	80089fe <HAL_TIM_PWM_Start+0x9e>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	bf14      	ite	ne
 80089f8:	2301      	movne	r3, #1
 80089fa:	2300      	moveq	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e0a6      	b.n	8008b54 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d104      	bne.n	8008a16 <HAL_TIM_PWM_Start+0xb6>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a14:	e023      	b.n	8008a5e <HAL_TIM_PWM_Start+0xfe>
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	d104      	bne.n	8008a26 <HAL_TIM_PWM_Start+0xc6>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a24:	e01b      	b.n	8008a5e <HAL_TIM_PWM_Start+0xfe>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b08      	cmp	r3, #8
 8008a2a:	d104      	bne.n	8008a36 <HAL_TIM_PWM_Start+0xd6>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a34:	e013      	b.n	8008a5e <HAL_TIM_PWM_Start+0xfe>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b0c      	cmp	r3, #12
 8008a3a:	d104      	bne.n	8008a46 <HAL_TIM_PWM_Start+0xe6>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a44:	e00b      	b.n	8008a5e <HAL_TIM_PWM_Start+0xfe>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2b10      	cmp	r3, #16
 8008a4a:	d104      	bne.n	8008a56 <HAL_TIM_PWM_Start+0xf6>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a54:	e003      	b.n	8008a5e <HAL_TIM_PWM_Start+0xfe>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2202      	movs	r2, #2
 8008a5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2201      	movs	r2, #1
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f001 fc5a 	bl	800a320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a3a      	ldr	r2, [pc, #232]	@ (8008b5c <HAL_TIM_PWM_Start+0x1fc>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d018      	beq.n	8008aa8 <HAL_TIM_PWM_Start+0x148>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a39      	ldr	r2, [pc, #228]	@ (8008b60 <HAL_TIM_PWM_Start+0x200>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d013      	beq.n	8008aa8 <HAL_TIM_PWM_Start+0x148>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a37      	ldr	r2, [pc, #220]	@ (8008b64 <HAL_TIM_PWM_Start+0x204>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d00e      	beq.n	8008aa8 <HAL_TIM_PWM_Start+0x148>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a36      	ldr	r2, [pc, #216]	@ (8008b68 <HAL_TIM_PWM_Start+0x208>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d009      	beq.n	8008aa8 <HAL_TIM_PWM_Start+0x148>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a34      	ldr	r2, [pc, #208]	@ (8008b6c <HAL_TIM_PWM_Start+0x20c>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d004      	beq.n	8008aa8 <HAL_TIM_PWM_Start+0x148>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a33      	ldr	r2, [pc, #204]	@ (8008b70 <HAL_TIM_PWM_Start+0x210>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d101      	bne.n	8008aac <HAL_TIM_PWM_Start+0x14c>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e000      	b.n	8008aae <HAL_TIM_PWM_Start+0x14e>
 8008aac:	2300      	movs	r3, #0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d007      	beq.n	8008ac2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ac0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a25      	ldr	r2, [pc, #148]	@ (8008b5c <HAL_TIM_PWM_Start+0x1fc>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d022      	beq.n	8008b12 <HAL_TIM_PWM_Start+0x1b2>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad4:	d01d      	beq.n	8008b12 <HAL_TIM_PWM_Start+0x1b2>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a26      	ldr	r2, [pc, #152]	@ (8008b74 <HAL_TIM_PWM_Start+0x214>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d018      	beq.n	8008b12 <HAL_TIM_PWM_Start+0x1b2>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a24      	ldr	r2, [pc, #144]	@ (8008b78 <HAL_TIM_PWM_Start+0x218>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d013      	beq.n	8008b12 <HAL_TIM_PWM_Start+0x1b2>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a23      	ldr	r2, [pc, #140]	@ (8008b7c <HAL_TIM_PWM_Start+0x21c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00e      	beq.n	8008b12 <HAL_TIM_PWM_Start+0x1b2>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a19      	ldr	r2, [pc, #100]	@ (8008b60 <HAL_TIM_PWM_Start+0x200>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d009      	beq.n	8008b12 <HAL_TIM_PWM_Start+0x1b2>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a18      	ldr	r2, [pc, #96]	@ (8008b64 <HAL_TIM_PWM_Start+0x204>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d004      	beq.n	8008b12 <HAL_TIM_PWM_Start+0x1b2>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a18      	ldr	r2, [pc, #96]	@ (8008b70 <HAL_TIM_PWM_Start+0x210>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d115      	bne.n	8008b3e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689a      	ldr	r2, [r3, #8]
 8008b18:	4b19      	ldr	r3, [pc, #100]	@ (8008b80 <HAL_TIM_PWM_Start+0x220>)
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2b06      	cmp	r3, #6
 8008b22:	d015      	beq.n	8008b50 <HAL_TIM_PWM_Start+0x1f0>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b2a:	d011      	beq.n	8008b50 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f042 0201 	orr.w	r2, r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b3c:	e008      	b.n	8008b50 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f042 0201 	orr.w	r2, r2, #1
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	e000      	b.n	8008b52 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	40012c00 	.word	0x40012c00
 8008b60:	40013400 	.word	0x40013400
 8008b64:	40014000 	.word	0x40014000
 8008b68:	40014400 	.word	0x40014400
 8008b6c:	40014800 	.word	0x40014800
 8008b70:	40015000 	.word	0x40015000
 8008b74:	40000400 	.word	0x40000400
 8008b78:	40000800 	.word	0x40000800
 8008b7c:	40000c00 	.word	0x40000c00
 8008b80:	00010007 	.word	0x00010007

08008b84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e049      	b.n	8008c2a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d106      	bne.n	8008bb0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f841 	bl	8008c32 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	f000 fe08 	bl	80097d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
	...

08008c48 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d104      	bne.n	8008c66 <HAL_TIM_IC_Start_IT+0x1e>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	e023      	b.n	8008cae <HAL_TIM_IC_Start_IT+0x66>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d104      	bne.n	8008c76 <HAL_TIM_IC_Start_IT+0x2e>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	e01b      	b.n	8008cae <HAL_TIM_IC_Start_IT+0x66>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	d104      	bne.n	8008c86 <HAL_TIM_IC_Start_IT+0x3e>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	e013      	b.n	8008cae <HAL_TIM_IC_Start_IT+0x66>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b0c      	cmp	r3, #12
 8008c8a:	d104      	bne.n	8008c96 <HAL_TIM_IC_Start_IT+0x4e>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	e00b      	b.n	8008cae <HAL_TIM_IC_Start_IT+0x66>
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b10      	cmp	r3, #16
 8008c9a:	d104      	bne.n	8008ca6 <HAL_TIM_IC_Start_IT+0x5e>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	e003      	b.n	8008cae <HAL_TIM_IC_Start_IT+0x66>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d104      	bne.n	8008cc0 <HAL_TIM_IC_Start_IT+0x78>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	e013      	b.n	8008ce8 <HAL_TIM_IC_Start_IT+0xa0>
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d104      	bne.n	8008cd0 <HAL_TIM_IC_Start_IT+0x88>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	e00b      	b.n	8008ce8 <HAL_TIM_IC_Start_IT+0xa0>
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2b08      	cmp	r3, #8
 8008cd4:	d104      	bne.n	8008ce0 <HAL_TIM_IC_Start_IT+0x98>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	e003      	b.n	8008ce8 <HAL_TIM_IC_Start_IT+0xa0>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d102      	bne.n	8008cf6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008cf0:	7b7b      	ldrb	r3, [r7, #13]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d001      	beq.n	8008cfa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e0e2      	b.n	8008ec0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d104      	bne.n	8008d0a <HAL_TIM_IC_Start_IT+0xc2>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2202      	movs	r2, #2
 8008d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d08:	e023      	b.n	8008d52 <HAL_TIM_IC_Start_IT+0x10a>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b04      	cmp	r3, #4
 8008d0e:	d104      	bne.n	8008d1a <HAL_TIM_IC_Start_IT+0xd2>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2202      	movs	r2, #2
 8008d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d18:	e01b      	b.n	8008d52 <HAL_TIM_IC_Start_IT+0x10a>
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	2b08      	cmp	r3, #8
 8008d1e:	d104      	bne.n	8008d2a <HAL_TIM_IC_Start_IT+0xe2>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2202      	movs	r2, #2
 8008d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d28:	e013      	b.n	8008d52 <HAL_TIM_IC_Start_IT+0x10a>
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b0c      	cmp	r3, #12
 8008d2e:	d104      	bne.n	8008d3a <HAL_TIM_IC_Start_IT+0xf2>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d38:	e00b      	b.n	8008d52 <HAL_TIM_IC_Start_IT+0x10a>
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b10      	cmp	r3, #16
 8008d3e:	d104      	bne.n	8008d4a <HAL_TIM_IC_Start_IT+0x102>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d48:	e003      	b.n	8008d52 <HAL_TIM_IC_Start_IT+0x10a>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d104      	bne.n	8008d62 <HAL_TIM_IC_Start_IT+0x11a>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d60:	e013      	b.n	8008d8a <HAL_TIM_IC_Start_IT+0x142>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b04      	cmp	r3, #4
 8008d66:	d104      	bne.n	8008d72 <HAL_TIM_IC_Start_IT+0x12a>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d70:	e00b      	b.n	8008d8a <HAL_TIM_IC_Start_IT+0x142>
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	2b08      	cmp	r3, #8
 8008d76:	d104      	bne.n	8008d82 <HAL_TIM_IC_Start_IT+0x13a>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d80:	e003      	b.n	8008d8a <HAL_TIM_IC_Start_IT+0x142>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2202      	movs	r2, #2
 8008d86:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b0c      	cmp	r3, #12
 8008d8e:	d841      	bhi.n	8008e14 <HAL_TIM_IC_Start_IT+0x1cc>
 8008d90:	a201      	add	r2, pc, #4	@ (adr r2, 8008d98 <HAL_TIM_IC_Start_IT+0x150>)
 8008d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d96:	bf00      	nop
 8008d98:	08008dcd 	.word	0x08008dcd
 8008d9c:	08008e15 	.word	0x08008e15
 8008da0:	08008e15 	.word	0x08008e15
 8008da4:	08008e15 	.word	0x08008e15
 8008da8:	08008ddf 	.word	0x08008ddf
 8008dac:	08008e15 	.word	0x08008e15
 8008db0:	08008e15 	.word	0x08008e15
 8008db4:	08008e15 	.word	0x08008e15
 8008db8:	08008df1 	.word	0x08008df1
 8008dbc:	08008e15 	.word	0x08008e15
 8008dc0:	08008e15 	.word	0x08008e15
 8008dc4:	08008e15 	.word	0x08008e15
 8008dc8:	08008e03 	.word	0x08008e03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0202 	orr.w	r2, r2, #2
 8008dda:	60da      	str	r2, [r3, #12]
      break;
 8008ddc:	e01d      	b.n	8008e1a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68da      	ldr	r2, [r3, #12]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0204 	orr.w	r2, r2, #4
 8008dec:	60da      	str	r2, [r3, #12]
      break;
 8008dee:	e014      	b.n	8008e1a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0208 	orr.w	r2, r2, #8
 8008dfe:	60da      	str	r2, [r3, #12]
      break;
 8008e00:	e00b      	b.n	8008e1a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f042 0210 	orr.w	r2, r2, #16
 8008e10:	60da      	str	r2, [r3, #12]
      break;
 8008e12:	e002      	b.n	8008e1a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	73fb      	strb	r3, [r7, #15]
      break;
 8008e18:	bf00      	nop
  }

  if (status == HAL_OK)
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d14e      	bne.n	8008ebe <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2201      	movs	r2, #1
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 fa79 	bl	800a320 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a25      	ldr	r2, [pc, #148]	@ (8008ec8 <HAL_TIM_IC_Start_IT+0x280>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d022      	beq.n	8008e7e <HAL_TIM_IC_Start_IT+0x236>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e40:	d01d      	beq.n	8008e7e <HAL_TIM_IC_Start_IT+0x236>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a21      	ldr	r2, [pc, #132]	@ (8008ecc <HAL_TIM_IC_Start_IT+0x284>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d018      	beq.n	8008e7e <HAL_TIM_IC_Start_IT+0x236>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a1f      	ldr	r2, [pc, #124]	@ (8008ed0 <HAL_TIM_IC_Start_IT+0x288>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d013      	beq.n	8008e7e <HAL_TIM_IC_Start_IT+0x236>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ed4 <HAL_TIM_IC_Start_IT+0x28c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00e      	beq.n	8008e7e <HAL_TIM_IC_Start_IT+0x236>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a1c      	ldr	r2, [pc, #112]	@ (8008ed8 <HAL_TIM_IC_Start_IT+0x290>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d009      	beq.n	8008e7e <HAL_TIM_IC_Start_IT+0x236>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8008edc <HAL_TIM_IC_Start_IT+0x294>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d004      	beq.n	8008e7e <HAL_TIM_IC_Start_IT+0x236>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a19      	ldr	r2, [pc, #100]	@ (8008ee0 <HAL_TIM_IC_Start_IT+0x298>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d115      	bne.n	8008eaa <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	689a      	ldr	r2, [r3, #8]
 8008e84:	4b17      	ldr	r3, [pc, #92]	@ (8008ee4 <HAL_TIM_IC_Start_IT+0x29c>)
 8008e86:	4013      	ands	r3, r2
 8008e88:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2b06      	cmp	r3, #6
 8008e8e:	d015      	beq.n	8008ebc <HAL_TIM_IC_Start_IT+0x274>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e96:	d011      	beq.n	8008ebc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f042 0201 	orr.w	r2, r2, #1
 8008ea6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea8:	e008      	b.n	8008ebc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f042 0201 	orr.w	r2, r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	e000      	b.n	8008ebe <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ebc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	40012c00 	.word	0x40012c00
 8008ecc:	40000400 	.word	0x40000400
 8008ed0:	40000800 	.word	0x40000800
 8008ed4:	40000c00 	.word	0x40000c00
 8008ed8:	40013400 	.word	0x40013400
 8008edc:	40014000 	.word	0x40014000
 8008ee0:	40015000 	.word	0x40015000
 8008ee4:	00010007 	.word	0x00010007

08008ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d020      	beq.n	8008f4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f003 0302 	and.w	r3, r3, #2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d01b      	beq.n	8008f4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f06f 0202 	mvn.w	r2, #2
 8008f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	f003 0303 	and.w	r3, r3, #3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7f9 ff74 	bl	8002e20 <HAL_TIM_IC_CaptureCallback>
 8008f38:	e005      	b.n	8008f46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fc2e 	bl	800979c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fc35 	bl	80097b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	f003 0304 	and.w	r3, r3, #4
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d020      	beq.n	8008f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f003 0304 	and.w	r3, r3, #4
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d01b      	beq.n	8008f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f06f 0204 	mvn.w	r2, #4
 8008f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7f9 ff4e 	bl	8002e20 <HAL_TIM_IC_CaptureCallback>
 8008f84:	e005      	b.n	8008f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fc08 	bl	800979c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fc0f 	bl	80097b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f003 0308 	and.w	r3, r3, #8
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d020      	beq.n	8008fe4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f003 0308 	and.w	r3, r3, #8
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01b      	beq.n	8008fe4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f06f 0208 	mvn.w	r2, #8
 8008fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2204      	movs	r2, #4
 8008fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	f003 0303 	and.w	r3, r3, #3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7f9 ff28 	bl	8002e20 <HAL_TIM_IC_CaptureCallback>
 8008fd0:	e005      	b.n	8008fde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fbe2 	bl	800979c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fbe9 	bl	80097b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f003 0310 	and.w	r3, r3, #16
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d020      	beq.n	8009030 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f003 0310 	and.w	r3, r3, #16
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01b      	beq.n	8009030 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f06f 0210 	mvn.w	r2, #16
 8009000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2208      	movs	r2, #8
 8009006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7f9 ff02 	bl	8002e20 <HAL_TIM_IC_CaptureCallback>
 800901c:	e005      	b.n	800902a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fbbc 	bl	800979c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fbc3 	bl	80097b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00c      	beq.n	8009054 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	2b00      	cmp	r3, #0
 8009042:	d007      	beq.n	8009054 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f06f 0201 	mvn.w	r2, #1
 800904c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7f9 fdfe 	bl	8002c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800905a:	2b00      	cmp	r3, #0
 800905c:	d104      	bne.n	8009068 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00c      	beq.n	8009082 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800906e:	2b00      	cmp	r3, #0
 8009070:	d007      	beq.n	8009082 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800907a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 faa9 	bl	800a5d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00c      	beq.n	80090a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009092:	2b00      	cmp	r3, #0
 8009094:	d007      	beq.n	80090a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800909e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f001 faa1 	bl	800a5e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00c      	beq.n	80090ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d007      	beq.n	80090ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80090c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fb7d 	bl	80097c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	f003 0320 	and.w	r3, r3, #32
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00c      	beq.n	80090ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f003 0320 	and.w	r3, r3, #32
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d007      	beq.n	80090ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f06f 0220 	mvn.w	r2, #32
 80090e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f001 fa69 	bl	800a5c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00c      	beq.n	8009112 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d007      	beq.n	8009112 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800910a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 fa75 	bl	800a5fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00c      	beq.n	8009136 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d007      	beq.n	8009136 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800912e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 fa6d 	bl	800a610 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00c      	beq.n	800915a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d007      	beq.n	800915a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 fa65 	bl	800a624 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00c      	beq.n	800917e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 fa5d 	bl	800a638 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800917e:	bf00      	nop
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b086      	sub	sp, #24
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800919c:	2b01      	cmp	r3, #1
 800919e:	d101      	bne.n	80091a4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80091a0:	2302      	movs	r3, #2
 80091a2:	e088      	b.n	80092b6 <HAL_TIM_IC_ConfigChannel+0x130>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d11b      	bne.n	80091ea <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80091c2:	f000 fee7 	bl	8009f94 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	699a      	ldr	r2, [r3, #24]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f022 020c 	bic.w	r2, r2, #12
 80091d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	6999      	ldr	r1, [r3, #24]
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	689a      	ldr	r2, [r3, #8]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	430a      	orrs	r2, r1
 80091e6:	619a      	str	r2, [r3, #24]
 80091e8:	e060      	b.n	80092ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b04      	cmp	r3, #4
 80091ee:	d11c      	bne.n	800922a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009200:	f000 ff6b 	bl	800a0da <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	699a      	ldr	r2, [r3, #24]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009212:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6999      	ldr	r1, [r3, #24]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	021a      	lsls	r2, r3, #8
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	430a      	orrs	r2, r1
 8009226:	619a      	str	r2, [r3, #24]
 8009228:	e040      	b.n	80092ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b08      	cmp	r3, #8
 800922e:	d11b      	bne.n	8009268 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009240:	f000 ffb8 	bl	800a1b4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	69da      	ldr	r2, [r3, #28]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f022 020c 	bic.w	r2, r2, #12
 8009252:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	69d9      	ldr	r1, [r3, #28]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	689a      	ldr	r2, [r3, #8]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	430a      	orrs	r2, r1
 8009264:	61da      	str	r2, [r3, #28]
 8009266:	e021      	b.n	80092ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b0c      	cmp	r3, #12
 800926c:	d11c      	bne.n	80092a8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800927e:	f000 ffd5 	bl	800a22c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	69da      	ldr	r2, [r3, #28]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009290:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	69d9      	ldr	r1, [r3, #28]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	021a      	lsls	r2, r3, #8
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	61da      	str	r2, [r3, #28]
 80092a6:	e001      	b.n	80092ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
	...

080092c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d101      	bne.n	80092de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80092da:	2302      	movs	r3, #2
 80092dc:	e0ff      	b.n	80094de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b14      	cmp	r3, #20
 80092ea:	f200 80f0 	bhi.w	80094ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80092ee:	a201      	add	r2, pc, #4	@ (adr r2, 80092f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80092f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f4:	08009349 	.word	0x08009349
 80092f8:	080094cf 	.word	0x080094cf
 80092fc:	080094cf 	.word	0x080094cf
 8009300:	080094cf 	.word	0x080094cf
 8009304:	08009389 	.word	0x08009389
 8009308:	080094cf 	.word	0x080094cf
 800930c:	080094cf 	.word	0x080094cf
 8009310:	080094cf 	.word	0x080094cf
 8009314:	080093cb 	.word	0x080093cb
 8009318:	080094cf 	.word	0x080094cf
 800931c:	080094cf 	.word	0x080094cf
 8009320:	080094cf 	.word	0x080094cf
 8009324:	0800940b 	.word	0x0800940b
 8009328:	080094cf 	.word	0x080094cf
 800932c:	080094cf 	.word	0x080094cf
 8009330:	080094cf 	.word	0x080094cf
 8009334:	0800944d 	.word	0x0800944d
 8009338:	080094cf 	.word	0x080094cf
 800933c:	080094cf 	.word	0x080094cf
 8009340:	080094cf 	.word	0x080094cf
 8009344:	0800948d 	.word	0x0800948d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68b9      	ldr	r1, [r7, #8]
 800934e:	4618      	mov	r0, r3
 8009350:	f000 faf6 	bl	8009940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	699a      	ldr	r2, [r3, #24]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f042 0208 	orr.w	r2, r2, #8
 8009362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699a      	ldr	r2, [r3, #24]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0204 	bic.w	r2, r2, #4
 8009372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6999      	ldr	r1, [r3, #24]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	691a      	ldr	r2, [r3, #16]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	619a      	str	r2, [r3, #24]
      break;
 8009386:	e0a5      	b.n	80094d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68b9      	ldr	r1, [r7, #8]
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fb70 	bl	8009a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	699a      	ldr	r2, [r3, #24]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6999      	ldr	r1, [r3, #24]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	021a      	lsls	r2, r3, #8
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	430a      	orrs	r2, r1
 80093c6:	619a      	str	r2, [r3, #24]
      break;
 80093c8:	e084      	b.n	80094d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 fbe3 	bl	8009b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	69da      	ldr	r2, [r3, #28]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f042 0208 	orr.w	r2, r2, #8
 80093e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	69da      	ldr	r2, [r3, #28]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0204 	bic.w	r2, r2, #4
 80093f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	69d9      	ldr	r1, [r3, #28]
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	691a      	ldr	r2, [r3, #16]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	430a      	orrs	r2, r1
 8009406:	61da      	str	r2, [r3, #28]
      break;
 8009408:	e064      	b.n	80094d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68b9      	ldr	r1, [r7, #8]
 8009410:	4618      	mov	r0, r3
 8009412:	f000 fc55 	bl	8009cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69da      	ldr	r2, [r3, #28]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69da      	ldr	r2, [r3, #28]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69d9      	ldr	r1, [r3, #28]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	021a      	lsls	r2, r3, #8
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	430a      	orrs	r2, r1
 8009448:	61da      	str	r2, [r3, #28]
      break;
 800944a:	e043      	b.n	80094d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68b9      	ldr	r1, [r7, #8]
 8009452:	4618      	mov	r0, r3
 8009454:	f000 fcc8 	bl	8009de8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f042 0208 	orr.w	r2, r2, #8
 8009466:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 0204 	bic.w	r2, r2, #4
 8009476:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	691a      	ldr	r2, [r3, #16]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	430a      	orrs	r2, r1
 8009488:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800948a:	e023      	b.n	80094d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68b9      	ldr	r1, [r7, #8]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 fd12 	bl	8009ebc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	021a      	lsls	r2, r3, #8
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80094cc:	e002      	b.n	80094d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	75fb      	strb	r3, [r7, #23]
      break;
 80094d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop

080094e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d101      	bne.n	8009504 <HAL_TIM_ConfigClockSource+0x1c>
 8009500:	2302      	movs	r3, #2
 8009502:	e0f6      	b.n	80096f2 <HAL_TIM_ConfigClockSource+0x20a>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2202      	movs	r2, #2
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009522:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800952e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a6f      	ldr	r2, [pc, #444]	@ (80096fc <HAL_TIM_ConfigClockSource+0x214>)
 800953e:	4293      	cmp	r3, r2
 8009540:	f000 80c1 	beq.w	80096c6 <HAL_TIM_ConfigClockSource+0x1de>
 8009544:	4a6d      	ldr	r2, [pc, #436]	@ (80096fc <HAL_TIM_ConfigClockSource+0x214>)
 8009546:	4293      	cmp	r3, r2
 8009548:	f200 80c6 	bhi.w	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800954c:	4a6c      	ldr	r2, [pc, #432]	@ (8009700 <HAL_TIM_ConfigClockSource+0x218>)
 800954e:	4293      	cmp	r3, r2
 8009550:	f000 80b9 	beq.w	80096c6 <HAL_TIM_ConfigClockSource+0x1de>
 8009554:	4a6a      	ldr	r2, [pc, #424]	@ (8009700 <HAL_TIM_ConfigClockSource+0x218>)
 8009556:	4293      	cmp	r3, r2
 8009558:	f200 80be 	bhi.w	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800955c:	4a69      	ldr	r2, [pc, #420]	@ (8009704 <HAL_TIM_ConfigClockSource+0x21c>)
 800955e:	4293      	cmp	r3, r2
 8009560:	f000 80b1 	beq.w	80096c6 <HAL_TIM_ConfigClockSource+0x1de>
 8009564:	4a67      	ldr	r2, [pc, #412]	@ (8009704 <HAL_TIM_ConfigClockSource+0x21c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	f200 80b6 	bhi.w	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800956c:	4a66      	ldr	r2, [pc, #408]	@ (8009708 <HAL_TIM_ConfigClockSource+0x220>)
 800956e:	4293      	cmp	r3, r2
 8009570:	f000 80a9 	beq.w	80096c6 <HAL_TIM_ConfigClockSource+0x1de>
 8009574:	4a64      	ldr	r2, [pc, #400]	@ (8009708 <HAL_TIM_ConfigClockSource+0x220>)
 8009576:	4293      	cmp	r3, r2
 8009578:	f200 80ae 	bhi.w	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800957c:	4a63      	ldr	r2, [pc, #396]	@ (800970c <HAL_TIM_ConfigClockSource+0x224>)
 800957e:	4293      	cmp	r3, r2
 8009580:	f000 80a1 	beq.w	80096c6 <HAL_TIM_ConfigClockSource+0x1de>
 8009584:	4a61      	ldr	r2, [pc, #388]	@ (800970c <HAL_TIM_ConfigClockSource+0x224>)
 8009586:	4293      	cmp	r3, r2
 8009588:	f200 80a6 	bhi.w	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800958c:	4a60      	ldr	r2, [pc, #384]	@ (8009710 <HAL_TIM_ConfigClockSource+0x228>)
 800958e:	4293      	cmp	r3, r2
 8009590:	f000 8099 	beq.w	80096c6 <HAL_TIM_ConfigClockSource+0x1de>
 8009594:	4a5e      	ldr	r2, [pc, #376]	@ (8009710 <HAL_TIM_ConfigClockSource+0x228>)
 8009596:	4293      	cmp	r3, r2
 8009598:	f200 809e 	bhi.w	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800959c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80095a0:	f000 8091 	beq.w	80096c6 <HAL_TIM_ConfigClockSource+0x1de>
 80095a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80095a8:	f200 8096 	bhi.w	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80095ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095b0:	f000 8089 	beq.w	80096c6 <HAL_TIM_ConfigClockSource+0x1de>
 80095b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095b8:	f200 808e 	bhi.w	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80095bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095c0:	d03e      	beq.n	8009640 <HAL_TIM_ConfigClockSource+0x158>
 80095c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095c6:	f200 8087 	bhi.w	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80095ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095ce:	f000 8086 	beq.w	80096de <HAL_TIM_ConfigClockSource+0x1f6>
 80095d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095d6:	d87f      	bhi.n	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80095d8:	2b70      	cmp	r3, #112	@ 0x70
 80095da:	d01a      	beq.n	8009612 <HAL_TIM_ConfigClockSource+0x12a>
 80095dc:	2b70      	cmp	r3, #112	@ 0x70
 80095de:	d87b      	bhi.n	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80095e0:	2b60      	cmp	r3, #96	@ 0x60
 80095e2:	d050      	beq.n	8009686 <HAL_TIM_ConfigClockSource+0x19e>
 80095e4:	2b60      	cmp	r3, #96	@ 0x60
 80095e6:	d877      	bhi.n	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80095e8:	2b50      	cmp	r3, #80	@ 0x50
 80095ea:	d03c      	beq.n	8009666 <HAL_TIM_ConfigClockSource+0x17e>
 80095ec:	2b50      	cmp	r3, #80	@ 0x50
 80095ee:	d873      	bhi.n	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80095f0:	2b40      	cmp	r3, #64	@ 0x40
 80095f2:	d058      	beq.n	80096a6 <HAL_TIM_ConfigClockSource+0x1be>
 80095f4:	2b40      	cmp	r3, #64	@ 0x40
 80095f6:	d86f      	bhi.n	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80095f8:	2b30      	cmp	r3, #48	@ 0x30
 80095fa:	d064      	beq.n	80096c6 <HAL_TIM_ConfigClockSource+0x1de>
 80095fc:	2b30      	cmp	r3, #48	@ 0x30
 80095fe:	d86b      	bhi.n	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009600:	2b20      	cmp	r3, #32
 8009602:	d060      	beq.n	80096c6 <HAL_TIM_ConfigClockSource+0x1de>
 8009604:	2b20      	cmp	r3, #32
 8009606:	d867      	bhi.n	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009608:	2b00      	cmp	r3, #0
 800960a:	d05c      	beq.n	80096c6 <HAL_TIM_ConfigClockSource+0x1de>
 800960c:	2b10      	cmp	r3, #16
 800960e:	d05a      	beq.n	80096c6 <HAL_TIM_ConfigClockSource+0x1de>
 8009610:	e062      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009622:	f000 fe5d 	bl	800a2e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009634:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	609a      	str	r2, [r3, #8]
      break;
 800963e:	e04f      	b.n	80096e0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009650:	f000 fe46 	bl	800a2e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689a      	ldr	r2, [r3, #8]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009662:	609a      	str	r2, [r3, #8]
      break;
 8009664:	e03c      	b.n	80096e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009672:	461a      	mov	r2, r3
 8009674:	f000 fd02 	bl	800a07c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2150      	movs	r1, #80	@ 0x50
 800967e:	4618      	mov	r0, r3
 8009680:	f000 fe11 	bl	800a2a6 <TIM_ITRx_SetConfig>
      break;
 8009684:	e02c      	b.n	80096e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009692:	461a      	mov	r2, r3
 8009694:	f000 fd5e 	bl	800a154 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2160      	movs	r1, #96	@ 0x60
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fe01 	bl	800a2a6 <TIM_ITRx_SetConfig>
      break;
 80096a4:	e01c      	b.n	80096e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096b2:	461a      	mov	r2, r3
 80096b4:	f000 fce2 	bl	800a07c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2140      	movs	r1, #64	@ 0x40
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 fdf1 	bl	800a2a6 <TIM_ITRx_SetConfig>
      break;
 80096c4:	e00c      	b.n	80096e0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4619      	mov	r1, r3
 80096d0:	4610      	mov	r0, r2
 80096d2:	f000 fde8 	bl	800a2a6 <TIM_ITRx_SetConfig>
      break;
 80096d6:	e003      	b.n	80096e0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	73fb      	strb	r3, [r7, #15]
      break;
 80096dc:	e000      	b.n	80096e0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80096de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	00100070 	.word	0x00100070
 8009700:	00100060 	.word	0x00100060
 8009704:	00100050 	.word	0x00100050
 8009708:	00100040 	.word	0x00100040
 800970c:	00100030 	.word	0x00100030
 8009710:	00100020 	.word	0x00100020

08009714 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2b0c      	cmp	r3, #12
 8009726:	d831      	bhi.n	800978c <HAL_TIM_ReadCapturedValue+0x78>
 8009728:	a201      	add	r2, pc, #4	@ (adr r2, 8009730 <HAL_TIM_ReadCapturedValue+0x1c>)
 800972a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972e:	bf00      	nop
 8009730:	08009765 	.word	0x08009765
 8009734:	0800978d 	.word	0x0800978d
 8009738:	0800978d 	.word	0x0800978d
 800973c:	0800978d 	.word	0x0800978d
 8009740:	0800976f 	.word	0x0800976f
 8009744:	0800978d 	.word	0x0800978d
 8009748:	0800978d 	.word	0x0800978d
 800974c:	0800978d 	.word	0x0800978d
 8009750:	08009779 	.word	0x08009779
 8009754:	0800978d 	.word	0x0800978d
 8009758:	0800978d 	.word	0x0800978d
 800975c:	0800978d 	.word	0x0800978d
 8009760:	08009783 	.word	0x08009783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800976a:	60fb      	str	r3, [r7, #12]

      break;
 800976c:	e00f      	b.n	800978e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009774:	60fb      	str	r3, [r7, #12]

      break;
 8009776:	e00a      	b.n	800978e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800977e:	60fb      	str	r3, [r7, #12]

      break;
 8009780:	e005      	b.n	800978e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009788:	60fb      	str	r3, [r7, #12]

      break;
 800978a:	e000      	b.n	800978e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800978c:	bf00      	nop
  }

  return tmpreg;
 800978e:	68fb      	ldr	r3, [r7, #12]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a4c      	ldr	r2, [pc, #304]	@ (800991c <TIM_Base_SetConfig+0x144>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d017      	beq.n	8009820 <TIM_Base_SetConfig+0x48>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f6:	d013      	beq.n	8009820 <TIM_Base_SetConfig+0x48>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a49      	ldr	r2, [pc, #292]	@ (8009920 <TIM_Base_SetConfig+0x148>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d00f      	beq.n	8009820 <TIM_Base_SetConfig+0x48>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a48      	ldr	r2, [pc, #288]	@ (8009924 <TIM_Base_SetConfig+0x14c>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d00b      	beq.n	8009820 <TIM_Base_SetConfig+0x48>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a47      	ldr	r2, [pc, #284]	@ (8009928 <TIM_Base_SetConfig+0x150>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d007      	beq.n	8009820 <TIM_Base_SetConfig+0x48>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a46      	ldr	r2, [pc, #280]	@ (800992c <TIM_Base_SetConfig+0x154>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d003      	beq.n	8009820 <TIM_Base_SetConfig+0x48>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a45      	ldr	r2, [pc, #276]	@ (8009930 <TIM_Base_SetConfig+0x158>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d108      	bne.n	8009832 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	4313      	orrs	r3, r2
 8009830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a39      	ldr	r2, [pc, #228]	@ (800991c <TIM_Base_SetConfig+0x144>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d023      	beq.n	8009882 <TIM_Base_SetConfig+0xaa>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009840:	d01f      	beq.n	8009882 <TIM_Base_SetConfig+0xaa>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a36      	ldr	r2, [pc, #216]	@ (8009920 <TIM_Base_SetConfig+0x148>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d01b      	beq.n	8009882 <TIM_Base_SetConfig+0xaa>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a35      	ldr	r2, [pc, #212]	@ (8009924 <TIM_Base_SetConfig+0x14c>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d017      	beq.n	8009882 <TIM_Base_SetConfig+0xaa>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a34      	ldr	r2, [pc, #208]	@ (8009928 <TIM_Base_SetConfig+0x150>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d013      	beq.n	8009882 <TIM_Base_SetConfig+0xaa>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a33      	ldr	r2, [pc, #204]	@ (800992c <TIM_Base_SetConfig+0x154>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d00f      	beq.n	8009882 <TIM_Base_SetConfig+0xaa>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a33      	ldr	r2, [pc, #204]	@ (8009934 <TIM_Base_SetConfig+0x15c>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d00b      	beq.n	8009882 <TIM_Base_SetConfig+0xaa>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a32      	ldr	r2, [pc, #200]	@ (8009938 <TIM_Base_SetConfig+0x160>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d007      	beq.n	8009882 <TIM_Base_SetConfig+0xaa>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a31      	ldr	r2, [pc, #196]	@ (800993c <TIM_Base_SetConfig+0x164>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d003      	beq.n	8009882 <TIM_Base_SetConfig+0xaa>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a2c      	ldr	r2, [pc, #176]	@ (8009930 <TIM_Base_SetConfig+0x158>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d108      	bne.n	8009894 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	4313      	orrs	r3, r2
 8009892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	4313      	orrs	r3, r2
 80098a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a18      	ldr	r2, [pc, #96]	@ (800991c <TIM_Base_SetConfig+0x144>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d013      	beq.n	80098e8 <TIM_Base_SetConfig+0x110>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a1a      	ldr	r2, [pc, #104]	@ (800992c <TIM_Base_SetConfig+0x154>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d00f      	beq.n	80098e8 <TIM_Base_SetConfig+0x110>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a1a      	ldr	r2, [pc, #104]	@ (8009934 <TIM_Base_SetConfig+0x15c>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d00b      	beq.n	80098e8 <TIM_Base_SetConfig+0x110>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a19      	ldr	r2, [pc, #100]	@ (8009938 <TIM_Base_SetConfig+0x160>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d007      	beq.n	80098e8 <TIM_Base_SetConfig+0x110>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a18      	ldr	r2, [pc, #96]	@ (800993c <TIM_Base_SetConfig+0x164>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d003      	beq.n	80098e8 <TIM_Base_SetConfig+0x110>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a13      	ldr	r2, [pc, #76]	@ (8009930 <TIM_Base_SetConfig+0x158>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d103      	bne.n	80098f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	691a      	ldr	r2, [r3, #16]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d105      	bne.n	800990e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	f023 0201 	bic.w	r2, r3, #1
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	611a      	str	r2, [r3, #16]
  }
}
 800990e:	bf00      	nop
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	40012c00 	.word	0x40012c00
 8009920:	40000400 	.word	0x40000400
 8009924:	40000800 	.word	0x40000800
 8009928:	40000c00 	.word	0x40000c00
 800992c:	40013400 	.word	0x40013400
 8009930:	40015000 	.word	0x40015000
 8009934:	40014000 	.word	0x40014000
 8009938:	40014400 	.word	0x40014400
 800993c:	40014800 	.word	0x40014800

08009940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a1b      	ldr	r3, [r3, #32]
 8009954:	f023 0201 	bic.w	r2, r3, #1
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800996e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f023 0303 	bic.w	r3, r3, #3
 800997a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	4313      	orrs	r3, r2
 8009984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f023 0302 	bic.w	r3, r3, #2
 800998c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	4313      	orrs	r3, r2
 8009996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a30      	ldr	r2, [pc, #192]	@ (8009a5c <TIM_OC1_SetConfig+0x11c>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d013      	beq.n	80099c8 <TIM_OC1_SetConfig+0x88>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a2f      	ldr	r2, [pc, #188]	@ (8009a60 <TIM_OC1_SetConfig+0x120>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d00f      	beq.n	80099c8 <TIM_OC1_SetConfig+0x88>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a2e      	ldr	r2, [pc, #184]	@ (8009a64 <TIM_OC1_SetConfig+0x124>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d00b      	beq.n	80099c8 <TIM_OC1_SetConfig+0x88>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a2d      	ldr	r2, [pc, #180]	@ (8009a68 <TIM_OC1_SetConfig+0x128>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d007      	beq.n	80099c8 <TIM_OC1_SetConfig+0x88>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a2c      	ldr	r2, [pc, #176]	@ (8009a6c <TIM_OC1_SetConfig+0x12c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d003      	beq.n	80099c8 <TIM_OC1_SetConfig+0x88>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a2b      	ldr	r2, [pc, #172]	@ (8009a70 <TIM_OC1_SetConfig+0x130>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d10c      	bne.n	80099e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f023 0308 	bic.w	r3, r3, #8
 80099ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f023 0304 	bic.w	r3, r3, #4
 80099e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a1d      	ldr	r2, [pc, #116]	@ (8009a5c <TIM_OC1_SetConfig+0x11c>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d013      	beq.n	8009a12 <TIM_OC1_SetConfig+0xd2>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a1c      	ldr	r2, [pc, #112]	@ (8009a60 <TIM_OC1_SetConfig+0x120>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d00f      	beq.n	8009a12 <TIM_OC1_SetConfig+0xd2>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009a64 <TIM_OC1_SetConfig+0x124>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00b      	beq.n	8009a12 <TIM_OC1_SetConfig+0xd2>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009a68 <TIM_OC1_SetConfig+0x128>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d007      	beq.n	8009a12 <TIM_OC1_SetConfig+0xd2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a19      	ldr	r2, [pc, #100]	@ (8009a6c <TIM_OC1_SetConfig+0x12c>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d003      	beq.n	8009a12 <TIM_OC1_SetConfig+0xd2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a18      	ldr	r2, [pc, #96]	@ (8009a70 <TIM_OC1_SetConfig+0x130>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d111      	bne.n	8009a36 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	621a      	str	r2, [r3, #32]
}
 8009a50:	bf00      	nop
 8009a52:	371c      	adds	r7, #28
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	40012c00 	.word	0x40012c00
 8009a60:	40013400 	.word	0x40013400
 8009a64:	40014000 	.word	0x40014000
 8009a68:	40014400 	.word	0x40014400
 8009a6c:	40014800 	.word	0x40014800
 8009a70:	40015000 	.word	0x40015000

08009a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a1b      	ldr	r3, [r3, #32]
 8009a88:	f023 0210 	bic.w	r2, r3, #16
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	021b      	lsls	r3, r3, #8
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f023 0320 	bic.w	r3, r3, #32
 8009ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	011b      	lsls	r3, r3, #4
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8009b84 <TIM_OC2_SetConfig+0x110>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d007      	beq.n	8009ae8 <TIM_OC2_SetConfig+0x74>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a2b      	ldr	r2, [pc, #172]	@ (8009b88 <TIM_OC2_SetConfig+0x114>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d003      	beq.n	8009ae8 <TIM_OC2_SetConfig+0x74>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8009b8c <TIM_OC2_SetConfig+0x118>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d10d      	bne.n	8009b04 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	011b      	lsls	r3, r3, #4
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a1f      	ldr	r2, [pc, #124]	@ (8009b84 <TIM_OC2_SetConfig+0x110>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d013      	beq.n	8009b34 <TIM_OC2_SetConfig+0xc0>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8009b88 <TIM_OC2_SetConfig+0x114>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d00f      	beq.n	8009b34 <TIM_OC2_SetConfig+0xc0>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a1e      	ldr	r2, [pc, #120]	@ (8009b90 <TIM_OC2_SetConfig+0x11c>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d00b      	beq.n	8009b34 <TIM_OC2_SetConfig+0xc0>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8009b94 <TIM_OC2_SetConfig+0x120>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d007      	beq.n	8009b34 <TIM_OC2_SetConfig+0xc0>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a1c      	ldr	r2, [pc, #112]	@ (8009b98 <TIM_OC2_SetConfig+0x124>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d003      	beq.n	8009b34 <TIM_OC2_SetConfig+0xc0>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a17      	ldr	r2, [pc, #92]	@ (8009b8c <TIM_OC2_SetConfig+0x118>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d113      	bne.n	8009b5c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	621a      	str	r2, [r3, #32]
}
 8009b76:	bf00      	nop
 8009b78:	371c      	adds	r7, #28
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	40012c00 	.word	0x40012c00
 8009b88:	40013400 	.word	0x40013400
 8009b8c:	40015000 	.word	0x40015000
 8009b90:	40014000 	.word	0x40014000
 8009b94:	40014400 	.word	0x40014400
 8009b98:	40014800 	.word	0x40014800

08009b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b087      	sub	sp, #28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f023 0303 	bic.w	r3, r3, #3
 8009bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	021b      	lsls	r3, r3, #8
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8009ca8 <TIM_OC3_SetConfig+0x10c>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d007      	beq.n	8009c0e <TIM_OC3_SetConfig+0x72>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a2a      	ldr	r2, [pc, #168]	@ (8009cac <TIM_OC3_SetConfig+0x110>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d003      	beq.n	8009c0e <TIM_OC3_SetConfig+0x72>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a29      	ldr	r2, [pc, #164]	@ (8009cb0 <TIM_OC3_SetConfig+0x114>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d10d      	bne.n	8009c2a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	021b      	lsls	r3, r3, #8
 8009c1c:	697a      	ldr	r2, [r7, #20]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8009ca8 <TIM_OC3_SetConfig+0x10c>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d013      	beq.n	8009c5a <TIM_OC3_SetConfig+0xbe>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a1d      	ldr	r2, [pc, #116]	@ (8009cac <TIM_OC3_SetConfig+0x110>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d00f      	beq.n	8009c5a <TIM_OC3_SetConfig+0xbe>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8009cb4 <TIM_OC3_SetConfig+0x118>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d00b      	beq.n	8009c5a <TIM_OC3_SetConfig+0xbe>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a1c      	ldr	r2, [pc, #112]	@ (8009cb8 <TIM_OC3_SetConfig+0x11c>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d007      	beq.n	8009c5a <TIM_OC3_SetConfig+0xbe>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8009cbc <TIM_OC3_SetConfig+0x120>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d003      	beq.n	8009c5a <TIM_OC3_SetConfig+0xbe>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a16      	ldr	r2, [pc, #88]	@ (8009cb0 <TIM_OC3_SetConfig+0x114>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d113      	bne.n	8009c82 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	011b      	lsls	r3, r3, #4
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	011b      	lsls	r3, r3, #4
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	621a      	str	r2, [r3, #32]
}
 8009c9c:	bf00      	nop
 8009c9e:	371c      	adds	r7, #28
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	40012c00 	.word	0x40012c00
 8009cac:	40013400 	.word	0x40013400
 8009cb0:	40015000 	.word	0x40015000
 8009cb4:	40014000 	.word	0x40014000
 8009cb8:	40014400 	.word	0x40014400
 8009cbc:	40014800 	.word	0x40014800

08009cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
 8009cd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	021b      	lsls	r3, r3, #8
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	031b      	lsls	r3, r3, #12
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8009dd0 <TIM_OC4_SetConfig+0x110>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d007      	beq.n	8009d34 <TIM_OC4_SetConfig+0x74>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a2b      	ldr	r2, [pc, #172]	@ (8009dd4 <TIM_OC4_SetConfig+0x114>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d003      	beq.n	8009d34 <TIM_OC4_SetConfig+0x74>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8009dd8 <TIM_OC4_SetConfig+0x118>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d10d      	bne.n	8009d50 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	031b      	lsls	r3, r3, #12
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a1f      	ldr	r2, [pc, #124]	@ (8009dd0 <TIM_OC4_SetConfig+0x110>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d013      	beq.n	8009d80 <TIM_OC4_SetConfig+0xc0>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8009dd4 <TIM_OC4_SetConfig+0x114>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d00f      	beq.n	8009d80 <TIM_OC4_SetConfig+0xc0>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a1e      	ldr	r2, [pc, #120]	@ (8009ddc <TIM_OC4_SetConfig+0x11c>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d00b      	beq.n	8009d80 <TIM_OC4_SetConfig+0xc0>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8009de0 <TIM_OC4_SetConfig+0x120>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d007      	beq.n	8009d80 <TIM_OC4_SetConfig+0xc0>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a1c      	ldr	r2, [pc, #112]	@ (8009de4 <TIM_OC4_SetConfig+0x124>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d003      	beq.n	8009d80 <TIM_OC4_SetConfig+0xc0>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a17      	ldr	r2, [pc, #92]	@ (8009dd8 <TIM_OC4_SetConfig+0x118>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d113      	bne.n	8009da8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d86:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d8e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	695b      	ldr	r3, [r3, #20]
 8009d94:	019b      	lsls	r3, r3, #6
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	019b      	lsls	r3, r3, #6
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	621a      	str	r2, [r3, #32]
}
 8009dc2:	bf00      	nop
 8009dc4:	371c      	adds	r7, #28
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	40012c00 	.word	0x40012c00
 8009dd4:	40013400 	.word	0x40013400
 8009dd8:	40015000 	.word	0x40015000
 8009ddc:	40014000 	.word	0x40014000
 8009de0:	40014400 	.word	0x40014400
 8009de4:	40014800 	.word	0x40014800

08009de8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b087      	sub	sp, #28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a1b      	ldr	r3, [r3, #32]
 8009dfc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009e2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	041b      	lsls	r3, r3, #16
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a19      	ldr	r2, [pc, #100]	@ (8009ea4 <TIM_OC5_SetConfig+0xbc>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d013      	beq.n	8009e6a <TIM_OC5_SetConfig+0x82>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a18      	ldr	r2, [pc, #96]	@ (8009ea8 <TIM_OC5_SetConfig+0xc0>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d00f      	beq.n	8009e6a <TIM_OC5_SetConfig+0x82>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a17      	ldr	r2, [pc, #92]	@ (8009eac <TIM_OC5_SetConfig+0xc4>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d00b      	beq.n	8009e6a <TIM_OC5_SetConfig+0x82>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a16      	ldr	r2, [pc, #88]	@ (8009eb0 <TIM_OC5_SetConfig+0xc8>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d007      	beq.n	8009e6a <TIM_OC5_SetConfig+0x82>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a15      	ldr	r2, [pc, #84]	@ (8009eb4 <TIM_OC5_SetConfig+0xcc>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d003      	beq.n	8009e6a <TIM_OC5_SetConfig+0x82>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a14      	ldr	r2, [pc, #80]	@ (8009eb8 <TIM_OC5_SetConfig+0xd0>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d109      	bne.n	8009e7e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	021b      	lsls	r3, r3, #8
 8009e78:	697a      	ldr	r2, [r7, #20]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	621a      	str	r2, [r3, #32]
}
 8009e98:	bf00      	nop
 8009e9a:	371c      	adds	r7, #28
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr
 8009ea4:	40012c00 	.word	0x40012c00
 8009ea8:	40013400 	.word	0x40013400
 8009eac:	40014000 	.word	0x40014000
 8009eb0:	40014400 	.word	0x40014400
 8009eb4:	40014800 	.word	0x40014800
 8009eb8:	40015000 	.word	0x40015000

08009ebc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b087      	sub	sp, #28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a1b      	ldr	r3, [r3, #32]
 8009ed0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	021b      	lsls	r3, r3, #8
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	051b      	lsls	r3, r3, #20
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a1a      	ldr	r2, [pc, #104]	@ (8009f7c <TIM_OC6_SetConfig+0xc0>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d013      	beq.n	8009f40 <TIM_OC6_SetConfig+0x84>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a19      	ldr	r2, [pc, #100]	@ (8009f80 <TIM_OC6_SetConfig+0xc4>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d00f      	beq.n	8009f40 <TIM_OC6_SetConfig+0x84>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a18      	ldr	r2, [pc, #96]	@ (8009f84 <TIM_OC6_SetConfig+0xc8>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d00b      	beq.n	8009f40 <TIM_OC6_SetConfig+0x84>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a17      	ldr	r2, [pc, #92]	@ (8009f88 <TIM_OC6_SetConfig+0xcc>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d007      	beq.n	8009f40 <TIM_OC6_SetConfig+0x84>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a16      	ldr	r2, [pc, #88]	@ (8009f8c <TIM_OC6_SetConfig+0xd0>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d003      	beq.n	8009f40 <TIM_OC6_SetConfig+0x84>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a15      	ldr	r2, [pc, #84]	@ (8009f90 <TIM_OC6_SetConfig+0xd4>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d109      	bne.n	8009f54 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	695b      	ldr	r3, [r3, #20]
 8009f4c:	029b      	lsls	r3, r3, #10
 8009f4e:	697a      	ldr	r2, [r7, #20]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	685a      	ldr	r2, [r3, #4]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	621a      	str	r2, [r3, #32]
}
 8009f6e:	bf00      	nop
 8009f70:	371c      	adds	r7, #28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	40012c00 	.word	0x40012c00
 8009f80:	40013400 	.word	0x40013400
 8009f84:	40014000 	.word	0x40014000
 8009f88:	40014400 	.word	0x40014400
 8009f8c:	40014800 	.word	0x40014800
 8009f90:	40015000 	.word	0x40015000

08009f94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
 8009fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	f023 0201 	bic.w	r2, r3, #1
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	4a28      	ldr	r2, [pc, #160]	@ (800a060 <TIM_TI1_SetConfig+0xcc>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d01b      	beq.n	8009ffa <TIM_TI1_SetConfig+0x66>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fc8:	d017      	beq.n	8009ffa <TIM_TI1_SetConfig+0x66>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	4a25      	ldr	r2, [pc, #148]	@ (800a064 <TIM_TI1_SetConfig+0xd0>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d013      	beq.n	8009ffa <TIM_TI1_SetConfig+0x66>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	4a24      	ldr	r2, [pc, #144]	@ (800a068 <TIM_TI1_SetConfig+0xd4>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d00f      	beq.n	8009ffa <TIM_TI1_SetConfig+0x66>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	4a23      	ldr	r2, [pc, #140]	@ (800a06c <TIM_TI1_SetConfig+0xd8>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d00b      	beq.n	8009ffa <TIM_TI1_SetConfig+0x66>
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	4a22      	ldr	r2, [pc, #136]	@ (800a070 <TIM_TI1_SetConfig+0xdc>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d007      	beq.n	8009ffa <TIM_TI1_SetConfig+0x66>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	4a21      	ldr	r2, [pc, #132]	@ (800a074 <TIM_TI1_SetConfig+0xe0>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d003      	beq.n	8009ffa <TIM_TI1_SetConfig+0x66>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	4a20      	ldr	r2, [pc, #128]	@ (800a078 <TIM_TI1_SetConfig+0xe4>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d101      	bne.n	8009ffe <TIM_TI1_SetConfig+0x6a>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e000      	b.n	800a000 <TIM_TI1_SetConfig+0x6c>
 8009ffe:	2300      	movs	r3, #0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d008      	beq.n	800a016 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	f023 0303 	bic.w	r3, r3, #3
 800a00a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4313      	orrs	r3, r2
 800a012:	617b      	str	r3, [r7, #20]
 800a014:	e003      	b.n	800a01e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f043 0301 	orr.w	r3, r3, #1
 800a01c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	011b      	lsls	r3, r3, #4
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	4313      	orrs	r3, r2
 800a030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	f023 030a 	bic.w	r3, r3, #10
 800a038:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	f003 030a 	and.w	r3, r3, #10
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	4313      	orrs	r3, r2
 800a044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	621a      	str	r2, [r3, #32]
}
 800a052:	bf00      	nop
 800a054:	371c      	adds	r7, #28
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	40012c00 	.word	0x40012c00
 800a064:	40000400 	.word	0x40000400
 800a068:	40000800 	.word	0x40000800
 800a06c:	40000c00 	.word	0x40000c00
 800a070:	40013400 	.word	0x40013400
 800a074:	40014000 	.word	0x40014000
 800a078:	40015000 	.word	0x40015000

0800a07c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6a1b      	ldr	r3, [r3, #32]
 800a08c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6a1b      	ldr	r3, [r3, #32]
 800a092:	f023 0201 	bic.w	r2, r3, #1
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	699b      	ldr	r3, [r3, #24]
 800a09e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	011b      	lsls	r3, r3, #4
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f023 030a 	bic.w	r3, r3, #10
 800a0b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	697a      	ldr	r2, [r7, #20]
 800a0cc:	621a      	str	r2, [r3, #32]
}
 800a0ce:	bf00      	nop
 800a0d0:	371c      	adds	r7, #28
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b087      	sub	sp, #28
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	60f8      	str	r0, [r7, #12]
 800a0e2:	60b9      	str	r1, [r7, #8]
 800a0e4:	607a      	str	r2, [r7, #4]
 800a0e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	f023 0210 	bic.w	r2, r3, #16
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	021b      	lsls	r3, r3, #8
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	4313      	orrs	r3, r2
 800a110:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a118:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	031b      	lsls	r3, r3, #12
 800a11e:	b29b      	uxth	r3, r3
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	4313      	orrs	r3, r2
 800a124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a12c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	011b      	lsls	r3, r3, #4
 800a132:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	4313      	orrs	r3, r2
 800a13a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	621a      	str	r2, [r3, #32]
}
 800a148:	bf00      	nop
 800a14a:	371c      	adds	r7, #28
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a154:	b480      	push	{r7}
 800a156:	b087      	sub	sp, #28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6a1b      	ldr	r3, [r3, #32]
 800a164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	f023 0210 	bic.w	r2, r3, #16
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a17e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	031b      	lsls	r3, r3, #12
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	4313      	orrs	r3, r2
 800a188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a190:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	011b      	lsls	r3, r3, #4
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	4313      	orrs	r3, r2
 800a19a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	621a      	str	r2, [r3, #32]
}
 800a1a8:	bf00      	nop
 800a1aa:	371c      	adds	r7, #28
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b087      	sub	sp, #28
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
 800a1c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
 800a1cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	69db      	ldr	r3, [r3, #28]
 800a1d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f023 0303 	bic.w	r3, r3, #3
 800a1e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	011b      	lsls	r3, r3, #4
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a204:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	021b      	lsls	r3, r3, #8
 800a20a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	4313      	orrs	r3, r2
 800a212:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	697a      	ldr	r2, [r7, #20]
 800a21e:	621a      	str	r2, [r3, #32]
}
 800a220:	bf00      	nop
 800a222:	371c      	adds	r7, #28
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
 800a238:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	69db      	ldr	r3, [r3, #28]
 800a250:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a258:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	021b      	lsls	r3, r3, #8
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	4313      	orrs	r3, r2
 800a262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a26a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	031b      	lsls	r3, r3, #12
 800a270:	b29b      	uxth	r3, r3
 800a272:	693a      	ldr	r2, [r7, #16]
 800a274:	4313      	orrs	r3, r2
 800a276:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a27e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	031b      	lsls	r3, r3, #12
 800a284:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	621a      	str	r2, [r3, #32]
}
 800a29a:	bf00      	nop
 800a29c:	371c      	adds	r7, #28
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a2bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	f043 0307 	orr.w	r3, r3, #7
 800a2cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	609a      	str	r2, [r3, #8]
}
 800a2d4:	bf00      	nop
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
 800a2ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	021a      	lsls	r2, r3, #8
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	431a      	orrs	r2, r3
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	4313      	orrs	r3, r2
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	609a      	str	r2, [r3, #8]
}
 800a314:	bf00      	nop
 800a316:	371c      	adds	r7, #28
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f003 031f 	and.w	r3, r3, #31
 800a332:	2201      	movs	r2, #1
 800a334:	fa02 f303 	lsl.w	r3, r2, r3
 800a338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6a1a      	ldr	r2, [r3, #32]
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	43db      	mvns	r3, r3
 800a342:	401a      	ands	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a1a      	ldr	r2, [r3, #32]
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f003 031f 	and.w	r3, r3, #31
 800a352:	6879      	ldr	r1, [r7, #4]
 800a354:	fa01 f303 	lsl.w	r3, r1, r3
 800a358:	431a      	orrs	r2, r3
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	621a      	str	r2, [r3, #32]
}
 800a35e:	bf00      	nop
 800a360:	371c      	adds	r7, #28
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
	...

0800a36c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d101      	bne.n	800a384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a380:	2302      	movs	r3, #2
 800a382:	e074      	b.n	800a46e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2202      	movs	r2, #2
 800a390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a34      	ldr	r2, [pc, #208]	@ (800a47c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d009      	beq.n	800a3c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a33      	ldr	r2, [pc, #204]	@ (800a480 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d004      	beq.n	800a3c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a31      	ldr	r2, [pc, #196]	@ (800a484 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d108      	bne.n	800a3d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a3c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a3da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a21      	ldr	r2, [pc, #132]	@ (800a47c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d022      	beq.n	800a442 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a404:	d01d      	beq.n	800a442 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a1f      	ldr	r2, [pc, #124]	@ (800a488 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d018      	beq.n	800a442 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a1d      	ldr	r2, [pc, #116]	@ (800a48c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d013      	beq.n	800a442 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a1c      	ldr	r2, [pc, #112]	@ (800a490 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d00e      	beq.n	800a442 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a15      	ldr	r2, [pc, #84]	@ (800a480 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d009      	beq.n	800a442 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a18      	ldr	r2, [pc, #96]	@ (800a494 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d004      	beq.n	800a442 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a11      	ldr	r2, [pc, #68]	@ (800a484 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d10c      	bne.n	800a45c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	4313      	orrs	r3, r2
 800a452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	40012c00 	.word	0x40012c00
 800a480:	40013400 	.word	0x40013400
 800a484:	40015000 	.word	0x40015000
 800a488:	40000400 	.word	0x40000400
 800a48c:	40000800 	.word	0x40000800
 800a490:	40000c00 	.word	0x40000c00
 800a494:	40014000 	.word	0x40014000

0800a498 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d101      	bne.n	800a4b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	e078      	b.n	800a5a6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a51a:	4313      	orrs	r3, r2
 800a51c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	041b      	lsls	r3, r3, #16
 800a52a:	4313      	orrs	r3, r2
 800a52c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	4313      	orrs	r3, r2
 800a53a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a1c      	ldr	r2, [pc, #112]	@ (800a5b4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d009      	beq.n	800a55a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a1b      	ldr	r2, [pc, #108]	@ (800a5b8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d004      	beq.n	800a55a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a19      	ldr	r2, [pc, #100]	@ (800a5bc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d11c      	bne.n	800a594 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a564:	051b      	lsls	r3, r3, #20
 800a566:	4313      	orrs	r3, r2
 800a568:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	6a1b      	ldr	r3, [r3, #32]
 800a574:	4313      	orrs	r3, r2
 800a576:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a582:	4313      	orrs	r3, r2
 800a584:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a590:	4313      	orrs	r3, r2
 800a592:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	40012c00 	.word	0x40012c00
 800a5b8:	40013400 	.word	0x40013400
 800a5bc:	40015000 	.word	0x40015000

0800a5c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e042      	b.n	800a6e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a664:	2b00      	cmp	r3, #0
 800a666:	d106      	bne.n	800a676 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7fa f96f 	bl	8004954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2224      	movs	r2, #36	@ 0x24
 800a67a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0201 	bic.w	r2, r2, #1
 800a68c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a692:	2b00      	cmp	r3, #0
 800a694:	d002      	beq.n	800a69c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 ff60 	bl	800b55c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fc61 	bl	800af64 <UART_SetConfig>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d101      	bne.n	800a6ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e01b      	b.n	800a6e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	685a      	ldr	r2, [r3, #4]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a6ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689a      	ldr	r2, [r3, #8]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a6ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f042 0201 	orr.w	r2, r2, #1
 800a6da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 ffdf 	bl	800b6a0 <UART_CheckIdleState>
 800a6e2:	4603      	mov	r3, r0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b08a      	sub	sp, #40	@ 0x28
 800a6f0:	af02      	add	r7, sp, #8
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a702:	2b20      	cmp	r3, #32
 800a704:	d17b      	bne.n	800a7fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <HAL_UART_Transmit+0x26>
 800a70c:	88fb      	ldrh	r3, [r7, #6]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e074      	b.n	800a800 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2221      	movs	r2, #33	@ 0x21
 800a722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a726:	f7fa fab9 	bl	8004c9c <HAL_GetTick>
 800a72a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	88fa      	ldrh	r2, [r7, #6]
 800a730:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	88fa      	ldrh	r2, [r7, #6]
 800a738:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a744:	d108      	bne.n	800a758 <HAL_UART_Transmit+0x6c>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d104      	bne.n	800a758 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a74e:	2300      	movs	r3, #0
 800a750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	61bb      	str	r3, [r7, #24]
 800a756:	e003      	b.n	800a760 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a75c:	2300      	movs	r3, #0
 800a75e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a760:	e030      	b.n	800a7c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2200      	movs	r2, #0
 800a76a:	2180      	movs	r1, #128	@ 0x80
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f001 f841 	bl	800b7f4 <UART_WaitOnFlagUntilTimeout>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d005      	beq.n	800a784 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2220      	movs	r2, #32
 800a77c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a780:	2303      	movs	r3, #3
 800a782:	e03d      	b.n	800a800 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10b      	bne.n	800a7a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a798:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	3302      	adds	r3, #2
 800a79e:	61bb      	str	r3, [r7, #24]
 800a7a0:	e007      	b.n	800a7b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	781a      	ldrb	r2, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1c8      	bne.n	800a762 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	2140      	movs	r1, #64	@ 0x40
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f001 f80a 	bl	800b7f4 <UART_WaitOnFlagUntilTimeout>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d005      	beq.n	800a7f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2220      	movs	r2, #32
 800a7ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e006      	b.n	800a800 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2220      	movs	r2, #32
 800a7f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	e000      	b.n	800a800 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a7fe:	2302      	movs	r3, #2
  }
}
 800a800:	4618      	mov	r0, r3
 800a802:	3720      	adds	r7, #32
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b08a      	sub	sp, #40	@ 0x28
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	4613      	mov	r3, r2
 800a814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a81c:	2b20      	cmp	r3, #32
 800a81e:	d137      	bne.n	800a890 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <HAL_UART_Receive_IT+0x24>
 800a826:	88fb      	ldrh	r3, [r7, #6]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e030      	b.n	800a892 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a18      	ldr	r2, [pc, #96]	@ (800a89c <HAL_UART_Receive_IT+0x94>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d01f      	beq.n	800a880 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d018      	beq.n	800a880 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	e853 3f00 	ldrex	r3, [r3]
 800a85a:	613b      	str	r3, [r7, #16]
   return(result);
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a862:	627b      	str	r3, [r7, #36]	@ 0x24
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	461a      	mov	r2, r3
 800a86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86c:	623b      	str	r3, [r7, #32]
 800a86e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a870:	69f9      	ldr	r1, [r7, #28]
 800a872:	6a3a      	ldr	r2, [r7, #32]
 800a874:	e841 2300 	strex	r3, r2, [r1]
 800a878:	61bb      	str	r3, [r7, #24]
   return(result);
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1e6      	bne.n	800a84e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a880:	88fb      	ldrh	r3, [r7, #6]
 800a882:	461a      	mov	r2, r3
 800a884:	68b9      	ldr	r1, [r7, #8]
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f001 f822 	bl	800b8d0 <UART_Start_Receive_IT>
 800a88c:	4603      	mov	r3, r0
 800a88e:	e000      	b.n	800a892 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a890:	2302      	movs	r3, #2
  }
}
 800a892:	4618      	mov	r0, r3
 800a894:	3728      	adds	r7, #40	@ 0x28
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	40008000 	.word	0x40008000

0800a8a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b0ba      	sub	sp, #232	@ 0xe8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a8c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a8ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a8d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d11b      	bne.n	800a914 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8e0:	f003 0320 	and.w	r3, r3, #32
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d015      	beq.n	800a914 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8ec:	f003 0320 	and.w	r3, r3, #32
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d105      	bne.n	800a900 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a8f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d009      	beq.n	800a914 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 8300 	beq.w	800af0a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	4798      	blx	r3
      }
      return;
 800a912:	e2fa      	b.n	800af0a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f000 8123 	beq.w	800ab64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a91e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a922:	4b8d      	ldr	r3, [pc, #564]	@ (800ab58 <HAL_UART_IRQHandler+0x2b8>)
 800a924:	4013      	ands	r3, r2
 800a926:	2b00      	cmp	r3, #0
 800a928:	d106      	bne.n	800a938 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a92a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a92e:	4b8b      	ldr	r3, [pc, #556]	@ (800ab5c <HAL_UART_IRQHandler+0x2bc>)
 800a930:	4013      	ands	r3, r2
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 8116 	beq.w	800ab64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a93c:	f003 0301 	and.w	r3, r3, #1
 800a940:	2b00      	cmp	r3, #0
 800a942:	d011      	beq.n	800a968 <HAL_UART_IRQHandler+0xc8>
 800a944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00b      	beq.n	800a968 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2201      	movs	r2, #1
 800a956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a95e:	f043 0201 	orr.w	r2, r3, #1
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a96c:	f003 0302 	and.w	r3, r3, #2
 800a970:	2b00      	cmp	r3, #0
 800a972:	d011      	beq.n	800a998 <HAL_UART_IRQHandler+0xf8>
 800a974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a978:	f003 0301 	and.w	r3, r3, #1
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00b      	beq.n	800a998 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2202      	movs	r2, #2
 800a986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a98e:	f043 0204 	orr.w	r2, r3, #4
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a99c:	f003 0304 	and.w	r3, r3, #4
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d011      	beq.n	800a9c8 <HAL_UART_IRQHandler+0x128>
 800a9a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9a8:	f003 0301 	and.w	r3, r3, #1
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00b      	beq.n	800a9c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2204      	movs	r2, #4
 800a9b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9be:	f043 0202 	orr.w	r2, r3, #2
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9cc:	f003 0308 	and.w	r3, r3, #8
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d017      	beq.n	800aa04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9d8:	f003 0320 	and.w	r3, r3, #32
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d105      	bne.n	800a9ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a9e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a9e4:	4b5c      	ldr	r3, [pc, #368]	@ (800ab58 <HAL_UART_IRQHandler+0x2b8>)
 800a9e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00b      	beq.n	800aa04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2208      	movs	r2, #8
 800a9f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9fa:	f043 0208 	orr.w	r2, r3, #8
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d012      	beq.n	800aa36 <HAL_UART_IRQHandler+0x196>
 800aa10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00c      	beq.n	800aa36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa2c:	f043 0220 	orr.w	r2, r3, #32
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 8266 	beq.w	800af0e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa46:	f003 0320 	and.w	r3, r3, #32
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d013      	beq.n	800aa76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa52:	f003 0320 	and.w	r3, r3, #32
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d105      	bne.n	800aa66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d007      	beq.n	800aa76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d003      	beq.n	800aa76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa8a:	2b40      	cmp	r3, #64	@ 0x40
 800aa8c:	d005      	beq.n	800aa9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aa8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d054      	beq.n	800ab44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f001 f83a 	bl	800bb14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaaa:	2b40      	cmp	r3, #64	@ 0x40
 800aaac:	d146      	bne.n	800ab3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3308      	adds	r3, #8
 800aab4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aabc:	e853 3f00 	ldrex	r3, [r3]
 800aac0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800aac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aacc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3308      	adds	r3, #8
 800aad6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800aada:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800aade:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800aae6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800aaea:	e841 2300 	strex	r3, r2, [r1]
 800aaee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800aaf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1d9      	bne.n	800aaae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d017      	beq.n	800ab34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab0a:	4a15      	ldr	r2, [pc, #84]	@ (800ab60 <HAL_UART_IRQHandler+0x2c0>)
 800ab0c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fa fbad 	bl	8005274 <HAL_DMA_Abort_IT>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d019      	beq.n	800ab54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ab2e:	4610      	mov	r0, r2
 800ab30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab32:	e00f      	b.n	800ab54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f9ff 	bl	800af38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab3a:	e00b      	b.n	800ab54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f9fb 	bl	800af38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab42:	e007      	b.n	800ab54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 f9f7 	bl	800af38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ab52:	e1dc      	b.n	800af0e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab54:	bf00      	nop
    return;
 800ab56:	e1da      	b.n	800af0e <HAL_UART_IRQHandler+0x66e>
 800ab58:	10000001 	.word	0x10000001
 800ab5c:	04000120 	.word	0x04000120
 800ab60:	0800bbe1 	.word	0x0800bbe1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	f040 8170 	bne.w	800ae4e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ab6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab72:	f003 0310 	and.w	r3, r3, #16
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 8169 	beq.w	800ae4e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ab7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab80:	f003 0310 	and.w	r3, r3, #16
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 8162 	beq.w	800ae4e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2210      	movs	r2, #16
 800ab90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab9c:	2b40      	cmp	r3, #64	@ 0x40
 800ab9e:	f040 80d8 	bne.w	800ad52 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800abb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 80af 	beq.w	800ad18 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800abc4:	429a      	cmp	r2, r3
 800abc6:	f080 80a7 	bcs.w	800ad18 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800abd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 0320 	and.w	r3, r3, #32
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f040 8087 	bne.w	800acf6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800abf4:	e853 3f00 	ldrex	r3, [r3]
 800abf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800abfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ac00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ac12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ac1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ac22:	e841 2300 	strex	r3, r2, [r1]
 800ac26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ac2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1da      	bne.n	800abe8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3308      	adds	r3, #8
 800ac38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac3c:	e853 3f00 	ldrex	r3, [r3]
 800ac40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ac42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac44:	f023 0301 	bic.w	r3, r3, #1
 800ac48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	3308      	adds	r3, #8
 800ac52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ac56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ac5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ac5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ac62:	e841 2300 	strex	r3, r2, [r1]
 800ac66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ac68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1e1      	bne.n	800ac32 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3308      	adds	r3, #8
 800ac74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac78:	e853 3f00 	ldrex	r3, [r3]
 800ac7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ac7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	3308      	adds	r3, #8
 800ac8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ac92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ac94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ac98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ac9a:	e841 2300 	strex	r3, r2, [r1]
 800ac9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1e3      	bne.n	800ac6e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2220      	movs	r2, #32
 800acaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acbc:	e853 3f00 	ldrex	r3, [r3]
 800acc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800acc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acc4:	f023 0310 	bic.w	r3, r3, #16
 800acc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	461a      	mov	r2, r3
 800acd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800acd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800acdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800acde:	e841 2300 	strex	r3, r2, [r1]
 800ace2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ace4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1e4      	bne.n	800acb4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fa fa66 	bl	80051c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2202      	movs	r2, #2
 800acfa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	4619      	mov	r1, r3
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f91b 	bl	800af4c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ad16:	e0fc      	b.n	800af12 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad22:	429a      	cmp	r2, r3
 800ad24:	f040 80f5 	bne.w	800af12 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 0320 	and.w	r3, r3, #32
 800ad36:	2b20      	cmp	r3, #32
 800ad38:	f040 80eb 	bne.w	800af12 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2202      	movs	r2, #2
 800ad40:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad48:	4619      	mov	r1, r3
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f8fe 	bl	800af4c <HAL_UARTEx_RxEventCallback>
      return;
 800ad50:	e0df      	b.n	800af12 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f000 80d1 	beq.w	800af16 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800ad74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 80cc 	beq.w	800af16 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad86:	e853 3f00 	ldrex	r3, [r3]
 800ad8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ada0:	647b      	str	r3, [r7, #68]	@ 0x44
 800ada2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ada6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ada8:	e841 2300 	strex	r3, r2, [r1]
 800adac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800adae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1e4      	bne.n	800ad7e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	3308      	adds	r3, #8
 800adba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adbe:	e853 3f00 	ldrex	r3, [r3]
 800adc2:	623b      	str	r3, [r7, #32]
   return(result);
 800adc4:	6a3b      	ldr	r3, [r7, #32]
 800adc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800adca:	f023 0301 	bic.w	r3, r3, #1
 800adce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3308      	adds	r3, #8
 800add8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800addc:	633a      	str	r2, [r7, #48]	@ 0x30
 800adde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ade2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ade4:	e841 2300 	strex	r3, r2, [r1]
 800ade8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1e1      	bne.n	800adb4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2220      	movs	r2, #32
 800adf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	e853 3f00 	ldrex	r3, [r3]
 800ae10:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f023 0310 	bic.w	r3, r3, #16
 800ae18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	461a      	mov	r2, r3
 800ae22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ae26:	61fb      	str	r3, [r7, #28]
 800ae28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2a:	69b9      	ldr	r1, [r7, #24]
 800ae2c:	69fa      	ldr	r2, [r7, #28]
 800ae2e:	e841 2300 	strex	r3, r2, [r1]
 800ae32:	617b      	str	r3, [r7, #20]
   return(result);
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1e4      	bne.n	800ae04 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2202      	movs	r2, #2
 800ae3e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae44:	4619      	mov	r1, r3
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f880 	bl	800af4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae4c:	e063      	b.n	800af16 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ae4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00e      	beq.n	800ae78 <HAL_UART_IRQHandler+0x5d8>
 800ae5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d008      	beq.n	800ae78 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ae6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f001 fc17 	bl	800c6a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae76:	e051      	b.n	800af1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ae78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d014      	beq.n	800aeae <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ae84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d105      	bne.n	800ae9c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ae90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d008      	beq.n	800aeae <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d03a      	beq.n	800af1a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	4798      	blx	r3
    }
    return;
 800aeac:	e035      	b.n	800af1a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aeae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aeb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d009      	beq.n	800aece <HAL_UART_IRQHandler+0x62e>
 800aeba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d003      	beq.n	800aece <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fea0 	bl	800bc0c <UART_EndTransmit_IT>
    return;
 800aecc:	e026      	b.n	800af1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aed2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d009      	beq.n	800aeee <HAL_UART_IRQHandler+0x64e>
 800aeda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aede:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d003      	beq.n	800aeee <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f001 fbf0 	bl	800c6cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aeec:	e016      	b.n	800af1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aeee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aef2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d010      	beq.n	800af1c <HAL_UART_IRQHandler+0x67c>
 800aefa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	da0c      	bge.n	800af1c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f001 fbd8 	bl	800c6b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af08:	e008      	b.n	800af1c <HAL_UART_IRQHandler+0x67c>
      return;
 800af0a:	bf00      	nop
 800af0c:	e006      	b.n	800af1c <HAL_UART_IRQHandler+0x67c>
    return;
 800af0e:	bf00      	nop
 800af10:	e004      	b.n	800af1c <HAL_UART_IRQHandler+0x67c>
      return;
 800af12:	bf00      	nop
 800af14:	e002      	b.n	800af1c <HAL_UART_IRQHandler+0x67c>
      return;
 800af16:	bf00      	nop
 800af18:	e000      	b.n	800af1c <HAL_UART_IRQHandler+0x67c>
    return;
 800af1a:	bf00      	nop
  }
}
 800af1c:	37e8      	adds	r7, #232	@ 0xe8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop

0800af24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	460b      	mov	r3, r1
 800af56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af58:	bf00      	nop
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af68:	b08c      	sub	sp, #48	@ 0x30
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	689a      	ldr	r2, [r3, #8]
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	431a      	orrs	r2, r3
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	431a      	orrs	r2, r3
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	69db      	ldr	r3, [r3, #28]
 800af88:	4313      	orrs	r3, r2
 800af8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	4baa      	ldr	r3, [pc, #680]	@ (800b23c <UART_SetConfig+0x2d8>)
 800af94:	4013      	ands	r3, r2
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	6812      	ldr	r2, [r2, #0]
 800af9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af9c:	430b      	orrs	r3, r1
 800af9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	68da      	ldr	r2, [r3, #12]
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	430a      	orrs	r2, r1
 800afb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a9f      	ldr	r2, [pc, #636]	@ (800b240 <UART_SetConfig+0x2dc>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d004      	beq.n	800afd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afcc:	4313      	orrs	r3, r2
 800afce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800afda:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	6812      	ldr	r2, [r2, #0]
 800afe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afe4:	430b      	orrs	r3, r1
 800afe6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afee:	f023 010f 	bic.w	r1, r3, #15
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	430a      	orrs	r2, r1
 800affc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a90      	ldr	r2, [pc, #576]	@ (800b244 <UART_SetConfig+0x2e0>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d125      	bne.n	800b054 <UART_SetConfig+0xf0>
 800b008:	4b8f      	ldr	r3, [pc, #572]	@ (800b248 <UART_SetConfig+0x2e4>)
 800b00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b00e:	f003 0303 	and.w	r3, r3, #3
 800b012:	2b03      	cmp	r3, #3
 800b014:	d81a      	bhi.n	800b04c <UART_SetConfig+0xe8>
 800b016:	a201      	add	r2, pc, #4	@ (adr r2, 800b01c <UART_SetConfig+0xb8>)
 800b018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01c:	0800b02d 	.word	0x0800b02d
 800b020:	0800b03d 	.word	0x0800b03d
 800b024:	0800b035 	.word	0x0800b035
 800b028:	0800b045 	.word	0x0800b045
 800b02c:	2301      	movs	r3, #1
 800b02e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b032:	e116      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b034:	2302      	movs	r3, #2
 800b036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b03a:	e112      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b03c:	2304      	movs	r3, #4
 800b03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b042:	e10e      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b044:	2308      	movs	r3, #8
 800b046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b04a:	e10a      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b04c:	2310      	movs	r3, #16
 800b04e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b052:	e106      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a7c      	ldr	r2, [pc, #496]	@ (800b24c <UART_SetConfig+0x2e8>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d138      	bne.n	800b0d0 <UART_SetConfig+0x16c>
 800b05e:	4b7a      	ldr	r3, [pc, #488]	@ (800b248 <UART_SetConfig+0x2e4>)
 800b060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b064:	f003 030c 	and.w	r3, r3, #12
 800b068:	2b0c      	cmp	r3, #12
 800b06a:	d82d      	bhi.n	800b0c8 <UART_SetConfig+0x164>
 800b06c:	a201      	add	r2, pc, #4	@ (adr r2, 800b074 <UART_SetConfig+0x110>)
 800b06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b072:	bf00      	nop
 800b074:	0800b0a9 	.word	0x0800b0a9
 800b078:	0800b0c9 	.word	0x0800b0c9
 800b07c:	0800b0c9 	.word	0x0800b0c9
 800b080:	0800b0c9 	.word	0x0800b0c9
 800b084:	0800b0b9 	.word	0x0800b0b9
 800b088:	0800b0c9 	.word	0x0800b0c9
 800b08c:	0800b0c9 	.word	0x0800b0c9
 800b090:	0800b0c9 	.word	0x0800b0c9
 800b094:	0800b0b1 	.word	0x0800b0b1
 800b098:	0800b0c9 	.word	0x0800b0c9
 800b09c:	0800b0c9 	.word	0x0800b0c9
 800b0a0:	0800b0c9 	.word	0x0800b0c9
 800b0a4:	0800b0c1 	.word	0x0800b0c1
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ae:	e0d8      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0b6:	e0d4      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b0b8:	2304      	movs	r3, #4
 800b0ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0be:	e0d0      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b0c0:	2308      	movs	r3, #8
 800b0c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0c6:	e0cc      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ce:	e0c8      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a5e      	ldr	r2, [pc, #376]	@ (800b250 <UART_SetConfig+0x2ec>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d125      	bne.n	800b126 <UART_SetConfig+0x1c2>
 800b0da:	4b5b      	ldr	r3, [pc, #364]	@ (800b248 <UART_SetConfig+0x2e4>)
 800b0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b0e4:	2b30      	cmp	r3, #48	@ 0x30
 800b0e6:	d016      	beq.n	800b116 <UART_SetConfig+0x1b2>
 800b0e8:	2b30      	cmp	r3, #48	@ 0x30
 800b0ea:	d818      	bhi.n	800b11e <UART_SetConfig+0x1ba>
 800b0ec:	2b20      	cmp	r3, #32
 800b0ee:	d00a      	beq.n	800b106 <UART_SetConfig+0x1a2>
 800b0f0:	2b20      	cmp	r3, #32
 800b0f2:	d814      	bhi.n	800b11e <UART_SetConfig+0x1ba>
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <UART_SetConfig+0x19a>
 800b0f8:	2b10      	cmp	r3, #16
 800b0fa:	d008      	beq.n	800b10e <UART_SetConfig+0x1aa>
 800b0fc:	e00f      	b.n	800b11e <UART_SetConfig+0x1ba>
 800b0fe:	2300      	movs	r3, #0
 800b100:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b104:	e0ad      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b106:	2302      	movs	r3, #2
 800b108:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b10c:	e0a9      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b10e:	2304      	movs	r3, #4
 800b110:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b114:	e0a5      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b116:	2308      	movs	r3, #8
 800b118:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b11c:	e0a1      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b11e:	2310      	movs	r3, #16
 800b120:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b124:	e09d      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a4a      	ldr	r2, [pc, #296]	@ (800b254 <UART_SetConfig+0x2f0>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d125      	bne.n	800b17c <UART_SetConfig+0x218>
 800b130:	4b45      	ldr	r3, [pc, #276]	@ (800b248 <UART_SetConfig+0x2e4>)
 800b132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b136:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b13a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b13c:	d016      	beq.n	800b16c <UART_SetConfig+0x208>
 800b13e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b140:	d818      	bhi.n	800b174 <UART_SetConfig+0x210>
 800b142:	2b80      	cmp	r3, #128	@ 0x80
 800b144:	d00a      	beq.n	800b15c <UART_SetConfig+0x1f8>
 800b146:	2b80      	cmp	r3, #128	@ 0x80
 800b148:	d814      	bhi.n	800b174 <UART_SetConfig+0x210>
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d002      	beq.n	800b154 <UART_SetConfig+0x1f0>
 800b14e:	2b40      	cmp	r3, #64	@ 0x40
 800b150:	d008      	beq.n	800b164 <UART_SetConfig+0x200>
 800b152:	e00f      	b.n	800b174 <UART_SetConfig+0x210>
 800b154:	2300      	movs	r3, #0
 800b156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b15a:	e082      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b15c:	2302      	movs	r3, #2
 800b15e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b162:	e07e      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b164:	2304      	movs	r3, #4
 800b166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b16a:	e07a      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b16c:	2308      	movs	r3, #8
 800b16e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b172:	e076      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b174:	2310      	movs	r3, #16
 800b176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b17a:	e072      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a35      	ldr	r2, [pc, #212]	@ (800b258 <UART_SetConfig+0x2f4>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d12a      	bne.n	800b1dc <UART_SetConfig+0x278>
 800b186:	4b30      	ldr	r3, [pc, #192]	@ (800b248 <UART_SetConfig+0x2e4>)
 800b188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b18c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b190:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b194:	d01a      	beq.n	800b1cc <UART_SetConfig+0x268>
 800b196:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b19a:	d81b      	bhi.n	800b1d4 <UART_SetConfig+0x270>
 800b19c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1a0:	d00c      	beq.n	800b1bc <UART_SetConfig+0x258>
 800b1a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1a6:	d815      	bhi.n	800b1d4 <UART_SetConfig+0x270>
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d003      	beq.n	800b1b4 <UART_SetConfig+0x250>
 800b1ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1b0:	d008      	beq.n	800b1c4 <UART_SetConfig+0x260>
 800b1b2:	e00f      	b.n	800b1d4 <UART_SetConfig+0x270>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1ba:	e052      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b1bc:	2302      	movs	r3, #2
 800b1be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1c2:	e04e      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b1c4:	2304      	movs	r3, #4
 800b1c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1ca:	e04a      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b1cc:	2308      	movs	r3, #8
 800b1ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1d2:	e046      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b1d4:	2310      	movs	r3, #16
 800b1d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1da:	e042      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a17      	ldr	r2, [pc, #92]	@ (800b240 <UART_SetConfig+0x2dc>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d13a      	bne.n	800b25c <UART_SetConfig+0x2f8>
 800b1e6:	4b18      	ldr	r3, [pc, #96]	@ (800b248 <UART_SetConfig+0x2e4>)
 800b1e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b1f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b1f4:	d01a      	beq.n	800b22c <UART_SetConfig+0x2c8>
 800b1f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b1fa:	d81b      	bhi.n	800b234 <UART_SetConfig+0x2d0>
 800b1fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b200:	d00c      	beq.n	800b21c <UART_SetConfig+0x2b8>
 800b202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b206:	d815      	bhi.n	800b234 <UART_SetConfig+0x2d0>
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <UART_SetConfig+0x2b0>
 800b20c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b210:	d008      	beq.n	800b224 <UART_SetConfig+0x2c0>
 800b212:	e00f      	b.n	800b234 <UART_SetConfig+0x2d0>
 800b214:	2300      	movs	r3, #0
 800b216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b21a:	e022      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b21c:	2302      	movs	r3, #2
 800b21e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b222:	e01e      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b224:	2304      	movs	r3, #4
 800b226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b22a:	e01a      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b22c:	2308      	movs	r3, #8
 800b22e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b232:	e016      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b234:	2310      	movs	r3, #16
 800b236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b23a:	e012      	b.n	800b262 <UART_SetConfig+0x2fe>
 800b23c:	cfff69f3 	.word	0xcfff69f3
 800b240:	40008000 	.word	0x40008000
 800b244:	40013800 	.word	0x40013800
 800b248:	40021000 	.word	0x40021000
 800b24c:	40004400 	.word	0x40004400
 800b250:	40004800 	.word	0x40004800
 800b254:	40004c00 	.word	0x40004c00
 800b258:	40005000 	.word	0x40005000
 800b25c:	2310      	movs	r3, #16
 800b25e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4aae      	ldr	r2, [pc, #696]	@ (800b520 <UART_SetConfig+0x5bc>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	f040 8097 	bne.w	800b39c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b26e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b272:	2b08      	cmp	r3, #8
 800b274:	d823      	bhi.n	800b2be <UART_SetConfig+0x35a>
 800b276:	a201      	add	r2, pc, #4	@ (adr r2, 800b27c <UART_SetConfig+0x318>)
 800b278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27c:	0800b2a1 	.word	0x0800b2a1
 800b280:	0800b2bf 	.word	0x0800b2bf
 800b284:	0800b2a9 	.word	0x0800b2a9
 800b288:	0800b2bf 	.word	0x0800b2bf
 800b28c:	0800b2af 	.word	0x0800b2af
 800b290:	0800b2bf 	.word	0x0800b2bf
 800b294:	0800b2bf 	.word	0x0800b2bf
 800b298:	0800b2bf 	.word	0x0800b2bf
 800b29c:	0800b2b7 	.word	0x0800b2b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2a0:	f7fc ff76 	bl	8008190 <HAL_RCC_GetPCLK1Freq>
 800b2a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2a6:	e010      	b.n	800b2ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2a8:	4b9e      	ldr	r3, [pc, #632]	@ (800b524 <UART_SetConfig+0x5c0>)
 800b2aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b2ac:	e00d      	b.n	800b2ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2ae:	f7fc ff01 	bl	80080b4 <HAL_RCC_GetSysClockFreq>
 800b2b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2b4:	e009      	b.n	800b2ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b2bc:	e005      	b.n	800b2ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b2c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 8130 	beq.w	800b532 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d6:	4a94      	ldr	r2, [pc, #592]	@ (800b528 <UART_SetConfig+0x5c4>)
 800b2d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	685a      	ldr	r2, [r3, #4]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	4413      	add	r3, r2
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d305      	bcc.n	800b302 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2fc:	69ba      	ldr	r2, [r7, #24]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d903      	bls.n	800b30a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b302:	2301      	movs	r3, #1
 800b304:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b308:	e113      	b.n	800b532 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30c:	2200      	movs	r2, #0
 800b30e:	60bb      	str	r3, [r7, #8]
 800b310:	60fa      	str	r2, [r7, #12]
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b316:	4a84      	ldr	r2, [pc, #528]	@ (800b528 <UART_SetConfig+0x5c4>)
 800b318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	2200      	movs	r2, #0
 800b320:	603b      	str	r3, [r7, #0]
 800b322:	607a      	str	r2, [r7, #4]
 800b324:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b328:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b32c:	f7f5 fde2 	bl	8000ef4 <__aeabi_uldivmod>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4610      	mov	r0, r2
 800b336:	4619      	mov	r1, r3
 800b338:	f04f 0200 	mov.w	r2, #0
 800b33c:	f04f 0300 	mov.w	r3, #0
 800b340:	020b      	lsls	r3, r1, #8
 800b342:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b346:	0202      	lsls	r2, r0, #8
 800b348:	6979      	ldr	r1, [r7, #20]
 800b34a:	6849      	ldr	r1, [r1, #4]
 800b34c:	0849      	lsrs	r1, r1, #1
 800b34e:	2000      	movs	r0, #0
 800b350:	460c      	mov	r4, r1
 800b352:	4605      	mov	r5, r0
 800b354:	eb12 0804 	adds.w	r8, r2, r4
 800b358:	eb43 0905 	adc.w	r9, r3, r5
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	469a      	mov	sl, r3
 800b364:	4693      	mov	fp, r2
 800b366:	4652      	mov	r2, sl
 800b368:	465b      	mov	r3, fp
 800b36a:	4640      	mov	r0, r8
 800b36c:	4649      	mov	r1, r9
 800b36e:	f7f5 fdc1 	bl	8000ef4 <__aeabi_uldivmod>
 800b372:	4602      	mov	r2, r0
 800b374:	460b      	mov	r3, r1
 800b376:	4613      	mov	r3, r2
 800b378:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b380:	d308      	bcc.n	800b394 <UART_SetConfig+0x430>
 800b382:	6a3b      	ldr	r3, [r7, #32]
 800b384:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b388:	d204      	bcs.n	800b394 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	6a3a      	ldr	r2, [r7, #32]
 800b390:	60da      	str	r2, [r3, #12]
 800b392:	e0ce      	b.n	800b532 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b39a:	e0ca      	b.n	800b532 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	69db      	ldr	r3, [r3, #28]
 800b3a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b3a4:	d166      	bne.n	800b474 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b3a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3aa:	2b08      	cmp	r3, #8
 800b3ac:	d827      	bhi.n	800b3fe <UART_SetConfig+0x49a>
 800b3ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b4 <UART_SetConfig+0x450>)
 800b3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b4:	0800b3d9 	.word	0x0800b3d9
 800b3b8:	0800b3e1 	.word	0x0800b3e1
 800b3bc:	0800b3e9 	.word	0x0800b3e9
 800b3c0:	0800b3ff 	.word	0x0800b3ff
 800b3c4:	0800b3ef 	.word	0x0800b3ef
 800b3c8:	0800b3ff 	.word	0x0800b3ff
 800b3cc:	0800b3ff 	.word	0x0800b3ff
 800b3d0:	0800b3ff 	.word	0x0800b3ff
 800b3d4:	0800b3f7 	.word	0x0800b3f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3d8:	f7fc feda 	bl	8008190 <HAL_RCC_GetPCLK1Freq>
 800b3dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3de:	e014      	b.n	800b40a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3e0:	f7fc feec 	bl	80081bc <HAL_RCC_GetPCLK2Freq>
 800b3e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3e6:	e010      	b.n	800b40a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3e8:	4b4e      	ldr	r3, [pc, #312]	@ (800b524 <UART_SetConfig+0x5c0>)
 800b3ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b3ec:	e00d      	b.n	800b40a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3ee:	f7fc fe61 	bl	80080b4 <HAL_RCC_GetSysClockFreq>
 800b3f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3f4:	e009      	b.n	800b40a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b3fc:	e005      	b.n	800b40a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b408:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f000 8090 	beq.w	800b532 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b416:	4a44      	ldr	r2, [pc, #272]	@ (800b528 <UART_SetConfig+0x5c4>)
 800b418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b41c:	461a      	mov	r2, r3
 800b41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b420:	fbb3 f3f2 	udiv	r3, r3, r2
 800b424:	005a      	lsls	r2, r3, #1
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	085b      	lsrs	r3, r3, #1
 800b42c:	441a      	add	r2, r3
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	fbb2 f3f3 	udiv	r3, r2, r3
 800b436:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b438:	6a3b      	ldr	r3, [r7, #32]
 800b43a:	2b0f      	cmp	r3, #15
 800b43c:	d916      	bls.n	800b46c <UART_SetConfig+0x508>
 800b43e:	6a3b      	ldr	r3, [r7, #32]
 800b440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b444:	d212      	bcs.n	800b46c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	b29b      	uxth	r3, r3
 800b44a:	f023 030f 	bic.w	r3, r3, #15
 800b44e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b450:	6a3b      	ldr	r3, [r7, #32]
 800b452:	085b      	lsrs	r3, r3, #1
 800b454:	b29b      	uxth	r3, r3
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	8bfb      	ldrh	r3, [r7, #30]
 800b45e:	4313      	orrs	r3, r2
 800b460:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	8bfa      	ldrh	r2, [r7, #30]
 800b468:	60da      	str	r2, [r3, #12]
 800b46a:	e062      	b.n	800b532 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b472:	e05e      	b.n	800b532 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b474:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b478:	2b08      	cmp	r3, #8
 800b47a:	d828      	bhi.n	800b4ce <UART_SetConfig+0x56a>
 800b47c:	a201      	add	r2, pc, #4	@ (adr r2, 800b484 <UART_SetConfig+0x520>)
 800b47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b482:	bf00      	nop
 800b484:	0800b4a9 	.word	0x0800b4a9
 800b488:	0800b4b1 	.word	0x0800b4b1
 800b48c:	0800b4b9 	.word	0x0800b4b9
 800b490:	0800b4cf 	.word	0x0800b4cf
 800b494:	0800b4bf 	.word	0x0800b4bf
 800b498:	0800b4cf 	.word	0x0800b4cf
 800b49c:	0800b4cf 	.word	0x0800b4cf
 800b4a0:	0800b4cf 	.word	0x0800b4cf
 800b4a4:	0800b4c7 	.word	0x0800b4c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4a8:	f7fc fe72 	bl	8008190 <HAL_RCC_GetPCLK1Freq>
 800b4ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4ae:	e014      	b.n	800b4da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4b0:	f7fc fe84 	bl	80081bc <HAL_RCC_GetPCLK2Freq>
 800b4b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4b6:	e010      	b.n	800b4da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4b8:	4b1a      	ldr	r3, [pc, #104]	@ (800b524 <UART_SetConfig+0x5c0>)
 800b4ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b4bc:	e00d      	b.n	800b4da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4be:	f7fc fdf9 	bl	80080b4 <HAL_RCC_GetSysClockFreq>
 800b4c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4c4:	e009      	b.n	800b4da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b4cc:	e005      	b.n	800b4da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b4d8:	bf00      	nop
    }

    if (pclk != 0U)
 800b4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d028      	beq.n	800b532 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e4:	4a10      	ldr	r2, [pc, #64]	@ (800b528 <UART_SetConfig+0x5c4>)
 800b4e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	085b      	lsrs	r3, r3, #1
 800b4f8:	441a      	add	r2, r3
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b502:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b504:	6a3b      	ldr	r3, [r7, #32]
 800b506:	2b0f      	cmp	r3, #15
 800b508:	d910      	bls.n	800b52c <UART_SetConfig+0x5c8>
 800b50a:	6a3b      	ldr	r3, [r7, #32]
 800b50c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b510:	d20c      	bcs.n	800b52c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b512:	6a3b      	ldr	r3, [r7, #32]
 800b514:	b29a      	uxth	r2, r3
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	60da      	str	r2, [r3, #12]
 800b51c:	e009      	b.n	800b532 <UART_SetConfig+0x5ce>
 800b51e:	bf00      	nop
 800b520:	40008000 	.word	0x40008000
 800b524:	00f42400 	.word	0x00f42400
 800b528:	080108c8 	.word	0x080108c8
      }
      else
      {
        ret = HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	2201      	movs	r2, #1
 800b536:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	2201      	movs	r2, #1
 800b53e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	2200      	movs	r2, #0
 800b546:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	2200      	movs	r2, #0
 800b54c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b54e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b552:	4618      	mov	r0, r3
 800b554:	3730      	adds	r7, #48	@ 0x30
 800b556:	46bd      	mov	sp, r7
 800b558:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b55c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b568:	f003 0308 	and.w	r3, r3, #8
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00a      	beq.n	800b586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	430a      	orrs	r2, r1
 800b584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00a      	beq.n	800b5a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ac:	f003 0302 	and.w	r3, r3, #2
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00a      	beq.n	800b5ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	430a      	orrs	r2, r1
 800b5c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ce:	f003 0304 	and.w	r3, r3, #4
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00a      	beq.n	800b5ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5f0:	f003 0310 	and.w	r3, r3, #16
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00a      	beq.n	800b60e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	430a      	orrs	r2, r1
 800b60c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b612:	f003 0320 	and.w	r3, r3, #32
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00a      	beq.n	800b630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	430a      	orrs	r2, r1
 800b62e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d01a      	beq.n	800b672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	430a      	orrs	r2, r1
 800b650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b65a:	d10a      	bne.n	800b672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	430a      	orrs	r2, r1
 800b670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00a      	beq.n	800b694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	430a      	orrs	r2, r1
 800b692:	605a      	str	r2, [r3, #4]
  }
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b098      	sub	sp, #96	@ 0x60
 800b6a4:	af02      	add	r7, sp, #8
 800b6a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6b0:	f7f9 faf4 	bl	8004c9c <HAL_GetTick>
 800b6b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 0308 	and.w	r3, r3, #8
 800b6c0:	2b08      	cmp	r3, #8
 800b6c2:	d12f      	bne.n	800b724 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f88e 	bl	800b7f4 <UART_WaitOnFlagUntilTimeout>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d022      	beq.n	800b724 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e6:	e853 3f00 	ldrex	r3, [r3]
 800b6ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b6ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b700:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b702:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b704:	e841 2300 	strex	r3, r2, [r1]
 800b708:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b70a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d1e6      	bne.n	800b6de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2220      	movs	r2, #32
 800b714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b720:	2303      	movs	r3, #3
 800b722:	e063      	b.n	800b7ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 0304 	and.w	r3, r3, #4
 800b72e:	2b04      	cmp	r3, #4
 800b730:	d149      	bne.n	800b7c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b732:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b73a:	2200      	movs	r2, #0
 800b73c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 f857 	bl	800b7f4 <UART_WaitOnFlagUntilTimeout>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d03c      	beq.n	800b7c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b754:	e853 3f00 	ldrex	r3, [r3]
 800b758:	623b      	str	r3, [r7, #32]
   return(result);
 800b75a:	6a3b      	ldr	r3, [r7, #32]
 800b75c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b760:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	461a      	mov	r2, r3
 800b768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b76a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b76c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b772:	e841 2300 	strex	r3, r2, [r1]
 800b776:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1e6      	bne.n	800b74c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3308      	adds	r3, #8
 800b784:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	e853 3f00 	ldrex	r3, [r3]
 800b78c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f023 0301 	bic.w	r3, r3, #1
 800b794:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	3308      	adds	r3, #8
 800b79c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b79e:	61fa      	str	r2, [r7, #28]
 800b7a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a2:	69b9      	ldr	r1, [r7, #24]
 800b7a4:	69fa      	ldr	r2, [r7, #28]
 800b7a6:	e841 2300 	strex	r3, r2, [r1]
 800b7aa:	617b      	str	r3, [r7, #20]
   return(result);
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1e5      	bne.n	800b77e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2220      	movs	r2, #32
 800b7b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	e012      	b.n	800b7ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2220      	movs	r2, #32
 800b7d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3758      	adds	r7, #88	@ 0x58
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	603b      	str	r3, [r7, #0]
 800b800:	4613      	mov	r3, r2
 800b802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b804:	e04f      	b.n	800b8a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b80c:	d04b      	beq.n	800b8a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b80e:	f7f9 fa45 	bl	8004c9c <HAL_GetTick>
 800b812:	4602      	mov	r2, r0
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	69ba      	ldr	r2, [r7, #24]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d302      	bcc.n	800b824 <UART_WaitOnFlagUntilTimeout+0x30>
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b824:	2303      	movs	r3, #3
 800b826:	e04e      	b.n	800b8c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0304 	and.w	r3, r3, #4
 800b832:	2b00      	cmp	r3, #0
 800b834:	d037      	beq.n	800b8a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	2b80      	cmp	r3, #128	@ 0x80
 800b83a:	d034      	beq.n	800b8a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	2b40      	cmp	r3, #64	@ 0x40
 800b840:	d031      	beq.n	800b8a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	69db      	ldr	r3, [r3, #28]
 800b848:	f003 0308 	and.w	r3, r3, #8
 800b84c:	2b08      	cmp	r3, #8
 800b84e:	d110      	bne.n	800b872 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2208      	movs	r2, #8
 800b856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f000 f95b 	bl	800bb14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2208      	movs	r2, #8
 800b862:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	e029      	b.n	800b8c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	69db      	ldr	r3, [r3, #28]
 800b878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b87c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b880:	d111      	bne.n	800b8a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b88a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f000 f941 	bl	800bb14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2220      	movs	r2, #32
 800b896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e00f      	b.n	800b8c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	69da      	ldr	r2, [r3, #28]
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	4013      	ands	r3, r2
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	bf0c      	ite	eq
 800b8b6:	2301      	moveq	r3, #1
 800b8b8:	2300      	movne	r3, #0
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	461a      	mov	r2, r3
 800b8be:	79fb      	ldrb	r3, [r7, #7]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d0a0      	beq.n	800b806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
	...

0800b8d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b0a3      	sub	sp, #140	@ 0x8c
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	88fa      	ldrh	r2, [r7, #6]
 800b8e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	88fa      	ldrh	r2, [r7, #6]
 800b8f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b902:	d10e      	bne.n	800b922 <UART_Start_Receive_IT+0x52>
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d105      	bne.n	800b918 <UART_Start_Receive_IT+0x48>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b912:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b916:	e02d      	b.n	800b974 <UART_Start_Receive_IT+0xa4>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	22ff      	movs	r2, #255	@ 0xff
 800b91c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b920:	e028      	b.n	800b974 <UART_Start_Receive_IT+0xa4>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d10d      	bne.n	800b946 <UART_Start_Receive_IT+0x76>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d104      	bne.n	800b93c <UART_Start_Receive_IT+0x6c>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	22ff      	movs	r2, #255	@ 0xff
 800b936:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b93a:	e01b      	b.n	800b974 <UART_Start_Receive_IT+0xa4>
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	227f      	movs	r2, #127	@ 0x7f
 800b940:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b944:	e016      	b.n	800b974 <UART_Start_Receive_IT+0xa4>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b94e:	d10d      	bne.n	800b96c <UART_Start_Receive_IT+0x9c>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d104      	bne.n	800b962 <UART_Start_Receive_IT+0x92>
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	227f      	movs	r2, #127	@ 0x7f
 800b95c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b960:	e008      	b.n	800b974 <UART_Start_Receive_IT+0xa4>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	223f      	movs	r2, #63	@ 0x3f
 800b966:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b96a:	e003      	b.n	800b974 <UART_Start_Receive_IT+0xa4>
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2200      	movs	r2, #0
 800b970:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2222      	movs	r2, #34	@ 0x22
 800b980:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	3308      	adds	r3, #8
 800b98a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b98e:	e853 3f00 	ldrex	r3, [r3]
 800b992:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b994:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b996:	f043 0301 	orr.w	r3, r3, #1
 800b99a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3308      	adds	r3, #8
 800b9a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b9a8:	673a      	str	r2, [r7, #112]	@ 0x70
 800b9aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ac:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b9ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b9b0:	e841 2300 	strex	r3, r2, [r1]
 800b9b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b9b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1e3      	bne.n	800b984 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9c4:	d14f      	bne.n	800ba66 <UART_Start_Receive_IT+0x196>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b9cc:	88fa      	ldrh	r2, [r7, #6]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d349      	bcc.n	800ba66 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9da:	d107      	bne.n	800b9ec <UART_Start_Receive_IT+0x11c>
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d103      	bne.n	800b9ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	4a47      	ldr	r2, [pc, #284]	@ (800bb04 <UART_Start_Receive_IT+0x234>)
 800b9e8:	675a      	str	r2, [r3, #116]	@ 0x74
 800b9ea:	e002      	b.n	800b9f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4a46      	ldr	r2, [pc, #280]	@ (800bb08 <UART_Start_Receive_IT+0x238>)
 800b9f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d01a      	beq.n	800ba30 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba02:	e853 3f00 	ldrex	r3, [r3]
 800ba06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ba1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba1e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba20:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ba22:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ba24:	e841 2300 	strex	r3, r2, [r1]
 800ba28:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ba2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1e4      	bne.n	800b9fa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3308      	adds	r3, #8
 800ba36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba3a:	e853 3f00 	ldrex	r3, [r3]
 800ba3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	3308      	adds	r3, #8
 800ba4e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ba50:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ba52:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba54:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ba56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba58:	e841 2300 	strex	r3, r2, [r1]
 800ba5c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ba5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1e5      	bne.n	800ba30 <UART_Start_Receive_IT+0x160>
 800ba64:	e046      	b.n	800baf4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba6e:	d107      	bne.n	800ba80 <UART_Start_Receive_IT+0x1b0>
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d103      	bne.n	800ba80 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4a24      	ldr	r2, [pc, #144]	@ (800bb0c <UART_Start_Receive_IT+0x23c>)
 800ba7c:	675a      	str	r2, [r3, #116]	@ 0x74
 800ba7e:	e002      	b.n	800ba86 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	4a23      	ldr	r2, [pc, #140]	@ (800bb10 <UART_Start_Receive_IT+0x240>)
 800ba84:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d019      	beq.n	800bac2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba96:	e853 3f00 	ldrex	r3, [r3]
 800ba9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800baa2:	677b      	str	r3, [r7, #116]	@ 0x74
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	461a      	mov	r2, r3
 800baaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800baac:	637b      	str	r3, [r7, #52]	@ 0x34
 800baae:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bab2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bab4:	e841 2300 	strex	r3, r2, [r1]
 800bab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800baba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1e6      	bne.n	800ba8e <UART_Start_Receive_IT+0x1be>
 800bac0:	e018      	b.n	800baf4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	e853 3f00 	ldrex	r3, [r3]
 800bace:	613b      	str	r3, [r7, #16]
   return(result);
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	f043 0320 	orr.w	r3, r3, #32
 800bad6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	461a      	mov	r2, r3
 800bade:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bae0:	623b      	str	r3, [r7, #32]
 800bae2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae4:	69f9      	ldr	r1, [r7, #28]
 800bae6:	6a3a      	ldr	r2, [r7, #32]
 800bae8:	e841 2300 	strex	r3, r2, [r1]
 800baec:	61bb      	str	r3, [r7, #24]
   return(result);
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d1e6      	bne.n	800bac2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	378c      	adds	r7, #140	@ 0x8c
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	0800c339 	.word	0x0800c339
 800bb08:	0800bfd5 	.word	0x0800bfd5
 800bb0c:	0800be1d 	.word	0x0800be1d
 800bb10:	0800bc65 	.word	0x0800bc65

0800bb14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b095      	sub	sp, #84	@ 0x54
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb24:	e853 3f00 	ldrex	r3, [r3]
 800bb28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	461a      	mov	r2, r3
 800bb38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb3a:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bb40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb42:	e841 2300 	strex	r3, r2, [r1]
 800bb46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1e6      	bne.n	800bb1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	3308      	adds	r3, #8
 800bb54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb56:	6a3b      	ldr	r3, [r7, #32]
 800bb58:	e853 3f00 	ldrex	r3, [r3]
 800bb5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb64:	f023 0301 	bic.w	r3, r3, #1
 800bb68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	3308      	adds	r3, #8
 800bb70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb7a:	e841 2300 	strex	r3, r2, [r1]
 800bb7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1e3      	bne.n	800bb4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d118      	bne.n	800bbc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	e853 3f00 	ldrex	r3, [r3]
 800bb9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	f023 0310 	bic.w	r3, r3, #16
 800bba2:	647b      	str	r3, [r7, #68]	@ 0x44
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	461a      	mov	r2, r3
 800bbaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbac:	61bb      	str	r3, [r7, #24]
 800bbae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb0:	6979      	ldr	r1, [r7, #20]
 800bbb2:	69ba      	ldr	r2, [r7, #24]
 800bbb4:	e841 2300 	strex	r3, r2, [r1]
 800bbb8:	613b      	str	r3, [r7, #16]
   return(result);
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1e6      	bne.n	800bb8e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2220      	movs	r2, #32
 800bbc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bbd4:	bf00      	nop
 800bbd6:	3754      	adds	r7, #84	@ 0x54
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f7ff f99a 	bl	800af38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc04:	bf00      	nop
 800bc06:	3710      	adds	r7, #16
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b088      	sub	sp, #32
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	e853 3f00 	ldrex	r3, [r3]
 800bc20:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc28:	61fb      	str	r3, [r7, #28]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	61bb      	str	r3, [r7, #24]
 800bc34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc36:	6979      	ldr	r1, [r7, #20]
 800bc38:	69ba      	ldr	r2, [r7, #24]
 800bc3a:	e841 2300 	strex	r3, r2, [r1]
 800bc3e:	613b      	str	r3, [r7, #16]
   return(result);
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1e6      	bne.n	800bc14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2220      	movs	r2, #32
 800bc4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7ff f965 	bl	800af24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc5a:	bf00      	nop
 800bc5c:	3720      	adds	r7, #32
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
	...

0800bc64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b09c      	sub	sp, #112	@ 0x70
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc72:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc7c:	2b22      	cmp	r3, #34	@ 0x22
 800bc7e:	f040 80be 	bne.w	800bdfe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bc90:	b2d9      	uxtb	r1, r3
 800bc92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc9c:	400a      	ands	r2, r1
 800bc9e:	b2d2      	uxtb	r2, r2
 800bca0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bca6:	1c5a      	adds	r2, r3, #1
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f040 80a1 	bne.w	800be0e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcd4:	e853 3f00 	ldrex	r3, [r3]
 800bcd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bcda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	461a      	mov	r2, r3
 800bce8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bcea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bcf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bcf2:	e841 2300 	strex	r3, r2, [r1]
 800bcf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bcf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1e6      	bne.n	800bccc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	3308      	adds	r3, #8
 800bd04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd08:	e853 3f00 	ldrex	r3, [r3]
 800bd0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd10:	f023 0301 	bic.w	r3, r3, #1
 800bd14:	667b      	str	r3, [r7, #100]	@ 0x64
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	3308      	adds	r3, #8
 800bd1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bd1e:	647a      	str	r2, [r7, #68]	@ 0x44
 800bd20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd26:	e841 2300 	strex	r3, r2, [r1]
 800bd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1e5      	bne.n	800bcfe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2220      	movs	r2, #32
 800bd36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a33      	ldr	r2, [pc, #204]	@ (800be18 <UART_RxISR_8BIT+0x1b4>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d01f      	beq.n	800bd90 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d018      	beq.n	800bd90 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd66:	e853 3f00 	ldrex	r3, [r3]
 800bd6a:	623b      	str	r3, [r7, #32]
   return(result);
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bd72:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	461a      	mov	r2, r3
 800bd7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd7c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd84:	e841 2300 	strex	r3, r2, [r1]
 800bd88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d1e6      	bne.n	800bd5e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d12e      	bne.n	800bdf6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	e853 3f00 	ldrex	r3, [r3]
 800bdaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f023 0310 	bic.w	r3, r3, #16
 800bdb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdbc:	61fb      	str	r3, [r7, #28]
 800bdbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc0:	69b9      	ldr	r1, [r7, #24]
 800bdc2:	69fa      	ldr	r2, [r7, #28]
 800bdc4:	e841 2300 	strex	r3, r2, [r1]
 800bdc8:	617b      	str	r3, [r7, #20]
   return(result);
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1e6      	bne.n	800bd9e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	69db      	ldr	r3, [r3, #28]
 800bdd6:	f003 0310 	and.w	r3, r3, #16
 800bdda:	2b10      	cmp	r3, #16
 800bddc:	d103      	bne.n	800bde6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2210      	movs	r2, #16
 800bde4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7ff f8ac 	bl	800af4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bdf4:	e00b      	b.n	800be0e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7f5 fa40 	bl	800127c <HAL_UART_RxCpltCallback>
}
 800bdfc:	e007      	b.n	800be0e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	699a      	ldr	r2, [r3, #24]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f042 0208 	orr.w	r2, r2, #8
 800be0c:	619a      	str	r2, [r3, #24]
}
 800be0e:	bf00      	nop
 800be10:	3770      	adds	r7, #112	@ 0x70
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	40008000 	.word	0x40008000

0800be1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b09c      	sub	sp, #112	@ 0x70
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800be2a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be34:	2b22      	cmp	r3, #34	@ 0x22
 800be36:	f040 80be 	bne.w	800bfb6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be48:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800be4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800be4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800be52:	4013      	ands	r3, r2
 800be54:	b29a      	uxth	r2, r3
 800be56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be5e:	1c9a      	adds	r2, r3, #2
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	3b01      	subs	r3, #1
 800be6e:	b29a      	uxth	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f040 80a1 	bne.w	800bfc6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be8c:	e853 3f00 	ldrex	r3, [r3]
 800be90:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800be92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be98:	667b      	str	r3, [r7, #100]	@ 0x64
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	461a      	mov	r2, r3
 800bea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bea2:	657b      	str	r3, [r7, #84]	@ 0x54
 800bea4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bea8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800beaa:	e841 2300 	strex	r3, r2, [r1]
 800beae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800beb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1e6      	bne.n	800be84 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	3308      	adds	r3, #8
 800bebc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bec0:	e853 3f00 	ldrex	r3, [r3]
 800bec4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec8:	f023 0301 	bic.w	r3, r3, #1
 800becc:	663b      	str	r3, [r7, #96]	@ 0x60
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3308      	adds	r3, #8
 800bed4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bed6:	643a      	str	r2, [r7, #64]	@ 0x40
 800bed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bedc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bede:	e841 2300 	strex	r3, r2, [r1]
 800bee2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1e5      	bne.n	800beb6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2220      	movs	r2, #32
 800beee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a33      	ldr	r2, [pc, #204]	@ (800bfd0 <UART_RxISR_16BIT+0x1b4>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d01f      	beq.n	800bf48 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d018      	beq.n	800bf48 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1c:	6a3b      	ldr	r3, [r7, #32]
 800bf1e:	e853 3f00 	ldrex	r3, [r3]
 800bf22:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bf2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	461a      	mov	r2, r3
 800bf32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf36:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf3c:	e841 2300 	strex	r3, r2, [r1]
 800bf40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1e6      	bne.n	800bf16 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d12e      	bne.n	800bfae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	e853 3f00 	ldrex	r3, [r3]
 800bf62:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	f023 0310 	bic.w	r3, r3, #16
 800bf6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	461a      	mov	r2, r3
 800bf72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf74:	61bb      	str	r3, [r7, #24]
 800bf76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf78:	6979      	ldr	r1, [r7, #20]
 800bf7a:	69ba      	ldr	r2, [r7, #24]
 800bf7c:	e841 2300 	strex	r3, r2, [r1]
 800bf80:	613b      	str	r3, [r7, #16]
   return(result);
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1e6      	bne.n	800bf56 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	69db      	ldr	r3, [r3, #28]
 800bf8e:	f003 0310 	and.w	r3, r3, #16
 800bf92:	2b10      	cmp	r3, #16
 800bf94:	d103      	bne.n	800bf9e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2210      	movs	r2, #16
 800bf9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7fe ffd0 	bl	800af4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bfac:	e00b      	b.n	800bfc6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7f5 f964 	bl	800127c <HAL_UART_RxCpltCallback>
}
 800bfb4:	e007      	b.n	800bfc6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	699a      	ldr	r2, [r3, #24]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f042 0208 	orr.w	r2, r2, #8
 800bfc4:	619a      	str	r2, [r3, #24]
}
 800bfc6:	bf00      	nop
 800bfc8:	3770      	adds	r7, #112	@ 0x70
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	40008000 	.word	0x40008000

0800bfd4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b0ac      	sub	sp, #176	@ 0xb0
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bfe2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	69db      	ldr	r3, [r3, #28]
 800bfec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c00a:	2b22      	cmp	r3, #34	@ 0x22
 800c00c:	f040 8183 	bne.w	800c316 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c016:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c01a:	e126      	b.n	800c26a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c022:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c026:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c02a:	b2d9      	uxtb	r1, r3
 800c02c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c030:	b2da      	uxtb	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c036:	400a      	ands	r2, r1
 800c038:	b2d2      	uxtb	r2, r2
 800c03a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	3b01      	subs	r3, #1
 800c050:	b29a      	uxth	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	69db      	ldr	r3, [r3, #28]
 800c05e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c066:	f003 0307 	and.w	r3, r3, #7
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d053      	beq.n	800c116 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c06e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	2b00      	cmp	r3, #0
 800c078:	d011      	beq.n	800c09e <UART_RxISR_8BIT_FIFOEN+0xca>
 800c07a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c07e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00b      	beq.n	800c09e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2201      	movs	r2, #1
 800c08c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c094:	f043 0201 	orr.w	r2, r3, #1
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c09e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0a2:	f003 0302 	and.w	r3, r3, #2
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d011      	beq.n	800c0ce <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c0aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c0ae:	f003 0301 	and.w	r3, r3, #1
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00b      	beq.n	800c0ce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2202      	movs	r2, #2
 800c0bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0c4:	f043 0204 	orr.w	r2, r3, #4
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0d2:	f003 0304 	and.w	r3, r3, #4
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d011      	beq.n	800c0fe <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c0da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00b      	beq.n	800c0fe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2204      	movs	r2, #4
 800c0ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0f4:	f043 0202 	orr.w	r2, r3, #2
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c104:	2b00      	cmp	r3, #0
 800c106:	d006      	beq.n	800c116 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7fe ff15 	bl	800af38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	2b00      	cmp	r3, #0
 800c120:	f040 80a3 	bne.w	800c26a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c12c:	e853 3f00 	ldrex	r3, [r3]
 800c130:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	461a      	mov	r2, r3
 800c142:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c146:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c148:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c14c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c14e:	e841 2300 	strex	r3, r2, [r1]
 800c152:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c154:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1e4      	bne.n	800c124 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	3308      	adds	r3, #8
 800c160:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c164:	e853 3f00 	ldrex	r3, [r3]
 800c168:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c16a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c16c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c170:	f023 0301 	bic.w	r3, r3, #1
 800c174:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3308      	adds	r3, #8
 800c17e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c182:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c184:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c186:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c188:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c18a:	e841 2300 	strex	r3, r2, [r1]
 800c18e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c190:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1e1      	bne.n	800c15a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2220      	movs	r2, #32
 800c19a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a60      	ldr	r2, [pc, #384]	@ (800c330 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d021      	beq.n	800c1f8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d01a      	beq.n	800c1f8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1ca:	e853 3f00 	ldrex	r3, [r3]
 800c1ce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c1d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c1d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c1e4:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1e6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c1ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c1ec:	e841 2300 	strex	r3, r2, [r1]
 800c1f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c1f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1e4      	bne.n	800c1c2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d130      	bne.n	800c262 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c20e:	e853 3f00 	ldrex	r3, [r3]
 800c212:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c216:	f023 0310 	bic.w	r3, r3, #16
 800c21a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	461a      	mov	r2, r3
 800c224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c228:	643b      	str	r3, [r7, #64]	@ 0x40
 800c22a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c22e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c230:	e841 2300 	strex	r3, r2, [r1]
 800c234:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1e4      	bne.n	800c206 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	69db      	ldr	r3, [r3, #28]
 800c242:	f003 0310 	and.w	r3, r3, #16
 800c246:	2b10      	cmp	r3, #16
 800c248:	d103      	bne.n	800c252 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2210      	movs	r2, #16
 800c250:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c258:	4619      	mov	r1, r3
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f7fe fe76 	bl	800af4c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c260:	e00e      	b.n	800c280 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7f5 f80a 	bl	800127c <HAL_UART_RxCpltCallback>
        break;
 800c268:	e00a      	b.n	800c280 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c26a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d006      	beq.n	800c280 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800c272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c276:	f003 0320 	and.w	r3, r3, #32
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f47f aece 	bne.w	800c01c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c286:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c28a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d049      	beq.n	800c326 <UART_RxISR_8BIT_FIFOEN+0x352>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c298:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d242      	bcs.n	800c326 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3308      	adds	r3, #8
 800c2a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a8:	6a3b      	ldr	r3, [r7, #32]
 800c2aa:	e853 3f00 	ldrex	r3, [r3]
 800c2ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	3308      	adds	r3, #8
 800c2c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c2c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c2c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2cc:	e841 2300 	strex	r3, r2, [r1]
 800c2d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1e3      	bne.n	800c2a0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a16      	ldr	r2, [pc, #88]	@ (800c334 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800c2dc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	e853 3f00 	ldrex	r3, [r3]
 800c2ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	f043 0320 	orr.w	r3, r3, #32
 800c2f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c300:	61bb      	str	r3, [r7, #24]
 800c302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c304:	6979      	ldr	r1, [r7, #20]
 800c306:	69ba      	ldr	r2, [r7, #24]
 800c308:	e841 2300 	strex	r3, r2, [r1]
 800c30c:	613b      	str	r3, [r7, #16]
   return(result);
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d1e4      	bne.n	800c2de <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c314:	e007      	b.n	800c326 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	699a      	ldr	r2, [r3, #24]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f042 0208 	orr.w	r2, r2, #8
 800c324:	619a      	str	r2, [r3, #24]
}
 800c326:	bf00      	nop
 800c328:	37b0      	adds	r7, #176	@ 0xb0
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	40008000 	.word	0x40008000
 800c334:	0800bc65 	.word	0x0800bc65

0800c338 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b0ae      	sub	sp, #184	@ 0xb8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c346:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	69db      	ldr	r3, [r3, #28]
 800c350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c36e:	2b22      	cmp	r3, #34	@ 0x22
 800c370:	f040 8187 	bne.w	800c682 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c37a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c37e:	e12a      	b.n	800c5d6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c386:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c38e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c392:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c396:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c39a:	4013      	ands	r3, r2
 800c39c:	b29a      	uxth	r2, r3
 800c39e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c3a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3a8:	1c9a      	adds	r2, r3, #2
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	69db      	ldr	r3, [r3, #28]
 800c3c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c3ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c3ce:	f003 0307 	and.w	r3, r3, #7
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d053      	beq.n	800c47e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c3d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c3da:	f003 0301 	and.w	r3, r3, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d011      	beq.n	800c406 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c3e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00b      	beq.n	800c406 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3fc:	f043 0201 	orr.w	r2, r3, #1
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c40a:	f003 0302 	and.w	r3, r3, #2
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d011      	beq.n	800c436 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c412:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c416:	f003 0301 	and.w	r3, r3, #1
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00b      	beq.n	800c436 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2202      	movs	r2, #2
 800c424:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c42c:	f043 0204 	orr.w	r2, r3, #4
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c43a:	f003 0304 	and.w	r3, r3, #4
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d011      	beq.n	800c466 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c442:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00b      	beq.n	800c466 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2204      	movs	r2, #4
 800c454:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c45c:	f043 0202 	orr.w	r2, r3, #2
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d006      	beq.n	800c47e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f7fe fd61 	bl	800af38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c484:	b29b      	uxth	r3, r3
 800c486:	2b00      	cmp	r3, #0
 800c488:	f040 80a5 	bne.w	800c5d6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c494:	e853 3f00 	ldrex	r3, [r3]
 800c498:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c49a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c49c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c4ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c4b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c4b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c4ba:	e841 2300 	strex	r3, r2, [r1]
 800c4be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c4c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1e2      	bne.n	800c48c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	3308      	adds	r3, #8
 800c4cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c4d0:	e853 3f00 	ldrex	r3, [r3]
 800c4d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c4d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c4dc:	f023 0301 	bic.w	r3, r3, #1
 800c4e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	3308      	adds	r3, #8
 800c4ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c4ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c4f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c4f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c4f6:	e841 2300 	strex	r3, r2, [r1]
 800c4fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c4fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1e1      	bne.n	800c4c6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2220      	movs	r2, #32
 800c506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a60      	ldr	r2, [pc, #384]	@ (800c69c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d021      	beq.n	800c564 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d01a      	beq.n	800c564 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c536:	e853 3f00 	ldrex	r3, [r3]
 800c53a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c53c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c53e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c542:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c550:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c552:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c554:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c556:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c558:	e841 2300 	strex	r3, r2, [r1]
 800c55c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c55e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1e4      	bne.n	800c52e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d130      	bne.n	800c5ce <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c57a:	e853 3f00 	ldrex	r3, [r3]
 800c57e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c582:	f023 0310 	bic.w	r3, r3, #16
 800c586:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	461a      	mov	r2, r3
 800c590:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c594:	647b      	str	r3, [r7, #68]	@ 0x44
 800c596:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c59a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c59c:	e841 2300 	strex	r3, r2, [r1]
 800c5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c5a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d1e4      	bne.n	800c572 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	69db      	ldr	r3, [r3, #28]
 800c5ae:	f003 0310 	and.w	r3, r3, #16
 800c5b2:	2b10      	cmp	r3, #16
 800c5b4:	d103      	bne.n	800c5be <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2210      	movs	r2, #16
 800c5bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f7fe fcc0 	bl	800af4c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c5cc:	e00e      	b.n	800c5ec <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f7f4 fe54 	bl	800127c <HAL_UART_RxCpltCallback>
        break;
 800c5d4:	e00a      	b.n	800c5ec <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c5d6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d006      	beq.n	800c5ec <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800c5de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c5e2:	f003 0320 	and.w	r3, r3, #32
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f47f aeca 	bne.w	800c380 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c5f2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c5f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d049      	beq.n	800c692 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c604:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c608:	429a      	cmp	r2, r3
 800c60a:	d242      	bcs.n	800c692 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	3308      	adds	r3, #8
 800c612:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c616:	e853 3f00 	ldrex	r3, [r3]
 800c61a:	623b      	str	r3, [r7, #32]
   return(result);
 800c61c:	6a3b      	ldr	r3, [r7, #32]
 800c61e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c622:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3308      	adds	r3, #8
 800c62c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c630:	633a      	str	r2, [r7, #48]	@ 0x30
 800c632:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c634:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c638:	e841 2300 	strex	r3, r2, [r1]
 800c63c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c640:	2b00      	cmp	r3, #0
 800c642:	d1e3      	bne.n	800c60c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a16      	ldr	r2, [pc, #88]	@ (800c6a0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800c648:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	e853 3f00 	ldrex	r3, [r3]
 800c656:	60fb      	str	r3, [r7, #12]
   return(result);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f043 0320 	orr.w	r3, r3, #32
 800c65e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	461a      	mov	r2, r3
 800c668:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c66c:	61fb      	str	r3, [r7, #28]
 800c66e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c670:	69b9      	ldr	r1, [r7, #24]
 800c672:	69fa      	ldr	r2, [r7, #28]
 800c674:	e841 2300 	strex	r3, r2, [r1]
 800c678:	617b      	str	r3, [r7, #20]
   return(result);
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1e4      	bne.n	800c64a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c680:	e007      	b.n	800c692 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	699a      	ldr	r2, [r3, #24]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f042 0208 	orr.w	r2, r2, #8
 800c690:	619a      	str	r2, [r3, #24]
}
 800c692:	bf00      	nop
 800c694:	37b8      	adds	r7, #184	@ 0xb8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	40008000 	.word	0x40008000
 800c6a0:	0800be1d 	.word	0x0800be1d

0800c6a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c6ac:	bf00      	nop
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d101      	bne.n	800c6f6 <HAL_UARTEx_DisableFifoMode+0x16>
 800c6f2:	2302      	movs	r3, #2
 800c6f4:	e027      	b.n	800c746 <HAL_UARTEx_DisableFifoMode+0x66>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2224      	movs	r2, #36	@ 0x24
 800c702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f022 0201 	bic.w	r2, r2, #1
 800c71c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c724:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2220      	movs	r2, #32
 800c738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr

0800c752 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b084      	sub	sp, #16
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
 800c75a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c762:	2b01      	cmp	r3, #1
 800c764:	d101      	bne.n	800c76a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c766:	2302      	movs	r3, #2
 800c768:	e02d      	b.n	800c7c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2201      	movs	r2, #1
 800c76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2224      	movs	r2, #36	@ 0x24
 800c776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f022 0201 	bic.w	r2, r2, #1
 800c790:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	430a      	orrs	r2, r1
 800c7a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 f850 	bl	800c84c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2220      	movs	r2, #32
 800c7b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b084      	sub	sp, #16
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d101      	bne.n	800c7e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c7e2:	2302      	movs	r3, #2
 800c7e4:	e02d      	b.n	800c842 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2224      	movs	r2, #36	@ 0x24
 800c7f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f022 0201 	bic.w	r2, r2, #1
 800c80c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	683a      	ldr	r2, [r7, #0]
 800c81e:	430a      	orrs	r2, r1
 800c820:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 f812 	bl	800c84c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2220      	movs	r2, #32
 800c834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
	...

0800c84c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d108      	bne.n	800c86e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c86c:	e031      	b.n	800c8d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c86e:	2308      	movs	r3, #8
 800c870:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c872:	2308      	movs	r3, #8
 800c874:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	689b      	ldr	r3, [r3, #8]
 800c87c:	0e5b      	lsrs	r3, r3, #25
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	f003 0307 	and.w	r3, r3, #7
 800c884:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	0f5b      	lsrs	r3, r3, #29
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	f003 0307 	and.w	r3, r3, #7
 800c894:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c896:	7bbb      	ldrb	r3, [r7, #14]
 800c898:	7b3a      	ldrb	r2, [r7, #12]
 800c89a:	4911      	ldr	r1, [pc, #68]	@ (800c8e0 <UARTEx_SetNbDataToProcess+0x94>)
 800c89c:	5c8a      	ldrb	r2, [r1, r2]
 800c89e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8a2:	7b3a      	ldrb	r2, [r7, #12]
 800c8a4:	490f      	ldr	r1, [pc, #60]	@ (800c8e4 <UARTEx_SetNbDataToProcess+0x98>)
 800c8a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8ac:	b29a      	uxth	r2, r3
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
 800c8b6:	7b7a      	ldrb	r2, [r7, #13]
 800c8b8:	4909      	ldr	r1, [pc, #36]	@ (800c8e0 <UARTEx_SetNbDataToProcess+0x94>)
 800c8ba:	5c8a      	ldrb	r2, [r1, r2]
 800c8bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8c0:	7b7a      	ldrb	r2, [r7, #13]
 800c8c2:	4908      	ldr	r1, [pc, #32]	@ (800c8e4 <UARTEx_SetNbDataToProcess+0x98>)
 800c8c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8ca:	b29a      	uxth	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c8d2:	bf00      	nop
 800c8d4:	3714      	adds	r7, #20
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	080108e0 	.word	0x080108e0
 800c8e4:	080108e8 	.word	0x080108e8

0800c8e8 <atof>:
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	f000 be05 	b.w	800d4f8 <strtod>

0800c8ee <sulp>:
 800c8ee:	b570      	push	{r4, r5, r6, lr}
 800c8f0:	4604      	mov	r4, r0
 800c8f2:	460d      	mov	r5, r1
 800c8f4:	ec45 4b10 	vmov	d0, r4, r5
 800c8f8:	4616      	mov	r6, r2
 800c8fa:	f001 ff6d 	bl	800e7d8 <__ulp>
 800c8fe:	ec51 0b10 	vmov	r0, r1, d0
 800c902:	b17e      	cbz	r6, 800c924 <sulp+0x36>
 800c904:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c908:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	dd09      	ble.n	800c924 <sulp+0x36>
 800c910:	051b      	lsls	r3, r3, #20
 800c912:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c916:	2400      	movs	r4, #0
 800c918:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c91c:	4622      	mov	r2, r4
 800c91e:	462b      	mov	r3, r5
 800c920:	f7f3 fe92 	bl	8000648 <__aeabi_dmul>
 800c924:	ec41 0b10 	vmov	d0, r0, r1
 800c928:	bd70      	pop	{r4, r5, r6, pc}
 800c92a:	0000      	movs	r0, r0
 800c92c:	0000      	movs	r0, r0
	...

0800c930 <_strtod_l>:
 800c930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c934:	b09f      	sub	sp, #124	@ 0x7c
 800c936:	460c      	mov	r4, r1
 800c938:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c93a:	2200      	movs	r2, #0
 800c93c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c93e:	9005      	str	r0, [sp, #20]
 800c940:	f04f 0a00 	mov.w	sl, #0
 800c944:	f04f 0b00 	mov.w	fp, #0
 800c948:	460a      	mov	r2, r1
 800c94a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c94c:	7811      	ldrb	r1, [r2, #0]
 800c94e:	292b      	cmp	r1, #43	@ 0x2b
 800c950:	d04a      	beq.n	800c9e8 <_strtod_l+0xb8>
 800c952:	d838      	bhi.n	800c9c6 <_strtod_l+0x96>
 800c954:	290d      	cmp	r1, #13
 800c956:	d832      	bhi.n	800c9be <_strtod_l+0x8e>
 800c958:	2908      	cmp	r1, #8
 800c95a:	d832      	bhi.n	800c9c2 <_strtod_l+0x92>
 800c95c:	2900      	cmp	r1, #0
 800c95e:	d03b      	beq.n	800c9d8 <_strtod_l+0xa8>
 800c960:	2200      	movs	r2, #0
 800c962:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c964:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c966:	782a      	ldrb	r2, [r5, #0]
 800c968:	2a30      	cmp	r2, #48	@ 0x30
 800c96a:	f040 80b3 	bne.w	800cad4 <_strtod_l+0x1a4>
 800c96e:	786a      	ldrb	r2, [r5, #1]
 800c970:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c974:	2a58      	cmp	r2, #88	@ 0x58
 800c976:	d16e      	bne.n	800ca56 <_strtod_l+0x126>
 800c978:	9302      	str	r3, [sp, #8]
 800c97a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	4a8e      	ldr	r2, [pc, #568]	@ (800cbbc <_strtod_l+0x28c>)
 800c984:	9805      	ldr	r0, [sp, #20]
 800c986:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c988:	a919      	add	r1, sp, #100	@ 0x64
 800c98a:	f001 f81f 	bl	800d9cc <__gethex>
 800c98e:	f010 060f 	ands.w	r6, r0, #15
 800c992:	4604      	mov	r4, r0
 800c994:	d005      	beq.n	800c9a2 <_strtod_l+0x72>
 800c996:	2e06      	cmp	r6, #6
 800c998:	d128      	bne.n	800c9ec <_strtod_l+0xbc>
 800c99a:	3501      	adds	r5, #1
 800c99c:	2300      	movs	r3, #0
 800c99e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c9a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	f040 858e 	bne.w	800d4c6 <_strtod_l+0xb96>
 800c9aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9ac:	b1cb      	cbz	r3, 800c9e2 <_strtod_l+0xb2>
 800c9ae:	4652      	mov	r2, sl
 800c9b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c9b4:	ec43 2b10 	vmov	d0, r2, r3
 800c9b8:	b01f      	add	sp, #124	@ 0x7c
 800c9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9be:	2920      	cmp	r1, #32
 800c9c0:	d1ce      	bne.n	800c960 <_strtod_l+0x30>
 800c9c2:	3201      	adds	r2, #1
 800c9c4:	e7c1      	b.n	800c94a <_strtod_l+0x1a>
 800c9c6:	292d      	cmp	r1, #45	@ 0x2d
 800c9c8:	d1ca      	bne.n	800c960 <_strtod_l+0x30>
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c9ce:	1c51      	adds	r1, r2, #1
 800c9d0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c9d2:	7852      	ldrb	r2, [r2, #1]
 800c9d4:	2a00      	cmp	r2, #0
 800c9d6:	d1c5      	bne.n	800c964 <_strtod_l+0x34>
 800c9d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c9da:	9419      	str	r4, [sp, #100]	@ 0x64
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f040 8570 	bne.w	800d4c2 <_strtod_l+0xb92>
 800c9e2:	4652      	mov	r2, sl
 800c9e4:	465b      	mov	r3, fp
 800c9e6:	e7e5      	b.n	800c9b4 <_strtod_l+0x84>
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	e7ef      	b.n	800c9cc <_strtod_l+0x9c>
 800c9ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c9ee:	b13a      	cbz	r2, 800ca00 <_strtod_l+0xd0>
 800c9f0:	2135      	movs	r1, #53	@ 0x35
 800c9f2:	a81c      	add	r0, sp, #112	@ 0x70
 800c9f4:	f001 ffea 	bl	800e9cc <__copybits>
 800c9f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9fa:	9805      	ldr	r0, [sp, #20]
 800c9fc:	f001 fbb8 	bl	800e170 <_Bfree>
 800ca00:	3e01      	subs	r6, #1
 800ca02:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ca04:	2e04      	cmp	r6, #4
 800ca06:	d806      	bhi.n	800ca16 <_strtod_l+0xe6>
 800ca08:	e8df f006 	tbb	[pc, r6]
 800ca0c:	201d0314 	.word	0x201d0314
 800ca10:	14          	.byte	0x14
 800ca11:	00          	.byte	0x00
 800ca12:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ca16:	05e1      	lsls	r1, r4, #23
 800ca18:	bf48      	it	mi
 800ca1a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ca1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca22:	0d1b      	lsrs	r3, r3, #20
 800ca24:	051b      	lsls	r3, r3, #20
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1bb      	bne.n	800c9a2 <_strtod_l+0x72>
 800ca2a:	f000 fed7 	bl	800d7dc <__errno>
 800ca2e:	2322      	movs	r3, #34	@ 0x22
 800ca30:	6003      	str	r3, [r0, #0]
 800ca32:	e7b6      	b.n	800c9a2 <_strtod_l+0x72>
 800ca34:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ca38:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ca3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ca40:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ca44:	e7e7      	b.n	800ca16 <_strtod_l+0xe6>
 800ca46:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cbc4 <_strtod_l+0x294>
 800ca4a:	e7e4      	b.n	800ca16 <_strtod_l+0xe6>
 800ca4c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ca50:	f04f 3aff 	mov.w	sl, #4294967295
 800ca54:	e7df      	b.n	800ca16 <_strtod_l+0xe6>
 800ca56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca58:	1c5a      	adds	r2, r3, #1
 800ca5a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca5c:	785b      	ldrb	r3, [r3, #1]
 800ca5e:	2b30      	cmp	r3, #48	@ 0x30
 800ca60:	d0f9      	beq.n	800ca56 <_strtod_l+0x126>
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d09d      	beq.n	800c9a2 <_strtod_l+0x72>
 800ca66:	2301      	movs	r3, #1
 800ca68:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca6e:	2300      	movs	r3, #0
 800ca70:	9308      	str	r3, [sp, #32]
 800ca72:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca74:	461f      	mov	r7, r3
 800ca76:	220a      	movs	r2, #10
 800ca78:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ca7a:	7805      	ldrb	r5, [r0, #0]
 800ca7c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ca80:	b2d9      	uxtb	r1, r3
 800ca82:	2909      	cmp	r1, #9
 800ca84:	d928      	bls.n	800cad8 <_strtod_l+0x1a8>
 800ca86:	494e      	ldr	r1, [pc, #312]	@ (800cbc0 <_strtod_l+0x290>)
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f000 fe4e 	bl	800d72a <strncmp>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	d032      	beq.n	800caf8 <_strtod_l+0x1c8>
 800ca92:	2000      	movs	r0, #0
 800ca94:	462a      	mov	r2, r5
 800ca96:	4681      	mov	r9, r0
 800ca98:	463d      	mov	r5, r7
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2a65      	cmp	r2, #101	@ 0x65
 800ca9e:	d001      	beq.n	800caa4 <_strtod_l+0x174>
 800caa0:	2a45      	cmp	r2, #69	@ 0x45
 800caa2:	d114      	bne.n	800cace <_strtod_l+0x19e>
 800caa4:	b91d      	cbnz	r5, 800caae <_strtod_l+0x17e>
 800caa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800caa8:	4302      	orrs	r2, r0
 800caaa:	d095      	beq.n	800c9d8 <_strtod_l+0xa8>
 800caac:	2500      	movs	r5, #0
 800caae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cab0:	1c62      	adds	r2, r4, #1
 800cab2:	9219      	str	r2, [sp, #100]	@ 0x64
 800cab4:	7862      	ldrb	r2, [r4, #1]
 800cab6:	2a2b      	cmp	r2, #43	@ 0x2b
 800cab8:	d077      	beq.n	800cbaa <_strtod_l+0x27a>
 800caba:	2a2d      	cmp	r2, #45	@ 0x2d
 800cabc:	d07b      	beq.n	800cbb6 <_strtod_l+0x286>
 800cabe:	f04f 0c00 	mov.w	ip, #0
 800cac2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cac6:	2909      	cmp	r1, #9
 800cac8:	f240 8082 	bls.w	800cbd0 <_strtod_l+0x2a0>
 800cacc:	9419      	str	r4, [sp, #100]	@ 0x64
 800cace:	f04f 0800 	mov.w	r8, #0
 800cad2:	e0a2      	b.n	800cc1a <_strtod_l+0x2ea>
 800cad4:	2300      	movs	r3, #0
 800cad6:	e7c7      	b.n	800ca68 <_strtod_l+0x138>
 800cad8:	2f08      	cmp	r7, #8
 800cada:	bfd5      	itete	le
 800cadc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cade:	9908      	ldrgt	r1, [sp, #32]
 800cae0:	fb02 3301 	mlale	r3, r2, r1, r3
 800cae4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cae8:	f100 0001 	add.w	r0, r0, #1
 800caec:	bfd4      	ite	le
 800caee:	930a      	strle	r3, [sp, #40]	@ 0x28
 800caf0:	9308      	strgt	r3, [sp, #32]
 800caf2:	3701      	adds	r7, #1
 800caf4:	9019      	str	r0, [sp, #100]	@ 0x64
 800caf6:	e7bf      	b.n	800ca78 <_strtod_l+0x148>
 800caf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cafa:	1c5a      	adds	r2, r3, #1
 800cafc:	9219      	str	r2, [sp, #100]	@ 0x64
 800cafe:	785a      	ldrb	r2, [r3, #1]
 800cb00:	b37f      	cbz	r7, 800cb62 <_strtod_l+0x232>
 800cb02:	4681      	mov	r9, r0
 800cb04:	463d      	mov	r5, r7
 800cb06:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cb0a:	2b09      	cmp	r3, #9
 800cb0c:	d912      	bls.n	800cb34 <_strtod_l+0x204>
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e7c4      	b.n	800ca9c <_strtod_l+0x16c>
 800cb12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb18:	785a      	ldrb	r2, [r3, #1]
 800cb1a:	3001      	adds	r0, #1
 800cb1c:	2a30      	cmp	r2, #48	@ 0x30
 800cb1e:	d0f8      	beq.n	800cb12 <_strtod_l+0x1e2>
 800cb20:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cb24:	2b08      	cmp	r3, #8
 800cb26:	f200 84d3 	bhi.w	800d4d0 <_strtod_l+0xba0>
 800cb2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb2e:	4681      	mov	r9, r0
 800cb30:	2000      	movs	r0, #0
 800cb32:	4605      	mov	r5, r0
 800cb34:	3a30      	subs	r2, #48	@ 0x30
 800cb36:	f100 0301 	add.w	r3, r0, #1
 800cb3a:	d02a      	beq.n	800cb92 <_strtod_l+0x262>
 800cb3c:	4499      	add	r9, r3
 800cb3e:	eb00 0c05 	add.w	ip, r0, r5
 800cb42:	462b      	mov	r3, r5
 800cb44:	210a      	movs	r1, #10
 800cb46:	4563      	cmp	r3, ip
 800cb48:	d10d      	bne.n	800cb66 <_strtod_l+0x236>
 800cb4a:	1c69      	adds	r1, r5, #1
 800cb4c:	4401      	add	r1, r0
 800cb4e:	4428      	add	r0, r5
 800cb50:	2808      	cmp	r0, #8
 800cb52:	dc16      	bgt.n	800cb82 <_strtod_l+0x252>
 800cb54:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb56:	230a      	movs	r3, #10
 800cb58:	fb03 2300 	mla	r3, r3, r0, r2
 800cb5c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb5e:	2300      	movs	r3, #0
 800cb60:	e018      	b.n	800cb94 <_strtod_l+0x264>
 800cb62:	4638      	mov	r0, r7
 800cb64:	e7da      	b.n	800cb1c <_strtod_l+0x1ec>
 800cb66:	2b08      	cmp	r3, #8
 800cb68:	f103 0301 	add.w	r3, r3, #1
 800cb6c:	dc03      	bgt.n	800cb76 <_strtod_l+0x246>
 800cb6e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cb70:	434e      	muls	r6, r1
 800cb72:	960a      	str	r6, [sp, #40]	@ 0x28
 800cb74:	e7e7      	b.n	800cb46 <_strtod_l+0x216>
 800cb76:	2b10      	cmp	r3, #16
 800cb78:	bfde      	ittt	le
 800cb7a:	9e08      	ldrle	r6, [sp, #32]
 800cb7c:	434e      	mulle	r6, r1
 800cb7e:	9608      	strle	r6, [sp, #32]
 800cb80:	e7e1      	b.n	800cb46 <_strtod_l+0x216>
 800cb82:	280f      	cmp	r0, #15
 800cb84:	dceb      	bgt.n	800cb5e <_strtod_l+0x22e>
 800cb86:	9808      	ldr	r0, [sp, #32]
 800cb88:	230a      	movs	r3, #10
 800cb8a:	fb03 2300 	mla	r3, r3, r0, r2
 800cb8e:	9308      	str	r3, [sp, #32]
 800cb90:	e7e5      	b.n	800cb5e <_strtod_l+0x22e>
 800cb92:	4629      	mov	r1, r5
 800cb94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb96:	1c50      	adds	r0, r2, #1
 800cb98:	9019      	str	r0, [sp, #100]	@ 0x64
 800cb9a:	7852      	ldrb	r2, [r2, #1]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	460d      	mov	r5, r1
 800cba0:	e7b1      	b.n	800cb06 <_strtod_l+0x1d6>
 800cba2:	f04f 0900 	mov.w	r9, #0
 800cba6:	2301      	movs	r3, #1
 800cba8:	e77d      	b.n	800caa6 <_strtod_l+0x176>
 800cbaa:	f04f 0c00 	mov.w	ip, #0
 800cbae:	1ca2      	adds	r2, r4, #2
 800cbb0:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbb2:	78a2      	ldrb	r2, [r4, #2]
 800cbb4:	e785      	b.n	800cac2 <_strtod_l+0x192>
 800cbb6:	f04f 0c01 	mov.w	ip, #1
 800cbba:	e7f8      	b.n	800cbae <_strtod_l+0x27e>
 800cbbc:	08010914 	.word	0x08010914
 800cbc0:	080108f0 	.word	0x080108f0
 800cbc4:	7ff00000 	.word	0x7ff00000
 800cbc8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbca:	1c51      	adds	r1, r2, #1
 800cbcc:	9119      	str	r1, [sp, #100]	@ 0x64
 800cbce:	7852      	ldrb	r2, [r2, #1]
 800cbd0:	2a30      	cmp	r2, #48	@ 0x30
 800cbd2:	d0f9      	beq.n	800cbc8 <_strtod_l+0x298>
 800cbd4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cbd8:	2908      	cmp	r1, #8
 800cbda:	f63f af78 	bhi.w	800cace <_strtod_l+0x19e>
 800cbde:	3a30      	subs	r2, #48	@ 0x30
 800cbe0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cbe2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbe4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cbe6:	f04f 080a 	mov.w	r8, #10
 800cbea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbec:	1c56      	adds	r6, r2, #1
 800cbee:	9619      	str	r6, [sp, #100]	@ 0x64
 800cbf0:	7852      	ldrb	r2, [r2, #1]
 800cbf2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cbf6:	f1be 0f09 	cmp.w	lr, #9
 800cbfa:	d939      	bls.n	800cc70 <_strtod_l+0x340>
 800cbfc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cbfe:	1a76      	subs	r6, r6, r1
 800cc00:	2e08      	cmp	r6, #8
 800cc02:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cc06:	dc03      	bgt.n	800cc10 <_strtod_l+0x2e0>
 800cc08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cc0a:	4588      	cmp	r8, r1
 800cc0c:	bfa8      	it	ge
 800cc0e:	4688      	movge	r8, r1
 800cc10:	f1bc 0f00 	cmp.w	ip, #0
 800cc14:	d001      	beq.n	800cc1a <_strtod_l+0x2ea>
 800cc16:	f1c8 0800 	rsb	r8, r8, #0
 800cc1a:	2d00      	cmp	r5, #0
 800cc1c:	d14e      	bne.n	800ccbc <_strtod_l+0x38c>
 800cc1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc20:	4308      	orrs	r0, r1
 800cc22:	f47f aebe 	bne.w	800c9a2 <_strtod_l+0x72>
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f47f aed6 	bne.w	800c9d8 <_strtod_l+0xa8>
 800cc2c:	2a69      	cmp	r2, #105	@ 0x69
 800cc2e:	d028      	beq.n	800cc82 <_strtod_l+0x352>
 800cc30:	dc25      	bgt.n	800cc7e <_strtod_l+0x34e>
 800cc32:	2a49      	cmp	r2, #73	@ 0x49
 800cc34:	d025      	beq.n	800cc82 <_strtod_l+0x352>
 800cc36:	2a4e      	cmp	r2, #78	@ 0x4e
 800cc38:	f47f aece 	bne.w	800c9d8 <_strtod_l+0xa8>
 800cc3c:	499b      	ldr	r1, [pc, #620]	@ (800ceac <_strtod_l+0x57c>)
 800cc3e:	a819      	add	r0, sp, #100	@ 0x64
 800cc40:	f001 f8e6 	bl	800de10 <__match>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	f43f aec7 	beq.w	800c9d8 <_strtod_l+0xa8>
 800cc4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	2b28      	cmp	r3, #40	@ 0x28
 800cc50:	d12e      	bne.n	800ccb0 <_strtod_l+0x380>
 800cc52:	4997      	ldr	r1, [pc, #604]	@ (800ceb0 <_strtod_l+0x580>)
 800cc54:	aa1c      	add	r2, sp, #112	@ 0x70
 800cc56:	a819      	add	r0, sp, #100	@ 0x64
 800cc58:	f001 f8ee 	bl	800de38 <__hexnan>
 800cc5c:	2805      	cmp	r0, #5
 800cc5e:	d127      	bne.n	800ccb0 <_strtod_l+0x380>
 800cc60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cc62:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cc66:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cc6a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cc6e:	e698      	b.n	800c9a2 <_strtod_l+0x72>
 800cc70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cc72:	fb08 2101 	mla	r1, r8, r1, r2
 800cc76:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cc7a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc7c:	e7b5      	b.n	800cbea <_strtod_l+0x2ba>
 800cc7e:	2a6e      	cmp	r2, #110	@ 0x6e
 800cc80:	e7da      	b.n	800cc38 <_strtod_l+0x308>
 800cc82:	498c      	ldr	r1, [pc, #560]	@ (800ceb4 <_strtod_l+0x584>)
 800cc84:	a819      	add	r0, sp, #100	@ 0x64
 800cc86:	f001 f8c3 	bl	800de10 <__match>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	f43f aea4 	beq.w	800c9d8 <_strtod_l+0xa8>
 800cc90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc92:	4989      	ldr	r1, [pc, #548]	@ (800ceb8 <_strtod_l+0x588>)
 800cc94:	3b01      	subs	r3, #1
 800cc96:	a819      	add	r0, sp, #100	@ 0x64
 800cc98:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc9a:	f001 f8b9 	bl	800de10 <__match>
 800cc9e:	b910      	cbnz	r0, 800cca6 <_strtod_l+0x376>
 800cca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cca2:	3301      	adds	r3, #1
 800cca4:	9319      	str	r3, [sp, #100]	@ 0x64
 800cca6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cec8 <_strtod_l+0x598>
 800ccaa:	f04f 0a00 	mov.w	sl, #0
 800ccae:	e678      	b.n	800c9a2 <_strtod_l+0x72>
 800ccb0:	4882      	ldr	r0, [pc, #520]	@ (800cebc <_strtod_l+0x58c>)
 800ccb2:	f000 fdd1 	bl	800d858 <nan>
 800ccb6:	ec5b ab10 	vmov	sl, fp, d0
 800ccba:	e672      	b.n	800c9a2 <_strtod_l+0x72>
 800ccbc:	eba8 0309 	sub.w	r3, r8, r9
 800ccc0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ccc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccc4:	2f00      	cmp	r7, #0
 800ccc6:	bf08      	it	eq
 800ccc8:	462f      	moveq	r7, r5
 800ccca:	2d10      	cmp	r5, #16
 800cccc:	462c      	mov	r4, r5
 800ccce:	bfa8      	it	ge
 800ccd0:	2410      	movge	r4, #16
 800ccd2:	f7f3 fc3f 	bl	8000554 <__aeabi_ui2d>
 800ccd6:	2d09      	cmp	r5, #9
 800ccd8:	4682      	mov	sl, r0
 800ccda:	468b      	mov	fp, r1
 800ccdc:	dc13      	bgt.n	800cd06 <_strtod_l+0x3d6>
 800ccde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f43f ae5e 	beq.w	800c9a2 <_strtod_l+0x72>
 800cce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cce8:	dd78      	ble.n	800cddc <_strtod_l+0x4ac>
 800ccea:	2b16      	cmp	r3, #22
 800ccec:	dc5f      	bgt.n	800cdae <_strtod_l+0x47e>
 800ccee:	4974      	ldr	r1, [pc, #464]	@ (800cec0 <_strtod_l+0x590>)
 800ccf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ccf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccf8:	4652      	mov	r2, sl
 800ccfa:	465b      	mov	r3, fp
 800ccfc:	f7f3 fca4 	bl	8000648 <__aeabi_dmul>
 800cd00:	4682      	mov	sl, r0
 800cd02:	468b      	mov	fp, r1
 800cd04:	e64d      	b.n	800c9a2 <_strtod_l+0x72>
 800cd06:	4b6e      	ldr	r3, [pc, #440]	@ (800cec0 <_strtod_l+0x590>)
 800cd08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cd10:	f7f3 fc9a 	bl	8000648 <__aeabi_dmul>
 800cd14:	4682      	mov	sl, r0
 800cd16:	9808      	ldr	r0, [sp, #32]
 800cd18:	468b      	mov	fp, r1
 800cd1a:	f7f3 fc1b 	bl	8000554 <__aeabi_ui2d>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	460b      	mov	r3, r1
 800cd22:	4650      	mov	r0, sl
 800cd24:	4659      	mov	r1, fp
 800cd26:	f7f3 fad9 	bl	80002dc <__adddf3>
 800cd2a:	2d0f      	cmp	r5, #15
 800cd2c:	4682      	mov	sl, r0
 800cd2e:	468b      	mov	fp, r1
 800cd30:	ddd5      	ble.n	800ccde <_strtod_l+0x3ae>
 800cd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd34:	1b2c      	subs	r4, r5, r4
 800cd36:	441c      	add	r4, r3
 800cd38:	2c00      	cmp	r4, #0
 800cd3a:	f340 8096 	ble.w	800ce6a <_strtod_l+0x53a>
 800cd3e:	f014 030f 	ands.w	r3, r4, #15
 800cd42:	d00a      	beq.n	800cd5a <_strtod_l+0x42a>
 800cd44:	495e      	ldr	r1, [pc, #376]	@ (800cec0 <_strtod_l+0x590>)
 800cd46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd4a:	4652      	mov	r2, sl
 800cd4c:	465b      	mov	r3, fp
 800cd4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd52:	f7f3 fc79 	bl	8000648 <__aeabi_dmul>
 800cd56:	4682      	mov	sl, r0
 800cd58:	468b      	mov	fp, r1
 800cd5a:	f034 040f 	bics.w	r4, r4, #15
 800cd5e:	d073      	beq.n	800ce48 <_strtod_l+0x518>
 800cd60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cd64:	dd48      	ble.n	800cdf8 <_strtod_l+0x4c8>
 800cd66:	2400      	movs	r4, #0
 800cd68:	46a0      	mov	r8, r4
 800cd6a:	940a      	str	r4, [sp, #40]	@ 0x28
 800cd6c:	46a1      	mov	r9, r4
 800cd6e:	9a05      	ldr	r2, [sp, #20]
 800cd70:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cec8 <_strtod_l+0x598>
 800cd74:	2322      	movs	r3, #34	@ 0x22
 800cd76:	6013      	str	r3, [r2, #0]
 800cd78:	f04f 0a00 	mov.w	sl, #0
 800cd7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f43f ae0f 	beq.w	800c9a2 <_strtod_l+0x72>
 800cd84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd86:	9805      	ldr	r0, [sp, #20]
 800cd88:	f001 f9f2 	bl	800e170 <_Bfree>
 800cd8c:	9805      	ldr	r0, [sp, #20]
 800cd8e:	4649      	mov	r1, r9
 800cd90:	f001 f9ee 	bl	800e170 <_Bfree>
 800cd94:	9805      	ldr	r0, [sp, #20]
 800cd96:	4641      	mov	r1, r8
 800cd98:	f001 f9ea 	bl	800e170 <_Bfree>
 800cd9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd9e:	9805      	ldr	r0, [sp, #20]
 800cda0:	f001 f9e6 	bl	800e170 <_Bfree>
 800cda4:	9805      	ldr	r0, [sp, #20]
 800cda6:	4621      	mov	r1, r4
 800cda8:	f001 f9e2 	bl	800e170 <_Bfree>
 800cdac:	e5f9      	b.n	800c9a2 <_strtod_l+0x72>
 800cdae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdb0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	dbbc      	blt.n	800cd32 <_strtod_l+0x402>
 800cdb8:	4c41      	ldr	r4, [pc, #260]	@ (800cec0 <_strtod_l+0x590>)
 800cdba:	f1c5 050f 	rsb	r5, r5, #15
 800cdbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cdc2:	4652      	mov	r2, sl
 800cdc4:	465b      	mov	r3, fp
 800cdc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdca:	f7f3 fc3d 	bl	8000648 <__aeabi_dmul>
 800cdce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd0:	1b5d      	subs	r5, r3, r5
 800cdd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cdd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cdda:	e78f      	b.n	800ccfc <_strtod_l+0x3cc>
 800cddc:	3316      	adds	r3, #22
 800cdde:	dba8      	blt.n	800cd32 <_strtod_l+0x402>
 800cde0:	4b37      	ldr	r3, [pc, #220]	@ (800cec0 <_strtod_l+0x590>)
 800cde2:	eba9 0808 	sub.w	r8, r9, r8
 800cde6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cdea:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cdee:	4650      	mov	r0, sl
 800cdf0:	4659      	mov	r1, fp
 800cdf2:	f7f3 fd53 	bl	800089c <__aeabi_ddiv>
 800cdf6:	e783      	b.n	800cd00 <_strtod_l+0x3d0>
 800cdf8:	4b32      	ldr	r3, [pc, #200]	@ (800cec4 <_strtod_l+0x594>)
 800cdfa:	9308      	str	r3, [sp, #32]
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	1124      	asrs	r4, r4, #4
 800ce00:	4650      	mov	r0, sl
 800ce02:	4659      	mov	r1, fp
 800ce04:	461e      	mov	r6, r3
 800ce06:	2c01      	cmp	r4, #1
 800ce08:	dc21      	bgt.n	800ce4e <_strtod_l+0x51e>
 800ce0a:	b10b      	cbz	r3, 800ce10 <_strtod_l+0x4e0>
 800ce0c:	4682      	mov	sl, r0
 800ce0e:	468b      	mov	fp, r1
 800ce10:	492c      	ldr	r1, [pc, #176]	@ (800cec4 <_strtod_l+0x594>)
 800ce12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ce16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ce1a:	4652      	mov	r2, sl
 800ce1c:	465b      	mov	r3, fp
 800ce1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce22:	f7f3 fc11 	bl	8000648 <__aeabi_dmul>
 800ce26:	4b28      	ldr	r3, [pc, #160]	@ (800cec8 <_strtod_l+0x598>)
 800ce28:	460a      	mov	r2, r1
 800ce2a:	400b      	ands	r3, r1
 800ce2c:	4927      	ldr	r1, [pc, #156]	@ (800cecc <_strtod_l+0x59c>)
 800ce2e:	428b      	cmp	r3, r1
 800ce30:	4682      	mov	sl, r0
 800ce32:	d898      	bhi.n	800cd66 <_strtod_l+0x436>
 800ce34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ce38:	428b      	cmp	r3, r1
 800ce3a:	bf86      	itte	hi
 800ce3c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ced0 <_strtod_l+0x5a0>
 800ce40:	f04f 3aff 	movhi.w	sl, #4294967295
 800ce44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ce48:	2300      	movs	r3, #0
 800ce4a:	9308      	str	r3, [sp, #32]
 800ce4c:	e07a      	b.n	800cf44 <_strtod_l+0x614>
 800ce4e:	07e2      	lsls	r2, r4, #31
 800ce50:	d505      	bpl.n	800ce5e <_strtod_l+0x52e>
 800ce52:	9b08      	ldr	r3, [sp, #32]
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	f7f3 fbf6 	bl	8000648 <__aeabi_dmul>
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	9a08      	ldr	r2, [sp, #32]
 800ce60:	3208      	adds	r2, #8
 800ce62:	3601      	adds	r6, #1
 800ce64:	1064      	asrs	r4, r4, #1
 800ce66:	9208      	str	r2, [sp, #32]
 800ce68:	e7cd      	b.n	800ce06 <_strtod_l+0x4d6>
 800ce6a:	d0ed      	beq.n	800ce48 <_strtod_l+0x518>
 800ce6c:	4264      	negs	r4, r4
 800ce6e:	f014 020f 	ands.w	r2, r4, #15
 800ce72:	d00a      	beq.n	800ce8a <_strtod_l+0x55a>
 800ce74:	4b12      	ldr	r3, [pc, #72]	@ (800cec0 <_strtod_l+0x590>)
 800ce76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce7a:	4650      	mov	r0, sl
 800ce7c:	4659      	mov	r1, fp
 800ce7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce82:	f7f3 fd0b 	bl	800089c <__aeabi_ddiv>
 800ce86:	4682      	mov	sl, r0
 800ce88:	468b      	mov	fp, r1
 800ce8a:	1124      	asrs	r4, r4, #4
 800ce8c:	d0dc      	beq.n	800ce48 <_strtod_l+0x518>
 800ce8e:	2c1f      	cmp	r4, #31
 800ce90:	dd20      	ble.n	800ced4 <_strtod_l+0x5a4>
 800ce92:	2400      	movs	r4, #0
 800ce94:	46a0      	mov	r8, r4
 800ce96:	940a      	str	r4, [sp, #40]	@ 0x28
 800ce98:	46a1      	mov	r9, r4
 800ce9a:	9a05      	ldr	r2, [sp, #20]
 800ce9c:	2322      	movs	r3, #34	@ 0x22
 800ce9e:	f04f 0a00 	mov.w	sl, #0
 800cea2:	f04f 0b00 	mov.w	fp, #0
 800cea6:	6013      	str	r3, [r2, #0]
 800cea8:	e768      	b.n	800cd7c <_strtod_l+0x44c>
 800ceaa:	bf00      	nop
 800ceac:	080108fb 	.word	0x080108fb
 800ceb0:	08010900 	.word	0x08010900
 800ceb4:	080108f2 	.word	0x080108f2
 800ceb8:	080108f5 	.word	0x080108f5
 800cebc:	08010c74 	.word	0x08010c74
 800cec0:	08010a70 	.word	0x08010a70
 800cec4:	08010a48 	.word	0x08010a48
 800cec8:	7ff00000 	.word	0x7ff00000
 800cecc:	7ca00000 	.word	0x7ca00000
 800ced0:	7fefffff 	.word	0x7fefffff
 800ced4:	f014 0310 	ands.w	r3, r4, #16
 800ced8:	bf18      	it	ne
 800ceda:	236a      	movne	r3, #106	@ 0x6a
 800cedc:	4ea9      	ldr	r6, [pc, #676]	@ (800d184 <_strtod_l+0x854>)
 800cede:	9308      	str	r3, [sp, #32]
 800cee0:	4650      	mov	r0, sl
 800cee2:	4659      	mov	r1, fp
 800cee4:	2300      	movs	r3, #0
 800cee6:	07e2      	lsls	r2, r4, #31
 800cee8:	d504      	bpl.n	800cef4 <_strtod_l+0x5c4>
 800ceea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ceee:	f7f3 fbab 	bl	8000648 <__aeabi_dmul>
 800cef2:	2301      	movs	r3, #1
 800cef4:	1064      	asrs	r4, r4, #1
 800cef6:	f106 0608 	add.w	r6, r6, #8
 800cefa:	d1f4      	bne.n	800cee6 <_strtod_l+0x5b6>
 800cefc:	b10b      	cbz	r3, 800cf02 <_strtod_l+0x5d2>
 800cefe:	4682      	mov	sl, r0
 800cf00:	468b      	mov	fp, r1
 800cf02:	9b08      	ldr	r3, [sp, #32]
 800cf04:	b1b3      	cbz	r3, 800cf34 <_strtod_l+0x604>
 800cf06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cf0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	4659      	mov	r1, fp
 800cf12:	dd0f      	ble.n	800cf34 <_strtod_l+0x604>
 800cf14:	2b1f      	cmp	r3, #31
 800cf16:	dd55      	ble.n	800cfc4 <_strtod_l+0x694>
 800cf18:	2b34      	cmp	r3, #52	@ 0x34
 800cf1a:	bfde      	ittt	le
 800cf1c:	f04f 33ff 	movle.w	r3, #4294967295
 800cf20:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cf24:	4093      	lslle	r3, r2
 800cf26:	f04f 0a00 	mov.w	sl, #0
 800cf2a:	bfcc      	ite	gt
 800cf2c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cf30:	ea03 0b01 	andle.w	fp, r3, r1
 800cf34:	2200      	movs	r2, #0
 800cf36:	2300      	movs	r3, #0
 800cf38:	4650      	mov	r0, sl
 800cf3a:	4659      	mov	r1, fp
 800cf3c:	f7f3 fdec 	bl	8000b18 <__aeabi_dcmpeq>
 800cf40:	2800      	cmp	r0, #0
 800cf42:	d1a6      	bne.n	800ce92 <_strtod_l+0x562>
 800cf44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf46:	9300      	str	r3, [sp, #0]
 800cf48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cf4a:	9805      	ldr	r0, [sp, #20]
 800cf4c:	462b      	mov	r3, r5
 800cf4e:	463a      	mov	r2, r7
 800cf50:	f001 f976 	bl	800e240 <__s2b>
 800cf54:	900a      	str	r0, [sp, #40]	@ 0x28
 800cf56:	2800      	cmp	r0, #0
 800cf58:	f43f af05 	beq.w	800cd66 <_strtod_l+0x436>
 800cf5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf5e:	2a00      	cmp	r2, #0
 800cf60:	eba9 0308 	sub.w	r3, r9, r8
 800cf64:	bfa8      	it	ge
 800cf66:	2300      	movge	r3, #0
 800cf68:	9312      	str	r3, [sp, #72]	@ 0x48
 800cf6a:	2400      	movs	r4, #0
 800cf6c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cf70:	9316      	str	r3, [sp, #88]	@ 0x58
 800cf72:	46a0      	mov	r8, r4
 800cf74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf76:	9805      	ldr	r0, [sp, #20]
 800cf78:	6859      	ldr	r1, [r3, #4]
 800cf7a:	f001 f8b9 	bl	800e0f0 <_Balloc>
 800cf7e:	4681      	mov	r9, r0
 800cf80:	2800      	cmp	r0, #0
 800cf82:	f43f aef4 	beq.w	800cd6e <_strtod_l+0x43e>
 800cf86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf88:	691a      	ldr	r2, [r3, #16]
 800cf8a:	3202      	adds	r2, #2
 800cf8c:	f103 010c 	add.w	r1, r3, #12
 800cf90:	0092      	lsls	r2, r2, #2
 800cf92:	300c      	adds	r0, #12
 800cf94:	f000 fc4f 	bl	800d836 <memcpy>
 800cf98:	ec4b ab10 	vmov	d0, sl, fp
 800cf9c:	9805      	ldr	r0, [sp, #20]
 800cf9e:	aa1c      	add	r2, sp, #112	@ 0x70
 800cfa0:	a91b      	add	r1, sp, #108	@ 0x6c
 800cfa2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cfa6:	f001 fc87 	bl	800e8b8 <__d2b>
 800cfaa:	901a      	str	r0, [sp, #104]	@ 0x68
 800cfac:	2800      	cmp	r0, #0
 800cfae:	f43f aede 	beq.w	800cd6e <_strtod_l+0x43e>
 800cfb2:	9805      	ldr	r0, [sp, #20]
 800cfb4:	2101      	movs	r1, #1
 800cfb6:	f001 f9d9 	bl	800e36c <__i2b>
 800cfba:	4680      	mov	r8, r0
 800cfbc:	b948      	cbnz	r0, 800cfd2 <_strtod_l+0x6a2>
 800cfbe:	f04f 0800 	mov.w	r8, #0
 800cfc2:	e6d4      	b.n	800cd6e <_strtod_l+0x43e>
 800cfc4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfc8:	fa02 f303 	lsl.w	r3, r2, r3
 800cfcc:	ea03 0a0a 	and.w	sl, r3, sl
 800cfd0:	e7b0      	b.n	800cf34 <_strtod_l+0x604>
 800cfd2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cfd4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cfd6:	2d00      	cmp	r5, #0
 800cfd8:	bfab      	itete	ge
 800cfda:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cfdc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cfde:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cfe0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cfe2:	bfac      	ite	ge
 800cfe4:	18ef      	addge	r7, r5, r3
 800cfe6:	1b5e      	sublt	r6, r3, r5
 800cfe8:	9b08      	ldr	r3, [sp, #32]
 800cfea:	1aed      	subs	r5, r5, r3
 800cfec:	4415      	add	r5, r2
 800cfee:	4b66      	ldr	r3, [pc, #408]	@ (800d188 <_strtod_l+0x858>)
 800cff0:	3d01      	subs	r5, #1
 800cff2:	429d      	cmp	r5, r3
 800cff4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cff8:	da50      	bge.n	800d09c <_strtod_l+0x76c>
 800cffa:	1b5b      	subs	r3, r3, r5
 800cffc:	2b1f      	cmp	r3, #31
 800cffe:	eba2 0203 	sub.w	r2, r2, r3
 800d002:	f04f 0101 	mov.w	r1, #1
 800d006:	dc3d      	bgt.n	800d084 <_strtod_l+0x754>
 800d008:	fa01 f303 	lsl.w	r3, r1, r3
 800d00c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d00e:	2300      	movs	r3, #0
 800d010:	9310      	str	r3, [sp, #64]	@ 0x40
 800d012:	18bd      	adds	r5, r7, r2
 800d014:	9b08      	ldr	r3, [sp, #32]
 800d016:	42af      	cmp	r7, r5
 800d018:	4416      	add	r6, r2
 800d01a:	441e      	add	r6, r3
 800d01c:	463b      	mov	r3, r7
 800d01e:	bfa8      	it	ge
 800d020:	462b      	movge	r3, r5
 800d022:	42b3      	cmp	r3, r6
 800d024:	bfa8      	it	ge
 800d026:	4633      	movge	r3, r6
 800d028:	2b00      	cmp	r3, #0
 800d02a:	bfc2      	ittt	gt
 800d02c:	1aed      	subgt	r5, r5, r3
 800d02e:	1af6      	subgt	r6, r6, r3
 800d030:	1aff      	subgt	r7, r7, r3
 800d032:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d034:	2b00      	cmp	r3, #0
 800d036:	dd16      	ble.n	800d066 <_strtod_l+0x736>
 800d038:	4641      	mov	r1, r8
 800d03a:	9805      	ldr	r0, [sp, #20]
 800d03c:	461a      	mov	r2, r3
 800d03e:	f001 fa55 	bl	800e4ec <__pow5mult>
 800d042:	4680      	mov	r8, r0
 800d044:	2800      	cmp	r0, #0
 800d046:	d0ba      	beq.n	800cfbe <_strtod_l+0x68e>
 800d048:	4601      	mov	r1, r0
 800d04a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d04c:	9805      	ldr	r0, [sp, #20]
 800d04e:	f001 f9a3 	bl	800e398 <__multiply>
 800d052:	900e      	str	r0, [sp, #56]	@ 0x38
 800d054:	2800      	cmp	r0, #0
 800d056:	f43f ae8a 	beq.w	800cd6e <_strtod_l+0x43e>
 800d05a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d05c:	9805      	ldr	r0, [sp, #20]
 800d05e:	f001 f887 	bl	800e170 <_Bfree>
 800d062:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d064:	931a      	str	r3, [sp, #104]	@ 0x68
 800d066:	2d00      	cmp	r5, #0
 800d068:	dc1d      	bgt.n	800d0a6 <_strtod_l+0x776>
 800d06a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	dd23      	ble.n	800d0b8 <_strtod_l+0x788>
 800d070:	4649      	mov	r1, r9
 800d072:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d074:	9805      	ldr	r0, [sp, #20]
 800d076:	f001 fa39 	bl	800e4ec <__pow5mult>
 800d07a:	4681      	mov	r9, r0
 800d07c:	b9e0      	cbnz	r0, 800d0b8 <_strtod_l+0x788>
 800d07e:	f04f 0900 	mov.w	r9, #0
 800d082:	e674      	b.n	800cd6e <_strtod_l+0x43e>
 800d084:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d088:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d08c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d090:	35e2      	adds	r5, #226	@ 0xe2
 800d092:	fa01 f305 	lsl.w	r3, r1, r5
 800d096:	9310      	str	r3, [sp, #64]	@ 0x40
 800d098:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d09a:	e7ba      	b.n	800d012 <_strtod_l+0x6e2>
 800d09c:	2300      	movs	r3, #0
 800d09e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d0a4:	e7b5      	b.n	800d012 <_strtod_l+0x6e2>
 800d0a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0a8:	9805      	ldr	r0, [sp, #20]
 800d0aa:	462a      	mov	r2, r5
 800d0ac:	f001 fa78 	bl	800e5a0 <__lshift>
 800d0b0:	901a      	str	r0, [sp, #104]	@ 0x68
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d1d9      	bne.n	800d06a <_strtod_l+0x73a>
 800d0b6:	e65a      	b.n	800cd6e <_strtod_l+0x43e>
 800d0b8:	2e00      	cmp	r6, #0
 800d0ba:	dd07      	ble.n	800d0cc <_strtod_l+0x79c>
 800d0bc:	4649      	mov	r1, r9
 800d0be:	9805      	ldr	r0, [sp, #20]
 800d0c0:	4632      	mov	r2, r6
 800d0c2:	f001 fa6d 	bl	800e5a0 <__lshift>
 800d0c6:	4681      	mov	r9, r0
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d0d8      	beq.n	800d07e <_strtod_l+0x74e>
 800d0cc:	2f00      	cmp	r7, #0
 800d0ce:	dd08      	ble.n	800d0e2 <_strtod_l+0x7b2>
 800d0d0:	4641      	mov	r1, r8
 800d0d2:	9805      	ldr	r0, [sp, #20]
 800d0d4:	463a      	mov	r2, r7
 800d0d6:	f001 fa63 	bl	800e5a0 <__lshift>
 800d0da:	4680      	mov	r8, r0
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	f43f ae46 	beq.w	800cd6e <_strtod_l+0x43e>
 800d0e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0e4:	9805      	ldr	r0, [sp, #20]
 800d0e6:	464a      	mov	r2, r9
 800d0e8:	f001 fae2 	bl	800e6b0 <__mdiff>
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	f43f ae3d 	beq.w	800cd6e <_strtod_l+0x43e>
 800d0f4:	68c3      	ldr	r3, [r0, #12]
 800d0f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	60c3      	str	r3, [r0, #12]
 800d0fc:	4641      	mov	r1, r8
 800d0fe:	f001 fabb 	bl	800e678 <__mcmp>
 800d102:	2800      	cmp	r0, #0
 800d104:	da46      	bge.n	800d194 <_strtod_l+0x864>
 800d106:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d108:	ea53 030a 	orrs.w	r3, r3, sl
 800d10c:	d16c      	bne.n	800d1e8 <_strtod_l+0x8b8>
 800d10e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d112:	2b00      	cmp	r3, #0
 800d114:	d168      	bne.n	800d1e8 <_strtod_l+0x8b8>
 800d116:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d11a:	0d1b      	lsrs	r3, r3, #20
 800d11c:	051b      	lsls	r3, r3, #20
 800d11e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d122:	d961      	bls.n	800d1e8 <_strtod_l+0x8b8>
 800d124:	6963      	ldr	r3, [r4, #20]
 800d126:	b913      	cbnz	r3, 800d12e <_strtod_l+0x7fe>
 800d128:	6923      	ldr	r3, [r4, #16]
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	dd5c      	ble.n	800d1e8 <_strtod_l+0x8b8>
 800d12e:	4621      	mov	r1, r4
 800d130:	2201      	movs	r2, #1
 800d132:	9805      	ldr	r0, [sp, #20]
 800d134:	f001 fa34 	bl	800e5a0 <__lshift>
 800d138:	4641      	mov	r1, r8
 800d13a:	4604      	mov	r4, r0
 800d13c:	f001 fa9c 	bl	800e678 <__mcmp>
 800d140:	2800      	cmp	r0, #0
 800d142:	dd51      	ble.n	800d1e8 <_strtod_l+0x8b8>
 800d144:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d148:	9a08      	ldr	r2, [sp, #32]
 800d14a:	0d1b      	lsrs	r3, r3, #20
 800d14c:	051b      	lsls	r3, r3, #20
 800d14e:	2a00      	cmp	r2, #0
 800d150:	d06b      	beq.n	800d22a <_strtod_l+0x8fa>
 800d152:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d156:	d868      	bhi.n	800d22a <_strtod_l+0x8fa>
 800d158:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d15c:	f67f ae9d 	bls.w	800ce9a <_strtod_l+0x56a>
 800d160:	4b0a      	ldr	r3, [pc, #40]	@ (800d18c <_strtod_l+0x85c>)
 800d162:	4650      	mov	r0, sl
 800d164:	4659      	mov	r1, fp
 800d166:	2200      	movs	r2, #0
 800d168:	f7f3 fa6e 	bl	8000648 <__aeabi_dmul>
 800d16c:	4b08      	ldr	r3, [pc, #32]	@ (800d190 <_strtod_l+0x860>)
 800d16e:	400b      	ands	r3, r1
 800d170:	4682      	mov	sl, r0
 800d172:	468b      	mov	fp, r1
 800d174:	2b00      	cmp	r3, #0
 800d176:	f47f ae05 	bne.w	800cd84 <_strtod_l+0x454>
 800d17a:	9a05      	ldr	r2, [sp, #20]
 800d17c:	2322      	movs	r3, #34	@ 0x22
 800d17e:	6013      	str	r3, [r2, #0]
 800d180:	e600      	b.n	800cd84 <_strtod_l+0x454>
 800d182:	bf00      	nop
 800d184:	08010928 	.word	0x08010928
 800d188:	fffffc02 	.word	0xfffffc02
 800d18c:	39500000 	.word	0x39500000
 800d190:	7ff00000 	.word	0x7ff00000
 800d194:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d198:	d165      	bne.n	800d266 <_strtod_l+0x936>
 800d19a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d19c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1a0:	b35a      	cbz	r2, 800d1fa <_strtod_l+0x8ca>
 800d1a2:	4a9f      	ldr	r2, [pc, #636]	@ (800d420 <_strtod_l+0xaf0>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d12b      	bne.n	800d200 <_strtod_l+0x8d0>
 800d1a8:	9b08      	ldr	r3, [sp, #32]
 800d1aa:	4651      	mov	r1, sl
 800d1ac:	b303      	cbz	r3, 800d1f0 <_strtod_l+0x8c0>
 800d1ae:	4b9d      	ldr	r3, [pc, #628]	@ (800d424 <_strtod_l+0xaf4>)
 800d1b0:	465a      	mov	r2, fp
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1bc:	d81b      	bhi.n	800d1f6 <_strtod_l+0x8c6>
 800d1be:	0d1b      	lsrs	r3, r3, #20
 800d1c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1c8:	4299      	cmp	r1, r3
 800d1ca:	d119      	bne.n	800d200 <_strtod_l+0x8d0>
 800d1cc:	4b96      	ldr	r3, [pc, #600]	@ (800d428 <_strtod_l+0xaf8>)
 800d1ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d102      	bne.n	800d1da <_strtod_l+0x8aa>
 800d1d4:	3101      	adds	r1, #1
 800d1d6:	f43f adca 	beq.w	800cd6e <_strtod_l+0x43e>
 800d1da:	4b92      	ldr	r3, [pc, #584]	@ (800d424 <_strtod_l+0xaf4>)
 800d1dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1de:	401a      	ands	r2, r3
 800d1e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d1e4:	f04f 0a00 	mov.w	sl, #0
 800d1e8:	9b08      	ldr	r3, [sp, #32]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1b8      	bne.n	800d160 <_strtod_l+0x830>
 800d1ee:	e5c9      	b.n	800cd84 <_strtod_l+0x454>
 800d1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1f4:	e7e8      	b.n	800d1c8 <_strtod_l+0x898>
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	e7e6      	b.n	800d1c8 <_strtod_l+0x898>
 800d1fa:	ea53 030a 	orrs.w	r3, r3, sl
 800d1fe:	d0a1      	beq.n	800d144 <_strtod_l+0x814>
 800d200:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d202:	b1db      	cbz	r3, 800d23c <_strtod_l+0x90c>
 800d204:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d206:	4213      	tst	r3, r2
 800d208:	d0ee      	beq.n	800d1e8 <_strtod_l+0x8b8>
 800d20a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d20c:	9a08      	ldr	r2, [sp, #32]
 800d20e:	4650      	mov	r0, sl
 800d210:	4659      	mov	r1, fp
 800d212:	b1bb      	cbz	r3, 800d244 <_strtod_l+0x914>
 800d214:	f7ff fb6b 	bl	800c8ee <sulp>
 800d218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d21c:	ec53 2b10 	vmov	r2, r3, d0
 800d220:	f7f3 f85c 	bl	80002dc <__adddf3>
 800d224:	4682      	mov	sl, r0
 800d226:	468b      	mov	fp, r1
 800d228:	e7de      	b.n	800d1e8 <_strtod_l+0x8b8>
 800d22a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d22e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d232:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d236:	f04f 3aff 	mov.w	sl, #4294967295
 800d23a:	e7d5      	b.n	800d1e8 <_strtod_l+0x8b8>
 800d23c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d23e:	ea13 0f0a 	tst.w	r3, sl
 800d242:	e7e1      	b.n	800d208 <_strtod_l+0x8d8>
 800d244:	f7ff fb53 	bl	800c8ee <sulp>
 800d248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d24c:	ec53 2b10 	vmov	r2, r3, d0
 800d250:	f7f3 f842 	bl	80002d8 <__aeabi_dsub>
 800d254:	2200      	movs	r2, #0
 800d256:	2300      	movs	r3, #0
 800d258:	4682      	mov	sl, r0
 800d25a:	468b      	mov	fp, r1
 800d25c:	f7f3 fc5c 	bl	8000b18 <__aeabi_dcmpeq>
 800d260:	2800      	cmp	r0, #0
 800d262:	d0c1      	beq.n	800d1e8 <_strtod_l+0x8b8>
 800d264:	e619      	b.n	800ce9a <_strtod_l+0x56a>
 800d266:	4641      	mov	r1, r8
 800d268:	4620      	mov	r0, r4
 800d26a:	f001 fb7d 	bl	800e968 <__ratio>
 800d26e:	ec57 6b10 	vmov	r6, r7, d0
 800d272:	2200      	movs	r2, #0
 800d274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d278:	4630      	mov	r0, r6
 800d27a:	4639      	mov	r1, r7
 800d27c:	f7f3 fc60 	bl	8000b40 <__aeabi_dcmple>
 800d280:	2800      	cmp	r0, #0
 800d282:	d06f      	beq.n	800d364 <_strtod_l+0xa34>
 800d284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d286:	2b00      	cmp	r3, #0
 800d288:	d17a      	bne.n	800d380 <_strtod_l+0xa50>
 800d28a:	f1ba 0f00 	cmp.w	sl, #0
 800d28e:	d158      	bne.n	800d342 <_strtod_l+0xa12>
 800d290:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d292:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d296:	2b00      	cmp	r3, #0
 800d298:	d15a      	bne.n	800d350 <_strtod_l+0xa20>
 800d29a:	4b64      	ldr	r3, [pc, #400]	@ (800d42c <_strtod_l+0xafc>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	4630      	mov	r0, r6
 800d2a0:	4639      	mov	r1, r7
 800d2a2:	f7f3 fc43 	bl	8000b2c <__aeabi_dcmplt>
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d159      	bne.n	800d35e <_strtod_l+0xa2e>
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	4b60      	ldr	r3, [pc, #384]	@ (800d430 <_strtod_l+0xb00>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	f7f3 f9c9 	bl	8000648 <__aeabi_dmul>
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	460f      	mov	r7, r1
 800d2ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d2be:	9606      	str	r6, [sp, #24]
 800d2c0:	9307      	str	r3, [sp, #28]
 800d2c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2c6:	4d57      	ldr	r5, [pc, #348]	@ (800d424 <_strtod_l+0xaf4>)
 800d2c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d2cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2ce:	401d      	ands	r5, r3
 800d2d0:	4b58      	ldr	r3, [pc, #352]	@ (800d434 <_strtod_l+0xb04>)
 800d2d2:	429d      	cmp	r5, r3
 800d2d4:	f040 80b2 	bne.w	800d43c <_strtod_l+0xb0c>
 800d2d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d2de:	ec4b ab10 	vmov	d0, sl, fp
 800d2e2:	f001 fa79 	bl	800e7d8 <__ulp>
 800d2e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2ea:	ec51 0b10 	vmov	r0, r1, d0
 800d2ee:	f7f3 f9ab 	bl	8000648 <__aeabi_dmul>
 800d2f2:	4652      	mov	r2, sl
 800d2f4:	465b      	mov	r3, fp
 800d2f6:	f7f2 fff1 	bl	80002dc <__adddf3>
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	4949      	ldr	r1, [pc, #292]	@ (800d424 <_strtod_l+0xaf4>)
 800d2fe:	4a4e      	ldr	r2, [pc, #312]	@ (800d438 <_strtod_l+0xb08>)
 800d300:	4019      	ands	r1, r3
 800d302:	4291      	cmp	r1, r2
 800d304:	4682      	mov	sl, r0
 800d306:	d942      	bls.n	800d38e <_strtod_l+0xa5e>
 800d308:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d30a:	4b47      	ldr	r3, [pc, #284]	@ (800d428 <_strtod_l+0xaf8>)
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d103      	bne.n	800d318 <_strtod_l+0x9e8>
 800d310:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d312:	3301      	adds	r3, #1
 800d314:	f43f ad2b 	beq.w	800cd6e <_strtod_l+0x43e>
 800d318:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d428 <_strtod_l+0xaf8>
 800d31c:	f04f 3aff 	mov.w	sl, #4294967295
 800d320:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d322:	9805      	ldr	r0, [sp, #20]
 800d324:	f000 ff24 	bl	800e170 <_Bfree>
 800d328:	9805      	ldr	r0, [sp, #20]
 800d32a:	4649      	mov	r1, r9
 800d32c:	f000 ff20 	bl	800e170 <_Bfree>
 800d330:	9805      	ldr	r0, [sp, #20]
 800d332:	4641      	mov	r1, r8
 800d334:	f000 ff1c 	bl	800e170 <_Bfree>
 800d338:	9805      	ldr	r0, [sp, #20]
 800d33a:	4621      	mov	r1, r4
 800d33c:	f000 ff18 	bl	800e170 <_Bfree>
 800d340:	e618      	b.n	800cf74 <_strtod_l+0x644>
 800d342:	f1ba 0f01 	cmp.w	sl, #1
 800d346:	d103      	bne.n	800d350 <_strtod_l+0xa20>
 800d348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f43f ada5 	beq.w	800ce9a <_strtod_l+0x56a>
 800d350:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d400 <_strtod_l+0xad0>
 800d354:	4f35      	ldr	r7, [pc, #212]	@ (800d42c <_strtod_l+0xafc>)
 800d356:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d35a:	2600      	movs	r6, #0
 800d35c:	e7b1      	b.n	800d2c2 <_strtod_l+0x992>
 800d35e:	4f34      	ldr	r7, [pc, #208]	@ (800d430 <_strtod_l+0xb00>)
 800d360:	2600      	movs	r6, #0
 800d362:	e7aa      	b.n	800d2ba <_strtod_l+0x98a>
 800d364:	4b32      	ldr	r3, [pc, #200]	@ (800d430 <_strtod_l+0xb00>)
 800d366:	4630      	mov	r0, r6
 800d368:	4639      	mov	r1, r7
 800d36a:	2200      	movs	r2, #0
 800d36c:	f7f3 f96c 	bl	8000648 <__aeabi_dmul>
 800d370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d372:	4606      	mov	r6, r0
 800d374:	460f      	mov	r7, r1
 800d376:	2b00      	cmp	r3, #0
 800d378:	d09f      	beq.n	800d2ba <_strtod_l+0x98a>
 800d37a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d37e:	e7a0      	b.n	800d2c2 <_strtod_l+0x992>
 800d380:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d408 <_strtod_l+0xad8>
 800d384:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d388:	ec57 6b17 	vmov	r6, r7, d7
 800d38c:	e799      	b.n	800d2c2 <_strtod_l+0x992>
 800d38e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d392:	9b08      	ldr	r3, [sp, #32]
 800d394:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1c1      	bne.n	800d320 <_strtod_l+0x9f0>
 800d39c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d3a0:	0d1b      	lsrs	r3, r3, #20
 800d3a2:	051b      	lsls	r3, r3, #20
 800d3a4:	429d      	cmp	r5, r3
 800d3a6:	d1bb      	bne.n	800d320 <_strtod_l+0x9f0>
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	f7f3 fdba 	bl	8000f24 <__aeabi_d2lz>
 800d3b0:	f7f3 f91c 	bl	80005ec <__aeabi_l2d>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	4639      	mov	r1, r7
 800d3bc:	f7f2 ff8c 	bl	80002d8 <__aeabi_dsub>
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d3c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ce:	ea46 060a 	orr.w	r6, r6, sl
 800d3d2:	431e      	orrs	r6, r3
 800d3d4:	d06f      	beq.n	800d4b6 <_strtod_l+0xb86>
 800d3d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d410 <_strtod_l+0xae0>)
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	f7f3 fba6 	bl	8000b2c <__aeabi_dcmplt>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	f47f accf 	bne.w	800cd84 <_strtod_l+0x454>
 800d3e6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d418 <_strtod_l+0xae8>)
 800d3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3f0:	f7f3 fbba 	bl	8000b68 <__aeabi_dcmpgt>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d093      	beq.n	800d320 <_strtod_l+0x9f0>
 800d3f8:	e4c4      	b.n	800cd84 <_strtod_l+0x454>
 800d3fa:	bf00      	nop
 800d3fc:	f3af 8000 	nop.w
 800d400:	00000000 	.word	0x00000000
 800d404:	bff00000 	.word	0xbff00000
 800d408:	00000000 	.word	0x00000000
 800d40c:	3ff00000 	.word	0x3ff00000
 800d410:	94a03595 	.word	0x94a03595
 800d414:	3fdfffff 	.word	0x3fdfffff
 800d418:	35afe535 	.word	0x35afe535
 800d41c:	3fe00000 	.word	0x3fe00000
 800d420:	000fffff 	.word	0x000fffff
 800d424:	7ff00000 	.word	0x7ff00000
 800d428:	7fefffff 	.word	0x7fefffff
 800d42c:	3ff00000 	.word	0x3ff00000
 800d430:	3fe00000 	.word	0x3fe00000
 800d434:	7fe00000 	.word	0x7fe00000
 800d438:	7c9fffff 	.word	0x7c9fffff
 800d43c:	9b08      	ldr	r3, [sp, #32]
 800d43e:	b323      	cbz	r3, 800d48a <_strtod_l+0xb5a>
 800d440:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d444:	d821      	bhi.n	800d48a <_strtod_l+0xb5a>
 800d446:	a328      	add	r3, pc, #160	@ (adr r3, 800d4e8 <_strtod_l+0xbb8>)
 800d448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44c:	4630      	mov	r0, r6
 800d44e:	4639      	mov	r1, r7
 800d450:	f7f3 fb76 	bl	8000b40 <__aeabi_dcmple>
 800d454:	b1a0      	cbz	r0, 800d480 <_strtod_l+0xb50>
 800d456:	4639      	mov	r1, r7
 800d458:	4630      	mov	r0, r6
 800d45a:	f7f3 fbcd 	bl	8000bf8 <__aeabi_d2uiz>
 800d45e:	2801      	cmp	r0, #1
 800d460:	bf38      	it	cc
 800d462:	2001      	movcc	r0, #1
 800d464:	f7f3 f876 	bl	8000554 <__aeabi_ui2d>
 800d468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d46a:	4606      	mov	r6, r0
 800d46c:	460f      	mov	r7, r1
 800d46e:	b9fb      	cbnz	r3, 800d4b0 <_strtod_l+0xb80>
 800d470:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d474:	9014      	str	r0, [sp, #80]	@ 0x50
 800d476:	9315      	str	r3, [sp, #84]	@ 0x54
 800d478:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d47c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d480:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d482:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d486:	1b5b      	subs	r3, r3, r5
 800d488:	9311      	str	r3, [sp, #68]	@ 0x44
 800d48a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d48e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d492:	f001 f9a1 	bl	800e7d8 <__ulp>
 800d496:	4650      	mov	r0, sl
 800d498:	ec53 2b10 	vmov	r2, r3, d0
 800d49c:	4659      	mov	r1, fp
 800d49e:	f7f3 f8d3 	bl	8000648 <__aeabi_dmul>
 800d4a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d4a6:	f7f2 ff19 	bl	80002dc <__adddf3>
 800d4aa:	4682      	mov	sl, r0
 800d4ac:	468b      	mov	fp, r1
 800d4ae:	e770      	b.n	800d392 <_strtod_l+0xa62>
 800d4b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d4b4:	e7e0      	b.n	800d478 <_strtod_l+0xb48>
 800d4b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d4f0 <_strtod_l+0xbc0>)
 800d4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4bc:	f7f3 fb36 	bl	8000b2c <__aeabi_dcmplt>
 800d4c0:	e798      	b.n	800d3f4 <_strtod_l+0xac4>
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d4c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d4ca:	6013      	str	r3, [r2, #0]
 800d4cc:	f7ff ba6d 	b.w	800c9aa <_strtod_l+0x7a>
 800d4d0:	2a65      	cmp	r2, #101	@ 0x65
 800d4d2:	f43f ab66 	beq.w	800cba2 <_strtod_l+0x272>
 800d4d6:	2a45      	cmp	r2, #69	@ 0x45
 800d4d8:	f43f ab63 	beq.w	800cba2 <_strtod_l+0x272>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	f7ff bb9e 	b.w	800cc1e <_strtod_l+0x2ee>
 800d4e2:	bf00      	nop
 800d4e4:	f3af 8000 	nop.w
 800d4e8:	ffc00000 	.word	0xffc00000
 800d4ec:	41dfffff 	.word	0x41dfffff
 800d4f0:	94a03595 	.word	0x94a03595
 800d4f4:	3fcfffff 	.word	0x3fcfffff

0800d4f8 <strtod>:
 800d4f8:	460a      	mov	r2, r1
 800d4fa:	4601      	mov	r1, r0
 800d4fc:	4802      	ldr	r0, [pc, #8]	@ (800d508 <strtod+0x10>)
 800d4fe:	4b03      	ldr	r3, [pc, #12]	@ (800d50c <strtod+0x14>)
 800d500:	6800      	ldr	r0, [r0, #0]
 800d502:	f7ff ba15 	b.w	800c930 <_strtod_l>
 800d506:	bf00      	nop
 800d508:	200001c0 	.word	0x200001c0
 800d50c:	20000054 	.word	0x20000054

0800d510 <std>:
 800d510:	2300      	movs	r3, #0
 800d512:	b510      	push	{r4, lr}
 800d514:	4604      	mov	r4, r0
 800d516:	e9c0 3300 	strd	r3, r3, [r0]
 800d51a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d51e:	6083      	str	r3, [r0, #8]
 800d520:	8181      	strh	r1, [r0, #12]
 800d522:	6643      	str	r3, [r0, #100]	@ 0x64
 800d524:	81c2      	strh	r2, [r0, #14]
 800d526:	6183      	str	r3, [r0, #24]
 800d528:	4619      	mov	r1, r3
 800d52a:	2208      	movs	r2, #8
 800d52c:	305c      	adds	r0, #92	@ 0x5c
 800d52e:	f000 f8f4 	bl	800d71a <memset>
 800d532:	4b0d      	ldr	r3, [pc, #52]	@ (800d568 <std+0x58>)
 800d534:	6263      	str	r3, [r4, #36]	@ 0x24
 800d536:	4b0d      	ldr	r3, [pc, #52]	@ (800d56c <std+0x5c>)
 800d538:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d53a:	4b0d      	ldr	r3, [pc, #52]	@ (800d570 <std+0x60>)
 800d53c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d53e:	4b0d      	ldr	r3, [pc, #52]	@ (800d574 <std+0x64>)
 800d540:	6323      	str	r3, [r4, #48]	@ 0x30
 800d542:	4b0d      	ldr	r3, [pc, #52]	@ (800d578 <std+0x68>)
 800d544:	6224      	str	r4, [r4, #32]
 800d546:	429c      	cmp	r4, r3
 800d548:	d006      	beq.n	800d558 <std+0x48>
 800d54a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d54e:	4294      	cmp	r4, r2
 800d550:	d002      	beq.n	800d558 <std+0x48>
 800d552:	33d0      	adds	r3, #208	@ 0xd0
 800d554:	429c      	cmp	r4, r3
 800d556:	d105      	bne.n	800d564 <std+0x54>
 800d558:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d560:	f000 b966 	b.w	800d830 <__retarget_lock_init_recursive>
 800d564:	bd10      	pop	{r4, pc}
 800d566:	bf00      	nop
 800d568:	0800d695 	.word	0x0800d695
 800d56c:	0800d6b7 	.word	0x0800d6b7
 800d570:	0800d6ef 	.word	0x0800d6ef
 800d574:	0800d713 	.word	0x0800d713
 800d578:	20001030 	.word	0x20001030

0800d57c <stdio_exit_handler>:
 800d57c:	4a02      	ldr	r2, [pc, #8]	@ (800d588 <stdio_exit_handler+0xc>)
 800d57e:	4903      	ldr	r1, [pc, #12]	@ (800d58c <stdio_exit_handler+0x10>)
 800d580:	4803      	ldr	r0, [pc, #12]	@ (800d590 <stdio_exit_handler+0x14>)
 800d582:	f000 b869 	b.w	800d658 <_fwalk_sglue>
 800d586:	bf00      	nop
 800d588:	20000048 	.word	0x20000048
 800d58c:	0800eb79 	.word	0x0800eb79
 800d590:	200001c4 	.word	0x200001c4

0800d594 <cleanup_stdio>:
 800d594:	6841      	ldr	r1, [r0, #4]
 800d596:	4b0c      	ldr	r3, [pc, #48]	@ (800d5c8 <cleanup_stdio+0x34>)
 800d598:	4299      	cmp	r1, r3
 800d59a:	b510      	push	{r4, lr}
 800d59c:	4604      	mov	r4, r0
 800d59e:	d001      	beq.n	800d5a4 <cleanup_stdio+0x10>
 800d5a0:	f001 faea 	bl	800eb78 <_fflush_r>
 800d5a4:	68a1      	ldr	r1, [r4, #8]
 800d5a6:	4b09      	ldr	r3, [pc, #36]	@ (800d5cc <cleanup_stdio+0x38>)
 800d5a8:	4299      	cmp	r1, r3
 800d5aa:	d002      	beq.n	800d5b2 <cleanup_stdio+0x1e>
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f001 fae3 	bl	800eb78 <_fflush_r>
 800d5b2:	68e1      	ldr	r1, [r4, #12]
 800d5b4:	4b06      	ldr	r3, [pc, #24]	@ (800d5d0 <cleanup_stdio+0x3c>)
 800d5b6:	4299      	cmp	r1, r3
 800d5b8:	d004      	beq.n	800d5c4 <cleanup_stdio+0x30>
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5c0:	f001 bada 	b.w	800eb78 <_fflush_r>
 800d5c4:	bd10      	pop	{r4, pc}
 800d5c6:	bf00      	nop
 800d5c8:	20001030 	.word	0x20001030
 800d5cc:	20001098 	.word	0x20001098
 800d5d0:	20001100 	.word	0x20001100

0800d5d4 <global_stdio_init.part.0>:
 800d5d4:	b510      	push	{r4, lr}
 800d5d6:	4b0b      	ldr	r3, [pc, #44]	@ (800d604 <global_stdio_init.part.0+0x30>)
 800d5d8:	4c0b      	ldr	r4, [pc, #44]	@ (800d608 <global_stdio_init.part.0+0x34>)
 800d5da:	4a0c      	ldr	r2, [pc, #48]	@ (800d60c <global_stdio_init.part.0+0x38>)
 800d5dc:	601a      	str	r2, [r3, #0]
 800d5de:	4620      	mov	r0, r4
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	2104      	movs	r1, #4
 800d5e4:	f7ff ff94 	bl	800d510 <std>
 800d5e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	2109      	movs	r1, #9
 800d5f0:	f7ff ff8e 	bl	800d510 <std>
 800d5f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d5f8:	2202      	movs	r2, #2
 800d5fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5fe:	2112      	movs	r1, #18
 800d600:	f7ff bf86 	b.w	800d510 <std>
 800d604:	20001168 	.word	0x20001168
 800d608:	20001030 	.word	0x20001030
 800d60c:	0800d57d 	.word	0x0800d57d

0800d610 <__sfp_lock_acquire>:
 800d610:	4801      	ldr	r0, [pc, #4]	@ (800d618 <__sfp_lock_acquire+0x8>)
 800d612:	f000 b90e 	b.w	800d832 <__retarget_lock_acquire_recursive>
 800d616:	bf00      	nop
 800d618:	20001171 	.word	0x20001171

0800d61c <__sfp_lock_release>:
 800d61c:	4801      	ldr	r0, [pc, #4]	@ (800d624 <__sfp_lock_release+0x8>)
 800d61e:	f000 b909 	b.w	800d834 <__retarget_lock_release_recursive>
 800d622:	bf00      	nop
 800d624:	20001171 	.word	0x20001171

0800d628 <__sinit>:
 800d628:	b510      	push	{r4, lr}
 800d62a:	4604      	mov	r4, r0
 800d62c:	f7ff fff0 	bl	800d610 <__sfp_lock_acquire>
 800d630:	6a23      	ldr	r3, [r4, #32]
 800d632:	b11b      	cbz	r3, 800d63c <__sinit+0x14>
 800d634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d638:	f7ff bff0 	b.w	800d61c <__sfp_lock_release>
 800d63c:	4b04      	ldr	r3, [pc, #16]	@ (800d650 <__sinit+0x28>)
 800d63e:	6223      	str	r3, [r4, #32]
 800d640:	4b04      	ldr	r3, [pc, #16]	@ (800d654 <__sinit+0x2c>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d1f5      	bne.n	800d634 <__sinit+0xc>
 800d648:	f7ff ffc4 	bl	800d5d4 <global_stdio_init.part.0>
 800d64c:	e7f2      	b.n	800d634 <__sinit+0xc>
 800d64e:	bf00      	nop
 800d650:	0800d595 	.word	0x0800d595
 800d654:	20001168 	.word	0x20001168

0800d658 <_fwalk_sglue>:
 800d658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d65c:	4607      	mov	r7, r0
 800d65e:	4688      	mov	r8, r1
 800d660:	4614      	mov	r4, r2
 800d662:	2600      	movs	r6, #0
 800d664:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d668:	f1b9 0901 	subs.w	r9, r9, #1
 800d66c:	d505      	bpl.n	800d67a <_fwalk_sglue+0x22>
 800d66e:	6824      	ldr	r4, [r4, #0]
 800d670:	2c00      	cmp	r4, #0
 800d672:	d1f7      	bne.n	800d664 <_fwalk_sglue+0xc>
 800d674:	4630      	mov	r0, r6
 800d676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d67a:	89ab      	ldrh	r3, [r5, #12]
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d907      	bls.n	800d690 <_fwalk_sglue+0x38>
 800d680:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d684:	3301      	adds	r3, #1
 800d686:	d003      	beq.n	800d690 <_fwalk_sglue+0x38>
 800d688:	4629      	mov	r1, r5
 800d68a:	4638      	mov	r0, r7
 800d68c:	47c0      	blx	r8
 800d68e:	4306      	orrs	r6, r0
 800d690:	3568      	adds	r5, #104	@ 0x68
 800d692:	e7e9      	b.n	800d668 <_fwalk_sglue+0x10>

0800d694 <__sread>:
 800d694:	b510      	push	{r4, lr}
 800d696:	460c      	mov	r4, r1
 800d698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d69c:	f000 f87a 	bl	800d794 <_read_r>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	bfab      	itete	ge
 800d6a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d6a6:	89a3      	ldrhlt	r3, [r4, #12]
 800d6a8:	181b      	addge	r3, r3, r0
 800d6aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d6ae:	bfac      	ite	ge
 800d6b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d6b2:	81a3      	strhlt	r3, [r4, #12]
 800d6b4:	bd10      	pop	{r4, pc}

0800d6b6 <__swrite>:
 800d6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ba:	461f      	mov	r7, r3
 800d6bc:	898b      	ldrh	r3, [r1, #12]
 800d6be:	05db      	lsls	r3, r3, #23
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	460c      	mov	r4, r1
 800d6c4:	4616      	mov	r6, r2
 800d6c6:	d505      	bpl.n	800d6d4 <__swrite+0x1e>
 800d6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6cc:	2302      	movs	r3, #2
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f000 f84e 	bl	800d770 <_lseek_r>
 800d6d4:	89a3      	ldrh	r3, [r4, #12]
 800d6d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d6de:	81a3      	strh	r3, [r4, #12]
 800d6e0:	4632      	mov	r2, r6
 800d6e2:	463b      	mov	r3, r7
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ea:	f000 b865 	b.w	800d7b8 <_write_r>

0800d6ee <__sseek>:
 800d6ee:	b510      	push	{r4, lr}
 800d6f0:	460c      	mov	r4, r1
 800d6f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6f6:	f000 f83b 	bl	800d770 <_lseek_r>
 800d6fa:	1c43      	adds	r3, r0, #1
 800d6fc:	89a3      	ldrh	r3, [r4, #12]
 800d6fe:	bf15      	itete	ne
 800d700:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d702:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d706:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d70a:	81a3      	strheq	r3, [r4, #12]
 800d70c:	bf18      	it	ne
 800d70e:	81a3      	strhne	r3, [r4, #12]
 800d710:	bd10      	pop	{r4, pc}

0800d712 <__sclose>:
 800d712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d716:	f000 b81b 	b.w	800d750 <_close_r>

0800d71a <memset>:
 800d71a:	4402      	add	r2, r0
 800d71c:	4603      	mov	r3, r0
 800d71e:	4293      	cmp	r3, r2
 800d720:	d100      	bne.n	800d724 <memset+0xa>
 800d722:	4770      	bx	lr
 800d724:	f803 1b01 	strb.w	r1, [r3], #1
 800d728:	e7f9      	b.n	800d71e <memset+0x4>

0800d72a <strncmp>:
 800d72a:	b510      	push	{r4, lr}
 800d72c:	b16a      	cbz	r2, 800d74a <strncmp+0x20>
 800d72e:	3901      	subs	r1, #1
 800d730:	1884      	adds	r4, r0, r2
 800d732:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d736:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d103      	bne.n	800d746 <strncmp+0x1c>
 800d73e:	42a0      	cmp	r0, r4
 800d740:	d001      	beq.n	800d746 <strncmp+0x1c>
 800d742:	2a00      	cmp	r2, #0
 800d744:	d1f5      	bne.n	800d732 <strncmp+0x8>
 800d746:	1ad0      	subs	r0, r2, r3
 800d748:	bd10      	pop	{r4, pc}
 800d74a:	4610      	mov	r0, r2
 800d74c:	e7fc      	b.n	800d748 <strncmp+0x1e>
	...

0800d750 <_close_r>:
 800d750:	b538      	push	{r3, r4, r5, lr}
 800d752:	4d06      	ldr	r5, [pc, #24]	@ (800d76c <_close_r+0x1c>)
 800d754:	2300      	movs	r3, #0
 800d756:	4604      	mov	r4, r0
 800d758:	4608      	mov	r0, r1
 800d75a:	602b      	str	r3, [r5, #0]
 800d75c:	f7f6 f99c 	bl	8003a98 <_close>
 800d760:	1c43      	adds	r3, r0, #1
 800d762:	d102      	bne.n	800d76a <_close_r+0x1a>
 800d764:	682b      	ldr	r3, [r5, #0]
 800d766:	b103      	cbz	r3, 800d76a <_close_r+0x1a>
 800d768:	6023      	str	r3, [r4, #0]
 800d76a:	bd38      	pop	{r3, r4, r5, pc}
 800d76c:	2000116c 	.word	0x2000116c

0800d770 <_lseek_r>:
 800d770:	b538      	push	{r3, r4, r5, lr}
 800d772:	4d07      	ldr	r5, [pc, #28]	@ (800d790 <_lseek_r+0x20>)
 800d774:	4604      	mov	r4, r0
 800d776:	4608      	mov	r0, r1
 800d778:	4611      	mov	r1, r2
 800d77a:	2200      	movs	r2, #0
 800d77c:	602a      	str	r2, [r5, #0]
 800d77e:	461a      	mov	r2, r3
 800d780:	f7f6 f9b1 	bl	8003ae6 <_lseek>
 800d784:	1c43      	adds	r3, r0, #1
 800d786:	d102      	bne.n	800d78e <_lseek_r+0x1e>
 800d788:	682b      	ldr	r3, [r5, #0]
 800d78a:	b103      	cbz	r3, 800d78e <_lseek_r+0x1e>
 800d78c:	6023      	str	r3, [r4, #0]
 800d78e:	bd38      	pop	{r3, r4, r5, pc}
 800d790:	2000116c 	.word	0x2000116c

0800d794 <_read_r>:
 800d794:	b538      	push	{r3, r4, r5, lr}
 800d796:	4d07      	ldr	r5, [pc, #28]	@ (800d7b4 <_read_r+0x20>)
 800d798:	4604      	mov	r4, r0
 800d79a:	4608      	mov	r0, r1
 800d79c:	4611      	mov	r1, r2
 800d79e:	2200      	movs	r2, #0
 800d7a0:	602a      	str	r2, [r5, #0]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	f7f6 f93f 	bl	8003a26 <_read>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	d102      	bne.n	800d7b2 <_read_r+0x1e>
 800d7ac:	682b      	ldr	r3, [r5, #0]
 800d7ae:	b103      	cbz	r3, 800d7b2 <_read_r+0x1e>
 800d7b0:	6023      	str	r3, [r4, #0]
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}
 800d7b4:	2000116c 	.word	0x2000116c

0800d7b8 <_write_r>:
 800d7b8:	b538      	push	{r3, r4, r5, lr}
 800d7ba:	4d07      	ldr	r5, [pc, #28]	@ (800d7d8 <_write_r+0x20>)
 800d7bc:	4604      	mov	r4, r0
 800d7be:	4608      	mov	r0, r1
 800d7c0:	4611      	mov	r1, r2
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	602a      	str	r2, [r5, #0]
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	f7f6 f94a 	bl	8003a60 <_write>
 800d7cc:	1c43      	adds	r3, r0, #1
 800d7ce:	d102      	bne.n	800d7d6 <_write_r+0x1e>
 800d7d0:	682b      	ldr	r3, [r5, #0]
 800d7d2:	b103      	cbz	r3, 800d7d6 <_write_r+0x1e>
 800d7d4:	6023      	str	r3, [r4, #0]
 800d7d6:	bd38      	pop	{r3, r4, r5, pc}
 800d7d8:	2000116c 	.word	0x2000116c

0800d7dc <__errno>:
 800d7dc:	4b01      	ldr	r3, [pc, #4]	@ (800d7e4 <__errno+0x8>)
 800d7de:	6818      	ldr	r0, [r3, #0]
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	200001c0 	.word	0x200001c0

0800d7e8 <__libc_init_array>:
 800d7e8:	b570      	push	{r4, r5, r6, lr}
 800d7ea:	4d0d      	ldr	r5, [pc, #52]	@ (800d820 <__libc_init_array+0x38>)
 800d7ec:	4c0d      	ldr	r4, [pc, #52]	@ (800d824 <__libc_init_array+0x3c>)
 800d7ee:	1b64      	subs	r4, r4, r5
 800d7f0:	10a4      	asrs	r4, r4, #2
 800d7f2:	2600      	movs	r6, #0
 800d7f4:	42a6      	cmp	r6, r4
 800d7f6:	d109      	bne.n	800d80c <__libc_init_array+0x24>
 800d7f8:	4d0b      	ldr	r5, [pc, #44]	@ (800d828 <__libc_init_array+0x40>)
 800d7fa:	4c0c      	ldr	r4, [pc, #48]	@ (800d82c <__libc_init_array+0x44>)
 800d7fc:	f003 f82a 	bl	8010854 <_init>
 800d800:	1b64      	subs	r4, r4, r5
 800d802:	10a4      	asrs	r4, r4, #2
 800d804:	2600      	movs	r6, #0
 800d806:	42a6      	cmp	r6, r4
 800d808:	d105      	bne.n	800d816 <__libc_init_array+0x2e>
 800d80a:	bd70      	pop	{r4, r5, r6, pc}
 800d80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d810:	4798      	blx	r3
 800d812:	3601      	adds	r6, #1
 800d814:	e7ee      	b.n	800d7f4 <__libc_init_array+0xc>
 800d816:	f855 3b04 	ldr.w	r3, [r5], #4
 800d81a:	4798      	blx	r3
 800d81c:	3601      	adds	r6, #1
 800d81e:	e7f2      	b.n	800d806 <__libc_init_array+0x1e>
 800d820:	08010e98 	.word	0x08010e98
 800d824:	08010e98 	.word	0x08010e98
 800d828:	08010e98 	.word	0x08010e98
 800d82c:	08010e9c 	.word	0x08010e9c

0800d830 <__retarget_lock_init_recursive>:
 800d830:	4770      	bx	lr

0800d832 <__retarget_lock_acquire_recursive>:
 800d832:	4770      	bx	lr

0800d834 <__retarget_lock_release_recursive>:
 800d834:	4770      	bx	lr

0800d836 <memcpy>:
 800d836:	440a      	add	r2, r1
 800d838:	4291      	cmp	r1, r2
 800d83a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d83e:	d100      	bne.n	800d842 <memcpy+0xc>
 800d840:	4770      	bx	lr
 800d842:	b510      	push	{r4, lr}
 800d844:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d848:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d84c:	4291      	cmp	r1, r2
 800d84e:	d1f9      	bne.n	800d844 <memcpy+0xe>
 800d850:	bd10      	pop	{r4, pc}
 800d852:	0000      	movs	r0, r0
 800d854:	0000      	movs	r0, r0
	...

0800d858 <nan>:
 800d858:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d860 <nan+0x8>
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	00000000 	.word	0x00000000
 800d864:	7ff80000 	.word	0x7ff80000

0800d868 <_free_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4605      	mov	r5, r0
 800d86c:	2900      	cmp	r1, #0
 800d86e:	d041      	beq.n	800d8f4 <_free_r+0x8c>
 800d870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d874:	1f0c      	subs	r4, r1, #4
 800d876:	2b00      	cmp	r3, #0
 800d878:	bfb8      	it	lt
 800d87a:	18e4      	addlt	r4, r4, r3
 800d87c:	f000 fc2c 	bl	800e0d8 <__malloc_lock>
 800d880:	4a1d      	ldr	r2, [pc, #116]	@ (800d8f8 <_free_r+0x90>)
 800d882:	6813      	ldr	r3, [r2, #0]
 800d884:	b933      	cbnz	r3, 800d894 <_free_r+0x2c>
 800d886:	6063      	str	r3, [r4, #4]
 800d888:	6014      	str	r4, [r2, #0]
 800d88a:	4628      	mov	r0, r5
 800d88c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d890:	f000 bc28 	b.w	800e0e4 <__malloc_unlock>
 800d894:	42a3      	cmp	r3, r4
 800d896:	d908      	bls.n	800d8aa <_free_r+0x42>
 800d898:	6820      	ldr	r0, [r4, #0]
 800d89a:	1821      	adds	r1, r4, r0
 800d89c:	428b      	cmp	r3, r1
 800d89e:	bf01      	itttt	eq
 800d8a0:	6819      	ldreq	r1, [r3, #0]
 800d8a2:	685b      	ldreq	r3, [r3, #4]
 800d8a4:	1809      	addeq	r1, r1, r0
 800d8a6:	6021      	streq	r1, [r4, #0]
 800d8a8:	e7ed      	b.n	800d886 <_free_r+0x1e>
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	b10b      	cbz	r3, 800d8b4 <_free_r+0x4c>
 800d8b0:	42a3      	cmp	r3, r4
 800d8b2:	d9fa      	bls.n	800d8aa <_free_r+0x42>
 800d8b4:	6811      	ldr	r1, [r2, #0]
 800d8b6:	1850      	adds	r0, r2, r1
 800d8b8:	42a0      	cmp	r0, r4
 800d8ba:	d10b      	bne.n	800d8d4 <_free_r+0x6c>
 800d8bc:	6820      	ldr	r0, [r4, #0]
 800d8be:	4401      	add	r1, r0
 800d8c0:	1850      	adds	r0, r2, r1
 800d8c2:	4283      	cmp	r3, r0
 800d8c4:	6011      	str	r1, [r2, #0]
 800d8c6:	d1e0      	bne.n	800d88a <_free_r+0x22>
 800d8c8:	6818      	ldr	r0, [r3, #0]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	6053      	str	r3, [r2, #4]
 800d8ce:	4408      	add	r0, r1
 800d8d0:	6010      	str	r0, [r2, #0]
 800d8d2:	e7da      	b.n	800d88a <_free_r+0x22>
 800d8d4:	d902      	bls.n	800d8dc <_free_r+0x74>
 800d8d6:	230c      	movs	r3, #12
 800d8d8:	602b      	str	r3, [r5, #0]
 800d8da:	e7d6      	b.n	800d88a <_free_r+0x22>
 800d8dc:	6820      	ldr	r0, [r4, #0]
 800d8de:	1821      	adds	r1, r4, r0
 800d8e0:	428b      	cmp	r3, r1
 800d8e2:	bf04      	itt	eq
 800d8e4:	6819      	ldreq	r1, [r3, #0]
 800d8e6:	685b      	ldreq	r3, [r3, #4]
 800d8e8:	6063      	str	r3, [r4, #4]
 800d8ea:	bf04      	itt	eq
 800d8ec:	1809      	addeq	r1, r1, r0
 800d8ee:	6021      	streq	r1, [r4, #0]
 800d8f0:	6054      	str	r4, [r2, #4]
 800d8f2:	e7ca      	b.n	800d88a <_free_r+0x22>
 800d8f4:	bd38      	pop	{r3, r4, r5, pc}
 800d8f6:	bf00      	nop
 800d8f8:	20001178 	.word	0x20001178

0800d8fc <rshift>:
 800d8fc:	6903      	ldr	r3, [r0, #16]
 800d8fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d906:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d90a:	f100 0414 	add.w	r4, r0, #20
 800d90e:	dd45      	ble.n	800d99c <rshift+0xa0>
 800d910:	f011 011f 	ands.w	r1, r1, #31
 800d914:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d918:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d91c:	d10c      	bne.n	800d938 <rshift+0x3c>
 800d91e:	f100 0710 	add.w	r7, r0, #16
 800d922:	4629      	mov	r1, r5
 800d924:	42b1      	cmp	r1, r6
 800d926:	d334      	bcc.n	800d992 <rshift+0x96>
 800d928:	1a9b      	subs	r3, r3, r2
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	1eea      	subs	r2, r5, #3
 800d92e:	4296      	cmp	r6, r2
 800d930:	bf38      	it	cc
 800d932:	2300      	movcc	r3, #0
 800d934:	4423      	add	r3, r4
 800d936:	e015      	b.n	800d964 <rshift+0x68>
 800d938:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d93c:	f1c1 0820 	rsb	r8, r1, #32
 800d940:	40cf      	lsrs	r7, r1
 800d942:	f105 0e04 	add.w	lr, r5, #4
 800d946:	46a1      	mov	r9, r4
 800d948:	4576      	cmp	r6, lr
 800d94a:	46f4      	mov	ip, lr
 800d94c:	d815      	bhi.n	800d97a <rshift+0x7e>
 800d94e:	1a9a      	subs	r2, r3, r2
 800d950:	0092      	lsls	r2, r2, #2
 800d952:	3a04      	subs	r2, #4
 800d954:	3501      	adds	r5, #1
 800d956:	42ae      	cmp	r6, r5
 800d958:	bf38      	it	cc
 800d95a:	2200      	movcc	r2, #0
 800d95c:	18a3      	adds	r3, r4, r2
 800d95e:	50a7      	str	r7, [r4, r2]
 800d960:	b107      	cbz	r7, 800d964 <rshift+0x68>
 800d962:	3304      	adds	r3, #4
 800d964:	1b1a      	subs	r2, r3, r4
 800d966:	42a3      	cmp	r3, r4
 800d968:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d96c:	bf08      	it	eq
 800d96e:	2300      	moveq	r3, #0
 800d970:	6102      	str	r2, [r0, #16]
 800d972:	bf08      	it	eq
 800d974:	6143      	streq	r3, [r0, #20]
 800d976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d97a:	f8dc c000 	ldr.w	ip, [ip]
 800d97e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d982:	ea4c 0707 	orr.w	r7, ip, r7
 800d986:	f849 7b04 	str.w	r7, [r9], #4
 800d98a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d98e:	40cf      	lsrs	r7, r1
 800d990:	e7da      	b.n	800d948 <rshift+0x4c>
 800d992:	f851 cb04 	ldr.w	ip, [r1], #4
 800d996:	f847 cf04 	str.w	ip, [r7, #4]!
 800d99a:	e7c3      	b.n	800d924 <rshift+0x28>
 800d99c:	4623      	mov	r3, r4
 800d99e:	e7e1      	b.n	800d964 <rshift+0x68>

0800d9a0 <__hexdig_fun>:
 800d9a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d9a4:	2b09      	cmp	r3, #9
 800d9a6:	d802      	bhi.n	800d9ae <__hexdig_fun+0xe>
 800d9a8:	3820      	subs	r0, #32
 800d9aa:	b2c0      	uxtb	r0, r0
 800d9ac:	4770      	bx	lr
 800d9ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d9b2:	2b05      	cmp	r3, #5
 800d9b4:	d801      	bhi.n	800d9ba <__hexdig_fun+0x1a>
 800d9b6:	3847      	subs	r0, #71	@ 0x47
 800d9b8:	e7f7      	b.n	800d9aa <__hexdig_fun+0xa>
 800d9ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d9be:	2b05      	cmp	r3, #5
 800d9c0:	d801      	bhi.n	800d9c6 <__hexdig_fun+0x26>
 800d9c2:	3827      	subs	r0, #39	@ 0x27
 800d9c4:	e7f1      	b.n	800d9aa <__hexdig_fun+0xa>
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	4770      	bx	lr
	...

0800d9cc <__gethex>:
 800d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d0:	b085      	sub	sp, #20
 800d9d2:	468a      	mov	sl, r1
 800d9d4:	9302      	str	r3, [sp, #8]
 800d9d6:	680b      	ldr	r3, [r1, #0]
 800d9d8:	9001      	str	r0, [sp, #4]
 800d9da:	4690      	mov	r8, r2
 800d9dc:	1c9c      	adds	r4, r3, #2
 800d9de:	46a1      	mov	r9, r4
 800d9e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d9e4:	2830      	cmp	r0, #48	@ 0x30
 800d9e6:	d0fa      	beq.n	800d9de <__gethex+0x12>
 800d9e8:	eba9 0303 	sub.w	r3, r9, r3
 800d9ec:	f1a3 0b02 	sub.w	fp, r3, #2
 800d9f0:	f7ff ffd6 	bl	800d9a0 <__hexdig_fun>
 800d9f4:	4605      	mov	r5, r0
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d168      	bne.n	800dacc <__gethex+0x100>
 800d9fa:	49a0      	ldr	r1, [pc, #640]	@ (800dc7c <__gethex+0x2b0>)
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	4648      	mov	r0, r9
 800da00:	f7ff fe93 	bl	800d72a <strncmp>
 800da04:	4607      	mov	r7, r0
 800da06:	2800      	cmp	r0, #0
 800da08:	d167      	bne.n	800dada <__gethex+0x10e>
 800da0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800da0e:	4626      	mov	r6, r4
 800da10:	f7ff ffc6 	bl	800d9a0 <__hexdig_fun>
 800da14:	2800      	cmp	r0, #0
 800da16:	d062      	beq.n	800dade <__gethex+0x112>
 800da18:	4623      	mov	r3, r4
 800da1a:	7818      	ldrb	r0, [r3, #0]
 800da1c:	2830      	cmp	r0, #48	@ 0x30
 800da1e:	4699      	mov	r9, r3
 800da20:	f103 0301 	add.w	r3, r3, #1
 800da24:	d0f9      	beq.n	800da1a <__gethex+0x4e>
 800da26:	f7ff ffbb 	bl	800d9a0 <__hexdig_fun>
 800da2a:	fab0 f580 	clz	r5, r0
 800da2e:	096d      	lsrs	r5, r5, #5
 800da30:	f04f 0b01 	mov.w	fp, #1
 800da34:	464a      	mov	r2, r9
 800da36:	4616      	mov	r6, r2
 800da38:	3201      	adds	r2, #1
 800da3a:	7830      	ldrb	r0, [r6, #0]
 800da3c:	f7ff ffb0 	bl	800d9a0 <__hexdig_fun>
 800da40:	2800      	cmp	r0, #0
 800da42:	d1f8      	bne.n	800da36 <__gethex+0x6a>
 800da44:	498d      	ldr	r1, [pc, #564]	@ (800dc7c <__gethex+0x2b0>)
 800da46:	2201      	movs	r2, #1
 800da48:	4630      	mov	r0, r6
 800da4a:	f7ff fe6e 	bl	800d72a <strncmp>
 800da4e:	2800      	cmp	r0, #0
 800da50:	d13f      	bne.n	800dad2 <__gethex+0x106>
 800da52:	b944      	cbnz	r4, 800da66 <__gethex+0x9a>
 800da54:	1c74      	adds	r4, r6, #1
 800da56:	4622      	mov	r2, r4
 800da58:	4616      	mov	r6, r2
 800da5a:	3201      	adds	r2, #1
 800da5c:	7830      	ldrb	r0, [r6, #0]
 800da5e:	f7ff ff9f 	bl	800d9a0 <__hexdig_fun>
 800da62:	2800      	cmp	r0, #0
 800da64:	d1f8      	bne.n	800da58 <__gethex+0x8c>
 800da66:	1ba4      	subs	r4, r4, r6
 800da68:	00a7      	lsls	r7, r4, #2
 800da6a:	7833      	ldrb	r3, [r6, #0]
 800da6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800da70:	2b50      	cmp	r3, #80	@ 0x50
 800da72:	d13e      	bne.n	800daf2 <__gethex+0x126>
 800da74:	7873      	ldrb	r3, [r6, #1]
 800da76:	2b2b      	cmp	r3, #43	@ 0x2b
 800da78:	d033      	beq.n	800dae2 <__gethex+0x116>
 800da7a:	2b2d      	cmp	r3, #45	@ 0x2d
 800da7c:	d034      	beq.n	800dae8 <__gethex+0x11c>
 800da7e:	1c71      	adds	r1, r6, #1
 800da80:	2400      	movs	r4, #0
 800da82:	7808      	ldrb	r0, [r1, #0]
 800da84:	f7ff ff8c 	bl	800d9a0 <__hexdig_fun>
 800da88:	1e43      	subs	r3, r0, #1
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	2b18      	cmp	r3, #24
 800da8e:	d830      	bhi.n	800daf2 <__gethex+0x126>
 800da90:	f1a0 0210 	sub.w	r2, r0, #16
 800da94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800da98:	f7ff ff82 	bl	800d9a0 <__hexdig_fun>
 800da9c:	f100 3cff 	add.w	ip, r0, #4294967295
 800daa0:	fa5f fc8c 	uxtb.w	ip, ip
 800daa4:	f1bc 0f18 	cmp.w	ip, #24
 800daa8:	f04f 030a 	mov.w	r3, #10
 800daac:	d91e      	bls.n	800daec <__gethex+0x120>
 800daae:	b104      	cbz	r4, 800dab2 <__gethex+0xe6>
 800dab0:	4252      	negs	r2, r2
 800dab2:	4417      	add	r7, r2
 800dab4:	f8ca 1000 	str.w	r1, [sl]
 800dab8:	b1ed      	cbz	r5, 800daf6 <__gethex+0x12a>
 800daba:	f1bb 0f00 	cmp.w	fp, #0
 800dabe:	bf0c      	ite	eq
 800dac0:	2506      	moveq	r5, #6
 800dac2:	2500      	movne	r5, #0
 800dac4:	4628      	mov	r0, r5
 800dac6:	b005      	add	sp, #20
 800dac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dacc:	2500      	movs	r5, #0
 800dace:	462c      	mov	r4, r5
 800dad0:	e7b0      	b.n	800da34 <__gethex+0x68>
 800dad2:	2c00      	cmp	r4, #0
 800dad4:	d1c7      	bne.n	800da66 <__gethex+0x9a>
 800dad6:	4627      	mov	r7, r4
 800dad8:	e7c7      	b.n	800da6a <__gethex+0x9e>
 800dada:	464e      	mov	r6, r9
 800dadc:	462f      	mov	r7, r5
 800dade:	2501      	movs	r5, #1
 800dae0:	e7c3      	b.n	800da6a <__gethex+0x9e>
 800dae2:	2400      	movs	r4, #0
 800dae4:	1cb1      	adds	r1, r6, #2
 800dae6:	e7cc      	b.n	800da82 <__gethex+0xb6>
 800dae8:	2401      	movs	r4, #1
 800daea:	e7fb      	b.n	800dae4 <__gethex+0x118>
 800daec:	fb03 0002 	mla	r0, r3, r2, r0
 800daf0:	e7ce      	b.n	800da90 <__gethex+0xc4>
 800daf2:	4631      	mov	r1, r6
 800daf4:	e7de      	b.n	800dab4 <__gethex+0xe8>
 800daf6:	eba6 0309 	sub.w	r3, r6, r9
 800dafa:	3b01      	subs	r3, #1
 800dafc:	4629      	mov	r1, r5
 800dafe:	2b07      	cmp	r3, #7
 800db00:	dc0a      	bgt.n	800db18 <__gethex+0x14c>
 800db02:	9801      	ldr	r0, [sp, #4]
 800db04:	f000 faf4 	bl	800e0f0 <_Balloc>
 800db08:	4604      	mov	r4, r0
 800db0a:	b940      	cbnz	r0, 800db1e <__gethex+0x152>
 800db0c:	4b5c      	ldr	r3, [pc, #368]	@ (800dc80 <__gethex+0x2b4>)
 800db0e:	4602      	mov	r2, r0
 800db10:	21e4      	movs	r1, #228	@ 0xe4
 800db12:	485c      	ldr	r0, [pc, #368]	@ (800dc84 <__gethex+0x2b8>)
 800db14:	f001 f868 	bl	800ebe8 <__assert_func>
 800db18:	3101      	adds	r1, #1
 800db1a:	105b      	asrs	r3, r3, #1
 800db1c:	e7ef      	b.n	800dafe <__gethex+0x132>
 800db1e:	f100 0a14 	add.w	sl, r0, #20
 800db22:	2300      	movs	r3, #0
 800db24:	4655      	mov	r5, sl
 800db26:	469b      	mov	fp, r3
 800db28:	45b1      	cmp	r9, r6
 800db2a:	d337      	bcc.n	800db9c <__gethex+0x1d0>
 800db2c:	f845 bb04 	str.w	fp, [r5], #4
 800db30:	eba5 050a 	sub.w	r5, r5, sl
 800db34:	10ad      	asrs	r5, r5, #2
 800db36:	6125      	str	r5, [r4, #16]
 800db38:	4658      	mov	r0, fp
 800db3a:	f000 fbcb 	bl	800e2d4 <__hi0bits>
 800db3e:	016d      	lsls	r5, r5, #5
 800db40:	f8d8 6000 	ldr.w	r6, [r8]
 800db44:	1a2d      	subs	r5, r5, r0
 800db46:	42b5      	cmp	r5, r6
 800db48:	dd54      	ble.n	800dbf4 <__gethex+0x228>
 800db4a:	1bad      	subs	r5, r5, r6
 800db4c:	4629      	mov	r1, r5
 800db4e:	4620      	mov	r0, r4
 800db50:	f000 ff5f 	bl	800ea12 <__any_on>
 800db54:	4681      	mov	r9, r0
 800db56:	b178      	cbz	r0, 800db78 <__gethex+0x1ac>
 800db58:	1e6b      	subs	r3, r5, #1
 800db5a:	1159      	asrs	r1, r3, #5
 800db5c:	f003 021f 	and.w	r2, r3, #31
 800db60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800db64:	f04f 0901 	mov.w	r9, #1
 800db68:	fa09 f202 	lsl.w	r2, r9, r2
 800db6c:	420a      	tst	r2, r1
 800db6e:	d003      	beq.n	800db78 <__gethex+0x1ac>
 800db70:	454b      	cmp	r3, r9
 800db72:	dc36      	bgt.n	800dbe2 <__gethex+0x216>
 800db74:	f04f 0902 	mov.w	r9, #2
 800db78:	4629      	mov	r1, r5
 800db7a:	4620      	mov	r0, r4
 800db7c:	f7ff febe 	bl	800d8fc <rshift>
 800db80:	442f      	add	r7, r5
 800db82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db86:	42bb      	cmp	r3, r7
 800db88:	da42      	bge.n	800dc10 <__gethex+0x244>
 800db8a:	9801      	ldr	r0, [sp, #4]
 800db8c:	4621      	mov	r1, r4
 800db8e:	f000 faef 	bl	800e170 <_Bfree>
 800db92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db94:	2300      	movs	r3, #0
 800db96:	6013      	str	r3, [r2, #0]
 800db98:	25a3      	movs	r5, #163	@ 0xa3
 800db9a:	e793      	b.n	800dac4 <__gethex+0xf8>
 800db9c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dba0:	2a2e      	cmp	r2, #46	@ 0x2e
 800dba2:	d012      	beq.n	800dbca <__gethex+0x1fe>
 800dba4:	2b20      	cmp	r3, #32
 800dba6:	d104      	bne.n	800dbb2 <__gethex+0x1e6>
 800dba8:	f845 bb04 	str.w	fp, [r5], #4
 800dbac:	f04f 0b00 	mov.w	fp, #0
 800dbb0:	465b      	mov	r3, fp
 800dbb2:	7830      	ldrb	r0, [r6, #0]
 800dbb4:	9303      	str	r3, [sp, #12]
 800dbb6:	f7ff fef3 	bl	800d9a0 <__hexdig_fun>
 800dbba:	9b03      	ldr	r3, [sp, #12]
 800dbbc:	f000 000f 	and.w	r0, r0, #15
 800dbc0:	4098      	lsls	r0, r3
 800dbc2:	ea4b 0b00 	orr.w	fp, fp, r0
 800dbc6:	3304      	adds	r3, #4
 800dbc8:	e7ae      	b.n	800db28 <__gethex+0x15c>
 800dbca:	45b1      	cmp	r9, r6
 800dbcc:	d8ea      	bhi.n	800dba4 <__gethex+0x1d8>
 800dbce:	492b      	ldr	r1, [pc, #172]	@ (800dc7c <__gethex+0x2b0>)
 800dbd0:	9303      	str	r3, [sp, #12]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f7ff fda8 	bl	800d72a <strncmp>
 800dbda:	9b03      	ldr	r3, [sp, #12]
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	d1e1      	bne.n	800dba4 <__gethex+0x1d8>
 800dbe0:	e7a2      	b.n	800db28 <__gethex+0x15c>
 800dbe2:	1ea9      	subs	r1, r5, #2
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f000 ff14 	bl	800ea12 <__any_on>
 800dbea:	2800      	cmp	r0, #0
 800dbec:	d0c2      	beq.n	800db74 <__gethex+0x1a8>
 800dbee:	f04f 0903 	mov.w	r9, #3
 800dbf2:	e7c1      	b.n	800db78 <__gethex+0x1ac>
 800dbf4:	da09      	bge.n	800dc0a <__gethex+0x23e>
 800dbf6:	1b75      	subs	r5, r6, r5
 800dbf8:	4621      	mov	r1, r4
 800dbfa:	9801      	ldr	r0, [sp, #4]
 800dbfc:	462a      	mov	r2, r5
 800dbfe:	f000 fccf 	bl	800e5a0 <__lshift>
 800dc02:	1b7f      	subs	r7, r7, r5
 800dc04:	4604      	mov	r4, r0
 800dc06:	f100 0a14 	add.w	sl, r0, #20
 800dc0a:	f04f 0900 	mov.w	r9, #0
 800dc0e:	e7b8      	b.n	800db82 <__gethex+0x1b6>
 800dc10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dc14:	42bd      	cmp	r5, r7
 800dc16:	dd6f      	ble.n	800dcf8 <__gethex+0x32c>
 800dc18:	1bed      	subs	r5, r5, r7
 800dc1a:	42ae      	cmp	r6, r5
 800dc1c:	dc34      	bgt.n	800dc88 <__gethex+0x2bc>
 800dc1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc22:	2b02      	cmp	r3, #2
 800dc24:	d022      	beq.n	800dc6c <__gethex+0x2a0>
 800dc26:	2b03      	cmp	r3, #3
 800dc28:	d024      	beq.n	800dc74 <__gethex+0x2a8>
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d115      	bne.n	800dc5a <__gethex+0x28e>
 800dc2e:	42ae      	cmp	r6, r5
 800dc30:	d113      	bne.n	800dc5a <__gethex+0x28e>
 800dc32:	2e01      	cmp	r6, #1
 800dc34:	d10b      	bne.n	800dc4e <__gethex+0x282>
 800dc36:	9a02      	ldr	r2, [sp, #8]
 800dc38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc3c:	6013      	str	r3, [r2, #0]
 800dc3e:	2301      	movs	r3, #1
 800dc40:	6123      	str	r3, [r4, #16]
 800dc42:	f8ca 3000 	str.w	r3, [sl]
 800dc46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc48:	2562      	movs	r5, #98	@ 0x62
 800dc4a:	601c      	str	r4, [r3, #0]
 800dc4c:	e73a      	b.n	800dac4 <__gethex+0xf8>
 800dc4e:	1e71      	subs	r1, r6, #1
 800dc50:	4620      	mov	r0, r4
 800dc52:	f000 fede 	bl	800ea12 <__any_on>
 800dc56:	2800      	cmp	r0, #0
 800dc58:	d1ed      	bne.n	800dc36 <__gethex+0x26a>
 800dc5a:	9801      	ldr	r0, [sp, #4]
 800dc5c:	4621      	mov	r1, r4
 800dc5e:	f000 fa87 	bl	800e170 <_Bfree>
 800dc62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc64:	2300      	movs	r3, #0
 800dc66:	6013      	str	r3, [r2, #0]
 800dc68:	2550      	movs	r5, #80	@ 0x50
 800dc6a:	e72b      	b.n	800dac4 <__gethex+0xf8>
 800dc6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d1f3      	bne.n	800dc5a <__gethex+0x28e>
 800dc72:	e7e0      	b.n	800dc36 <__gethex+0x26a>
 800dc74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1dd      	bne.n	800dc36 <__gethex+0x26a>
 800dc7a:	e7ee      	b.n	800dc5a <__gethex+0x28e>
 800dc7c:	080108f0 	.word	0x080108f0
 800dc80:	08010958 	.word	0x08010958
 800dc84:	08010969 	.word	0x08010969
 800dc88:	1e6f      	subs	r7, r5, #1
 800dc8a:	f1b9 0f00 	cmp.w	r9, #0
 800dc8e:	d130      	bne.n	800dcf2 <__gethex+0x326>
 800dc90:	b127      	cbz	r7, 800dc9c <__gethex+0x2d0>
 800dc92:	4639      	mov	r1, r7
 800dc94:	4620      	mov	r0, r4
 800dc96:	f000 febc 	bl	800ea12 <__any_on>
 800dc9a:	4681      	mov	r9, r0
 800dc9c:	117a      	asrs	r2, r7, #5
 800dc9e:	2301      	movs	r3, #1
 800dca0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dca4:	f007 071f 	and.w	r7, r7, #31
 800dca8:	40bb      	lsls	r3, r7
 800dcaa:	4213      	tst	r3, r2
 800dcac:	4629      	mov	r1, r5
 800dcae:	4620      	mov	r0, r4
 800dcb0:	bf18      	it	ne
 800dcb2:	f049 0902 	orrne.w	r9, r9, #2
 800dcb6:	f7ff fe21 	bl	800d8fc <rshift>
 800dcba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dcbe:	1b76      	subs	r6, r6, r5
 800dcc0:	2502      	movs	r5, #2
 800dcc2:	f1b9 0f00 	cmp.w	r9, #0
 800dcc6:	d047      	beq.n	800dd58 <__gethex+0x38c>
 800dcc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	d015      	beq.n	800dcfc <__gethex+0x330>
 800dcd0:	2b03      	cmp	r3, #3
 800dcd2:	d017      	beq.n	800dd04 <__gethex+0x338>
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d109      	bne.n	800dcec <__gethex+0x320>
 800dcd8:	f019 0f02 	tst.w	r9, #2
 800dcdc:	d006      	beq.n	800dcec <__gethex+0x320>
 800dcde:	f8da 3000 	ldr.w	r3, [sl]
 800dce2:	ea49 0903 	orr.w	r9, r9, r3
 800dce6:	f019 0f01 	tst.w	r9, #1
 800dcea:	d10e      	bne.n	800dd0a <__gethex+0x33e>
 800dcec:	f045 0510 	orr.w	r5, r5, #16
 800dcf0:	e032      	b.n	800dd58 <__gethex+0x38c>
 800dcf2:	f04f 0901 	mov.w	r9, #1
 800dcf6:	e7d1      	b.n	800dc9c <__gethex+0x2d0>
 800dcf8:	2501      	movs	r5, #1
 800dcfa:	e7e2      	b.n	800dcc2 <__gethex+0x2f6>
 800dcfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcfe:	f1c3 0301 	rsb	r3, r3, #1
 800dd02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dd04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d0f0      	beq.n	800dcec <__gethex+0x320>
 800dd0a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dd0e:	f104 0314 	add.w	r3, r4, #20
 800dd12:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dd16:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dd1a:	f04f 0c00 	mov.w	ip, #0
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd24:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dd28:	d01b      	beq.n	800dd62 <__gethex+0x396>
 800dd2a:	3201      	adds	r2, #1
 800dd2c:	6002      	str	r2, [r0, #0]
 800dd2e:	2d02      	cmp	r5, #2
 800dd30:	f104 0314 	add.w	r3, r4, #20
 800dd34:	d13c      	bne.n	800ddb0 <__gethex+0x3e4>
 800dd36:	f8d8 2000 	ldr.w	r2, [r8]
 800dd3a:	3a01      	subs	r2, #1
 800dd3c:	42b2      	cmp	r2, r6
 800dd3e:	d109      	bne.n	800dd54 <__gethex+0x388>
 800dd40:	1171      	asrs	r1, r6, #5
 800dd42:	2201      	movs	r2, #1
 800dd44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd48:	f006 061f 	and.w	r6, r6, #31
 800dd4c:	fa02 f606 	lsl.w	r6, r2, r6
 800dd50:	421e      	tst	r6, r3
 800dd52:	d13a      	bne.n	800ddca <__gethex+0x3fe>
 800dd54:	f045 0520 	orr.w	r5, r5, #32
 800dd58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd5a:	601c      	str	r4, [r3, #0]
 800dd5c:	9b02      	ldr	r3, [sp, #8]
 800dd5e:	601f      	str	r7, [r3, #0]
 800dd60:	e6b0      	b.n	800dac4 <__gethex+0xf8>
 800dd62:	4299      	cmp	r1, r3
 800dd64:	f843 cc04 	str.w	ip, [r3, #-4]
 800dd68:	d8d9      	bhi.n	800dd1e <__gethex+0x352>
 800dd6a:	68a3      	ldr	r3, [r4, #8]
 800dd6c:	459b      	cmp	fp, r3
 800dd6e:	db17      	blt.n	800dda0 <__gethex+0x3d4>
 800dd70:	6861      	ldr	r1, [r4, #4]
 800dd72:	9801      	ldr	r0, [sp, #4]
 800dd74:	3101      	adds	r1, #1
 800dd76:	f000 f9bb 	bl	800e0f0 <_Balloc>
 800dd7a:	4681      	mov	r9, r0
 800dd7c:	b918      	cbnz	r0, 800dd86 <__gethex+0x3ba>
 800dd7e:	4b1a      	ldr	r3, [pc, #104]	@ (800dde8 <__gethex+0x41c>)
 800dd80:	4602      	mov	r2, r0
 800dd82:	2184      	movs	r1, #132	@ 0x84
 800dd84:	e6c5      	b.n	800db12 <__gethex+0x146>
 800dd86:	6922      	ldr	r2, [r4, #16]
 800dd88:	3202      	adds	r2, #2
 800dd8a:	f104 010c 	add.w	r1, r4, #12
 800dd8e:	0092      	lsls	r2, r2, #2
 800dd90:	300c      	adds	r0, #12
 800dd92:	f7ff fd50 	bl	800d836 <memcpy>
 800dd96:	4621      	mov	r1, r4
 800dd98:	9801      	ldr	r0, [sp, #4]
 800dd9a:	f000 f9e9 	bl	800e170 <_Bfree>
 800dd9e:	464c      	mov	r4, r9
 800dda0:	6923      	ldr	r3, [r4, #16]
 800dda2:	1c5a      	adds	r2, r3, #1
 800dda4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dda8:	6122      	str	r2, [r4, #16]
 800ddaa:	2201      	movs	r2, #1
 800ddac:	615a      	str	r2, [r3, #20]
 800ddae:	e7be      	b.n	800dd2e <__gethex+0x362>
 800ddb0:	6922      	ldr	r2, [r4, #16]
 800ddb2:	455a      	cmp	r2, fp
 800ddb4:	dd0b      	ble.n	800ddce <__gethex+0x402>
 800ddb6:	2101      	movs	r1, #1
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f7ff fd9f 	bl	800d8fc <rshift>
 800ddbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddc2:	3701      	adds	r7, #1
 800ddc4:	42bb      	cmp	r3, r7
 800ddc6:	f6ff aee0 	blt.w	800db8a <__gethex+0x1be>
 800ddca:	2501      	movs	r5, #1
 800ddcc:	e7c2      	b.n	800dd54 <__gethex+0x388>
 800ddce:	f016 061f 	ands.w	r6, r6, #31
 800ddd2:	d0fa      	beq.n	800ddca <__gethex+0x3fe>
 800ddd4:	4453      	add	r3, sl
 800ddd6:	f1c6 0620 	rsb	r6, r6, #32
 800ddda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ddde:	f000 fa79 	bl	800e2d4 <__hi0bits>
 800dde2:	42b0      	cmp	r0, r6
 800dde4:	dbe7      	blt.n	800ddb6 <__gethex+0x3ea>
 800dde6:	e7f0      	b.n	800ddca <__gethex+0x3fe>
 800dde8:	08010958 	.word	0x08010958

0800ddec <L_shift>:
 800ddec:	f1c2 0208 	rsb	r2, r2, #8
 800ddf0:	0092      	lsls	r2, r2, #2
 800ddf2:	b570      	push	{r4, r5, r6, lr}
 800ddf4:	f1c2 0620 	rsb	r6, r2, #32
 800ddf8:	6843      	ldr	r3, [r0, #4]
 800ddfa:	6804      	ldr	r4, [r0, #0]
 800ddfc:	fa03 f506 	lsl.w	r5, r3, r6
 800de00:	432c      	orrs	r4, r5
 800de02:	40d3      	lsrs	r3, r2
 800de04:	6004      	str	r4, [r0, #0]
 800de06:	f840 3f04 	str.w	r3, [r0, #4]!
 800de0a:	4288      	cmp	r0, r1
 800de0c:	d3f4      	bcc.n	800ddf8 <L_shift+0xc>
 800de0e:	bd70      	pop	{r4, r5, r6, pc}

0800de10 <__match>:
 800de10:	b530      	push	{r4, r5, lr}
 800de12:	6803      	ldr	r3, [r0, #0]
 800de14:	3301      	adds	r3, #1
 800de16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de1a:	b914      	cbnz	r4, 800de22 <__match+0x12>
 800de1c:	6003      	str	r3, [r0, #0]
 800de1e:	2001      	movs	r0, #1
 800de20:	bd30      	pop	{r4, r5, pc}
 800de22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800de2a:	2d19      	cmp	r5, #25
 800de2c:	bf98      	it	ls
 800de2e:	3220      	addls	r2, #32
 800de30:	42a2      	cmp	r2, r4
 800de32:	d0f0      	beq.n	800de16 <__match+0x6>
 800de34:	2000      	movs	r0, #0
 800de36:	e7f3      	b.n	800de20 <__match+0x10>

0800de38 <__hexnan>:
 800de38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3c:	680b      	ldr	r3, [r1, #0]
 800de3e:	6801      	ldr	r1, [r0, #0]
 800de40:	115e      	asrs	r6, r3, #5
 800de42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800de46:	f013 031f 	ands.w	r3, r3, #31
 800de4a:	b087      	sub	sp, #28
 800de4c:	bf18      	it	ne
 800de4e:	3604      	addne	r6, #4
 800de50:	2500      	movs	r5, #0
 800de52:	1f37      	subs	r7, r6, #4
 800de54:	4682      	mov	sl, r0
 800de56:	4690      	mov	r8, r2
 800de58:	9301      	str	r3, [sp, #4]
 800de5a:	f846 5c04 	str.w	r5, [r6, #-4]
 800de5e:	46b9      	mov	r9, r7
 800de60:	463c      	mov	r4, r7
 800de62:	9502      	str	r5, [sp, #8]
 800de64:	46ab      	mov	fp, r5
 800de66:	784a      	ldrb	r2, [r1, #1]
 800de68:	1c4b      	adds	r3, r1, #1
 800de6a:	9303      	str	r3, [sp, #12]
 800de6c:	b342      	cbz	r2, 800dec0 <__hexnan+0x88>
 800de6e:	4610      	mov	r0, r2
 800de70:	9105      	str	r1, [sp, #20]
 800de72:	9204      	str	r2, [sp, #16]
 800de74:	f7ff fd94 	bl	800d9a0 <__hexdig_fun>
 800de78:	2800      	cmp	r0, #0
 800de7a:	d151      	bne.n	800df20 <__hexnan+0xe8>
 800de7c:	9a04      	ldr	r2, [sp, #16]
 800de7e:	9905      	ldr	r1, [sp, #20]
 800de80:	2a20      	cmp	r2, #32
 800de82:	d818      	bhi.n	800deb6 <__hexnan+0x7e>
 800de84:	9b02      	ldr	r3, [sp, #8]
 800de86:	459b      	cmp	fp, r3
 800de88:	dd13      	ble.n	800deb2 <__hexnan+0x7a>
 800de8a:	454c      	cmp	r4, r9
 800de8c:	d206      	bcs.n	800de9c <__hexnan+0x64>
 800de8e:	2d07      	cmp	r5, #7
 800de90:	dc04      	bgt.n	800de9c <__hexnan+0x64>
 800de92:	462a      	mov	r2, r5
 800de94:	4649      	mov	r1, r9
 800de96:	4620      	mov	r0, r4
 800de98:	f7ff ffa8 	bl	800ddec <L_shift>
 800de9c:	4544      	cmp	r4, r8
 800de9e:	d952      	bls.n	800df46 <__hexnan+0x10e>
 800dea0:	2300      	movs	r3, #0
 800dea2:	f1a4 0904 	sub.w	r9, r4, #4
 800dea6:	f844 3c04 	str.w	r3, [r4, #-4]
 800deaa:	f8cd b008 	str.w	fp, [sp, #8]
 800deae:	464c      	mov	r4, r9
 800deb0:	461d      	mov	r5, r3
 800deb2:	9903      	ldr	r1, [sp, #12]
 800deb4:	e7d7      	b.n	800de66 <__hexnan+0x2e>
 800deb6:	2a29      	cmp	r2, #41	@ 0x29
 800deb8:	d157      	bne.n	800df6a <__hexnan+0x132>
 800deba:	3102      	adds	r1, #2
 800debc:	f8ca 1000 	str.w	r1, [sl]
 800dec0:	f1bb 0f00 	cmp.w	fp, #0
 800dec4:	d051      	beq.n	800df6a <__hexnan+0x132>
 800dec6:	454c      	cmp	r4, r9
 800dec8:	d206      	bcs.n	800ded8 <__hexnan+0xa0>
 800deca:	2d07      	cmp	r5, #7
 800decc:	dc04      	bgt.n	800ded8 <__hexnan+0xa0>
 800dece:	462a      	mov	r2, r5
 800ded0:	4649      	mov	r1, r9
 800ded2:	4620      	mov	r0, r4
 800ded4:	f7ff ff8a 	bl	800ddec <L_shift>
 800ded8:	4544      	cmp	r4, r8
 800deda:	d936      	bls.n	800df4a <__hexnan+0x112>
 800dedc:	f1a8 0204 	sub.w	r2, r8, #4
 800dee0:	4623      	mov	r3, r4
 800dee2:	f853 1b04 	ldr.w	r1, [r3], #4
 800dee6:	f842 1f04 	str.w	r1, [r2, #4]!
 800deea:	429f      	cmp	r7, r3
 800deec:	d2f9      	bcs.n	800dee2 <__hexnan+0xaa>
 800deee:	1b3b      	subs	r3, r7, r4
 800def0:	f023 0303 	bic.w	r3, r3, #3
 800def4:	3304      	adds	r3, #4
 800def6:	3401      	adds	r4, #1
 800def8:	3e03      	subs	r6, #3
 800defa:	42b4      	cmp	r4, r6
 800defc:	bf88      	it	hi
 800defe:	2304      	movhi	r3, #4
 800df00:	4443      	add	r3, r8
 800df02:	2200      	movs	r2, #0
 800df04:	f843 2b04 	str.w	r2, [r3], #4
 800df08:	429f      	cmp	r7, r3
 800df0a:	d2fb      	bcs.n	800df04 <__hexnan+0xcc>
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	b91b      	cbnz	r3, 800df18 <__hexnan+0xe0>
 800df10:	4547      	cmp	r7, r8
 800df12:	d128      	bne.n	800df66 <__hexnan+0x12e>
 800df14:	2301      	movs	r3, #1
 800df16:	603b      	str	r3, [r7, #0]
 800df18:	2005      	movs	r0, #5
 800df1a:	b007      	add	sp, #28
 800df1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df20:	3501      	adds	r5, #1
 800df22:	2d08      	cmp	r5, #8
 800df24:	f10b 0b01 	add.w	fp, fp, #1
 800df28:	dd06      	ble.n	800df38 <__hexnan+0x100>
 800df2a:	4544      	cmp	r4, r8
 800df2c:	d9c1      	bls.n	800deb2 <__hexnan+0x7a>
 800df2e:	2300      	movs	r3, #0
 800df30:	f844 3c04 	str.w	r3, [r4, #-4]
 800df34:	2501      	movs	r5, #1
 800df36:	3c04      	subs	r4, #4
 800df38:	6822      	ldr	r2, [r4, #0]
 800df3a:	f000 000f 	and.w	r0, r0, #15
 800df3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800df42:	6020      	str	r0, [r4, #0]
 800df44:	e7b5      	b.n	800deb2 <__hexnan+0x7a>
 800df46:	2508      	movs	r5, #8
 800df48:	e7b3      	b.n	800deb2 <__hexnan+0x7a>
 800df4a:	9b01      	ldr	r3, [sp, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d0dd      	beq.n	800df0c <__hexnan+0xd4>
 800df50:	f1c3 0320 	rsb	r3, r3, #32
 800df54:	f04f 32ff 	mov.w	r2, #4294967295
 800df58:	40da      	lsrs	r2, r3
 800df5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800df5e:	4013      	ands	r3, r2
 800df60:	f846 3c04 	str.w	r3, [r6, #-4]
 800df64:	e7d2      	b.n	800df0c <__hexnan+0xd4>
 800df66:	3f04      	subs	r7, #4
 800df68:	e7d0      	b.n	800df0c <__hexnan+0xd4>
 800df6a:	2004      	movs	r0, #4
 800df6c:	e7d5      	b.n	800df1a <__hexnan+0xe2>
	...

0800df70 <sbrk_aligned>:
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	4e0f      	ldr	r6, [pc, #60]	@ (800dfb0 <sbrk_aligned+0x40>)
 800df74:	460c      	mov	r4, r1
 800df76:	6831      	ldr	r1, [r6, #0]
 800df78:	4605      	mov	r5, r0
 800df7a:	b911      	cbnz	r1, 800df82 <sbrk_aligned+0x12>
 800df7c:	f000 fe24 	bl	800ebc8 <_sbrk_r>
 800df80:	6030      	str	r0, [r6, #0]
 800df82:	4621      	mov	r1, r4
 800df84:	4628      	mov	r0, r5
 800df86:	f000 fe1f 	bl	800ebc8 <_sbrk_r>
 800df8a:	1c43      	adds	r3, r0, #1
 800df8c:	d103      	bne.n	800df96 <sbrk_aligned+0x26>
 800df8e:	f04f 34ff 	mov.w	r4, #4294967295
 800df92:	4620      	mov	r0, r4
 800df94:	bd70      	pop	{r4, r5, r6, pc}
 800df96:	1cc4      	adds	r4, r0, #3
 800df98:	f024 0403 	bic.w	r4, r4, #3
 800df9c:	42a0      	cmp	r0, r4
 800df9e:	d0f8      	beq.n	800df92 <sbrk_aligned+0x22>
 800dfa0:	1a21      	subs	r1, r4, r0
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	f000 fe10 	bl	800ebc8 <_sbrk_r>
 800dfa8:	3001      	adds	r0, #1
 800dfaa:	d1f2      	bne.n	800df92 <sbrk_aligned+0x22>
 800dfac:	e7ef      	b.n	800df8e <sbrk_aligned+0x1e>
 800dfae:	bf00      	nop
 800dfb0:	20001174 	.word	0x20001174

0800dfb4 <_malloc_r>:
 800dfb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb8:	1ccd      	adds	r5, r1, #3
 800dfba:	f025 0503 	bic.w	r5, r5, #3
 800dfbe:	3508      	adds	r5, #8
 800dfc0:	2d0c      	cmp	r5, #12
 800dfc2:	bf38      	it	cc
 800dfc4:	250c      	movcc	r5, #12
 800dfc6:	2d00      	cmp	r5, #0
 800dfc8:	4606      	mov	r6, r0
 800dfca:	db01      	blt.n	800dfd0 <_malloc_r+0x1c>
 800dfcc:	42a9      	cmp	r1, r5
 800dfce:	d904      	bls.n	800dfda <_malloc_r+0x26>
 800dfd0:	230c      	movs	r3, #12
 800dfd2:	6033      	str	r3, [r6, #0]
 800dfd4:	2000      	movs	r0, #0
 800dfd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e0b0 <_malloc_r+0xfc>
 800dfde:	f000 f87b 	bl	800e0d8 <__malloc_lock>
 800dfe2:	f8d8 3000 	ldr.w	r3, [r8]
 800dfe6:	461c      	mov	r4, r3
 800dfe8:	bb44      	cbnz	r4, 800e03c <_malloc_r+0x88>
 800dfea:	4629      	mov	r1, r5
 800dfec:	4630      	mov	r0, r6
 800dfee:	f7ff ffbf 	bl	800df70 <sbrk_aligned>
 800dff2:	1c43      	adds	r3, r0, #1
 800dff4:	4604      	mov	r4, r0
 800dff6:	d158      	bne.n	800e0aa <_malloc_r+0xf6>
 800dff8:	f8d8 4000 	ldr.w	r4, [r8]
 800dffc:	4627      	mov	r7, r4
 800dffe:	2f00      	cmp	r7, #0
 800e000:	d143      	bne.n	800e08a <_malloc_r+0xd6>
 800e002:	2c00      	cmp	r4, #0
 800e004:	d04b      	beq.n	800e09e <_malloc_r+0xea>
 800e006:	6823      	ldr	r3, [r4, #0]
 800e008:	4639      	mov	r1, r7
 800e00a:	4630      	mov	r0, r6
 800e00c:	eb04 0903 	add.w	r9, r4, r3
 800e010:	f000 fdda 	bl	800ebc8 <_sbrk_r>
 800e014:	4581      	cmp	r9, r0
 800e016:	d142      	bne.n	800e09e <_malloc_r+0xea>
 800e018:	6821      	ldr	r1, [r4, #0]
 800e01a:	1a6d      	subs	r5, r5, r1
 800e01c:	4629      	mov	r1, r5
 800e01e:	4630      	mov	r0, r6
 800e020:	f7ff ffa6 	bl	800df70 <sbrk_aligned>
 800e024:	3001      	adds	r0, #1
 800e026:	d03a      	beq.n	800e09e <_malloc_r+0xea>
 800e028:	6823      	ldr	r3, [r4, #0]
 800e02a:	442b      	add	r3, r5
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	f8d8 3000 	ldr.w	r3, [r8]
 800e032:	685a      	ldr	r2, [r3, #4]
 800e034:	bb62      	cbnz	r2, 800e090 <_malloc_r+0xdc>
 800e036:	f8c8 7000 	str.w	r7, [r8]
 800e03a:	e00f      	b.n	800e05c <_malloc_r+0xa8>
 800e03c:	6822      	ldr	r2, [r4, #0]
 800e03e:	1b52      	subs	r2, r2, r5
 800e040:	d420      	bmi.n	800e084 <_malloc_r+0xd0>
 800e042:	2a0b      	cmp	r2, #11
 800e044:	d917      	bls.n	800e076 <_malloc_r+0xc2>
 800e046:	1961      	adds	r1, r4, r5
 800e048:	42a3      	cmp	r3, r4
 800e04a:	6025      	str	r5, [r4, #0]
 800e04c:	bf18      	it	ne
 800e04e:	6059      	strne	r1, [r3, #4]
 800e050:	6863      	ldr	r3, [r4, #4]
 800e052:	bf08      	it	eq
 800e054:	f8c8 1000 	streq.w	r1, [r8]
 800e058:	5162      	str	r2, [r4, r5]
 800e05a:	604b      	str	r3, [r1, #4]
 800e05c:	4630      	mov	r0, r6
 800e05e:	f000 f841 	bl	800e0e4 <__malloc_unlock>
 800e062:	f104 000b 	add.w	r0, r4, #11
 800e066:	1d23      	adds	r3, r4, #4
 800e068:	f020 0007 	bic.w	r0, r0, #7
 800e06c:	1ac2      	subs	r2, r0, r3
 800e06e:	bf1c      	itt	ne
 800e070:	1a1b      	subne	r3, r3, r0
 800e072:	50a3      	strne	r3, [r4, r2]
 800e074:	e7af      	b.n	800dfd6 <_malloc_r+0x22>
 800e076:	6862      	ldr	r2, [r4, #4]
 800e078:	42a3      	cmp	r3, r4
 800e07a:	bf0c      	ite	eq
 800e07c:	f8c8 2000 	streq.w	r2, [r8]
 800e080:	605a      	strne	r2, [r3, #4]
 800e082:	e7eb      	b.n	800e05c <_malloc_r+0xa8>
 800e084:	4623      	mov	r3, r4
 800e086:	6864      	ldr	r4, [r4, #4]
 800e088:	e7ae      	b.n	800dfe8 <_malloc_r+0x34>
 800e08a:	463c      	mov	r4, r7
 800e08c:	687f      	ldr	r7, [r7, #4]
 800e08e:	e7b6      	b.n	800dffe <_malloc_r+0x4a>
 800e090:	461a      	mov	r2, r3
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	42a3      	cmp	r3, r4
 800e096:	d1fb      	bne.n	800e090 <_malloc_r+0xdc>
 800e098:	2300      	movs	r3, #0
 800e09a:	6053      	str	r3, [r2, #4]
 800e09c:	e7de      	b.n	800e05c <_malloc_r+0xa8>
 800e09e:	230c      	movs	r3, #12
 800e0a0:	6033      	str	r3, [r6, #0]
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	f000 f81e 	bl	800e0e4 <__malloc_unlock>
 800e0a8:	e794      	b.n	800dfd4 <_malloc_r+0x20>
 800e0aa:	6005      	str	r5, [r0, #0]
 800e0ac:	e7d6      	b.n	800e05c <_malloc_r+0xa8>
 800e0ae:	bf00      	nop
 800e0b0:	20001178 	.word	0x20001178

0800e0b4 <__ascii_mbtowc>:
 800e0b4:	b082      	sub	sp, #8
 800e0b6:	b901      	cbnz	r1, 800e0ba <__ascii_mbtowc+0x6>
 800e0b8:	a901      	add	r1, sp, #4
 800e0ba:	b142      	cbz	r2, 800e0ce <__ascii_mbtowc+0x1a>
 800e0bc:	b14b      	cbz	r3, 800e0d2 <__ascii_mbtowc+0x1e>
 800e0be:	7813      	ldrb	r3, [r2, #0]
 800e0c0:	600b      	str	r3, [r1, #0]
 800e0c2:	7812      	ldrb	r2, [r2, #0]
 800e0c4:	1e10      	subs	r0, r2, #0
 800e0c6:	bf18      	it	ne
 800e0c8:	2001      	movne	r0, #1
 800e0ca:	b002      	add	sp, #8
 800e0cc:	4770      	bx	lr
 800e0ce:	4610      	mov	r0, r2
 800e0d0:	e7fb      	b.n	800e0ca <__ascii_mbtowc+0x16>
 800e0d2:	f06f 0001 	mvn.w	r0, #1
 800e0d6:	e7f8      	b.n	800e0ca <__ascii_mbtowc+0x16>

0800e0d8 <__malloc_lock>:
 800e0d8:	4801      	ldr	r0, [pc, #4]	@ (800e0e0 <__malloc_lock+0x8>)
 800e0da:	f7ff bbaa 	b.w	800d832 <__retarget_lock_acquire_recursive>
 800e0de:	bf00      	nop
 800e0e0:	20001170 	.word	0x20001170

0800e0e4 <__malloc_unlock>:
 800e0e4:	4801      	ldr	r0, [pc, #4]	@ (800e0ec <__malloc_unlock+0x8>)
 800e0e6:	f7ff bba5 	b.w	800d834 <__retarget_lock_release_recursive>
 800e0ea:	bf00      	nop
 800e0ec:	20001170 	.word	0x20001170

0800e0f0 <_Balloc>:
 800e0f0:	b570      	push	{r4, r5, r6, lr}
 800e0f2:	69c6      	ldr	r6, [r0, #28]
 800e0f4:	4604      	mov	r4, r0
 800e0f6:	460d      	mov	r5, r1
 800e0f8:	b976      	cbnz	r6, 800e118 <_Balloc+0x28>
 800e0fa:	2010      	movs	r0, #16
 800e0fc:	f000 fda6 	bl	800ec4c <malloc>
 800e100:	4602      	mov	r2, r0
 800e102:	61e0      	str	r0, [r4, #28]
 800e104:	b920      	cbnz	r0, 800e110 <_Balloc+0x20>
 800e106:	4b18      	ldr	r3, [pc, #96]	@ (800e168 <_Balloc+0x78>)
 800e108:	4818      	ldr	r0, [pc, #96]	@ (800e16c <_Balloc+0x7c>)
 800e10a:	216b      	movs	r1, #107	@ 0x6b
 800e10c:	f000 fd6c 	bl	800ebe8 <__assert_func>
 800e110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e114:	6006      	str	r6, [r0, #0]
 800e116:	60c6      	str	r6, [r0, #12]
 800e118:	69e6      	ldr	r6, [r4, #28]
 800e11a:	68f3      	ldr	r3, [r6, #12]
 800e11c:	b183      	cbz	r3, 800e140 <_Balloc+0x50>
 800e11e:	69e3      	ldr	r3, [r4, #28]
 800e120:	68db      	ldr	r3, [r3, #12]
 800e122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e126:	b9b8      	cbnz	r0, 800e158 <_Balloc+0x68>
 800e128:	2101      	movs	r1, #1
 800e12a:	fa01 f605 	lsl.w	r6, r1, r5
 800e12e:	1d72      	adds	r2, r6, #5
 800e130:	0092      	lsls	r2, r2, #2
 800e132:	4620      	mov	r0, r4
 800e134:	f000 fd76 	bl	800ec24 <_calloc_r>
 800e138:	b160      	cbz	r0, 800e154 <_Balloc+0x64>
 800e13a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e13e:	e00e      	b.n	800e15e <_Balloc+0x6e>
 800e140:	2221      	movs	r2, #33	@ 0x21
 800e142:	2104      	movs	r1, #4
 800e144:	4620      	mov	r0, r4
 800e146:	f000 fd6d 	bl	800ec24 <_calloc_r>
 800e14a:	69e3      	ldr	r3, [r4, #28]
 800e14c:	60f0      	str	r0, [r6, #12]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d1e4      	bne.n	800e11e <_Balloc+0x2e>
 800e154:	2000      	movs	r0, #0
 800e156:	bd70      	pop	{r4, r5, r6, pc}
 800e158:	6802      	ldr	r2, [r0, #0]
 800e15a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e15e:	2300      	movs	r3, #0
 800e160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e164:	e7f7      	b.n	800e156 <_Balloc+0x66>
 800e166:	bf00      	nop
 800e168:	080109c9 	.word	0x080109c9
 800e16c:	080109e0 	.word	0x080109e0

0800e170 <_Bfree>:
 800e170:	b570      	push	{r4, r5, r6, lr}
 800e172:	69c6      	ldr	r6, [r0, #28]
 800e174:	4605      	mov	r5, r0
 800e176:	460c      	mov	r4, r1
 800e178:	b976      	cbnz	r6, 800e198 <_Bfree+0x28>
 800e17a:	2010      	movs	r0, #16
 800e17c:	f000 fd66 	bl	800ec4c <malloc>
 800e180:	4602      	mov	r2, r0
 800e182:	61e8      	str	r0, [r5, #28]
 800e184:	b920      	cbnz	r0, 800e190 <_Bfree+0x20>
 800e186:	4b09      	ldr	r3, [pc, #36]	@ (800e1ac <_Bfree+0x3c>)
 800e188:	4809      	ldr	r0, [pc, #36]	@ (800e1b0 <_Bfree+0x40>)
 800e18a:	218f      	movs	r1, #143	@ 0x8f
 800e18c:	f000 fd2c 	bl	800ebe8 <__assert_func>
 800e190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e194:	6006      	str	r6, [r0, #0]
 800e196:	60c6      	str	r6, [r0, #12]
 800e198:	b13c      	cbz	r4, 800e1aa <_Bfree+0x3a>
 800e19a:	69eb      	ldr	r3, [r5, #28]
 800e19c:	6862      	ldr	r2, [r4, #4]
 800e19e:	68db      	ldr	r3, [r3, #12]
 800e1a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1a4:	6021      	str	r1, [r4, #0]
 800e1a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e1aa:	bd70      	pop	{r4, r5, r6, pc}
 800e1ac:	080109c9 	.word	0x080109c9
 800e1b0:	080109e0 	.word	0x080109e0

0800e1b4 <__multadd>:
 800e1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b8:	690d      	ldr	r5, [r1, #16]
 800e1ba:	4607      	mov	r7, r0
 800e1bc:	460c      	mov	r4, r1
 800e1be:	461e      	mov	r6, r3
 800e1c0:	f101 0c14 	add.w	ip, r1, #20
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	f8dc 3000 	ldr.w	r3, [ip]
 800e1ca:	b299      	uxth	r1, r3
 800e1cc:	fb02 6101 	mla	r1, r2, r1, r6
 800e1d0:	0c1e      	lsrs	r6, r3, #16
 800e1d2:	0c0b      	lsrs	r3, r1, #16
 800e1d4:	fb02 3306 	mla	r3, r2, r6, r3
 800e1d8:	b289      	uxth	r1, r1
 800e1da:	3001      	adds	r0, #1
 800e1dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1e0:	4285      	cmp	r5, r0
 800e1e2:	f84c 1b04 	str.w	r1, [ip], #4
 800e1e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1ea:	dcec      	bgt.n	800e1c6 <__multadd+0x12>
 800e1ec:	b30e      	cbz	r6, 800e232 <__multadd+0x7e>
 800e1ee:	68a3      	ldr	r3, [r4, #8]
 800e1f0:	42ab      	cmp	r3, r5
 800e1f2:	dc19      	bgt.n	800e228 <__multadd+0x74>
 800e1f4:	6861      	ldr	r1, [r4, #4]
 800e1f6:	4638      	mov	r0, r7
 800e1f8:	3101      	adds	r1, #1
 800e1fa:	f7ff ff79 	bl	800e0f0 <_Balloc>
 800e1fe:	4680      	mov	r8, r0
 800e200:	b928      	cbnz	r0, 800e20e <__multadd+0x5a>
 800e202:	4602      	mov	r2, r0
 800e204:	4b0c      	ldr	r3, [pc, #48]	@ (800e238 <__multadd+0x84>)
 800e206:	480d      	ldr	r0, [pc, #52]	@ (800e23c <__multadd+0x88>)
 800e208:	21ba      	movs	r1, #186	@ 0xba
 800e20a:	f000 fced 	bl	800ebe8 <__assert_func>
 800e20e:	6922      	ldr	r2, [r4, #16]
 800e210:	3202      	adds	r2, #2
 800e212:	f104 010c 	add.w	r1, r4, #12
 800e216:	0092      	lsls	r2, r2, #2
 800e218:	300c      	adds	r0, #12
 800e21a:	f7ff fb0c 	bl	800d836 <memcpy>
 800e21e:	4621      	mov	r1, r4
 800e220:	4638      	mov	r0, r7
 800e222:	f7ff ffa5 	bl	800e170 <_Bfree>
 800e226:	4644      	mov	r4, r8
 800e228:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e22c:	3501      	adds	r5, #1
 800e22e:	615e      	str	r6, [r3, #20]
 800e230:	6125      	str	r5, [r4, #16]
 800e232:	4620      	mov	r0, r4
 800e234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e238:	08010958 	.word	0x08010958
 800e23c:	080109e0 	.word	0x080109e0

0800e240 <__s2b>:
 800e240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e244:	460c      	mov	r4, r1
 800e246:	4615      	mov	r5, r2
 800e248:	461f      	mov	r7, r3
 800e24a:	2209      	movs	r2, #9
 800e24c:	3308      	adds	r3, #8
 800e24e:	4606      	mov	r6, r0
 800e250:	fb93 f3f2 	sdiv	r3, r3, r2
 800e254:	2100      	movs	r1, #0
 800e256:	2201      	movs	r2, #1
 800e258:	429a      	cmp	r2, r3
 800e25a:	db09      	blt.n	800e270 <__s2b+0x30>
 800e25c:	4630      	mov	r0, r6
 800e25e:	f7ff ff47 	bl	800e0f0 <_Balloc>
 800e262:	b940      	cbnz	r0, 800e276 <__s2b+0x36>
 800e264:	4602      	mov	r2, r0
 800e266:	4b19      	ldr	r3, [pc, #100]	@ (800e2cc <__s2b+0x8c>)
 800e268:	4819      	ldr	r0, [pc, #100]	@ (800e2d0 <__s2b+0x90>)
 800e26a:	21d3      	movs	r1, #211	@ 0xd3
 800e26c:	f000 fcbc 	bl	800ebe8 <__assert_func>
 800e270:	0052      	lsls	r2, r2, #1
 800e272:	3101      	adds	r1, #1
 800e274:	e7f0      	b.n	800e258 <__s2b+0x18>
 800e276:	9b08      	ldr	r3, [sp, #32]
 800e278:	6143      	str	r3, [r0, #20]
 800e27a:	2d09      	cmp	r5, #9
 800e27c:	f04f 0301 	mov.w	r3, #1
 800e280:	6103      	str	r3, [r0, #16]
 800e282:	dd16      	ble.n	800e2b2 <__s2b+0x72>
 800e284:	f104 0909 	add.w	r9, r4, #9
 800e288:	46c8      	mov	r8, r9
 800e28a:	442c      	add	r4, r5
 800e28c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e290:	4601      	mov	r1, r0
 800e292:	3b30      	subs	r3, #48	@ 0x30
 800e294:	220a      	movs	r2, #10
 800e296:	4630      	mov	r0, r6
 800e298:	f7ff ff8c 	bl	800e1b4 <__multadd>
 800e29c:	45a0      	cmp	r8, r4
 800e29e:	d1f5      	bne.n	800e28c <__s2b+0x4c>
 800e2a0:	f1a5 0408 	sub.w	r4, r5, #8
 800e2a4:	444c      	add	r4, r9
 800e2a6:	1b2d      	subs	r5, r5, r4
 800e2a8:	1963      	adds	r3, r4, r5
 800e2aa:	42bb      	cmp	r3, r7
 800e2ac:	db04      	blt.n	800e2b8 <__s2b+0x78>
 800e2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2b2:	340a      	adds	r4, #10
 800e2b4:	2509      	movs	r5, #9
 800e2b6:	e7f6      	b.n	800e2a6 <__s2b+0x66>
 800e2b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e2bc:	4601      	mov	r1, r0
 800e2be:	3b30      	subs	r3, #48	@ 0x30
 800e2c0:	220a      	movs	r2, #10
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	f7ff ff76 	bl	800e1b4 <__multadd>
 800e2c8:	e7ee      	b.n	800e2a8 <__s2b+0x68>
 800e2ca:	bf00      	nop
 800e2cc:	08010958 	.word	0x08010958
 800e2d0:	080109e0 	.word	0x080109e0

0800e2d4 <__hi0bits>:
 800e2d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e2d8:	4603      	mov	r3, r0
 800e2da:	bf36      	itet	cc
 800e2dc:	0403      	lslcc	r3, r0, #16
 800e2de:	2000      	movcs	r0, #0
 800e2e0:	2010      	movcc	r0, #16
 800e2e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e2e6:	bf3c      	itt	cc
 800e2e8:	021b      	lslcc	r3, r3, #8
 800e2ea:	3008      	addcc	r0, #8
 800e2ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e2f0:	bf3c      	itt	cc
 800e2f2:	011b      	lslcc	r3, r3, #4
 800e2f4:	3004      	addcc	r0, #4
 800e2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2fa:	bf3c      	itt	cc
 800e2fc:	009b      	lslcc	r3, r3, #2
 800e2fe:	3002      	addcc	r0, #2
 800e300:	2b00      	cmp	r3, #0
 800e302:	db05      	blt.n	800e310 <__hi0bits+0x3c>
 800e304:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e308:	f100 0001 	add.w	r0, r0, #1
 800e30c:	bf08      	it	eq
 800e30e:	2020      	moveq	r0, #32
 800e310:	4770      	bx	lr

0800e312 <__lo0bits>:
 800e312:	6803      	ldr	r3, [r0, #0]
 800e314:	4602      	mov	r2, r0
 800e316:	f013 0007 	ands.w	r0, r3, #7
 800e31a:	d00b      	beq.n	800e334 <__lo0bits+0x22>
 800e31c:	07d9      	lsls	r1, r3, #31
 800e31e:	d421      	bmi.n	800e364 <__lo0bits+0x52>
 800e320:	0798      	lsls	r0, r3, #30
 800e322:	bf49      	itett	mi
 800e324:	085b      	lsrmi	r3, r3, #1
 800e326:	089b      	lsrpl	r3, r3, #2
 800e328:	2001      	movmi	r0, #1
 800e32a:	6013      	strmi	r3, [r2, #0]
 800e32c:	bf5c      	itt	pl
 800e32e:	6013      	strpl	r3, [r2, #0]
 800e330:	2002      	movpl	r0, #2
 800e332:	4770      	bx	lr
 800e334:	b299      	uxth	r1, r3
 800e336:	b909      	cbnz	r1, 800e33c <__lo0bits+0x2a>
 800e338:	0c1b      	lsrs	r3, r3, #16
 800e33a:	2010      	movs	r0, #16
 800e33c:	b2d9      	uxtb	r1, r3
 800e33e:	b909      	cbnz	r1, 800e344 <__lo0bits+0x32>
 800e340:	3008      	adds	r0, #8
 800e342:	0a1b      	lsrs	r3, r3, #8
 800e344:	0719      	lsls	r1, r3, #28
 800e346:	bf04      	itt	eq
 800e348:	091b      	lsreq	r3, r3, #4
 800e34a:	3004      	addeq	r0, #4
 800e34c:	0799      	lsls	r1, r3, #30
 800e34e:	bf04      	itt	eq
 800e350:	089b      	lsreq	r3, r3, #2
 800e352:	3002      	addeq	r0, #2
 800e354:	07d9      	lsls	r1, r3, #31
 800e356:	d403      	bmi.n	800e360 <__lo0bits+0x4e>
 800e358:	085b      	lsrs	r3, r3, #1
 800e35a:	f100 0001 	add.w	r0, r0, #1
 800e35e:	d003      	beq.n	800e368 <__lo0bits+0x56>
 800e360:	6013      	str	r3, [r2, #0]
 800e362:	4770      	bx	lr
 800e364:	2000      	movs	r0, #0
 800e366:	4770      	bx	lr
 800e368:	2020      	movs	r0, #32
 800e36a:	4770      	bx	lr

0800e36c <__i2b>:
 800e36c:	b510      	push	{r4, lr}
 800e36e:	460c      	mov	r4, r1
 800e370:	2101      	movs	r1, #1
 800e372:	f7ff febd 	bl	800e0f0 <_Balloc>
 800e376:	4602      	mov	r2, r0
 800e378:	b928      	cbnz	r0, 800e386 <__i2b+0x1a>
 800e37a:	4b05      	ldr	r3, [pc, #20]	@ (800e390 <__i2b+0x24>)
 800e37c:	4805      	ldr	r0, [pc, #20]	@ (800e394 <__i2b+0x28>)
 800e37e:	f240 1145 	movw	r1, #325	@ 0x145
 800e382:	f000 fc31 	bl	800ebe8 <__assert_func>
 800e386:	2301      	movs	r3, #1
 800e388:	6144      	str	r4, [r0, #20]
 800e38a:	6103      	str	r3, [r0, #16]
 800e38c:	bd10      	pop	{r4, pc}
 800e38e:	bf00      	nop
 800e390:	08010958 	.word	0x08010958
 800e394:	080109e0 	.word	0x080109e0

0800e398 <__multiply>:
 800e398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e39c:	4614      	mov	r4, r2
 800e39e:	690a      	ldr	r2, [r1, #16]
 800e3a0:	6923      	ldr	r3, [r4, #16]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	bfa8      	it	ge
 800e3a6:	4623      	movge	r3, r4
 800e3a8:	460f      	mov	r7, r1
 800e3aa:	bfa4      	itt	ge
 800e3ac:	460c      	movge	r4, r1
 800e3ae:	461f      	movge	r7, r3
 800e3b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e3b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e3b8:	68a3      	ldr	r3, [r4, #8]
 800e3ba:	6861      	ldr	r1, [r4, #4]
 800e3bc:	eb0a 0609 	add.w	r6, sl, r9
 800e3c0:	42b3      	cmp	r3, r6
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	bfb8      	it	lt
 800e3c6:	3101      	addlt	r1, #1
 800e3c8:	f7ff fe92 	bl	800e0f0 <_Balloc>
 800e3cc:	b930      	cbnz	r0, 800e3dc <__multiply+0x44>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	4b44      	ldr	r3, [pc, #272]	@ (800e4e4 <__multiply+0x14c>)
 800e3d2:	4845      	ldr	r0, [pc, #276]	@ (800e4e8 <__multiply+0x150>)
 800e3d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e3d8:	f000 fc06 	bl	800ebe8 <__assert_func>
 800e3dc:	f100 0514 	add.w	r5, r0, #20
 800e3e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e3e4:	462b      	mov	r3, r5
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	4543      	cmp	r3, r8
 800e3ea:	d321      	bcc.n	800e430 <__multiply+0x98>
 800e3ec:	f107 0114 	add.w	r1, r7, #20
 800e3f0:	f104 0214 	add.w	r2, r4, #20
 800e3f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e3f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e3fc:	9302      	str	r3, [sp, #8]
 800e3fe:	1b13      	subs	r3, r2, r4
 800e400:	3b15      	subs	r3, #21
 800e402:	f023 0303 	bic.w	r3, r3, #3
 800e406:	3304      	adds	r3, #4
 800e408:	f104 0715 	add.w	r7, r4, #21
 800e40c:	42ba      	cmp	r2, r7
 800e40e:	bf38      	it	cc
 800e410:	2304      	movcc	r3, #4
 800e412:	9301      	str	r3, [sp, #4]
 800e414:	9b02      	ldr	r3, [sp, #8]
 800e416:	9103      	str	r1, [sp, #12]
 800e418:	428b      	cmp	r3, r1
 800e41a:	d80c      	bhi.n	800e436 <__multiply+0x9e>
 800e41c:	2e00      	cmp	r6, #0
 800e41e:	dd03      	ble.n	800e428 <__multiply+0x90>
 800e420:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e424:	2b00      	cmp	r3, #0
 800e426:	d05b      	beq.n	800e4e0 <__multiply+0x148>
 800e428:	6106      	str	r6, [r0, #16]
 800e42a:	b005      	add	sp, #20
 800e42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e430:	f843 2b04 	str.w	r2, [r3], #4
 800e434:	e7d8      	b.n	800e3e8 <__multiply+0x50>
 800e436:	f8b1 a000 	ldrh.w	sl, [r1]
 800e43a:	f1ba 0f00 	cmp.w	sl, #0
 800e43e:	d024      	beq.n	800e48a <__multiply+0xf2>
 800e440:	f104 0e14 	add.w	lr, r4, #20
 800e444:	46a9      	mov	r9, r5
 800e446:	f04f 0c00 	mov.w	ip, #0
 800e44a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e44e:	f8d9 3000 	ldr.w	r3, [r9]
 800e452:	fa1f fb87 	uxth.w	fp, r7
 800e456:	b29b      	uxth	r3, r3
 800e458:	fb0a 330b 	mla	r3, sl, fp, r3
 800e45c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e460:	f8d9 7000 	ldr.w	r7, [r9]
 800e464:	4463      	add	r3, ip
 800e466:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e46a:	fb0a c70b 	mla	r7, sl, fp, ip
 800e46e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e472:	b29b      	uxth	r3, r3
 800e474:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e478:	4572      	cmp	r2, lr
 800e47a:	f849 3b04 	str.w	r3, [r9], #4
 800e47e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e482:	d8e2      	bhi.n	800e44a <__multiply+0xb2>
 800e484:	9b01      	ldr	r3, [sp, #4]
 800e486:	f845 c003 	str.w	ip, [r5, r3]
 800e48a:	9b03      	ldr	r3, [sp, #12]
 800e48c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e490:	3104      	adds	r1, #4
 800e492:	f1b9 0f00 	cmp.w	r9, #0
 800e496:	d021      	beq.n	800e4dc <__multiply+0x144>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	f104 0c14 	add.w	ip, r4, #20
 800e49e:	46ae      	mov	lr, r5
 800e4a0:	f04f 0a00 	mov.w	sl, #0
 800e4a4:	f8bc b000 	ldrh.w	fp, [ip]
 800e4a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e4ac:	fb09 770b 	mla	r7, r9, fp, r7
 800e4b0:	4457      	add	r7, sl
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e4b8:	f84e 3b04 	str.w	r3, [lr], #4
 800e4bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e4c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4c4:	f8be 3000 	ldrh.w	r3, [lr]
 800e4c8:	fb09 330a 	mla	r3, r9, sl, r3
 800e4cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e4d0:	4562      	cmp	r2, ip
 800e4d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4d6:	d8e5      	bhi.n	800e4a4 <__multiply+0x10c>
 800e4d8:	9f01      	ldr	r7, [sp, #4]
 800e4da:	51eb      	str	r3, [r5, r7]
 800e4dc:	3504      	adds	r5, #4
 800e4de:	e799      	b.n	800e414 <__multiply+0x7c>
 800e4e0:	3e01      	subs	r6, #1
 800e4e2:	e79b      	b.n	800e41c <__multiply+0x84>
 800e4e4:	08010958 	.word	0x08010958
 800e4e8:	080109e0 	.word	0x080109e0

0800e4ec <__pow5mult>:
 800e4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4f0:	4615      	mov	r5, r2
 800e4f2:	f012 0203 	ands.w	r2, r2, #3
 800e4f6:	4607      	mov	r7, r0
 800e4f8:	460e      	mov	r6, r1
 800e4fa:	d007      	beq.n	800e50c <__pow5mult+0x20>
 800e4fc:	4c25      	ldr	r4, [pc, #148]	@ (800e594 <__pow5mult+0xa8>)
 800e4fe:	3a01      	subs	r2, #1
 800e500:	2300      	movs	r3, #0
 800e502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e506:	f7ff fe55 	bl	800e1b4 <__multadd>
 800e50a:	4606      	mov	r6, r0
 800e50c:	10ad      	asrs	r5, r5, #2
 800e50e:	d03d      	beq.n	800e58c <__pow5mult+0xa0>
 800e510:	69fc      	ldr	r4, [r7, #28]
 800e512:	b97c      	cbnz	r4, 800e534 <__pow5mult+0x48>
 800e514:	2010      	movs	r0, #16
 800e516:	f000 fb99 	bl	800ec4c <malloc>
 800e51a:	4602      	mov	r2, r0
 800e51c:	61f8      	str	r0, [r7, #28]
 800e51e:	b928      	cbnz	r0, 800e52c <__pow5mult+0x40>
 800e520:	4b1d      	ldr	r3, [pc, #116]	@ (800e598 <__pow5mult+0xac>)
 800e522:	481e      	ldr	r0, [pc, #120]	@ (800e59c <__pow5mult+0xb0>)
 800e524:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e528:	f000 fb5e 	bl	800ebe8 <__assert_func>
 800e52c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e530:	6004      	str	r4, [r0, #0]
 800e532:	60c4      	str	r4, [r0, #12]
 800e534:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e538:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e53c:	b94c      	cbnz	r4, 800e552 <__pow5mult+0x66>
 800e53e:	f240 2171 	movw	r1, #625	@ 0x271
 800e542:	4638      	mov	r0, r7
 800e544:	f7ff ff12 	bl	800e36c <__i2b>
 800e548:	2300      	movs	r3, #0
 800e54a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e54e:	4604      	mov	r4, r0
 800e550:	6003      	str	r3, [r0, #0]
 800e552:	f04f 0900 	mov.w	r9, #0
 800e556:	07eb      	lsls	r3, r5, #31
 800e558:	d50a      	bpl.n	800e570 <__pow5mult+0x84>
 800e55a:	4631      	mov	r1, r6
 800e55c:	4622      	mov	r2, r4
 800e55e:	4638      	mov	r0, r7
 800e560:	f7ff ff1a 	bl	800e398 <__multiply>
 800e564:	4631      	mov	r1, r6
 800e566:	4680      	mov	r8, r0
 800e568:	4638      	mov	r0, r7
 800e56a:	f7ff fe01 	bl	800e170 <_Bfree>
 800e56e:	4646      	mov	r6, r8
 800e570:	106d      	asrs	r5, r5, #1
 800e572:	d00b      	beq.n	800e58c <__pow5mult+0xa0>
 800e574:	6820      	ldr	r0, [r4, #0]
 800e576:	b938      	cbnz	r0, 800e588 <__pow5mult+0x9c>
 800e578:	4622      	mov	r2, r4
 800e57a:	4621      	mov	r1, r4
 800e57c:	4638      	mov	r0, r7
 800e57e:	f7ff ff0b 	bl	800e398 <__multiply>
 800e582:	6020      	str	r0, [r4, #0]
 800e584:	f8c0 9000 	str.w	r9, [r0]
 800e588:	4604      	mov	r4, r0
 800e58a:	e7e4      	b.n	800e556 <__pow5mult+0x6a>
 800e58c:	4630      	mov	r0, r6
 800e58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e592:	bf00      	nop
 800e594:	08010a3c 	.word	0x08010a3c
 800e598:	080109c9 	.word	0x080109c9
 800e59c:	080109e0 	.word	0x080109e0

0800e5a0 <__lshift>:
 800e5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a4:	460c      	mov	r4, r1
 800e5a6:	6849      	ldr	r1, [r1, #4]
 800e5a8:	6923      	ldr	r3, [r4, #16]
 800e5aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e5ae:	68a3      	ldr	r3, [r4, #8]
 800e5b0:	4607      	mov	r7, r0
 800e5b2:	4691      	mov	r9, r2
 800e5b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e5b8:	f108 0601 	add.w	r6, r8, #1
 800e5bc:	42b3      	cmp	r3, r6
 800e5be:	db0b      	blt.n	800e5d8 <__lshift+0x38>
 800e5c0:	4638      	mov	r0, r7
 800e5c2:	f7ff fd95 	bl	800e0f0 <_Balloc>
 800e5c6:	4605      	mov	r5, r0
 800e5c8:	b948      	cbnz	r0, 800e5de <__lshift+0x3e>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	4b28      	ldr	r3, [pc, #160]	@ (800e670 <__lshift+0xd0>)
 800e5ce:	4829      	ldr	r0, [pc, #164]	@ (800e674 <__lshift+0xd4>)
 800e5d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e5d4:	f000 fb08 	bl	800ebe8 <__assert_func>
 800e5d8:	3101      	adds	r1, #1
 800e5da:	005b      	lsls	r3, r3, #1
 800e5dc:	e7ee      	b.n	800e5bc <__lshift+0x1c>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	f100 0114 	add.w	r1, r0, #20
 800e5e4:	f100 0210 	add.w	r2, r0, #16
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	4553      	cmp	r3, sl
 800e5ec:	db33      	blt.n	800e656 <__lshift+0xb6>
 800e5ee:	6920      	ldr	r0, [r4, #16]
 800e5f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e5f4:	f104 0314 	add.w	r3, r4, #20
 800e5f8:	f019 091f 	ands.w	r9, r9, #31
 800e5fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e600:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e604:	d02b      	beq.n	800e65e <__lshift+0xbe>
 800e606:	f1c9 0e20 	rsb	lr, r9, #32
 800e60a:	468a      	mov	sl, r1
 800e60c:	2200      	movs	r2, #0
 800e60e:	6818      	ldr	r0, [r3, #0]
 800e610:	fa00 f009 	lsl.w	r0, r0, r9
 800e614:	4310      	orrs	r0, r2
 800e616:	f84a 0b04 	str.w	r0, [sl], #4
 800e61a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e61e:	459c      	cmp	ip, r3
 800e620:	fa22 f20e 	lsr.w	r2, r2, lr
 800e624:	d8f3      	bhi.n	800e60e <__lshift+0x6e>
 800e626:	ebac 0304 	sub.w	r3, ip, r4
 800e62a:	3b15      	subs	r3, #21
 800e62c:	f023 0303 	bic.w	r3, r3, #3
 800e630:	3304      	adds	r3, #4
 800e632:	f104 0015 	add.w	r0, r4, #21
 800e636:	4584      	cmp	ip, r0
 800e638:	bf38      	it	cc
 800e63a:	2304      	movcc	r3, #4
 800e63c:	50ca      	str	r2, [r1, r3]
 800e63e:	b10a      	cbz	r2, 800e644 <__lshift+0xa4>
 800e640:	f108 0602 	add.w	r6, r8, #2
 800e644:	3e01      	subs	r6, #1
 800e646:	4638      	mov	r0, r7
 800e648:	612e      	str	r6, [r5, #16]
 800e64a:	4621      	mov	r1, r4
 800e64c:	f7ff fd90 	bl	800e170 <_Bfree>
 800e650:	4628      	mov	r0, r5
 800e652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e656:	f842 0f04 	str.w	r0, [r2, #4]!
 800e65a:	3301      	adds	r3, #1
 800e65c:	e7c5      	b.n	800e5ea <__lshift+0x4a>
 800e65e:	3904      	subs	r1, #4
 800e660:	f853 2b04 	ldr.w	r2, [r3], #4
 800e664:	f841 2f04 	str.w	r2, [r1, #4]!
 800e668:	459c      	cmp	ip, r3
 800e66a:	d8f9      	bhi.n	800e660 <__lshift+0xc0>
 800e66c:	e7ea      	b.n	800e644 <__lshift+0xa4>
 800e66e:	bf00      	nop
 800e670:	08010958 	.word	0x08010958
 800e674:	080109e0 	.word	0x080109e0

0800e678 <__mcmp>:
 800e678:	690a      	ldr	r2, [r1, #16]
 800e67a:	4603      	mov	r3, r0
 800e67c:	6900      	ldr	r0, [r0, #16]
 800e67e:	1a80      	subs	r0, r0, r2
 800e680:	b530      	push	{r4, r5, lr}
 800e682:	d10e      	bne.n	800e6a2 <__mcmp+0x2a>
 800e684:	3314      	adds	r3, #20
 800e686:	3114      	adds	r1, #20
 800e688:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e68c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e690:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e694:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e698:	4295      	cmp	r5, r2
 800e69a:	d003      	beq.n	800e6a4 <__mcmp+0x2c>
 800e69c:	d205      	bcs.n	800e6aa <__mcmp+0x32>
 800e69e:	f04f 30ff 	mov.w	r0, #4294967295
 800e6a2:	bd30      	pop	{r4, r5, pc}
 800e6a4:	42a3      	cmp	r3, r4
 800e6a6:	d3f3      	bcc.n	800e690 <__mcmp+0x18>
 800e6a8:	e7fb      	b.n	800e6a2 <__mcmp+0x2a>
 800e6aa:	2001      	movs	r0, #1
 800e6ac:	e7f9      	b.n	800e6a2 <__mcmp+0x2a>
	...

0800e6b0 <__mdiff>:
 800e6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b4:	4689      	mov	r9, r1
 800e6b6:	4606      	mov	r6, r0
 800e6b8:	4611      	mov	r1, r2
 800e6ba:	4648      	mov	r0, r9
 800e6bc:	4614      	mov	r4, r2
 800e6be:	f7ff ffdb 	bl	800e678 <__mcmp>
 800e6c2:	1e05      	subs	r5, r0, #0
 800e6c4:	d112      	bne.n	800e6ec <__mdiff+0x3c>
 800e6c6:	4629      	mov	r1, r5
 800e6c8:	4630      	mov	r0, r6
 800e6ca:	f7ff fd11 	bl	800e0f0 <_Balloc>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	b928      	cbnz	r0, 800e6de <__mdiff+0x2e>
 800e6d2:	4b3f      	ldr	r3, [pc, #252]	@ (800e7d0 <__mdiff+0x120>)
 800e6d4:	f240 2137 	movw	r1, #567	@ 0x237
 800e6d8:	483e      	ldr	r0, [pc, #248]	@ (800e7d4 <__mdiff+0x124>)
 800e6da:	f000 fa85 	bl	800ebe8 <__assert_func>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e6e4:	4610      	mov	r0, r2
 800e6e6:	b003      	add	sp, #12
 800e6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ec:	bfbc      	itt	lt
 800e6ee:	464b      	movlt	r3, r9
 800e6f0:	46a1      	movlt	r9, r4
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e6f8:	bfba      	itte	lt
 800e6fa:	461c      	movlt	r4, r3
 800e6fc:	2501      	movlt	r5, #1
 800e6fe:	2500      	movge	r5, #0
 800e700:	f7ff fcf6 	bl	800e0f0 <_Balloc>
 800e704:	4602      	mov	r2, r0
 800e706:	b918      	cbnz	r0, 800e710 <__mdiff+0x60>
 800e708:	4b31      	ldr	r3, [pc, #196]	@ (800e7d0 <__mdiff+0x120>)
 800e70a:	f240 2145 	movw	r1, #581	@ 0x245
 800e70e:	e7e3      	b.n	800e6d8 <__mdiff+0x28>
 800e710:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e714:	6926      	ldr	r6, [r4, #16]
 800e716:	60c5      	str	r5, [r0, #12]
 800e718:	f109 0310 	add.w	r3, r9, #16
 800e71c:	f109 0514 	add.w	r5, r9, #20
 800e720:	f104 0e14 	add.w	lr, r4, #20
 800e724:	f100 0b14 	add.w	fp, r0, #20
 800e728:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e72c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e730:	9301      	str	r3, [sp, #4]
 800e732:	46d9      	mov	r9, fp
 800e734:	f04f 0c00 	mov.w	ip, #0
 800e738:	9b01      	ldr	r3, [sp, #4]
 800e73a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e73e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e742:	9301      	str	r3, [sp, #4]
 800e744:	fa1f f38a 	uxth.w	r3, sl
 800e748:	4619      	mov	r1, r3
 800e74a:	b283      	uxth	r3, r0
 800e74c:	1acb      	subs	r3, r1, r3
 800e74e:	0c00      	lsrs	r0, r0, #16
 800e750:	4463      	add	r3, ip
 800e752:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e756:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e760:	4576      	cmp	r6, lr
 800e762:	f849 3b04 	str.w	r3, [r9], #4
 800e766:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e76a:	d8e5      	bhi.n	800e738 <__mdiff+0x88>
 800e76c:	1b33      	subs	r3, r6, r4
 800e76e:	3b15      	subs	r3, #21
 800e770:	f023 0303 	bic.w	r3, r3, #3
 800e774:	3415      	adds	r4, #21
 800e776:	3304      	adds	r3, #4
 800e778:	42a6      	cmp	r6, r4
 800e77a:	bf38      	it	cc
 800e77c:	2304      	movcc	r3, #4
 800e77e:	441d      	add	r5, r3
 800e780:	445b      	add	r3, fp
 800e782:	461e      	mov	r6, r3
 800e784:	462c      	mov	r4, r5
 800e786:	4544      	cmp	r4, r8
 800e788:	d30e      	bcc.n	800e7a8 <__mdiff+0xf8>
 800e78a:	f108 0103 	add.w	r1, r8, #3
 800e78e:	1b49      	subs	r1, r1, r5
 800e790:	f021 0103 	bic.w	r1, r1, #3
 800e794:	3d03      	subs	r5, #3
 800e796:	45a8      	cmp	r8, r5
 800e798:	bf38      	it	cc
 800e79a:	2100      	movcc	r1, #0
 800e79c:	440b      	add	r3, r1
 800e79e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e7a2:	b191      	cbz	r1, 800e7ca <__mdiff+0x11a>
 800e7a4:	6117      	str	r7, [r2, #16]
 800e7a6:	e79d      	b.n	800e6e4 <__mdiff+0x34>
 800e7a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800e7ac:	46e6      	mov	lr, ip
 800e7ae:	0c08      	lsrs	r0, r1, #16
 800e7b0:	fa1c fc81 	uxtah	ip, ip, r1
 800e7b4:	4471      	add	r1, lr
 800e7b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e7ba:	b289      	uxth	r1, r1
 800e7bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e7c0:	f846 1b04 	str.w	r1, [r6], #4
 800e7c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e7c8:	e7dd      	b.n	800e786 <__mdiff+0xd6>
 800e7ca:	3f01      	subs	r7, #1
 800e7cc:	e7e7      	b.n	800e79e <__mdiff+0xee>
 800e7ce:	bf00      	nop
 800e7d0:	08010958 	.word	0x08010958
 800e7d4:	080109e0 	.word	0x080109e0

0800e7d8 <__ulp>:
 800e7d8:	b082      	sub	sp, #8
 800e7da:	ed8d 0b00 	vstr	d0, [sp]
 800e7de:	9a01      	ldr	r2, [sp, #4]
 800e7e0:	4b0f      	ldr	r3, [pc, #60]	@ (800e820 <__ulp+0x48>)
 800e7e2:	4013      	ands	r3, r2
 800e7e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	dc08      	bgt.n	800e7fe <__ulp+0x26>
 800e7ec:	425b      	negs	r3, r3
 800e7ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e7f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e7f6:	da04      	bge.n	800e802 <__ulp+0x2a>
 800e7f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e7fc:	4113      	asrs	r3, r2
 800e7fe:	2200      	movs	r2, #0
 800e800:	e008      	b.n	800e814 <__ulp+0x3c>
 800e802:	f1a2 0314 	sub.w	r3, r2, #20
 800e806:	2b1e      	cmp	r3, #30
 800e808:	bfda      	itte	le
 800e80a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e80e:	40da      	lsrle	r2, r3
 800e810:	2201      	movgt	r2, #1
 800e812:	2300      	movs	r3, #0
 800e814:	4619      	mov	r1, r3
 800e816:	4610      	mov	r0, r2
 800e818:	ec41 0b10 	vmov	d0, r0, r1
 800e81c:	b002      	add	sp, #8
 800e81e:	4770      	bx	lr
 800e820:	7ff00000 	.word	0x7ff00000

0800e824 <__b2d>:
 800e824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e828:	6906      	ldr	r6, [r0, #16]
 800e82a:	f100 0814 	add.w	r8, r0, #20
 800e82e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e832:	1f37      	subs	r7, r6, #4
 800e834:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e838:	4610      	mov	r0, r2
 800e83a:	f7ff fd4b 	bl	800e2d4 <__hi0bits>
 800e83e:	f1c0 0320 	rsb	r3, r0, #32
 800e842:	280a      	cmp	r0, #10
 800e844:	600b      	str	r3, [r1, #0]
 800e846:	491b      	ldr	r1, [pc, #108]	@ (800e8b4 <__b2d+0x90>)
 800e848:	dc15      	bgt.n	800e876 <__b2d+0x52>
 800e84a:	f1c0 0c0b 	rsb	ip, r0, #11
 800e84e:	fa22 f30c 	lsr.w	r3, r2, ip
 800e852:	45b8      	cmp	r8, r7
 800e854:	ea43 0501 	orr.w	r5, r3, r1
 800e858:	bf34      	ite	cc
 800e85a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e85e:	2300      	movcs	r3, #0
 800e860:	3015      	adds	r0, #21
 800e862:	fa02 f000 	lsl.w	r0, r2, r0
 800e866:	fa23 f30c 	lsr.w	r3, r3, ip
 800e86a:	4303      	orrs	r3, r0
 800e86c:	461c      	mov	r4, r3
 800e86e:	ec45 4b10 	vmov	d0, r4, r5
 800e872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e876:	45b8      	cmp	r8, r7
 800e878:	bf3a      	itte	cc
 800e87a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e87e:	f1a6 0708 	subcc.w	r7, r6, #8
 800e882:	2300      	movcs	r3, #0
 800e884:	380b      	subs	r0, #11
 800e886:	d012      	beq.n	800e8ae <__b2d+0x8a>
 800e888:	f1c0 0120 	rsb	r1, r0, #32
 800e88c:	fa23 f401 	lsr.w	r4, r3, r1
 800e890:	4082      	lsls	r2, r0
 800e892:	4322      	orrs	r2, r4
 800e894:	4547      	cmp	r7, r8
 800e896:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e89a:	bf8c      	ite	hi
 800e89c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e8a0:	2200      	movls	r2, #0
 800e8a2:	4083      	lsls	r3, r0
 800e8a4:	40ca      	lsrs	r2, r1
 800e8a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e8aa:	4313      	orrs	r3, r2
 800e8ac:	e7de      	b.n	800e86c <__b2d+0x48>
 800e8ae:	ea42 0501 	orr.w	r5, r2, r1
 800e8b2:	e7db      	b.n	800e86c <__b2d+0x48>
 800e8b4:	3ff00000 	.word	0x3ff00000

0800e8b8 <__d2b>:
 800e8b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e8bc:	460f      	mov	r7, r1
 800e8be:	2101      	movs	r1, #1
 800e8c0:	ec59 8b10 	vmov	r8, r9, d0
 800e8c4:	4616      	mov	r6, r2
 800e8c6:	f7ff fc13 	bl	800e0f0 <_Balloc>
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	b930      	cbnz	r0, 800e8dc <__d2b+0x24>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	4b23      	ldr	r3, [pc, #140]	@ (800e960 <__d2b+0xa8>)
 800e8d2:	4824      	ldr	r0, [pc, #144]	@ (800e964 <__d2b+0xac>)
 800e8d4:	f240 310f 	movw	r1, #783	@ 0x30f
 800e8d8:	f000 f986 	bl	800ebe8 <__assert_func>
 800e8dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e8e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e8e4:	b10d      	cbz	r5, 800e8ea <__d2b+0x32>
 800e8e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e8ea:	9301      	str	r3, [sp, #4]
 800e8ec:	f1b8 0300 	subs.w	r3, r8, #0
 800e8f0:	d023      	beq.n	800e93a <__d2b+0x82>
 800e8f2:	4668      	mov	r0, sp
 800e8f4:	9300      	str	r3, [sp, #0]
 800e8f6:	f7ff fd0c 	bl	800e312 <__lo0bits>
 800e8fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e8fe:	b1d0      	cbz	r0, 800e936 <__d2b+0x7e>
 800e900:	f1c0 0320 	rsb	r3, r0, #32
 800e904:	fa02 f303 	lsl.w	r3, r2, r3
 800e908:	430b      	orrs	r3, r1
 800e90a:	40c2      	lsrs	r2, r0
 800e90c:	6163      	str	r3, [r4, #20]
 800e90e:	9201      	str	r2, [sp, #4]
 800e910:	9b01      	ldr	r3, [sp, #4]
 800e912:	61a3      	str	r3, [r4, #24]
 800e914:	2b00      	cmp	r3, #0
 800e916:	bf0c      	ite	eq
 800e918:	2201      	moveq	r2, #1
 800e91a:	2202      	movne	r2, #2
 800e91c:	6122      	str	r2, [r4, #16]
 800e91e:	b1a5      	cbz	r5, 800e94a <__d2b+0x92>
 800e920:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e924:	4405      	add	r5, r0
 800e926:	603d      	str	r5, [r7, #0]
 800e928:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e92c:	6030      	str	r0, [r6, #0]
 800e92e:	4620      	mov	r0, r4
 800e930:	b003      	add	sp, #12
 800e932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e936:	6161      	str	r1, [r4, #20]
 800e938:	e7ea      	b.n	800e910 <__d2b+0x58>
 800e93a:	a801      	add	r0, sp, #4
 800e93c:	f7ff fce9 	bl	800e312 <__lo0bits>
 800e940:	9b01      	ldr	r3, [sp, #4]
 800e942:	6163      	str	r3, [r4, #20]
 800e944:	3020      	adds	r0, #32
 800e946:	2201      	movs	r2, #1
 800e948:	e7e8      	b.n	800e91c <__d2b+0x64>
 800e94a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e94e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e952:	6038      	str	r0, [r7, #0]
 800e954:	6918      	ldr	r0, [r3, #16]
 800e956:	f7ff fcbd 	bl	800e2d4 <__hi0bits>
 800e95a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e95e:	e7e5      	b.n	800e92c <__d2b+0x74>
 800e960:	08010958 	.word	0x08010958
 800e964:	080109e0 	.word	0x080109e0

0800e968 <__ratio>:
 800e968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e96c:	b085      	sub	sp, #20
 800e96e:	e9cd 1000 	strd	r1, r0, [sp]
 800e972:	a902      	add	r1, sp, #8
 800e974:	f7ff ff56 	bl	800e824 <__b2d>
 800e978:	9800      	ldr	r0, [sp, #0]
 800e97a:	a903      	add	r1, sp, #12
 800e97c:	ec55 4b10 	vmov	r4, r5, d0
 800e980:	f7ff ff50 	bl	800e824 <__b2d>
 800e984:	9b01      	ldr	r3, [sp, #4]
 800e986:	6919      	ldr	r1, [r3, #16]
 800e988:	9b00      	ldr	r3, [sp, #0]
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	1ac9      	subs	r1, r1, r3
 800e98e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e992:	1a9b      	subs	r3, r3, r2
 800e994:	ec5b ab10 	vmov	sl, fp, d0
 800e998:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	bfce      	itee	gt
 800e9a0:	462a      	movgt	r2, r5
 800e9a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e9a6:	465a      	movle	r2, fp
 800e9a8:	462f      	mov	r7, r5
 800e9aa:	46d9      	mov	r9, fp
 800e9ac:	bfcc      	ite	gt
 800e9ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e9b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e9b6:	464b      	mov	r3, r9
 800e9b8:	4652      	mov	r2, sl
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	4639      	mov	r1, r7
 800e9be:	f7f1 ff6d 	bl	800089c <__aeabi_ddiv>
 800e9c2:	ec41 0b10 	vmov	d0, r0, r1
 800e9c6:	b005      	add	sp, #20
 800e9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e9cc <__copybits>:
 800e9cc:	3901      	subs	r1, #1
 800e9ce:	b570      	push	{r4, r5, r6, lr}
 800e9d0:	1149      	asrs	r1, r1, #5
 800e9d2:	6914      	ldr	r4, [r2, #16]
 800e9d4:	3101      	adds	r1, #1
 800e9d6:	f102 0314 	add.w	r3, r2, #20
 800e9da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e9de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e9e2:	1f05      	subs	r5, r0, #4
 800e9e4:	42a3      	cmp	r3, r4
 800e9e6:	d30c      	bcc.n	800ea02 <__copybits+0x36>
 800e9e8:	1aa3      	subs	r3, r4, r2
 800e9ea:	3b11      	subs	r3, #17
 800e9ec:	f023 0303 	bic.w	r3, r3, #3
 800e9f0:	3211      	adds	r2, #17
 800e9f2:	42a2      	cmp	r2, r4
 800e9f4:	bf88      	it	hi
 800e9f6:	2300      	movhi	r3, #0
 800e9f8:	4418      	add	r0, r3
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	4288      	cmp	r0, r1
 800e9fe:	d305      	bcc.n	800ea0c <__copybits+0x40>
 800ea00:	bd70      	pop	{r4, r5, r6, pc}
 800ea02:	f853 6b04 	ldr.w	r6, [r3], #4
 800ea06:	f845 6f04 	str.w	r6, [r5, #4]!
 800ea0a:	e7eb      	b.n	800e9e4 <__copybits+0x18>
 800ea0c:	f840 3b04 	str.w	r3, [r0], #4
 800ea10:	e7f4      	b.n	800e9fc <__copybits+0x30>

0800ea12 <__any_on>:
 800ea12:	f100 0214 	add.w	r2, r0, #20
 800ea16:	6900      	ldr	r0, [r0, #16]
 800ea18:	114b      	asrs	r3, r1, #5
 800ea1a:	4298      	cmp	r0, r3
 800ea1c:	b510      	push	{r4, lr}
 800ea1e:	db11      	blt.n	800ea44 <__any_on+0x32>
 800ea20:	dd0a      	ble.n	800ea38 <__any_on+0x26>
 800ea22:	f011 011f 	ands.w	r1, r1, #31
 800ea26:	d007      	beq.n	800ea38 <__any_on+0x26>
 800ea28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ea2c:	fa24 f001 	lsr.w	r0, r4, r1
 800ea30:	fa00 f101 	lsl.w	r1, r0, r1
 800ea34:	428c      	cmp	r4, r1
 800ea36:	d10b      	bne.n	800ea50 <__any_on+0x3e>
 800ea38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d803      	bhi.n	800ea48 <__any_on+0x36>
 800ea40:	2000      	movs	r0, #0
 800ea42:	bd10      	pop	{r4, pc}
 800ea44:	4603      	mov	r3, r0
 800ea46:	e7f7      	b.n	800ea38 <__any_on+0x26>
 800ea48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ea4c:	2900      	cmp	r1, #0
 800ea4e:	d0f5      	beq.n	800ea3c <__any_on+0x2a>
 800ea50:	2001      	movs	r0, #1
 800ea52:	e7f6      	b.n	800ea42 <__any_on+0x30>

0800ea54 <__ascii_wctomb>:
 800ea54:	4603      	mov	r3, r0
 800ea56:	4608      	mov	r0, r1
 800ea58:	b141      	cbz	r1, 800ea6c <__ascii_wctomb+0x18>
 800ea5a:	2aff      	cmp	r2, #255	@ 0xff
 800ea5c:	d904      	bls.n	800ea68 <__ascii_wctomb+0x14>
 800ea5e:	228a      	movs	r2, #138	@ 0x8a
 800ea60:	601a      	str	r2, [r3, #0]
 800ea62:	f04f 30ff 	mov.w	r0, #4294967295
 800ea66:	4770      	bx	lr
 800ea68:	700a      	strb	r2, [r1, #0]
 800ea6a:	2001      	movs	r0, #1
 800ea6c:	4770      	bx	lr
	...

0800ea70 <__sflush_r>:
 800ea70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea78:	0716      	lsls	r6, r2, #28
 800ea7a:	4605      	mov	r5, r0
 800ea7c:	460c      	mov	r4, r1
 800ea7e:	d454      	bmi.n	800eb2a <__sflush_r+0xba>
 800ea80:	684b      	ldr	r3, [r1, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	dc02      	bgt.n	800ea8c <__sflush_r+0x1c>
 800ea86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	dd48      	ble.n	800eb1e <__sflush_r+0xae>
 800ea8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea8e:	2e00      	cmp	r6, #0
 800ea90:	d045      	beq.n	800eb1e <__sflush_r+0xae>
 800ea92:	2300      	movs	r3, #0
 800ea94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ea98:	682f      	ldr	r7, [r5, #0]
 800ea9a:	6a21      	ldr	r1, [r4, #32]
 800ea9c:	602b      	str	r3, [r5, #0]
 800ea9e:	d030      	beq.n	800eb02 <__sflush_r+0x92>
 800eaa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eaa2:	89a3      	ldrh	r3, [r4, #12]
 800eaa4:	0759      	lsls	r1, r3, #29
 800eaa6:	d505      	bpl.n	800eab4 <__sflush_r+0x44>
 800eaa8:	6863      	ldr	r3, [r4, #4]
 800eaaa:	1ad2      	subs	r2, r2, r3
 800eaac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eaae:	b10b      	cbz	r3, 800eab4 <__sflush_r+0x44>
 800eab0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eab2:	1ad2      	subs	r2, r2, r3
 800eab4:	2300      	movs	r3, #0
 800eab6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eab8:	6a21      	ldr	r1, [r4, #32]
 800eaba:	4628      	mov	r0, r5
 800eabc:	47b0      	blx	r6
 800eabe:	1c43      	adds	r3, r0, #1
 800eac0:	89a3      	ldrh	r3, [r4, #12]
 800eac2:	d106      	bne.n	800ead2 <__sflush_r+0x62>
 800eac4:	6829      	ldr	r1, [r5, #0]
 800eac6:	291d      	cmp	r1, #29
 800eac8:	d82b      	bhi.n	800eb22 <__sflush_r+0xb2>
 800eaca:	4a2a      	ldr	r2, [pc, #168]	@ (800eb74 <__sflush_r+0x104>)
 800eacc:	410a      	asrs	r2, r1
 800eace:	07d6      	lsls	r6, r2, #31
 800ead0:	d427      	bmi.n	800eb22 <__sflush_r+0xb2>
 800ead2:	2200      	movs	r2, #0
 800ead4:	6062      	str	r2, [r4, #4]
 800ead6:	04d9      	lsls	r1, r3, #19
 800ead8:	6922      	ldr	r2, [r4, #16]
 800eada:	6022      	str	r2, [r4, #0]
 800eadc:	d504      	bpl.n	800eae8 <__sflush_r+0x78>
 800eade:	1c42      	adds	r2, r0, #1
 800eae0:	d101      	bne.n	800eae6 <__sflush_r+0x76>
 800eae2:	682b      	ldr	r3, [r5, #0]
 800eae4:	b903      	cbnz	r3, 800eae8 <__sflush_r+0x78>
 800eae6:	6560      	str	r0, [r4, #84]	@ 0x54
 800eae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eaea:	602f      	str	r7, [r5, #0]
 800eaec:	b1b9      	cbz	r1, 800eb1e <__sflush_r+0xae>
 800eaee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eaf2:	4299      	cmp	r1, r3
 800eaf4:	d002      	beq.n	800eafc <__sflush_r+0x8c>
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f7fe feb6 	bl	800d868 <_free_r>
 800eafc:	2300      	movs	r3, #0
 800eafe:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb00:	e00d      	b.n	800eb1e <__sflush_r+0xae>
 800eb02:	2301      	movs	r3, #1
 800eb04:	4628      	mov	r0, r5
 800eb06:	47b0      	blx	r6
 800eb08:	4602      	mov	r2, r0
 800eb0a:	1c50      	adds	r0, r2, #1
 800eb0c:	d1c9      	bne.n	800eaa2 <__sflush_r+0x32>
 800eb0e:	682b      	ldr	r3, [r5, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d0c6      	beq.n	800eaa2 <__sflush_r+0x32>
 800eb14:	2b1d      	cmp	r3, #29
 800eb16:	d001      	beq.n	800eb1c <__sflush_r+0xac>
 800eb18:	2b16      	cmp	r3, #22
 800eb1a:	d11e      	bne.n	800eb5a <__sflush_r+0xea>
 800eb1c:	602f      	str	r7, [r5, #0]
 800eb1e:	2000      	movs	r0, #0
 800eb20:	e022      	b.n	800eb68 <__sflush_r+0xf8>
 800eb22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb26:	b21b      	sxth	r3, r3
 800eb28:	e01b      	b.n	800eb62 <__sflush_r+0xf2>
 800eb2a:	690f      	ldr	r7, [r1, #16]
 800eb2c:	2f00      	cmp	r7, #0
 800eb2e:	d0f6      	beq.n	800eb1e <__sflush_r+0xae>
 800eb30:	0793      	lsls	r3, r2, #30
 800eb32:	680e      	ldr	r6, [r1, #0]
 800eb34:	bf08      	it	eq
 800eb36:	694b      	ldreq	r3, [r1, #20]
 800eb38:	600f      	str	r7, [r1, #0]
 800eb3a:	bf18      	it	ne
 800eb3c:	2300      	movne	r3, #0
 800eb3e:	eba6 0807 	sub.w	r8, r6, r7
 800eb42:	608b      	str	r3, [r1, #8]
 800eb44:	f1b8 0f00 	cmp.w	r8, #0
 800eb48:	dde9      	ble.n	800eb1e <__sflush_r+0xae>
 800eb4a:	6a21      	ldr	r1, [r4, #32]
 800eb4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eb4e:	4643      	mov	r3, r8
 800eb50:	463a      	mov	r2, r7
 800eb52:	4628      	mov	r0, r5
 800eb54:	47b0      	blx	r6
 800eb56:	2800      	cmp	r0, #0
 800eb58:	dc08      	bgt.n	800eb6c <__sflush_r+0xfc>
 800eb5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb62:	81a3      	strh	r3, [r4, #12]
 800eb64:	f04f 30ff 	mov.w	r0, #4294967295
 800eb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb6c:	4407      	add	r7, r0
 800eb6e:	eba8 0800 	sub.w	r8, r8, r0
 800eb72:	e7e7      	b.n	800eb44 <__sflush_r+0xd4>
 800eb74:	dfbffffe 	.word	0xdfbffffe

0800eb78 <_fflush_r>:
 800eb78:	b538      	push	{r3, r4, r5, lr}
 800eb7a:	690b      	ldr	r3, [r1, #16]
 800eb7c:	4605      	mov	r5, r0
 800eb7e:	460c      	mov	r4, r1
 800eb80:	b913      	cbnz	r3, 800eb88 <_fflush_r+0x10>
 800eb82:	2500      	movs	r5, #0
 800eb84:	4628      	mov	r0, r5
 800eb86:	bd38      	pop	{r3, r4, r5, pc}
 800eb88:	b118      	cbz	r0, 800eb92 <_fflush_r+0x1a>
 800eb8a:	6a03      	ldr	r3, [r0, #32]
 800eb8c:	b90b      	cbnz	r3, 800eb92 <_fflush_r+0x1a>
 800eb8e:	f7fe fd4b 	bl	800d628 <__sinit>
 800eb92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0f3      	beq.n	800eb82 <_fflush_r+0xa>
 800eb9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eb9c:	07d0      	lsls	r0, r2, #31
 800eb9e:	d404      	bmi.n	800ebaa <_fflush_r+0x32>
 800eba0:	0599      	lsls	r1, r3, #22
 800eba2:	d402      	bmi.n	800ebaa <_fflush_r+0x32>
 800eba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eba6:	f7fe fe44 	bl	800d832 <__retarget_lock_acquire_recursive>
 800ebaa:	4628      	mov	r0, r5
 800ebac:	4621      	mov	r1, r4
 800ebae:	f7ff ff5f 	bl	800ea70 <__sflush_r>
 800ebb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ebb4:	07da      	lsls	r2, r3, #31
 800ebb6:	4605      	mov	r5, r0
 800ebb8:	d4e4      	bmi.n	800eb84 <_fflush_r+0xc>
 800ebba:	89a3      	ldrh	r3, [r4, #12]
 800ebbc:	059b      	lsls	r3, r3, #22
 800ebbe:	d4e1      	bmi.n	800eb84 <_fflush_r+0xc>
 800ebc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ebc2:	f7fe fe37 	bl	800d834 <__retarget_lock_release_recursive>
 800ebc6:	e7dd      	b.n	800eb84 <_fflush_r+0xc>

0800ebc8 <_sbrk_r>:
 800ebc8:	b538      	push	{r3, r4, r5, lr}
 800ebca:	4d06      	ldr	r5, [pc, #24]	@ (800ebe4 <_sbrk_r+0x1c>)
 800ebcc:	2300      	movs	r3, #0
 800ebce:	4604      	mov	r4, r0
 800ebd0:	4608      	mov	r0, r1
 800ebd2:	602b      	str	r3, [r5, #0]
 800ebd4:	f7f4 ff94 	bl	8003b00 <_sbrk>
 800ebd8:	1c43      	adds	r3, r0, #1
 800ebda:	d102      	bne.n	800ebe2 <_sbrk_r+0x1a>
 800ebdc:	682b      	ldr	r3, [r5, #0]
 800ebde:	b103      	cbz	r3, 800ebe2 <_sbrk_r+0x1a>
 800ebe0:	6023      	str	r3, [r4, #0]
 800ebe2:	bd38      	pop	{r3, r4, r5, pc}
 800ebe4:	2000116c 	.word	0x2000116c

0800ebe8 <__assert_func>:
 800ebe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebea:	4614      	mov	r4, r2
 800ebec:	461a      	mov	r2, r3
 800ebee:	4b09      	ldr	r3, [pc, #36]	@ (800ec14 <__assert_func+0x2c>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4605      	mov	r5, r0
 800ebf4:	68d8      	ldr	r0, [r3, #12]
 800ebf6:	b954      	cbnz	r4, 800ec0e <__assert_func+0x26>
 800ebf8:	4b07      	ldr	r3, [pc, #28]	@ (800ec18 <__assert_func+0x30>)
 800ebfa:	461c      	mov	r4, r3
 800ebfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec00:	9100      	str	r1, [sp, #0]
 800ec02:	462b      	mov	r3, r5
 800ec04:	4905      	ldr	r1, [pc, #20]	@ (800ec1c <__assert_func+0x34>)
 800ec06:	f000 f829 	bl	800ec5c <fiprintf>
 800ec0a:	f000 f839 	bl	800ec80 <abort>
 800ec0e:	4b04      	ldr	r3, [pc, #16]	@ (800ec20 <__assert_func+0x38>)
 800ec10:	e7f4      	b.n	800ebfc <__assert_func+0x14>
 800ec12:	bf00      	nop
 800ec14:	200001c0 	.word	0x200001c0
 800ec18:	08010c74 	.word	0x08010c74
 800ec1c:	08010c46 	.word	0x08010c46
 800ec20:	08010c39 	.word	0x08010c39

0800ec24 <_calloc_r>:
 800ec24:	b570      	push	{r4, r5, r6, lr}
 800ec26:	fba1 5402 	umull	r5, r4, r1, r2
 800ec2a:	b93c      	cbnz	r4, 800ec3c <_calloc_r+0x18>
 800ec2c:	4629      	mov	r1, r5
 800ec2e:	f7ff f9c1 	bl	800dfb4 <_malloc_r>
 800ec32:	4606      	mov	r6, r0
 800ec34:	b928      	cbnz	r0, 800ec42 <_calloc_r+0x1e>
 800ec36:	2600      	movs	r6, #0
 800ec38:	4630      	mov	r0, r6
 800ec3a:	bd70      	pop	{r4, r5, r6, pc}
 800ec3c:	220c      	movs	r2, #12
 800ec3e:	6002      	str	r2, [r0, #0]
 800ec40:	e7f9      	b.n	800ec36 <_calloc_r+0x12>
 800ec42:	462a      	mov	r2, r5
 800ec44:	4621      	mov	r1, r4
 800ec46:	f7fe fd68 	bl	800d71a <memset>
 800ec4a:	e7f5      	b.n	800ec38 <_calloc_r+0x14>

0800ec4c <malloc>:
 800ec4c:	4b02      	ldr	r3, [pc, #8]	@ (800ec58 <malloc+0xc>)
 800ec4e:	4601      	mov	r1, r0
 800ec50:	6818      	ldr	r0, [r3, #0]
 800ec52:	f7ff b9af 	b.w	800dfb4 <_malloc_r>
 800ec56:	bf00      	nop
 800ec58:	200001c0 	.word	0x200001c0

0800ec5c <fiprintf>:
 800ec5c:	b40e      	push	{r1, r2, r3}
 800ec5e:	b503      	push	{r0, r1, lr}
 800ec60:	4601      	mov	r1, r0
 800ec62:	ab03      	add	r3, sp, #12
 800ec64:	4805      	ldr	r0, [pc, #20]	@ (800ec7c <fiprintf+0x20>)
 800ec66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec6a:	6800      	ldr	r0, [r0, #0]
 800ec6c:	9301      	str	r3, [sp, #4]
 800ec6e:	f000 f837 	bl	800ece0 <_vfiprintf_r>
 800ec72:	b002      	add	sp, #8
 800ec74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec78:	b003      	add	sp, #12
 800ec7a:	4770      	bx	lr
 800ec7c:	200001c0 	.word	0x200001c0

0800ec80 <abort>:
 800ec80:	b508      	push	{r3, lr}
 800ec82:	2006      	movs	r0, #6
 800ec84:	f000 fb8e 	bl	800f3a4 <raise>
 800ec88:	2001      	movs	r0, #1
 800ec8a:	f7f4 fec1 	bl	8003a10 <_exit>

0800ec8e <__sfputc_r>:
 800ec8e:	6893      	ldr	r3, [r2, #8]
 800ec90:	3b01      	subs	r3, #1
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	b410      	push	{r4}
 800ec96:	6093      	str	r3, [r2, #8]
 800ec98:	da08      	bge.n	800ecac <__sfputc_r+0x1e>
 800ec9a:	6994      	ldr	r4, [r2, #24]
 800ec9c:	42a3      	cmp	r3, r4
 800ec9e:	db01      	blt.n	800eca4 <__sfputc_r+0x16>
 800eca0:	290a      	cmp	r1, #10
 800eca2:	d103      	bne.n	800ecac <__sfputc_r+0x1e>
 800eca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eca8:	f000 bac0 	b.w	800f22c <__swbuf_r>
 800ecac:	6813      	ldr	r3, [r2, #0]
 800ecae:	1c58      	adds	r0, r3, #1
 800ecb0:	6010      	str	r0, [r2, #0]
 800ecb2:	7019      	strb	r1, [r3, #0]
 800ecb4:	4608      	mov	r0, r1
 800ecb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <__sfputs_r>:
 800ecbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecbe:	4606      	mov	r6, r0
 800ecc0:	460f      	mov	r7, r1
 800ecc2:	4614      	mov	r4, r2
 800ecc4:	18d5      	adds	r5, r2, r3
 800ecc6:	42ac      	cmp	r4, r5
 800ecc8:	d101      	bne.n	800ecce <__sfputs_r+0x12>
 800ecca:	2000      	movs	r0, #0
 800eccc:	e007      	b.n	800ecde <__sfputs_r+0x22>
 800ecce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecd2:	463a      	mov	r2, r7
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	f7ff ffda 	bl	800ec8e <__sfputc_r>
 800ecda:	1c43      	adds	r3, r0, #1
 800ecdc:	d1f3      	bne.n	800ecc6 <__sfputs_r+0xa>
 800ecde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ece0 <_vfiprintf_r>:
 800ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece4:	460d      	mov	r5, r1
 800ece6:	b09d      	sub	sp, #116	@ 0x74
 800ece8:	4614      	mov	r4, r2
 800ecea:	4698      	mov	r8, r3
 800ecec:	4606      	mov	r6, r0
 800ecee:	b118      	cbz	r0, 800ecf8 <_vfiprintf_r+0x18>
 800ecf0:	6a03      	ldr	r3, [r0, #32]
 800ecf2:	b90b      	cbnz	r3, 800ecf8 <_vfiprintf_r+0x18>
 800ecf4:	f7fe fc98 	bl	800d628 <__sinit>
 800ecf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ecfa:	07d9      	lsls	r1, r3, #31
 800ecfc:	d405      	bmi.n	800ed0a <_vfiprintf_r+0x2a>
 800ecfe:	89ab      	ldrh	r3, [r5, #12]
 800ed00:	059a      	lsls	r2, r3, #22
 800ed02:	d402      	bmi.n	800ed0a <_vfiprintf_r+0x2a>
 800ed04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed06:	f7fe fd94 	bl	800d832 <__retarget_lock_acquire_recursive>
 800ed0a:	89ab      	ldrh	r3, [r5, #12]
 800ed0c:	071b      	lsls	r3, r3, #28
 800ed0e:	d501      	bpl.n	800ed14 <_vfiprintf_r+0x34>
 800ed10:	692b      	ldr	r3, [r5, #16]
 800ed12:	b99b      	cbnz	r3, 800ed3c <_vfiprintf_r+0x5c>
 800ed14:	4629      	mov	r1, r5
 800ed16:	4630      	mov	r0, r6
 800ed18:	f000 fac6 	bl	800f2a8 <__swsetup_r>
 800ed1c:	b170      	cbz	r0, 800ed3c <_vfiprintf_r+0x5c>
 800ed1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed20:	07dc      	lsls	r4, r3, #31
 800ed22:	d504      	bpl.n	800ed2e <_vfiprintf_r+0x4e>
 800ed24:	f04f 30ff 	mov.w	r0, #4294967295
 800ed28:	b01d      	add	sp, #116	@ 0x74
 800ed2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed2e:	89ab      	ldrh	r3, [r5, #12]
 800ed30:	0598      	lsls	r0, r3, #22
 800ed32:	d4f7      	bmi.n	800ed24 <_vfiprintf_r+0x44>
 800ed34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed36:	f7fe fd7d 	bl	800d834 <__retarget_lock_release_recursive>
 800ed3a:	e7f3      	b.n	800ed24 <_vfiprintf_r+0x44>
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed40:	2320      	movs	r3, #32
 800ed42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed4a:	2330      	movs	r3, #48	@ 0x30
 800ed4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eefc <_vfiprintf_r+0x21c>
 800ed50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed54:	f04f 0901 	mov.w	r9, #1
 800ed58:	4623      	mov	r3, r4
 800ed5a:	469a      	mov	sl, r3
 800ed5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed60:	b10a      	cbz	r2, 800ed66 <_vfiprintf_r+0x86>
 800ed62:	2a25      	cmp	r2, #37	@ 0x25
 800ed64:	d1f9      	bne.n	800ed5a <_vfiprintf_r+0x7a>
 800ed66:	ebba 0b04 	subs.w	fp, sl, r4
 800ed6a:	d00b      	beq.n	800ed84 <_vfiprintf_r+0xa4>
 800ed6c:	465b      	mov	r3, fp
 800ed6e:	4622      	mov	r2, r4
 800ed70:	4629      	mov	r1, r5
 800ed72:	4630      	mov	r0, r6
 800ed74:	f7ff ffa2 	bl	800ecbc <__sfputs_r>
 800ed78:	3001      	adds	r0, #1
 800ed7a:	f000 80a7 	beq.w	800eecc <_vfiprintf_r+0x1ec>
 800ed7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed80:	445a      	add	r2, fp
 800ed82:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed84:	f89a 3000 	ldrb.w	r3, [sl]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	f000 809f 	beq.w	800eecc <_vfiprintf_r+0x1ec>
 800ed8e:	2300      	movs	r3, #0
 800ed90:	f04f 32ff 	mov.w	r2, #4294967295
 800ed94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed98:	f10a 0a01 	add.w	sl, sl, #1
 800ed9c:	9304      	str	r3, [sp, #16]
 800ed9e:	9307      	str	r3, [sp, #28]
 800eda0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eda4:	931a      	str	r3, [sp, #104]	@ 0x68
 800eda6:	4654      	mov	r4, sl
 800eda8:	2205      	movs	r2, #5
 800edaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edae:	4853      	ldr	r0, [pc, #332]	@ (800eefc <_vfiprintf_r+0x21c>)
 800edb0:	f7f1 fa3e 	bl	8000230 <memchr>
 800edb4:	9a04      	ldr	r2, [sp, #16]
 800edb6:	b9d8      	cbnz	r0, 800edf0 <_vfiprintf_r+0x110>
 800edb8:	06d1      	lsls	r1, r2, #27
 800edba:	bf44      	itt	mi
 800edbc:	2320      	movmi	r3, #32
 800edbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edc2:	0713      	lsls	r3, r2, #28
 800edc4:	bf44      	itt	mi
 800edc6:	232b      	movmi	r3, #43	@ 0x2b
 800edc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edcc:	f89a 3000 	ldrb.w	r3, [sl]
 800edd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800edd2:	d015      	beq.n	800ee00 <_vfiprintf_r+0x120>
 800edd4:	9a07      	ldr	r2, [sp, #28]
 800edd6:	4654      	mov	r4, sl
 800edd8:	2000      	movs	r0, #0
 800edda:	f04f 0c0a 	mov.w	ip, #10
 800edde:	4621      	mov	r1, r4
 800ede0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ede4:	3b30      	subs	r3, #48	@ 0x30
 800ede6:	2b09      	cmp	r3, #9
 800ede8:	d94b      	bls.n	800ee82 <_vfiprintf_r+0x1a2>
 800edea:	b1b0      	cbz	r0, 800ee1a <_vfiprintf_r+0x13a>
 800edec:	9207      	str	r2, [sp, #28]
 800edee:	e014      	b.n	800ee1a <_vfiprintf_r+0x13a>
 800edf0:	eba0 0308 	sub.w	r3, r0, r8
 800edf4:	fa09 f303 	lsl.w	r3, r9, r3
 800edf8:	4313      	orrs	r3, r2
 800edfa:	9304      	str	r3, [sp, #16]
 800edfc:	46a2      	mov	sl, r4
 800edfe:	e7d2      	b.n	800eda6 <_vfiprintf_r+0xc6>
 800ee00:	9b03      	ldr	r3, [sp, #12]
 800ee02:	1d19      	adds	r1, r3, #4
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	9103      	str	r1, [sp, #12]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	bfbb      	ittet	lt
 800ee0c:	425b      	neglt	r3, r3
 800ee0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ee12:	9307      	strge	r3, [sp, #28]
 800ee14:	9307      	strlt	r3, [sp, #28]
 800ee16:	bfb8      	it	lt
 800ee18:	9204      	strlt	r2, [sp, #16]
 800ee1a:	7823      	ldrb	r3, [r4, #0]
 800ee1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee1e:	d10a      	bne.n	800ee36 <_vfiprintf_r+0x156>
 800ee20:	7863      	ldrb	r3, [r4, #1]
 800ee22:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee24:	d132      	bne.n	800ee8c <_vfiprintf_r+0x1ac>
 800ee26:	9b03      	ldr	r3, [sp, #12]
 800ee28:	1d1a      	adds	r2, r3, #4
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	9203      	str	r2, [sp, #12]
 800ee2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee32:	3402      	adds	r4, #2
 800ee34:	9305      	str	r3, [sp, #20]
 800ee36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ef0c <_vfiprintf_r+0x22c>
 800ee3a:	7821      	ldrb	r1, [r4, #0]
 800ee3c:	2203      	movs	r2, #3
 800ee3e:	4650      	mov	r0, sl
 800ee40:	f7f1 f9f6 	bl	8000230 <memchr>
 800ee44:	b138      	cbz	r0, 800ee56 <_vfiprintf_r+0x176>
 800ee46:	9b04      	ldr	r3, [sp, #16]
 800ee48:	eba0 000a 	sub.w	r0, r0, sl
 800ee4c:	2240      	movs	r2, #64	@ 0x40
 800ee4e:	4082      	lsls	r2, r0
 800ee50:	4313      	orrs	r3, r2
 800ee52:	3401      	adds	r4, #1
 800ee54:	9304      	str	r3, [sp, #16]
 800ee56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee5a:	4829      	ldr	r0, [pc, #164]	@ (800ef00 <_vfiprintf_r+0x220>)
 800ee5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee60:	2206      	movs	r2, #6
 800ee62:	f7f1 f9e5 	bl	8000230 <memchr>
 800ee66:	2800      	cmp	r0, #0
 800ee68:	d03f      	beq.n	800eeea <_vfiprintf_r+0x20a>
 800ee6a:	4b26      	ldr	r3, [pc, #152]	@ (800ef04 <_vfiprintf_r+0x224>)
 800ee6c:	bb1b      	cbnz	r3, 800eeb6 <_vfiprintf_r+0x1d6>
 800ee6e:	9b03      	ldr	r3, [sp, #12]
 800ee70:	3307      	adds	r3, #7
 800ee72:	f023 0307 	bic.w	r3, r3, #7
 800ee76:	3308      	adds	r3, #8
 800ee78:	9303      	str	r3, [sp, #12]
 800ee7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee7c:	443b      	add	r3, r7
 800ee7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee80:	e76a      	b.n	800ed58 <_vfiprintf_r+0x78>
 800ee82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee86:	460c      	mov	r4, r1
 800ee88:	2001      	movs	r0, #1
 800ee8a:	e7a8      	b.n	800edde <_vfiprintf_r+0xfe>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	3401      	adds	r4, #1
 800ee90:	9305      	str	r3, [sp, #20]
 800ee92:	4619      	mov	r1, r3
 800ee94:	f04f 0c0a 	mov.w	ip, #10
 800ee98:	4620      	mov	r0, r4
 800ee9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee9e:	3a30      	subs	r2, #48	@ 0x30
 800eea0:	2a09      	cmp	r2, #9
 800eea2:	d903      	bls.n	800eeac <_vfiprintf_r+0x1cc>
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d0c6      	beq.n	800ee36 <_vfiprintf_r+0x156>
 800eea8:	9105      	str	r1, [sp, #20]
 800eeaa:	e7c4      	b.n	800ee36 <_vfiprintf_r+0x156>
 800eeac:	fb0c 2101 	mla	r1, ip, r1, r2
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e7f0      	b.n	800ee98 <_vfiprintf_r+0x1b8>
 800eeb6:	ab03      	add	r3, sp, #12
 800eeb8:	9300      	str	r3, [sp, #0]
 800eeba:	462a      	mov	r2, r5
 800eebc:	4b12      	ldr	r3, [pc, #72]	@ (800ef08 <_vfiprintf_r+0x228>)
 800eebe:	a904      	add	r1, sp, #16
 800eec0:	4630      	mov	r0, r6
 800eec2:	f3af 8000 	nop.w
 800eec6:	4607      	mov	r7, r0
 800eec8:	1c78      	adds	r0, r7, #1
 800eeca:	d1d6      	bne.n	800ee7a <_vfiprintf_r+0x19a>
 800eecc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eece:	07d9      	lsls	r1, r3, #31
 800eed0:	d405      	bmi.n	800eede <_vfiprintf_r+0x1fe>
 800eed2:	89ab      	ldrh	r3, [r5, #12]
 800eed4:	059a      	lsls	r2, r3, #22
 800eed6:	d402      	bmi.n	800eede <_vfiprintf_r+0x1fe>
 800eed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eeda:	f7fe fcab 	bl	800d834 <__retarget_lock_release_recursive>
 800eede:	89ab      	ldrh	r3, [r5, #12]
 800eee0:	065b      	lsls	r3, r3, #25
 800eee2:	f53f af1f 	bmi.w	800ed24 <_vfiprintf_r+0x44>
 800eee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eee8:	e71e      	b.n	800ed28 <_vfiprintf_r+0x48>
 800eeea:	ab03      	add	r3, sp, #12
 800eeec:	9300      	str	r3, [sp, #0]
 800eeee:	462a      	mov	r2, r5
 800eef0:	4b05      	ldr	r3, [pc, #20]	@ (800ef08 <_vfiprintf_r+0x228>)
 800eef2:	a904      	add	r1, sp, #16
 800eef4:	4630      	mov	r0, r6
 800eef6:	f000 f879 	bl	800efec <_printf_i>
 800eefa:	e7e4      	b.n	800eec6 <_vfiprintf_r+0x1e6>
 800eefc:	08010c75 	.word	0x08010c75
 800ef00:	08010c7f 	.word	0x08010c7f
 800ef04:	00000000 	.word	0x00000000
 800ef08:	0800ecbd 	.word	0x0800ecbd
 800ef0c:	08010c7b 	.word	0x08010c7b

0800ef10 <_printf_common>:
 800ef10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef14:	4616      	mov	r6, r2
 800ef16:	4698      	mov	r8, r3
 800ef18:	688a      	ldr	r2, [r1, #8]
 800ef1a:	690b      	ldr	r3, [r1, #16]
 800ef1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ef20:	4293      	cmp	r3, r2
 800ef22:	bfb8      	it	lt
 800ef24:	4613      	movlt	r3, r2
 800ef26:	6033      	str	r3, [r6, #0]
 800ef28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ef2c:	4607      	mov	r7, r0
 800ef2e:	460c      	mov	r4, r1
 800ef30:	b10a      	cbz	r2, 800ef36 <_printf_common+0x26>
 800ef32:	3301      	adds	r3, #1
 800ef34:	6033      	str	r3, [r6, #0]
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	0699      	lsls	r1, r3, #26
 800ef3a:	bf42      	ittt	mi
 800ef3c:	6833      	ldrmi	r3, [r6, #0]
 800ef3e:	3302      	addmi	r3, #2
 800ef40:	6033      	strmi	r3, [r6, #0]
 800ef42:	6825      	ldr	r5, [r4, #0]
 800ef44:	f015 0506 	ands.w	r5, r5, #6
 800ef48:	d106      	bne.n	800ef58 <_printf_common+0x48>
 800ef4a:	f104 0a19 	add.w	sl, r4, #25
 800ef4e:	68e3      	ldr	r3, [r4, #12]
 800ef50:	6832      	ldr	r2, [r6, #0]
 800ef52:	1a9b      	subs	r3, r3, r2
 800ef54:	42ab      	cmp	r3, r5
 800ef56:	dc26      	bgt.n	800efa6 <_printf_common+0x96>
 800ef58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ef5c:	6822      	ldr	r2, [r4, #0]
 800ef5e:	3b00      	subs	r3, #0
 800ef60:	bf18      	it	ne
 800ef62:	2301      	movne	r3, #1
 800ef64:	0692      	lsls	r2, r2, #26
 800ef66:	d42b      	bmi.n	800efc0 <_printf_common+0xb0>
 800ef68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ef6c:	4641      	mov	r1, r8
 800ef6e:	4638      	mov	r0, r7
 800ef70:	47c8      	blx	r9
 800ef72:	3001      	adds	r0, #1
 800ef74:	d01e      	beq.n	800efb4 <_printf_common+0xa4>
 800ef76:	6823      	ldr	r3, [r4, #0]
 800ef78:	6922      	ldr	r2, [r4, #16]
 800ef7a:	f003 0306 	and.w	r3, r3, #6
 800ef7e:	2b04      	cmp	r3, #4
 800ef80:	bf02      	ittt	eq
 800ef82:	68e5      	ldreq	r5, [r4, #12]
 800ef84:	6833      	ldreq	r3, [r6, #0]
 800ef86:	1aed      	subeq	r5, r5, r3
 800ef88:	68a3      	ldr	r3, [r4, #8]
 800ef8a:	bf0c      	ite	eq
 800ef8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef90:	2500      	movne	r5, #0
 800ef92:	4293      	cmp	r3, r2
 800ef94:	bfc4      	itt	gt
 800ef96:	1a9b      	subgt	r3, r3, r2
 800ef98:	18ed      	addgt	r5, r5, r3
 800ef9a:	2600      	movs	r6, #0
 800ef9c:	341a      	adds	r4, #26
 800ef9e:	42b5      	cmp	r5, r6
 800efa0:	d11a      	bne.n	800efd8 <_printf_common+0xc8>
 800efa2:	2000      	movs	r0, #0
 800efa4:	e008      	b.n	800efb8 <_printf_common+0xa8>
 800efa6:	2301      	movs	r3, #1
 800efa8:	4652      	mov	r2, sl
 800efaa:	4641      	mov	r1, r8
 800efac:	4638      	mov	r0, r7
 800efae:	47c8      	blx	r9
 800efb0:	3001      	adds	r0, #1
 800efb2:	d103      	bne.n	800efbc <_printf_common+0xac>
 800efb4:	f04f 30ff 	mov.w	r0, #4294967295
 800efb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efbc:	3501      	adds	r5, #1
 800efbe:	e7c6      	b.n	800ef4e <_printf_common+0x3e>
 800efc0:	18e1      	adds	r1, r4, r3
 800efc2:	1c5a      	adds	r2, r3, #1
 800efc4:	2030      	movs	r0, #48	@ 0x30
 800efc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800efca:	4422      	add	r2, r4
 800efcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800efd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800efd4:	3302      	adds	r3, #2
 800efd6:	e7c7      	b.n	800ef68 <_printf_common+0x58>
 800efd8:	2301      	movs	r3, #1
 800efda:	4622      	mov	r2, r4
 800efdc:	4641      	mov	r1, r8
 800efde:	4638      	mov	r0, r7
 800efe0:	47c8      	blx	r9
 800efe2:	3001      	adds	r0, #1
 800efe4:	d0e6      	beq.n	800efb4 <_printf_common+0xa4>
 800efe6:	3601      	adds	r6, #1
 800efe8:	e7d9      	b.n	800ef9e <_printf_common+0x8e>
	...

0800efec <_printf_i>:
 800efec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eff0:	7e0f      	ldrb	r7, [r1, #24]
 800eff2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eff4:	2f78      	cmp	r7, #120	@ 0x78
 800eff6:	4691      	mov	r9, r2
 800eff8:	4680      	mov	r8, r0
 800effa:	460c      	mov	r4, r1
 800effc:	469a      	mov	sl, r3
 800effe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f002:	d807      	bhi.n	800f014 <_printf_i+0x28>
 800f004:	2f62      	cmp	r7, #98	@ 0x62
 800f006:	d80a      	bhi.n	800f01e <_printf_i+0x32>
 800f008:	2f00      	cmp	r7, #0
 800f00a:	f000 80d2 	beq.w	800f1b2 <_printf_i+0x1c6>
 800f00e:	2f58      	cmp	r7, #88	@ 0x58
 800f010:	f000 80b9 	beq.w	800f186 <_printf_i+0x19a>
 800f014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f01c:	e03a      	b.n	800f094 <_printf_i+0xa8>
 800f01e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f022:	2b15      	cmp	r3, #21
 800f024:	d8f6      	bhi.n	800f014 <_printf_i+0x28>
 800f026:	a101      	add	r1, pc, #4	@ (adr r1, 800f02c <_printf_i+0x40>)
 800f028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f02c:	0800f085 	.word	0x0800f085
 800f030:	0800f099 	.word	0x0800f099
 800f034:	0800f015 	.word	0x0800f015
 800f038:	0800f015 	.word	0x0800f015
 800f03c:	0800f015 	.word	0x0800f015
 800f040:	0800f015 	.word	0x0800f015
 800f044:	0800f099 	.word	0x0800f099
 800f048:	0800f015 	.word	0x0800f015
 800f04c:	0800f015 	.word	0x0800f015
 800f050:	0800f015 	.word	0x0800f015
 800f054:	0800f015 	.word	0x0800f015
 800f058:	0800f199 	.word	0x0800f199
 800f05c:	0800f0c3 	.word	0x0800f0c3
 800f060:	0800f153 	.word	0x0800f153
 800f064:	0800f015 	.word	0x0800f015
 800f068:	0800f015 	.word	0x0800f015
 800f06c:	0800f1bb 	.word	0x0800f1bb
 800f070:	0800f015 	.word	0x0800f015
 800f074:	0800f0c3 	.word	0x0800f0c3
 800f078:	0800f015 	.word	0x0800f015
 800f07c:	0800f015 	.word	0x0800f015
 800f080:	0800f15b 	.word	0x0800f15b
 800f084:	6833      	ldr	r3, [r6, #0]
 800f086:	1d1a      	adds	r2, r3, #4
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	6032      	str	r2, [r6, #0]
 800f08c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f094:	2301      	movs	r3, #1
 800f096:	e09d      	b.n	800f1d4 <_printf_i+0x1e8>
 800f098:	6833      	ldr	r3, [r6, #0]
 800f09a:	6820      	ldr	r0, [r4, #0]
 800f09c:	1d19      	adds	r1, r3, #4
 800f09e:	6031      	str	r1, [r6, #0]
 800f0a0:	0606      	lsls	r6, r0, #24
 800f0a2:	d501      	bpl.n	800f0a8 <_printf_i+0xbc>
 800f0a4:	681d      	ldr	r5, [r3, #0]
 800f0a6:	e003      	b.n	800f0b0 <_printf_i+0xc4>
 800f0a8:	0645      	lsls	r5, r0, #25
 800f0aa:	d5fb      	bpl.n	800f0a4 <_printf_i+0xb8>
 800f0ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f0b0:	2d00      	cmp	r5, #0
 800f0b2:	da03      	bge.n	800f0bc <_printf_i+0xd0>
 800f0b4:	232d      	movs	r3, #45	@ 0x2d
 800f0b6:	426d      	negs	r5, r5
 800f0b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0bc:	4859      	ldr	r0, [pc, #356]	@ (800f224 <_printf_i+0x238>)
 800f0be:	230a      	movs	r3, #10
 800f0c0:	e011      	b.n	800f0e6 <_printf_i+0xfa>
 800f0c2:	6821      	ldr	r1, [r4, #0]
 800f0c4:	6833      	ldr	r3, [r6, #0]
 800f0c6:	0608      	lsls	r0, r1, #24
 800f0c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f0cc:	d402      	bmi.n	800f0d4 <_printf_i+0xe8>
 800f0ce:	0649      	lsls	r1, r1, #25
 800f0d0:	bf48      	it	mi
 800f0d2:	b2ad      	uxthmi	r5, r5
 800f0d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f0d6:	4853      	ldr	r0, [pc, #332]	@ (800f224 <_printf_i+0x238>)
 800f0d8:	6033      	str	r3, [r6, #0]
 800f0da:	bf14      	ite	ne
 800f0dc:	230a      	movne	r3, #10
 800f0de:	2308      	moveq	r3, #8
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f0e6:	6866      	ldr	r6, [r4, #4]
 800f0e8:	60a6      	str	r6, [r4, #8]
 800f0ea:	2e00      	cmp	r6, #0
 800f0ec:	bfa2      	ittt	ge
 800f0ee:	6821      	ldrge	r1, [r4, #0]
 800f0f0:	f021 0104 	bicge.w	r1, r1, #4
 800f0f4:	6021      	strge	r1, [r4, #0]
 800f0f6:	b90d      	cbnz	r5, 800f0fc <_printf_i+0x110>
 800f0f8:	2e00      	cmp	r6, #0
 800f0fa:	d04b      	beq.n	800f194 <_printf_i+0x1a8>
 800f0fc:	4616      	mov	r6, r2
 800f0fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800f102:	fb03 5711 	mls	r7, r3, r1, r5
 800f106:	5dc7      	ldrb	r7, [r0, r7]
 800f108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f10c:	462f      	mov	r7, r5
 800f10e:	42bb      	cmp	r3, r7
 800f110:	460d      	mov	r5, r1
 800f112:	d9f4      	bls.n	800f0fe <_printf_i+0x112>
 800f114:	2b08      	cmp	r3, #8
 800f116:	d10b      	bne.n	800f130 <_printf_i+0x144>
 800f118:	6823      	ldr	r3, [r4, #0]
 800f11a:	07df      	lsls	r7, r3, #31
 800f11c:	d508      	bpl.n	800f130 <_printf_i+0x144>
 800f11e:	6923      	ldr	r3, [r4, #16]
 800f120:	6861      	ldr	r1, [r4, #4]
 800f122:	4299      	cmp	r1, r3
 800f124:	bfde      	ittt	le
 800f126:	2330      	movle	r3, #48	@ 0x30
 800f128:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f12c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f130:	1b92      	subs	r2, r2, r6
 800f132:	6122      	str	r2, [r4, #16]
 800f134:	f8cd a000 	str.w	sl, [sp]
 800f138:	464b      	mov	r3, r9
 800f13a:	aa03      	add	r2, sp, #12
 800f13c:	4621      	mov	r1, r4
 800f13e:	4640      	mov	r0, r8
 800f140:	f7ff fee6 	bl	800ef10 <_printf_common>
 800f144:	3001      	adds	r0, #1
 800f146:	d14a      	bne.n	800f1de <_printf_i+0x1f2>
 800f148:	f04f 30ff 	mov.w	r0, #4294967295
 800f14c:	b004      	add	sp, #16
 800f14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f152:	6823      	ldr	r3, [r4, #0]
 800f154:	f043 0320 	orr.w	r3, r3, #32
 800f158:	6023      	str	r3, [r4, #0]
 800f15a:	4833      	ldr	r0, [pc, #204]	@ (800f228 <_printf_i+0x23c>)
 800f15c:	2778      	movs	r7, #120	@ 0x78
 800f15e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f162:	6823      	ldr	r3, [r4, #0]
 800f164:	6831      	ldr	r1, [r6, #0]
 800f166:	061f      	lsls	r7, r3, #24
 800f168:	f851 5b04 	ldr.w	r5, [r1], #4
 800f16c:	d402      	bmi.n	800f174 <_printf_i+0x188>
 800f16e:	065f      	lsls	r7, r3, #25
 800f170:	bf48      	it	mi
 800f172:	b2ad      	uxthmi	r5, r5
 800f174:	6031      	str	r1, [r6, #0]
 800f176:	07d9      	lsls	r1, r3, #31
 800f178:	bf44      	itt	mi
 800f17a:	f043 0320 	orrmi.w	r3, r3, #32
 800f17e:	6023      	strmi	r3, [r4, #0]
 800f180:	b11d      	cbz	r5, 800f18a <_printf_i+0x19e>
 800f182:	2310      	movs	r3, #16
 800f184:	e7ac      	b.n	800f0e0 <_printf_i+0xf4>
 800f186:	4827      	ldr	r0, [pc, #156]	@ (800f224 <_printf_i+0x238>)
 800f188:	e7e9      	b.n	800f15e <_printf_i+0x172>
 800f18a:	6823      	ldr	r3, [r4, #0]
 800f18c:	f023 0320 	bic.w	r3, r3, #32
 800f190:	6023      	str	r3, [r4, #0]
 800f192:	e7f6      	b.n	800f182 <_printf_i+0x196>
 800f194:	4616      	mov	r6, r2
 800f196:	e7bd      	b.n	800f114 <_printf_i+0x128>
 800f198:	6833      	ldr	r3, [r6, #0]
 800f19a:	6825      	ldr	r5, [r4, #0]
 800f19c:	6961      	ldr	r1, [r4, #20]
 800f19e:	1d18      	adds	r0, r3, #4
 800f1a0:	6030      	str	r0, [r6, #0]
 800f1a2:	062e      	lsls	r6, r5, #24
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	d501      	bpl.n	800f1ac <_printf_i+0x1c0>
 800f1a8:	6019      	str	r1, [r3, #0]
 800f1aa:	e002      	b.n	800f1b2 <_printf_i+0x1c6>
 800f1ac:	0668      	lsls	r0, r5, #25
 800f1ae:	d5fb      	bpl.n	800f1a8 <_printf_i+0x1bc>
 800f1b0:	8019      	strh	r1, [r3, #0]
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	6123      	str	r3, [r4, #16]
 800f1b6:	4616      	mov	r6, r2
 800f1b8:	e7bc      	b.n	800f134 <_printf_i+0x148>
 800f1ba:	6833      	ldr	r3, [r6, #0]
 800f1bc:	1d1a      	adds	r2, r3, #4
 800f1be:	6032      	str	r2, [r6, #0]
 800f1c0:	681e      	ldr	r6, [r3, #0]
 800f1c2:	6862      	ldr	r2, [r4, #4]
 800f1c4:	2100      	movs	r1, #0
 800f1c6:	4630      	mov	r0, r6
 800f1c8:	f7f1 f832 	bl	8000230 <memchr>
 800f1cc:	b108      	cbz	r0, 800f1d2 <_printf_i+0x1e6>
 800f1ce:	1b80      	subs	r0, r0, r6
 800f1d0:	6060      	str	r0, [r4, #4]
 800f1d2:	6863      	ldr	r3, [r4, #4]
 800f1d4:	6123      	str	r3, [r4, #16]
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1dc:	e7aa      	b.n	800f134 <_printf_i+0x148>
 800f1de:	6923      	ldr	r3, [r4, #16]
 800f1e0:	4632      	mov	r2, r6
 800f1e2:	4649      	mov	r1, r9
 800f1e4:	4640      	mov	r0, r8
 800f1e6:	47d0      	blx	sl
 800f1e8:	3001      	adds	r0, #1
 800f1ea:	d0ad      	beq.n	800f148 <_printf_i+0x15c>
 800f1ec:	6823      	ldr	r3, [r4, #0]
 800f1ee:	079b      	lsls	r3, r3, #30
 800f1f0:	d413      	bmi.n	800f21a <_printf_i+0x22e>
 800f1f2:	68e0      	ldr	r0, [r4, #12]
 800f1f4:	9b03      	ldr	r3, [sp, #12]
 800f1f6:	4298      	cmp	r0, r3
 800f1f8:	bfb8      	it	lt
 800f1fa:	4618      	movlt	r0, r3
 800f1fc:	e7a6      	b.n	800f14c <_printf_i+0x160>
 800f1fe:	2301      	movs	r3, #1
 800f200:	4632      	mov	r2, r6
 800f202:	4649      	mov	r1, r9
 800f204:	4640      	mov	r0, r8
 800f206:	47d0      	blx	sl
 800f208:	3001      	adds	r0, #1
 800f20a:	d09d      	beq.n	800f148 <_printf_i+0x15c>
 800f20c:	3501      	adds	r5, #1
 800f20e:	68e3      	ldr	r3, [r4, #12]
 800f210:	9903      	ldr	r1, [sp, #12]
 800f212:	1a5b      	subs	r3, r3, r1
 800f214:	42ab      	cmp	r3, r5
 800f216:	dcf2      	bgt.n	800f1fe <_printf_i+0x212>
 800f218:	e7eb      	b.n	800f1f2 <_printf_i+0x206>
 800f21a:	2500      	movs	r5, #0
 800f21c:	f104 0619 	add.w	r6, r4, #25
 800f220:	e7f5      	b.n	800f20e <_printf_i+0x222>
 800f222:	bf00      	nop
 800f224:	08010c86 	.word	0x08010c86
 800f228:	08010c97 	.word	0x08010c97

0800f22c <__swbuf_r>:
 800f22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22e:	460e      	mov	r6, r1
 800f230:	4614      	mov	r4, r2
 800f232:	4605      	mov	r5, r0
 800f234:	b118      	cbz	r0, 800f23e <__swbuf_r+0x12>
 800f236:	6a03      	ldr	r3, [r0, #32]
 800f238:	b90b      	cbnz	r3, 800f23e <__swbuf_r+0x12>
 800f23a:	f7fe f9f5 	bl	800d628 <__sinit>
 800f23e:	69a3      	ldr	r3, [r4, #24]
 800f240:	60a3      	str	r3, [r4, #8]
 800f242:	89a3      	ldrh	r3, [r4, #12]
 800f244:	071a      	lsls	r2, r3, #28
 800f246:	d501      	bpl.n	800f24c <__swbuf_r+0x20>
 800f248:	6923      	ldr	r3, [r4, #16]
 800f24a:	b943      	cbnz	r3, 800f25e <__swbuf_r+0x32>
 800f24c:	4621      	mov	r1, r4
 800f24e:	4628      	mov	r0, r5
 800f250:	f000 f82a 	bl	800f2a8 <__swsetup_r>
 800f254:	b118      	cbz	r0, 800f25e <__swbuf_r+0x32>
 800f256:	f04f 37ff 	mov.w	r7, #4294967295
 800f25a:	4638      	mov	r0, r7
 800f25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f25e:	6823      	ldr	r3, [r4, #0]
 800f260:	6922      	ldr	r2, [r4, #16]
 800f262:	1a98      	subs	r0, r3, r2
 800f264:	6963      	ldr	r3, [r4, #20]
 800f266:	b2f6      	uxtb	r6, r6
 800f268:	4283      	cmp	r3, r0
 800f26a:	4637      	mov	r7, r6
 800f26c:	dc05      	bgt.n	800f27a <__swbuf_r+0x4e>
 800f26e:	4621      	mov	r1, r4
 800f270:	4628      	mov	r0, r5
 800f272:	f7ff fc81 	bl	800eb78 <_fflush_r>
 800f276:	2800      	cmp	r0, #0
 800f278:	d1ed      	bne.n	800f256 <__swbuf_r+0x2a>
 800f27a:	68a3      	ldr	r3, [r4, #8]
 800f27c:	3b01      	subs	r3, #1
 800f27e:	60a3      	str	r3, [r4, #8]
 800f280:	6823      	ldr	r3, [r4, #0]
 800f282:	1c5a      	adds	r2, r3, #1
 800f284:	6022      	str	r2, [r4, #0]
 800f286:	701e      	strb	r6, [r3, #0]
 800f288:	6962      	ldr	r2, [r4, #20]
 800f28a:	1c43      	adds	r3, r0, #1
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d004      	beq.n	800f29a <__swbuf_r+0x6e>
 800f290:	89a3      	ldrh	r3, [r4, #12]
 800f292:	07db      	lsls	r3, r3, #31
 800f294:	d5e1      	bpl.n	800f25a <__swbuf_r+0x2e>
 800f296:	2e0a      	cmp	r6, #10
 800f298:	d1df      	bne.n	800f25a <__swbuf_r+0x2e>
 800f29a:	4621      	mov	r1, r4
 800f29c:	4628      	mov	r0, r5
 800f29e:	f7ff fc6b 	bl	800eb78 <_fflush_r>
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	d0d9      	beq.n	800f25a <__swbuf_r+0x2e>
 800f2a6:	e7d6      	b.n	800f256 <__swbuf_r+0x2a>

0800f2a8 <__swsetup_r>:
 800f2a8:	b538      	push	{r3, r4, r5, lr}
 800f2aa:	4b29      	ldr	r3, [pc, #164]	@ (800f350 <__swsetup_r+0xa8>)
 800f2ac:	4605      	mov	r5, r0
 800f2ae:	6818      	ldr	r0, [r3, #0]
 800f2b0:	460c      	mov	r4, r1
 800f2b2:	b118      	cbz	r0, 800f2bc <__swsetup_r+0x14>
 800f2b4:	6a03      	ldr	r3, [r0, #32]
 800f2b6:	b90b      	cbnz	r3, 800f2bc <__swsetup_r+0x14>
 800f2b8:	f7fe f9b6 	bl	800d628 <__sinit>
 800f2bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2c0:	0719      	lsls	r1, r3, #28
 800f2c2:	d422      	bmi.n	800f30a <__swsetup_r+0x62>
 800f2c4:	06da      	lsls	r2, r3, #27
 800f2c6:	d407      	bmi.n	800f2d8 <__swsetup_r+0x30>
 800f2c8:	2209      	movs	r2, #9
 800f2ca:	602a      	str	r2, [r5, #0]
 800f2cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2d0:	81a3      	strh	r3, [r4, #12]
 800f2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d6:	e033      	b.n	800f340 <__swsetup_r+0x98>
 800f2d8:	0758      	lsls	r0, r3, #29
 800f2da:	d512      	bpl.n	800f302 <__swsetup_r+0x5a>
 800f2dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2de:	b141      	cbz	r1, 800f2f2 <__swsetup_r+0x4a>
 800f2e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f2e4:	4299      	cmp	r1, r3
 800f2e6:	d002      	beq.n	800f2ee <__swsetup_r+0x46>
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	f7fe fabd 	bl	800d868 <_free_r>
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f2f2:	89a3      	ldrh	r3, [r4, #12]
 800f2f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f2f8:	81a3      	strh	r3, [r4, #12]
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	6063      	str	r3, [r4, #4]
 800f2fe:	6923      	ldr	r3, [r4, #16]
 800f300:	6023      	str	r3, [r4, #0]
 800f302:	89a3      	ldrh	r3, [r4, #12]
 800f304:	f043 0308 	orr.w	r3, r3, #8
 800f308:	81a3      	strh	r3, [r4, #12]
 800f30a:	6923      	ldr	r3, [r4, #16]
 800f30c:	b94b      	cbnz	r3, 800f322 <__swsetup_r+0x7a>
 800f30e:	89a3      	ldrh	r3, [r4, #12]
 800f310:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f318:	d003      	beq.n	800f322 <__swsetup_r+0x7a>
 800f31a:	4621      	mov	r1, r4
 800f31c:	4628      	mov	r0, r5
 800f31e:	f000 f883 	bl	800f428 <__smakebuf_r>
 800f322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f326:	f013 0201 	ands.w	r2, r3, #1
 800f32a:	d00a      	beq.n	800f342 <__swsetup_r+0x9a>
 800f32c:	2200      	movs	r2, #0
 800f32e:	60a2      	str	r2, [r4, #8]
 800f330:	6962      	ldr	r2, [r4, #20]
 800f332:	4252      	negs	r2, r2
 800f334:	61a2      	str	r2, [r4, #24]
 800f336:	6922      	ldr	r2, [r4, #16]
 800f338:	b942      	cbnz	r2, 800f34c <__swsetup_r+0xa4>
 800f33a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f33e:	d1c5      	bne.n	800f2cc <__swsetup_r+0x24>
 800f340:	bd38      	pop	{r3, r4, r5, pc}
 800f342:	0799      	lsls	r1, r3, #30
 800f344:	bf58      	it	pl
 800f346:	6962      	ldrpl	r2, [r4, #20]
 800f348:	60a2      	str	r2, [r4, #8]
 800f34a:	e7f4      	b.n	800f336 <__swsetup_r+0x8e>
 800f34c:	2000      	movs	r0, #0
 800f34e:	e7f7      	b.n	800f340 <__swsetup_r+0x98>
 800f350:	200001c0 	.word	0x200001c0

0800f354 <_raise_r>:
 800f354:	291f      	cmp	r1, #31
 800f356:	b538      	push	{r3, r4, r5, lr}
 800f358:	4605      	mov	r5, r0
 800f35a:	460c      	mov	r4, r1
 800f35c:	d904      	bls.n	800f368 <_raise_r+0x14>
 800f35e:	2316      	movs	r3, #22
 800f360:	6003      	str	r3, [r0, #0]
 800f362:	f04f 30ff 	mov.w	r0, #4294967295
 800f366:	bd38      	pop	{r3, r4, r5, pc}
 800f368:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f36a:	b112      	cbz	r2, 800f372 <_raise_r+0x1e>
 800f36c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f370:	b94b      	cbnz	r3, 800f386 <_raise_r+0x32>
 800f372:	4628      	mov	r0, r5
 800f374:	f000 f830 	bl	800f3d8 <_getpid_r>
 800f378:	4622      	mov	r2, r4
 800f37a:	4601      	mov	r1, r0
 800f37c:	4628      	mov	r0, r5
 800f37e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f382:	f000 b817 	b.w	800f3b4 <_kill_r>
 800f386:	2b01      	cmp	r3, #1
 800f388:	d00a      	beq.n	800f3a0 <_raise_r+0x4c>
 800f38a:	1c59      	adds	r1, r3, #1
 800f38c:	d103      	bne.n	800f396 <_raise_r+0x42>
 800f38e:	2316      	movs	r3, #22
 800f390:	6003      	str	r3, [r0, #0]
 800f392:	2001      	movs	r0, #1
 800f394:	e7e7      	b.n	800f366 <_raise_r+0x12>
 800f396:	2100      	movs	r1, #0
 800f398:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f39c:	4620      	mov	r0, r4
 800f39e:	4798      	blx	r3
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	e7e0      	b.n	800f366 <_raise_r+0x12>

0800f3a4 <raise>:
 800f3a4:	4b02      	ldr	r3, [pc, #8]	@ (800f3b0 <raise+0xc>)
 800f3a6:	4601      	mov	r1, r0
 800f3a8:	6818      	ldr	r0, [r3, #0]
 800f3aa:	f7ff bfd3 	b.w	800f354 <_raise_r>
 800f3ae:	bf00      	nop
 800f3b0:	200001c0 	.word	0x200001c0

0800f3b4 <_kill_r>:
 800f3b4:	b538      	push	{r3, r4, r5, lr}
 800f3b6:	4d07      	ldr	r5, [pc, #28]	@ (800f3d4 <_kill_r+0x20>)
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	4604      	mov	r4, r0
 800f3bc:	4608      	mov	r0, r1
 800f3be:	4611      	mov	r1, r2
 800f3c0:	602b      	str	r3, [r5, #0]
 800f3c2:	f7f4 fb15 	bl	80039f0 <_kill>
 800f3c6:	1c43      	adds	r3, r0, #1
 800f3c8:	d102      	bne.n	800f3d0 <_kill_r+0x1c>
 800f3ca:	682b      	ldr	r3, [r5, #0]
 800f3cc:	b103      	cbz	r3, 800f3d0 <_kill_r+0x1c>
 800f3ce:	6023      	str	r3, [r4, #0]
 800f3d0:	bd38      	pop	{r3, r4, r5, pc}
 800f3d2:	bf00      	nop
 800f3d4:	2000116c 	.word	0x2000116c

0800f3d8 <_getpid_r>:
 800f3d8:	f7f4 bb02 	b.w	80039e0 <_getpid>

0800f3dc <__swhatbuf_r>:
 800f3dc:	b570      	push	{r4, r5, r6, lr}
 800f3de:	460c      	mov	r4, r1
 800f3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3e4:	2900      	cmp	r1, #0
 800f3e6:	b096      	sub	sp, #88	@ 0x58
 800f3e8:	4615      	mov	r5, r2
 800f3ea:	461e      	mov	r6, r3
 800f3ec:	da0d      	bge.n	800f40a <__swhatbuf_r+0x2e>
 800f3ee:	89a3      	ldrh	r3, [r4, #12]
 800f3f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f3f4:	f04f 0100 	mov.w	r1, #0
 800f3f8:	bf14      	ite	ne
 800f3fa:	2340      	movne	r3, #64	@ 0x40
 800f3fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f400:	2000      	movs	r0, #0
 800f402:	6031      	str	r1, [r6, #0]
 800f404:	602b      	str	r3, [r5, #0]
 800f406:	b016      	add	sp, #88	@ 0x58
 800f408:	bd70      	pop	{r4, r5, r6, pc}
 800f40a:	466a      	mov	r2, sp
 800f40c:	f000 f848 	bl	800f4a0 <_fstat_r>
 800f410:	2800      	cmp	r0, #0
 800f412:	dbec      	blt.n	800f3ee <__swhatbuf_r+0x12>
 800f414:	9901      	ldr	r1, [sp, #4]
 800f416:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f41a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f41e:	4259      	negs	r1, r3
 800f420:	4159      	adcs	r1, r3
 800f422:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f426:	e7eb      	b.n	800f400 <__swhatbuf_r+0x24>

0800f428 <__smakebuf_r>:
 800f428:	898b      	ldrh	r3, [r1, #12]
 800f42a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f42c:	079d      	lsls	r5, r3, #30
 800f42e:	4606      	mov	r6, r0
 800f430:	460c      	mov	r4, r1
 800f432:	d507      	bpl.n	800f444 <__smakebuf_r+0x1c>
 800f434:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f438:	6023      	str	r3, [r4, #0]
 800f43a:	6123      	str	r3, [r4, #16]
 800f43c:	2301      	movs	r3, #1
 800f43e:	6163      	str	r3, [r4, #20]
 800f440:	b003      	add	sp, #12
 800f442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f444:	ab01      	add	r3, sp, #4
 800f446:	466a      	mov	r2, sp
 800f448:	f7ff ffc8 	bl	800f3dc <__swhatbuf_r>
 800f44c:	9f00      	ldr	r7, [sp, #0]
 800f44e:	4605      	mov	r5, r0
 800f450:	4639      	mov	r1, r7
 800f452:	4630      	mov	r0, r6
 800f454:	f7fe fdae 	bl	800dfb4 <_malloc_r>
 800f458:	b948      	cbnz	r0, 800f46e <__smakebuf_r+0x46>
 800f45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f45e:	059a      	lsls	r2, r3, #22
 800f460:	d4ee      	bmi.n	800f440 <__smakebuf_r+0x18>
 800f462:	f023 0303 	bic.w	r3, r3, #3
 800f466:	f043 0302 	orr.w	r3, r3, #2
 800f46a:	81a3      	strh	r3, [r4, #12]
 800f46c:	e7e2      	b.n	800f434 <__smakebuf_r+0xc>
 800f46e:	89a3      	ldrh	r3, [r4, #12]
 800f470:	6020      	str	r0, [r4, #0]
 800f472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f476:	81a3      	strh	r3, [r4, #12]
 800f478:	9b01      	ldr	r3, [sp, #4]
 800f47a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f47e:	b15b      	cbz	r3, 800f498 <__smakebuf_r+0x70>
 800f480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f484:	4630      	mov	r0, r6
 800f486:	f000 f81d 	bl	800f4c4 <_isatty_r>
 800f48a:	b128      	cbz	r0, 800f498 <__smakebuf_r+0x70>
 800f48c:	89a3      	ldrh	r3, [r4, #12]
 800f48e:	f023 0303 	bic.w	r3, r3, #3
 800f492:	f043 0301 	orr.w	r3, r3, #1
 800f496:	81a3      	strh	r3, [r4, #12]
 800f498:	89a3      	ldrh	r3, [r4, #12]
 800f49a:	431d      	orrs	r5, r3
 800f49c:	81a5      	strh	r5, [r4, #12]
 800f49e:	e7cf      	b.n	800f440 <__smakebuf_r+0x18>

0800f4a0 <_fstat_r>:
 800f4a0:	b538      	push	{r3, r4, r5, lr}
 800f4a2:	4d07      	ldr	r5, [pc, #28]	@ (800f4c0 <_fstat_r+0x20>)
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	4604      	mov	r4, r0
 800f4a8:	4608      	mov	r0, r1
 800f4aa:	4611      	mov	r1, r2
 800f4ac:	602b      	str	r3, [r5, #0]
 800f4ae:	f7f4 faff 	bl	8003ab0 <_fstat>
 800f4b2:	1c43      	adds	r3, r0, #1
 800f4b4:	d102      	bne.n	800f4bc <_fstat_r+0x1c>
 800f4b6:	682b      	ldr	r3, [r5, #0]
 800f4b8:	b103      	cbz	r3, 800f4bc <_fstat_r+0x1c>
 800f4ba:	6023      	str	r3, [r4, #0]
 800f4bc:	bd38      	pop	{r3, r4, r5, pc}
 800f4be:	bf00      	nop
 800f4c0:	2000116c 	.word	0x2000116c

0800f4c4 <_isatty_r>:
 800f4c4:	b538      	push	{r3, r4, r5, lr}
 800f4c6:	4d06      	ldr	r5, [pc, #24]	@ (800f4e0 <_isatty_r+0x1c>)
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	4608      	mov	r0, r1
 800f4ce:	602b      	str	r3, [r5, #0]
 800f4d0:	f7f4 fafe 	bl	8003ad0 <_isatty>
 800f4d4:	1c43      	adds	r3, r0, #1
 800f4d6:	d102      	bne.n	800f4de <_isatty_r+0x1a>
 800f4d8:	682b      	ldr	r3, [r5, #0]
 800f4da:	b103      	cbz	r3, 800f4de <_isatty_r+0x1a>
 800f4dc:	6023      	str	r3, [r4, #0]
 800f4de:	bd38      	pop	{r3, r4, r5, pc}
 800f4e0:	2000116c 	.word	0x2000116c

0800f4e4 <fmod>:
 800f4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4e6:	ed2d 8b02 	vpush	{d8}
 800f4ea:	ec57 6b10 	vmov	r6, r7, d0
 800f4ee:	ec55 4b11 	vmov	r4, r5, d1
 800f4f2:	f000 facb 	bl	800fa8c <__ieee754_fmod>
 800f4f6:	4622      	mov	r2, r4
 800f4f8:	462b      	mov	r3, r5
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	4639      	mov	r1, r7
 800f4fe:	eeb0 8a40 	vmov.f32	s16, s0
 800f502:	eef0 8a60 	vmov.f32	s17, s1
 800f506:	f7f1 fb39 	bl	8000b7c <__aeabi_dcmpun>
 800f50a:	b990      	cbnz	r0, 800f532 <fmod+0x4e>
 800f50c:	2200      	movs	r2, #0
 800f50e:	2300      	movs	r3, #0
 800f510:	4620      	mov	r0, r4
 800f512:	4629      	mov	r1, r5
 800f514:	f7f1 fb00 	bl	8000b18 <__aeabi_dcmpeq>
 800f518:	b158      	cbz	r0, 800f532 <fmod+0x4e>
 800f51a:	f7fe f95f 	bl	800d7dc <__errno>
 800f51e:	2321      	movs	r3, #33	@ 0x21
 800f520:	6003      	str	r3, [r0, #0]
 800f522:	2200      	movs	r2, #0
 800f524:	2300      	movs	r3, #0
 800f526:	4610      	mov	r0, r2
 800f528:	4619      	mov	r1, r3
 800f52a:	f7f1 f9b7 	bl	800089c <__aeabi_ddiv>
 800f52e:	ec41 0b18 	vmov	d8, r0, r1
 800f532:	eeb0 0a48 	vmov.f32	s0, s16
 800f536:	eef0 0a68 	vmov.f32	s1, s17
 800f53a:	ecbd 8b02 	vpop	{d8}
 800f53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f540 <cos>:
 800f540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f542:	ec53 2b10 	vmov	r2, r3, d0
 800f546:	4826      	ldr	r0, [pc, #152]	@ (800f5e0 <cos+0xa0>)
 800f548:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f54c:	4281      	cmp	r1, r0
 800f54e:	d806      	bhi.n	800f55e <cos+0x1e>
 800f550:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f5d8 <cos+0x98>
 800f554:	b005      	add	sp, #20
 800f556:	f85d eb04 	ldr.w	lr, [sp], #4
 800f55a:	f000 b915 	b.w	800f788 <__kernel_cos>
 800f55e:	4821      	ldr	r0, [pc, #132]	@ (800f5e4 <cos+0xa4>)
 800f560:	4281      	cmp	r1, r0
 800f562:	d908      	bls.n	800f576 <cos+0x36>
 800f564:	4610      	mov	r0, r2
 800f566:	4619      	mov	r1, r3
 800f568:	f7f0 feb6 	bl	80002d8 <__aeabi_dsub>
 800f56c:	ec41 0b10 	vmov	d0, r0, r1
 800f570:	b005      	add	sp, #20
 800f572:	f85d fb04 	ldr.w	pc, [sp], #4
 800f576:	4668      	mov	r0, sp
 800f578:	f000 fb92 	bl	800fca0 <__ieee754_rem_pio2>
 800f57c:	f000 0003 	and.w	r0, r0, #3
 800f580:	2801      	cmp	r0, #1
 800f582:	d00b      	beq.n	800f59c <cos+0x5c>
 800f584:	2802      	cmp	r0, #2
 800f586:	d015      	beq.n	800f5b4 <cos+0x74>
 800f588:	b9d8      	cbnz	r0, 800f5c2 <cos+0x82>
 800f58a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f58e:	ed9d 0b00 	vldr	d0, [sp]
 800f592:	f000 f8f9 	bl	800f788 <__kernel_cos>
 800f596:	ec51 0b10 	vmov	r0, r1, d0
 800f59a:	e7e7      	b.n	800f56c <cos+0x2c>
 800f59c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5a0:	ed9d 0b00 	vldr	d0, [sp]
 800f5a4:	f000 f9b8 	bl	800f918 <__kernel_sin>
 800f5a8:	ec53 2b10 	vmov	r2, r3, d0
 800f5ac:	4610      	mov	r0, r2
 800f5ae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f5b2:	e7db      	b.n	800f56c <cos+0x2c>
 800f5b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5b8:	ed9d 0b00 	vldr	d0, [sp]
 800f5bc:	f000 f8e4 	bl	800f788 <__kernel_cos>
 800f5c0:	e7f2      	b.n	800f5a8 <cos+0x68>
 800f5c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5c6:	ed9d 0b00 	vldr	d0, [sp]
 800f5ca:	2001      	movs	r0, #1
 800f5cc:	f000 f9a4 	bl	800f918 <__kernel_sin>
 800f5d0:	e7e1      	b.n	800f596 <cos+0x56>
 800f5d2:	bf00      	nop
 800f5d4:	f3af 8000 	nop.w
	...
 800f5e0:	3fe921fb 	.word	0x3fe921fb
 800f5e4:	7fefffff 	.word	0x7fefffff

0800f5e8 <sin>:
 800f5e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5ea:	ec53 2b10 	vmov	r2, r3, d0
 800f5ee:	4826      	ldr	r0, [pc, #152]	@ (800f688 <sin+0xa0>)
 800f5f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f5f4:	4281      	cmp	r1, r0
 800f5f6:	d807      	bhi.n	800f608 <sin+0x20>
 800f5f8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f680 <sin+0x98>
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	b005      	add	sp, #20
 800f600:	f85d eb04 	ldr.w	lr, [sp], #4
 800f604:	f000 b988 	b.w	800f918 <__kernel_sin>
 800f608:	4820      	ldr	r0, [pc, #128]	@ (800f68c <sin+0xa4>)
 800f60a:	4281      	cmp	r1, r0
 800f60c:	d908      	bls.n	800f620 <sin+0x38>
 800f60e:	4610      	mov	r0, r2
 800f610:	4619      	mov	r1, r3
 800f612:	f7f0 fe61 	bl	80002d8 <__aeabi_dsub>
 800f616:	ec41 0b10 	vmov	d0, r0, r1
 800f61a:	b005      	add	sp, #20
 800f61c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f620:	4668      	mov	r0, sp
 800f622:	f000 fb3d 	bl	800fca0 <__ieee754_rem_pio2>
 800f626:	f000 0003 	and.w	r0, r0, #3
 800f62a:	2801      	cmp	r0, #1
 800f62c:	d00c      	beq.n	800f648 <sin+0x60>
 800f62e:	2802      	cmp	r0, #2
 800f630:	d011      	beq.n	800f656 <sin+0x6e>
 800f632:	b9e8      	cbnz	r0, 800f670 <sin+0x88>
 800f634:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f638:	ed9d 0b00 	vldr	d0, [sp]
 800f63c:	2001      	movs	r0, #1
 800f63e:	f000 f96b 	bl	800f918 <__kernel_sin>
 800f642:	ec51 0b10 	vmov	r0, r1, d0
 800f646:	e7e6      	b.n	800f616 <sin+0x2e>
 800f648:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f64c:	ed9d 0b00 	vldr	d0, [sp]
 800f650:	f000 f89a 	bl	800f788 <__kernel_cos>
 800f654:	e7f5      	b.n	800f642 <sin+0x5a>
 800f656:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f65a:	ed9d 0b00 	vldr	d0, [sp]
 800f65e:	2001      	movs	r0, #1
 800f660:	f000 f95a 	bl	800f918 <__kernel_sin>
 800f664:	ec53 2b10 	vmov	r2, r3, d0
 800f668:	4610      	mov	r0, r2
 800f66a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f66e:	e7d2      	b.n	800f616 <sin+0x2e>
 800f670:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f674:	ed9d 0b00 	vldr	d0, [sp]
 800f678:	f000 f886 	bl	800f788 <__kernel_cos>
 800f67c:	e7f2      	b.n	800f664 <sin+0x7c>
 800f67e:	bf00      	nop
	...
 800f688:	3fe921fb 	.word	0x3fe921fb
 800f68c:	7fefffff 	.word	0x7fefffff

0800f690 <floor>:
 800f690:	ec51 0b10 	vmov	r0, r1, d0
 800f694:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f69c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f6a0:	2e13      	cmp	r6, #19
 800f6a2:	460c      	mov	r4, r1
 800f6a4:	4605      	mov	r5, r0
 800f6a6:	4680      	mov	r8, r0
 800f6a8:	dc34      	bgt.n	800f714 <floor+0x84>
 800f6aa:	2e00      	cmp	r6, #0
 800f6ac:	da17      	bge.n	800f6de <floor+0x4e>
 800f6ae:	a332      	add	r3, pc, #200	@ (adr r3, 800f778 <floor+0xe8>)
 800f6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b4:	f7f0 fe12 	bl	80002dc <__adddf3>
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	f7f1 fa54 	bl	8000b68 <__aeabi_dcmpgt>
 800f6c0:	b150      	cbz	r0, 800f6d8 <floor+0x48>
 800f6c2:	2c00      	cmp	r4, #0
 800f6c4:	da55      	bge.n	800f772 <floor+0xe2>
 800f6c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f6ca:	432c      	orrs	r4, r5
 800f6cc:	2500      	movs	r5, #0
 800f6ce:	42ac      	cmp	r4, r5
 800f6d0:	4c2b      	ldr	r4, [pc, #172]	@ (800f780 <floor+0xf0>)
 800f6d2:	bf08      	it	eq
 800f6d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f6d8:	4621      	mov	r1, r4
 800f6da:	4628      	mov	r0, r5
 800f6dc:	e023      	b.n	800f726 <floor+0x96>
 800f6de:	4f29      	ldr	r7, [pc, #164]	@ (800f784 <floor+0xf4>)
 800f6e0:	4137      	asrs	r7, r6
 800f6e2:	ea01 0307 	and.w	r3, r1, r7
 800f6e6:	4303      	orrs	r3, r0
 800f6e8:	d01d      	beq.n	800f726 <floor+0x96>
 800f6ea:	a323      	add	r3, pc, #140	@ (adr r3, 800f778 <floor+0xe8>)
 800f6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f0:	f7f0 fdf4 	bl	80002dc <__adddf3>
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	f7f1 fa36 	bl	8000b68 <__aeabi_dcmpgt>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	d0eb      	beq.n	800f6d8 <floor+0x48>
 800f700:	2c00      	cmp	r4, #0
 800f702:	bfbe      	ittt	lt
 800f704:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f708:	4133      	asrlt	r3, r6
 800f70a:	18e4      	addlt	r4, r4, r3
 800f70c:	ea24 0407 	bic.w	r4, r4, r7
 800f710:	2500      	movs	r5, #0
 800f712:	e7e1      	b.n	800f6d8 <floor+0x48>
 800f714:	2e33      	cmp	r6, #51	@ 0x33
 800f716:	dd0a      	ble.n	800f72e <floor+0x9e>
 800f718:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f71c:	d103      	bne.n	800f726 <floor+0x96>
 800f71e:	4602      	mov	r2, r0
 800f720:	460b      	mov	r3, r1
 800f722:	f7f0 fddb 	bl	80002dc <__adddf3>
 800f726:	ec41 0b10 	vmov	d0, r0, r1
 800f72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f72e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f732:	f04f 37ff 	mov.w	r7, #4294967295
 800f736:	40df      	lsrs	r7, r3
 800f738:	4207      	tst	r7, r0
 800f73a:	d0f4      	beq.n	800f726 <floor+0x96>
 800f73c:	a30e      	add	r3, pc, #56	@ (adr r3, 800f778 <floor+0xe8>)
 800f73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f742:	f7f0 fdcb 	bl	80002dc <__adddf3>
 800f746:	2200      	movs	r2, #0
 800f748:	2300      	movs	r3, #0
 800f74a:	f7f1 fa0d 	bl	8000b68 <__aeabi_dcmpgt>
 800f74e:	2800      	cmp	r0, #0
 800f750:	d0c2      	beq.n	800f6d8 <floor+0x48>
 800f752:	2c00      	cmp	r4, #0
 800f754:	da0a      	bge.n	800f76c <floor+0xdc>
 800f756:	2e14      	cmp	r6, #20
 800f758:	d101      	bne.n	800f75e <floor+0xce>
 800f75a:	3401      	adds	r4, #1
 800f75c:	e006      	b.n	800f76c <floor+0xdc>
 800f75e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f762:	2301      	movs	r3, #1
 800f764:	40b3      	lsls	r3, r6
 800f766:	441d      	add	r5, r3
 800f768:	4545      	cmp	r5, r8
 800f76a:	d3f6      	bcc.n	800f75a <floor+0xca>
 800f76c:	ea25 0507 	bic.w	r5, r5, r7
 800f770:	e7b2      	b.n	800f6d8 <floor+0x48>
 800f772:	2500      	movs	r5, #0
 800f774:	462c      	mov	r4, r5
 800f776:	e7af      	b.n	800f6d8 <floor+0x48>
 800f778:	8800759c 	.word	0x8800759c
 800f77c:	7e37e43c 	.word	0x7e37e43c
 800f780:	bff00000 	.word	0xbff00000
 800f784:	000fffff 	.word	0x000fffff

0800f788 <__kernel_cos>:
 800f788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78c:	ec57 6b10 	vmov	r6, r7, d0
 800f790:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f794:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f798:	ed8d 1b00 	vstr	d1, [sp]
 800f79c:	d206      	bcs.n	800f7ac <__kernel_cos+0x24>
 800f79e:	4630      	mov	r0, r6
 800f7a0:	4639      	mov	r1, r7
 800f7a2:	f7f1 fa01 	bl	8000ba8 <__aeabi_d2iz>
 800f7a6:	2800      	cmp	r0, #0
 800f7a8:	f000 8088 	beq.w	800f8bc <__kernel_cos+0x134>
 800f7ac:	4632      	mov	r2, r6
 800f7ae:	463b      	mov	r3, r7
 800f7b0:	4630      	mov	r0, r6
 800f7b2:	4639      	mov	r1, r7
 800f7b4:	f7f0 ff48 	bl	8000648 <__aeabi_dmul>
 800f7b8:	4b51      	ldr	r3, [pc, #324]	@ (800f900 <__kernel_cos+0x178>)
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	4604      	mov	r4, r0
 800f7be:	460d      	mov	r5, r1
 800f7c0:	f7f0 ff42 	bl	8000648 <__aeabi_dmul>
 800f7c4:	a340      	add	r3, pc, #256	@ (adr r3, 800f8c8 <__kernel_cos+0x140>)
 800f7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ca:	4682      	mov	sl, r0
 800f7cc:	468b      	mov	fp, r1
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	4629      	mov	r1, r5
 800f7d2:	f7f0 ff39 	bl	8000648 <__aeabi_dmul>
 800f7d6:	a33e      	add	r3, pc, #248	@ (adr r3, 800f8d0 <__kernel_cos+0x148>)
 800f7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7dc:	f7f0 fd7e 	bl	80002dc <__adddf3>
 800f7e0:	4622      	mov	r2, r4
 800f7e2:	462b      	mov	r3, r5
 800f7e4:	f7f0 ff30 	bl	8000648 <__aeabi_dmul>
 800f7e8:	a33b      	add	r3, pc, #236	@ (adr r3, 800f8d8 <__kernel_cos+0x150>)
 800f7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ee:	f7f0 fd73 	bl	80002d8 <__aeabi_dsub>
 800f7f2:	4622      	mov	r2, r4
 800f7f4:	462b      	mov	r3, r5
 800f7f6:	f7f0 ff27 	bl	8000648 <__aeabi_dmul>
 800f7fa:	a339      	add	r3, pc, #228	@ (adr r3, 800f8e0 <__kernel_cos+0x158>)
 800f7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f800:	f7f0 fd6c 	bl	80002dc <__adddf3>
 800f804:	4622      	mov	r2, r4
 800f806:	462b      	mov	r3, r5
 800f808:	f7f0 ff1e 	bl	8000648 <__aeabi_dmul>
 800f80c:	a336      	add	r3, pc, #216	@ (adr r3, 800f8e8 <__kernel_cos+0x160>)
 800f80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f812:	f7f0 fd61 	bl	80002d8 <__aeabi_dsub>
 800f816:	4622      	mov	r2, r4
 800f818:	462b      	mov	r3, r5
 800f81a:	f7f0 ff15 	bl	8000648 <__aeabi_dmul>
 800f81e:	a334      	add	r3, pc, #208	@ (adr r3, 800f8f0 <__kernel_cos+0x168>)
 800f820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f824:	f7f0 fd5a 	bl	80002dc <__adddf3>
 800f828:	4622      	mov	r2, r4
 800f82a:	462b      	mov	r3, r5
 800f82c:	f7f0 ff0c 	bl	8000648 <__aeabi_dmul>
 800f830:	4622      	mov	r2, r4
 800f832:	462b      	mov	r3, r5
 800f834:	f7f0 ff08 	bl	8000648 <__aeabi_dmul>
 800f838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f83c:	4604      	mov	r4, r0
 800f83e:	460d      	mov	r5, r1
 800f840:	4630      	mov	r0, r6
 800f842:	4639      	mov	r1, r7
 800f844:	f7f0 ff00 	bl	8000648 <__aeabi_dmul>
 800f848:	460b      	mov	r3, r1
 800f84a:	4602      	mov	r2, r0
 800f84c:	4629      	mov	r1, r5
 800f84e:	4620      	mov	r0, r4
 800f850:	f7f0 fd42 	bl	80002d8 <__aeabi_dsub>
 800f854:	4b2b      	ldr	r3, [pc, #172]	@ (800f904 <__kernel_cos+0x17c>)
 800f856:	4598      	cmp	r8, r3
 800f858:	4606      	mov	r6, r0
 800f85a:	460f      	mov	r7, r1
 800f85c:	d810      	bhi.n	800f880 <__kernel_cos+0xf8>
 800f85e:	4602      	mov	r2, r0
 800f860:	460b      	mov	r3, r1
 800f862:	4650      	mov	r0, sl
 800f864:	4659      	mov	r1, fp
 800f866:	f7f0 fd37 	bl	80002d8 <__aeabi_dsub>
 800f86a:	460b      	mov	r3, r1
 800f86c:	4926      	ldr	r1, [pc, #152]	@ (800f908 <__kernel_cos+0x180>)
 800f86e:	4602      	mov	r2, r0
 800f870:	2000      	movs	r0, #0
 800f872:	f7f0 fd31 	bl	80002d8 <__aeabi_dsub>
 800f876:	ec41 0b10 	vmov	d0, r0, r1
 800f87a:	b003      	add	sp, #12
 800f87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f880:	4b22      	ldr	r3, [pc, #136]	@ (800f90c <__kernel_cos+0x184>)
 800f882:	4921      	ldr	r1, [pc, #132]	@ (800f908 <__kernel_cos+0x180>)
 800f884:	4598      	cmp	r8, r3
 800f886:	bf8c      	ite	hi
 800f888:	4d21      	ldrhi	r5, [pc, #132]	@ (800f910 <__kernel_cos+0x188>)
 800f88a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f88e:	2400      	movs	r4, #0
 800f890:	4622      	mov	r2, r4
 800f892:	462b      	mov	r3, r5
 800f894:	2000      	movs	r0, #0
 800f896:	f7f0 fd1f 	bl	80002d8 <__aeabi_dsub>
 800f89a:	4622      	mov	r2, r4
 800f89c:	4680      	mov	r8, r0
 800f89e:	4689      	mov	r9, r1
 800f8a0:	462b      	mov	r3, r5
 800f8a2:	4650      	mov	r0, sl
 800f8a4:	4659      	mov	r1, fp
 800f8a6:	f7f0 fd17 	bl	80002d8 <__aeabi_dsub>
 800f8aa:	4632      	mov	r2, r6
 800f8ac:	463b      	mov	r3, r7
 800f8ae:	f7f0 fd13 	bl	80002d8 <__aeabi_dsub>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	4640      	mov	r0, r8
 800f8b8:	4649      	mov	r1, r9
 800f8ba:	e7da      	b.n	800f872 <__kernel_cos+0xea>
 800f8bc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f8f8 <__kernel_cos+0x170>
 800f8c0:	e7db      	b.n	800f87a <__kernel_cos+0xf2>
 800f8c2:	bf00      	nop
 800f8c4:	f3af 8000 	nop.w
 800f8c8:	be8838d4 	.word	0xbe8838d4
 800f8cc:	bda8fae9 	.word	0xbda8fae9
 800f8d0:	bdb4b1c4 	.word	0xbdb4b1c4
 800f8d4:	3e21ee9e 	.word	0x3e21ee9e
 800f8d8:	809c52ad 	.word	0x809c52ad
 800f8dc:	3e927e4f 	.word	0x3e927e4f
 800f8e0:	19cb1590 	.word	0x19cb1590
 800f8e4:	3efa01a0 	.word	0x3efa01a0
 800f8e8:	16c15177 	.word	0x16c15177
 800f8ec:	3f56c16c 	.word	0x3f56c16c
 800f8f0:	5555554c 	.word	0x5555554c
 800f8f4:	3fa55555 	.word	0x3fa55555
 800f8f8:	00000000 	.word	0x00000000
 800f8fc:	3ff00000 	.word	0x3ff00000
 800f900:	3fe00000 	.word	0x3fe00000
 800f904:	3fd33332 	.word	0x3fd33332
 800f908:	3ff00000 	.word	0x3ff00000
 800f90c:	3fe90000 	.word	0x3fe90000
 800f910:	3fd20000 	.word	0x3fd20000
 800f914:	00000000 	.word	0x00000000

0800f918 <__kernel_sin>:
 800f918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f91c:	ec55 4b10 	vmov	r4, r5, d0
 800f920:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f924:	b085      	sub	sp, #20
 800f926:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f92a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f92e:	4680      	mov	r8, r0
 800f930:	d205      	bcs.n	800f93e <__kernel_sin+0x26>
 800f932:	4620      	mov	r0, r4
 800f934:	4629      	mov	r1, r5
 800f936:	f7f1 f937 	bl	8000ba8 <__aeabi_d2iz>
 800f93a:	2800      	cmp	r0, #0
 800f93c:	d052      	beq.n	800f9e4 <__kernel_sin+0xcc>
 800f93e:	4622      	mov	r2, r4
 800f940:	462b      	mov	r3, r5
 800f942:	4620      	mov	r0, r4
 800f944:	4629      	mov	r1, r5
 800f946:	f7f0 fe7f 	bl	8000648 <__aeabi_dmul>
 800f94a:	4682      	mov	sl, r0
 800f94c:	468b      	mov	fp, r1
 800f94e:	4602      	mov	r2, r0
 800f950:	460b      	mov	r3, r1
 800f952:	4620      	mov	r0, r4
 800f954:	4629      	mov	r1, r5
 800f956:	f7f0 fe77 	bl	8000648 <__aeabi_dmul>
 800f95a:	a342      	add	r3, pc, #264	@ (adr r3, 800fa64 <__kernel_sin+0x14c>)
 800f95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f960:	e9cd 0100 	strd	r0, r1, [sp]
 800f964:	4650      	mov	r0, sl
 800f966:	4659      	mov	r1, fp
 800f968:	f7f0 fe6e 	bl	8000648 <__aeabi_dmul>
 800f96c:	a33f      	add	r3, pc, #252	@ (adr r3, 800fa6c <__kernel_sin+0x154>)
 800f96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f972:	f7f0 fcb1 	bl	80002d8 <__aeabi_dsub>
 800f976:	4652      	mov	r2, sl
 800f978:	465b      	mov	r3, fp
 800f97a:	f7f0 fe65 	bl	8000648 <__aeabi_dmul>
 800f97e:	a33d      	add	r3, pc, #244	@ (adr r3, 800fa74 <__kernel_sin+0x15c>)
 800f980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f984:	f7f0 fcaa 	bl	80002dc <__adddf3>
 800f988:	4652      	mov	r2, sl
 800f98a:	465b      	mov	r3, fp
 800f98c:	f7f0 fe5c 	bl	8000648 <__aeabi_dmul>
 800f990:	a33a      	add	r3, pc, #232	@ (adr r3, 800fa7c <__kernel_sin+0x164>)
 800f992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f996:	f7f0 fc9f 	bl	80002d8 <__aeabi_dsub>
 800f99a:	4652      	mov	r2, sl
 800f99c:	465b      	mov	r3, fp
 800f99e:	f7f0 fe53 	bl	8000648 <__aeabi_dmul>
 800f9a2:	a338      	add	r3, pc, #224	@ (adr r3, 800fa84 <__kernel_sin+0x16c>)
 800f9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a8:	f7f0 fc98 	bl	80002dc <__adddf3>
 800f9ac:	4606      	mov	r6, r0
 800f9ae:	460f      	mov	r7, r1
 800f9b0:	f1b8 0f00 	cmp.w	r8, #0
 800f9b4:	d11b      	bne.n	800f9ee <__kernel_sin+0xd6>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	4650      	mov	r0, sl
 800f9bc:	4659      	mov	r1, fp
 800f9be:	f7f0 fe43 	bl	8000648 <__aeabi_dmul>
 800f9c2:	a325      	add	r3, pc, #148	@ (adr r3, 800fa58 <__kernel_sin+0x140>)
 800f9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c8:	f7f0 fc86 	bl	80002d8 <__aeabi_dsub>
 800f9cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9d0:	f7f0 fe3a 	bl	8000648 <__aeabi_dmul>
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	460b      	mov	r3, r1
 800f9d8:	4620      	mov	r0, r4
 800f9da:	4629      	mov	r1, r5
 800f9dc:	f7f0 fc7e 	bl	80002dc <__adddf3>
 800f9e0:	4604      	mov	r4, r0
 800f9e2:	460d      	mov	r5, r1
 800f9e4:	ec45 4b10 	vmov	d0, r4, r5
 800f9e8:	b005      	add	sp, #20
 800f9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9f2:	4b1b      	ldr	r3, [pc, #108]	@ (800fa60 <__kernel_sin+0x148>)
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	f7f0 fe27 	bl	8000648 <__aeabi_dmul>
 800f9fa:	4632      	mov	r2, r6
 800f9fc:	4680      	mov	r8, r0
 800f9fe:	4689      	mov	r9, r1
 800fa00:	463b      	mov	r3, r7
 800fa02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa06:	f7f0 fe1f 	bl	8000648 <__aeabi_dmul>
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	4640      	mov	r0, r8
 800fa10:	4649      	mov	r1, r9
 800fa12:	f7f0 fc61 	bl	80002d8 <__aeabi_dsub>
 800fa16:	4652      	mov	r2, sl
 800fa18:	465b      	mov	r3, fp
 800fa1a:	f7f0 fe15 	bl	8000648 <__aeabi_dmul>
 800fa1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa22:	f7f0 fc59 	bl	80002d8 <__aeabi_dsub>
 800fa26:	a30c      	add	r3, pc, #48	@ (adr r3, 800fa58 <__kernel_sin+0x140>)
 800fa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2c:	4606      	mov	r6, r0
 800fa2e:	460f      	mov	r7, r1
 800fa30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa34:	f7f0 fe08 	bl	8000648 <__aeabi_dmul>
 800fa38:	4602      	mov	r2, r0
 800fa3a:	460b      	mov	r3, r1
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	4639      	mov	r1, r7
 800fa40:	f7f0 fc4c 	bl	80002dc <__adddf3>
 800fa44:	4602      	mov	r2, r0
 800fa46:	460b      	mov	r3, r1
 800fa48:	4620      	mov	r0, r4
 800fa4a:	4629      	mov	r1, r5
 800fa4c:	f7f0 fc44 	bl	80002d8 <__aeabi_dsub>
 800fa50:	e7c6      	b.n	800f9e0 <__kernel_sin+0xc8>
 800fa52:	bf00      	nop
 800fa54:	f3af 8000 	nop.w
 800fa58:	55555549 	.word	0x55555549
 800fa5c:	3fc55555 	.word	0x3fc55555
 800fa60:	3fe00000 	.word	0x3fe00000
 800fa64:	5acfd57c 	.word	0x5acfd57c
 800fa68:	3de5d93a 	.word	0x3de5d93a
 800fa6c:	8a2b9ceb 	.word	0x8a2b9ceb
 800fa70:	3e5ae5e6 	.word	0x3e5ae5e6
 800fa74:	57b1fe7d 	.word	0x57b1fe7d
 800fa78:	3ec71de3 	.word	0x3ec71de3
 800fa7c:	19c161d5 	.word	0x19c161d5
 800fa80:	3f2a01a0 	.word	0x3f2a01a0
 800fa84:	1110f8a6 	.word	0x1110f8a6
 800fa88:	3f811111 	.word	0x3f811111

0800fa8c <__ieee754_fmod>:
 800fa8c:	ec53 2b11 	vmov	r2, r3, d1
 800fa90:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800fa94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa98:	ea52 040c 	orrs.w	r4, r2, ip
 800fa9c:	ec51 0b10 	vmov	r0, r1, d0
 800faa0:	461e      	mov	r6, r3
 800faa2:	4617      	mov	r7, r2
 800faa4:	4696      	mov	lr, r2
 800faa6:	d00c      	beq.n	800fac2 <__ieee754_fmod+0x36>
 800faa8:	4c77      	ldr	r4, [pc, #476]	@ (800fc88 <__ieee754_fmod+0x1fc>)
 800faaa:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800faae:	45a0      	cmp	r8, r4
 800fab0:	4689      	mov	r9, r1
 800fab2:	d806      	bhi.n	800fac2 <__ieee754_fmod+0x36>
 800fab4:	4254      	negs	r4, r2
 800fab6:	4d75      	ldr	r5, [pc, #468]	@ (800fc8c <__ieee754_fmod+0x200>)
 800fab8:	4314      	orrs	r4, r2
 800faba:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800fabe:	42ac      	cmp	r4, r5
 800fac0:	d909      	bls.n	800fad6 <__ieee754_fmod+0x4a>
 800fac2:	f7f0 fdc1 	bl	8000648 <__aeabi_dmul>
 800fac6:	4602      	mov	r2, r0
 800fac8:	460b      	mov	r3, r1
 800faca:	f7f0 fee7 	bl	800089c <__aeabi_ddiv>
 800face:	ec41 0b10 	vmov	d0, r0, r1
 800fad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad6:	45e0      	cmp	r8, ip
 800fad8:	4682      	mov	sl, r0
 800fada:	4604      	mov	r4, r0
 800fadc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800fae0:	dc09      	bgt.n	800faf6 <__ieee754_fmod+0x6a>
 800fae2:	dbf4      	blt.n	800face <__ieee754_fmod+0x42>
 800fae4:	4282      	cmp	r2, r0
 800fae6:	d8f2      	bhi.n	800face <__ieee754_fmod+0x42>
 800fae8:	d105      	bne.n	800faf6 <__ieee754_fmod+0x6a>
 800faea:	4b69      	ldr	r3, [pc, #420]	@ (800fc90 <__ieee754_fmod+0x204>)
 800faec:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800faf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800faf4:	e7eb      	b.n	800face <__ieee754_fmod+0x42>
 800faf6:	4a65      	ldr	r2, [pc, #404]	@ (800fc8c <__ieee754_fmod+0x200>)
 800faf8:	ea19 0f02 	tst.w	r9, r2
 800fafc:	d148      	bne.n	800fb90 <__ieee754_fmod+0x104>
 800fafe:	f1b8 0f00 	cmp.w	r8, #0
 800fb02:	d13d      	bne.n	800fb80 <__ieee754_fmod+0xf4>
 800fb04:	4963      	ldr	r1, [pc, #396]	@ (800fc94 <__ieee754_fmod+0x208>)
 800fb06:	4653      	mov	r3, sl
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	dc36      	bgt.n	800fb7a <__ieee754_fmod+0xee>
 800fb0c:	4216      	tst	r6, r2
 800fb0e:	d14f      	bne.n	800fbb0 <__ieee754_fmod+0x124>
 800fb10:	f1bc 0f00 	cmp.w	ip, #0
 800fb14:	d144      	bne.n	800fba0 <__ieee754_fmod+0x114>
 800fb16:	4a5f      	ldr	r2, [pc, #380]	@ (800fc94 <__ieee754_fmod+0x208>)
 800fb18:	463b      	mov	r3, r7
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	dc3d      	bgt.n	800fb9a <__ieee754_fmod+0x10e>
 800fb1e:	485e      	ldr	r0, [pc, #376]	@ (800fc98 <__ieee754_fmod+0x20c>)
 800fb20:	4281      	cmp	r1, r0
 800fb22:	db4a      	blt.n	800fbba <__ieee754_fmod+0x12e>
 800fb24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb2c:	485a      	ldr	r0, [pc, #360]	@ (800fc98 <__ieee754_fmod+0x20c>)
 800fb2e:	4282      	cmp	r2, r0
 800fb30:	db57      	blt.n	800fbe2 <__ieee754_fmod+0x156>
 800fb32:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800fb36:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800fb3a:	1a89      	subs	r1, r1, r2
 800fb3c:	1b98      	subs	r0, r3, r6
 800fb3e:	eba4 070e 	sub.w	r7, r4, lr
 800fb42:	2900      	cmp	r1, #0
 800fb44:	d162      	bne.n	800fc0c <__ieee754_fmod+0x180>
 800fb46:	4574      	cmp	r4, lr
 800fb48:	bf38      	it	cc
 800fb4a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	bfa4      	itt	ge
 800fb52:	463c      	movge	r4, r7
 800fb54:	4603      	movge	r3, r0
 800fb56:	ea53 0104 	orrs.w	r1, r3, r4
 800fb5a:	d0c6      	beq.n	800faea <__ieee754_fmod+0x5e>
 800fb5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fb60:	db69      	blt.n	800fc36 <__ieee754_fmod+0x1aa>
 800fb62:	494d      	ldr	r1, [pc, #308]	@ (800fc98 <__ieee754_fmod+0x20c>)
 800fb64:	428a      	cmp	r2, r1
 800fb66:	db6c      	blt.n	800fc42 <__ieee754_fmod+0x1b6>
 800fb68:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fb6c:	432b      	orrs	r3, r5
 800fb6e:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800fb72:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fb76:	4620      	mov	r0, r4
 800fb78:	e7a9      	b.n	800face <__ieee754_fmod+0x42>
 800fb7a:	3901      	subs	r1, #1
 800fb7c:	005b      	lsls	r3, r3, #1
 800fb7e:	e7c3      	b.n	800fb08 <__ieee754_fmod+0x7c>
 800fb80:	4945      	ldr	r1, [pc, #276]	@ (800fc98 <__ieee754_fmod+0x20c>)
 800fb82:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	ddc0      	ble.n	800fb0c <__ieee754_fmod+0x80>
 800fb8a:	3901      	subs	r1, #1
 800fb8c:	005b      	lsls	r3, r3, #1
 800fb8e:	e7fa      	b.n	800fb86 <__ieee754_fmod+0xfa>
 800fb90:	ea4f 5128 	mov.w	r1, r8, asr #20
 800fb94:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800fb98:	e7b8      	b.n	800fb0c <__ieee754_fmod+0x80>
 800fb9a:	3a01      	subs	r2, #1
 800fb9c:	005b      	lsls	r3, r3, #1
 800fb9e:	e7bc      	b.n	800fb1a <__ieee754_fmod+0x8e>
 800fba0:	4a3d      	ldr	r2, [pc, #244]	@ (800fc98 <__ieee754_fmod+0x20c>)
 800fba2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	ddb9      	ble.n	800fb1e <__ieee754_fmod+0x92>
 800fbaa:	3a01      	subs	r2, #1
 800fbac:	005b      	lsls	r3, r3, #1
 800fbae:	e7fa      	b.n	800fba6 <__ieee754_fmod+0x11a>
 800fbb0:	ea4f 522c 	mov.w	r2, ip, asr #20
 800fbb4:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fbb8:	e7b1      	b.n	800fb1e <__ieee754_fmod+0x92>
 800fbba:	1a40      	subs	r0, r0, r1
 800fbbc:	281f      	cmp	r0, #31
 800fbbe:	dc0a      	bgt.n	800fbd6 <__ieee754_fmod+0x14a>
 800fbc0:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800fbc4:	fa08 f800 	lsl.w	r8, r8, r0
 800fbc8:	fa2a f303 	lsr.w	r3, sl, r3
 800fbcc:	ea43 0308 	orr.w	r3, r3, r8
 800fbd0:	fa0a f400 	lsl.w	r4, sl, r0
 800fbd4:	e7aa      	b.n	800fb2c <__ieee754_fmod+0xa0>
 800fbd6:	4b31      	ldr	r3, [pc, #196]	@ (800fc9c <__ieee754_fmod+0x210>)
 800fbd8:	1a5b      	subs	r3, r3, r1
 800fbda:	fa0a f303 	lsl.w	r3, sl, r3
 800fbde:	2400      	movs	r4, #0
 800fbe0:	e7a4      	b.n	800fb2c <__ieee754_fmod+0xa0>
 800fbe2:	1a80      	subs	r0, r0, r2
 800fbe4:	281f      	cmp	r0, #31
 800fbe6:	dc0a      	bgt.n	800fbfe <__ieee754_fmod+0x172>
 800fbe8:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800fbec:	fa0c fc00 	lsl.w	ip, ip, r0
 800fbf0:	fa27 f606 	lsr.w	r6, r7, r6
 800fbf4:	ea46 060c 	orr.w	r6, r6, ip
 800fbf8:	fa07 fe00 	lsl.w	lr, r7, r0
 800fbfc:	e79d      	b.n	800fb3a <__ieee754_fmod+0xae>
 800fbfe:	4e27      	ldr	r6, [pc, #156]	@ (800fc9c <__ieee754_fmod+0x210>)
 800fc00:	1ab6      	subs	r6, r6, r2
 800fc02:	fa07 f606 	lsl.w	r6, r7, r6
 800fc06:	f04f 0e00 	mov.w	lr, #0
 800fc0a:	e796      	b.n	800fb3a <__ieee754_fmod+0xae>
 800fc0c:	4574      	cmp	r4, lr
 800fc0e:	bf38      	it	cc
 800fc10:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800fc14:	2800      	cmp	r0, #0
 800fc16:	da05      	bge.n	800fc24 <__ieee754_fmod+0x198>
 800fc18:	0fe0      	lsrs	r0, r4, #31
 800fc1a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800fc1e:	0064      	lsls	r4, r4, #1
 800fc20:	3901      	subs	r1, #1
 800fc22:	e78b      	b.n	800fb3c <__ieee754_fmod+0xb0>
 800fc24:	ea50 0307 	orrs.w	r3, r0, r7
 800fc28:	f43f af5f 	beq.w	800faea <__ieee754_fmod+0x5e>
 800fc2c:	0ffb      	lsrs	r3, r7, #31
 800fc2e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800fc32:	007c      	lsls	r4, r7, #1
 800fc34:	e7f4      	b.n	800fc20 <__ieee754_fmod+0x194>
 800fc36:	0fe1      	lsrs	r1, r4, #31
 800fc38:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800fc3c:	0064      	lsls	r4, r4, #1
 800fc3e:	3a01      	subs	r2, #1
 800fc40:	e78c      	b.n	800fb5c <__ieee754_fmod+0xd0>
 800fc42:	1a89      	subs	r1, r1, r2
 800fc44:	2914      	cmp	r1, #20
 800fc46:	dc0a      	bgt.n	800fc5e <__ieee754_fmod+0x1d2>
 800fc48:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800fc4c:	fa03 f202 	lsl.w	r2, r3, r2
 800fc50:	40cc      	lsrs	r4, r1
 800fc52:	4322      	orrs	r2, r4
 800fc54:	410b      	asrs	r3, r1
 800fc56:	ea43 0105 	orr.w	r1, r3, r5
 800fc5a:	4610      	mov	r0, r2
 800fc5c:	e737      	b.n	800face <__ieee754_fmod+0x42>
 800fc5e:	291f      	cmp	r1, #31
 800fc60:	dc07      	bgt.n	800fc72 <__ieee754_fmod+0x1e6>
 800fc62:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800fc66:	40cc      	lsrs	r4, r1
 800fc68:	fa03 f202 	lsl.w	r2, r3, r2
 800fc6c:	4322      	orrs	r2, r4
 800fc6e:	462b      	mov	r3, r5
 800fc70:	e7f1      	b.n	800fc56 <__ieee754_fmod+0x1ca>
 800fc72:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800fc76:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800fc7a:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800fc7e:	32e2      	adds	r2, #226	@ 0xe2
 800fc80:	fa43 f202 	asr.w	r2, r3, r2
 800fc84:	e7f3      	b.n	800fc6e <__ieee754_fmod+0x1e2>
 800fc86:	bf00      	nop
 800fc88:	7fefffff 	.word	0x7fefffff
 800fc8c:	7ff00000 	.word	0x7ff00000
 800fc90:	08010ca8 	.word	0x08010ca8
 800fc94:	fffffbed 	.word	0xfffffbed
 800fc98:	fffffc02 	.word	0xfffffc02
 800fc9c:	fffffbe2 	.word	0xfffffbe2

0800fca0 <__ieee754_rem_pio2>:
 800fca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca4:	ec57 6b10 	vmov	r6, r7, d0
 800fca8:	4bc5      	ldr	r3, [pc, #788]	@ (800ffc0 <__ieee754_rem_pio2+0x320>)
 800fcaa:	b08d      	sub	sp, #52	@ 0x34
 800fcac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fcb0:	4598      	cmp	r8, r3
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	9704      	str	r7, [sp, #16]
 800fcb6:	d807      	bhi.n	800fcc8 <__ieee754_rem_pio2+0x28>
 800fcb8:	2200      	movs	r2, #0
 800fcba:	2300      	movs	r3, #0
 800fcbc:	ed80 0b00 	vstr	d0, [r0]
 800fcc0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fcc4:	2500      	movs	r5, #0
 800fcc6:	e028      	b.n	800fd1a <__ieee754_rem_pio2+0x7a>
 800fcc8:	4bbe      	ldr	r3, [pc, #760]	@ (800ffc4 <__ieee754_rem_pio2+0x324>)
 800fcca:	4598      	cmp	r8, r3
 800fccc:	d878      	bhi.n	800fdc0 <__ieee754_rem_pio2+0x120>
 800fcce:	9b04      	ldr	r3, [sp, #16]
 800fcd0:	4dbd      	ldr	r5, [pc, #756]	@ (800ffc8 <__ieee754_rem_pio2+0x328>)
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ff88 <__ieee754_rem_pio2+0x2e8>)
 800fcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcdc:	4639      	mov	r1, r7
 800fcde:	dd38      	ble.n	800fd52 <__ieee754_rem_pio2+0xb2>
 800fce0:	f7f0 fafa 	bl	80002d8 <__aeabi_dsub>
 800fce4:	45a8      	cmp	r8, r5
 800fce6:	4606      	mov	r6, r0
 800fce8:	460f      	mov	r7, r1
 800fcea:	d01a      	beq.n	800fd22 <__ieee754_rem_pio2+0x82>
 800fcec:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ff90 <__ieee754_rem_pio2+0x2f0>)
 800fcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf2:	f7f0 faf1 	bl	80002d8 <__aeabi_dsub>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	4680      	mov	r8, r0
 800fcfc:	4689      	mov	r9, r1
 800fcfe:	4630      	mov	r0, r6
 800fd00:	4639      	mov	r1, r7
 800fd02:	f7f0 fae9 	bl	80002d8 <__aeabi_dsub>
 800fd06:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ff90 <__ieee754_rem_pio2+0x2f0>)
 800fd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0c:	f7f0 fae4 	bl	80002d8 <__aeabi_dsub>
 800fd10:	e9c4 8900 	strd	r8, r9, [r4]
 800fd14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fd18:	2501      	movs	r5, #1
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	b00d      	add	sp, #52	@ 0x34
 800fd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd22:	a39d      	add	r3, pc, #628	@ (adr r3, 800ff98 <__ieee754_rem_pio2+0x2f8>)
 800fd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd28:	f7f0 fad6 	bl	80002d8 <__aeabi_dsub>
 800fd2c:	a39c      	add	r3, pc, #624	@ (adr r3, 800ffa0 <__ieee754_rem_pio2+0x300>)
 800fd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd32:	4606      	mov	r6, r0
 800fd34:	460f      	mov	r7, r1
 800fd36:	f7f0 facf 	bl	80002d8 <__aeabi_dsub>
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	4680      	mov	r8, r0
 800fd40:	4689      	mov	r9, r1
 800fd42:	4630      	mov	r0, r6
 800fd44:	4639      	mov	r1, r7
 800fd46:	f7f0 fac7 	bl	80002d8 <__aeabi_dsub>
 800fd4a:	a395      	add	r3, pc, #596	@ (adr r3, 800ffa0 <__ieee754_rem_pio2+0x300>)
 800fd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd50:	e7dc      	b.n	800fd0c <__ieee754_rem_pio2+0x6c>
 800fd52:	f7f0 fac3 	bl	80002dc <__adddf3>
 800fd56:	45a8      	cmp	r8, r5
 800fd58:	4606      	mov	r6, r0
 800fd5a:	460f      	mov	r7, r1
 800fd5c:	d018      	beq.n	800fd90 <__ieee754_rem_pio2+0xf0>
 800fd5e:	a38c      	add	r3, pc, #560	@ (adr r3, 800ff90 <__ieee754_rem_pio2+0x2f0>)
 800fd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd64:	f7f0 faba 	bl	80002dc <__adddf3>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	460b      	mov	r3, r1
 800fd6c:	4680      	mov	r8, r0
 800fd6e:	4689      	mov	r9, r1
 800fd70:	4630      	mov	r0, r6
 800fd72:	4639      	mov	r1, r7
 800fd74:	f7f0 fab0 	bl	80002d8 <__aeabi_dsub>
 800fd78:	a385      	add	r3, pc, #532	@ (adr r3, 800ff90 <__ieee754_rem_pio2+0x2f0>)
 800fd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7e:	f7f0 faad 	bl	80002dc <__adddf3>
 800fd82:	f04f 35ff 	mov.w	r5, #4294967295
 800fd86:	e9c4 8900 	strd	r8, r9, [r4]
 800fd8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fd8e:	e7c4      	b.n	800fd1a <__ieee754_rem_pio2+0x7a>
 800fd90:	a381      	add	r3, pc, #516	@ (adr r3, 800ff98 <__ieee754_rem_pio2+0x2f8>)
 800fd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd96:	f7f0 faa1 	bl	80002dc <__adddf3>
 800fd9a:	a381      	add	r3, pc, #516	@ (adr r3, 800ffa0 <__ieee754_rem_pio2+0x300>)
 800fd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda0:	4606      	mov	r6, r0
 800fda2:	460f      	mov	r7, r1
 800fda4:	f7f0 fa9a 	bl	80002dc <__adddf3>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	460b      	mov	r3, r1
 800fdac:	4680      	mov	r8, r0
 800fdae:	4689      	mov	r9, r1
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	4639      	mov	r1, r7
 800fdb4:	f7f0 fa90 	bl	80002d8 <__aeabi_dsub>
 800fdb8:	a379      	add	r3, pc, #484	@ (adr r3, 800ffa0 <__ieee754_rem_pio2+0x300>)
 800fdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbe:	e7de      	b.n	800fd7e <__ieee754_rem_pio2+0xde>
 800fdc0:	4b82      	ldr	r3, [pc, #520]	@ (800ffcc <__ieee754_rem_pio2+0x32c>)
 800fdc2:	4598      	cmp	r8, r3
 800fdc4:	f200 80d1 	bhi.w	800ff6a <__ieee754_rem_pio2+0x2ca>
 800fdc8:	f000 f966 	bl	8010098 <fabs>
 800fdcc:	ec57 6b10 	vmov	r6, r7, d0
 800fdd0:	a375      	add	r3, pc, #468	@ (adr r3, 800ffa8 <__ieee754_rem_pio2+0x308>)
 800fdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	4639      	mov	r1, r7
 800fdda:	f7f0 fc35 	bl	8000648 <__aeabi_dmul>
 800fdde:	4b7c      	ldr	r3, [pc, #496]	@ (800ffd0 <__ieee754_rem_pio2+0x330>)
 800fde0:	2200      	movs	r2, #0
 800fde2:	f7f0 fa7b 	bl	80002dc <__adddf3>
 800fde6:	f7f0 fedf 	bl	8000ba8 <__aeabi_d2iz>
 800fdea:	4605      	mov	r5, r0
 800fdec:	f7f0 fbc2 	bl	8000574 <__aeabi_i2d>
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fdf8:	a363      	add	r3, pc, #396	@ (adr r3, 800ff88 <__ieee754_rem_pio2+0x2e8>)
 800fdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfe:	f7f0 fc23 	bl	8000648 <__aeabi_dmul>
 800fe02:	4602      	mov	r2, r0
 800fe04:	460b      	mov	r3, r1
 800fe06:	4630      	mov	r0, r6
 800fe08:	4639      	mov	r1, r7
 800fe0a:	f7f0 fa65 	bl	80002d8 <__aeabi_dsub>
 800fe0e:	a360      	add	r3, pc, #384	@ (adr r3, 800ff90 <__ieee754_rem_pio2+0x2f0>)
 800fe10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe14:	4682      	mov	sl, r0
 800fe16:	468b      	mov	fp, r1
 800fe18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe1c:	f7f0 fc14 	bl	8000648 <__aeabi_dmul>
 800fe20:	2d1f      	cmp	r5, #31
 800fe22:	4606      	mov	r6, r0
 800fe24:	460f      	mov	r7, r1
 800fe26:	dc0c      	bgt.n	800fe42 <__ieee754_rem_pio2+0x1a2>
 800fe28:	4b6a      	ldr	r3, [pc, #424]	@ (800ffd4 <__ieee754_rem_pio2+0x334>)
 800fe2a:	1e6a      	subs	r2, r5, #1
 800fe2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe30:	4543      	cmp	r3, r8
 800fe32:	d006      	beq.n	800fe42 <__ieee754_rem_pio2+0x1a2>
 800fe34:	4632      	mov	r2, r6
 800fe36:	463b      	mov	r3, r7
 800fe38:	4650      	mov	r0, sl
 800fe3a:	4659      	mov	r1, fp
 800fe3c:	f7f0 fa4c 	bl	80002d8 <__aeabi_dsub>
 800fe40:	e00e      	b.n	800fe60 <__ieee754_rem_pio2+0x1c0>
 800fe42:	463b      	mov	r3, r7
 800fe44:	4632      	mov	r2, r6
 800fe46:	4650      	mov	r0, sl
 800fe48:	4659      	mov	r1, fp
 800fe4a:	f7f0 fa45 	bl	80002d8 <__aeabi_dsub>
 800fe4e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fe52:	9305      	str	r3, [sp, #20]
 800fe54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fe58:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800fe5c:	2b10      	cmp	r3, #16
 800fe5e:	dc02      	bgt.n	800fe66 <__ieee754_rem_pio2+0x1c6>
 800fe60:	e9c4 0100 	strd	r0, r1, [r4]
 800fe64:	e039      	b.n	800feda <__ieee754_rem_pio2+0x23a>
 800fe66:	a34c      	add	r3, pc, #304	@ (adr r3, 800ff98 <__ieee754_rem_pio2+0x2f8>)
 800fe68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe70:	f7f0 fbea 	bl	8000648 <__aeabi_dmul>
 800fe74:	4606      	mov	r6, r0
 800fe76:	460f      	mov	r7, r1
 800fe78:	4602      	mov	r2, r0
 800fe7a:	460b      	mov	r3, r1
 800fe7c:	4650      	mov	r0, sl
 800fe7e:	4659      	mov	r1, fp
 800fe80:	f7f0 fa2a 	bl	80002d8 <__aeabi_dsub>
 800fe84:	4602      	mov	r2, r0
 800fe86:	460b      	mov	r3, r1
 800fe88:	4680      	mov	r8, r0
 800fe8a:	4689      	mov	r9, r1
 800fe8c:	4650      	mov	r0, sl
 800fe8e:	4659      	mov	r1, fp
 800fe90:	f7f0 fa22 	bl	80002d8 <__aeabi_dsub>
 800fe94:	4632      	mov	r2, r6
 800fe96:	463b      	mov	r3, r7
 800fe98:	f7f0 fa1e 	bl	80002d8 <__aeabi_dsub>
 800fe9c:	a340      	add	r3, pc, #256	@ (adr r3, 800ffa0 <__ieee754_rem_pio2+0x300>)
 800fe9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea2:	4606      	mov	r6, r0
 800fea4:	460f      	mov	r7, r1
 800fea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800feaa:	f7f0 fbcd 	bl	8000648 <__aeabi_dmul>
 800feae:	4632      	mov	r2, r6
 800feb0:	463b      	mov	r3, r7
 800feb2:	f7f0 fa11 	bl	80002d8 <__aeabi_dsub>
 800feb6:	4602      	mov	r2, r0
 800feb8:	460b      	mov	r3, r1
 800feba:	4606      	mov	r6, r0
 800febc:	460f      	mov	r7, r1
 800febe:	4640      	mov	r0, r8
 800fec0:	4649      	mov	r1, r9
 800fec2:	f7f0 fa09 	bl	80002d8 <__aeabi_dsub>
 800fec6:	9a05      	ldr	r2, [sp, #20]
 800fec8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fecc:	1ad3      	subs	r3, r2, r3
 800fece:	2b31      	cmp	r3, #49	@ 0x31
 800fed0:	dc20      	bgt.n	800ff14 <__ieee754_rem_pio2+0x274>
 800fed2:	e9c4 0100 	strd	r0, r1, [r4]
 800fed6:	46c2      	mov	sl, r8
 800fed8:	46cb      	mov	fp, r9
 800feda:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fede:	4650      	mov	r0, sl
 800fee0:	4642      	mov	r2, r8
 800fee2:	464b      	mov	r3, r9
 800fee4:	4659      	mov	r1, fp
 800fee6:	f7f0 f9f7 	bl	80002d8 <__aeabi_dsub>
 800feea:	463b      	mov	r3, r7
 800feec:	4632      	mov	r2, r6
 800feee:	f7f0 f9f3 	bl	80002d8 <__aeabi_dsub>
 800fef2:	9b04      	ldr	r3, [sp, #16]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fefa:	f6bf af0e 	bge.w	800fd1a <__ieee754_rem_pio2+0x7a>
 800fefe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ff02:	6063      	str	r3, [r4, #4]
 800ff04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff08:	f8c4 8000 	str.w	r8, [r4]
 800ff0c:	60a0      	str	r0, [r4, #8]
 800ff0e:	60e3      	str	r3, [r4, #12]
 800ff10:	426d      	negs	r5, r5
 800ff12:	e702      	b.n	800fd1a <__ieee754_rem_pio2+0x7a>
 800ff14:	a326      	add	r3, pc, #152	@ (adr r3, 800ffb0 <__ieee754_rem_pio2+0x310>)
 800ff16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff1e:	f7f0 fb93 	bl	8000648 <__aeabi_dmul>
 800ff22:	4606      	mov	r6, r0
 800ff24:	460f      	mov	r7, r1
 800ff26:	4602      	mov	r2, r0
 800ff28:	460b      	mov	r3, r1
 800ff2a:	4640      	mov	r0, r8
 800ff2c:	4649      	mov	r1, r9
 800ff2e:	f7f0 f9d3 	bl	80002d8 <__aeabi_dsub>
 800ff32:	4602      	mov	r2, r0
 800ff34:	460b      	mov	r3, r1
 800ff36:	4682      	mov	sl, r0
 800ff38:	468b      	mov	fp, r1
 800ff3a:	4640      	mov	r0, r8
 800ff3c:	4649      	mov	r1, r9
 800ff3e:	f7f0 f9cb 	bl	80002d8 <__aeabi_dsub>
 800ff42:	4632      	mov	r2, r6
 800ff44:	463b      	mov	r3, r7
 800ff46:	f7f0 f9c7 	bl	80002d8 <__aeabi_dsub>
 800ff4a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ffb8 <__ieee754_rem_pio2+0x318>)
 800ff4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff50:	4606      	mov	r6, r0
 800ff52:	460f      	mov	r7, r1
 800ff54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff58:	f7f0 fb76 	bl	8000648 <__aeabi_dmul>
 800ff5c:	4632      	mov	r2, r6
 800ff5e:	463b      	mov	r3, r7
 800ff60:	f7f0 f9ba 	bl	80002d8 <__aeabi_dsub>
 800ff64:	4606      	mov	r6, r0
 800ff66:	460f      	mov	r7, r1
 800ff68:	e764      	b.n	800fe34 <__ieee754_rem_pio2+0x194>
 800ff6a:	4b1b      	ldr	r3, [pc, #108]	@ (800ffd8 <__ieee754_rem_pio2+0x338>)
 800ff6c:	4598      	cmp	r8, r3
 800ff6e:	d935      	bls.n	800ffdc <__ieee754_rem_pio2+0x33c>
 800ff70:	4632      	mov	r2, r6
 800ff72:	463b      	mov	r3, r7
 800ff74:	4630      	mov	r0, r6
 800ff76:	4639      	mov	r1, r7
 800ff78:	f7f0 f9ae 	bl	80002d8 <__aeabi_dsub>
 800ff7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ff80:	e9c4 0100 	strd	r0, r1, [r4]
 800ff84:	e69e      	b.n	800fcc4 <__ieee754_rem_pio2+0x24>
 800ff86:	bf00      	nop
 800ff88:	54400000 	.word	0x54400000
 800ff8c:	3ff921fb 	.word	0x3ff921fb
 800ff90:	1a626331 	.word	0x1a626331
 800ff94:	3dd0b461 	.word	0x3dd0b461
 800ff98:	1a600000 	.word	0x1a600000
 800ff9c:	3dd0b461 	.word	0x3dd0b461
 800ffa0:	2e037073 	.word	0x2e037073
 800ffa4:	3ba3198a 	.word	0x3ba3198a
 800ffa8:	6dc9c883 	.word	0x6dc9c883
 800ffac:	3fe45f30 	.word	0x3fe45f30
 800ffb0:	2e000000 	.word	0x2e000000
 800ffb4:	3ba3198a 	.word	0x3ba3198a
 800ffb8:	252049c1 	.word	0x252049c1
 800ffbc:	397b839a 	.word	0x397b839a
 800ffc0:	3fe921fb 	.word	0x3fe921fb
 800ffc4:	4002d97b 	.word	0x4002d97b
 800ffc8:	3ff921fb 	.word	0x3ff921fb
 800ffcc:	413921fb 	.word	0x413921fb
 800ffd0:	3fe00000 	.word	0x3fe00000
 800ffd4:	08010cb8 	.word	0x08010cb8
 800ffd8:	7fefffff 	.word	0x7fefffff
 800ffdc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ffe0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ffe4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ffe8:	4630      	mov	r0, r6
 800ffea:	460f      	mov	r7, r1
 800ffec:	f7f0 fddc 	bl	8000ba8 <__aeabi_d2iz>
 800fff0:	f7f0 fac0 	bl	8000574 <__aeabi_i2d>
 800fff4:	4602      	mov	r2, r0
 800fff6:	460b      	mov	r3, r1
 800fff8:	4630      	mov	r0, r6
 800fffa:	4639      	mov	r1, r7
 800fffc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010000:	f7f0 f96a 	bl	80002d8 <__aeabi_dsub>
 8010004:	4b22      	ldr	r3, [pc, #136]	@ (8010090 <__ieee754_rem_pio2+0x3f0>)
 8010006:	2200      	movs	r2, #0
 8010008:	f7f0 fb1e 	bl	8000648 <__aeabi_dmul>
 801000c:	460f      	mov	r7, r1
 801000e:	4606      	mov	r6, r0
 8010010:	f7f0 fdca 	bl	8000ba8 <__aeabi_d2iz>
 8010014:	f7f0 faae 	bl	8000574 <__aeabi_i2d>
 8010018:	4602      	mov	r2, r0
 801001a:	460b      	mov	r3, r1
 801001c:	4630      	mov	r0, r6
 801001e:	4639      	mov	r1, r7
 8010020:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010024:	f7f0 f958 	bl	80002d8 <__aeabi_dsub>
 8010028:	4b19      	ldr	r3, [pc, #100]	@ (8010090 <__ieee754_rem_pio2+0x3f0>)
 801002a:	2200      	movs	r2, #0
 801002c:	f7f0 fb0c 	bl	8000648 <__aeabi_dmul>
 8010030:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8010034:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010038:	f04f 0803 	mov.w	r8, #3
 801003c:	2600      	movs	r6, #0
 801003e:	2700      	movs	r7, #0
 8010040:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010044:	4632      	mov	r2, r6
 8010046:	463b      	mov	r3, r7
 8010048:	46c2      	mov	sl, r8
 801004a:	f108 38ff 	add.w	r8, r8, #4294967295
 801004e:	f7f0 fd63 	bl	8000b18 <__aeabi_dcmpeq>
 8010052:	2800      	cmp	r0, #0
 8010054:	d1f4      	bne.n	8010040 <__ieee754_rem_pio2+0x3a0>
 8010056:	4b0f      	ldr	r3, [pc, #60]	@ (8010094 <__ieee754_rem_pio2+0x3f4>)
 8010058:	9301      	str	r3, [sp, #4]
 801005a:	2302      	movs	r3, #2
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	462a      	mov	r2, r5
 8010060:	4653      	mov	r3, sl
 8010062:	4621      	mov	r1, r4
 8010064:	a806      	add	r0, sp, #24
 8010066:	f000 f81f 	bl	80100a8 <__kernel_rem_pio2>
 801006a:	9b04      	ldr	r3, [sp, #16]
 801006c:	2b00      	cmp	r3, #0
 801006e:	4605      	mov	r5, r0
 8010070:	f6bf ae53 	bge.w	800fd1a <__ieee754_rem_pio2+0x7a>
 8010074:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010078:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801007c:	e9c4 2300 	strd	r2, r3, [r4]
 8010080:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010084:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010088:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801008c:	e740      	b.n	800ff10 <__ieee754_rem_pio2+0x270>
 801008e:	bf00      	nop
 8010090:	41700000 	.word	0x41700000
 8010094:	08010d38 	.word	0x08010d38

08010098 <fabs>:
 8010098:	ec51 0b10 	vmov	r0, r1, d0
 801009c:	4602      	mov	r2, r0
 801009e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80100a2:	ec43 2b10 	vmov	d0, r2, r3
 80100a6:	4770      	bx	lr

080100a8 <__kernel_rem_pio2>:
 80100a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ac:	ed2d 8b02 	vpush	{d8}
 80100b0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80100b4:	f112 0f14 	cmn.w	r2, #20
 80100b8:	9306      	str	r3, [sp, #24]
 80100ba:	9104      	str	r1, [sp, #16]
 80100bc:	4bbe      	ldr	r3, [pc, #760]	@ (80103b8 <__kernel_rem_pio2+0x310>)
 80100be:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80100c0:	9008      	str	r0, [sp, #32]
 80100c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80100c6:	9300      	str	r3, [sp, #0]
 80100c8:	9b06      	ldr	r3, [sp, #24]
 80100ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80100ce:	bfa8      	it	ge
 80100d0:	1ed4      	subge	r4, r2, #3
 80100d2:	9305      	str	r3, [sp, #20]
 80100d4:	bfb2      	itee	lt
 80100d6:	2400      	movlt	r4, #0
 80100d8:	2318      	movge	r3, #24
 80100da:	fb94 f4f3 	sdivge	r4, r4, r3
 80100de:	f06f 0317 	mvn.w	r3, #23
 80100e2:	fb04 3303 	mla	r3, r4, r3, r3
 80100e6:	eb03 0b02 	add.w	fp, r3, r2
 80100ea:	9b00      	ldr	r3, [sp, #0]
 80100ec:	9a05      	ldr	r2, [sp, #20]
 80100ee:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80103a8 <__kernel_rem_pio2+0x300>
 80100f2:	eb03 0802 	add.w	r8, r3, r2
 80100f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80100f8:	1aa7      	subs	r7, r4, r2
 80100fa:	ae20      	add	r6, sp, #128	@ 0x80
 80100fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010100:	2500      	movs	r5, #0
 8010102:	4545      	cmp	r5, r8
 8010104:	dd13      	ble.n	801012e <__kernel_rem_pio2+0x86>
 8010106:	9b06      	ldr	r3, [sp, #24]
 8010108:	aa20      	add	r2, sp, #128	@ 0x80
 801010a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801010e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8010112:	f04f 0800 	mov.w	r8, #0
 8010116:	9b00      	ldr	r3, [sp, #0]
 8010118:	4598      	cmp	r8, r3
 801011a:	dc31      	bgt.n	8010180 <__kernel_rem_pio2+0xd8>
 801011c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80103a8 <__kernel_rem_pio2+0x300>
 8010120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010124:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010128:	462f      	mov	r7, r5
 801012a:	2600      	movs	r6, #0
 801012c:	e01b      	b.n	8010166 <__kernel_rem_pio2+0xbe>
 801012e:	42ef      	cmn	r7, r5
 8010130:	d407      	bmi.n	8010142 <__kernel_rem_pio2+0x9a>
 8010132:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010136:	f7f0 fa1d 	bl	8000574 <__aeabi_i2d>
 801013a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801013e:	3501      	adds	r5, #1
 8010140:	e7df      	b.n	8010102 <__kernel_rem_pio2+0x5a>
 8010142:	ec51 0b18 	vmov	r0, r1, d8
 8010146:	e7f8      	b.n	801013a <__kernel_rem_pio2+0x92>
 8010148:	e9d7 2300 	ldrd	r2, r3, [r7]
 801014c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010150:	f7f0 fa7a 	bl	8000648 <__aeabi_dmul>
 8010154:	4602      	mov	r2, r0
 8010156:	460b      	mov	r3, r1
 8010158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801015c:	f7f0 f8be 	bl	80002dc <__adddf3>
 8010160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010164:	3601      	adds	r6, #1
 8010166:	9b05      	ldr	r3, [sp, #20]
 8010168:	429e      	cmp	r6, r3
 801016a:	f1a7 0708 	sub.w	r7, r7, #8
 801016e:	ddeb      	ble.n	8010148 <__kernel_rem_pio2+0xa0>
 8010170:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010174:	f108 0801 	add.w	r8, r8, #1
 8010178:	ecaa 7b02 	vstmia	sl!, {d7}
 801017c:	3508      	adds	r5, #8
 801017e:	e7ca      	b.n	8010116 <__kernel_rem_pio2+0x6e>
 8010180:	9b00      	ldr	r3, [sp, #0]
 8010182:	f8dd 8000 	ldr.w	r8, [sp]
 8010186:	aa0c      	add	r2, sp, #48	@ 0x30
 8010188:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801018c:	930a      	str	r3, [sp, #40]	@ 0x28
 801018e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010190:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010194:	9309      	str	r3, [sp, #36]	@ 0x24
 8010196:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801019a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801019c:	ab98      	add	r3, sp, #608	@ 0x260
 801019e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80101a2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80101a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80101aa:	ac0c      	add	r4, sp, #48	@ 0x30
 80101ac:	ab70      	add	r3, sp, #448	@ 0x1c0
 80101ae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80101b2:	46a1      	mov	r9, r4
 80101b4:	46c2      	mov	sl, r8
 80101b6:	f1ba 0f00 	cmp.w	sl, #0
 80101ba:	f1a5 0508 	sub.w	r5, r5, #8
 80101be:	dc77      	bgt.n	80102b0 <__kernel_rem_pio2+0x208>
 80101c0:	4658      	mov	r0, fp
 80101c2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80101c6:	f000 fac7 	bl	8010758 <scalbn>
 80101ca:	ec57 6b10 	vmov	r6, r7, d0
 80101ce:	2200      	movs	r2, #0
 80101d0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80101d4:	4630      	mov	r0, r6
 80101d6:	4639      	mov	r1, r7
 80101d8:	f7f0 fa36 	bl	8000648 <__aeabi_dmul>
 80101dc:	ec41 0b10 	vmov	d0, r0, r1
 80101e0:	f7ff fa56 	bl	800f690 <floor>
 80101e4:	4b75      	ldr	r3, [pc, #468]	@ (80103bc <__kernel_rem_pio2+0x314>)
 80101e6:	ec51 0b10 	vmov	r0, r1, d0
 80101ea:	2200      	movs	r2, #0
 80101ec:	f7f0 fa2c 	bl	8000648 <__aeabi_dmul>
 80101f0:	4602      	mov	r2, r0
 80101f2:	460b      	mov	r3, r1
 80101f4:	4630      	mov	r0, r6
 80101f6:	4639      	mov	r1, r7
 80101f8:	f7f0 f86e 	bl	80002d8 <__aeabi_dsub>
 80101fc:	460f      	mov	r7, r1
 80101fe:	4606      	mov	r6, r0
 8010200:	f7f0 fcd2 	bl	8000ba8 <__aeabi_d2iz>
 8010204:	9002      	str	r0, [sp, #8]
 8010206:	f7f0 f9b5 	bl	8000574 <__aeabi_i2d>
 801020a:	4602      	mov	r2, r0
 801020c:	460b      	mov	r3, r1
 801020e:	4630      	mov	r0, r6
 8010210:	4639      	mov	r1, r7
 8010212:	f7f0 f861 	bl	80002d8 <__aeabi_dsub>
 8010216:	f1bb 0f00 	cmp.w	fp, #0
 801021a:	4606      	mov	r6, r0
 801021c:	460f      	mov	r7, r1
 801021e:	dd6c      	ble.n	80102fa <__kernel_rem_pio2+0x252>
 8010220:	f108 31ff 	add.w	r1, r8, #4294967295
 8010224:	ab0c      	add	r3, sp, #48	@ 0x30
 8010226:	9d02      	ldr	r5, [sp, #8]
 8010228:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801022c:	f1cb 0018 	rsb	r0, fp, #24
 8010230:	fa43 f200 	asr.w	r2, r3, r0
 8010234:	4415      	add	r5, r2
 8010236:	4082      	lsls	r2, r0
 8010238:	1a9b      	subs	r3, r3, r2
 801023a:	aa0c      	add	r2, sp, #48	@ 0x30
 801023c:	9502      	str	r5, [sp, #8]
 801023e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010242:	f1cb 0217 	rsb	r2, fp, #23
 8010246:	fa43 f902 	asr.w	r9, r3, r2
 801024a:	f1b9 0f00 	cmp.w	r9, #0
 801024e:	dd64      	ble.n	801031a <__kernel_rem_pio2+0x272>
 8010250:	9b02      	ldr	r3, [sp, #8]
 8010252:	2200      	movs	r2, #0
 8010254:	3301      	adds	r3, #1
 8010256:	9302      	str	r3, [sp, #8]
 8010258:	4615      	mov	r5, r2
 801025a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801025e:	4590      	cmp	r8, r2
 8010260:	f300 80b8 	bgt.w	80103d4 <__kernel_rem_pio2+0x32c>
 8010264:	f1bb 0f00 	cmp.w	fp, #0
 8010268:	dd07      	ble.n	801027a <__kernel_rem_pio2+0x1d2>
 801026a:	f1bb 0f01 	cmp.w	fp, #1
 801026e:	f000 80bf 	beq.w	80103f0 <__kernel_rem_pio2+0x348>
 8010272:	f1bb 0f02 	cmp.w	fp, #2
 8010276:	f000 80c6 	beq.w	8010406 <__kernel_rem_pio2+0x35e>
 801027a:	f1b9 0f02 	cmp.w	r9, #2
 801027e:	d14c      	bne.n	801031a <__kernel_rem_pio2+0x272>
 8010280:	4632      	mov	r2, r6
 8010282:	463b      	mov	r3, r7
 8010284:	494e      	ldr	r1, [pc, #312]	@ (80103c0 <__kernel_rem_pio2+0x318>)
 8010286:	2000      	movs	r0, #0
 8010288:	f7f0 f826 	bl	80002d8 <__aeabi_dsub>
 801028c:	4606      	mov	r6, r0
 801028e:	460f      	mov	r7, r1
 8010290:	2d00      	cmp	r5, #0
 8010292:	d042      	beq.n	801031a <__kernel_rem_pio2+0x272>
 8010294:	4658      	mov	r0, fp
 8010296:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80103b0 <__kernel_rem_pio2+0x308>
 801029a:	f000 fa5d 	bl	8010758 <scalbn>
 801029e:	4630      	mov	r0, r6
 80102a0:	4639      	mov	r1, r7
 80102a2:	ec53 2b10 	vmov	r2, r3, d0
 80102a6:	f7f0 f817 	bl	80002d8 <__aeabi_dsub>
 80102aa:	4606      	mov	r6, r0
 80102ac:	460f      	mov	r7, r1
 80102ae:	e034      	b.n	801031a <__kernel_rem_pio2+0x272>
 80102b0:	4b44      	ldr	r3, [pc, #272]	@ (80103c4 <__kernel_rem_pio2+0x31c>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102b8:	f7f0 f9c6 	bl	8000648 <__aeabi_dmul>
 80102bc:	f7f0 fc74 	bl	8000ba8 <__aeabi_d2iz>
 80102c0:	f7f0 f958 	bl	8000574 <__aeabi_i2d>
 80102c4:	4b40      	ldr	r3, [pc, #256]	@ (80103c8 <__kernel_rem_pio2+0x320>)
 80102c6:	2200      	movs	r2, #0
 80102c8:	4606      	mov	r6, r0
 80102ca:	460f      	mov	r7, r1
 80102cc:	f7f0 f9bc 	bl	8000648 <__aeabi_dmul>
 80102d0:	4602      	mov	r2, r0
 80102d2:	460b      	mov	r3, r1
 80102d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102d8:	f7ef fffe 	bl	80002d8 <__aeabi_dsub>
 80102dc:	f7f0 fc64 	bl	8000ba8 <__aeabi_d2iz>
 80102e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80102e4:	f849 0b04 	str.w	r0, [r9], #4
 80102e8:	4639      	mov	r1, r7
 80102ea:	4630      	mov	r0, r6
 80102ec:	f7ef fff6 	bl	80002dc <__adddf3>
 80102f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80102f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102f8:	e75d      	b.n	80101b6 <__kernel_rem_pio2+0x10e>
 80102fa:	d107      	bne.n	801030c <__kernel_rem_pio2+0x264>
 80102fc:	f108 33ff 	add.w	r3, r8, #4294967295
 8010300:	aa0c      	add	r2, sp, #48	@ 0x30
 8010302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010306:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801030a:	e79e      	b.n	801024a <__kernel_rem_pio2+0x1a2>
 801030c:	4b2f      	ldr	r3, [pc, #188]	@ (80103cc <__kernel_rem_pio2+0x324>)
 801030e:	2200      	movs	r2, #0
 8010310:	f7f0 fc20 	bl	8000b54 <__aeabi_dcmpge>
 8010314:	2800      	cmp	r0, #0
 8010316:	d143      	bne.n	80103a0 <__kernel_rem_pio2+0x2f8>
 8010318:	4681      	mov	r9, r0
 801031a:	2200      	movs	r2, #0
 801031c:	2300      	movs	r3, #0
 801031e:	4630      	mov	r0, r6
 8010320:	4639      	mov	r1, r7
 8010322:	f7f0 fbf9 	bl	8000b18 <__aeabi_dcmpeq>
 8010326:	2800      	cmp	r0, #0
 8010328:	f000 80bf 	beq.w	80104aa <__kernel_rem_pio2+0x402>
 801032c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010330:	2200      	movs	r2, #0
 8010332:	9900      	ldr	r1, [sp, #0]
 8010334:	428b      	cmp	r3, r1
 8010336:	da6e      	bge.n	8010416 <__kernel_rem_pio2+0x36e>
 8010338:	2a00      	cmp	r2, #0
 801033a:	f000 8089 	beq.w	8010450 <__kernel_rem_pio2+0x3a8>
 801033e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010342:	ab0c      	add	r3, sp, #48	@ 0x30
 8010344:	f1ab 0b18 	sub.w	fp, fp, #24
 8010348:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d0f6      	beq.n	801033e <__kernel_rem_pio2+0x296>
 8010350:	4658      	mov	r0, fp
 8010352:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80103b0 <__kernel_rem_pio2+0x308>
 8010356:	f000 f9ff 	bl	8010758 <scalbn>
 801035a:	f108 0301 	add.w	r3, r8, #1
 801035e:	00da      	lsls	r2, r3, #3
 8010360:	9205      	str	r2, [sp, #20]
 8010362:	ec55 4b10 	vmov	r4, r5, d0
 8010366:	aa70      	add	r2, sp, #448	@ 0x1c0
 8010368:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80103c4 <__kernel_rem_pio2+0x31c>
 801036c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8010370:	4646      	mov	r6, r8
 8010372:	f04f 0a00 	mov.w	sl, #0
 8010376:	2e00      	cmp	r6, #0
 8010378:	f280 80cf 	bge.w	801051a <__kernel_rem_pio2+0x472>
 801037c:	4644      	mov	r4, r8
 801037e:	2c00      	cmp	r4, #0
 8010380:	f2c0 80fd 	blt.w	801057e <__kernel_rem_pio2+0x4d6>
 8010384:	4b12      	ldr	r3, [pc, #72]	@ (80103d0 <__kernel_rem_pio2+0x328>)
 8010386:	461f      	mov	r7, r3
 8010388:	ab70      	add	r3, sp, #448	@ 0x1c0
 801038a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801038e:	9306      	str	r3, [sp, #24]
 8010390:	f04f 0a00 	mov.w	sl, #0
 8010394:	f04f 0b00 	mov.w	fp, #0
 8010398:	2600      	movs	r6, #0
 801039a:	eba8 0504 	sub.w	r5, r8, r4
 801039e:	e0e2      	b.n	8010566 <__kernel_rem_pio2+0x4be>
 80103a0:	f04f 0902 	mov.w	r9, #2
 80103a4:	e754      	b.n	8010250 <__kernel_rem_pio2+0x1a8>
 80103a6:	bf00      	nop
	...
 80103b4:	3ff00000 	.word	0x3ff00000
 80103b8:	08010e80 	.word	0x08010e80
 80103bc:	40200000 	.word	0x40200000
 80103c0:	3ff00000 	.word	0x3ff00000
 80103c4:	3e700000 	.word	0x3e700000
 80103c8:	41700000 	.word	0x41700000
 80103cc:	3fe00000 	.word	0x3fe00000
 80103d0:	08010e40 	.word	0x08010e40
 80103d4:	f854 3b04 	ldr.w	r3, [r4], #4
 80103d8:	b945      	cbnz	r5, 80103ec <__kernel_rem_pio2+0x344>
 80103da:	b123      	cbz	r3, 80103e6 <__kernel_rem_pio2+0x33e>
 80103dc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80103e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80103e4:	2301      	movs	r3, #1
 80103e6:	3201      	adds	r2, #1
 80103e8:	461d      	mov	r5, r3
 80103ea:	e738      	b.n	801025e <__kernel_rem_pio2+0x1b6>
 80103ec:	1acb      	subs	r3, r1, r3
 80103ee:	e7f7      	b.n	80103e0 <__kernel_rem_pio2+0x338>
 80103f0:	f108 32ff 	add.w	r2, r8, #4294967295
 80103f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80103f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103fa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80103fe:	a90c      	add	r1, sp, #48	@ 0x30
 8010400:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010404:	e739      	b.n	801027a <__kernel_rem_pio2+0x1d2>
 8010406:	f108 32ff 	add.w	r2, r8, #4294967295
 801040a:	ab0c      	add	r3, sp, #48	@ 0x30
 801040c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010410:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010414:	e7f3      	b.n	80103fe <__kernel_rem_pio2+0x356>
 8010416:	a90c      	add	r1, sp, #48	@ 0x30
 8010418:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801041c:	3b01      	subs	r3, #1
 801041e:	430a      	orrs	r2, r1
 8010420:	e787      	b.n	8010332 <__kernel_rem_pio2+0x28a>
 8010422:	3401      	adds	r4, #1
 8010424:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010428:	2a00      	cmp	r2, #0
 801042a:	d0fa      	beq.n	8010422 <__kernel_rem_pio2+0x37a>
 801042c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801042e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010432:	eb0d 0503 	add.w	r5, sp, r3
 8010436:	9b06      	ldr	r3, [sp, #24]
 8010438:	aa20      	add	r2, sp, #128	@ 0x80
 801043a:	4443      	add	r3, r8
 801043c:	f108 0701 	add.w	r7, r8, #1
 8010440:	3d98      	subs	r5, #152	@ 0x98
 8010442:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8010446:	4444      	add	r4, r8
 8010448:	42bc      	cmp	r4, r7
 801044a:	da04      	bge.n	8010456 <__kernel_rem_pio2+0x3ae>
 801044c:	46a0      	mov	r8, r4
 801044e:	e6a2      	b.n	8010196 <__kernel_rem_pio2+0xee>
 8010450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010452:	2401      	movs	r4, #1
 8010454:	e7e6      	b.n	8010424 <__kernel_rem_pio2+0x37c>
 8010456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010458:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801045c:	f7f0 f88a 	bl	8000574 <__aeabi_i2d>
 8010460:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8010728 <__kernel_rem_pio2+0x680>
 8010464:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010468:	ed8d 7b02 	vstr	d7, [sp, #8]
 801046c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010470:	46b2      	mov	sl, r6
 8010472:	f04f 0800 	mov.w	r8, #0
 8010476:	9b05      	ldr	r3, [sp, #20]
 8010478:	4598      	cmp	r8, r3
 801047a:	dd05      	ble.n	8010488 <__kernel_rem_pio2+0x3e0>
 801047c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010480:	3701      	adds	r7, #1
 8010482:	eca5 7b02 	vstmia	r5!, {d7}
 8010486:	e7df      	b.n	8010448 <__kernel_rem_pio2+0x3a0>
 8010488:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801048c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010490:	f7f0 f8da 	bl	8000648 <__aeabi_dmul>
 8010494:	4602      	mov	r2, r0
 8010496:	460b      	mov	r3, r1
 8010498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801049c:	f7ef ff1e 	bl	80002dc <__adddf3>
 80104a0:	f108 0801 	add.w	r8, r8, #1
 80104a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104a8:	e7e5      	b.n	8010476 <__kernel_rem_pio2+0x3ce>
 80104aa:	f1cb 0000 	rsb	r0, fp, #0
 80104ae:	ec47 6b10 	vmov	d0, r6, r7
 80104b2:	f000 f951 	bl	8010758 <scalbn>
 80104b6:	ec55 4b10 	vmov	r4, r5, d0
 80104ba:	4b9d      	ldr	r3, [pc, #628]	@ (8010730 <__kernel_rem_pio2+0x688>)
 80104bc:	2200      	movs	r2, #0
 80104be:	4620      	mov	r0, r4
 80104c0:	4629      	mov	r1, r5
 80104c2:	f7f0 fb47 	bl	8000b54 <__aeabi_dcmpge>
 80104c6:	b300      	cbz	r0, 801050a <__kernel_rem_pio2+0x462>
 80104c8:	4b9a      	ldr	r3, [pc, #616]	@ (8010734 <__kernel_rem_pio2+0x68c>)
 80104ca:	2200      	movs	r2, #0
 80104cc:	4620      	mov	r0, r4
 80104ce:	4629      	mov	r1, r5
 80104d0:	f7f0 f8ba 	bl	8000648 <__aeabi_dmul>
 80104d4:	f7f0 fb68 	bl	8000ba8 <__aeabi_d2iz>
 80104d8:	4606      	mov	r6, r0
 80104da:	f7f0 f84b 	bl	8000574 <__aeabi_i2d>
 80104de:	4b94      	ldr	r3, [pc, #592]	@ (8010730 <__kernel_rem_pio2+0x688>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	f7f0 f8b1 	bl	8000648 <__aeabi_dmul>
 80104e6:	460b      	mov	r3, r1
 80104e8:	4602      	mov	r2, r0
 80104ea:	4629      	mov	r1, r5
 80104ec:	4620      	mov	r0, r4
 80104ee:	f7ef fef3 	bl	80002d8 <__aeabi_dsub>
 80104f2:	f7f0 fb59 	bl	8000ba8 <__aeabi_d2iz>
 80104f6:	ab0c      	add	r3, sp, #48	@ 0x30
 80104f8:	f10b 0b18 	add.w	fp, fp, #24
 80104fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010500:	f108 0801 	add.w	r8, r8, #1
 8010504:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8010508:	e722      	b.n	8010350 <__kernel_rem_pio2+0x2a8>
 801050a:	4620      	mov	r0, r4
 801050c:	4629      	mov	r1, r5
 801050e:	f7f0 fb4b 	bl	8000ba8 <__aeabi_d2iz>
 8010512:	ab0c      	add	r3, sp, #48	@ 0x30
 8010514:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010518:	e71a      	b.n	8010350 <__kernel_rem_pio2+0x2a8>
 801051a:	ab0c      	add	r3, sp, #48	@ 0x30
 801051c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010520:	f7f0 f828 	bl	8000574 <__aeabi_i2d>
 8010524:	4622      	mov	r2, r4
 8010526:	462b      	mov	r3, r5
 8010528:	f7f0 f88e 	bl	8000648 <__aeabi_dmul>
 801052c:	4652      	mov	r2, sl
 801052e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8010532:	465b      	mov	r3, fp
 8010534:	4620      	mov	r0, r4
 8010536:	4629      	mov	r1, r5
 8010538:	f7f0 f886 	bl	8000648 <__aeabi_dmul>
 801053c:	3e01      	subs	r6, #1
 801053e:	4604      	mov	r4, r0
 8010540:	460d      	mov	r5, r1
 8010542:	e718      	b.n	8010376 <__kernel_rem_pio2+0x2ce>
 8010544:	9906      	ldr	r1, [sp, #24]
 8010546:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801054a:	9106      	str	r1, [sp, #24]
 801054c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8010550:	f7f0 f87a 	bl	8000648 <__aeabi_dmul>
 8010554:	4602      	mov	r2, r0
 8010556:	460b      	mov	r3, r1
 8010558:	4650      	mov	r0, sl
 801055a:	4659      	mov	r1, fp
 801055c:	f7ef febe 	bl	80002dc <__adddf3>
 8010560:	3601      	adds	r6, #1
 8010562:	4682      	mov	sl, r0
 8010564:	468b      	mov	fp, r1
 8010566:	9b00      	ldr	r3, [sp, #0]
 8010568:	429e      	cmp	r6, r3
 801056a:	dc01      	bgt.n	8010570 <__kernel_rem_pio2+0x4c8>
 801056c:	42b5      	cmp	r5, r6
 801056e:	dae9      	bge.n	8010544 <__kernel_rem_pio2+0x49c>
 8010570:	ab48      	add	r3, sp, #288	@ 0x120
 8010572:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010576:	e9c5 ab00 	strd	sl, fp, [r5]
 801057a:	3c01      	subs	r4, #1
 801057c:	e6ff      	b.n	801037e <__kernel_rem_pio2+0x2d6>
 801057e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010580:	2b02      	cmp	r3, #2
 8010582:	dc0b      	bgt.n	801059c <__kernel_rem_pio2+0x4f4>
 8010584:	2b00      	cmp	r3, #0
 8010586:	dc39      	bgt.n	80105fc <__kernel_rem_pio2+0x554>
 8010588:	d05d      	beq.n	8010646 <__kernel_rem_pio2+0x59e>
 801058a:	9b02      	ldr	r3, [sp, #8]
 801058c:	f003 0007 	and.w	r0, r3, #7
 8010590:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8010594:	ecbd 8b02 	vpop	{d8}
 8010598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801059c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801059e:	2b03      	cmp	r3, #3
 80105a0:	d1f3      	bne.n	801058a <__kernel_rem_pio2+0x4e2>
 80105a2:	9b05      	ldr	r3, [sp, #20]
 80105a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80105a8:	eb0d 0403 	add.w	r4, sp, r3
 80105ac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80105b0:	4625      	mov	r5, r4
 80105b2:	46c2      	mov	sl, r8
 80105b4:	f1ba 0f00 	cmp.w	sl, #0
 80105b8:	f1a5 0508 	sub.w	r5, r5, #8
 80105bc:	dc6b      	bgt.n	8010696 <__kernel_rem_pio2+0x5ee>
 80105be:	4645      	mov	r5, r8
 80105c0:	2d01      	cmp	r5, #1
 80105c2:	f1a4 0408 	sub.w	r4, r4, #8
 80105c6:	f300 8087 	bgt.w	80106d8 <__kernel_rem_pio2+0x630>
 80105ca:	9c05      	ldr	r4, [sp, #20]
 80105cc:	ab48      	add	r3, sp, #288	@ 0x120
 80105ce:	441c      	add	r4, r3
 80105d0:	2000      	movs	r0, #0
 80105d2:	2100      	movs	r1, #0
 80105d4:	f1b8 0f01 	cmp.w	r8, #1
 80105d8:	f300 809c 	bgt.w	8010714 <__kernel_rem_pio2+0x66c>
 80105dc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80105e0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80105e4:	f1b9 0f00 	cmp.w	r9, #0
 80105e8:	f040 80a6 	bne.w	8010738 <__kernel_rem_pio2+0x690>
 80105ec:	9b04      	ldr	r3, [sp, #16]
 80105ee:	e9c3 7800 	strd	r7, r8, [r3]
 80105f2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80105f6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80105fa:	e7c6      	b.n	801058a <__kernel_rem_pio2+0x4e2>
 80105fc:	9d05      	ldr	r5, [sp, #20]
 80105fe:	ab48      	add	r3, sp, #288	@ 0x120
 8010600:	441d      	add	r5, r3
 8010602:	4644      	mov	r4, r8
 8010604:	2000      	movs	r0, #0
 8010606:	2100      	movs	r1, #0
 8010608:	2c00      	cmp	r4, #0
 801060a:	da35      	bge.n	8010678 <__kernel_rem_pio2+0x5d0>
 801060c:	f1b9 0f00 	cmp.w	r9, #0
 8010610:	d038      	beq.n	8010684 <__kernel_rem_pio2+0x5dc>
 8010612:	4602      	mov	r2, r0
 8010614:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010618:	9c04      	ldr	r4, [sp, #16]
 801061a:	e9c4 2300 	strd	r2, r3, [r4]
 801061e:	4602      	mov	r2, r0
 8010620:	460b      	mov	r3, r1
 8010622:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8010626:	f7ef fe57 	bl	80002d8 <__aeabi_dsub>
 801062a:	ad4a      	add	r5, sp, #296	@ 0x128
 801062c:	2401      	movs	r4, #1
 801062e:	45a0      	cmp	r8, r4
 8010630:	da2b      	bge.n	801068a <__kernel_rem_pio2+0x5e2>
 8010632:	f1b9 0f00 	cmp.w	r9, #0
 8010636:	d002      	beq.n	801063e <__kernel_rem_pio2+0x596>
 8010638:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801063c:	4619      	mov	r1, r3
 801063e:	9b04      	ldr	r3, [sp, #16]
 8010640:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010644:	e7a1      	b.n	801058a <__kernel_rem_pio2+0x4e2>
 8010646:	9c05      	ldr	r4, [sp, #20]
 8010648:	ab48      	add	r3, sp, #288	@ 0x120
 801064a:	441c      	add	r4, r3
 801064c:	2000      	movs	r0, #0
 801064e:	2100      	movs	r1, #0
 8010650:	f1b8 0f00 	cmp.w	r8, #0
 8010654:	da09      	bge.n	801066a <__kernel_rem_pio2+0x5c2>
 8010656:	f1b9 0f00 	cmp.w	r9, #0
 801065a:	d002      	beq.n	8010662 <__kernel_rem_pio2+0x5ba>
 801065c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010660:	4619      	mov	r1, r3
 8010662:	9b04      	ldr	r3, [sp, #16]
 8010664:	e9c3 0100 	strd	r0, r1, [r3]
 8010668:	e78f      	b.n	801058a <__kernel_rem_pio2+0x4e2>
 801066a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801066e:	f7ef fe35 	bl	80002dc <__adddf3>
 8010672:	f108 38ff 	add.w	r8, r8, #4294967295
 8010676:	e7eb      	b.n	8010650 <__kernel_rem_pio2+0x5a8>
 8010678:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801067c:	f7ef fe2e 	bl	80002dc <__adddf3>
 8010680:	3c01      	subs	r4, #1
 8010682:	e7c1      	b.n	8010608 <__kernel_rem_pio2+0x560>
 8010684:	4602      	mov	r2, r0
 8010686:	460b      	mov	r3, r1
 8010688:	e7c6      	b.n	8010618 <__kernel_rem_pio2+0x570>
 801068a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801068e:	f7ef fe25 	bl	80002dc <__adddf3>
 8010692:	3401      	adds	r4, #1
 8010694:	e7cb      	b.n	801062e <__kernel_rem_pio2+0x586>
 8010696:	ed95 7b00 	vldr	d7, [r5]
 801069a:	ed8d 7b00 	vstr	d7, [sp]
 801069e:	ed95 7b02 	vldr	d7, [r5, #8]
 80106a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106a6:	ec53 2b17 	vmov	r2, r3, d7
 80106aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80106ae:	f7ef fe15 	bl	80002dc <__adddf3>
 80106b2:	4602      	mov	r2, r0
 80106b4:	460b      	mov	r3, r1
 80106b6:	4606      	mov	r6, r0
 80106b8:	460f      	mov	r7, r1
 80106ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106be:	f7ef fe0b 	bl	80002d8 <__aeabi_dsub>
 80106c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80106c6:	f7ef fe09 	bl	80002dc <__adddf3>
 80106ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80106ce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80106d2:	e9c5 6700 	strd	r6, r7, [r5]
 80106d6:	e76d      	b.n	80105b4 <__kernel_rem_pio2+0x50c>
 80106d8:	ed94 7b00 	vldr	d7, [r4]
 80106dc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80106e0:	ec51 0b17 	vmov	r0, r1, d7
 80106e4:	4652      	mov	r2, sl
 80106e6:	465b      	mov	r3, fp
 80106e8:	ed8d 7b00 	vstr	d7, [sp]
 80106ec:	f7ef fdf6 	bl	80002dc <__adddf3>
 80106f0:	4602      	mov	r2, r0
 80106f2:	460b      	mov	r3, r1
 80106f4:	4606      	mov	r6, r0
 80106f6:	460f      	mov	r7, r1
 80106f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106fc:	f7ef fdec 	bl	80002d8 <__aeabi_dsub>
 8010700:	4652      	mov	r2, sl
 8010702:	465b      	mov	r3, fp
 8010704:	f7ef fdea 	bl	80002dc <__adddf3>
 8010708:	3d01      	subs	r5, #1
 801070a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801070e:	e9c4 6700 	strd	r6, r7, [r4]
 8010712:	e755      	b.n	80105c0 <__kernel_rem_pio2+0x518>
 8010714:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010718:	f7ef fde0 	bl	80002dc <__adddf3>
 801071c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010720:	e758      	b.n	80105d4 <__kernel_rem_pio2+0x52c>
 8010722:	bf00      	nop
 8010724:	f3af 8000 	nop.w
	...
 8010730:	41700000 	.word	0x41700000
 8010734:	3e700000 	.word	0x3e700000
 8010738:	9b04      	ldr	r3, [sp, #16]
 801073a:	9a04      	ldr	r2, [sp, #16]
 801073c:	601f      	str	r7, [r3, #0]
 801073e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8010742:	605c      	str	r4, [r3, #4]
 8010744:	609d      	str	r5, [r3, #8]
 8010746:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801074a:	60d3      	str	r3, [r2, #12]
 801074c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010750:	6110      	str	r0, [r2, #16]
 8010752:	6153      	str	r3, [r2, #20]
 8010754:	e719      	b.n	801058a <__kernel_rem_pio2+0x4e2>
 8010756:	bf00      	nop

08010758 <scalbn>:
 8010758:	b570      	push	{r4, r5, r6, lr}
 801075a:	ec55 4b10 	vmov	r4, r5, d0
 801075e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010762:	4606      	mov	r6, r0
 8010764:	462b      	mov	r3, r5
 8010766:	b991      	cbnz	r1, 801078e <scalbn+0x36>
 8010768:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801076c:	4323      	orrs	r3, r4
 801076e:	d03d      	beq.n	80107ec <scalbn+0x94>
 8010770:	4b35      	ldr	r3, [pc, #212]	@ (8010848 <scalbn+0xf0>)
 8010772:	4620      	mov	r0, r4
 8010774:	4629      	mov	r1, r5
 8010776:	2200      	movs	r2, #0
 8010778:	f7ef ff66 	bl	8000648 <__aeabi_dmul>
 801077c:	4b33      	ldr	r3, [pc, #204]	@ (801084c <scalbn+0xf4>)
 801077e:	429e      	cmp	r6, r3
 8010780:	4604      	mov	r4, r0
 8010782:	460d      	mov	r5, r1
 8010784:	da0f      	bge.n	80107a6 <scalbn+0x4e>
 8010786:	a328      	add	r3, pc, #160	@ (adr r3, 8010828 <scalbn+0xd0>)
 8010788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078c:	e01e      	b.n	80107cc <scalbn+0x74>
 801078e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010792:	4291      	cmp	r1, r2
 8010794:	d10b      	bne.n	80107ae <scalbn+0x56>
 8010796:	4622      	mov	r2, r4
 8010798:	4620      	mov	r0, r4
 801079a:	4629      	mov	r1, r5
 801079c:	f7ef fd9e 	bl	80002dc <__adddf3>
 80107a0:	4604      	mov	r4, r0
 80107a2:	460d      	mov	r5, r1
 80107a4:	e022      	b.n	80107ec <scalbn+0x94>
 80107a6:	460b      	mov	r3, r1
 80107a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80107ac:	3936      	subs	r1, #54	@ 0x36
 80107ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80107b2:	4296      	cmp	r6, r2
 80107b4:	dd0d      	ble.n	80107d2 <scalbn+0x7a>
 80107b6:	2d00      	cmp	r5, #0
 80107b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8010830 <scalbn+0xd8>)
 80107ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107be:	da02      	bge.n	80107c6 <scalbn+0x6e>
 80107c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8010838 <scalbn+0xe0>)
 80107c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8010830 <scalbn+0xd8>)
 80107c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107cc:	f7ef ff3c 	bl	8000648 <__aeabi_dmul>
 80107d0:	e7e6      	b.n	80107a0 <scalbn+0x48>
 80107d2:	1872      	adds	r2, r6, r1
 80107d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80107d8:	428a      	cmp	r2, r1
 80107da:	dcec      	bgt.n	80107b6 <scalbn+0x5e>
 80107dc:	2a00      	cmp	r2, #0
 80107de:	dd08      	ble.n	80107f2 <scalbn+0x9a>
 80107e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80107e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80107e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80107ec:	ec45 4b10 	vmov	d0, r4, r5
 80107f0:	bd70      	pop	{r4, r5, r6, pc}
 80107f2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80107f6:	da08      	bge.n	801080a <scalbn+0xb2>
 80107f8:	2d00      	cmp	r5, #0
 80107fa:	a10b      	add	r1, pc, #44	@ (adr r1, 8010828 <scalbn+0xd0>)
 80107fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010800:	dac1      	bge.n	8010786 <scalbn+0x2e>
 8010802:	a10f      	add	r1, pc, #60	@ (adr r1, 8010840 <scalbn+0xe8>)
 8010804:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010808:	e7bd      	b.n	8010786 <scalbn+0x2e>
 801080a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801080e:	3236      	adds	r2, #54	@ 0x36
 8010810:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010814:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010818:	4620      	mov	r0, r4
 801081a:	4b0d      	ldr	r3, [pc, #52]	@ (8010850 <scalbn+0xf8>)
 801081c:	4629      	mov	r1, r5
 801081e:	2200      	movs	r2, #0
 8010820:	e7d4      	b.n	80107cc <scalbn+0x74>
 8010822:	bf00      	nop
 8010824:	f3af 8000 	nop.w
 8010828:	c2f8f359 	.word	0xc2f8f359
 801082c:	01a56e1f 	.word	0x01a56e1f
 8010830:	8800759c 	.word	0x8800759c
 8010834:	7e37e43c 	.word	0x7e37e43c
 8010838:	8800759c 	.word	0x8800759c
 801083c:	fe37e43c 	.word	0xfe37e43c
 8010840:	c2f8f359 	.word	0xc2f8f359
 8010844:	81a56e1f 	.word	0x81a56e1f
 8010848:	43500000 	.word	0x43500000
 801084c:	ffff3cb0 	.word	0xffff3cb0
 8010850:	3c900000 	.word	0x3c900000

08010854 <_init>:
 8010854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010856:	bf00      	nop
 8010858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801085a:	bc08      	pop	{r3}
 801085c:	469e      	mov	lr, r3
 801085e:	4770      	bx	lr

08010860 <_fini>:
 8010860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010862:	bf00      	nop
 8010864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010866:	bc08      	pop	{r3}
 8010868:	469e      	mov	lr, r3
 801086a:	4770      	bx	lr
