
Carro Seguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f58c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800f770  0800f770  00010770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fba0  0800fba0  00011208  2**0
                  CONTENTS
  4 .ARM          00000008  0800fba0  0800fba0  00010ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fba8  0800fba8  00011208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fba8  0800fba8  00010ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbac  0800fbac  00010bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800fbb0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bb4  20000208  0800fdb8  00011208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000dbc  0800fdb8  00011dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d5a8  00000000  00000000  00011238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e0  00000000  00000000  0002e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  000328c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001243  00000000  00000000  00034058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a2ea  00000000  00000000  0003529b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020137  00000000  00000000  0005f585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001025d7  00000000  00000000  0007f6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181c93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007560  00000000  00000000  00181cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00189238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f754 	.word	0x0800f754

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0800f754 	.word	0x0800f754

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_frsub>:
 8000cd8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cdc:	e002      	b.n	8000ce4 <__addsf3>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fsub>:
 8000ce0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ce4 <__addsf3>:
 8000ce4:	0042      	lsls	r2, r0, #1
 8000ce6:	bf1f      	itttt	ne
 8000ce8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cec:	ea92 0f03 	teqne	r2, r3
 8000cf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf8:	d06a      	beq.n	8000dd0 <__addsf3+0xec>
 8000cfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d02:	bfc1      	itttt	gt
 8000d04:	18d2      	addgt	r2, r2, r3
 8000d06:	4041      	eorgt	r1, r0
 8000d08:	4048      	eorgt	r0, r1
 8000d0a:	4041      	eorgt	r1, r0
 8000d0c:	bfb8      	it	lt
 8000d0e:	425b      	neglt	r3, r3
 8000d10:	2b19      	cmp	r3, #25
 8000d12:	bf88      	it	hi
 8000d14:	4770      	bxhi	lr
 8000d16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4240      	negne	r0, r0
 8000d26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d32:	bf18      	it	ne
 8000d34:	4249      	negne	r1, r1
 8000d36:	ea92 0f03 	teq	r2, r3
 8000d3a:	d03f      	beq.n	8000dbc <__addsf3+0xd8>
 8000d3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d40:	fa41 fc03 	asr.w	ip, r1, r3
 8000d44:	eb10 000c 	adds.w	r0, r0, ip
 8000d48:	f1c3 0320 	rsb	r3, r3, #32
 8000d4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__addsf3+0x78>
 8000d56:	4249      	negs	r1, r1
 8000d58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d60:	d313      	bcc.n	8000d8a <__addsf3+0xa6>
 8000d62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d66:	d306      	bcc.n	8000d76 <__addsf3+0x92>
 8000d68:	0840      	lsrs	r0, r0, #1
 8000d6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d6e:	f102 0201 	add.w	r2, r2, #1
 8000d72:	2afe      	cmp	r2, #254	@ 0xfe
 8000d74:	d251      	bcs.n	8000e1a <__addsf3+0x136>
 8000d76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7e:	bf08      	it	eq
 8000d80:	f020 0001 	biceq.w	r0, r0, #1
 8000d84:	ea40 0003 	orr.w	r0, r0, r3
 8000d88:	4770      	bx	lr
 8000d8a:	0049      	lsls	r1, r1, #1
 8000d8c:	eb40 0000 	adc.w	r0, r0, r0
 8000d90:	3a01      	subs	r2, #1
 8000d92:	bf28      	it	cs
 8000d94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d98:	d2ed      	bcs.n	8000d76 <__addsf3+0x92>
 8000d9a:	fab0 fc80 	clz	ip, r0
 8000d9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000da2:	ebb2 020c 	subs.w	r2, r2, ip
 8000da6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000daa:	bfaa      	itet	ge
 8000dac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000db0:	4252      	neglt	r2, r2
 8000db2:	4318      	orrge	r0, r3
 8000db4:	bfbc      	itt	lt
 8000db6:	40d0      	lsrlt	r0, r2
 8000db8:	4318      	orrlt	r0, r3
 8000dba:	4770      	bx	lr
 8000dbc:	f092 0f00 	teq	r2, #0
 8000dc0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dc4:	bf06      	itte	eq
 8000dc6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dca:	3201      	addeq	r2, #1
 8000dcc:	3b01      	subne	r3, #1
 8000dce:	e7b5      	b.n	8000d3c <__addsf3+0x58>
 8000dd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	bf18      	it	ne
 8000dda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dde:	d021      	beq.n	8000e24 <__addsf3+0x140>
 8000de0:	ea92 0f03 	teq	r2, r3
 8000de4:	d004      	beq.n	8000df0 <__addsf3+0x10c>
 8000de6:	f092 0f00 	teq	r2, #0
 8000dea:	bf08      	it	eq
 8000dec:	4608      	moveq	r0, r1
 8000dee:	4770      	bx	lr
 8000df0:	ea90 0f01 	teq	r0, r1
 8000df4:	bf1c      	itt	ne
 8000df6:	2000      	movne	r0, #0
 8000df8:	4770      	bxne	lr
 8000dfa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dfe:	d104      	bne.n	8000e0a <__addsf3+0x126>
 8000e00:	0040      	lsls	r0, r0, #1
 8000e02:	bf28      	it	cs
 8000e04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e08:	4770      	bx	lr
 8000e0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e0e:	bf3c      	itt	cc
 8000e10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bxcc	lr
 8000e16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e22:	4770      	bx	lr
 8000e24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e28:	bf16      	itet	ne
 8000e2a:	4608      	movne	r0, r1
 8000e2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e30:	4601      	movne	r1, r0
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	bf06      	itte	eq
 8000e36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e3a:	ea90 0f01 	teqeq	r0, r1
 8000e3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_ui2f>:
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e004      	b.n	8000e54 <__aeabi_i2f+0x8>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_i2f>:
 8000e4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e50:	bf48      	it	mi
 8000e52:	4240      	negmi	r0, r0
 8000e54:	ea5f 0c00 	movs.w	ip, r0
 8000e58:	bf08      	it	eq
 8000e5a:	4770      	bxeq	lr
 8000e5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e60:	4601      	mov	r1, r0
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	e01c      	b.n	8000ea2 <__aeabi_l2f+0x2a>

08000e68 <__aeabi_ul2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	e00a      	b.n	8000e8c <__aeabi_l2f+0x14>
 8000e76:	bf00      	nop

08000e78 <__aeabi_l2f>:
 8000e78:	ea50 0201 	orrs.w	r2, r0, r1
 8000e7c:	bf08      	it	eq
 8000e7e:	4770      	bxeq	lr
 8000e80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e84:	d502      	bpl.n	8000e8c <__aeabi_l2f+0x14>
 8000e86:	4240      	negs	r0, r0
 8000e88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e8c:	ea5f 0c01 	movs.w	ip, r1
 8000e90:	bf02      	ittt	eq
 8000e92:	4684      	moveq	ip, r0
 8000e94:	4601      	moveq	r1, r0
 8000e96:	2000      	moveq	r0, #0
 8000e98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e9c:	bf08      	it	eq
 8000e9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ea2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ea6:	fabc f28c 	clz	r2, ip
 8000eaa:	3a08      	subs	r2, #8
 8000eac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000eb0:	db10      	blt.n	8000ed4 <__aeabi_l2f+0x5c>
 8000eb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ec4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f102 0220 	add.w	r2, r2, #32
 8000ed8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000edc:	f1c2 0220 	rsb	r2, r2, #32
 8000ee0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ee4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee8:	eb43 0002 	adc.w	r0, r3, r2
 8000eec:	bf08      	it	eq
 8000eee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ef2:	4770      	bx	lr

08000ef4 <__aeabi_uldivmod>:
 8000ef4:	b953      	cbnz	r3, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef6:	b94a      	cbnz	r2, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	bf08      	it	eq
 8000efc:	2800      	cmpeq	r0, #0
 8000efe:	bf1c      	itt	ne
 8000f00:	f04f 31ff 	movne.w	r1, #4294967295
 8000f04:	f04f 30ff 	movne.w	r0, #4294967295
 8000f08:	f000 b9a0 	b.w	800124c <__aeabi_idiv0>
 8000f0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f14:	f000 f83c 	bl	8000f90 <__udivmoddi4>
 8000f18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_d2lz>:
 8000f24:	b538      	push	{r3, r4, r5, lr}
 8000f26:	2200      	movs	r2, #0
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	460d      	mov	r5, r1
 8000f2e:	f7ff fdfd 	bl	8000b2c <__aeabi_dcmplt>
 8000f32:	b928      	cbnz	r0, 8000f40 <__aeabi_d2lz+0x1c>
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f3c:	f000 b80a 	b.w	8000f54 <__aeabi_d2ulz>
 8000f40:	4620      	mov	r0, r4
 8000f42:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f46:	f000 f805 	bl	8000f54 <__aeabi_d2ulz>
 8000f4a:	4240      	negs	r0, r0
 8000f4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f50:	bd38      	pop	{r3, r4, r5, pc}
 8000f52:	bf00      	nop

08000f54 <__aeabi_d2ulz>:
 8000f54:	b5d0      	push	{r4, r6, r7, lr}
 8000f56:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <__aeabi_d2ulz+0x34>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4606      	mov	r6, r0
 8000f5c:	460f      	mov	r7, r1
 8000f5e:	f7ff fb73 	bl	8000648 <__aeabi_dmul>
 8000f62:	f7ff fe49 	bl	8000bf8 <__aeabi_d2uiz>
 8000f66:	4604      	mov	r4, r0
 8000f68:	f7ff faf4 	bl	8000554 <__aeabi_ui2d>
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <__aeabi_d2ulz+0x38>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f7ff fb6a 	bl	8000648 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4630      	mov	r0, r6
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	f7ff f9ac 	bl	80002d8 <__aeabi_dsub>
 8000f80:	f7ff fe3a 	bl	8000bf8 <__aeabi_d2uiz>
 8000f84:	4621      	mov	r1, r4
 8000f86:	bdd0      	pop	{r4, r6, r7, pc}
 8000f88:	3df00000 	.word	0x3df00000
 8000f8c:	41f00000 	.word	0x41f00000

08000f90 <__udivmoddi4>:
 8000f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f94:	9d08      	ldr	r5, [sp, #32]
 8000f96:	460c      	mov	r4, r1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d14e      	bne.n	800103a <__udivmoddi4+0xaa>
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	458c      	cmp	ip, r1
 8000fa0:	4686      	mov	lr, r0
 8000fa2:	fab2 f282 	clz	r2, r2
 8000fa6:	d962      	bls.n	800106e <__udivmoddi4+0xde>
 8000fa8:	b14a      	cbz	r2, 8000fbe <__udivmoddi4+0x2e>
 8000faa:	f1c2 0320 	rsb	r3, r2, #32
 8000fae:	4091      	lsls	r1, r2
 8000fb0:	fa20 f303 	lsr.w	r3, r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	4319      	orrs	r1, r3
 8000fba:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc2:	fa1f f68c 	uxth.w	r6, ip
 8000fc6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	d90a      	bls.n	8000ff4 <__udivmoddi4+0x64>
 8000fde:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fe6:	f080 8112 	bcs.w	800120e <__udivmoddi4+0x27e>
 8000fea:	4299      	cmp	r1, r3
 8000fec:	f240 810f 	bls.w	800120e <__udivmoddi4+0x27e>
 8000ff0:	3c02      	subs	r4, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1a59      	subs	r1, r3, r1
 8000ff6:	fa1f f38e 	uxth.w	r3, lr
 8000ffa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ffe:	fb07 1110 	mls	r1, r7, r0, r1
 8001002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001006:	fb00 f606 	mul.w	r6, r0, r6
 800100a:	429e      	cmp	r6, r3
 800100c:	d90a      	bls.n	8001024 <__udivmoddi4+0x94>
 800100e:	eb1c 0303 	adds.w	r3, ip, r3
 8001012:	f100 31ff 	add.w	r1, r0, #4294967295
 8001016:	f080 80fc 	bcs.w	8001212 <__udivmoddi4+0x282>
 800101a:	429e      	cmp	r6, r3
 800101c:	f240 80f9 	bls.w	8001212 <__udivmoddi4+0x282>
 8001020:	4463      	add	r3, ip
 8001022:	3802      	subs	r0, #2
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800102a:	2100      	movs	r1, #0
 800102c:	b11d      	cbz	r5, 8001036 <__udivmoddi4+0xa6>
 800102e:	40d3      	lsrs	r3, r2
 8001030:	2200      	movs	r2, #0
 8001032:	e9c5 3200 	strd	r3, r2, [r5]
 8001036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103a:	428b      	cmp	r3, r1
 800103c:	d905      	bls.n	800104a <__udivmoddi4+0xba>
 800103e:	b10d      	cbz	r5, 8001044 <__udivmoddi4+0xb4>
 8001040:	e9c5 0100 	strd	r0, r1, [r5]
 8001044:	2100      	movs	r1, #0
 8001046:	4608      	mov	r0, r1
 8001048:	e7f5      	b.n	8001036 <__udivmoddi4+0xa6>
 800104a:	fab3 f183 	clz	r1, r3
 800104e:	2900      	cmp	r1, #0
 8001050:	d146      	bne.n	80010e0 <__udivmoddi4+0x150>
 8001052:	42a3      	cmp	r3, r4
 8001054:	d302      	bcc.n	800105c <__udivmoddi4+0xcc>
 8001056:	4290      	cmp	r0, r2
 8001058:	f0c0 80f0 	bcc.w	800123c <__udivmoddi4+0x2ac>
 800105c:	1a86      	subs	r6, r0, r2
 800105e:	eb64 0303 	sbc.w	r3, r4, r3
 8001062:	2001      	movs	r0, #1
 8001064:	2d00      	cmp	r5, #0
 8001066:	d0e6      	beq.n	8001036 <__udivmoddi4+0xa6>
 8001068:	e9c5 6300 	strd	r6, r3, [r5]
 800106c:	e7e3      	b.n	8001036 <__udivmoddi4+0xa6>
 800106e:	2a00      	cmp	r2, #0
 8001070:	f040 8090 	bne.w	8001194 <__udivmoddi4+0x204>
 8001074:	eba1 040c 	sub.w	r4, r1, ip
 8001078:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800107c:	fa1f f78c 	uxth.w	r7, ip
 8001080:	2101      	movs	r1, #1
 8001082:	fbb4 f6f8 	udiv	r6, r4, r8
 8001086:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800108a:	fb08 4416 	mls	r4, r8, r6, r4
 800108e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001092:	fb07 f006 	mul.w	r0, r7, r6
 8001096:	4298      	cmp	r0, r3
 8001098:	d908      	bls.n	80010ac <__udivmoddi4+0x11c>
 800109a:	eb1c 0303 	adds.w	r3, ip, r3
 800109e:	f106 34ff 	add.w	r4, r6, #4294967295
 80010a2:	d202      	bcs.n	80010aa <__udivmoddi4+0x11a>
 80010a4:	4298      	cmp	r0, r3
 80010a6:	f200 80cd 	bhi.w	8001244 <__udivmoddi4+0x2b4>
 80010aa:	4626      	mov	r6, r4
 80010ac:	1a1c      	subs	r4, r3, r0
 80010ae:	fa1f f38e 	uxth.w	r3, lr
 80010b2:	fbb4 f0f8 	udiv	r0, r4, r8
 80010b6:	fb08 4410 	mls	r4, r8, r0, r4
 80010ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010be:	fb00 f707 	mul.w	r7, r0, r7
 80010c2:	429f      	cmp	r7, r3
 80010c4:	d908      	bls.n	80010d8 <__udivmoddi4+0x148>
 80010c6:	eb1c 0303 	adds.w	r3, ip, r3
 80010ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80010ce:	d202      	bcs.n	80010d6 <__udivmoddi4+0x146>
 80010d0:	429f      	cmp	r7, r3
 80010d2:	f200 80b0 	bhi.w	8001236 <__udivmoddi4+0x2a6>
 80010d6:	4620      	mov	r0, r4
 80010d8:	1bdb      	subs	r3, r3, r7
 80010da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010de:	e7a5      	b.n	800102c <__udivmoddi4+0x9c>
 80010e0:	f1c1 0620 	rsb	r6, r1, #32
 80010e4:	408b      	lsls	r3, r1
 80010e6:	fa22 f706 	lsr.w	r7, r2, r6
 80010ea:	431f      	orrs	r7, r3
 80010ec:	fa20 fc06 	lsr.w	ip, r0, r6
 80010f0:	fa04 f301 	lsl.w	r3, r4, r1
 80010f4:	ea43 030c 	orr.w	r3, r3, ip
 80010f8:	40f4      	lsrs	r4, r6
 80010fa:	fa00 f801 	lsl.w	r8, r0, r1
 80010fe:	0c38      	lsrs	r0, r7, #16
 8001100:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001104:	fbb4 fef0 	udiv	lr, r4, r0
 8001108:	fa1f fc87 	uxth.w	ip, r7
 800110c:	fb00 441e 	mls	r4, r0, lr, r4
 8001110:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001114:	fb0e f90c 	mul.w	r9, lr, ip
 8001118:	45a1      	cmp	r9, r4
 800111a:	fa02 f201 	lsl.w	r2, r2, r1
 800111e:	d90a      	bls.n	8001136 <__udivmoddi4+0x1a6>
 8001120:	193c      	adds	r4, r7, r4
 8001122:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001126:	f080 8084 	bcs.w	8001232 <__udivmoddi4+0x2a2>
 800112a:	45a1      	cmp	r9, r4
 800112c:	f240 8081 	bls.w	8001232 <__udivmoddi4+0x2a2>
 8001130:	f1ae 0e02 	sub.w	lr, lr, #2
 8001134:	443c      	add	r4, r7
 8001136:	eba4 0409 	sub.w	r4, r4, r9
 800113a:	fa1f f983 	uxth.w	r9, r3
 800113e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001142:	fb00 4413 	mls	r4, r0, r3, r4
 8001146:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800114a:	fb03 fc0c 	mul.w	ip, r3, ip
 800114e:	45a4      	cmp	ip, r4
 8001150:	d907      	bls.n	8001162 <__udivmoddi4+0x1d2>
 8001152:	193c      	adds	r4, r7, r4
 8001154:	f103 30ff 	add.w	r0, r3, #4294967295
 8001158:	d267      	bcs.n	800122a <__udivmoddi4+0x29a>
 800115a:	45a4      	cmp	ip, r4
 800115c:	d965      	bls.n	800122a <__udivmoddi4+0x29a>
 800115e:	3b02      	subs	r3, #2
 8001160:	443c      	add	r4, r7
 8001162:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001166:	fba0 9302 	umull	r9, r3, r0, r2
 800116a:	eba4 040c 	sub.w	r4, r4, ip
 800116e:	429c      	cmp	r4, r3
 8001170:	46ce      	mov	lr, r9
 8001172:	469c      	mov	ip, r3
 8001174:	d351      	bcc.n	800121a <__udivmoddi4+0x28a>
 8001176:	d04e      	beq.n	8001216 <__udivmoddi4+0x286>
 8001178:	b155      	cbz	r5, 8001190 <__udivmoddi4+0x200>
 800117a:	ebb8 030e 	subs.w	r3, r8, lr
 800117e:	eb64 040c 	sbc.w	r4, r4, ip
 8001182:	fa04 f606 	lsl.w	r6, r4, r6
 8001186:	40cb      	lsrs	r3, r1
 8001188:	431e      	orrs	r6, r3
 800118a:	40cc      	lsrs	r4, r1
 800118c:	e9c5 6400 	strd	r6, r4, [r5]
 8001190:	2100      	movs	r1, #0
 8001192:	e750      	b.n	8001036 <__udivmoddi4+0xa6>
 8001194:	f1c2 0320 	rsb	r3, r2, #32
 8001198:	fa20 f103 	lsr.w	r1, r0, r3
 800119c:	fa0c fc02 	lsl.w	ip, ip, r2
 80011a0:	fa24 f303 	lsr.w	r3, r4, r3
 80011a4:	4094      	lsls	r4, r2
 80011a6:	430c      	orrs	r4, r1
 80011a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80011b0:	fa1f f78c 	uxth.w	r7, ip
 80011b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80011b8:	fb08 3110 	mls	r1, r8, r0, r3
 80011bc:	0c23      	lsrs	r3, r4, #16
 80011be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011c2:	fb00 f107 	mul.w	r1, r0, r7
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d908      	bls.n	80011dc <__udivmoddi4+0x24c>
 80011ca:	eb1c 0303 	adds.w	r3, ip, r3
 80011ce:	f100 36ff 	add.w	r6, r0, #4294967295
 80011d2:	d22c      	bcs.n	800122e <__udivmoddi4+0x29e>
 80011d4:	4299      	cmp	r1, r3
 80011d6:	d92a      	bls.n	800122e <__udivmoddi4+0x29e>
 80011d8:	3802      	subs	r0, #2
 80011da:	4463      	add	r3, ip
 80011dc:	1a5b      	subs	r3, r3, r1
 80011de:	b2a4      	uxth	r4, r4
 80011e0:	fbb3 f1f8 	udiv	r1, r3, r8
 80011e4:	fb08 3311 	mls	r3, r8, r1, r3
 80011e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011ec:	fb01 f307 	mul.w	r3, r1, r7
 80011f0:	42a3      	cmp	r3, r4
 80011f2:	d908      	bls.n	8001206 <__udivmoddi4+0x276>
 80011f4:	eb1c 0404 	adds.w	r4, ip, r4
 80011f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80011fc:	d213      	bcs.n	8001226 <__udivmoddi4+0x296>
 80011fe:	42a3      	cmp	r3, r4
 8001200:	d911      	bls.n	8001226 <__udivmoddi4+0x296>
 8001202:	3902      	subs	r1, #2
 8001204:	4464      	add	r4, ip
 8001206:	1ae4      	subs	r4, r4, r3
 8001208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800120c:	e739      	b.n	8001082 <__udivmoddi4+0xf2>
 800120e:	4604      	mov	r4, r0
 8001210:	e6f0      	b.n	8000ff4 <__udivmoddi4+0x64>
 8001212:	4608      	mov	r0, r1
 8001214:	e706      	b.n	8001024 <__udivmoddi4+0x94>
 8001216:	45c8      	cmp	r8, r9
 8001218:	d2ae      	bcs.n	8001178 <__udivmoddi4+0x1e8>
 800121a:	ebb9 0e02 	subs.w	lr, r9, r2
 800121e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001222:	3801      	subs	r0, #1
 8001224:	e7a8      	b.n	8001178 <__udivmoddi4+0x1e8>
 8001226:	4631      	mov	r1, r6
 8001228:	e7ed      	b.n	8001206 <__udivmoddi4+0x276>
 800122a:	4603      	mov	r3, r0
 800122c:	e799      	b.n	8001162 <__udivmoddi4+0x1d2>
 800122e:	4630      	mov	r0, r6
 8001230:	e7d4      	b.n	80011dc <__udivmoddi4+0x24c>
 8001232:	46d6      	mov	lr, sl
 8001234:	e77f      	b.n	8001136 <__udivmoddi4+0x1a6>
 8001236:	4463      	add	r3, ip
 8001238:	3802      	subs	r0, #2
 800123a:	e74d      	b.n	80010d8 <__udivmoddi4+0x148>
 800123c:	4606      	mov	r6, r0
 800123e:	4623      	mov	r3, r4
 8001240:	4608      	mov	r0, r1
 8001242:	e70f      	b.n	8001064 <__udivmoddi4+0xd4>
 8001244:	3e02      	subs	r6, #2
 8001246:	4463      	add	r3, ip
 8001248:	e730      	b.n	80010ac <__udivmoddi4+0x11c>
 800124a:	bf00      	nop

0800124c <__aeabi_idiv0>:
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <vBleCmdMotorForward>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	This function command the robot to go forward								   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vBleCmdMotorForward(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	fSetPoint_left = 500;
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <vBleCmdMotorForward+0x34>)
 8001256:	4a0c      	ldr	r2, [pc, #48]	@ (8001288 <vBleCmdMotorForward+0x38>)
 8001258:	601a      	str	r2, [r3, #0]
	fSetPoint_right = 500;
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <vBleCmdMotorForward+0x3c>)
 800125c:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <vBleCmdMotorForward+0x38>)
 800125e:	601a      	str	r2, [r3, #0]
	vMotorsSetPWMTimer(left, 0.8, 1, 1000);
 8001260:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001264:	2101      	movs	r1, #1
 8001266:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001290 <vBleCmdMotorForward+0x40>
 800126a:	2000      	movs	r0, #0
 800126c:	f001 fd0a 	bl	8002c84 <vMotorsSetPWMTimer>
	vMotorsSetPWMTimer(right, 0.8, 1, 1000);
 8001270:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001274:	2101      	movs	r1, #1
 8001276:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001290 <vBleCmdMotorForward+0x40>
 800127a:	2001      	movs	r0, #1
 800127c:	f001 fd02 	bl	8002c84 <vMotorsSetPWMTimer>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000788 	.word	0x20000788
 8001288:	43fa0000 	.word	0x43fa0000
 800128c:	2000078c 	.word	0x2000078c
 8001290:	3f4ccccd 	.word	0x3f4ccccd

08001294 <vBleCmdMotorLeftward>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	This function command the robot to go leftward								   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vBleCmdMotorLeftward(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	fSetPoint_left = 200;
 8001298:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <vBleCmdMotorLeftward+0x34>)
 800129a:	4a0c      	ldr	r2, [pc, #48]	@ (80012cc <vBleCmdMotorLeftward+0x38>)
 800129c:	601a      	str	r2, [r3, #0]
	fSetPoint_right = 500;
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <vBleCmdMotorLeftward+0x3c>)
 80012a0:	4a0c      	ldr	r2, [pc, #48]	@ (80012d4 <vBleCmdMotorLeftward+0x40>)
 80012a2:	601a      	str	r2, [r3, #0]
	vMotorsSetPWMTimer(left, 0.5, 1, 1000);
 80012a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012a8:	2101      	movs	r1, #1
 80012aa:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80012ae:	2000      	movs	r0, #0
 80012b0:	f001 fce8 	bl	8002c84 <vMotorsSetPWMTimer>
	vMotorsSetPWMTimer(right, 0.8, 1, 1000);
 80012b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012b8:	2101      	movs	r1, #1
 80012ba:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80012d8 <vBleCmdMotorLeftward+0x44>
 80012be:	2001      	movs	r0, #1
 80012c0:	f001 fce0 	bl	8002c84 <vMotorsSetPWMTimer>
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000788 	.word	0x20000788
 80012cc:	43480000 	.word	0x43480000
 80012d0:	2000078c 	.word	0x2000078c
 80012d4:	43fa0000 	.word	0x43fa0000
 80012d8:	3f4ccccd 	.word	0x3f4ccccd

080012dc <vBleCmdMotorRightward>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	This function command the robot to go rightward								   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vBleCmdMotorRightward(){
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	fSetPoint_left = 500;
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <vBleCmdMotorRightward+0x34>)
 80012e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001314 <vBleCmdMotorRightward+0x38>)
 80012e4:	601a      	str	r2, [r3, #0]
	fSetPoint_right = 200;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <vBleCmdMotorRightward+0x3c>)
 80012e8:	4a0c      	ldr	r2, [pc, #48]	@ (800131c <vBleCmdMotorRightward+0x40>)
 80012ea:	601a      	str	r2, [r3, #0]
	vMotorsSetPWMTimer(left, 0.8, 1, 1000);
 80012ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012f0:	2101      	movs	r1, #1
 80012f2:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001320 <vBleCmdMotorRightward+0x44>
 80012f6:	2000      	movs	r0, #0
 80012f8:	f001 fcc4 	bl	8002c84 <vMotorsSetPWMTimer>
	vMotorsSetPWMTimer(right, 0.5, 1, 1000);
 80012fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001300:	2101      	movs	r1, #1
 8001302:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001306:	2001      	movs	r0, #1
 8001308:	f001 fcbc 	bl	8002c84 <vMotorsSetPWMTimer>
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000788 	.word	0x20000788
 8001314:	43fa0000 	.word	0x43fa0000
 8001318:	2000078c 	.word	0x2000078c
 800131c:	43480000 	.word	0x43480000
 8001320:	3f4ccccd 	.word	0x3f4ccccd

08001324 <vBleCmdMotorBackward>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	This function command the robot to go backward								   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vBleCmdMotorBackward(){
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	fSetPoint_left = -250;
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <vBleCmdMotorBackward+0x34>)
 800132a:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <vBleCmdMotorBackward+0x38>)
 800132c:	601a      	str	r2, [r3, #0]
	fSetPoint_right = -250;
 800132e:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <vBleCmdMotorBackward+0x3c>)
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <vBleCmdMotorBackward+0x38>)
 8001332:	601a      	str	r2, [r3, #0]
	vMotorsSetPWMTimer(left, 0.8, 0, 1000);
 8001334:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001338:	2100      	movs	r1, #0
 800133a:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001364 <vBleCmdMotorBackward+0x40>
 800133e:	2000      	movs	r0, #0
 8001340:	f001 fca0 	bl	8002c84 <vMotorsSetPWMTimer>
	vMotorsSetPWMTimer(right, 0.8, 0, 1000);
 8001344:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001348:	2100      	movs	r1, #0
 800134a:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001364 <vBleCmdMotorBackward+0x40>
 800134e:	2001      	movs	r0, #1
 8001350:	f001 fc98 	bl	8002c84 <vMotorsSetPWMTimer>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000788 	.word	0x20000788
 800135c:	c37a0000 	.word	0xc37a0000
 8001360:	2000078c 	.word	0x2000078c
 8001364:	3f4ccccd 	.word	0x3f4ccccd

08001368 <vCommStateMachineInit>:
UART_HandleTypeDef *pBluetoothControllerUART;

//-----------------------------------------------Functions---------------------------------------------//


void vCommStateMachineInit(UART_HandleTypeDef *huart){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	pBluetoothControllerUART = huart;
 8001370:	4a06      	ldr	r2, [pc, #24]	@ (800138c <vCommStateMachineInit+0x24>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(pBluetoothControllerUART, &ucDigit, 1);
 8001376:	4b05      	ldr	r3, [pc, #20]	@ (800138c <vCommStateMachineInit+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2201      	movs	r2, #1
 800137c:	4904      	ldr	r1, [pc, #16]	@ (8001390 <vCommStateMachineInit+0x28>)
 800137e:	4618      	mov	r0, r3
 8001380:	f008 fe5e 	bl	800a040 <HAL_UART_Receive_IT>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000230 	.word	0x20000230
 8001390:	2000022e 	.word	0x2000022e

08001394 <HAL_UART_RxCpltCallback>:
//	 Description	:	Makes the treatment when recieve one byte from the uart, making a
//		                state machine to pass trought any input
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucByte
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    static unsigned char ucParam;


    if (huart == pBluetoothControllerUART){
 800139c:	4b85      	ldr	r3, [pc, #532]	@ (80015b4 <HAL_UART_RxCpltCallback+0x220>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	f040 8101 	bne.w	80015aa <HAL_UART_RxCpltCallback+0x216>
        HAL_UART_Receive_IT(huart, &ucDigit, 1);
 80013a8:	2201      	movs	r2, #1
 80013aa:	4983      	ldr	r1, [pc, #524]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f008 fe47 	bl	800a040 <HAL_UART_Receive_IT>

        if('#' == ucDigit){
 80013b2:	4b81      	ldr	r3, [pc, #516]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b23      	cmp	r3, #35	@ 0x23
 80013b8:	d103      	bne.n	80013c2 <HAL_UART_RxCpltCallback+0x2e>
            ucState = _CAR;
 80013ba:	4b80      	ldr	r3, [pc, #512]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 80013bc:	2232      	movs	r2, #50	@ 0x32
 80013be:	701a      	strb	r2, [r3, #0]
					vBleCmdMotorBackward();
			}
		}
    }
//    HAL_UART_Receive_IT(pBluetoothControllerUART, &ucDigit, 1);
}
 80013c0:	e0f3      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
			if (ucState != _IDDLE){
 80013c2:	4b7e      	ldr	r3, [pc, #504]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b30      	cmp	r3, #48	@ 0x30
 80013c8:	f000 80d3 	beq.w	8001572 <HAL_UART_RxCpltCallback+0x1de>
				switch (ucState){
 80013cc:	4b7b      	ldr	r3, [pc, #492]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	3b31      	subs	r3, #49	@ 0x31
 80013d2:	2b05      	cmp	r3, #5
 80013d4:	f200 80e9 	bhi.w	80015aa <HAL_UART_RxCpltCallback+0x216>
 80013d8:	a201      	add	r2, pc, #4	@ (adr r2, 80013e0 <HAL_UART_RxCpltCallback+0x4c>)
 80013da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013de:	bf00      	nop
 80013e0:	0800142d 	.word	0x0800142d
 80013e4:	080013f9 	.word	0x080013f9
 80013e8:	08001455 	.word	0x08001455
 80013ec:	080014a5 	.word	0x080014a5
 80013f0:	080014f3 	.word	0x080014f3
 80013f4:	0800150d 	.word	0x0800150d
					switch (ucDigit){
 80013f8:	4b6f      	ldr	r3, [pc, #444]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b31      	cmp	r3, #49	@ 0x31
 80013fe:	d002      	beq.n	8001406 <HAL_UART_RxCpltCallback+0x72>
 8001400:	2b32      	cmp	r3, #50	@ 0x32
 8001402:	d007      	beq.n	8001414 <HAL_UART_RxCpltCallback+0x80>
 8001404:	e00d      	b.n	8001422 <HAL_UART_RxCpltCallback+0x8e>
						cCar = 1; //lider
 8001406:	4b6e      	ldr	r3, [pc, #440]	@ (80015c0 <HAL_UART_RxCpltCallback+0x22c>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
						ucState = _READY;
 800140c:	4b6b      	ldr	r3, [pc, #428]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 800140e:	2231      	movs	r2, #49	@ 0x31
 8001410:	701a      	strb	r2, [r3, #0]
						break;
 8001412:	e00a      	b.n	800142a <HAL_UART_RxCpltCallback+0x96>
						cCar = 2; //seguidor
 8001414:	4b6a      	ldr	r3, [pc, #424]	@ (80015c0 <HAL_UART_RxCpltCallback+0x22c>)
 8001416:	2202      	movs	r2, #2
 8001418:	701a      	strb	r2, [r3, #0]
						ucState = _READY;
 800141a:	4b68      	ldr	r3, [pc, #416]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 800141c:	2231      	movs	r2, #49	@ 0x31
 800141e:	701a      	strb	r2, [r3, #0]
						break;
 8001420:	e003      	b.n	800142a <HAL_UART_RxCpltCallback+0x96>
						ucState = _IDDLE;
 8001422:	4b66      	ldr	r3, [pc, #408]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 8001424:	2230      	movs	r2, #48	@ 0x30
 8001426:	701a      	strb	r2, [r3, #0]
					break;
 8001428:	e0bf      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
 800142a:	e0be      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
					switch (ucDigit){
 800142c:	4b62      	ldr	r3, [pc, #392]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b67      	cmp	r3, #103	@ 0x67
 8001432:	d002      	beq.n	800143a <HAL_UART_RxCpltCallback+0xa6>
 8001434:	2b73      	cmp	r3, #115	@ 0x73
 8001436:	d004      	beq.n	8001442 <HAL_UART_RxCpltCallback+0xae>
 8001438:	e007      	b.n	800144a <HAL_UART_RxCpltCallback+0xb6>
						ucState = _GET;
 800143a:	4b60      	ldr	r3, [pc, #384]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 800143c:	2233      	movs	r2, #51	@ 0x33
 800143e:	701a      	strb	r2, [r3, #0]
						break;
 8001440:	e007      	b.n	8001452 <HAL_UART_RxCpltCallback+0xbe>
						ucState = _SET;
 8001442:	4b5e      	ldr	r3, [pc, #376]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 8001444:	2234      	movs	r2, #52	@ 0x34
 8001446:	701a      	strb	r2, [r3, #0]
						break;
 8001448:	e003      	b.n	8001452 <HAL_UART_RxCpltCallback+0xbe>
						ucState = _IDDLE;
 800144a:	4b5c      	ldr	r3, [pc, #368]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 800144c:	2230      	movs	r2, #48	@ 0x30
 800144e:	701a      	strb	r2, [r3, #0]
					break;
 8001450:	e0ab      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
 8001452:	e0aa      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
					if ('v' == ucDigit || 'a' == ucDigit || 'b' == ucDigit || 'c' == ucDigit || 'd' == ucDigit || 'e' == ucDigit || 'f' == ucDigit){
 8001454:	4b58      	ldr	r3, [pc, #352]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b76      	cmp	r3, #118	@ 0x76
 800145a:	d017      	beq.n	800148c <HAL_UART_RxCpltCallback+0xf8>
 800145c:	4b56      	ldr	r3, [pc, #344]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b61      	cmp	r3, #97	@ 0x61
 8001462:	d013      	beq.n	800148c <HAL_UART_RxCpltCallback+0xf8>
 8001464:	4b54      	ldr	r3, [pc, #336]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b62      	cmp	r3, #98	@ 0x62
 800146a:	d00f      	beq.n	800148c <HAL_UART_RxCpltCallback+0xf8>
 800146c:	4b52      	ldr	r3, [pc, #328]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b63      	cmp	r3, #99	@ 0x63
 8001472:	d00b      	beq.n	800148c <HAL_UART_RxCpltCallback+0xf8>
 8001474:	4b50      	ldr	r3, [pc, #320]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b64      	cmp	r3, #100	@ 0x64
 800147a:	d007      	beq.n	800148c <HAL_UART_RxCpltCallback+0xf8>
 800147c:	4b4e      	ldr	r3, [pc, #312]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b65      	cmp	r3, #101	@ 0x65
 8001482:	d003      	beq.n	800148c <HAL_UART_RxCpltCallback+0xf8>
 8001484:	4b4c      	ldr	r3, [pc, #304]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b66      	cmp	r3, #102	@ 0x66
 800148a:	d107      	bne.n	800149c <HAL_UART_RxCpltCallback+0x108>
					ucParam = ucDigit;
 800148c:	4b4a      	ldr	r3, [pc, #296]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	4b4c      	ldr	r3, [pc, #304]	@ (80015c4 <HAL_UART_RxCpltCallback+0x230>)
 8001492:	701a      	strb	r2, [r3, #0]
					ucState = _PARAM;
 8001494:	4b49      	ldr	r3, [pc, #292]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 8001496:	2235      	movs	r2, #53	@ 0x35
 8001498:	701a      	strb	r2, [r3, #0]
					break;
 800149a:	e086      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
					ucState = _IDDLE;
 800149c:	4b47      	ldr	r3, [pc, #284]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 800149e:	2230      	movs	r2, #48	@ 0x30
 80014a0:	701a      	strb	r2, [r3, #0]
					break;
 80014a2:	e082      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
					if ('a' == ucDigit || 'b' == ucDigit || 'c' == ucDigit || 'd' == ucDigit || 'e' == ucDigit || 'f' == ucDigit){
 80014a4:	4b44      	ldr	r3, [pc, #272]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b61      	cmp	r3, #97	@ 0x61
 80014aa:	d013      	beq.n	80014d4 <HAL_UART_RxCpltCallback+0x140>
 80014ac:	4b42      	ldr	r3, [pc, #264]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b62      	cmp	r3, #98	@ 0x62
 80014b2:	d00f      	beq.n	80014d4 <HAL_UART_RxCpltCallback+0x140>
 80014b4:	4b40      	ldr	r3, [pc, #256]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b63      	cmp	r3, #99	@ 0x63
 80014ba:	d00b      	beq.n	80014d4 <HAL_UART_RxCpltCallback+0x140>
 80014bc:	4b3e      	ldr	r3, [pc, #248]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b64      	cmp	r3, #100	@ 0x64
 80014c2:	d007      	beq.n	80014d4 <HAL_UART_RxCpltCallback+0x140>
 80014c4:	4b3c      	ldr	r3, [pc, #240]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b65      	cmp	r3, #101	@ 0x65
 80014ca:	d003      	beq.n	80014d4 <HAL_UART_RxCpltCallback+0x140>
 80014cc:	4b3a      	ldr	r3, [pc, #232]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b66      	cmp	r3, #102	@ 0x66
 80014d2:	d10a      	bne.n	80014ea <HAL_UART_RxCpltCallback+0x156>
					ucParam = ucDigit;
 80014d4:	4b38      	ldr	r3, [pc, #224]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	4b3a      	ldr	r3, [pc, #232]	@ (80015c4 <HAL_UART_RxCpltCallback+0x230>)
 80014da:	701a      	strb	r2, [r3, #0]
					ucValueCount = 0;
 80014dc:	4b3a      	ldr	r3, [pc, #232]	@ (80015c8 <HAL_UART_RxCpltCallback+0x234>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
					ucState = _VALUE;
 80014e2:	4b36      	ldr	r3, [pc, #216]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 80014e4:	2236      	movs	r2, #54	@ 0x36
 80014e6:	701a      	strb	r2, [r3, #0]
					break;
 80014e8:	e05f      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
					ucState = _IDDLE;
 80014ea:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 80014ec:	2230      	movs	r2, #48	@ 0x30
 80014ee:	701a      	strb	r2, [r3, #0]
					break;
 80014f0:	e05b      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
					if (';' == ucDigit){
 80014f2:	4b31      	ldr	r3, [pc, #196]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b3b      	cmp	r3, #59	@ 0x3b
 80014f8:	d104      	bne.n	8001504 <HAL_UART_RxCpltCallback+0x170>
						vCommStateMachineReturnParam(ucParam);
 80014fa:	4b32      	ldr	r3, [pc, #200]	@ (80015c4 <HAL_UART_RxCpltCallback+0x230>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f866 	bl	80015d0 <vCommStateMachineReturnParam>
					ucState = _IDDLE;
 8001504:	4b2d      	ldr	r3, [pc, #180]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 8001506:	2230      	movs	r2, #48	@ 0x30
 8001508:	701a      	strb	r2, [r3, #0]
					break;
 800150a:	e04e      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
					if ((ucDigit >= '0' && ucDigit <= '9') || ',' == ucDigit){
 800150c:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b2f      	cmp	r3, #47	@ 0x2f
 8001512:	d903      	bls.n	800151c <HAL_UART_RxCpltCallback+0x188>
 8001514:	4b28      	ldr	r3, [pc, #160]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b39      	cmp	r3, #57	@ 0x39
 800151a:	d903      	bls.n	8001524 <HAL_UART_RxCpltCallback+0x190>
 800151c:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b2c      	cmp	r3, #44	@ 0x2c
 8001522:	d10f      	bne.n	8001544 <HAL_UART_RxCpltCallback+0x1b0>
						if (ucValueCount < MAX_VALUE_LENGTH){
 8001524:	4b28      	ldr	r3, [pc, #160]	@ (80015c8 <HAL_UART_RxCpltCallback+0x234>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b06      	cmp	r3, #6
 800152a:	d821      	bhi.n	8001570 <HAL_UART_RxCpltCallback+0x1dc>
							ucValue[ucValueCount++] = ucDigit;
 800152c:	4b26      	ldr	r3, [pc, #152]	@ (80015c8 <HAL_UART_RxCpltCallback+0x234>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	b2d1      	uxtb	r1, r2
 8001534:	4a24      	ldr	r2, [pc, #144]	@ (80015c8 <HAL_UART_RxCpltCallback+0x234>)
 8001536:	7011      	strb	r1, [r2, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 800153c:	7819      	ldrb	r1, [r3, #0]
 800153e:	4b23      	ldr	r3, [pc, #140]	@ (80015cc <HAL_UART_RxCpltCallback+0x238>)
 8001540:	5499      	strb	r1, [r3, r2]
						if (ucValueCount < MAX_VALUE_LENGTH){
 8001542:	e015      	b.n	8001570 <HAL_UART_RxCpltCallback+0x1dc>
						if (';' == ucDigit){
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b3b      	cmp	r3, #59	@ 0x3b
 800154a:	d10d      	bne.n	8001568 <HAL_UART_RxCpltCallback+0x1d4>
							ucValue[ucValueCount] = '\0';
 800154c:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <HAL_UART_RxCpltCallback+0x234>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <HAL_UART_RxCpltCallback+0x238>)
 8001554:	2100      	movs	r1, #0
 8001556:	5499      	strb	r1, [r3, r2]
							vCommStateMachineSetParam(ucParam, ucValue);
 8001558:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <HAL_UART_RxCpltCallback+0x230>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4a1b      	ldr	r2, [pc, #108]	@ (80015cc <HAL_UART_RxCpltCallback+0x238>)
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f8f6 	bl	8001754 <vCommStateMachineSetParam>
						ucState = _IDDLE;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <HAL_UART_RxCpltCallback+0x228>)
 800156a:	2230      	movs	r2, #48	@ 0x30
 800156c:	701a      	strb	r2, [r3, #0]
					break;
 800156e:	e01c      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
 8001570:	e01b      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
		        if(ucDigit == '1')
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b31      	cmp	r3, #49	@ 0x31
 8001578:	d102      	bne.n	8001580 <HAL_UART_RxCpltCallback+0x1ec>
				    vBleCmdMotorForward();
 800157a:	f7ff fe69 	bl	8001250 <vBleCmdMotorForward>
}
 800157e:	e014      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
				else if (ucDigit == '4')
 8001580:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b34      	cmp	r3, #52	@ 0x34
 8001586:	d102      	bne.n	800158e <HAL_UART_RxCpltCallback+0x1fa>
					vBleCmdMotorLeftward();
 8001588:	f7ff fe84 	bl	8001294 <vBleCmdMotorLeftward>
}
 800158c:	e00d      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
				else if (ucDigit == '3')
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b33      	cmp	r3, #51	@ 0x33
 8001594:	d102      	bne.n	800159c <HAL_UART_RxCpltCallback+0x208>
					vBleCmdMotorRightward();
 8001596:	f7ff fea1 	bl	80012dc <vBleCmdMotorRightward>
}
 800159a:	e006      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
				else if (ucDigit == '2')
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_UART_RxCpltCallback+0x224>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b32      	cmp	r3, #50	@ 0x32
 80015a2:	d102      	bne.n	80015aa <HAL_UART_RxCpltCallback+0x216>
					vBleCmdMotorBackward();
 80015a4:	f7ff febe 	bl	8001324 <vBleCmdMotorBackward>
}
 80015a8:	e7ff      	b.n	80015aa <HAL_UART_RxCpltCallback+0x216>
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000230 	.word	0x20000230
 80015b8:	2000022e 	.word	0x2000022e
 80015bc:	20000000 	.word	0x20000000
 80015c0:	2000022c 	.word	0x2000022c
 80015c4:	20000234 	.word	0x20000234
 80015c8:	2000022d 	.word	0x2000022d
 80015cc:	20000224 	.word	0x20000224

080015d0 <vCommStateMachineReturnParam>:
//-----------------------------------------------------------------------------------------------------//
//	 Description	:	Returns the parameter indicated by the ucParam variable
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucParam
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineReturnParam(unsigned char ucParam){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
	unsigned char ucValue[MAX_VALUE_LENGTH];
	char * pMessage;
    switch (ucParam){
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	3b61      	subs	r3, #97	@ 0x61
 80015de:	2b11      	cmp	r3, #17
 80015e0:	f200 80a2 	bhi.w	8001728 <vCommStateMachineReturnParam+0x158>
 80015e4:	a201      	add	r2, pc, #4	@ (adr r2, 80015ec <vCommStateMachineReturnParam+0x1c>)
 80015e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ea:	bf00      	nop
 80015ec:	08001669 	.word	0x08001669
 80015f0:	08001689 	.word	0x08001689
 80015f4:	080016a9 	.word	0x080016a9
 80015f8:	080016c9 	.word	0x080016c9
 80015fc:	080016e9 	.word	0x080016e9
 8001600:	08001709 	.word	0x08001709
 8001604:	08001729 	.word	0x08001729
 8001608:	08001729 	.word	0x08001729
 800160c:	08001729 	.word	0x08001729
 8001610:	08001729 	.word	0x08001729
 8001614:	08001729 	.word	0x08001729
 8001618:	08001635 	.word	0x08001635
 800161c:	08001729 	.word	0x08001729
 8001620:	08001729 	.word	0x08001729
 8001624:	08001729 	.word	0x08001729
 8001628:	08001729 	.word	0x08001729
 800162c:	08001729 	.word	0x08001729
 8001630:	0800164f 	.word	0x0800164f
        case 'l': //left speed
        	pMessage = pCommunicationFloatToString(fLeftSpeed, 2);
 8001634:	4b3e      	ldr	r3, [pc, #248]	@ (8001730 <vCommStateMachineReturnParam+0x160>)
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	2002      	movs	r0, #2
 800163c:	eeb0 0a67 	vmov.f32	s0, s15
 8001640:	f000 f9b6 	bl	80019b0 <pCommunicationFloatToString>
 8001644:	6178      	str	r0, [r7, #20]
        	vCommunicationSendString(pMessage);
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f000 fa62 	bl	8001b10 <vCommunicationSendString>
            break;
 800164c:	e06c      	b.n	8001728 <vCommStateMachineReturnParam+0x158>
        case 'r': //right speed
        	pMessage = pCommunicationFloatToString(fRightSpeed, 2);
 800164e:	4b39      	ldr	r3, [pc, #228]	@ (8001734 <vCommStateMachineReturnParam+0x164>)
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	2002      	movs	r0, #2
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	f000 f9a9 	bl	80019b0 <pCommunicationFloatToString>
 800165e:	6178      	str	r0, [r7, #20]
        	vCommunicationSendString(pMessage);
 8001660:	6978      	ldr	r0, [r7, #20]
 8001662:	f000 fa55 	bl	8001b10 <vCommunicationSendString>
            break;
 8001666:	e05f      	b.n	8001728 <vCommStateMachineReturnParam+0x158>
        case 'a': //kp left
        	pMessage = pCommunicationFloatToString(fLeftMotorKp, 4);
 8001668:	4b33      	ldr	r3, [pc, #204]	@ (8001738 <vCommStateMachineReturnParam+0x168>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	2004      	movs	r0, #4
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	f000 f99c 	bl	80019b0 <pCommunicationFloatToString>
 8001678:	6178      	str	r0, [r7, #20]
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 800167a:	4b30      	ldr	r3, [pc, #192]	@ (800173c <vCommStateMachineReturnParam+0x16c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6979      	ldr	r1, [r7, #20]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f92f 	bl	80018e4 <vCommStateMachineSendMessage>
            break;
 8001686:	e04f      	b.n	8001728 <vCommStateMachineReturnParam+0x158>
        case 'b': //ki left
        	pMessage = pCommunicationFloatToString(fLeftMotorKi, 4);
 8001688:	4b2d      	ldr	r3, [pc, #180]	@ (8001740 <vCommStateMachineReturnParam+0x170>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	2004      	movs	r0, #4
 8001690:	eeb0 0a67 	vmov.f32	s0, s15
 8001694:	f000 f98c 	bl	80019b0 <pCommunicationFloatToString>
 8001698:	6178      	str	r0, [r7, #20]
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 800169a:	4b28      	ldr	r3, [pc, #160]	@ (800173c <vCommStateMachineReturnParam+0x16c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6979      	ldr	r1, [r7, #20]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f91f 	bl	80018e4 <vCommStateMachineSendMessage>
            break;
 80016a6:	e03f      	b.n	8001728 <vCommStateMachineReturnParam+0x158>
        case 'c': //kp right
        	pMessage = pCommunicationFloatToString(fRightMotorKp, 4);
 80016a8:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <vCommStateMachineReturnParam+0x174>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	2004      	movs	r0, #4
 80016b0:	eeb0 0a67 	vmov.f32	s0, s15
 80016b4:	f000 f97c 	bl	80019b0 <pCommunicationFloatToString>
 80016b8:	6178      	str	r0, [r7, #20]
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <vCommStateMachineReturnParam+0x16c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6979      	ldr	r1, [r7, #20]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 f90f 	bl	80018e4 <vCommStateMachineSendMessage>
            break;
 80016c6:	e02f      	b.n	8001728 <vCommStateMachineReturnParam+0x158>
        case 'd': //ki left
        	pMessage = pCommunicationFloatToString(fRightMotorKi, 4);
 80016c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <vCommStateMachineReturnParam+0x178>)
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	2004      	movs	r0, #4
 80016d0:	eeb0 0a67 	vmov.f32	s0, s15
 80016d4:	f000 f96c 	bl	80019b0 <pCommunicationFloatToString>
 80016d8:	6178      	str	r0, [r7, #20]
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 80016da:	4b18      	ldr	r3, [pc, #96]	@ (800173c <vCommStateMachineReturnParam+0x16c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6979      	ldr	r1, [r7, #20]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f8ff 	bl	80018e4 <vCommStateMachineSendMessage>
            break;
 80016e6:	e01f      	b.n	8001728 <vCommStateMachineReturnParam+0x158>
        case 'e': //setpoint left
        	pMessage = pCommunicationFloatToString(fSetPoint_left, 2);
 80016e8:	4b18      	ldr	r3, [pc, #96]	@ (800174c <vCommStateMachineReturnParam+0x17c>)
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	2002      	movs	r0, #2
 80016f0:	eeb0 0a67 	vmov.f32	s0, s15
 80016f4:	f000 f95c 	bl	80019b0 <pCommunicationFloatToString>
 80016f8:	6178      	str	r0, [r7, #20]
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 80016fa:	4b10      	ldr	r3, [pc, #64]	@ (800173c <vCommStateMachineReturnParam+0x16c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6979      	ldr	r1, [r7, #20]
 8001700:	4618      	mov	r0, r3
 8001702:	f000 f8ef 	bl	80018e4 <vCommStateMachineSendMessage>
            break;
 8001706:	e00f      	b.n	8001728 <vCommStateMachineReturnParam+0x158>
        case 'f': //setpoint right
        	pMessage = pCommunicationFloatToString(fSetPoint_right, 2);
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <vCommStateMachineReturnParam+0x180>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	2002      	movs	r0, #2
 8001710:	eeb0 0a67 	vmov.f32	s0, s15
 8001714:	f000 f94c 	bl	80019b0 <pCommunicationFloatToString>
 8001718:	6178      	str	r0, [r7, #20]
//        	vCommunicationSendString(pMessage);
        	vCommStateMachineSendMessage(pBluetoothControllerUART, pMessage);
 800171a:	4b08      	ldr	r3, [pc, #32]	@ (800173c <vCommStateMachineReturnParam+0x16c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6979      	ldr	r1, [r7, #20]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f8df 	bl	80018e4 <vCommStateMachineSendMessage>
            break;
 8001726:	bf00      	nop

    }
}
 8001728:	bf00      	nop
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200003f8 	.word	0x200003f8
 8001734:	200003fc 	.word	0x200003fc
 8001738:	20000024 	.word	0x20000024
 800173c:	20000230 	.word	0x20000230
 8001740:	20000028 	.word	0x20000028
 8001744:	2000002c 	.word	0x2000002c
 8001748:	20000030 	.word	0x20000030
 800174c:	20000788 	.word	0x20000788
 8001750:	2000078c 	.word	0x2000078c

08001754 <vCommStateMachineSetParam>:
//	 Description	:	set the parameter indicated by the ucParam by ucValue
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	ucParam
//		                ucValue
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineSetParam(unsigned char ucParam, unsigned char ucValue){
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	460a      	mov	r2, r1
 800175e:	71fb      	strb	r3, [r7, #7]
 8001760:	4613      	mov	r3, r2
 8001762:	71bb      	strb	r3, [r7, #6]
	float fValue;
    switch (ucParam){
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	3b61      	subs	r3, #97	@ 0x61
 8001768:	2b05      	cmp	r3, #5
 800176a:	d86f      	bhi.n	800184c <vCommStateMachineSetParam+0xf8>
 800176c:	a201      	add	r2, pc, #4	@ (adr r2, 8001774 <vCommStateMachineSetParam+0x20>)
 800176e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001772:	bf00      	nop
 8001774:	0800178d 	.word	0x0800178d
 8001778:	080017a1 	.word	0x080017a1
 800177c:	080017b5 	.word	0x080017b5
 8001780:	080017c9 	.word	0x080017c9
 8001784:	080017dd 	.word	0x080017dd
 8001788:	08001815 	.word	0x08001815
        case 'a': //left kp
        	fLeftMotorKp = fCommStateMachineStringToFloat(&ucValue);
 800178c:	1dbb      	adds	r3, r7, #6
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f86e 	bl	8001870 <fCommStateMachineStringToFloat>
 8001794:	eef0 7a40 	vmov.f32	s15, s0
 8001798:	4b2e      	ldr	r3, [pc, #184]	@ (8001854 <vCommStateMachineSetParam+0x100>)
 800179a:	edc3 7a00 	vstr	s15, [r3]
            break;
 800179e:	e055      	b.n	800184c <vCommStateMachineSetParam+0xf8>
        case 'b': //left ki
        	fLeftMotorKi = fCommStateMachineStringToFloat(&ucValue);
 80017a0:	1dbb      	adds	r3, r7, #6
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f864 	bl	8001870 <fCommStateMachineStringToFloat>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <vCommStateMachineSetParam+0x104>)
 80017ae:	edc3 7a00 	vstr	s15, [r3]
            break;
 80017b2:	e04b      	b.n	800184c <vCommStateMachineSetParam+0xf8>
        case 'c': //right kp
    		fRightMotorKp = fCommStateMachineStringToFloat(&ucValue);
 80017b4:	1dbb      	adds	r3, r7, #6
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f85a 	bl	8001870 <fCommStateMachineStringToFloat>
 80017bc:	eef0 7a40 	vmov.f32	s15, s0
 80017c0:	4b26      	ldr	r3, [pc, #152]	@ (800185c <vCommStateMachineSetParam+0x108>)
 80017c2:	edc3 7a00 	vstr	s15, [r3]
        	break;
 80017c6:	e041      	b.n	800184c <vCommStateMachineSetParam+0xf8>
        case 'd': //left ki
        	fRightMotorKi=fCommStateMachineStringToFloat(&ucValue);
 80017c8:	1dbb      	adds	r3, r7, #6
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f850 	bl	8001870 <fCommStateMachineStringToFloat>
 80017d0:	eef0 7a40 	vmov.f32	s15, s0
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <vCommStateMachineSetParam+0x10c>)
 80017d6:	edc3 7a00 	vstr	s15, [r3]
            break;
 80017da:	e037      	b.n	800184c <vCommStateMachineSetParam+0xf8>
        case 'e': //set left
        	fValue = fCommStateMachineStringToFloat(&ucValue);
 80017dc:	1dbb      	adds	r3, r7, #6
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f846 	bl	8001870 <fCommStateMachineStringToFloat>
 80017e4:	ed87 0a03 	vstr	s0, [r7, #12]
        	if (fValue >= 0 && fValue<= 700){
 80017e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	da00      	bge.n	80017f8 <vCommStateMachineSetParam+0xa4>
				fSetPoint_left=fValue;
        	}
            break;
 80017f6:	e029      	b.n	800184c <vCommStateMachineSetParam+0xf8>
        	if (fValue >= 0 && fValue<= 700){
 80017f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017fc:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001864 <vCommStateMachineSetParam+0x110>
 8001800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001808:	d900      	bls.n	800180c <vCommStateMachineSetParam+0xb8>
            break;
 800180a:	e01f      	b.n	800184c <vCommStateMachineSetParam+0xf8>
				fSetPoint_left=fValue;
 800180c:	4a16      	ldr	r2, [pc, #88]	@ (8001868 <vCommStateMachineSetParam+0x114>)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6013      	str	r3, [r2, #0]
            break;
 8001812:	e01b      	b.n	800184c <vCommStateMachineSetParam+0xf8>
        case 'f': //set right
        	fValue = fCommStateMachineStringToFloat(&ucValue);
 8001814:	1dbb      	adds	r3, r7, #6
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f82a 	bl	8001870 <fCommStateMachineStringToFloat>
 800181c:	ed87 0a03 	vstr	s0, [r7, #12]
        	if (fValue >= 0 && fValue<= 700){
 8001820:	edd7 7a03 	vldr	s15, [r7, #12]
 8001824:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182c:	da00      	bge.n	8001830 <vCommStateMachineSetParam+0xdc>
				fSetPoint_right=fValue;
        	}
            break;
 800182e:	e00c      	b.n	800184a <vCommStateMachineSetParam+0xf6>
        	if (fValue >= 0 && fValue<= 700){
 8001830:	edd7 7a03 	vldr	s15, [r7, #12]
 8001834:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001864 <vCommStateMachineSetParam+0x110>
 8001838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	d900      	bls.n	8001844 <vCommStateMachineSetParam+0xf0>
            break;
 8001842:	e002      	b.n	800184a <vCommStateMachineSetParam+0xf6>
				fSetPoint_right=fValue;
 8001844:	4a09      	ldr	r2, [pc, #36]	@ (800186c <vCommStateMachineSetParam+0x118>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6013      	str	r3, [r2, #0]
            break;
 800184a:	bf00      	nop
    }
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000024 	.word	0x20000024
 8001858:	20000028 	.word	0x20000028
 800185c:	2000002c 	.word	0x2000002c
 8001860:	20000030 	.word	0x20000030
 8001864:	442f0000 	.word	0x442f0000
 8001868:	20000788 	.word	0x20000788
 800186c:	2000078c 	.word	0x2000078c

08001870 <fCommStateMachineStringToFloat>:
//	 Description	:	Turns Strings to float using atof functon and set a "." instead a ","
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	unsigned char * ucInputNumber
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//float fCommunicationStateMachineStringToFloat(unsigned char * ucValue){
float fCommStateMachineStringToFloat(){
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
	float fInputNumber=0;
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	603b      	str	r3, [r7, #0]
	int iPos=0;
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
	while (iPos >= 0){
 8001880:	e017      	b.n	80018b2 <fCommStateMachineStringToFloat+0x42>
		if ('\0'!=ucValue[iPos]){
 8001882:	4a17      	ldr	r2, [pc, #92]	@ (80018e0 <fCommStateMachineStringToFloat+0x70>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00e      	beq.n	80018ac <fCommStateMachineStringToFloat+0x3c>
			if (ucValue[iPos] == ','){
 800188e:	4a14      	ldr	r2, [pc, #80]	@ (80018e0 <fCommStateMachineStringToFloat+0x70>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4413      	add	r3, r2
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b2c      	cmp	r3, #44	@ 0x2c
 8001898:	d104      	bne.n	80018a4 <fCommStateMachineStringToFloat+0x34>
				ucValue[iPos] = '.';
 800189a:	4a11      	ldr	r2, [pc, #68]	@ (80018e0 <fCommStateMachineStringToFloat+0x70>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	222e      	movs	r2, #46	@ 0x2e
 80018a2:	701a      	strb	r2, [r3, #0]
			}
			iPos++;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3301      	adds	r3, #1
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	e002      	b.n	80018b2 <fCommStateMachineStringToFloat+0x42>
		}
		else{
			iPos = -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	607b      	str	r3, [r7, #4]
	while (iPos >= 0){
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	dae4      	bge.n	8001882 <fCommStateMachineStringToFloat+0x12>
		}
	}
	fInputNumber = atof (ucValue);
 80018b8:	4809      	ldr	r0, [pc, #36]	@ (80018e0 <fCommStateMachineStringToFloat+0x70>)
 80018ba:	f00a fdd3 	bl	800c464 <atof>
 80018be:	ec53 2b10 	vmov	r2, r3, d0
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff f9b7 	bl	8000c38 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	603b      	str	r3, [r7, #0]
	return fInputNumber;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	ee07 3a90 	vmov	s15, r3
}
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000224 	.word	0x20000224

080018e4 <vCommStateMachineSendMessage>:
//	 Description	:	Send message to putty from HAL_UART_Transmit
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	UART_HandleTypeDef * huart
//		                unsigned char* ucMessage
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vCommStateMachineSendMessage (UART_HandleTypeDef * huart, unsigned char* ucMessage){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
	if(huart == pBluetoothControllerUART){
 80018ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <vCommStateMachineSendMessage+0x7c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d12f      	bne.n	8001958 <vCommStateMachineSendMessage+0x74>
		int iPos = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
		while(iPos >= 0 && iPos < _MAX_NUMBER_OF_CHARS){
 80018fc:	e026      	b.n	800194c <vCommStateMachineSendMessage+0x68>
			if(ucMessage[iPos] =='\000'){
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	4413      	add	r3, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d103      	bne.n	8001912 <vCommStateMachineSendMessage+0x2e>
				iPos = -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e01c      	b.n	800194c <vCommStateMachineSendMessage+0x68>
			}
			else if(ucMessage[iPos] =='\n'){
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b0a      	cmp	r3, #10
 800191c:	d10b      	bne.n	8001936 <vCommStateMachineSendMessage+0x52>
				HAL_UART_Transmit(huart, &ucMessage[iPos], 1, 100);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	18d1      	adds	r1, r2, r3
 8001924:	2364      	movs	r3, #100	@ 0x64
 8001926:	2201      	movs	r2, #1
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f008 fa67 	bl	8009dfc <HAL_UART_Transmit>
				iPos = -1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e00a      	b.n	800194c <vCommStateMachineSendMessage+0x68>
			}
			else{
				HAL_UART_Transmit(huart, &ucMessage[iPos], 1, 100);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	18d1      	adds	r1, r2, r3
 800193c:	2364      	movs	r3, #100	@ 0x64
 800193e:	2201      	movs	r2, #1
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f008 fa5b 	bl	8009dfc <HAL_UART_Transmit>
				iPos ++;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	3301      	adds	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
		while(iPos >= 0 && iPos < _MAX_NUMBER_OF_CHARS){
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	db02      	blt.n	8001958 <vCommStateMachineSendMessage+0x74>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2b63      	cmp	r3, #99	@ 0x63
 8001956:	ddd2      	ble.n	80018fe <vCommStateMachineSendMessage+0x1a>
			}
		}
	}
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000230 	.word	0x20000230

08001964 <vCommunicationInit>:
//
// INPUT PARAMS: n/a
//
// OUTPUT PARAMS: n/a
// ********************************************** //
void vCommunicationInit(UART_HandleTypeDef * huart) {
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	pUART = huart;
 800196c:	4a0c      	ldr	r2, [pc, #48]	@ (80019a0 <vCommunicationInit+0x3c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 10; i++)
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	e007      	b.n	8001988 <vCommunicationInit+0x24>
		cNumeroString[i] = 0;
 8001978:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <vCommunicationInit+0x40>)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4413      	add	r3, r2
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3301      	adds	r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b09      	cmp	r3, #9
 800198c:	ddf4      	ble.n	8001978 <vCommunicationInit+0x14>

	ucInputChar = 0;
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <vCommunicationInit+0x44>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	200002a8 	.word	0x200002a8
 80019a4:	20000238 	.word	0x20000238
 80019a8:	20000235 	.word	0x20000235
 80019ac:	00000000 	.word	0x00000000

080019b0 <pCommunicationFloatToString>:
// INPUT PARAMS: num - numero a ser convertido
//               nCasasDec - numero de casas decimais a serem consideradas
//
// OUTPUT PARAMS: char* - string contendo o num
// ********************************************** //
char* pCommunicationFloatToString(float num, int nCasasDec) { // n casas decimais // para numeros < 1
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80019ba:	6038      	str	r0, [r7, #0]
	float fAux = num;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
	// Utilizado na quantidade de casas que a string vai ter
	int iN = nCasasDec;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	623b      	str	r3, [r7, #32]
	int iPos = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
	// "mapping" para facilitar na adicao de char na string
	char pNumberToChar[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 80019c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001b08 <pCommunicationFloatToString+0x158>)
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80019d0:	c303      	stmia	r3!, {r0, r1}
 80019d2:	801a      	strh	r2, [r3, #0]

	// Limpa a string global
	for (int i = 0; i < 100; i++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	e007      	b.n	80019ea <pCommunicationFloatToString+0x3a>
		pOutputString[i] = 0;
 80019da:	4a4c      	ldr	r2, [pc, #304]	@ (8001b0c <pCommunicationFloatToString+0x15c>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	4413      	add	r3, r2
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	3301      	adds	r3, #1
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b63      	cmp	r3, #99	@ 0x63
 80019ee:	ddf4      	ble.n	80019da <pCommunicationFloatToString+0x2a>

	// Caso float negativo, adiciona '-' na string
	if (fAux < 0) {
 80019f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80019f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fc:	d50d      	bpl.n	8001a1a <pCommunicationFloatToString+0x6a>
		fAux = fAux*-1;
 80019fe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a02:	eef1 7a67 	vneg.f32	s15, s15
 8001a06:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		pOutputString[iPos] = '-';
 8001a0a:	4a40      	ldr	r2, [pc, #256]	@ (8001b0c <pCommunicationFloatToString+0x15c>)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	4413      	add	r3, r2
 8001a10:	222d      	movs	r2, #45	@ 0x2d
 8001a12:	701a      	strb	r2, [r3, #0]
		iPos++;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	3301      	adds	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]
	}

	// Caso menor que 1, adiciona 0 na string
	if (fAux < 1) {
 8001a1a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	d507      	bpl.n	8001a3c <pCommunicationFloatToString+0x8c>
		pOutputString[iPos] = '0';
 8001a2c:	4a37      	ldr	r2, [pc, #220]	@ (8001b0c <pCommunicationFloatToString+0x15c>)
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	4413      	add	r3, r2
 8001a32:	2230      	movs	r2, #48	@ 0x30
 8001a34:	701a      	strb	r2, [r3, #0]
		iPos++;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
	}

	// Move a virgula do numero ate que fique menor que 1
	while (fAux >= 1) {
 8001a3c:	e00a      	b.n	8001a54 <pCommunicationFloatToString+0xa4>
		fAux = fAux/10;
 8001a3e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001a42:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		iN++;
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	3301      	adds	r3, #1
 8001a52:	623b      	str	r3, [r7, #32]
	while (fAux >= 1) {
 8001a54:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	daeb      	bge.n	8001a3e <pCommunicationFloatToString+0x8e>
	}

	// Enquanto ainda nao tiver preenchido o numero de casas desejadas
	while (iN > 0) {
 8001a66:	e040      	b.n	8001aea <pCommunicationFloatToString+0x13a>
		fAux = fAux*10;
 8001a68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a6c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a74:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		// Seleciona o numero da enesima posicao
		int iNumber = floor(fmod(fAux, 10));
 8001a78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a7a:	f7fe fd8d 	bl	8000598 <__aeabi_f2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8001b00 <pCommunicationFloatToString+0x150>
 8001a86:	ec43 2b10 	vmov	d0, r2, r3
 8001a8a:	f00d fcad 	bl	800f3e8 <fmod>
 8001a8e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a92:	eef0 7a60 	vmov.f32	s15, s1
 8001a96:	eeb0 0a47 	vmov.f32	s0, s14
 8001a9a:	eef0 0a67 	vmov.f32	s1, s15
 8001a9e:	f00d fcd3 	bl	800f448 <floor>
 8001aa2:	ec53 2b10 	vmov	r2, r3, d0
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f87d 	bl	8000ba8 <__aeabi_d2iz>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	617b      	str	r3, [r7, #20]
		// Adiciona virgula na posicao correta
		if (iN == nCasasDec) {
 8001ab2:	6a3a      	ldr	r2, [r7, #32]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d107      	bne.n	8001aca <pCommunicationFloatToString+0x11a>
			pOutputString[iPos] = ',';
 8001aba:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <pCommunicationFloatToString+0x15c>)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	4413      	add	r3, r2
 8001ac0:	222c      	movs	r2, #44	@ 0x2c
 8001ac2:	701a      	strb	r2, [r3, #0]
			iPos++;
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	61fb      	str	r3, [r7, #28]
		}

		// Adiciona char igual ao numero, na string de retorno
		pOutputString[iPos] = pNumberToChar[iNumber];
 8001aca:	f107 0208 	add.w	r2, r7, #8
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	7819      	ldrb	r1, [r3, #0]
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b0c <pCommunicationFloatToString+0x15c>)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	4413      	add	r3, r2
 8001ada:	460a      	mov	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
		iPos++;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
		iN--;
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	623b      	str	r3, [r7, #32]
	while (iN > 0) {
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	dcbb      	bgt.n	8001a68 <pCommunicationFloatToString+0xb8>
	}

	return &pOutputString;
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <pCommunicationFloatToString+0x15c>)
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3728      	adds	r7, #40	@ 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	f3af 8000 	nop.w
 8001b00:	00000000 	.word	0x00000000
 8001b04:	40240000 	.word	0x40240000
 8001b08:	0800f770 	.word	0x0800f770
 8001b0c:	20000244 	.word	0x20000244

08001b10 <vCommunicationSendString>:
//
// INPUT PARAMS: char* - string a ser enviada
//
// OUTPUT PARAMS: n/a
// ********************************************** //
void vCommunicationSendString(char* str) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(str); i++) {
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	e00b      	b.n	8001b36 <vCommunicationSendString+0x26>
//	  HAL_UART_Transmit(&huart3, &str[i], 1, 1000);
	  HAL_UART_Transmit_IT(pUART, &str[i], 1);
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <vCommunicationSendString+0x40>)
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f008 f9f4 	bl	8009f18 <HAL_UART_Transmit_IT>
	for (int i = 0; i < strlen(str); i++) {
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3301      	adds	r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7fe fb72 	bl	8000220 <strlen>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d8ec      	bhi.n	8001b1e <vCommunicationSendString+0xe>
	}
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200002a8 	.word	0x200002a8

08001b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b5a:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <MX_DMA_Init+0x60>)
 8001b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b5e:	4a15      	ldr	r2, [pc, #84]	@ (8001bb4 <MX_DMA_Init+0x60>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b66:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <MX_DMA_Init+0x60>)
 8001b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <MX_DMA_Init+0x60>)
 8001b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b76:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb4 <MX_DMA_Init+0x60>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <MX_DMA_Init+0x60>)
 8001b80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2105      	movs	r1, #5
 8001b8e:	200d      	movs	r0, #13
 8001b90:	f002 fd39 	bl	8004606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b94:	200d      	movs	r0, #13
 8001b96:	f002 fd50 	bl	800463a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2105      	movs	r1, #5
 8001b9e:	200e      	movs	r0, #14
 8001ba0:	f002 fd31 	bl	8004606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ba4:	200e      	movs	r0, #14
 8001ba6:	f002 fd48 	bl	800463a <HAL_NVIC_EnableIRQ>

}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	@ 0x28
 8001bbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bce:	4b3b      	ldr	r3, [pc, #236]	@ (8001cbc <MX_GPIO_Init+0x104>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd2:	4a3a      	ldr	r2, [pc, #232]	@ (8001cbc <MX_GPIO_Init+0x104>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bda:	4b38      	ldr	r3, [pc, #224]	@ (8001cbc <MX_GPIO_Init+0x104>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be6:	4b35      	ldr	r3, [pc, #212]	@ (8001cbc <MX_GPIO_Init+0x104>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	4a34      	ldr	r2, [pc, #208]	@ (8001cbc <MX_GPIO_Init+0x104>)
 8001bec:	f043 0320 	orr.w	r3, r3, #32
 8001bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf2:	4b32      	ldr	r3, [pc, #200]	@ (8001cbc <MX_GPIO_Init+0x104>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8001cbc <MX_GPIO_Init+0x104>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c02:	4a2e      	ldr	r2, [pc, #184]	@ (8001cbc <MX_GPIO_Init+0x104>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cbc <MX_GPIO_Init+0x104>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	4b29      	ldr	r3, [pc, #164]	@ (8001cbc <MX_GPIO_Init+0x104>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1a:	4a28      	ldr	r2, [pc, #160]	@ (8001cbc <MX_GPIO_Init+0x104>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c22:	4b26      	ldr	r3, [pc, #152]	@ (8001cbc <MX_GPIO_Init+0x104>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Motor_Dir_IN2_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f44f 6142 	mov.w	r1, #3104	@ 0xc20
 8001c34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c38:	f003 f9ea 	bl	8005010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Esq_IN3_Pin|Motor_Dir_IN1_Pin|Motor_Esq_IN4_Pin, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f44f 5194 	mov.w	r1, #4736	@ 0x1280
 8001c42:	481f      	ldr	r0, [pc, #124]	@ (8001cc0 <MX_GPIO_Init+0x108>)
 8001c44:	f003 f9e4 	bl	8005010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c4e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4819      	ldr	r0, [pc, #100]	@ (8001cc4 <MX_GPIO_Init+0x10c>)
 8001c60:	f003 f854 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Motor_Dir_IN2_Pin|RED_LED_Pin;
 8001c64:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8001c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c80:	f003 f844 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN3_Pin|Motor_Dir_IN1_Pin|Motor_Esq_IN4_Pin;
 8001c84:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8001c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4808      	ldr	r0, [pc, #32]	@ (8001cc0 <MX_GPIO_Init+0x108>)
 8001c9e:	f003 f835 	bl	8004d0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2103      	movs	r1, #3
 8001ca6:	2028      	movs	r0, #40	@ 0x28
 8001ca8:	f002 fcad 	bl	8004606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cac:	2028      	movs	r0, #40	@ 0x28
 8001cae:	f002 fcc4 	bl	800463a <HAL_NVIC_EnableIRQ>

}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	@ 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	48000400 	.word	0x48000400
 8001cc4:	48000800 	.word	0x48000800

08001cc8 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <MX_I2C2_Init+0x74>)
 8001cce:	4a1c      	ldr	r2, [pc, #112]	@ (8001d40 <MX_I2C2_Init+0x78>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <MX_I2C2_Init+0x74>)
 8001cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d44 <MX_I2C2_Init+0x7c>)
 8001cd6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <MX_I2C2_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cde:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <MX_I2C2_Init+0x74>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <MX_I2C2_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001cea:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <MX_I2C2_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cf0:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <MX_I2C2_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <MX_I2C2_Init+0x74>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <MX_I2C2_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d02:	480e      	ldr	r0, [pc, #56]	@ (8001d3c <MX_I2C2_Init+0x74>)
 8001d04:	f003 f9b4 	bl	8005070 <HAL_I2C_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d0e:	f000 ff08 	bl	8002b22 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d12:	2100      	movs	r1, #0
 8001d14:	4809      	ldr	r0, [pc, #36]	@ (8001d3c <MX_I2C2_Init+0x74>)
 8001d16:	f004 ffbb 	bl	8006c90 <HAL_I2CEx_ConfigAnalogFilter>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d20:	f000 feff 	bl	8002b22 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d24:	2100      	movs	r1, #0
 8001d26:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <MX_I2C2_Init+0x74>)
 8001d28:	f004 fffd 	bl	8006d26 <HAL_I2CEx_ConfigDigitalFilter>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d32:	f000 fef6 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200002ac 	.word	0x200002ac
 8001d40:	40005800 	.word	0x40005800
 8001d44:	30a0a7fb 	.word	0x30a0a7fb

08001d48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b0a0      	sub	sp, #128	@ 0x80
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d60:	f107 0318 	add.w	r3, r7, #24
 8001d64:	2254      	movs	r2, #84	@ 0x54
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f00b fab2 	bl	800d2d2 <memset>
  if(i2cHandle->Instance==I2C2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a5f      	ldr	r2, [pc, #380]	@ (8001ef0 <HAL_I2C_MspInit+0x1a8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	f040 80b6 	bne.w	8001ee6 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d7a:	2380      	movs	r3, #128	@ 0x80
 8001d7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d82:	f107 0318 	add.w	r3, r7, #24
 8001d86:	4618      	mov	r0, r3
 8001d88:	f005 fdfc 	bl	8007984 <HAL_RCCEx_PeriphCLKConfig>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d92:	f000 fec6 	bl	8002b22 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d96:	4b57      	ldr	r3, [pc, #348]	@ (8001ef4 <HAL_I2C_MspInit+0x1ac>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	4a56      	ldr	r2, [pc, #344]	@ (8001ef4 <HAL_I2C_MspInit+0x1ac>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da2:	4b54      	ldr	r3, [pc, #336]	@ (8001ef4 <HAL_I2C_MspInit+0x1ac>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	4b51      	ldr	r3, [pc, #324]	@ (8001ef4 <HAL_I2C_MspInit+0x1ac>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	4a50      	ldr	r2, [pc, #320]	@ (8001ef4 <HAL_I2C_MspInit+0x1ac>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dba:	4b4e      	ldr	r3, [pc, #312]	@ (8001ef4 <HAL_I2C_MspInit+0x1ac>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dca:	2312      	movs	r3, #18
 8001dcc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dda:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001dde:	4619      	mov	r1, r3
 8001de0:	4845      	ldr	r0, [pc, #276]	@ (8001ef8 <HAL_I2C_MspInit+0x1b0>)
 8001de2:	f002 ff93 	bl	8004d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001de6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dec:	2312      	movs	r3, #18
 8001dee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e00:	4619      	mov	r1, r3
 8001e02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e06:	f002 ff81 	bl	8004d0c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef4 <HAL_I2C_MspInit+0x1ac>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0e:	4a39      	ldr	r2, [pc, #228]	@ (8001ef4 <HAL_I2C_MspInit+0x1ac>)
 8001e10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e16:	4b37      	ldr	r3, [pc, #220]	@ (8001ef4 <HAL_I2C_MspInit+0x1ac>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel3;
 8001e22:	4b36      	ldr	r3, [pc, #216]	@ (8001efc <HAL_I2C_MspInit+0x1b4>)
 8001e24:	4a36      	ldr	r2, [pc, #216]	@ (8001f00 <HAL_I2C_MspInit+0x1b8>)
 8001e26:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001e28:	4b34      	ldr	r3, [pc, #208]	@ (8001efc <HAL_I2C_MspInit+0x1b4>)
 8001e2a:	2212      	movs	r2, #18
 8001e2c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e2e:	4b33      	ldr	r3, [pc, #204]	@ (8001efc <HAL_I2C_MspInit+0x1b4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e34:	4b31      	ldr	r3, [pc, #196]	@ (8001efc <HAL_I2C_MspInit+0x1b4>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e3a:	4b30      	ldr	r3, [pc, #192]	@ (8001efc <HAL_I2C_MspInit+0x1b4>)
 8001e3c:	2280      	movs	r2, #128	@ 0x80
 8001e3e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e40:	4b2e      	ldr	r3, [pc, #184]	@ (8001efc <HAL_I2C_MspInit+0x1b4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e46:	4b2d      	ldr	r3, [pc, #180]	@ (8001efc <HAL_I2C_MspInit+0x1b4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001efc <HAL_I2C_MspInit+0x1b4>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e52:	4b2a      	ldr	r3, [pc, #168]	@ (8001efc <HAL_I2C_MspInit+0x1b4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001e58:	4828      	ldr	r0, [pc, #160]	@ (8001efc <HAL_I2C_MspInit+0x1b4>)
 8001e5a:	f002 fc17 	bl	800468c <HAL_DMA_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001e64:	f000 fe5d 	bl	8002b22 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a24      	ldr	r2, [pc, #144]	@ (8001efc <HAL_I2C_MspInit+0x1b4>)
 8001e6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e6e:	4a23      	ldr	r2, [pc, #140]	@ (8001efc <HAL_I2C_MspInit+0x1b4>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8001e74:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <HAL_I2C_MspInit+0x1bc>)
 8001e76:	4a24      	ldr	r2, [pc, #144]	@ (8001f08 <HAL_I2C_MspInit+0x1c0>)
 8001e78:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001e7a:	4b22      	ldr	r3, [pc, #136]	@ (8001f04 <HAL_I2C_MspInit+0x1bc>)
 8001e7c:	2213      	movs	r2, #19
 8001e7e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e80:	4b20      	ldr	r3, [pc, #128]	@ (8001f04 <HAL_I2C_MspInit+0x1bc>)
 8001e82:	2210      	movs	r2, #16
 8001e84:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e86:	4b1f      	ldr	r3, [pc, #124]	@ (8001f04 <HAL_I2C_MspInit+0x1bc>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <HAL_I2C_MspInit+0x1bc>)
 8001e8e:	2280      	movs	r2, #128	@ 0x80
 8001e90:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <HAL_I2C_MspInit+0x1bc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <HAL_I2C_MspInit+0x1bc>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <HAL_I2C_MspInit+0x1bc>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <HAL_I2C_MspInit+0x1bc>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001eaa:	4816      	ldr	r0, [pc, #88]	@ (8001f04 <HAL_I2C_MspInit+0x1bc>)
 8001eac:	f002 fbee 	bl	800468c <HAL_DMA_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001eb6:	f000 fe34 	bl	8002b22 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a11      	ldr	r2, [pc, #68]	@ (8001f04 <HAL_I2C_MspInit+0x1bc>)
 8001ebe:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ec0:	4a10      	ldr	r2, [pc, #64]	@ (8001f04 <HAL_I2C_MspInit+0x1bc>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2105      	movs	r1, #5
 8001eca:	2021      	movs	r0, #33	@ 0x21
 8001ecc:	f002 fb9b 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001ed0:	2021      	movs	r0, #33	@ 0x21
 8001ed2:	f002 fbb2 	bl	800463a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2105      	movs	r1, #5
 8001eda:	2022      	movs	r0, #34	@ 0x22
 8001edc:	f002 fb93 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001ee0:	2022      	movs	r0, #34	@ 0x22
 8001ee2:	f002 fbaa 	bl	800463a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	3780      	adds	r7, #128	@ 0x80
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40005800 	.word	0x40005800
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	48000800 	.word	0x48000800
 8001efc:	20000300 	.word	0x20000300
 8001f00:	40020030 	.word	0x40020030
 8001f04:	20000360 	.word	0x20000360
 8001f08:	40020044 	.word	0x40020044

08001f0c <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         0 if success
 */
char lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	4608      	mov	r0, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	70fb      	strb	r3, [r7, #3]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	70bb      	strb	r3, [r7, #2]
 8001f22:	4613      	mov	r3, r2
 8001f24:	707b      	strb	r3, [r7, #1]

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001f26:	2300      	movs	r3, #0
 8001f28:	733b      	strb	r3, [r7, #12]
    unsigned short usCont;

    lcdParams.hi2c      = hi2c;
 8001f2a:	4a53      	ldr	r2, [pc, #332]	@ (8002078 <lcdInit+0x16c>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b50      	ldr	r3, [pc, #320]	@ (8002078 <lcdInit+0x16c>)
 8001f38:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8001f3a:	4a4f      	ldr	r2, [pc, #316]	@ (8002078 <lcdInit+0x16c>)
 8001f3c:	78bb      	ldrb	r3, [r7, #2]
 8001f3e:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8001f40:	4a4d      	ldr	r2, [pc, #308]	@ (8002078 <lcdInit+0x16c>)
 8001f42:	787b      	ldrb	r3, [r7, #1]
 8001f44:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001f46:	4b4c      	ldr	r3, [pc, #304]	@ (8002078 <lcdInit+0x16c>)
 8001f48:	2208      	movs	r2, #8
 8001f4a:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001f4c:	4b4b      	ldr	r3, [pc, #300]	@ (800207c <lcdInit+0x170>)
 8001f4e:	2234      	movs	r2, #52	@ 0x34
 8001f50:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001f52:	4b4a      	ldr	r3, [pc, #296]	@ (800207c <lcdInit+0x170>)
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	4b49      	ldr	r3, [pc, #292]	@ (800207c <lcdInit+0x170>)
 8001f58:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001f5a:	4b48      	ldr	r3, [pc, #288]	@ (800207c <lcdInit+0x170>)
 8001f5c:	2230      	movs	r2, #48	@ 0x30
 8001f5e:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8001f60:	2300      	movs	r3, #0
 8001f62:	737b      	strb	r3, [r7, #13]
 8001f64:	e02f      	b.n	8001fc6 <lcdInit+0xba>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001f66:	4b44      	ldr	r3, [pc, #272]	@ (8002078 <lcdInit+0x16c>)
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	4b43      	ldr	r3, [pc, #268]	@ (8002078 <lcdInit+0x16c>)
 8001f6c:	799b      	ldrb	r3, [r3, #6]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	2303      	movs	r3, #3
 8001f72:	4a42      	ldr	r2, [pc, #264]	@ (800207c <lcdInit+0x170>)
 8001f74:	f003 f918 	bl	80051a8 <HAL_I2C_Master_Transmit_DMA>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <lcdInit+0x76>
            return -1;
 8001f7e:	23ff      	movs	r3, #255	@ 0xff
 8001f80:	e076      	b.n	8002070 <lcdInit+0x164>
        }

        usCont = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	81fb      	strh	r3, [r7, #14]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001f86:	e009      	b.n	8001f9c <lcdInit+0x90>
        	if(usCont++ == LCD_COMM_TIMEOUT)
 8001f88:	89fb      	ldrh	r3, [r7, #14]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	81fa      	strh	r2, [r7, #14]
 8001f8e:	2bc8      	cmp	r3, #200	@ 0xc8
 8001f90:	d101      	bne.n	8001f96 <lcdInit+0x8a>
        		return -1;
 8001f92:	23ff      	movs	r3, #255	@ 0xff
 8001f94:	e06c      	b.n	8002070 <lcdInit+0x164>
        	HAL_Delay(5);
 8001f96:	2005      	movs	r0, #5
 8001f98:	f002 fa14 	bl	80043c4 <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001f9c:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <lcdInit+0x16c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 faf2 	bl	800558a <HAL_I2C_GetState>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b20      	cmp	r3, #32
 8001faa:	d1ed      	bne.n	8001f88 <lcdInit+0x7c>
        }

        if (i == 2) {
 8001fac:	7b7b      	ldrb	r3, [r7, #13]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d103      	bne.n	8001fba <lcdInit+0xae>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
        	HAL_Delay(5);
 8001fb2:	2005      	movs	r0, #5
 8001fb4:	f002 fa06 	bl	80043c4 <HAL_Delay>
 8001fb8:	e002      	b.n	8001fc0 <lcdInit+0xb4>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
        	HAL_Delay(5);
 8001fba:	2005      	movs	r0, #5
 8001fbc:	f002 fa02 	bl	80043c4 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 8001fc0:	7b7b      	ldrb	r3, [r7, #13]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	737b      	strb	r3, [r7, #13]
 8001fc6:	7b7b      	ldrb	r3, [r7, #13]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d9cc      	bls.n	8001f66 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800207c <lcdInit+0x170>)
 8001fce:	222c      	movs	r2, #44	@ 0x2c
 8001fd0:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800207c <lcdInit+0x170>)
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	4b29      	ldr	r3, [pc, #164]	@ (800207c <lcdInit+0x170>)
 8001fd8:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001fda:	4b28      	ldr	r3, [pc, #160]	@ (800207c <lcdInit+0x170>)
 8001fdc:	2228      	movs	r2, #40	@ 0x28
 8001fde:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001fe0:	4b25      	ldr	r3, [pc, #148]	@ (8002078 <lcdInit+0x16c>)
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <lcdInit+0x16c>)
 8001fe6:	799b      	ldrb	r3, [r3, #6]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	2303      	movs	r3, #3
 8001fec:	4a23      	ldr	r2, [pc, #140]	@ (800207c <lcdInit+0x170>)
 8001fee:	f003 f8db 	bl	80051a8 <HAL_I2C_Master_Transmit_DMA>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <lcdInit+0xf0>
        return -1;
 8001ff8:	23ff      	movs	r3, #255	@ 0xff
 8001ffa:	e039      	b.n	8002070 <lcdInit+0x164>
    }

    usCont = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8002000:	e009      	b.n	8002016 <lcdInit+0x10a>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8002002:	89fb      	ldrh	r3, [r7, #14]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	81fa      	strh	r2, [r7, #14]
 8002008:	2bc8      	cmp	r3, #200	@ 0xc8
 800200a:	d101      	bne.n	8002010 <lcdInit+0x104>
    		return -1;
 800200c:	23ff      	movs	r3, #255	@ 0xff
 800200e:	e02f      	b.n	8002070 <lcdInit+0x164>
    	HAL_Delay(5);
 8002010:	2005      	movs	r0, #5
 8002012:	f002 f9d7 	bl	80043c4 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8002016:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <lcdInit+0x16c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f003 fab5 	bl	800558a <HAL_I2C_GetState>
 8002020:	4603      	mov	r3, r0
 8002022:	2b20      	cmp	r3, #32
 8002024:	d1ed      	bne.n	8002002 <lcdInit+0xf6>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8002026:	7b3b      	ldrb	r3, [r7, #12]
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	b2db      	uxtb	r3, r3
 800202e:	733b      	strb	r3, [r7, #12]

    if (lcdParams.lines > 1) {
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <lcdInit+0x16c>)
 8002032:	791b      	ldrb	r3, [r3, #4]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d904      	bls.n	8002042 <lcdInit+0x136>
        lcdData |= LCD_BIT_2LINE;
 8002038:	7b3b      	ldrb	r3, [r7, #12]
 800203a:	f043 0308 	orr.w	r3, r3, #8
 800203e:	b2db      	uxtb	r3, r3
 8002040:	733b      	strb	r3, [r7, #12]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	4619      	mov	r1, r3
 8002048:	2000      	movs	r0, #0
 800204a:	f000 f945 	bl	80022d8 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 800204e:	2101      	movs	r1, #1
 8002050:	2001      	movs	r0, #1
 8002052:	f000 f815 	bl	8002080 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8002056:	2101      	movs	r1, #1
 8002058:	2007      	movs	r0, #7
 800205a:	f000 f811 	bl	8002080 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 800205e:	2101      	movs	r1, #1
 8002060:	2002      	movs	r0, #2
 8002062:	f000 f80d 	bl	8002080 <lcdCommand>
    lcdCursorHome();
 8002066:	2101      	movs	r1, #1
 8002068:	2005      	movs	r0, #5
 800206a:	f000 f809 	bl	8002080 <lcdCommand>

    return 0;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200003c8 	.word	0x200003c8
 800207c:	200003c0 	.word	0x200003c0

08002080 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          0 if success
 */
char lcdCommand(LCDCommands command, LCDParamsActions action) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	460a      	mov	r2, r1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8002094:	79bb      	ldrb	r3, [r7, #6]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d064      	beq.n	8002164 <lcdCommand+0xe4>
 800209a:	2b01      	cmp	r3, #1
 800209c:	f040 80aa 	bne.w	80021f4 <lcdCommand+0x174>
        case LCD_PARAM_SET:
            switch (command) {
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	2b07      	cmp	r3, #7
 80020a6:	d85a      	bhi.n	800215e <lcdCommand+0xde>
 80020a8:	a201      	add	r2, pc, #4	@ (adr r2, 80020b0 <lcdCommand+0x30>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	080020d1 	.word	0x080020d1
 80020b4:	08002101 	.word	0x08002101
 80020b8:	080020e1 	.word	0x080020e1
 80020bc:	080020f1 	.word	0x080020f1
 80020c0:	0800211b 	.word	0x0800211b
 80020c4:	08002145 	.word	0x08002145
 80020c8:	08002135 	.word	0x08002135
 80020cc:	0800214f 	.word	0x0800214f
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 80020d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002244 <lcdCommand+0x1c4>)
 80020d2:	7a1b      	ldrb	r3, [r3, #8]
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b5a      	ldr	r3, [pc, #360]	@ (8002244 <lcdCommand+0x1c4>)
 80020dc:	721a      	strb	r2, [r3, #8]
                    break;
 80020de:	e040      	b.n	8002162 <lcdCommand+0xe2>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 80020e0:	4b58      	ldr	r3, [pc, #352]	@ (8002244 <lcdCommand+0x1c4>)
 80020e2:	7a1b      	ldrb	r3, [r3, #8]
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4b56      	ldr	r3, [pc, #344]	@ (8002244 <lcdCommand+0x1c4>)
 80020ec:	721a      	strb	r2, [r3, #8]
                    break;
 80020ee:	e038      	b.n	8002162 <lcdCommand+0xe2>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 80020f0:	4b54      	ldr	r3, [pc, #336]	@ (8002244 <lcdCommand+0x1c4>)
 80020f2:	7a1b      	ldrb	r3, [r3, #8]
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b52      	ldr	r3, [pc, #328]	@ (8002244 <lcdCommand+0x1c4>)
 80020fc:	721a      	strb	r2, [r3, #8]
                    break;
 80020fe:	e030      	b.n	8002162 <lcdCommand+0xe2>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 8002104:	f107 030f 	add.w	r3, r7, #15
 8002108:	4619      	mov	r1, r3
 800210a:	2000      	movs	r0, #0
 800210c:	f000 f8e4 	bl	80022d8 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(5);
 8002110:	2005      	movs	r0, #5
 8002112:	f002 f957 	bl	80043c4 <HAL_Delay>
                        return 0;
 8002116:	2300      	movs	r3, #0
 8002118:	e090      	b.n	800223c <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 800211a:	2302      	movs	r3, #2
 800211c:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == -1) {
 800211e:	f107 030f 	add.w	r3, r7, #15
 8002122:	4619      	mov	r1, r3
 8002124:	2000      	movs	r0, #0
 8002126:	f000 f8d7 	bl	80022d8 <lcdWriteByte>
                        return -1;
                    } else {
                    	HAL_Delay(5);
 800212a:	2005      	movs	r0, #5
 800212c:	f002 f94a 	bl	80043c4 <HAL_Delay>
                        return 0;
 8002130:	2300      	movs	r3, #0
 8002132:	e083      	b.n	800223c <lcdCommand+0x1bc>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8002134:	4b43      	ldr	r3, [pc, #268]	@ (8002244 <lcdCommand+0x1c4>)
 8002136:	7a5b      	ldrb	r3, [r3, #9]
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4b41      	ldr	r3, [pc, #260]	@ (8002244 <lcdCommand+0x1c4>)
 8002140:	725a      	strb	r2, [r3, #9]
                    break;
 8002142:	e00e      	b.n	8002162 <lcdCommand+0xe2>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8002144:	4b3f      	ldr	r3, [pc, #252]	@ (8002244 <lcdCommand+0x1c4>)
 8002146:	7a5a      	ldrb	r2, [r3, #9]
 8002148:	4b3e      	ldr	r3, [pc, #248]	@ (8002244 <lcdCommand+0x1c4>)
 800214a:	725a      	strb	r2, [r3, #9]
                    break;
 800214c:	e009      	b.n	8002162 <lcdCommand+0xe2>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 800214e:	4b3d      	ldr	r3, [pc, #244]	@ (8002244 <lcdCommand+0x1c4>)
 8002150:	7a5b      	ldrb	r3, [r3, #9]
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b3a      	ldr	r3, [pc, #232]	@ (8002244 <lcdCommand+0x1c4>)
 800215a:	725a      	strb	r2, [r3, #9]
                    break;
 800215c:	e001      	b.n	8002162 <lcdCommand+0xe2>

                default:
                    return -1;
 800215e:	23ff      	movs	r3, #255	@ 0xff
 8002160:	e06c      	b.n	800223c <lcdCommand+0x1bc>
            }

            break;
 8002162:	e049      	b.n	80021f8 <lcdCommand+0x178>

        case LCD_PARAM_UNSET:
            switch (command) {
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	3b01      	subs	r3, #1
 8002168:	2b07      	cmp	r3, #7
 800216a:	d840      	bhi.n	80021ee <lcdCommand+0x16e>
 800216c:	a201      	add	r2, pc, #4	@ (adr r2, 8002174 <lcdCommand+0xf4>)
 800216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002172:	bf00      	nop
 8002174:	08002195 	.word	0x08002195
 8002178:	080021ef 	.word	0x080021ef
 800217c:	080021a5 	.word	0x080021a5
 8002180:	080021b5 	.word	0x080021b5
 8002184:	080021ef 	.word	0x080021ef
 8002188:	080021d5 	.word	0x080021d5
 800218c:	080021c5 	.word	0x080021c5
 8002190:	080021df 	.word	0x080021df
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8002194:	4b2b      	ldr	r3, [pc, #172]	@ (8002244 <lcdCommand+0x1c4>)
 8002196:	7a1b      	ldrb	r3, [r3, #8]
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <lcdCommand+0x1c4>)
 80021a0:	721a      	strb	r2, [r3, #8]
                    break;
 80021a2:	e026      	b.n	80021f2 <lcdCommand+0x172>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 80021a4:	4b27      	ldr	r3, [pc, #156]	@ (8002244 <lcdCommand+0x1c4>)
 80021a6:	7a1b      	ldrb	r3, [r3, #8]
 80021a8:	f023 0302 	bic.w	r3, r3, #2
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <lcdCommand+0x1c4>)
 80021b0:	721a      	strb	r2, [r3, #8]
                    break;
 80021b2:	e01e      	b.n	80021f2 <lcdCommand+0x172>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 80021b4:	4b23      	ldr	r3, [pc, #140]	@ (8002244 <lcdCommand+0x1c4>)
 80021b6:	7a1b      	ldrb	r3, [r3, #8]
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4b21      	ldr	r3, [pc, #132]	@ (8002244 <lcdCommand+0x1c4>)
 80021c0:	721a      	strb	r2, [r3, #8]
                    break;
 80021c2:	e016      	b.n	80021f2 <lcdCommand+0x172>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 80021c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002244 <lcdCommand+0x1c4>)
 80021c6:	7a5b      	ldrb	r3, [r3, #9]
 80021c8:	f023 0302 	bic.w	r3, r3, #2
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <lcdCommand+0x1c4>)
 80021d0:	725a      	strb	r2, [r3, #9]
                    break;
 80021d2:	e00e      	b.n	80021f2 <lcdCommand+0x172>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <lcdCommand+0x1c4>)
 80021d6:	7a5a      	ldrb	r2, [r3, #9]
 80021d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <lcdCommand+0x1c4>)
 80021da:	725a      	strb	r2, [r3, #9]
                    break;
 80021dc:	e009      	b.n	80021f2 <lcdCommand+0x172>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 80021de:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <lcdCommand+0x1c4>)
 80021e0:	7a5b      	ldrb	r3, [r3, #9]
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <lcdCommand+0x1c4>)
 80021ea:	725a      	strb	r2, [r3, #9]
                    break;
 80021ec:	e001      	b.n	80021f2 <lcdCommand+0x172>

                default:
                    return -1;
 80021ee:	23ff      	movs	r3, #255	@ 0xff
 80021f0:	e024      	b.n	800223c <lcdCommand+0x1bc>
            }

            break;
 80021f2:	e001      	b.n	80021f8 <lcdCommand+0x178>

        default:
            return -1;
 80021f4:	23ff      	movs	r3, #255	@ 0xff
 80021f6:	e021      	b.n	800223c <lcdCommand+0x1bc>
    }

    /* Now lets send the command */
    switch (command) {
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	dc16      	bgt.n	800222c <lcdCommand+0x1ac>
 80021fe:	2b06      	cmp	r3, #6
 8002200:	da0d      	bge.n	800221e <lcdCommand+0x19e>
 8002202:	2b01      	cmp	r3, #1
 8002204:	d004      	beq.n	8002210 <lcdCommand+0x190>
 8002206:	2b00      	cmp	r3, #0
 8002208:	dd10      	ble.n	800222c <lcdCommand+0x1ac>
 800220a:	3b03      	subs	r3, #3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d80d      	bhi.n	800222c <lcdCommand+0x1ac>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8002210:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <lcdCommand+0x1c4>)
 8002212:	7a1b      	ldrb	r3, [r3, #8]
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	b2db      	uxtb	r3, r3
 800221a:	73fb      	strb	r3, [r7, #15]
            break;
 800221c:	e007      	b.n	800222e <lcdCommand+0x1ae>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 800221e:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <lcdCommand+0x1c4>)
 8002220:	7a5b      	ldrb	r3, [r3, #9]
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	b2db      	uxtb	r3, r3
 8002228:	73fb      	strb	r3, [r7, #15]
            break;
 800222a:	e000      	b.n	800222e <lcdCommand+0x1ae>

        default:
            break;
 800222c:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 800222e:	f107 030f 	add.w	r3, r7, #15
 8002232:	4619      	mov	r1, r3
 8002234:	2000      	movs	r0, #0
 8002236:	f000 f84f 	bl	80022d8 <lcdWriteByte>
 800223a:	4603      	mov	r3, r0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200003c8 	.word	0x200003c8

08002248 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        0 if success
 */
char lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	460a      	mov	r2, r1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	4613      	mov	r3, r2
 8002256:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8002258:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <lcdSetCursorPosition+0x50>)
 800225a:	791b      	ldrb	r3, [r3, #4]
 800225c:	79ba      	ldrb	r2, [r7, #6]
 800225e:	429a      	cmp	r2, r3
 8002260:	d303      	bcc.n	800226a <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8002262:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <lcdSetCursorPosition+0x50>)
 8002264:	791b      	ldrb	r3, [r3, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 800226a:	79bb      	ldrb	r3, [r7, #6]
 800226c:	4a0b      	ldr	r2, [pc, #44]	@ (800229c <lcdSetCursorPosition+0x54>)
 800226e:	5cd2      	ldrb	r2, [r2, r3]
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	4413      	add	r3, r2
 8002274:	b2db      	uxtb	r3, r3
 8002276:	b25b      	sxtb	r3, r3
 8002278:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800227c:	b25b      	sxtb	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8002282:	f107 030f 	add.w	r3, r7, #15
 8002286:	4619      	mov	r1, r3
 8002288:	2000      	movs	r0, #0
 800228a:	f000 f825 	bl	80022d8 <lcdWriteByte>
 800228e:	4603      	mov	r3, r0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200003c8 	.word	0x200003c8
 800229c:	0800f794 	.word	0x0800f794

080022a0 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        0 if success
 */
char lcdPrintStr(uint8_t * data, uint8_t length) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e009      	b.n	80022c6 <lcdPrintStr+0x26>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == -1) {
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	2001      	movs	r0, #1
 80022bc:	f000 f80c 	bl	80022d8 <lcdWriteByte>
    for (uint8_t i = 0; i < length; ++i) {
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	3301      	adds	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d3f1      	bcc.n	80022b2 <lcdPrintStr+0x12>
            return -1;
        }
    }

    return 0;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          0 if success
 */
static char lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
	unsigned short usCont;

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 80022e4:	4b38      	ldr	r3, [pc, #224]	@ (80023c8 <lcdWriteByte+0xf0>)
 80022e6:	79da      	ldrb	r2, [r3, #7]
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	f023 030f 	bic.w	r3, r3, #15
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b32      	ldr	r3, [pc, #200]	@ (80023cc <lcdWriteByte+0xf4>)
 8002304:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8002306:	4b31      	ldr	r3, [pc, #196]	@ (80023cc <lcdWriteByte+0xf4>)
 8002308:	781a      	ldrb	r2, [r3, #0]
 800230a:	4b30      	ldr	r3, [pc, #192]	@ (80023cc <lcdWriteByte+0xf4>)
 800230c:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 800230e:	4b2e      	ldr	r3, [pc, #184]	@ (80023c8 <lcdWriteByte+0xf0>)
 8002310:	79da      	ldrb	r2, [r3, #7]
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	4313      	orrs	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	b25a      	sxtb	r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	b25b      	sxtb	r3, r3
 8002320:	f023 030f 	bic.w	r3, r3, #15
 8002324:	b25b      	sxtb	r3, r3
 8002326:	4313      	orrs	r3, r2
 8002328:	b25b      	sxtb	r3, r3
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <lcdWriteByte+0xf4>)
 800232e:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8002330:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <lcdWriteByte+0xf0>)
 8002332:	79da      	ldrb	r2, [r3, #7]
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	4313      	orrs	r3, r2
 8002338:	b2da      	uxtb	r2, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	b2db      	uxtb	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f043 0304 	orr.w	r3, r3, #4
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <lcdWriteByte+0xf4>)
 800234e:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8002350:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <lcdWriteByte+0xf4>)
 8002352:	78da      	ldrb	r2, [r3, #3]
 8002354:	4b1d      	ldr	r3, [pc, #116]	@ (80023cc <lcdWriteByte+0xf4>)
 8002356:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8002358:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <lcdWriteByte+0xf0>)
 800235a:	79da      	ldrb	r2, [r3, #7]
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	4313      	orrs	r3, r2
 8002360:	b2db      	uxtb	r3, r3
 8002362:	b25a      	sxtb	r2, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	b25b      	sxtb	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b25b      	sxtb	r3, r3
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b16      	ldr	r3, [pc, #88]	@ (80023cc <lcdWriteByte+0xf4>)
 8002374:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8002376:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <lcdWriteByte+0xf0>)
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <lcdWriteByte+0xf0>)
 800237c:	799b      	ldrb	r3, [r3, #6]
 800237e:	4619      	mov	r1, r3
 8002380:	2306      	movs	r3, #6
 8002382:	4a12      	ldr	r2, [pc, #72]	@ (80023cc <lcdWriteByte+0xf4>)
 8002384:	f002 ff10 	bl	80051a8 <HAL_I2C_Master_Transmit_DMA>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <lcdWriteByte+0xba>
        return -1;
 800238e:	23ff      	movs	r3, #255	@ 0xff
 8002390:	e015      	b.n	80023be <lcdWriteByte+0xe6>
    }

    usCont = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	81fb      	strh	r3, [r7, #14]
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8002396:	e009      	b.n	80023ac <lcdWriteByte+0xd4>
    	if(usCont++ == LCD_COMM_TIMEOUT)
 8002398:	89fb      	ldrh	r3, [r7, #14]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	81fa      	strh	r2, [r7, #14]
 800239e:	2bc8      	cmp	r3, #200	@ 0xc8
 80023a0:	d101      	bne.n	80023a6 <lcdWriteByte+0xce>
    		return -1;
 80023a2:	23ff      	movs	r3, #255	@ 0xff
 80023a4:	e00b      	b.n	80023be <lcdWriteByte+0xe6>
    	HAL_Delay(1);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f002 f80c 	bl	80043c4 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <lcdWriteByte+0xf0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 f8ea 	bl	800558a <HAL_I2C_GetState>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d1ed      	bne.n	8002398 <lcdWriteByte+0xc0>
    }

    return 0;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200003c8 	.word	0x200003c8
 80023cc:	200003c0 	.word	0x200003c0

080023d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d2:	ed2d 8b02 	vpush	{d8}
 80023d6:	f5ad 7d69 	sub.w	sp, sp, #932	@ 0x3a4
 80023da:	af6e      	add	r7, sp, #440	@ 0x1b8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023dc:	f001 ff81 	bl	80042e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023e0:	f000 f90c 	bl	80025fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023e4:	f7ff fbe8 	bl	8001bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80023e8:	f7ff fbb4 	bl	8001b54 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80023ec:	f001 fd50 	bl	8003e90 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 80023f0:	f001 f8ce 	bl	8003590 <MX_TIM3_Init>
  MX_TIM20_Init();
 80023f4:	f001 fa58 	bl	80038a8 <MX_TIM20_Init>
  MX_I2C2_Init();
 80023f8:	f7ff fc66 	bl	8001cc8 <MX_I2C2_Init>
  MX_TIM1_Init();
 80023fc:	f000 ffda 	bl	80033b4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8002400:	f001 fddc 	bl	8003fbc <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8002404:	f001 f936 	bl	8003674 <MX_TIM5_Init>
  MX_TIM16_Init();
 8002408:	f001 f9ba 	bl	8003780 <MX_TIM16_Init>
  MX_TIM17_Init();
 800240c:	f001 fa02 	bl	8003814 <MX_TIM17_Init>
  MX_TIM6_Init();
 8002410:	f001 f97e 	bl	8003710 <MX_TIM6_Init>
  MX_TIM2_Init();
 8002414:	f001 f86e 	bl	80034f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002418:	f001 fd84 	bl	8003f24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(&hi2c2, (uint8_t)0x27, (uint8_t)2, (uint8_t)16);
 800241c:	2310      	movs	r3, #16
 800241e:	2202      	movs	r2, #2
 8002420:	2127      	movs	r1, #39	@ 0x27
 8002422:	4864      	ldr	r0, [pc, #400]	@ (80025b4 <main+0x1e4>)
 8002424:	f7ff fd72 	bl	8001f0c <lcdInit>
  vUltrassonicoInit(pTimerEcoUltrassonicoFrontal,pTimerPWMTrigger) ;
 8002428:	4b63      	ldr	r3, [pc, #396]	@ (80025b8 <main+0x1e8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a63      	ldr	r2, [pc, #396]	@ (80025bc <main+0x1ec>)
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f001 fd06 	bl	8003e44 <vUltrassonicoInit>
  vCommunicationInit(pBleCtrlMain);
 8002438:	4b61      	ldr	r3, [pc, #388]	@ (80025c0 <main+0x1f0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fa91 	bl	8001964 <vCommunicationInit>

  vMotorsInit(pTimPWMMotor, pTimDurationMotor);
 8002442:	4b60      	ldr	r3, [pc, #384]	@ (80025c4 <main+0x1f4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a60      	ldr	r2, [pc, #384]	@ (80025c8 <main+0x1f8>)
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fb6f 	bl	8002b30 <vMotorsInit>
  vCommStateMachineInit(pBleCtrlMain);
 8002452:	4b5b      	ldr	r3, [pc, #364]	@ (80025c0 <main+0x1f0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe ff86 	bl	8001368 <vCommStateMachineInit>

  vTimerInit();
 800245c:	f001 fc86 	bl	8003d6c <vTimerInit>
  iSetTimer(100);
 8002460:	2064      	movs	r0, #100	@ 0x64
 8002462:	f001 fca9 	bl	8003db8 <iSetTimer>

// lider
//  xPidMotorLeft = vPidInit(xPidMotorLeft, 0.005, 0.06, 0, 100, 1);
//  xPidMotorRight = vPidInit(xPidMotorRight, 0.005, 0.06, 0, 100, 1);
// seguidor
   xPidMotorLeft = vPidInit(xPidMotorLeft, fLeftMotorKp, fLeftMotorKi, 0, 100, 1);
 8002466:	4b59      	ldr	r3, [pc, #356]	@ (80025cc <main+0x1fc>)
 8002468:	ed93 8a00 	vldr	s16, [r3]
 800246c:	4b58      	ldr	r3, [pc, #352]	@ (80025d0 <main+0x200>)
 800246e:	edd3 8a00 	vldr	s17, [r3]
 8002472:	4e58      	ldr	r6, [pc, #352]	@ (80025d4 <main+0x204>)
 8002474:	463d      	mov	r5, r7
 8002476:	4c57      	ldr	r4, [pc, #348]	@ (80025d4 <main+0x204>)
 8002478:	2364      	movs	r3, #100	@ 0x64
 800247a:	936c      	str	r3, [sp, #432]	@ 0x1b0
 800247c:	4668      	mov	r0, sp
 800247e:	f104 030c 	add.w	r3, r4, #12
 8002482:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8002486:	4619      	mov	r1, r3
 8002488:	f00a ffb1 	bl	800d3ee <memcpy>
 800248c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002490:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8002494:	ed9f 1a50 	vldr	s2, [pc, #320]	@ 80025d8 <main+0x208>
 8002498:	eef0 0a68 	vmov.f32	s1, s17
 800249c:	eeb0 0a48 	vmov.f32	s0, s16
 80024a0:	4628      	mov	r0, r5
 80024a2:	f000 fcbf 	bl	8002e24 <vPidInit>
 80024a6:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80024aa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80024ae:	4630      	mov	r0, r6
 80024b0:	4619      	mov	r1, r3
 80024b2:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 80024b6:	461a      	mov	r2, r3
 80024b8:	f00a ff99 	bl	800d3ee <memcpy>
   xPidMotorRight = vPidInit(xPidMotorRight, fRightMotorKp, fRightMotorKi, 0, 100, 1);
 80024bc:	4b47      	ldr	r3, [pc, #284]	@ (80025dc <main+0x20c>)
 80024be:	ed93 8a00 	vldr	s16, [r3]
 80024c2:	4b47      	ldr	r3, [pc, #284]	@ (80025e0 <main+0x210>)
 80024c4:	edd3 8a00 	vldr	s17, [r3]
 80024c8:	4e46      	ldr	r6, [pc, #280]	@ (80025e4 <main+0x214>)
 80024ca:	463d      	mov	r5, r7
 80024cc:	4c45      	ldr	r4, [pc, #276]	@ (80025e4 <main+0x214>)
 80024ce:	2364      	movs	r3, #100	@ 0x64
 80024d0:	936c      	str	r3, [sp, #432]	@ 0x1b0
 80024d2:	4668      	mov	r0, sp
 80024d4:	f104 030c 	add.w	r3, r4, #12
 80024d8:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80024dc:	4619      	mov	r1, r3
 80024de:	f00a ff86 	bl	800d3ee <memcpy>
 80024e2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80024e6:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80024ea:	ed9f 1a3b 	vldr	s2, [pc, #236]	@ 80025d8 <main+0x208>
 80024ee:	eef0 0a68 	vmov.f32	s1, s17
 80024f2:	eeb0 0a48 	vmov.f32	s0, s16
 80024f6:	4628      	mov	r0, r5
 80024f8:	f000 fc94 	bl	8002e24 <vPidInit>
 80024fc:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8002500:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002504:	4630      	mov	r0, r6
 8002506:	4619      	mov	r1, r3
 8002508:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 800250c:	461a      	mov	r2, r3
 800250e:	f00a ff6e 	bl	800d3ee <memcpy>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(pTimDurationMotor);
 8002512:	4b2d      	ldr	r3, [pc, #180]	@ (80025c8 <main+0x1f8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f005 fcda 	bl	8007ed0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(pTimFreqFixa_esq);
 800251c:	4b32      	ldr	r3, [pc, #200]	@ (80025e8 <main+0x218>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f005 fcd5 	bl	8007ed0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(pTimFreqFixa_dir);
 8002526:	4b31      	ldr	r3, [pc, #196]	@ (80025ec <main+0x21c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f005 fcd0 	bl	8007ed0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(pTimerGeral);
 8002530:	4b2f      	ldr	r3, [pc, #188]	@ (80025f0 <main+0x220>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f005 fccb 	bl	8007ed0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(pTimFreqFixa_esq, TIM_CHANNEL_1);
 800253a:	4b2b      	ldr	r3, [pc, #172]	@ (80025e8 <main+0x218>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f005 ff09 	bl	8008358 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(pTimFreqFixa_dir, TIM_CHANNEL_1);
 8002546:	4b29      	ldr	r3, [pc, #164]	@ (80025ec <main+0x21c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f005 ff03 	bl	8008358 <HAL_TIM_IC_Start_IT>

  lcdSetCursorPosition(0, 0);
 8002552:	2100      	movs	r1, #0
 8002554:	2000      	movs	r0, #0
 8002556:	f7ff fe77 	bl	8002248 <lcdSetCursorPosition>
  sprintf((char *)ucLCD0Msg, "Esq(mm/s):");
 800255a:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800255e:	4925      	ldr	r1, [pc, #148]	@ (80025f4 <main+0x224>)
 8002560:	4618      	mov	r0, r3
 8002562:	f00a fe53 	bl	800d20c <siprintf>
  lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));
 8002566:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800256a:	4618      	mov	r0, r3
 800256c:	f7fd fe58 	bl	8000220 <strlen>
 8002570:	4603      	mov	r3, r0
 8002572:	b2da      	uxtb	r2, r3
 8002574:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fe90 	bl	80022a0 <lcdPrintStr>
  lcdSetCursorPosition(0, 1);
 8002580:	2101      	movs	r1, #1
 8002582:	2000      	movs	r0, #0
 8002584:	f7ff fe60 	bl	8002248 <lcdSetCursorPosition>
  sprintf((char *)ucLCD0Msg, "Dir(mm/s):");
 8002588:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800258c:	491a      	ldr	r1, [pc, #104]	@ (80025f8 <main+0x228>)
 800258e:	4618      	mov	r0, r3
 8002590:	f00a fe3c 	bl	800d20c <siprintf>
  lcdPrintStr((uint8_t*)ucLCD0Msg, strlen((char *)ucLCD0Msg));
 8002594:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd fe41 	bl	8000220 <strlen>
 800259e:	4603      	mov	r3, r0
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fe79 	bl	80022a0 <lcdPrintStr>

  while (1)
 80025ae:	bf00      	nop
 80025b0:	e7fd      	b.n	80025ae <main+0x1de>
 80025b2:	bf00      	nop
 80025b4:	200002ac 	.word	0x200002ac
 80025b8:	20000008 	.word	0x20000008
 80025bc:	20000004 	.word	0x20000004
 80025c0:	2000000c 	.word	0x2000000c
 80025c4:	20000014 	.word	0x20000014
 80025c8:	20000010 	.word	0x20000010
 80025cc:	20000024 	.word	0x20000024
 80025d0:	20000028 	.word	0x20000028
 80025d4:	200005bc 	.word	0x200005bc
 80025d8:	00000000 	.word	0x00000000
 80025dc:	2000002c 	.word	0x2000002c
 80025e0:	20000030 	.word	0x20000030
 80025e4:	20000400 	.word	0x20000400
 80025e8:	2000001c 	.word	0x2000001c
 80025ec:	20000020 	.word	0x20000020
 80025f0:	20000018 	.word	0x20000018
 80025f4:	0800f77c 	.word	0x0800f77c
 80025f8:	0800f788 	.word	0x0800f788

080025fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b094      	sub	sp, #80	@ 0x50
 8002600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002602:	f107 0318 	add.w	r3, r7, #24
 8002606:	2238      	movs	r2, #56	@ 0x38
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f00a fe61 	bl	800d2d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	60da      	str	r2, [r3, #12]
 800261c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800261e:	2000      	movs	r0, #0
 8002620:	f004 fbce 	bl	8006dc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002624:	2302      	movs	r3, #2
 8002626:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800262c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800262e:	2340      	movs	r3, #64	@ 0x40
 8002630:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002632:	2302      	movs	r3, #2
 8002634:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002636:	2302      	movs	r3, #2
 8002638:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800263a:	2304      	movs	r3, #4
 800263c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800263e:	2355      	movs	r3, #85	@ 0x55
 8002640:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002642:	2302      	movs	r3, #2
 8002644:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002646:	2302      	movs	r3, #2
 8002648:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800264a:	2302      	movs	r3, #2
 800264c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800264e:	f107 0318 	add.w	r3, r7, #24
 8002652:	4618      	mov	r0, r3
 8002654:	f004 fc68 	bl	8006f28 <HAL_RCC_OscConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800265e:	f000 fa60 	bl	8002b22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002662:	230f      	movs	r3, #15
 8002664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002666:	2303      	movs	r3, #3
 8002668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	2104      	movs	r1, #4
 800267a:	4618      	mov	r0, r3
 800267c:	f004 ff66 	bl	800754c <HAL_RCC_ClockConfig>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002686:	f000 fa4c 	bl	8002b22 <Error_Handler>
  }
}
 800268a:	bf00      	nop
 800268c:	3750      	adds	r7, #80	@ 0x50
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	0000      	movs	r0, r0
 8002694:	0000      	movs	r0, r0
	...

08002698 <vPeriodicControlTask>:

/* USER CODE BEGIN 4 */


void vPeriodicControlTask(){
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	ed2d 8b02 	vpush	{d8}
 800269e:	b0ed      	sub	sp, #436	@ 0x1b4
 80026a0:	af6c      	add	r7, sp, #432	@ 0x1b0
//
//	  fActuatorValue_right = fPidUpdateData(xPidMotorRight, fRightSpeed, 400);
//	  fActuatorValue_right = 0.46 + fActuatorValue_right*0.5;
//	  vMotorsSetPWM(right, fActuatorValue_right, 1);
	   //seguidor
	  fActuatorValue_left = fPidUpdateData(xPidMotorLeft,fLeftSpeed , abs(fSetPoint_left));
 80026a2:	4b73      	ldr	r3, [pc, #460]	@ (8002870 <vPeriodicControlTask+0x1d8>)
 80026a4:	ed93 8a00 	vldr	s16, [r3]
 80026a8:	4b72      	ldr	r3, [pc, #456]	@ (8002874 <vPeriodicControlTask+0x1dc>)
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026b2:	ee17 3a90 	vmov	r3, s15
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bfb8      	it	lt
 80026ba:	425b      	neglt	r3, r3
 80026bc:	ee07 3a90 	vmov	s15, r3
 80026c0:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80026c4:	4c6c      	ldr	r4, [pc, #432]	@ (8002878 <vPeriodicControlTask+0x1e0>)
 80026c6:	4668      	mov	r0, sp
 80026c8:	f104 0310 	add.w	r3, r4, #16
 80026cc:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 80026d0:	4619      	mov	r1, r3
 80026d2:	f00a fe8c 	bl	800d3ee <memcpy>
 80026d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026da:	eef0 0a68 	vmov.f32	s1, s17
 80026de:	eeb0 0a48 	vmov.f32	s0, s16
 80026e2:	f000 fbf9 	bl	8002ed8 <fPidUpdateData>
 80026e6:	eef0 7a40 	vmov.f32	s15, s0
 80026ea:	4b64      	ldr	r3, [pc, #400]	@ (800287c <vPeriodicControlTask+0x1e4>)
 80026ec:	edc3 7a00 	vstr	s15, [r3]
	  fActuatorValue_left = 0.4 + fActuatorValue_left*0.5;
 80026f0:	4b62      	ldr	r3, [pc, #392]	@ (800287c <vPeriodicControlTask+0x1e4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd ff4f 	bl	8000598 <__aeabi_f2d>
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b60      	ldr	r3, [pc, #384]	@ (8002880 <vPeriodicControlTask+0x1e8>)
 8002700:	f7fd ffa2 	bl	8000648 <__aeabi_dmul>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	a356      	add	r3, pc, #344	@ (adr r3, 8002868 <vPeriodicControlTask+0x1d0>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f7fd fde3 	bl	80002dc <__adddf3>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	f7fe fa8b 	bl	8000c38 <__aeabi_d2f>
 8002722:	4603      	mov	r3, r0
 8002724:	4a55      	ldr	r2, [pc, #340]	@ (800287c <vPeriodicControlTask+0x1e4>)
 8002726:	6013      	str	r3, [r2, #0]
	  if (fSetPoint_left == 0)
 8002728:	4b52      	ldr	r3, [pc, #328]	@ (8002874 <vPeriodicControlTask+0x1dc>)
 800272a:	edd3 7a00 	vldr	s15, [r3]
 800272e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002736:	d104      	bne.n	8002742 <vPeriodicControlTask+0xaa>
		  fActuatorValue_left = 0;
 8002738:	4b50      	ldr	r3, [pc, #320]	@ (800287c <vPeriodicControlTask+0x1e4>)
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e022      	b.n	8002788 <vPeriodicControlTask+0xf0>
	  else if (fSetPoint_left < 0)
 8002742:	4b4c      	ldr	r3, [pc, #304]	@ (8002874 <vPeriodicControlTask+0x1dc>)
 8002744:	edd3 7a00 	vldr	s15, [r3]
 8002748:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002750:	d509      	bpl.n	8002766 <vPeriodicControlTask+0xce>
		  vMotorsSetPWM(left, fActuatorValue_left, 0);
 8002752:	4b4a      	ldr	r3, [pc, #296]	@ (800287c <vPeriodicControlTask+0x1e4>)
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	2100      	movs	r1, #0
 800275a:	eeb0 0a67 	vmov.f32	s0, s15
 800275e:	2000      	movs	r0, #0
 8002760:	f000 fa12 	bl	8002b88 <vMotorsSetPWM>
 8002764:	e010      	b.n	8002788 <vPeriodicControlTask+0xf0>
	  else if (fSetPoint_left>0)
 8002766:	4b43      	ldr	r3, [pc, #268]	@ (8002874 <vPeriodicControlTask+0x1dc>)
 8002768:	edd3 7a00 	vldr	s15, [r3]
 800276c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	dd08      	ble.n	8002788 <vPeriodicControlTask+0xf0>
		  vMotorsSetPWM(left, fActuatorValue_left, 1);
 8002776:	4b41      	ldr	r3, [pc, #260]	@ (800287c <vPeriodicControlTask+0x1e4>)
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	2101      	movs	r1, #1
 800277e:	eeb0 0a67 	vmov.f32	s0, s15
 8002782:	2000      	movs	r0, #0
 8002784:	f000 fa00 	bl	8002b88 <vMotorsSetPWM>


	  fActuatorValue_right = fPidUpdateData(xPidMotorRight,fRightSpeed , fSetPoint_right);
 8002788:	4b3e      	ldr	r3, [pc, #248]	@ (8002884 <vPeriodicControlTask+0x1ec>)
 800278a:	ed93 8a00 	vldr	s16, [r3]
 800278e:	4b3e      	ldr	r3, [pc, #248]	@ (8002888 <vPeriodicControlTask+0x1f0>)
 8002790:	edd3 8a00 	vldr	s17, [r3]
 8002794:	4c3d      	ldr	r4, [pc, #244]	@ (800288c <vPeriodicControlTask+0x1f4>)
 8002796:	4668      	mov	r0, sp
 8002798:	f104 0310 	add.w	r3, r4, #16
 800279c:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 80027a0:	4619      	mov	r1, r3
 80027a2:	f00a fe24 	bl	800d3ee <memcpy>
 80027a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027aa:	eef0 0a68 	vmov.f32	s1, s17
 80027ae:	eeb0 0a48 	vmov.f32	s0, s16
 80027b2:	f000 fb91 	bl	8002ed8 <fPidUpdateData>
 80027b6:	eef0 7a40 	vmov.f32	s15, s0
 80027ba:	4b35      	ldr	r3, [pc, #212]	@ (8002890 <vPeriodicControlTask+0x1f8>)
 80027bc:	edc3 7a00 	vstr	s15, [r3]
	  fActuatorValue_right = 0.4 + fActuatorValue_right*0.5;
 80027c0:	4b33      	ldr	r3, [pc, #204]	@ (8002890 <vPeriodicControlTask+0x1f8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fd fee7 	bl	8000598 <__aeabi_f2d>
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002880 <vPeriodicControlTask+0x1e8>)
 80027d0:	f7fd ff3a 	bl	8000648 <__aeabi_dmul>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	a322      	add	r3, pc, #136	@ (adr r3, 8002868 <vPeriodicControlTask+0x1d0>)
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	f7fd fd7b 	bl	80002dc <__adddf3>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7fe fa23 	bl	8000c38 <__aeabi_d2f>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4a26      	ldr	r2, [pc, #152]	@ (8002890 <vPeriodicControlTask+0x1f8>)
 80027f6:	6013      	str	r3, [r2, #0]
	  if (fSetPoint_right == 0)
 80027f8:	4b23      	ldr	r3, [pc, #140]	@ (8002888 <vPeriodicControlTask+0x1f0>)
 80027fa:	edd3 7a00 	vldr	s15, [r3]
 80027fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002806:	d104      	bne.n	8002812 <vPeriodicControlTask+0x17a>
		  fActuatorValue_right = 0;
 8002808:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <vPeriodicControlTask+0x1f8>)
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
	  else if (fSetPoint_right < 0)
		  vMotorsSetPWM(right, fActuatorValue_right, 0);
	  else if (fSetPoint_right > 0)
		  vMotorsSetPWM(right, fActuatorValue_right, 1);
}
 8002810:	e023      	b.n	800285a <vPeriodicControlTask+0x1c2>
	  else if (fSetPoint_right < 0)
 8002812:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <vPeriodicControlTask+0x1f0>)
 8002814:	edd3 7a00 	vldr	s15, [r3]
 8002818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800281c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002820:	d509      	bpl.n	8002836 <vPeriodicControlTask+0x19e>
		  vMotorsSetPWM(right, fActuatorValue_right, 0);
 8002822:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <vPeriodicControlTask+0x1f8>)
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	2100      	movs	r1, #0
 800282a:	eeb0 0a67 	vmov.f32	s0, s15
 800282e:	2001      	movs	r0, #1
 8002830:	f000 f9aa 	bl	8002b88 <vMotorsSetPWM>
}
 8002834:	e011      	b.n	800285a <vPeriodicControlTask+0x1c2>
	  else if (fSetPoint_right > 0)
 8002836:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <vPeriodicControlTask+0x1f0>)
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002844:	dc00      	bgt.n	8002848 <vPeriodicControlTask+0x1b0>
}
 8002846:	e008      	b.n	800285a <vPeriodicControlTask+0x1c2>
		  vMotorsSetPWM(right, fActuatorValue_right, 1);
 8002848:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <vPeriodicControlTask+0x1f8>)
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	2101      	movs	r1, #1
 8002850:	eeb0 0a67 	vmov.f32	s0, s15
 8002854:	2001      	movs	r0, #1
 8002856:	f000 f997 	bl	8002b88 <vMotorsSetPWM>
}
 800285a:	bf00      	nop
 800285c:	3704      	adds	r7, #4
 800285e:	46bd      	mov	sp, r7
 8002860:	ecbd 8b02 	vpop	{d8}
 8002864:	bd90      	pop	{r4, r7, pc}
 8002866:	bf00      	nop
 8002868:	9999999a 	.word	0x9999999a
 800286c:	3fd99999 	.word	0x3fd99999
 8002870:	200003f8 	.word	0x200003f8
 8002874:	20000788 	.word	0x20000788
 8002878:	200005bc 	.word	0x200005bc
 800287c:	20000778 	.word	0x20000778
 8002880:	3fe00000 	.word	0x3fe00000
 8002884:	200003fc 	.word	0x200003fc
 8002888:	2000078c 	.word	0x2000078c
 800288c:	20000400 	.word	0x20000400
 8002890:	2000077c 	.word	0x2000077c

08002894 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	if (htim == pTimDurationMotor)
 800289c:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_PeriodElapsedCallback+0x16>
	{
	vMotorsDurationCallback();
 80028a6:	f000 fa87 	bl	8002db8 <vMotorsDurationCallback>
	}

	//conta 10 ms
	if (htim == pTimerGeral) {
 80028aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002968 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d126      	bne.n	8002902 <HAL_TIM_PeriodElapsedCallback+0x6e>

		if (fRightSpeed > 700) {
 80028b4:	4b2d      	ldr	r3, [pc, #180]	@ (800296c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002970 <HAL_TIM_PeriodElapsedCallback+0xdc>
 80028be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c6:	dd04      	ble.n	80028d2 <HAL_TIM_PeriodElapsedCallback+0x3e>
			iContaOutlier_right++;
 80028c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002974 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	4a29      	ldr	r2, [pc, #164]	@ (8002974 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80028d0:	6013      	str	r3, [r2, #0]
		}

		if (fLeftSpeed > 700) {
 80028d2:	4b29      	ldr	r3, [pc, #164]	@ (8002978 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002970 <HAL_TIM_PeriodElapsedCallback+0xdc>
 80028dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e4:	dd04      	ble.n	80028f0 <HAL_TIM_PeriodElapsedCallback+0x5c>
			iContaOutlier_left++;
 80028e6:	4b25      	ldr	r3, [pc, #148]	@ (800297c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3301      	adds	r3, #1
 80028ec:	4a23      	ldr	r2, [pc, #140]	@ (800297c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80028ee:	6013      	str	r3, [r2, #0]
		}

		//conta 100 ms
		if (cCountTime(10, 0)) {
 80028f0:	2100      	movs	r1, #0
 80028f2:	200a      	movs	r0, #10
 80028f4:	f001 fa7c 	bl	8003df0 <cCountTime>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_TIM_PeriodElapsedCallback+0x6e>
			vPeriodicControlTask();
 80028fe:	f7ff fecb 	bl	8002698 <vPeriodicControlTask>
		}

	}

	if (htim == pTimFreqFixa_esq){
 8002902:	4b1f      	ldr	r3, [pc, #124]	@ (8002980 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	d110      	bne.n	800292e <HAL_TIM_PeriodElapsedCallback+0x9a>
		if(uiLeftTimeBurst > 50){
 800290c:	4b1d      	ldr	r3, [pc, #116]	@ (8002984 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b32      	cmp	r3, #50	@ 0x32
 8002912:	d907      	bls.n	8002924 <HAL_TIM_PeriodElapsedCallback+0x90>
			uiLeftTimeBurst = 1;
 8002914:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]
			fLeftSpeed = 0;
 800291a:	4b17      	ldr	r3, [pc, #92]	@ (8002978 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e004      	b.n	800292e <HAL_TIM_PeriodElapsedCallback+0x9a>
		}else{
		uiLeftTimeBurst++;
 8002924:	4b17      	ldr	r3, [pc, #92]	@ (8002984 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	4a16      	ldr	r2, [pc, #88]	@ (8002984 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800292c:	6013      	str	r3, [r2, #0]
		}
	}

	if (htim == pTimFreqFixa_dir){
 800292e:	4b16      	ldr	r3, [pc, #88]	@ (8002988 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d110      	bne.n	800295a <HAL_TIM_PeriodElapsedCallback+0xc6>
		if(uiRightTimeBurst > 50){
 8002938:	4b14      	ldr	r3, [pc, #80]	@ (800298c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b32      	cmp	r3, #50	@ 0x32
 800293e:	d907      	bls.n	8002950 <HAL_TIM_PeriodElapsedCallback+0xbc>
			uiRightTimeBurst = 1;
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]
			fRightSpeed = 0;
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e004      	b.n	800295a <HAL_TIM_PeriodElapsedCallback+0xc6>
		}else{
		uiRightTimeBurst++;
 8002950:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	4a0d      	ldr	r2, [pc, #52]	@ (800298c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002958:	6013      	str	r3, [r2, #0]
	}

	if (htim == pTimerBuzzer){
//		vBuzzerStop();
	}
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000010 	.word	0x20000010
 8002968:	20000018 	.word	0x20000018
 800296c:	200003fc 	.word	0x200003fc
 8002970:	442f0000 	.word	0x442f0000
 8002974:	20000784 	.word	0x20000784
 8002978:	200003f8 	.word	0x200003f8
 800297c:	20000780 	.word	0x20000780
 8002980:	2000001c 	.word	0x2000001c
 8002984:	200003dc 	.word	0x200003dc
 8002988:	20000020 	.word	0x20000020
 800298c:	200003e0 	.word	0x200003e0

08002990 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
 8002990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
//ENCODERS
  if (htim == pTimFreqFixa_esq)
 800299a:	4b46      	ldr	r3, [pc, #280]	@ (8002ab4 <HAL_TIM_IC_CaptureCallback+0x124>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d13f      	bne.n	8002a24 <HAL_TIM_IC_CaptureCallback+0x94>
  	{
  		uiLeftCapturedTime =  HAL_TIM_ReadCapturedValue(htim,  TIM_CHANNEL_1);
 80029a4:	2100      	movs	r1, #0
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f006 fa3c 	bl	8008e24 <HAL_TIM_ReadCapturedValue>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4a42      	ldr	r2, [pc, #264]	@ (8002ab8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80029b0:	6013      	str	r3, [r2, #0]
  		if (uiLeftTimeBurst != 0)
 80029b2:	4b42      	ldr	r3, [pc, #264]	@ (8002abc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d011      	beq.n	80029de <HAL_TIM_IC_CaptureCallback+0x4e>
  			ullLeftTimeRan = uiLeftCapturedTime + uiLeftTimeBurst*10000;
 80029ba:	4b40      	ldr	r3, [pc, #256]	@ (8002abc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80029c2:	fb03 f202 	mul.w	r2, r3, r2
 80029c6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ab8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4413      	add	r3, r2
 80029cc:	2200      	movs	r2, #0
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80029d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80029d8:	e9c3 1200 	strd	r1, r2, [r3]
 80029dc:	e007      	b.n	80029ee <HAL_TIM_IC_CaptureCallback+0x5e>
  		else
  			ullLeftTimeRan = uiLeftCapturedTime;
 80029de:	4b36      	ldr	r3, [pc, #216]	@ (8002ab8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2200      	movs	r2, #0
 80029e4:	469a      	mov	sl, r3
 80029e6:	4693      	mov	fp, r2
 80029e8:	4b35      	ldr	r3, [pc, #212]	@ (8002ac0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80029ea:	e9c3 ab00 	strd	sl, fp, [r3]
  		__HAL_TIM_SET_COUNTER(htim, 0);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2200      	movs	r2, #0
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24
  		uiLeftTimeBurst = 0;
 80029f6:	4b31      	ldr	r3, [pc, #196]	@ (8002abc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
  		fLeftSpeed = 10.0f/(ullLeftTimeRan/1000000.0f); //velocidade em mm/s
 80029fc:	4b30      	ldr	r3, [pc, #192]	@ (8002ac0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f7fe fa2f 	bl	8000e68 <__aeabi_ul2f>
 8002a0a:	ee06 0a90 	vmov	s13, r0
 8002a0e:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8002ac4 <HAL_TIM_IC_CaptureCallback+0x134>
 8002a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a16:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002a20:	edc3 7a00 	vstr	s15, [r3]
  	}

  if (htim == pTimFreqFixa_dir)
 8002a24:	4b29      	ldr	r3, [pc, #164]	@ (8002acc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d13d      	bne.n	8002aaa <HAL_TIM_IC_CaptureCallback+0x11a>
  	{
  		uiRightCapturedTime =  HAL_TIM_ReadCapturedValue(htim,  TIM_CHANNEL_1);
 8002a2e:	2100      	movs	r1, #0
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f006 f9f7 	bl	8008e24 <HAL_TIM_ReadCapturedValue>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4a25      	ldr	r2, [pc, #148]	@ (8002ad0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002a3a:	6013      	str	r3, [r2, #0]
  		if (uiRightTimeBurst != 0)
 8002a3c:	4b25      	ldr	r3, [pc, #148]	@ (8002ad4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00f      	beq.n	8002a64 <HAL_TIM_IC_CaptureCallback+0xd4>
  		{
  			ullRightTimeRan = uiRightCapturedTime + uiRightTimeBurst*10000;
 8002a44:	4b23      	ldr	r3, [pc, #140]	@ (8002ad4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002a4c:	fb03 f202 	mul.w	r2, r3, r2
 8002a50:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4413      	add	r3, r2
 8002a56:	2200      	movs	r2, #0
 8002a58:	4698      	mov	r8, r3
 8002a5a:	4691      	mov	r9, r2
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8002a5e:	e9c3 8900 	strd	r8, r9, [r3]
 8002a62:	e007      	b.n	8002a74 <HAL_TIM_IC_CaptureCallback+0xe4>
  		}
  		else
  		{
  			ullRightTimeRan = uiRightCapturedTime;
 8002a64:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	461c      	mov	r4, r3
 8002a6c:	4615      	mov	r5, r2
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8002a70:	e9c3 4500 	strd	r4, r5, [r3]
  		}
  		__HAL_TIM_SET_COUNTER(htim, 0);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	625a      	str	r2, [r3, #36]	@ 0x24
  		uiRightTimeBurst = 0;
 8002a7c:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
  		fRightSpeed = 10.0f/(ullRightTimeRan/1000000.0f); //velocidade em mm/s
 8002a82:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f9ec 	bl	8000e68 <__aeabi_ul2f>
 8002a90:	ee06 0a90 	vmov	s13, r0
 8002a94:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8002ac4 <HAL_TIM_IC_CaptureCallback+0x134>
 8002a98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a9c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8002adc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8002aa6:	edc3 7a00 	vstr	s15, [r3]
  	}
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ab4:	2000001c 	.word	0x2000001c
 8002ab8:	200003d4 	.word	0x200003d4
 8002abc:	200003dc 	.word	0x200003dc
 8002ac0:	200003e8 	.word	0x200003e8
 8002ac4:	49742400 	.word	0x49742400
 8002ac8:	200003f8 	.word	0x200003f8
 8002acc:	20000020 	.word	0x20000020
 8002ad0:	200003d8 	.word	0x200003d8
 8002ad4:	200003e0 	.word	0x200003e0
 8002ad8:	200003f0 	.word	0x200003f0
 8002adc:	200003fc 	.word	0x200003fc

08002ae0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==GPIO_PIN_7){
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	2b80      	cmp	r3, #128	@ 0x80
 8002aee:	d10b      	bne.n	8002b08 <HAL_GPIO_EXTI_Callback+0x28>
		vMotorsSetPWM(left, 1, 1);
 8002af0:	2101      	movs	r1, #1
 8002af2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002af6:	2000      	movs	r0, #0
 8002af8:	f000 f846 	bl	8002b88 <vMotorsSetPWM>
		vMotorsSetPWM(right, 1, 0);
 8002afc:	2100      	movs	r1, #0
 8002afe:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002b02:	2001      	movs	r0, #1
 8002b04:	f000 f840 	bl	8002b88 <vMotorsSetPWM>
	}

	if(GPIO_Pin==GPIO_PIN_5){
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d105      	bne.n	8002b1a <HAL_GPIO_EXTI_Callback+0x3a>
		vMotorsSetOff(left);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f000 f91c 	bl	8002d4c <vMotorsSetOff>
		vMotorsSetOff(right);
 8002b14:	2001      	movs	r0, #1
 8002b16:	f000 f919 	bl	8002d4c <vMotorsSetOff>
	}

}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b26:	b672      	cpsid	i
}
 8002b28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b2a:	bf00      	nop
 8002b2c:	e7fd      	b.n	8002b2a <Error_Handler+0x8>
	...

08002b30 <vMotorsInit>:
unsigned char ucDurationCounter;
unsigned short int usTimeOn;
extern float fSetPoint_left; //e
extern float fSetPoint_right; //f

void vMotorsInit(TIM_HandleTypeDef* htimPWM, TIM_HandleTypeDef* htimTimer) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
	pTimPWM = htimPWM;
 8002b3a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b78 <vMotorsInit+0x48>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6013      	str	r3, [r2, #0]
	pTimDuration =htimPWM;
 8002b40:	4a0e      	ldr	r2, [pc, #56]	@ (8002b7c <vMotorsInit+0x4c>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pTimPWM, TIM_CHANNEL_1);
 8002b46:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <vMotorsInit+0x48>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f005 fa8f 	bl	8008070 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pTimPWM, TIM_CHANNEL_2);
 8002b52:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <vMotorsInit+0x48>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2104      	movs	r1, #4
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f005 fa89 	bl	8008070 <HAL_TIM_PWM_Start>
	//pTimPWM->Instance->CCR1 = 0;
	HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8002b5e:	2032      	movs	r0, #50	@ 0x32
 8002b60:	f001 fd79 	bl	8004656 <HAL_NVIC_DisableIRQ>

	ucDurationCounter = 0;
 8002b64:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <vMotorsInit+0x50>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
	usTimeOn =0;
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <vMotorsInit+0x54>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	801a      	strh	r2, [r3, #0]

}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20000790 	.word	0x20000790
 8002b7c:	20000794 	.word	0x20000794
 8002b80:	20000798 	.word	0x20000798
 8002b84:	2000079a 	.word	0x2000079a

08002b88 <vMotorsSetPWM>:

//char: motor da direita ou esquerda
//float: PWM de 0 a 1
void vMotorsSetPWM(char motor, float PWM, char rotation) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	ed87 0a00 	vstr	s0, [r7]
 8002b94:	460a      	mov	r2, r1
 8002b96:	71fb      	strb	r3, [r7, #7]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	71bb      	strb	r3, [r7, #6]
	if (motor == left) {
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d131      	bne.n	8002c06 <vMotorsSetPWM+0x7e>
		pTimPWM->Instance->CCR2 = (PWM*1000) - 1;
 8002ba2:	edd7 7a00 	vldr	s15, [r7]
 8002ba6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002c78 <vMotorsSetPWM+0xf0>
 8002baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bb6:	4b31      	ldr	r3, [pc, #196]	@ (8002c7c <vMotorsSetPWM+0xf4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc0:	ee17 2a90 	vmov	r2, s15
 8002bc4:	639a      	str	r2, [r3, #56]	@ 0x38

		if (rotation) {
 8002bc6:	79bb      	ldrb	r3, [r7, #6]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00c      	beq.n	8002be6 <vMotorsSetPWM+0x5e>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 1);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bd2:	482b      	ldr	r0, [pc, #172]	@ (8002c80 <vMotorsSetPWM+0xf8>)
 8002bd4:	f002 fa1c 	bl	8005010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 0);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bde:	4828      	ldr	r0, [pc, #160]	@ (8002c80 <vMotorsSetPWM+0xf8>)
 8002be0:	f002 fa16 	bl	8005010 <HAL_GPIO_WritePin>
		} else if (!rotation) {
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 1);
		}
	}
}
 8002be4:	e043      	b.n	8002c6e <vMotorsSetPWM+0xe6>
		} else if (!rotation) {
 8002be6:	79bb      	ldrb	r3, [r7, #6]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d140      	bne.n	8002c6e <vMotorsSetPWM+0xe6>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bf2:	4823      	ldr	r0, [pc, #140]	@ (8002c80 <vMotorsSetPWM+0xf8>)
 8002bf4:	f002 fa0c 	bl	8005010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 1);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bfe:	4820      	ldr	r0, [pc, #128]	@ (8002c80 <vMotorsSetPWM+0xf8>)
 8002c00:	f002 fa06 	bl	8005010 <HAL_GPIO_WritePin>
}
 8002c04:	e033      	b.n	8002c6e <vMotorsSetPWM+0xe6>
	} else if (motor == right) {
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d130      	bne.n	8002c6e <vMotorsSetPWM+0xe6>
		pTimPWM->Instance->CCR1 = (PWM*1000) - 1;
 8002c0c:	edd7 7a00 	vldr	s15, [r7]
 8002c10:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002c78 <vMotorsSetPWM+0xf0>
 8002c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c20:	4b16      	ldr	r3, [pc, #88]	@ (8002c7c <vMotorsSetPWM+0xf4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c2a:	ee17 2a90 	vmov	r2, s15
 8002c2e:	635a      	str	r2, [r3, #52]	@ 0x34
		if (rotation) {
 8002c30:	79bb      	ldrb	r3, [r7, #6]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00c      	beq.n	8002c50 <vMotorsSetPWM+0xc8>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 1);
 8002c36:	2201      	movs	r2, #1
 8002c38:	2180      	movs	r1, #128	@ 0x80
 8002c3a:	4811      	ldr	r0, [pc, #68]	@ (8002c80 <vMotorsSetPWM+0xf8>)
 8002c3c:	f002 f9e8 	bl	8005010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);
 8002c40:	2200      	movs	r2, #0
 8002c42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c4a:	f002 f9e1 	bl	8005010 <HAL_GPIO_WritePin>
}
 8002c4e:	e00e      	b.n	8002c6e <vMotorsSetPWM+0xe6>
		} else if (!rotation) {
 8002c50:	79bb      	ldrb	r3, [r7, #6]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <vMotorsSetPWM+0xe6>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2180      	movs	r1, #128	@ 0x80
 8002c5a:	4809      	ldr	r0, [pc, #36]	@ (8002c80 <vMotorsSetPWM+0xf8>)
 8002c5c:	f002 f9d8 	bl	8005010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 1);
 8002c60:	2201      	movs	r2, #1
 8002c62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c6a:	f002 f9d1 	bl	8005010 <HAL_GPIO_WritePin>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	447a0000 	.word	0x447a0000
 8002c7c:	20000790 	.word	0x20000790
 8002c80:	48000400 	.word	0x48000400

08002c84 <vMotorsSetPWMTimer>:
//						a pre-set time, it enable the interrupion that after some cycles defined by    //
//						duration input will stop the motor in vMotorsDurationCallback function         //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	char motor, float PWM, char rotation, unsigned int duration					   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vMotorsSetPWMTimer(char motor, float PWM, char rotation, unsigned int duration) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	460b      	mov	r3, r1
 8002c96:	73bb      	strb	r3, [r7, #14]
	if (motor == left) {
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11f      	bne.n	8002cde <vMotorsSetPWMTimer+0x5a>
//		pTimPWM->Instance->CCR2 = (PWM*1000) - 1;

		if (rotation) {
 8002c9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00c      	beq.n	8002cbe <vMotorsSetPWMTimer+0x3a>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 1);
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002caa:	4825      	ldr	r0, [pc, #148]	@ (8002d40 <vMotorsSetPWMTimer+0xbc>)
 8002cac:	f002 f9b0 	bl	8005010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002cb6:	4822      	ldr	r0, [pc, #136]	@ (8002d40 <vMotorsSetPWMTimer+0xbc>)
 8002cb8:	f002 f9aa 	bl	8005010 <HAL_GPIO_WritePin>
 8002cbc:	e031      	b.n	8002d22 <vMotorsSetPWMTimer+0x9e>
		} else if (!rotation) {
 8002cbe:	7bbb      	ldrb	r3, [r7, #14]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d12e      	bne.n	8002d22 <vMotorsSetPWMTimer+0x9e>
			HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 0);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002cca:	481d      	ldr	r0, [pc, #116]	@ (8002d40 <vMotorsSetPWMTimer+0xbc>)
 8002ccc:	f002 f9a0 	bl	8005010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 1);
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002cd6:	481a      	ldr	r0, [pc, #104]	@ (8002d40 <vMotorsSetPWMTimer+0xbc>)
 8002cd8:	f002 f99a 	bl	8005010 <HAL_GPIO_WritePin>
 8002cdc:	e021      	b.n	8002d22 <vMotorsSetPWMTimer+0x9e>
		}

	} else if (motor == right) {
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d11e      	bne.n	8002d22 <vMotorsSetPWMTimer+0x9e>
//		pTimPWM->Instance->CCR1 = (PWM*1000) - 1;

		if (rotation) {
 8002ce4:	7bbb      	ldrb	r3, [r7, #14]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <vMotorsSetPWMTimer+0x80>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 1);
 8002cea:	2201      	movs	r2, #1
 8002cec:	2180      	movs	r1, #128	@ 0x80
 8002cee:	4814      	ldr	r0, [pc, #80]	@ (8002d40 <vMotorsSetPWMTimer+0xbc>)
 8002cf0:	f002 f98e 	bl	8005010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002cfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cfe:	f002 f987 	bl	8005010 <HAL_GPIO_WritePin>
 8002d02:	e00e      	b.n	8002d22 <vMotorsSetPWMTimer+0x9e>
		} else if (!rotation) {
 8002d04:	7bbb      	ldrb	r3, [r7, #14]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10b      	bne.n	8002d22 <vMotorsSetPWMTimer+0x9e>
			HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2180      	movs	r1, #128	@ 0x80
 8002d0e:	480c      	ldr	r0, [pc, #48]	@ (8002d40 <vMotorsSetPWMTimer+0xbc>)
 8002d10:	f002 f97e 	bl	8005010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 1);
 8002d14:	2201      	movs	r2, #1
 8002d16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d1e:	f002 f977 	bl	8005010 <HAL_GPIO_WritePin>
		}
	}
	usTimeOn = duration;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	4b07      	ldr	r3, [pc, #28]	@ (8002d44 <vMotorsSetPWMTimer+0xc0>)
 8002d28:	801a      	strh	r2, [r3, #0]
	ucDurationCounter = 0;
 8002d2a:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <vMotorsSetPWMTimer+0xc4>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002d30:	2032      	movs	r0, #50	@ 0x32
 8002d32:	f001 fc82 	bl	800463a <HAL_NVIC_EnableIRQ>

//	vMotorsSetOff(motor);
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	48000400 	.word	0x48000400
 8002d44:	2000079a 	.word	0x2000079a
 8002d48:	20000798 	.word	0x20000798

08002d4c <vMotorsSetOff>:

void vMotorsSetOff(char motor) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
	if (motor == left) {
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d111      	bne.n	8002d80 <vMotorsSetOff+0x34>
		pTimPWM->Instance->CCR2 = 0;
 8002d5c:	4b14      	ldr	r3, [pc, #80]	@ (8002db0 <vMotorsSetOff+0x64>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	639a      	str	r2, [r3, #56]	@ 0x38

		HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port,Motor_Esq_IN3_Pin, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d6c:	4811      	ldr	r0, [pc, #68]	@ (8002db4 <vMotorsSetOff+0x68>)
 8002d6e:	f002 f94f 	bl	8005010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port,Motor_Esq_IN4_Pin, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d78:	480e      	ldr	r0, [pc, #56]	@ (8002db4 <vMotorsSetOff+0x68>)
 8002d7a:	f002 f949 	bl	8005010 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
		HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);

	}
}
 8002d7e:	e013      	b.n	8002da8 <vMotorsSetOff+0x5c>
	} else if (motor == right) {
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d110      	bne.n	8002da8 <vMotorsSetOff+0x5c>
		pTimPWM->Instance->CCR1 = 0;
 8002d86:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <vMotorsSetOff+0x64>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port,Motor_Dir_IN1_Pin, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2180      	movs	r1, #128	@ 0x80
 8002d94:	4807      	ldr	r0, [pc, #28]	@ (8002db4 <vMotorsSetOff+0x68>)
 8002d96:	f002 f93b 	bl	8005010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port,Motor_Dir_IN2_Pin, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002da4:	f002 f934 	bl	8005010 <HAL_GPIO_WritePin>
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000790 	.word	0x20000790
 8002db4:	48000400 	.word	0x48000400

08002db8 <vMotorsDurationCallback>:
//						many interruptions for stop the motor based on usTimeOn (duration set) then	   //
//						stops the motors.															   //
//-----------------------------------------------------------------------------------------------------//
//	      Inputs	:	n/a																			   //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void vMotorsDurationCallback(){
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
	if((ucDurationCounter*10)==usTimeOn){
 8002dbc:	4b15      	ldr	r3, [pc, #84]	@ (8002e14 <vMotorsDurationCallback+0x5c>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <vMotorsDurationCallback+0x60>)
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d117      	bne.n	8002e04 <vMotorsDurationCallback+0x4c>
		fSetPoint_left = 0;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <vMotorsDurationCallback+0x64>)
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
		fSetPoint_right = 0;
 8002ddc:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <vMotorsDurationCallback+0x68>)
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
		vMotorsSetOff(left);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7ff ffb1 	bl	8002d4c <vMotorsSetOff>
		vMotorsSetOff(right);
 8002dea:	2001      	movs	r0, #1
 8002dec:	f7ff ffae 	bl	8002d4c <vMotorsSetOff>
		usTimeOn = 0;
 8002df0:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <vMotorsDurationCallback+0x60>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	801a      	strh	r2, [r3, #0]
		ucDurationCounter = 0;
 8002df6:	4b07      	ldr	r3, [pc, #28]	@ (8002e14 <vMotorsDurationCallback+0x5c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8002dfc:	2032      	movs	r0, #50	@ 0x32
 8002dfe:	f001 fc2a 	bl	8004656 <HAL_NVIC_DisableIRQ>
	}
	else
	{
		ucDurationCounter++;
	}
}
 8002e02:	e005      	b.n	8002e10 <vMotorsDurationCallback+0x58>
		ucDurationCounter++;
 8002e04:	4b03      	ldr	r3, [pc, #12]	@ (8002e14 <vMotorsDurationCallback+0x5c>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	4b01      	ldr	r3, [pc, #4]	@ (8002e14 <vMotorsDurationCallback+0x5c>)
 8002e0e:	701a      	strb	r2, [r3, #0]
}
 8002e10:	bf00      	nop
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000798 	.word	0x20000798
 8002e18:	2000079a 	.word	0x2000079a
 8002e1c:	20000788 	.word	0x20000788
 8002e20:	2000078c 	.word	0x2000078c

08002e24 <vPidInit>:
/* Method description: Initialize the PID controller*/
/* Input params:       n/a                          */
/* Output params:      n/a                          */
/* ************************************************ */
pid_data_type vPidInit(pid_data_type xPidConfig, float fKp, float fKi, float fKd, unsigned short usIntSizeMs, float fOutputSaturation)
{
 8002e24:	b084      	sub	sp, #16
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b088      	sub	sp, #32
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6178      	str	r0, [r7, #20]
 8002e2e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002e36:	ed87 0a04 	vstr	s0, [r7, #16]
 8002e3a:	edc7 0a03 	vstr	s1, [r7, #12]
 8002e3e:	ed87 1a02 	vstr	s2, [r7, #8]
 8002e42:	edc7 1a01 	vstr	s3, [r7, #4]
	xPidConfig.fKp = fKp;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	xPidConfig.fKd = fKd;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	637b      	str	r3, [r7, #52]	@ 0x34
	xPidConfig.fKi = fKi;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	633b      	str	r3, [r7, #48]	@ 0x30
	xPidConfig.fError_previous = 0;
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	63bb      	str	r3, [r7, #56]	@ 0x38
	xPidConfig.fError_sum = 0.0;
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// Saturates Integrator size (up to 10 s)
	if((usIntSizeMs/UPDATE_RATE_MS)> INTEGRATOR_MAX_SIZE)
 8002e5e:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8002e62:	f242 7273 	movw	r2, #10099	@ 0x2773
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d903      	bls.n	8002e72 <vPidInit+0x4e>
	  usIntSizeMs = INTEGRATOR_MAX_SIZE * UPDATE_RATE_MS;
 8002e6a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e6e:	f8a7 31e8 	strh.w	r3, [r7, #488]	@ 0x1e8

	xPidConfig.usIntegratorSize = usIntSizeMs/UPDATE_RATE_MS;
 8002e72:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8002e76:	4a17      	ldr	r2, [pc, #92]	@ (8002ed4 <vPidInit+0xb0>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

	xPidConfig.fOutputSaturation = fOutputSaturation;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	647b      	str	r3, [r7, #68]	@ 0x44
	xPidConfig.usIntegratorCount = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	for (int i =0; i<INTEGRATOR_MAX_SIZE; i++){
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	e00b      	b.n	8002eac <vPidInit+0x88>
		xPidConfig.fIntegratorBuffer[i] = 0;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	330a      	adds	r3, #10
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	3328      	adds	r3, #40	@ 0x28
 8002e9c:	443b      	add	r3, r7
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
	for (int i =0; i<INTEGRATOR_MAX_SIZE; i++){
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b63      	cmp	r3, #99	@ 0x63
 8002eb0:	ddf0      	ble.n	8002e94 <vPidInit+0x70>
	}
	return xPidConfig;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eba:	f44f 72de 	mov.w	r2, #444	@ 0x1bc
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f00a fa95 	bl	800d3ee <memcpy>
}
 8002ec4:	6978      	ldr	r0, [r7, #20]
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ece:	b004      	add	sp, #16
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	51eb851f 	.word	0x51eb851f

08002ed8 <fPidUpdateData>:
/*                     fReferenceValue: Value used as */
/*                     control reference              */
/* Output params:      float: New Control effort      */
/* ************************************************** */
float fPidUpdateData(pid_data_type xPidConfig, float fSensorValue, float fSetValue)
{
 8002ed8:	b084      	sub	sp, #16
 8002eda:	b5b0      	push	{r4, r5, r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	f107 0418 	add.w	r4, r7, #24
 8002ee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ee8:	ed87 0a01 	vstr	s0, [r7, #4]
 8002eec:	edc7 0a00 	vstr	s1, [r7]
//	float fError, fDifference, fOut;

	// Proportional error
	xPidConfig.fError = fSetValue - fSensorValue;
 8002ef0:	ed97 7a00 	vldr	s14, [r7]
 8002ef4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	//Ingtegral error
	xPidConfig.fError_sum = xPidConfig.fError_sum - xPidConfig.fIntegratorBuffer[xPidConfig.usIntegratorCount] + xPidConfig.fError;
 8002f00:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002f04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f08:	330a      	adds	r3, #10
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	3318      	adds	r3, #24
 8002f0e:	443b      	add	r3, r7
 8002f10:	3304      	adds	r3, #4
 8002f12:	edd3 7a00 	vldr	s15, [r3]
 8002f16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f1a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f22:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	xPidConfig.fIntegratorBuffer[xPidConfig.usIntegratorCount] = xPidConfig.fError;
 8002f26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f2c:	330a      	adds	r3, #10
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	3318      	adds	r3, #24
 8002f32:	443b      	add	r3, r7
 8002f34:	3304      	adds	r3, #4
 8002f36:	601a      	str	r2, [r3, #0]

	if(++xPidConfig.usIntegratorCount >= xPidConfig.usIntegratorSize)
 8002f38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8002f44:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002f48:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <fPidUpdateData+0x7c>
		xPidConfig.usIntegratorCount = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

	// Differential error
	xPidConfig.fDifference = (xPidConfig.fError - xPidConfig.fError_previous);
 8002f54:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002f58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f60:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	xPidConfig.fOut = xPidConfig.fKp * xPidConfig.fError
 8002f64:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f68:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f70:	ee17 0a90 	vmov	r0, s15
 8002f74:	f7fd fb10 	bl	8000598 <__aeabi_f2d>
 8002f78:	4604      	mov	r4, r0
 8002f7a:	460d      	mov	r5, r1
		 + xPidConfig.fKi * xPidConfig.fError_sum * UPDATE_RATE
 8002f7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f80:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f88:	ee17 0a90 	vmov	r0, s15
 8002f8c:	f7fd fb04 	bl	8000598 <__aeabi_f2d>
 8002f90:	a327      	add	r3, pc, #156	@ (adr r3, 8003030 <fPidUpdateData+0x158>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f7fd fb57 	bl	8000648 <__aeabi_dmul>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	f7fd f99b 	bl	80002dc <__adddf3>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4614      	mov	r4, r2
 8002fac:	461d      	mov	r5, r3
		 + xPidConfig.fKd * xPidConfig.fDifference / UPDATE_RATE;
 8002fae:	ed97 7a08 	vldr	s14, [r7, #32]
 8002fb2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fba:	ee17 0a90 	vmov	r0, s15
 8002fbe:	f7fd faeb 	bl	8000598 <__aeabi_f2d>
 8002fc2:	a31b      	add	r3, pc, #108	@ (adr r3, 8003030 <fPidUpdateData+0x158>)
 8002fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc8:	f7fd fc68 	bl	800089c <__aeabi_ddiv>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	f7fd f982 	bl	80002dc <__adddf3>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7fd fe2a 	bl	8000c38 <__aeabi_d2f>
 8002fe4:	4603      	mov	r3, r0
	xPidConfig.fOut = xPidConfig.fKp * xPidConfig.fError
 8002fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c

	xPidConfig.fError_previous = xPidConfig.fError;
 8002fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24

    // Output Saturation
//	if(isnan(fOut))
//		fOut=0;
	if(xPidConfig.fOut > xPidConfig.fOutputSaturation)
 8002fec:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002ff0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffc:	dd02      	ble.n	8003004 <fPidUpdateData+0x12c>
		xPidConfig.fOut = xPidConfig.fOutputSaturation;
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003002:	e009      	b.n	8003018 <fPidUpdateData+0x140>
	else
		if (xPidConfig.fOut < 0)
 8003004:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003008:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	d502      	bpl.n	8003018 <fPidUpdateData+0x140>
			xPidConfig.fOut = 0;
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	63fb      	str	r3, [r7, #60]	@ 0x3c

	return xPidConfig.fOut;
 8003018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301a:	ee07 3a90 	vmov	s15, r3
}
 800301e:	eeb0 0a67 	vmov.f32	s0, s15
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800302a:	b004      	add	sp, #16
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	9999999a 	.word	0x9999999a
 8003034:	3fb99999 	.word	0x3fb99999

08003038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303e:	4b0f      	ldr	r3, [pc, #60]	@ (800307c <HAL_MspInit+0x44>)
 8003040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003042:	4a0e      	ldr	r2, [pc, #56]	@ (800307c <HAL_MspInit+0x44>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6613      	str	r3, [r2, #96]	@ 0x60
 800304a:	4b0c      	ldr	r3, [pc, #48]	@ (800307c <HAL_MspInit+0x44>)
 800304c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	607b      	str	r3, [r7, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003056:	4b09      	ldr	r3, [pc, #36]	@ (800307c <HAL_MspInit+0x44>)
 8003058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305a:	4a08      	ldr	r2, [pc, #32]	@ (800307c <HAL_MspInit+0x44>)
 800305c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003060:	6593      	str	r3, [r2, #88]	@ 0x58
 8003062:	4b06      	ldr	r3, [pc, #24]	@ (800307c <HAL_MspInit+0x44>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800306e:	f003 ff4b 	bl	8006f08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000

08003080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <NMI_Handler+0x4>

08003088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <HardFault_Handler+0x4>

08003090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <MemManage_Handler+0x4>

08003098 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <BusFault_Handler+0x4>

080030a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030a4:	bf00      	nop
 80030a6:	e7fd      	b.n	80030a4 <UsageFault_Handler+0x4>

080030a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030d6:	f001 f957 	bl	8004388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80030e4:	4802      	ldr	r0, [pc, #8]	@ (80030f0 <DMA1_Channel3_IRQHandler+0x10>)
 80030e6:	f001 fcb4 	bl	8004a52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000300 	.word	0x20000300

080030f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80030f8:	4802      	ldr	r0, [pc, #8]	@ (8003104 <DMA1_Channel4_IRQHandler+0x10>)
 80030fa:	f001 fcaa 	bl	8004a52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000360 	.word	0x20000360

08003108 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800310c:	4803      	ldr	r0, [pc, #12]	@ (800311c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800310e:	f005 fa73 	bl	80085f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003112:	4803      	ldr	r0, [pc, #12]	@ (8003120 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003114:	f005 fa70 	bl	80085f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}
 800311c:	200007a0 	.word	0x200007a0
 8003120:	2000091c 	.word	0x2000091c

08003124 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003128:	4803      	ldr	r0, [pc, #12]	@ (8003138 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800312a:	f005 fa65 	bl	80085f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800312e:	4803      	ldr	r0, [pc, #12]	@ (800313c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8003130:	f005 fa62 	bl	80085f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}
 8003138:	200007a0 	.word	0x200007a0
 800313c:	20000968 	.word	0x20000968

08003140 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003144:	4802      	ldr	r0, [pc, #8]	@ (8003150 <TIM2_IRQHandler+0x10>)
 8003146:	f005 fa57 	bl	80085f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	200007ec 	.word	0x200007ec

08003154 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003158:	4802      	ldr	r0, [pc, #8]	@ (8003164 <TIM3_IRQHandler+0x10>)
 800315a:	f005 fa4d 	bl	80085f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000838 	.word	0x20000838

08003168 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800316c:	4802      	ldr	r0, [pc, #8]	@ (8003178 <I2C2_EV_IRQHandler+0x10>)
 800316e:	f002 f92f 	bl	80053d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	200002ac 	.word	0x200002ac

0800317c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003180:	4802      	ldr	r0, [pc, #8]	@ (800318c <I2C2_ER_IRQHandler+0x10>)
 8003182:	f002 f93f 	bl	8005404 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200002ac 	.word	0x200002ac

08003190 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003194:	4802      	ldr	r0, [pc, #8]	@ (80031a0 <USART1_IRQHandler+0x10>)
 8003196:	f006 ff9f 	bl	800a0d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000b44 	.word	0x20000b44

080031a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80031a8:	4802      	ldr	r0, [pc, #8]	@ (80031b4 <USART3_IRQHandler+0x10>)
 80031aa:	f006 ff95 	bl	800a0d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000bd8 	.word	0x20000bd8

080031b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80031bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80031c0:	f001 ff3e 	bl	8005040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031c4:	bf00      	nop
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80031cc:	4802      	ldr	r0, [pc, #8]	@ (80031d8 <TIM5_IRQHandler+0x10>)
 80031ce:	f005 fa13 	bl	80085f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000884 	.word	0x20000884

080031dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031e0:	4802      	ldr	r0, [pc, #8]	@ (80031ec <TIM6_DAC_IRQHandler+0x10>)
 80031e2:	f005 fa09 	bl	80085f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	200008d0 	.word	0x200008d0

080031f0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80031f4:	4802      	ldr	r0, [pc, #8]	@ (8003200 <LPUART1_IRQHandler+0x10>)
 80031f6:	f006 ff6f 	bl	800a0d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000ab0 	.word	0x20000ab0

08003204 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return 1;
 8003208:	2301      	movs	r3, #1
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <_kill>:

int _kill(int pid, int sig)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800321e:	f00a f8b9 	bl	800d394 <__errno>
 8003222:	4603      	mov	r3, r0
 8003224:	2216      	movs	r2, #22
 8003226:	601a      	str	r2, [r3, #0]
  return -1;
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <_exit>:

void _exit (int status)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800323c:	f04f 31ff 	mov.w	r1, #4294967295
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ffe7 	bl	8003214 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003246:	bf00      	nop
 8003248:	e7fd      	b.n	8003246 <_exit+0x12>

0800324a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	e00a      	b.n	8003272 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800325c:	f3af 8000 	nop.w
 8003260:	4601      	mov	r1, r0
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	60ba      	str	r2, [r7, #8]
 8003268:	b2ca      	uxtb	r2, r1
 800326a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	3301      	adds	r3, #1
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	429a      	cmp	r2, r3
 8003278:	dbf0      	blt.n	800325c <_read+0x12>
  }

  return len;
 800327a:	687b      	ldr	r3, [r7, #4]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	e009      	b.n	80032aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	60ba      	str	r2, [r7, #8]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	3301      	adds	r3, #1
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	dbf1      	blt.n	8003296 <_write+0x12>
  }
  return len;
 80032b2:	687b      	ldr	r3, [r7, #4]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <_close>:

int _close(int file)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032e4:	605a      	str	r2, [r3, #4]
  return 0;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <_isatty>:

int _isatty(int file)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032fc:	2301      	movs	r3, #1
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800332c:	4a14      	ldr	r2, [pc, #80]	@ (8003380 <_sbrk+0x5c>)
 800332e:	4b15      	ldr	r3, [pc, #84]	@ (8003384 <_sbrk+0x60>)
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003338:	4b13      	ldr	r3, [pc, #76]	@ (8003388 <_sbrk+0x64>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003340:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <_sbrk+0x64>)
 8003342:	4a12      	ldr	r2, [pc, #72]	@ (800338c <_sbrk+0x68>)
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003346:	4b10      	ldr	r3, [pc, #64]	@ (8003388 <_sbrk+0x64>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	429a      	cmp	r2, r3
 8003352:	d207      	bcs.n	8003364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003354:	f00a f81e 	bl	800d394 <__errno>
 8003358:	4603      	mov	r3, r0
 800335a:	220c      	movs	r2, #12
 800335c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295
 8003362:	e009      	b.n	8003378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003364:	4b08      	ldr	r3, [pc, #32]	@ (8003388 <_sbrk+0x64>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800336a:	4b07      	ldr	r3, [pc, #28]	@ (8003388 <_sbrk+0x64>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	4a05      	ldr	r2, [pc, #20]	@ (8003388 <_sbrk+0x64>)
 8003374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003376:	68fb      	ldr	r3, [r7, #12]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20020000 	.word	0x20020000
 8003384:	00000400 	.word	0x00000400
 8003388:	2000079c 	.word	0x2000079c
 800338c:	20000dc0 	.word	0x20000dc0

08003390 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003394:	4b06      	ldr	r3, [pc, #24]	@ (80033b0 <SystemInit+0x20>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339a:	4a05      	ldr	r2, [pc, #20]	@ (80033b0 <SystemInit+0x20>)
 800339c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b098      	sub	sp, #96	@ 0x60
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	605a      	str	r2, [r3, #4]
 80033d0:	609a      	str	r2, [r3, #8]
 80033d2:	60da      	str	r2, [r3, #12]
 80033d4:	611a      	str	r2, [r3, #16]
 80033d6:	615a      	str	r2, [r3, #20]
 80033d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033da:	1d3b      	adds	r3, r7, #4
 80033dc:	2234      	movs	r2, #52	@ 0x34
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f009 ff76 	bl	800d2d2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033e6:	4b41      	ldr	r3, [pc, #260]	@ (80034ec <MX_TIM1_Init+0x138>)
 80033e8:	4a41      	ldr	r2, [pc, #260]	@ (80034f0 <MX_TIM1_Init+0x13c>)
 80033ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 85-1;
 80033ec:	4b3f      	ldr	r3, [pc, #252]	@ (80034ec <MX_TIM1_Init+0x138>)
 80033ee:	2254      	movs	r2, #84	@ 0x54
 80033f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f2:	4b3e      	ldr	r3, [pc, #248]	@ (80034ec <MX_TIM1_Init+0x138>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80033f8:	4b3c      	ldr	r3, [pc, #240]	@ (80034ec <MX_TIM1_Init+0x138>)
 80033fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80033fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003400:	4b3a      	ldr	r3, [pc, #232]	@ (80034ec <MX_TIM1_Init+0x138>)
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003406:	4b39      	ldr	r3, [pc, #228]	@ (80034ec <MX_TIM1_Init+0x138>)
 8003408:	2200      	movs	r2, #0
 800340a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800340c:	4b37      	ldr	r3, [pc, #220]	@ (80034ec <MX_TIM1_Init+0x138>)
 800340e:	2280      	movs	r2, #128	@ 0x80
 8003410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003412:	4836      	ldr	r0, [pc, #216]	@ (80034ec <MX_TIM1_Init+0x138>)
 8003414:	f004 fdd4 	bl	8007fc0 <HAL_TIM_PWM_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800341e:	f7ff fb80 	bl	8002b22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800342a:	2300      	movs	r3, #0
 800342c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800342e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003432:	4619      	mov	r1, r3
 8003434:	482d      	ldr	r0, [pc, #180]	@ (80034ec <MX_TIM1_Init+0x138>)
 8003436:	f006 fb21 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003440:	f7ff fb6f 	bl	8002b22 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003444:	2360      	movs	r3, #96	@ 0x60
 8003446:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800344c:	2300      	movs	r3, #0
 800344e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003450:	2300      	movs	r3, #0
 8003452:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003454:	2300      	movs	r3, #0
 8003456:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003458:	2300      	movs	r3, #0
 800345a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800345c:	2300      	movs	r3, #0
 800345e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003460:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003464:	2200      	movs	r2, #0
 8003466:	4619      	mov	r1, r3
 8003468:	4820      	ldr	r0, [pc, #128]	@ (80034ec <MX_TIM1_Init+0x138>)
 800346a:	f005 fab1 	bl	80089d0 <HAL_TIM_PWM_ConfigChannel>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003474:	f7ff fb55 	bl	8002b22 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003478:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800347c:	2204      	movs	r2, #4
 800347e:	4619      	mov	r1, r3
 8003480:	481a      	ldr	r0, [pc, #104]	@ (80034ec <MX_TIM1_Init+0x138>)
 8003482:	f005 faa5 	bl	80089d0 <HAL_TIM_PWM_ConfigChannel>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800348c:	f7ff fb49 	bl	8002b22 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003490:	2300      	movs	r3, #0
 8003492:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003494:	2300      	movs	r3, #0
 8003496:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80034ae:	2300      	movs	r3, #0
 80034b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80034b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80034c0:	2300      	movs	r3, #0
 80034c2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	4807      	ldr	r0, [pc, #28]	@ (80034ec <MX_TIM1_Init+0x138>)
 80034ce:	f006 fb6b 	bl	8009ba8 <HAL_TIMEx_ConfigBreakDeadTime>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80034d8:	f7ff fb23 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80034dc:	4803      	ldr	r0, [pc, #12]	@ (80034ec <MX_TIM1_Init+0x138>)
 80034de:	f000 fbe7 	bl	8003cb0 <HAL_TIM_MspPostInit>

}
 80034e2:	bf00      	nop
 80034e4:	3760      	adds	r7, #96	@ 0x60
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200007a0 	.word	0x200007a0
 80034f0:	40012c00 	.word	0x40012c00

080034f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034fa:	f107 0310 	add.w	r3, r7, #16
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	609a      	str	r2, [r3, #8]
 8003506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003508:	1d3b      	adds	r3, r7, #4
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003512:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <MX_TIM2_Init+0x98>)
 8003514:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003518:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 800351a:	4b1c      	ldr	r3, [pc, #112]	@ (800358c <MX_TIM2_Init+0x98>)
 800351c:	22a9      	movs	r2, #169	@ 0xa9
 800351e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003520:	4b1a      	ldr	r3, [pc, #104]	@ (800358c <MX_TIM2_Init+0x98>)
 8003522:	2200      	movs	r2, #0
 8003524:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8003526:	4b19      	ldr	r3, [pc, #100]	@ (800358c <MX_TIM2_Init+0x98>)
 8003528:	f242 7210 	movw	r2, #10000	@ 0x2710
 800352c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800352e:	4b17      	ldr	r3, [pc, #92]	@ (800358c <MX_TIM2_Init+0x98>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003534:	4b15      	ldr	r3, [pc, #84]	@ (800358c <MX_TIM2_Init+0x98>)
 8003536:	2280      	movs	r2, #128	@ 0x80
 8003538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800353a:	4814      	ldr	r0, [pc, #80]	@ (800358c <MX_TIM2_Init+0x98>)
 800353c:	f004 fc70 	bl	8007e20 <HAL_TIM_Base_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003546:	f7ff faec 	bl	8002b22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800354a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800354e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003550:	f107 0310 	add.w	r3, r7, #16
 8003554:	4619      	mov	r1, r3
 8003556:	480d      	ldr	r0, [pc, #52]	@ (800358c <MX_TIM2_Init+0x98>)
 8003558:	f005 fb4e 	bl	8008bf8 <HAL_TIM_ConfigClockSource>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003562:	f7ff fade 	bl	8002b22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4806      	ldr	r0, [pc, #24]	@ (800358c <MX_TIM2_Init+0x98>)
 8003574:	f006 fa82 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800357e:	f7ff fad0 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003582:	bf00      	nop
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200007ec 	.word	0x200007ec

08003590 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08c      	sub	sp, #48	@ 0x30
 8003594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003596:	f107 0320 	add.w	r3, r7, #32
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	609a      	str	r2, [r3, #8]
 80035a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80035b0:	1d3b      	adds	r3, r7, #4
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	605a      	str	r2, [r3, #4]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035bc:	4b2b      	ldr	r3, [pc, #172]	@ (800366c <MX_TIM3_Init+0xdc>)
 80035be:	4a2c      	ldr	r2, [pc, #176]	@ (8003670 <MX_TIM3_Init+0xe0>)
 80035c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 260-1;
 80035c2:	4b2a      	ldr	r3, [pc, #168]	@ (800366c <MX_TIM3_Init+0xdc>)
 80035c4:	f240 1203 	movw	r2, #259	@ 0x103
 80035c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ca:	4b28      	ldr	r3, [pc, #160]	@ (800366c <MX_TIM3_Init+0xdc>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80035d0:	4b26      	ldr	r3, [pc, #152]	@ (800366c <MX_TIM3_Init+0xdc>)
 80035d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d8:	4b24      	ldr	r3, [pc, #144]	@ (800366c <MX_TIM3_Init+0xdc>)
 80035da:	2200      	movs	r2, #0
 80035dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035de:	4b23      	ldr	r3, [pc, #140]	@ (800366c <MX_TIM3_Init+0xdc>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035e4:	4821      	ldr	r0, [pc, #132]	@ (800366c <MX_TIM3_Init+0xdc>)
 80035e6:	f004 fc1b 	bl	8007e20 <HAL_TIM_Base_Init>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80035f0:	f7ff fa97 	bl	8002b22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035fa:	f107 0320 	add.w	r3, r7, #32
 80035fe:	4619      	mov	r1, r3
 8003600:	481a      	ldr	r0, [pc, #104]	@ (800366c <MX_TIM3_Init+0xdc>)
 8003602:	f005 faf9 	bl	8008bf8 <HAL_TIM_ConfigClockSource>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800360c:	f7ff fa89 	bl	8002b22 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003610:	4816      	ldr	r0, [pc, #88]	@ (800366c <MX_TIM3_Init+0xdc>)
 8003612:	f004 fe3f 	bl	8008294 <HAL_TIM_IC_Init>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800361c:	f7ff fa81 	bl	8002b22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	4619      	mov	r1, r3
 800362e:	480f      	ldr	r0, [pc, #60]	@ (800366c <MX_TIM3_Init+0xdc>)
 8003630:	f006 fa24 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800363a:	f7ff fa72 	bl	8002b22 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800363e:	230a      	movs	r3, #10
 8003640:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003642:	2301      	movs	r3, #1
 8003644:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800364e:	1d3b      	adds	r3, r7, #4
 8003650:	2200      	movs	r2, #0
 8003652:	4619      	mov	r1, r3
 8003654:	4805      	ldr	r0, [pc, #20]	@ (800366c <MX_TIM3_Init+0xdc>)
 8003656:	f005 f91e 	bl	8008896 <HAL_TIM_IC_ConfigChannel>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003660:	f7ff fa5f 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003664:	bf00      	nop
 8003666:	3730      	adds	r7, #48	@ 0x30
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000838 	.word	0x20000838
 8003670:	40000400 	.word	0x40000400

08003674 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800367a:	f107 0310 	add.w	r3, r7, #16
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003692:	4b1d      	ldr	r3, [pc, #116]	@ (8003708 <MX_TIM5_Init+0x94>)
 8003694:	4a1d      	ldr	r2, [pc, #116]	@ (800370c <MX_TIM5_Init+0x98>)
 8003696:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 8003698:	4b1b      	ldr	r3, [pc, #108]	@ (8003708 <MX_TIM5_Init+0x94>)
 800369a:	22a9      	movs	r2, #169	@ 0xa9
 800369c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800369e:	4b1a      	ldr	r3, [pc, #104]	@ (8003708 <MX_TIM5_Init+0x94>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 80036a4:	4b18      	ldr	r3, [pc, #96]	@ (8003708 <MX_TIM5_Init+0x94>)
 80036a6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80036aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ac:	4b16      	ldr	r3, [pc, #88]	@ (8003708 <MX_TIM5_Init+0x94>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036b2:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <MX_TIM5_Init+0x94>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80036b8:	4813      	ldr	r0, [pc, #76]	@ (8003708 <MX_TIM5_Init+0x94>)
 80036ba:	f004 fbb1 	bl	8007e20 <HAL_TIM_Base_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80036c4:	f7ff fa2d 	bl	8002b22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80036ce:	f107 0310 	add.w	r3, r7, #16
 80036d2:	4619      	mov	r1, r3
 80036d4:	480c      	ldr	r0, [pc, #48]	@ (8003708 <MX_TIM5_Init+0x94>)
 80036d6:	f005 fa8f 	bl	8008bf8 <HAL_TIM_ConfigClockSource>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80036e0:	f7ff fa1f 	bl	8002b22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e4:	2300      	movs	r3, #0
 80036e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80036ec:	1d3b      	adds	r3, r7, #4
 80036ee:	4619      	mov	r1, r3
 80036f0:	4805      	ldr	r0, [pc, #20]	@ (8003708 <MX_TIM5_Init+0x94>)
 80036f2:	f006 f9c3 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80036fc:	f7ff fa11 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003700:	bf00      	nop
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000884 	.word	0x20000884
 800370c:	40000c00 	.word	0x40000c00

08003710 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003720:	4b15      	ldr	r3, [pc, #84]	@ (8003778 <MX_TIM6_Init+0x68>)
 8003722:	4a16      	ldr	r2, [pc, #88]	@ (800377c <MX_TIM6_Init+0x6c>)
 8003724:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1700-1;
 8003726:	4b14      	ldr	r3, [pc, #80]	@ (8003778 <MX_TIM6_Init+0x68>)
 8003728:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800372c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800372e:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <MX_TIM6_Init+0x68>)
 8003730:	2200      	movs	r2, #0
 8003732:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003734:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <MX_TIM6_Init+0x68>)
 8003736:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800373a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800373c:	4b0e      	ldr	r3, [pc, #56]	@ (8003778 <MX_TIM6_Init+0x68>)
 800373e:	2200      	movs	r2, #0
 8003740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003742:	480d      	ldr	r0, [pc, #52]	@ (8003778 <MX_TIM6_Init+0x68>)
 8003744:	f004 fb6c 	bl	8007e20 <HAL_TIM_Base_Init>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800374e:	f7ff f9e8 	bl	8002b22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	4619      	mov	r1, r3
 800375e:	4806      	ldr	r0, [pc, #24]	@ (8003778 <MX_TIM6_Init+0x68>)
 8003760:	f006 f98c 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800376a:	f7ff f9da 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	200008d0 	.word	0x200008d0
 800377c:	40001000 	.word	0x40001000

08003780 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003786:	463b      	mov	r3, r7
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003792:	4b1e      	ldr	r3, [pc, #120]	@ (800380c <MX_TIM16_Init+0x8c>)
 8003794:	4a1e      	ldr	r2, [pc, #120]	@ (8003810 <MX_TIM16_Init+0x90>)
 8003796:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8003798:	4b1c      	ldr	r3, [pc, #112]	@ (800380c <MX_TIM16_Init+0x8c>)
 800379a:	22a9      	movs	r2, #169	@ 0xa9
 800379c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800379e:	4b1b      	ldr	r3, [pc, #108]	@ (800380c <MX_TIM16_Init+0x8c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 80037a4:	4b19      	ldr	r3, [pc, #100]	@ (800380c <MX_TIM16_Init+0x8c>)
 80037a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80037aa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ac:	4b17      	ldr	r3, [pc, #92]	@ (800380c <MX_TIM16_Init+0x8c>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80037b2:	4b16      	ldr	r3, [pc, #88]	@ (800380c <MX_TIM16_Init+0x8c>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037b8:	4b14      	ldr	r3, [pc, #80]	@ (800380c <MX_TIM16_Init+0x8c>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80037be:	4813      	ldr	r0, [pc, #76]	@ (800380c <MX_TIM16_Init+0x8c>)
 80037c0:	f004 fb2e 	bl	8007e20 <HAL_TIM_Base_Init>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 80037ca:	f7ff f9aa 	bl	8002b22 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 80037ce:	480f      	ldr	r0, [pc, #60]	@ (800380c <MX_TIM16_Init+0x8c>)
 80037d0:	f004 fd60 	bl	8008294 <HAL_TIM_IC_Init>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80037da:	f7ff f9a2 	bl	8002b22 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80037de:	2300      	movs	r3, #0
 80037e0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80037e2:	2301      	movs	r3, #1
 80037e4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80037ea:	230f      	movs	r3, #15
 80037ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80037ee:	463b      	mov	r3, r7
 80037f0:	2200      	movs	r2, #0
 80037f2:	4619      	mov	r1, r3
 80037f4:	4805      	ldr	r0, [pc, #20]	@ (800380c <MX_TIM16_Init+0x8c>)
 80037f6:	f005 f84e 	bl	8008896 <HAL_TIM_IC_ConfigChannel>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8003800:	f7ff f98f 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	2000091c 	.word	0x2000091c
 8003810:	40014400 	.word	0x40014400

08003814 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800381a:	463b      	mov	r3, r7
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003826:	4b1e      	ldr	r3, [pc, #120]	@ (80038a0 <MX_TIM17_Init+0x8c>)
 8003828:	4a1e      	ldr	r2, [pc, #120]	@ (80038a4 <MX_TIM17_Init+0x90>)
 800382a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 800382c:	4b1c      	ldr	r3, [pc, #112]	@ (80038a0 <MX_TIM17_Init+0x8c>)
 800382e:	22a9      	movs	r2, #169	@ 0xa9
 8003830:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003832:	4b1b      	ldr	r3, [pc, #108]	@ (80038a0 <MX_TIM17_Init+0x8c>)
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 8003838:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <MX_TIM17_Init+0x8c>)
 800383a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800383e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003840:	4b17      	ldr	r3, [pc, #92]	@ (80038a0 <MX_TIM17_Init+0x8c>)
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003846:	4b16      	ldr	r3, [pc, #88]	@ (80038a0 <MX_TIM17_Init+0x8c>)
 8003848:	2200      	movs	r2, #0
 800384a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800384c:	4b14      	ldr	r3, [pc, #80]	@ (80038a0 <MX_TIM17_Init+0x8c>)
 800384e:	2200      	movs	r2, #0
 8003850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003852:	4813      	ldr	r0, [pc, #76]	@ (80038a0 <MX_TIM17_Init+0x8c>)
 8003854:	f004 fae4 	bl	8007e20 <HAL_TIM_Base_Init>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 800385e:	f7ff f960 	bl	8002b22 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8003862:	480f      	ldr	r0, [pc, #60]	@ (80038a0 <MX_TIM17_Init+0x8c>)
 8003864:	f004 fd16 	bl	8008294 <HAL_TIM_IC_Init>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800386e:	f7ff f958 	bl	8002b22 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003872:	2300      	movs	r3, #0
 8003874:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003876:	2301      	movs	r3, #1
 8003878:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800387e:	230f      	movs	r3, #15
 8003880:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003882:	463b      	mov	r3, r7
 8003884:	2200      	movs	r2, #0
 8003886:	4619      	mov	r1, r3
 8003888:	4805      	ldr	r0, [pc, #20]	@ (80038a0 <MX_TIM17_Init+0x8c>)
 800388a:	f005 f804 	bl	8008896 <HAL_TIM_IC_ConfigChannel>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8003894:	f7ff f945 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000968 	.word	0x20000968
 80038a4:	40014800 	.word	0x40014800

080038a8 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b09c      	sub	sp, #112	@ 0x70
 80038ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	609a      	str	r2, [r3, #8]
 80038ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
 80038d8:	615a      	str	r2, [r3, #20]
 80038da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038dc:	1d3b      	adds	r3, r7, #4
 80038de:	2234      	movs	r2, #52	@ 0x34
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f009 fcf5 	bl	800d2d2 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80038e8:	4b46      	ldr	r3, [pc, #280]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 80038ea:	4a47      	ldr	r2, [pc, #284]	@ (8003a08 <MX_TIM20_Init+0x160>)
 80038ec:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 260-1;
 80038ee:	4b45      	ldr	r3, [pc, #276]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 80038f0:	f240 1203 	movw	r2, #259	@ 0x103
 80038f4:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f6:	4b43      	ldr	r3, [pc, #268]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 80038fc:	4b41      	ldr	r3, [pc, #260]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 80038fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003902:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003904:	4b3f      	ldr	r3, [pc, #252]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 8003906:	2200      	movs	r2, #0
 8003908:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800390a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 800390c:	2200      	movs	r2, #0
 800390e:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003910:	4b3c      	ldr	r3, [pc, #240]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 8003912:	2200      	movs	r2, #0
 8003914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8003916:	483b      	ldr	r0, [pc, #236]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 8003918:	f004 fa82 	bl	8007e20 <HAL_TIM_Base_Init>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <MX_TIM20_Init+0x7e>
  {
    Error_Handler();
 8003922:	f7ff f8fe 	bl	8002b22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003926:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800392a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 800392c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003930:	4619      	mov	r1, r3
 8003932:	4834      	ldr	r0, [pc, #208]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 8003934:	f005 f960 	bl	8008bf8 <HAL_TIM_ConfigClockSource>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <MX_TIM20_Init+0x9a>
  {
    Error_Handler();
 800393e:	f7ff f8f0 	bl	8002b22 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8003942:	4830      	ldr	r0, [pc, #192]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 8003944:	f004 fb3c 	bl	8007fc0 <HAL_TIM_PWM_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_TIM20_Init+0xaa>
  {
    Error_Handler();
 800394e:	f7ff f8e8 	bl	8002b22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003952:	2300      	movs	r3, #0
 8003954:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003956:	2300      	movs	r3, #0
 8003958:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800395a:	2300      	movs	r3, #0
 800395c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800395e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003962:	4619      	mov	r1, r3
 8003964:	4827      	ldr	r0, [pc, #156]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 8003966:	f006 f889 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_TIM20_Init+0xcc>
  {
    Error_Handler();
 8003970:	f7ff f8d7 	bl	8002b22 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003974:	2360      	movs	r3, #96	@ 0x60
 8003976:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800397c:	2300      	movs	r3, #0
 800397e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003980:	2300      	movs	r3, #0
 8003982:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003984:	2300      	movs	r3, #0
 8003986:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003988:	2300      	movs	r3, #0
 800398a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800398c:	2300      	movs	r3, #0
 800398e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003990:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003994:	2200      	movs	r2, #0
 8003996:	4619      	mov	r1, r3
 8003998:	481a      	ldr	r0, [pc, #104]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 800399a:	f005 f819 	bl	80089d0 <HAL_TIM_PWM_ConfigChannel>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <MX_TIM20_Init+0x100>
  {
    Error_Handler();
 80039a4:	f7ff f8bd 	bl	8002b22 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80039c6:	2300      	movs	r3, #0
 80039c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80039ca:	2300      	movs	r3, #0
 80039cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80039ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80039d8:	2300      	movs	r3, #0
 80039da:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039dc:	2300      	movs	r3, #0
 80039de:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80039e0:	1d3b      	adds	r3, r7, #4
 80039e2:	4619      	mov	r1, r3
 80039e4:	4807      	ldr	r0, [pc, #28]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 80039e6:	f006 f8df 	bl	8009ba8 <HAL_TIMEx_ConfigBreakDeadTime>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM20_Init+0x14c>
  {
    Error_Handler();
 80039f0:	f7ff f897 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 80039f4:	4803      	ldr	r0, [pc, #12]	@ (8003a04 <MX_TIM20_Init+0x15c>)
 80039f6:	f000 f95b 	bl	8003cb0 <HAL_TIM_MspPostInit>

}
 80039fa:	bf00      	nop
 80039fc:	3770      	adds	r7, #112	@ 0x70
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200009b4 	.word	0x200009b4
 8003a08:	40015000 	.word	0x40015000

08003a0c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a11      	ldr	r2, [pc, #68]	@ (8003a60 <HAL_TIM_PWM_MspInit+0x54>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d11b      	bne.n	8003a56 <HAL_TIM_PWM_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a1e:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <HAL_TIM_PWM_MspInit+0x58>)
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	4a10      	ldr	r2, [pc, #64]	@ (8003a64 <HAL_TIM_PWM_MspInit+0x58>)
 8003a24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a28:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a64 <HAL_TIM_PWM_MspInit+0x58>)
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003a36:	2200      	movs	r2, #0
 8003a38:	2100      	movs	r1, #0
 8003a3a:	2019      	movs	r0, #25
 8003a3c:	f000 fde3 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a40:	2019      	movs	r0, #25
 8003a42:	f000 fdfa 	bl	800463a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003a46:	2200      	movs	r2, #0
 8003a48:	2100      	movs	r1, #0
 8003a4a:	201a      	movs	r0, #26
 8003a4c:	f000 fddb 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003a50:	201a      	movs	r0, #26
 8003a52:	f000 fdf2 	bl	800463a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40021000 	.word	0x40021000

08003a68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b092      	sub	sp, #72	@ 0x48
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a88:	d114      	bne.n	8003ab4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a8a:	4b80      	ldr	r3, [pc, #512]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8e:	4a7f      	ldr	r2, [pc, #508]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a96:	4b7d      	ldr	r3, [pc, #500]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	201c      	movs	r0, #28
 8003aa8:	f000 fdad 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003aac:	201c      	movs	r0, #28
 8003aae:	f000 fdc4 	bl	800463a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8003ab2:	e0e6      	b.n	8003c82 <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM3)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a75      	ldr	r2, [pc, #468]	@ (8003c90 <HAL_TIM_Base_MspInit+0x228>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d130      	bne.n	8003b20 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003abe:	4b73      	ldr	r3, [pc, #460]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac2:	4a72      	ldr	r2, [pc, #456]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003ac4:	f043 0302 	orr.w	r3, r3, #2
 8003ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aca:	4b70      	ldr	r3, [pc, #448]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	4a6c      	ldr	r2, [pc, #432]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003adc:	f043 0304 	orr.w	r3, r3, #4
 8003ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003aee:	2340      	movs	r3, #64	@ 0x40
 8003af0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af2:	2302      	movs	r3, #2
 8003af4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afa:	2300      	movs	r3, #0
 8003afc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003afe:	2302      	movs	r3, #2
 8003b00:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b06:	4619      	mov	r1, r3
 8003b08:	4862      	ldr	r0, [pc, #392]	@ (8003c94 <HAL_TIM_Base_MspInit+0x22c>)
 8003b0a:	f001 f8ff 	bl	8004d0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2101      	movs	r1, #1
 8003b12:	201d      	movs	r0, #29
 8003b14:	f000 fd77 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b18:	201d      	movs	r0, #29
 8003b1a:	f000 fd8e 	bl	800463a <HAL_NVIC_EnableIRQ>
}
 8003b1e:	e0b0      	b.n	8003c82 <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM5)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a5c      	ldr	r2, [pc, #368]	@ (8003c98 <HAL_TIM_Base_MspInit+0x230>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d114      	bne.n	8003b54 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b2a:	4b58      	ldr	r3, [pc, #352]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2e:	4a57      	ldr	r2, [pc, #348]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003b30:	f043 0308 	orr.w	r3, r3, #8
 8003b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b36:	4b55      	ldr	r3, [pc, #340]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003b42:	2200      	movs	r2, #0
 8003b44:	2100      	movs	r1, #0
 8003b46:	2032      	movs	r0, #50	@ 0x32
 8003b48:	f000 fd5d 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003b4c:	2032      	movs	r0, #50	@ 0x32
 8003b4e:	f000 fd74 	bl	800463a <HAL_NVIC_EnableIRQ>
}
 8003b52:	e096      	b.n	8003c82 <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM6)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a50      	ldr	r2, [pc, #320]	@ (8003c9c <HAL_TIM_Base_MspInit+0x234>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d114      	bne.n	8003b88 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	4a4a      	ldr	r2, [pc, #296]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003b64:	f043 0310 	orr.w	r3, r3, #16
 8003b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b6a:	4b48      	ldr	r3, [pc, #288]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	623b      	str	r3, [r7, #32]
 8003b74:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003b76:	2200      	movs	r2, #0
 8003b78:	2100      	movs	r1, #0
 8003b7a:	2036      	movs	r0, #54	@ 0x36
 8003b7c:	f000 fd43 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b80:	2036      	movs	r0, #54	@ 0x36
 8003b82:	f000 fd5a 	bl	800463a <HAL_NVIC_EnableIRQ>
}
 8003b86:	e07c      	b.n	8003c82 <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM16)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a44      	ldr	r2, [pc, #272]	@ (8003ca0 <HAL_TIM_Base_MspInit+0x238>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d130      	bne.n	8003bf4 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003b92:	4b3e      	ldr	r3, [pc, #248]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b96:	4a3d      	ldr	r2, [pc, #244]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003baa:	4b38      	ldr	r3, [pc, #224]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bae:	4a37      	ldr	r2, [pc, #220]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bb6:	4b35      	ldr	r3, [pc, #212]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003bc2:	2310      	movs	r3, #16
 8003bc4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4831      	ldr	r0, [pc, #196]	@ (8003ca4 <HAL_TIM_Base_MspInit+0x23c>)
 8003bde:	f001 f895 	bl	8004d0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003be2:	2200      	movs	r2, #0
 8003be4:	2100      	movs	r1, #0
 8003be6:	2019      	movs	r0, #25
 8003be8:	f000 fd0d 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003bec:	2019      	movs	r0, #25
 8003bee:	f000 fd24 	bl	800463a <HAL_NVIC_EnableIRQ>
}
 8003bf2:	e046      	b.n	8003c82 <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM17)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x240>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d130      	bne.n	8003c60 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003bfe:	4b23      	ldr	r3, [pc, #140]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c02:	4a22      	ldr	r2, [pc, #136]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c08:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c0a:	4b20      	ldr	r3, [pc, #128]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c16:	4b1d      	ldr	r3, [pc, #116]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003c1c:	f043 0302 	orr.w	r3, r3, #2
 8003c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c22:	4b1a      	ldr	r3, [pc, #104]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c2e:	2320      	movs	r3, #32
 8003c30:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c32:	2302      	movs	r3, #2
 8003c34:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8003c3e:	230a      	movs	r3, #10
 8003c40:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c46:	4619      	mov	r1, r3
 8003c48:	4816      	ldr	r0, [pc, #88]	@ (8003ca4 <HAL_TIM_Base_MspInit+0x23c>)
 8003c4a:	f001 f85f 	bl	8004d0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2100      	movs	r1, #0
 8003c52:	201a      	movs	r0, #26
 8003c54:	f000 fcd7 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003c58:	201a      	movs	r0, #26
 8003c5a:	f000 fcee 	bl	800463a <HAL_NVIC_EnableIRQ>
}
 8003c5e:	e010      	b.n	8003c82 <HAL_TIM_Base_MspInit+0x21a>
  else if(tim_baseHandle->Instance==TIM20)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a11      	ldr	r2, [pc, #68]	@ (8003cac <HAL_TIM_Base_MspInit+0x244>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10b      	bne.n	8003c82 <HAL_TIM_Base_MspInit+0x21a>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003c6a:	4b08      	ldr	r3, [pc, #32]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6e:	4a07      	ldr	r2, [pc, #28]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003c70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c74:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c76:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <HAL_TIM_Base_MspInit+0x224>)
 8003c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
}
 8003c82:	bf00      	nop
 8003c84:	3748      	adds	r7, #72	@ 0x48
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40000400 	.word	0x40000400
 8003c94:	48000800 	.word	0x48000800
 8003c98:	40000c00 	.word	0x40000c00
 8003c9c:	40001000 	.word	0x40001000
 8003ca0:	40014400 	.word	0x40014400
 8003ca4:	48000400 	.word	0x48000400
 8003ca8:	40014800 	.word	0x40014800
 8003cac:	40015000 	.word	0x40015000

08003cb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	@ 0x28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a22      	ldr	r2, [pc, #136]	@ (8003d58 <HAL_TIM_MspPostInit+0xa8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d11c      	bne.n	8003d0c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd2:	4b22      	ldr	r3, [pc, #136]	@ (8003d5c <HAL_TIM_MspPostInit+0xac>)
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd6:	4a21      	ldr	r2, [pc, #132]	@ (8003d5c <HAL_TIM_MspPostInit+0xac>)
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cde:	4b1f      	ldr	r3, [pc, #124]	@ (8003d5c <HAL_TIM_MspPostInit+0xac>)
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 8003cea:	2303      	movs	r3, #3
 8003cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	4619      	mov	r1, r3
 8003d04:	4816      	ldr	r0, [pc, #88]	@ (8003d60 <HAL_TIM_MspPostInit+0xb0>)
 8003d06:	f001 f801 	bl	8004d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8003d0a:	e020      	b.n	8003d4e <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM20)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a14      	ldr	r2, [pc, #80]	@ (8003d64 <HAL_TIM_MspPostInit+0xb4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d11b      	bne.n	8003d4e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d16:	4b11      	ldr	r3, [pc, #68]	@ (8003d5c <HAL_TIM_MspPostInit+0xac>)
 8003d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1a:	4a10      	ldr	r2, [pc, #64]	@ (8003d5c <HAL_TIM_MspPostInit+0xac>)
 8003d1c:	f043 0302 	orr.w	r3, r3, #2
 8003d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d22:	4b0e      	ldr	r3, [pc, #56]	@ (8003d5c <HAL_TIM_MspPostInit+0xac>)
 8003d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d2e:	2304      	movs	r3, #4
 8003d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d32:	2302      	movs	r3, #2
 8003d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d42:	f107 0314 	add.w	r3, r7, #20
 8003d46:	4619      	mov	r1, r3
 8003d48:	4807      	ldr	r0, [pc, #28]	@ (8003d68 <HAL_TIM_MspPostInit+0xb8>)
 8003d4a:	f000 ffdf 	bl	8004d0c <HAL_GPIO_Init>
}
 8003d4e:	bf00      	nop
 8003d50:	3728      	adds	r7, #40	@ 0x28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	48000800 	.word	0x48000800
 8003d64:	40015000 	.word	0x40015000
 8003d68:	48000400 	.word	0x48000400

08003d6c <vTimerInit>:
#include "timer.h"

int iIndex;
single_timer iActiveTimers[20]; //Consegue guardar 20 contadores diferentes

void vTimerInit() {
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
	iIndex = 0;
 8003d72:	4b0f      	ldr	r3, [pc, #60]	@ (8003db0 <vTimerInit+0x44>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 20; i++) {
 8003d78:	2300      	movs	r3, #0
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	e00d      	b.n	8003d9a <vTimerInit+0x2e>
		iActiveTimers[i].iCounter = 0;
 8003d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003db4 <vTimerInit+0x48>)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2100      	movs	r1, #0
 8003d84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		iActiveTimers[i].iTotalMs = 0;
 8003d88:	4a0a      	ldr	r2, [pc, #40]	@ (8003db4 <vTimerInit+0x48>)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	2200      	movs	r2, #0
 8003d92:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 20; i++) {
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3301      	adds	r3, #1
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b13      	cmp	r3, #19
 8003d9e:	ddee      	ble.n	8003d7e <vTimerInit+0x12>
	}
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000a00 	.word	0x20000a00
 8003db4:	20000a04 	.word	0x20000a04

08003db8 <iSetTimer>:

//set o timer para comecar a contar, conta até total_ms, no timerCode
//Retorna o "codigo' do timer
int iSetTimer(int total_ms) {
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	iActiveTimers[iIndex].iTotalMs = total_ms;
 8003dc0:	4b09      	ldr	r3, [pc, #36]	@ (8003de8 <iSetTimer+0x30>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a09      	ldr	r2, [pc, #36]	@ (8003dec <iSetTimer+0x34>)
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	4413      	add	r3, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	605a      	str	r2, [r3, #4]
	return ++iIndex;
 8003dce:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <iSetTimer+0x30>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	4a04      	ldr	r2, [pc, #16]	@ (8003de8 <iSetTimer+0x30>)
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b03      	ldr	r3, [pc, #12]	@ (8003de8 <iSetTimer+0x30>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	20000a00 	.word	0x20000a00
 8003dec:	20000a04 	.word	0x20000a04

08003df0 <cCountTime>:

// conta (ms) ms, funcao chamada a cada 10 ms, pela main (pTimGeral)
char cCountTime(int ms, int timerCode) {
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
	iActiveTimers[timerCode].iCounter += ms;
 8003dfa:	4a11      	ldr	r2, [pc, #68]	@ (8003e40 <cCountTime+0x50>)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	441a      	add	r2, r3
 8003e06:	490e      	ldr	r1, [pc, #56]	@ (8003e40 <cCountTime+0x50>)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	if (iActiveTimers[timerCode].iCounter >= iActiveTimers[timerCode].iTotalMs) {
 8003e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e40 <cCountTime+0x50>)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003e16:	490a      	ldr	r1, [pc, #40]	@ (8003e40 <cCountTime+0x50>)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	440b      	add	r3, r1
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	db06      	blt.n	8003e32 <cCountTime+0x42>
		iActiveTimers[timerCode].iCounter = 0;
 8003e24:	4a06      	ldr	r2, [pc, #24]	@ (8003e40 <cCountTime+0x50>)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		return 1;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <cCountTime+0x44>
	}

	return 0;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	20000a04 	.word	0x20000a04

08003e44 <vUltrassonicoInit>:
//
// INPUT PARAMS: TIM_HandleTypeDef* pTimerEcoUltrassonicoFrontal ,TIM_HandleTypeDef* TimerTrigger
//
// OUTPUT PARAMS: n/a
// ********************************************** //
void vUltrassonicoInit(TIM_HandleTypeDef* pTimerEcoUltrassonicoFrontal ,TIM_HandleTypeDef* TimerTrigger) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]

  xUltrassonicoData.pTimerEcoUltrassonicoFrontal=pTimerEcoUltrassonicoFrontal;
 8003e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8003e8c <vUltrassonicoInit+0x48>)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6013      	str	r3, [r2, #0]
  xUltrassonicoData.TimerTrigger= TimerTrigger;
 8003e54:	4a0d      	ldr	r2, [pc, #52]	@ (8003e8c <vUltrassonicoInit+0x48>)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6053      	str	r3, [r2, #4]
  xUltrassonicoData.Distance=0.0;
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e8c <vUltrassonicoInit+0x48>)
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]

  HAL_TIM_PWM_Start(xUltrassonicoData.TimerTrigger, TIM_CHANNEL_1);
 8003e62:	4b0a      	ldr	r3, [pc, #40]	@ (8003e8c <vUltrassonicoInit+0x48>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2100      	movs	r1, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f004 f901 	bl	8008070 <HAL_TIM_PWM_Start>
  //Define um pulso de 10us a cada 100ms no trigger, utilizando logica pwm
  xUltrassonicoData.TimerTrigger->Instance->CCR1 = 8;
 8003e6e:	4b07      	ldr	r3, [pc, #28]	@ (8003e8c <vUltrassonicoInit+0x48>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2208      	movs	r2, #8
 8003e76:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_TIM_IC_Start_IT(xUltrassonicoData.pTimerEcoUltrassonicoFrontal, TIM_CHANNEL_1);
 8003e78:	4b04      	ldr	r3, [pc, #16]	@ (8003e8c <vUltrassonicoInit+0x48>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f004 fa6a 	bl	8008358 <HAL_TIM_IC_Start_IT>

}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000aa4 	.word	0x20000aa4

08003e90 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003e94:	4b21      	ldr	r3, [pc, #132]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003e96:	4a22      	ldr	r2, [pc, #136]	@ (8003f20 <MX_LPUART1_UART_Init+0x90>)
 8003e98:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003e9a:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003e9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ea0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003eae:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003eb4:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eba:	4b18      	ldr	r3, [pc, #96]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ec0:	4b16      	ldr	r3, [pc, #88]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ec6:	4b15      	ldr	r3, [pc, #84]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ecc:	4b13      	ldr	r3, [pc, #76]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003ed2:	4812      	ldr	r0, [pc, #72]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ed4:	f005 ff42 	bl	8009d5c <HAL_UART_Init>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003ede:	f7fe fe20 	bl	8002b22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	480d      	ldr	r0, [pc, #52]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ee6:	f008 f9f2 	bl	800c2ce <HAL_UARTEx_SetTxFifoThreshold>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003ef0:	f7fe fe17 	bl	8002b22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4809      	ldr	r0, [pc, #36]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003ef8:	f008 fa27 	bl	800c34a <HAL_UARTEx_SetRxFifoThreshold>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003f02:	f7fe fe0e 	bl	8002b22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003f06:	4805      	ldr	r0, [pc, #20]	@ (8003f1c <MX_LPUART1_UART_Init+0x8c>)
 8003f08:	f008 f9a8 	bl	800c25c <HAL_UARTEx_DisableFifoMode>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003f12:	f7fe fe06 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000ab0 	.word	0x20000ab0
 8003f20:	40008000 	.word	0x40008000

08003f24 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f28:	4b22      	ldr	r3, [pc, #136]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f2a:	4a23      	ldr	r2, [pc, #140]	@ (8003fb8 <MX_USART1_UART_Init+0x94>)
 8003f2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8003f2e:	4b21      	ldr	r3, [pc, #132]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f30:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8003f34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f36:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f42:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f48:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f4a:	220c      	movs	r2, #12
 8003f4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f4e:	4b19      	ldr	r3, [pc, #100]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f54:	4b17      	ldr	r3, [pc, #92]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f5a:	4b16      	ldr	r3, [pc, #88]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f60:	4b14      	ldr	r3, [pc, #80]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f66:	4b13      	ldr	r3, [pc, #76]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f6c:	4811      	ldr	r0, [pc, #68]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f6e:	f005 fef5 	bl	8009d5c <HAL_UART_Init>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003f78:	f7fe fdd3 	bl	8002b22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	480d      	ldr	r0, [pc, #52]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f80:	f008 f9a5 	bl	800c2ce <HAL_UARTEx_SetTxFifoThreshold>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003f8a:	f7fe fdca 	bl	8002b22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4808      	ldr	r0, [pc, #32]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003f92:	f008 f9da 	bl	800c34a <HAL_UARTEx_SetRxFifoThreshold>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003f9c:	f7fe fdc1 	bl	8002b22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003fa0:	4804      	ldr	r0, [pc, #16]	@ (8003fb4 <MX_USART1_UART_Init+0x90>)
 8003fa2:	f008 f95b 	bl	800c25c <HAL_UARTEx_DisableFifoMode>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003fac:	f7fe fdb9 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fb0:	bf00      	nop
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000b44 	.word	0x20000b44
 8003fb8:	40013800 	.word	0x40013800

08003fbc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003fc0:	4b22      	ldr	r3, [pc, #136]	@ (800404c <MX_USART3_UART_Init+0x90>)
 8003fc2:	4a23      	ldr	r2, [pc, #140]	@ (8004050 <MX_USART3_UART_Init+0x94>)
 8003fc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8003fc6:	4b21      	ldr	r3, [pc, #132]	@ (800404c <MX_USART3_UART_Init+0x90>)
 8003fc8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8003fcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003fce:	4b1f      	ldr	r3, [pc, #124]	@ (800404c <MX_USART3_UART_Init+0x90>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800404c <MX_USART3_UART_Init+0x90>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003fda:	4b1c      	ldr	r3, [pc, #112]	@ (800404c <MX_USART3_UART_Init+0x90>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800404c <MX_USART3_UART_Init+0x90>)
 8003fe2:	220c      	movs	r2, #12
 8003fe4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fe6:	4b19      	ldr	r3, [pc, #100]	@ (800404c <MX_USART3_UART_Init+0x90>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fec:	4b17      	ldr	r3, [pc, #92]	@ (800404c <MX_USART3_UART_Init+0x90>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ff2:	4b16      	ldr	r3, [pc, #88]	@ (800404c <MX_USART3_UART_Init+0x90>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ff8:	4b14      	ldr	r3, [pc, #80]	@ (800404c <MX_USART3_UART_Init+0x90>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ffe:	4b13      	ldr	r3, [pc, #76]	@ (800404c <MX_USART3_UART_Init+0x90>)
 8004000:	2200      	movs	r2, #0
 8004002:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004004:	4811      	ldr	r0, [pc, #68]	@ (800404c <MX_USART3_UART_Init+0x90>)
 8004006:	f005 fea9 	bl	8009d5c <HAL_UART_Init>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004010:	f7fe fd87 	bl	8002b22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004014:	2100      	movs	r1, #0
 8004016:	480d      	ldr	r0, [pc, #52]	@ (800404c <MX_USART3_UART_Init+0x90>)
 8004018:	f008 f959 	bl	800c2ce <HAL_UARTEx_SetTxFifoThreshold>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004022:	f7fe fd7e 	bl	8002b22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004026:	2100      	movs	r1, #0
 8004028:	4808      	ldr	r0, [pc, #32]	@ (800404c <MX_USART3_UART_Init+0x90>)
 800402a:	f008 f98e 	bl	800c34a <HAL_UARTEx_SetRxFifoThreshold>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004034:	f7fe fd75 	bl	8002b22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004038:	4804      	ldr	r0, [pc, #16]	@ (800404c <MX_USART3_UART_Init+0x90>)
 800403a:	f008 f90f 	bl	800c25c <HAL_UARTEx_DisableFifoMode>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004044:	f7fe fd6d 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004048:	bf00      	nop
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20000bd8 	.word	0x20000bd8
 8004050:	40004800 	.word	0x40004800

08004054 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b0a4      	sub	sp, #144	@ 0x90
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800405c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	60da      	str	r2, [r3, #12]
 800406a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800406c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004070:	2254      	movs	r2, #84	@ 0x54
 8004072:	2100      	movs	r1, #0
 8004074:	4618      	mov	r0, r3
 8004076:	f009 f92c 	bl	800d2d2 <memset>
  if(uartHandle->Instance==LPUART1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a7e      	ldr	r2, [pc, #504]	@ (8004278 <HAL_UART_MspInit+0x224>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d143      	bne.n	800410c <HAL_UART_MspInit+0xb8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004084:	2320      	movs	r3, #32
 8004086:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004088:	2300      	movs	r3, #0
 800408a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800408c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004090:	4618      	mov	r0, r3
 8004092:	f003 fc77 	bl	8007984 <HAL_RCCEx_PeriphCLKConfig>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800409c:	f7fe fd41 	bl	8002b22 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80040a0:	4b76      	ldr	r3, [pc, #472]	@ (800427c <HAL_UART_MspInit+0x228>)
 80040a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a4:	4a75      	ldr	r2, [pc, #468]	@ (800427c <HAL_UART_MspInit+0x228>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80040ac:	4b73      	ldr	r3, [pc, #460]	@ (800427c <HAL_UART_MspInit+0x228>)
 80040ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b8:	4b70      	ldr	r3, [pc, #448]	@ (800427c <HAL_UART_MspInit+0x228>)
 80040ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040bc:	4a6f      	ldr	r2, [pc, #444]	@ (800427c <HAL_UART_MspInit+0x228>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040c4:	4b6d      	ldr	r3, [pc, #436]	@ (800427c <HAL_UART_MspInit+0x228>)
 80040c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	623b      	str	r3, [r7, #32]
 80040ce:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80040d0:	230c      	movs	r3, #12
 80040d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d4:	2302      	movs	r3, #2
 80040d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80040e6:	230c      	movs	r3, #12
 80040e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ec:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80040f0:	4619      	mov	r1, r3
 80040f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040f6:	f000 fe09 	bl	8004d0c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80040fa:	2200      	movs	r2, #0
 80040fc:	2100      	movs	r1, #0
 80040fe:	205b      	movs	r0, #91	@ 0x5b
 8004100:	f000 fa81 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004104:	205b      	movs	r0, #91	@ 0x5b
 8004106:	f000 fa98 	bl	800463a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800410a:	e0b1      	b.n	8004270 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a5b      	ldr	r2, [pc, #364]	@ (8004280 <HAL_UART_MspInit+0x22c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d164      	bne.n	80041e0 <HAL_UART_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004116:	2301      	movs	r3, #1
 8004118:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800411a:	2300      	movs	r3, #0
 800411c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800411e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004122:	4618      	mov	r0, r3
 8004124:	f003 fc2e 	bl	8007984 <HAL_RCCEx_PeriphCLKConfig>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_UART_MspInit+0xde>
      Error_Handler();
 800412e:	f7fe fcf8 	bl	8002b22 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004132:	4b52      	ldr	r3, [pc, #328]	@ (800427c <HAL_UART_MspInit+0x228>)
 8004134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004136:	4a51      	ldr	r2, [pc, #324]	@ (800427c <HAL_UART_MspInit+0x228>)
 8004138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800413c:	6613      	str	r3, [r2, #96]	@ 0x60
 800413e:	4b4f      	ldr	r3, [pc, #316]	@ (800427c <HAL_UART_MspInit+0x228>)
 8004140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800414a:	4b4c      	ldr	r3, [pc, #304]	@ (800427c <HAL_UART_MspInit+0x228>)
 800414c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414e:	4a4b      	ldr	r2, [pc, #300]	@ (800427c <HAL_UART_MspInit+0x228>)
 8004150:	f043 0304 	orr.w	r3, r3, #4
 8004154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004156:	4b49      	ldr	r3, [pc, #292]	@ (800427c <HAL_UART_MspInit+0x228>)
 8004158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004162:	4b46      	ldr	r3, [pc, #280]	@ (800427c <HAL_UART_MspInit+0x228>)
 8004164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004166:	4a45      	ldr	r2, [pc, #276]	@ (800427c <HAL_UART_MspInit+0x228>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800416e:	4b43      	ldr	r3, [pc, #268]	@ (800427c <HAL_UART_MspInit+0x228>)
 8004170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800417a:	2320      	movs	r3, #32
 800417c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417e:	2302      	movs	r3, #2
 8004180:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	2300      	movs	r3, #0
 8004186:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418a:	2300      	movs	r3, #0
 800418c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004190:	2307      	movs	r3, #7
 8004192:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004196:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800419a:	4619      	mov	r1, r3
 800419c:	4839      	ldr	r0, [pc, #228]	@ (8004284 <HAL_UART_MspInit+0x230>)
 800419e:	f000 fdb5 	bl	8004d0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a8:	2302      	movs	r3, #2
 80041aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041ba:	2307      	movs	r3, #7
 80041bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80041c4:	4619      	mov	r1, r3
 80041c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041ca:	f000 fd9f 	bl	8004d0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80041ce:	2200      	movs	r2, #0
 80041d0:	2100      	movs	r1, #0
 80041d2:	2025      	movs	r0, #37	@ 0x25
 80041d4:	f000 fa17 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80041d8:	2025      	movs	r0, #37	@ 0x25
 80041da:	f000 fa2e 	bl	800463a <HAL_NVIC_EnableIRQ>
}
 80041de:	e047      	b.n	8004270 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART3)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a28      	ldr	r2, [pc, #160]	@ (8004288 <HAL_UART_MspInit+0x234>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d142      	bne.n	8004270 <HAL_UART_MspInit+0x21c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80041ea:	2304      	movs	r3, #4
 80041ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80041ee:	2300      	movs	r3, #0
 80041f0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041f6:	4618      	mov	r0, r3
 80041f8:	f003 fbc4 	bl	8007984 <HAL_RCCEx_PeriphCLKConfig>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 8004202:	f7fe fc8e 	bl	8002b22 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004206:	4b1d      	ldr	r3, [pc, #116]	@ (800427c <HAL_UART_MspInit+0x228>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420a:	4a1c      	ldr	r2, [pc, #112]	@ (800427c <HAL_UART_MspInit+0x228>)
 800420c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004210:	6593      	str	r3, [r2, #88]	@ 0x58
 8004212:	4b1a      	ldr	r3, [pc, #104]	@ (800427c <HAL_UART_MspInit+0x228>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800421e:	4b17      	ldr	r3, [pc, #92]	@ (800427c <HAL_UART_MspInit+0x228>)
 8004220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004222:	4a16      	ldr	r2, [pc, #88]	@ (800427c <HAL_UART_MspInit+0x228>)
 8004224:	f043 0302 	orr.w	r3, r3, #2
 8004228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800422a:	4b14      	ldr	r3, [pc, #80]	@ (800427c <HAL_UART_MspInit+0x228>)
 800422c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004236:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800423a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423c:	2302      	movs	r3, #2
 800423e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004248:	2300      	movs	r3, #0
 800424a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800424e:	2307      	movs	r3, #7
 8004250:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004254:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004258:	4619      	mov	r1, r3
 800425a:	480c      	ldr	r0, [pc, #48]	@ (800428c <HAL_UART_MspInit+0x238>)
 800425c:	f000 fd56 	bl	8004d0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8004260:	2200      	movs	r2, #0
 8004262:	2101      	movs	r1, #1
 8004264:	2027      	movs	r0, #39	@ 0x27
 8004266:	f000 f9ce 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800426a:	2027      	movs	r0, #39	@ 0x27
 800426c:	f000 f9e5 	bl	800463a <HAL_NVIC_EnableIRQ>
}
 8004270:	bf00      	nop
 8004272:	3790      	adds	r7, #144	@ 0x90
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40008000 	.word	0x40008000
 800427c:	40021000 	.word	0x40021000
 8004280:	40013800 	.word	0x40013800
 8004284:	48000800 	.word	0x48000800
 8004288:	40004800 	.word	0x40004800
 800428c:	48000400 	.word	0x48000400

08004290 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004290:	480d      	ldr	r0, [pc, #52]	@ (80042c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004292:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004294:	f7ff f87c 	bl	8003390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004298:	480c      	ldr	r0, [pc, #48]	@ (80042cc <LoopForever+0x6>)
  ldr r1, =_edata
 800429a:	490d      	ldr	r1, [pc, #52]	@ (80042d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800429c:	4a0d      	ldr	r2, [pc, #52]	@ (80042d4 <LoopForever+0xe>)
  movs r3, #0
 800429e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80042a0:	e002      	b.n	80042a8 <LoopCopyDataInit>

080042a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042a6:	3304      	adds	r3, #4

080042a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042ac:	d3f9      	bcc.n	80042a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ae:	4a0a      	ldr	r2, [pc, #40]	@ (80042d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042b0:	4c0a      	ldr	r4, [pc, #40]	@ (80042dc <LoopForever+0x16>)
  movs r3, #0
 80042b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042b4:	e001      	b.n	80042ba <LoopFillZerobss>

080042b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b8:	3204      	adds	r2, #4

080042ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042bc:	d3fb      	bcc.n	80042b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042be:	f009 f86f 	bl	800d3a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042c2:	f7fe f885 	bl	80023d0 <main>

080042c6 <LoopForever>:

LoopForever:
    b LoopForever
 80042c6:	e7fe      	b.n	80042c6 <LoopForever>
  ldr   r0, =_estack
 80042c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042d0:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80042d4:	0800fbb0 	.word	0x0800fbb0
  ldr r2, =_sbss
 80042d8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80042dc:	20000dbc 	.word	0x20000dbc

080042e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042e0:	e7fe      	b.n	80042e0 <ADC1_2_IRQHandler>

080042e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042ec:	2003      	movs	r0, #3
 80042ee:	f000 f97f 	bl	80045f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042f2:	200f      	movs	r0, #15
 80042f4:	f000 f80e 	bl	8004314 <HAL_InitTick>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	71fb      	strb	r3, [r7, #7]
 8004302:	e001      	b.n	8004308 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004304:	f7fe fe98 	bl	8003038 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004308:	79fb      	ldrb	r3, [r7, #7]

}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004320:	4b16      	ldr	r3, [pc, #88]	@ (800437c <HAL_InitTick+0x68>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d022      	beq.n	800436e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004328:	4b15      	ldr	r3, [pc, #84]	@ (8004380 <HAL_InitTick+0x6c>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4b13      	ldr	r3, [pc, #76]	@ (800437c <HAL_InitTick+0x68>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004334:	fbb1 f3f3 	udiv	r3, r1, r3
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f998 	bl	8004672 <HAL_SYSTICK_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10f      	bne.n	8004368 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b0f      	cmp	r3, #15
 800434c:	d809      	bhi.n	8004362 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800434e:	2200      	movs	r2, #0
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	f04f 30ff 	mov.w	r0, #4294967295
 8004356:	f000 f956 	bl	8004606 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800435a:	4a0a      	ldr	r2, [pc, #40]	@ (8004384 <HAL_InitTick+0x70>)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	e007      	b.n	8004372 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
 8004366:	e004      	b.n	8004372 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
 800436c:	e001      	b.n	8004372 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004372:	7bfb      	ldrb	r3, [r7, #15]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	2000003c 	.word	0x2000003c
 8004380:	20000034 	.word	0x20000034
 8004384:	20000038 	.word	0x20000038

08004388 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800438c:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <HAL_IncTick+0x1c>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4b05      	ldr	r3, [pc, #20]	@ (80043a8 <HAL_IncTick+0x20>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4413      	add	r3, r2
 8004396:	4a03      	ldr	r2, [pc, #12]	@ (80043a4 <HAL_IncTick+0x1c>)
 8004398:	6013      	str	r3, [r2, #0]
}
 800439a:	bf00      	nop
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	20000c6c 	.word	0x20000c6c
 80043a8:	2000003c 	.word	0x2000003c

080043ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return uwTick;
 80043b0:	4b03      	ldr	r3, [pc, #12]	@ (80043c0 <HAL_GetTick+0x14>)
 80043b2:	681b      	ldr	r3, [r3, #0]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000c6c 	.word	0x20000c6c

080043c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043cc:	f7ff ffee 	bl	80043ac <HAL_GetTick>
 80043d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d004      	beq.n	80043e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80043de:	4b09      	ldr	r3, [pc, #36]	@ (8004404 <HAL_Delay+0x40>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043e8:	bf00      	nop
 80043ea:	f7ff ffdf 	bl	80043ac <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d8f7      	bhi.n	80043ea <HAL_Delay+0x26>
  {
  }
}
 80043fa:	bf00      	nop
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	2000003c 	.word	0x2000003c

08004408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004418:	4b0c      	ldr	r3, [pc, #48]	@ (800444c <__NVIC_SetPriorityGrouping+0x44>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004424:	4013      	ands	r3, r2
 8004426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004430:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800443a:	4a04      	ldr	r2, [pc, #16]	@ (800444c <__NVIC_SetPriorityGrouping+0x44>)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	60d3      	str	r3, [r2, #12]
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004454:	4b04      	ldr	r3, [pc, #16]	@ (8004468 <__NVIC_GetPriorityGrouping+0x18>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	f003 0307 	and.w	r3, r3, #7
}
 800445e:	4618      	mov	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	e000ed00 	.word	0xe000ed00

0800446c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447a:	2b00      	cmp	r3, #0
 800447c:	db0b      	blt.n	8004496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	f003 021f 	and.w	r2, r3, #31
 8004484:	4907      	ldr	r1, [pc, #28]	@ (80044a4 <__NVIC_EnableIRQ+0x38>)
 8004486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	2001      	movs	r0, #1
 800448e:	fa00 f202 	lsl.w	r2, r0, r2
 8004492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	e000e100 	.word	0xe000e100

080044a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	db12      	blt.n	80044e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	f003 021f 	and.w	r2, r3, #31
 80044c0:	490a      	ldr	r1, [pc, #40]	@ (80044ec <__NVIC_DisableIRQ+0x44>)
 80044c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2001      	movs	r0, #1
 80044ca:	fa00 f202 	lsl.w	r2, r0, r2
 80044ce:	3320      	adds	r3, #32
 80044d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80044d4:	f3bf 8f4f 	dsb	sy
}
 80044d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80044da:	f3bf 8f6f 	isb	sy
}
 80044de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000e100 	.word	0xe000e100

080044f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	6039      	str	r1, [r7, #0]
 80044fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004500:	2b00      	cmp	r3, #0
 8004502:	db0a      	blt.n	800451a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	490c      	ldr	r1, [pc, #48]	@ (800453c <__NVIC_SetPriority+0x4c>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	0112      	lsls	r2, r2, #4
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	440b      	add	r3, r1
 8004514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004518:	e00a      	b.n	8004530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4908      	ldr	r1, [pc, #32]	@ (8004540 <__NVIC_SetPriority+0x50>)
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	3b04      	subs	r3, #4
 8004528:	0112      	lsls	r2, r2, #4
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	440b      	add	r3, r1
 800452e:	761a      	strb	r2, [r3, #24]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	e000e100 	.word	0xe000e100
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004544:	b480      	push	{r7}
 8004546:	b089      	sub	sp, #36	@ 0x24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f1c3 0307 	rsb	r3, r3, #7
 800455e:	2b04      	cmp	r3, #4
 8004560:	bf28      	it	cs
 8004562:	2304      	movcs	r3, #4
 8004564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3304      	adds	r3, #4
 800456a:	2b06      	cmp	r3, #6
 800456c:	d902      	bls.n	8004574 <NVIC_EncodePriority+0x30>
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3b03      	subs	r3, #3
 8004572:	e000      	b.n	8004576 <NVIC_EncodePriority+0x32>
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004578:	f04f 32ff 	mov.w	r2, #4294967295
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43da      	mvns	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	401a      	ands	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800458c:	f04f 31ff 	mov.w	r1, #4294967295
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	43d9      	mvns	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800459c:	4313      	orrs	r3, r2
         );
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3724      	adds	r7, #36	@ 0x24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045bc:	d301      	bcc.n	80045c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045be:	2301      	movs	r3, #1
 80045c0:	e00f      	b.n	80045e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045c2:	4a0a      	ldr	r2, [pc, #40]	@ (80045ec <SysTick_Config+0x40>)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ca:	210f      	movs	r1, #15
 80045cc:	f04f 30ff 	mov.w	r0, #4294967295
 80045d0:	f7ff ff8e 	bl	80044f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045d4:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <SysTick_Config+0x40>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045da:	4b04      	ldr	r3, [pc, #16]	@ (80045ec <SysTick_Config+0x40>)
 80045dc:	2207      	movs	r2, #7
 80045de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	e000e010 	.word	0xe000e010

080045f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff ff05 	bl	8004408 <__NVIC_SetPriorityGrouping>
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af00      	add	r7, sp, #0
 800460c:	4603      	mov	r3, r0
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004614:	f7ff ff1c 	bl	8004450 <__NVIC_GetPriorityGrouping>
 8004618:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	6978      	ldr	r0, [r7, #20]
 8004620:	f7ff ff90 	bl	8004544 <NVIC_EncodePriority>
 8004624:	4602      	mov	r2, r0
 8004626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800462a:	4611      	mov	r1, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff ff5f 	bl	80044f0 <__NVIC_SetPriority>
}
 8004632:	bf00      	nop
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	4603      	mov	r3, r0
 8004642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff ff0f 	bl	800446c <__NVIC_EnableIRQ>
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	4603      	mov	r3, r0
 800465e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff1f 	bl	80044a8 <__NVIC_DisableIRQ>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff ff96 	bl	80045ac <SysTick_Config>
 8004680:	4603      	mov	r3, r0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e08d      	b.n	80047ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	4b47      	ldr	r3, [pc, #284]	@ (80047c4 <HAL_DMA_Init+0x138>)
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d80f      	bhi.n	80046ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	4b45      	ldr	r3, [pc, #276]	@ (80047c8 <HAL_DMA_Init+0x13c>)
 80046b2:	4413      	add	r3, r2
 80046b4:	4a45      	ldr	r2, [pc, #276]	@ (80047cc <HAL_DMA_Init+0x140>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	009a      	lsls	r2, r3, #2
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a42      	ldr	r2, [pc, #264]	@ (80047d0 <HAL_DMA_Init+0x144>)
 80046c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80046c8:	e00e      	b.n	80046e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b40      	ldr	r3, [pc, #256]	@ (80047d4 <HAL_DMA_Init+0x148>)
 80046d2:	4413      	add	r3, r2
 80046d4:	4a3d      	ldr	r2, [pc, #244]	@ (80047cc <HAL_DMA_Init+0x140>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	009a      	lsls	r2, r3, #2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a3c      	ldr	r2, [pc, #240]	@ (80047d8 <HAL_DMA_Init+0x14c>)
 80046e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80046fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004702:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800470c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fa84 	bl	8004c48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004748:	d102      	bne.n	8004750 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004764:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d010      	beq.n	8004790 <HAL_DMA_Init+0x104>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b04      	cmp	r3, #4
 8004774:	d80c      	bhi.n	8004790 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 faa4 	bl	8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	e008      	b.n	80047a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40020407 	.word	0x40020407
 80047c8:	bffdfff8 	.word	0xbffdfff8
 80047cc:	cccccccd 	.word	0xcccccccd
 80047d0:	40020000 	.word	0x40020000
 80047d4:	bffdfbf8 	.word	0xbffdfbf8
 80047d8:	40020400 	.word	0x40020400

080047dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_DMA_Start_IT+0x20>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e066      	b.n	80048ca <HAL_DMA_Start_IT+0xee>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d155      	bne.n	80048bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f9c9 	bl	8004bcc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 020e 	orr.w	r2, r2, #14
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e00f      	b.n	8004874 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0204 	bic.w	r2, r2, #4
 8004862:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 020a 	orr.w	r2, r2, #10
 8004872:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800488c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004890:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	e005      	b.n	80048c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
 80048c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d005      	beq.n	80048f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2204      	movs	r2, #4
 80048ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	e037      	b.n	8004966 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 020e 	bic.w	r2, r2, #14
 8004904:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004910:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004914:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492a:	f003 021f 	and.w	r2, r3, #31
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	2101      	movs	r1, #1
 8004934:	fa01 f202 	lsl.w	r2, r1, r2
 8004938:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004942:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00c      	beq.n	8004966 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004956:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800495a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004964:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004976:	7bfb      	ldrb	r3, [r7, #15]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d00d      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2204      	movs	r2, #4
 80049a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
 80049b6:	e047      	b.n	8004a48 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 020e 	bic.w	r2, r2, #14
 80049c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0201 	bic.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ec:	f003 021f 	and.w	r2, r3, #31
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f202 	lsl.w	r2, r1, r2
 80049fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00c      	beq.n	8004a28 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
    }
  }
  return status;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	2204      	movs	r2, #4
 8004a74:	409a      	lsls	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d026      	beq.n	8004acc <HAL_DMA_IRQHandler+0x7a>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d021      	beq.n	8004acc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d107      	bne.n	8004aa6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0204 	bic.w	r2, r2, #4
 8004aa4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aaa:	f003 021f 	and.w	r2, r3, #31
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	2104      	movs	r1, #4
 8004ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d071      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004aca:	e06c      	b.n	8004ba6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d02e      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d029      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10b      	bne.n	8004b10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 020a 	bic.w	r2, r2, #10
 8004b06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b14:	f003 021f 	and.w	r2, r3, #31
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d038      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b3c:	e033      	b.n	8004ba6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	2208      	movs	r2, #8
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d02a      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d025      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 020e 	bic.w	r2, r2, #14
 8004b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b70:	f003 021f 	and.w	r2, r3, #31
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	2101      	movs	r1, #1
 8004b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ba6:	bf00      	nop
 8004ba8:	bf00      	nop
}
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004bbe:	b2db      	uxtb	r3, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004be2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d004      	beq.n	8004bf6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bf4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfa:	f003 021f 	and.w	r2, r3, #31
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f202 	lsl.w	r2, r1, r2
 8004c08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d108      	bne.n	8004c2c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c2a:	e007      	b.n	8004c3c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	60da      	str	r2, [r3, #12]
}
 8004c3c:	bf00      	nop
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	4b16      	ldr	r3, [pc, #88]	@ (8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d802      	bhi.n	8004c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c5c:	4b15      	ldr	r3, [pc, #84]	@ (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e001      	b.n	8004c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004c62:	4b15      	ldr	r3, [pc, #84]	@ (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c64:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	3b08      	subs	r3, #8
 8004c72:	4a12      	ldr	r2, [pc, #72]	@ (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	009a      	lsls	r2, r3, #2
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	4413      	add	r3, r2
 8004c88:	461a      	mov	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a0b      	ldr	r2, [pc, #44]	@ (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40020407 	.word	0x40020407
 8004cb4:	40020800 	.word	0x40020800
 8004cb8:	40020820 	.word	0x40020820
 8004cbc:	cccccccd 	.word	0xcccccccd
 8004cc0:	40020880 	.word	0x40020880

08004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a08      	ldr	r2, [pc, #32]	@ (8004d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ce6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	1000823f 	.word	0x1000823f
 8004d08:	40020940 	.word	0x40020940

08004d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d1a:	e15a      	b.n	8004fd2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	2101      	movs	r1, #1
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	fa01 f303 	lsl.w	r3, r1, r3
 8004d28:	4013      	ands	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 814c 	beq.w	8004fcc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d005      	beq.n	8004d4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d130      	bne.n	8004dae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	2203      	movs	r2, #3
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4013      	ands	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d82:	2201      	movs	r2, #1
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	f003 0201 	and.w	r2, r3, #1
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d017      	beq.n	8004dea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d123      	bne.n	8004e3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	08da      	lsrs	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3208      	adds	r2, #8
 8004dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	220f      	movs	r2, #15
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	43db      	mvns	r3, r3
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4013      	ands	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	08da      	lsrs	r2, r3, #3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3208      	adds	r2, #8
 8004e38:	6939      	ldr	r1, [r7, #16]
 8004e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	2203      	movs	r2, #3
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4013      	ands	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f003 0203 	and.w	r2, r3, #3
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 80a6 	beq.w	8004fcc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e80:	4b5b      	ldr	r3, [pc, #364]	@ (8004ff0 <HAL_GPIO_Init+0x2e4>)
 8004e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e84:	4a5a      	ldr	r2, [pc, #360]	@ (8004ff0 <HAL_GPIO_Init+0x2e4>)
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e8c:	4b58      	ldr	r3, [pc, #352]	@ (8004ff0 <HAL_GPIO_Init+0x2e4>)
 8004e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e98:	4a56      	ldr	r2, [pc, #344]	@ (8004ff4 <HAL_GPIO_Init+0x2e8>)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	089b      	lsrs	r3, r3, #2
 8004e9e:	3302      	adds	r3, #2
 8004ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	220f      	movs	r2, #15
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ec2:	d01f      	beq.n	8004f04 <HAL_GPIO_Init+0x1f8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a4c      	ldr	r2, [pc, #304]	@ (8004ff8 <HAL_GPIO_Init+0x2ec>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d019      	beq.n	8004f00 <HAL_GPIO_Init+0x1f4>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a4b      	ldr	r2, [pc, #300]	@ (8004ffc <HAL_GPIO_Init+0x2f0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_GPIO_Init+0x1f0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a4a      	ldr	r2, [pc, #296]	@ (8005000 <HAL_GPIO_Init+0x2f4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00d      	beq.n	8004ef8 <HAL_GPIO_Init+0x1ec>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a49      	ldr	r2, [pc, #292]	@ (8005004 <HAL_GPIO_Init+0x2f8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d007      	beq.n	8004ef4 <HAL_GPIO_Init+0x1e8>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a48      	ldr	r2, [pc, #288]	@ (8005008 <HAL_GPIO_Init+0x2fc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d101      	bne.n	8004ef0 <HAL_GPIO_Init+0x1e4>
 8004eec:	2305      	movs	r3, #5
 8004eee:	e00a      	b.n	8004f06 <HAL_GPIO_Init+0x1fa>
 8004ef0:	2306      	movs	r3, #6
 8004ef2:	e008      	b.n	8004f06 <HAL_GPIO_Init+0x1fa>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	e006      	b.n	8004f06 <HAL_GPIO_Init+0x1fa>
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e004      	b.n	8004f06 <HAL_GPIO_Init+0x1fa>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e002      	b.n	8004f06 <HAL_GPIO_Init+0x1fa>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <HAL_GPIO_Init+0x1fa>
 8004f04:	2300      	movs	r3, #0
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	f002 0203 	and.w	r2, r2, #3
 8004f0c:	0092      	lsls	r2, r2, #2
 8004f0e:	4093      	lsls	r3, r2
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f16:	4937      	ldr	r1, [pc, #220]	@ (8004ff4 <HAL_GPIO_Init+0x2e8>)
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	089b      	lsrs	r3, r3, #2
 8004f1c:	3302      	adds	r3, #2
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f24:	4b39      	ldr	r3, [pc, #228]	@ (800500c <HAL_GPIO_Init+0x300>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4013      	ands	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f48:	4a30      	ldr	r2, [pc, #192]	@ (800500c <HAL_GPIO_Init+0x300>)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800500c <HAL_GPIO_Init+0x300>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	43db      	mvns	r3, r3
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f72:	4a26      	ldr	r2, [pc, #152]	@ (800500c <HAL_GPIO_Init+0x300>)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004f78:	4b24      	ldr	r3, [pc, #144]	@ (800500c <HAL_GPIO_Init+0x300>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	43db      	mvns	r3, r3
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4013      	ands	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800500c <HAL_GPIO_Init+0x300>)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800500c <HAL_GPIO_Init+0x300>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	43db      	mvns	r3, r3
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fc6:	4a11      	ldr	r2, [pc, #68]	@ (800500c <HAL_GPIO_Init+0x300>)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f47f ae9d 	bne.w	8004d1c <HAL_GPIO_Init+0x10>
  }
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	48000400 	.word	0x48000400
 8004ffc:	48000800 	.word	0x48000800
 8005000:	48000c00 	.word	0x48000c00
 8005004:	48001000 	.word	0x48001000
 8005008:	48001400 	.word	0x48001400
 800500c:	40010400 	.word	0x40010400

08005010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	807b      	strh	r3, [r7, #2]
 800501c:	4613      	mov	r3, r2
 800501e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005020:	787b      	ldrb	r3, [r7, #1]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005026:	887a      	ldrh	r2, [r7, #2]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800502c:	e002      	b.n	8005034 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800504a:	4b08      	ldr	r3, [pc, #32]	@ (800506c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	4013      	ands	r3, r2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005056:	4a05      	ldr	r2, [pc, #20]	@ (800506c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800505c:	88fb      	ldrh	r3, [r7, #6]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fd fd3e 	bl	8002ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40010400 	.word	0x40010400

08005070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e08d      	b.n	800519e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fc fe56 	bl	8001d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2224      	movs	r2, #36	@ 0x24
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0201 	bic.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80050c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d107      	bne.n	80050ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	e006      	b.n	80050f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80050f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d108      	bne.n	8005112 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800510e:	605a      	str	r2, [r3, #4]
 8005110:	e007      	b.n	8005122 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005120:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005134:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005144:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69d9      	ldr	r1, [r3, #28]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1a      	ldr	r2, [r3, #32]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08a      	sub	sp, #40	@ 0x28
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	607a      	str	r2, [r7, #4]
 80051b2:	461a      	mov	r2, r3
 80051b4:	460b      	mov	r3, r1
 80051b6:	817b      	strh	r3, [r7, #10]
 80051b8:	4613      	mov	r3, r2
 80051ba:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	f040 80ef 	bne.w	80053ac <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051dc:	d101      	bne.n	80051e2 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80051de:	2302      	movs	r3, #2
 80051e0:	e0e5      	b.n	80053ae <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_I2C_Master_Transmit_DMA+0x48>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e0de      	b.n	80053ae <HAL_I2C_Master_Transmit_DMA+0x206>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2221      	movs	r2, #33	@ 0x21
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2210      	movs	r2, #16
 8005204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	893a      	ldrh	r2, [r7, #8]
 8005218:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a66      	ldr	r2, [pc, #408]	@ (80053b8 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800521e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4a66      	ldr	r2, [pc, #408]	@ (80053bc <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005224:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	2bff      	cmp	r3, #255	@ 0xff
 800522e:	d906      	bls.n	800523e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	22ff      	movs	r2, #255	@ 0xff
 8005234:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005236:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	e007      	b.n	800524e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005248:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800524c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01a      	beq.n	800528c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525a:	781a      	ldrb	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005270:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005290:	2b00      	cmp	r3, #0
 8005292:	d074      	beq.n	800537e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005298:	2b00      	cmp	r3, #0
 800529a:	d022      	beq.n	80052e2 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a0:	4a47      	ldr	r2, [pc, #284]	@ (80053c0 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80052a2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a8:	4a46      	ldr	r2, [pc, #280]	@ (80053c4 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80052aa:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b0:	2200      	movs	r2, #0
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b8:	2200      	movs	r2, #0
 80052ba:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80052cc:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80052d2:	f7ff fa83 	bl	80047dc <HAL_DMA_Start_IT>
 80052d6:	4603      	mov	r3, r0
 80052d8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80052da:	7dfb      	ldrb	r3, [r7, #23]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d13a      	bne.n	8005356 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80052e0:	e013      	b.n	800530a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e051      	b.n	80053ae <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530e:	b2db      	uxtb	r3, r3
 8005310:	3301      	adds	r3, #1
 8005312:	b2da      	uxtb	r2, r3
 8005314:	8979      	ldrh	r1, [r7, #10]
 8005316:	4b2c      	ldr	r3, [pc, #176]	@ (80053c8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f001 fba3 	bl	8006a68 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800533c:	2110      	movs	r1, #16
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f001 fbc4 	bl	8006acc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	e028      	b.n	80053a8 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	f043 0210 	orr.w	r2, r3, #16
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e017      	b.n	80053ae <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4a12      	ldr	r2, [pc, #72]	@ (80053cc <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005382:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	b2da      	uxtb	r2, r3
 8005388:	8979      	ldrh	r1, [r7, #10]
 800538a:	4b0f      	ldr	r3, [pc, #60]	@ (80053c8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f001 fb68 	bl	8006a68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80053a0:	2101      	movs	r1, #1
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f001 fb92 	bl	8006acc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e000      	b.n	80053ae <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80053ac:	2302      	movs	r3, #2
  }
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	ffff0000 	.word	0xffff0000
 80053bc:	080059e7 	.word	0x080059e7
 80053c0:	08006967 	.word	0x08006967
 80053c4:	080069fd 	.word	0x080069fd
 80053c8:	80002000 	.word	0x80002000
 80053cc:	080055a7 	.word	0x080055a7

080053d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
  }
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00f      	beq.n	8005446 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005434:	f043 0201 	orr.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005444:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00f      	beq.n	8005470 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545e:	f043 0208 	orr.w	r2, r3, #8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800546e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00f      	beq.n	800549a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005488:	f043 0202 	orr.w	r2, r3, #2
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005498:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f003 030b 	and.w	r3, r3, #11
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80054aa:	68f9      	ldr	r1, [r7, #12]
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f001 f91f 	bl	80066f0 <I2C_ITError>
  }
}
 80054b2:	bf00      	nop
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	70fb      	strb	r3, [r7, #3]
 8005516:	4613      	mov	r3, r2
 8005518:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005598:	b2db      	uxtb	r3, r3
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b088      	sub	sp, #32
 80055aa:	af02      	add	r7, sp, #8
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <I2C_Master_ISR_IT+0x1e>
 80055c0:	2302      	movs	r3, #2
 80055c2:	e113      	b.n	80057ec <I2C_Master_ISR_IT+0x246>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d012      	beq.n	80055fc <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00d      	beq.n	80055fc <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2210      	movs	r2, #16
 80055e6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ec:	f043 0204 	orr.w	r2, r3, #4
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f001 f992 	bl	800691e <I2C_Flush_TXDR>
 80055fa:	e0e4      	b.n	80057c6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b00      	cmp	r3, #0
 8005604:	d022      	beq.n	800564c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01d      	beq.n	800564c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f023 0304 	bic.w	r3, r3, #4
 8005616:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800564a:	e0bc      	b.n	80057c6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d128      	bne.n	80056a8 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800565c:	2b00      	cmp	r3, #0
 800565e:	d023      	beq.n	80056a8 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01e      	beq.n	80056a8 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80a8 	beq.w	80057c6 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567a:	781a      	ldrb	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80056a6:	e08e      	b.n	80057c6 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d05c      	beq.n	800576c <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d057      	beq.n	800576c <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d040      	beq.n	8005748 <I2C_Master_ISR_IT+0x1a2>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d13c      	bne.n	8005748 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056da:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2bff      	cmp	r3, #255	@ 0xff
 80056e4:	d90e      	bls.n	8005704 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	22ff      	movs	r2, #255	@ 0xff
 80056ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	8a79      	ldrh	r1, [r7, #18]
 80056f4:	2300      	movs	r3, #0
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f001 f9b3 	bl	8006a68 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005702:	e032      	b.n	800576a <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005712:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005716:	d00b      	beq.n	8005730 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800571c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005722:	8a79      	ldrh	r1, [r7, #18]
 8005724:	2000      	movs	r0, #0
 8005726:	9000      	str	r0, [sp, #0]
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f001 f99d 	bl	8006a68 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800572e:	e01c      	b.n	800576a <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005734:	b2da      	uxtb	r2, r3
 8005736:	8a79      	ldrh	r1, [r7, #18]
 8005738:	2300      	movs	r3, #0
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f001 f991 	bl	8006a68 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005746:	e010      	b.n	800576a <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005752:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005756:	d003      	beq.n	8005760 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 fcb0 	bl	80060be <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800575e:	e032      	b.n	80057c6 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005760:	2140      	movs	r1, #64	@ 0x40
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 ffc4 	bl	80066f0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005768:	e02d      	b.n	80057c6 <I2C_Master_ISR_IT+0x220>
 800576a:	e02c      	b.n	80057c6 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d027      	beq.n	80057c6 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800577c:	2b00      	cmp	r3, #0
 800577e:	d022      	beq.n	80057c6 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d119      	bne.n	80057be <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005794:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005798:	d015      	beq.n	80057c6 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057a2:	d108      	bne.n	80057b6 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057b2:	605a      	str	r2, [r3, #4]
 80057b4:	e007      	b.n	80057c6 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fc81 	bl	80060be <I2C_ITMasterSeqCplt>
 80057bc:	e003      	b.n	80057c6 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80057be:	2140      	movs	r1, #64	@ 0x40
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 ff95 	bl	80066f0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80057da:	6979      	ldr	r1, [r7, #20]
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fd07 	bl	80061f0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005804:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <I2C_Slave_ISR_IT+0x24>
 8005814:	2302      	movs	r3, #2
 8005816:	e0e2      	b.n	80059de <I2C_Slave_ISR_IT+0x1ea>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005834:	6939      	ldr	r1, [r7, #16]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fda2 	bl	8006380 <I2C_ITSlaveCplt>
 800583c:	e0ca      	b.n	80059d4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b00      	cmp	r3, #0
 8005846:	d04b      	beq.n	80058e0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800584e:	2b00      	cmp	r3, #0
 8005850:	d046      	beq.n	80058e0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d128      	bne.n	80058ae <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b28      	cmp	r3, #40	@ 0x28
 8005866:	d108      	bne.n	800587a <I2C_Slave_ISR_IT+0x86>
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800586e:	d104      	bne.n	800587a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005870:	6939      	ldr	r1, [r7, #16]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 fee8 	bl	8006648 <I2C_ITListenCplt>
 8005878:	e031      	b.n	80058de <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b29      	cmp	r3, #41	@ 0x29
 8005884:	d10e      	bne.n	80058a4 <I2C_Slave_ISR_IT+0xb0>
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800588c:	d00a      	beq.n	80058a4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2210      	movs	r2, #16
 8005894:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f001 f841 	bl	800691e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fc4b 	bl	8006138 <I2C_ITSlaveSeqCplt>
 80058a2:	e01c      	b.n	80058de <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2210      	movs	r2, #16
 80058aa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80058ac:	e08f      	b.n	80059ce <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2210      	movs	r2, #16
 80058b4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ba:	f043 0204 	orr.w	r2, r3, #4
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <I2C_Slave_ISR_IT+0xdc>
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058ce:	d17e      	bne.n	80059ce <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d4:	4619      	mov	r1, r3
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 ff0a 	bl	80066f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80058dc:	e077      	b.n	80059ce <I2C_Slave_ISR_IT+0x1da>
 80058de:	e076      	b.n	80059ce <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d02f      	beq.n	800594a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d02a      	beq.n	800594a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d018      	beq.n	8005930 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800591a:	3b01      	subs	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d14b      	bne.n	80059d2 <I2C_Slave_ISR_IT+0x1de>
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005940:	d047      	beq.n	80059d2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fbf8 	bl	8006138 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005948:	e043      	b.n	80059d2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f003 0308 	and.w	r3, r3, #8
 8005950:	2b00      	cmp	r3, #0
 8005952:	d009      	beq.n	8005968 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800595a:	2b00      	cmp	r3, #0
 800595c:	d004      	beq.n	8005968 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800595e:	6939      	ldr	r1, [r7, #16]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fb28 	bl	8005fb6 <I2C_ITAddrCplt>
 8005966:	e035      	b.n	80059d4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d030      	beq.n	80059d4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005978:	2b00      	cmp	r3, #0
 800597a:	d02b      	beq.n	80059d4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d018      	beq.n	80059b8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598a:	781a      	ldrb	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80059b6:	e00d      	b.n	80059d4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059be:	d002      	beq.n	80059c6 <I2C_Slave_ISR_IT+0x1d2>
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fbb6 	bl	8006138 <I2C_ITSlaveSeqCplt>
 80059cc:	e002      	b.n	80059d4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80059ce:	bf00      	nop
 80059d0:	e000      	b.n	80059d4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80059d2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b088      	sub	sp, #32
 80059ea:	af02      	add	r7, sp, #8
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <I2C_Master_ISR_DMA+0x1a>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e0d9      	b.n	8005bb4 <I2C_Master_ISR_DMA+0x1ce>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d016      	beq.n	8005a40 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d011      	beq.n	8005a40 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2210      	movs	r2, #16
 8005a22:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a28:	f043 0204 	orr.w	r2, r3, #4
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005a30:	2120      	movs	r1, #32
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f001 f84a 	bl	8006acc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 ff70 	bl	800691e <I2C_Flush_TXDR>
 8005a3e:	e0b4      	b.n	8005baa <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d071      	beq.n	8005b2e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d06c      	beq.n	8005b2e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a62:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d04e      	beq.n	8005b0c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a7a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2bff      	cmp	r3, #255	@ 0xff
 8005a84:	d906      	bls.n	8005a94 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	22ff      	movs	r2, #255	@ 0xff
 8005a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005a8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	e010      	b.n	8005ab6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005aa6:	d003      	beq.n	8005ab0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e002      	b.n	8005ab6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005ab0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ab4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	8a79      	ldrh	r1, [r7, #18]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 ffcf 	bl	8006a68 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b22      	cmp	r3, #34	@ 0x22
 8005ae6:	d108      	bne.n	8005afa <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005af6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005af8:	e057      	b.n	8005baa <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b08:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005b0a:	e04e      	b.n	8005baa <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b1a:	d003      	beq.n	8005b24 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 face 	bl	80060be <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005b22:	e042      	b.n	8005baa <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b24:	2140      	movs	r1, #64	@ 0x40
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 fde2 	bl	80066f0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005b2c:	e03d      	b.n	8005baa <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d028      	beq.n	8005b8a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d023      	beq.n	8005b8a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d119      	bne.n	8005b80 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b5a:	d025      	beq.n	8005ba8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b64:	d108      	bne.n	8005b78 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b74:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005b76:	e017      	b.n	8005ba8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 faa0 	bl	80060be <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005b7e:	e013      	b.n	8005ba8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b80:	2140      	movs	r1, #64	@ 0x40
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fdb4 	bl	80066f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005b88:	e00e      	b.n	8005ba8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d005      	beq.n	8005baa <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 fb25 	bl	80061f0 <I2C_ITMasterCplt>
 8005ba6:	e000      	b.n	8005baa <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8005ba8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005bc8:	4b8d      	ldr	r3, [pc, #564]	@ (8005e00 <I2C_Mem_ISR_DMA+0x244>)
 8005bca:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <I2C_Mem_ISR_DMA+0x1e>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e10e      	b.n	8005df8 <I2C_Mem_ISR_DMA+0x23c>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d016      	beq.n	8005c1a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d011      	beq.n	8005c1a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2210      	movs	r2, #16
 8005bfc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c02:	f043 0204 	orr.w	r2, r3, #4
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005c0a:	2120      	movs	r1, #32
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 ff5d 	bl	8006acc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 fe83 	bl	800691e <I2C_Flush_TXDR>
 8005c18:	e0e9      	b.n	8005dee <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00e      	beq.n	8005c42 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c40:	e0d5      	b.n	8005dee <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d05f      	beq.n	8005d0c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d05a      	beq.n	8005d0c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005c56:	2101      	movs	r1, #1
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 ffbb 	bl	8006bd4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005c5e:	2110      	movs	r1, #16
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 ff33 	bl	8006acc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d048      	beq.n	8005d02 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2bff      	cmp	r3, #255	@ 0xff
 8005c78:	d910      	bls.n	8005c9c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	22ff      	movs	r2, #255	@ 0xff
 8005c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c84:	b299      	uxth	r1, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 fee7 	bl	8006a68 <I2C_TransferConfig>
 8005c9a:	e011      	b.n	8005cc0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005caa:	b299      	uxth	r1, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fed4 	bl	8006a68 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b22      	cmp	r3, #34	@ 0x22
 8005cdc:	d108      	bne.n	8005cf0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005cee:	e07e      	b.n	8005dee <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cfe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005d00:	e075      	b.n	8005dee <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d02:	2140      	movs	r1, #64	@ 0x40
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 fcf3 	bl	80066f0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005d0a:	e070      	b.n	8005dee <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d05d      	beq.n	8005dd2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d058      	beq.n	8005dd2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005d20:	2101      	movs	r1, #1
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 ff56 	bl	8006bd4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005d28:	2110      	movs	r1, #16
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fece 	bl	8006acc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b22      	cmp	r3, #34	@ 0x22
 8005d3a:	d101      	bne.n	8005d40 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8005d3c:	4b31      	ldr	r3, [pc, #196]	@ (8005e04 <I2C_Mem_ISR_DMA+0x248>)
 8005d3e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2bff      	cmp	r3, #255	@ 0xff
 8005d48:	d910      	bls.n	8005d6c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	22ff      	movs	r2, #255	@ 0xff
 8005d4e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d54:	b299      	uxth	r1, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 fe7f 	bl	8006a68 <I2C_TransferConfig>
 8005d6a:	e011      	b.n	8005d90 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d7a:	b299      	uxth	r1, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fe6c 	bl	8006a68 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b22      	cmp	r3, #34	@ 0x22
 8005dac:	d108      	bne.n	8005dc0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dbc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005dbe:	e016      	b.n	8005dee <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dce:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005dd0:	e00d      	b.n	8005dee <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fa01 	bl	80061f0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	80002000 	.word	0x80002000
 8005e04:	80002400 	.word	0x80002400

08005e08 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e18:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <I2C_Slave_ISR_DMA+0x24>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e0c0      	b.n	8005fae <I2C_Slave_ISR_DMA+0x1a6>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d009      	beq.n	8005e52 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fa98 	bl	8006380 <I2C_ITSlaveCplt>
 8005e50:	e0a8      	b.n	8005fa4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 8095 	beq.w	8005f88 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 808f 	beq.w	8005f88 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d104      	bne.n	8005e7e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d07d      	beq.n	8005f7a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00c      	beq.n	8005ea0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d007      	beq.n	8005ea0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00c      	beq.n	8005ec2 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d128      	bne.n	8005f1a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b28      	cmp	r3, #40	@ 0x28
 8005ed2:	d108      	bne.n	8005ee6 <I2C_Slave_ISR_DMA+0xde>
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005eda:	d104      	bne.n	8005ee6 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fbb2 	bl	8006648 <I2C_ITListenCplt>
 8005ee4:	e048      	b.n	8005f78 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b29      	cmp	r3, #41	@ 0x29
 8005ef0:	d10e      	bne.n	8005f10 <I2C_Slave_ISR_DMA+0x108>
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ef8:	d00a      	beq.n	8005f10 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2210      	movs	r2, #16
 8005f00:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 fd0b 	bl	800691e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f915 	bl	8006138 <I2C_ITSlaveSeqCplt>
 8005f0e:	e033      	b.n	8005f78 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2210      	movs	r2, #16
 8005f16:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005f18:	e034      	b.n	8005f84 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2210      	movs	r2, #16
 8005f20:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f26:	f043 0204 	orr.w	r2, r3, #4
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f34:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <I2C_Slave_ISR_DMA+0x13c>
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f42:	d11f      	bne.n	8005f84 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
 8005f46:	2b21      	cmp	r3, #33	@ 0x21
 8005f48:	d002      	beq.n	8005f50 <I2C_Slave_ISR_DMA+0x148>
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	2b29      	cmp	r3, #41	@ 0x29
 8005f4e:	d103      	bne.n	8005f58 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2221      	movs	r2, #33	@ 0x21
 8005f54:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f56:	e008      	b.n	8005f6a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f58:	7dfb      	ldrb	r3, [r7, #23]
 8005f5a:	2b22      	cmp	r3, #34	@ 0x22
 8005f5c:	d002      	beq.n	8005f64 <I2C_Slave_ISR_DMA+0x15c>
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f62:	d102      	bne.n	8005f6a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2222      	movs	r2, #34	@ 0x22
 8005f68:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6e:	4619      	mov	r1, r3
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 fbbd 	bl	80066f0 <I2C_ITError>
      if (treatdmanack == 1U)
 8005f76:	e005      	b.n	8005f84 <I2C_Slave_ISR_DMA+0x17c>
 8005f78:	e004      	b.n	8005f84 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2210      	movs	r2, #16
 8005f80:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005f82:	e00f      	b.n	8005fa4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8005f84:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005f86:	e00d      	b.n	8005fa4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d008      	beq.n	8005fa4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f809 	bl	8005fb6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3720      	adds	r7, #32
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fcc:	2b28      	cmp	r3, #40	@ 0x28
 8005fce:	d16a      	bne.n	80060a6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	0c1b      	lsrs	r3, r3, #16
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	0c1b      	lsrs	r3, r3, #16
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005fee:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ffc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	b29b      	uxth	r3, r3
 8006006:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800600a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d138      	bne.n	8006086 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006014:	897b      	ldrh	r3, [r7, #10]
 8006016:	09db      	lsrs	r3, r3, #7
 8006018:	b29a      	uxth	r2, r3
 800601a:	89bb      	ldrh	r3, [r7, #12]
 800601c:	4053      	eors	r3, r2
 800601e:	b29b      	uxth	r3, r3
 8006020:	f003 0306 	and.w	r3, r3, #6
 8006024:	2b00      	cmp	r3, #0
 8006026:	d11c      	bne.n	8006062 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006028:	897b      	ldrh	r3, [r7, #10]
 800602a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800603a:	2b02      	cmp	r3, #2
 800603c:	d13b      	bne.n	80060b6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2208      	movs	r2, #8
 800604a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006054:	89ba      	ldrh	r2, [r7, #12]
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff fa55 	bl	800550a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006060:	e029      	b.n	80060b6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006062:	893b      	ldrh	r3, [r7, #8]
 8006064:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006066:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fdb2 	bl	8006bd4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006078:	89ba      	ldrh	r2, [r7, #12]
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fa43 	bl	800550a <HAL_I2C_AddrCallback>
}
 8006084:	e017      	b.n	80060b6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006086:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fda2 	bl	8006bd4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006098:	89ba      	ldrh	r2, [r7, #12]
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff fa33 	bl	800550a <HAL_I2C_AddrCallback>
}
 80060a4:	e007      	b.n	80060b6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2208      	movs	r2, #8
 80060ac:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b21      	cmp	r3, #33	@ 0x21
 80060d8:	d115      	bne.n	8006106 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2220      	movs	r2, #32
 80060de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2211      	movs	r2, #17
 80060e6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80060ee:	2101      	movs	r1, #1
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fd6f 	bl	8006bd4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff f9db 	bl	80054ba <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006104:	e014      	b.n	8006130 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2212      	movs	r2, #18
 8006112:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800611a:	2102      	movs	r1, #2
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fd59 	bl	8006bd4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff f9cf 	bl	80054ce <HAL_I2C_MasterRxCpltCallback>
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d008      	beq.n	800616c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e00c      	b.n	8006186 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006184:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b29      	cmp	r3, #41	@ 0x29
 8006190:	d112      	bne.n	80061b8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2228      	movs	r2, #40	@ 0x28
 8006196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2221      	movs	r2, #33	@ 0x21
 800619e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80061a0:	2101      	movs	r1, #1
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fd16 	bl	8006bd4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff f996 	bl	80054e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80061b6:	e017      	b.n	80061e8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80061c2:	d111      	bne.n	80061e8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2228      	movs	r2, #40	@ 0x28
 80061c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2222      	movs	r2, #34	@ 0x22
 80061d0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80061d2:	2102      	movs	r1, #2
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fcfd 	bl	8006bd4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff f987 	bl	80054f6 <HAL_I2C_SlaveRxCpltCallback>
}
 80061e8:	bf00      	nop
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2220      	movs	r2, #32
 8006204:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b21      	cmp	r3, #33	@ 0x21
 8006210:	d107      	bne.n	8006222 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006212:	2101      	movs	r1, #1
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fcdd 	bl	8006bd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2211      	movs	r2, #17
 800621e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006220:	e00c      	b.n	800623c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b22      	cmp	r3, #34	@ 0x22
 800622c:	d106      	bne.n	800623c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800622e:	2102      	movs	r1, #2
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fccf 	bl	8006bd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2212      	movs	r2, #18
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6859      	ldr	r1, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	4b4c      	ldr	r3, [pc, #304]	@ (8006378 <I2C_ITMasterCplt+0x188>)
 8006248:	400b      	ands	r3, r1
 800624a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a49      	ldr	r2, [pc, #292]	@ (800637c <I2C_ITMasterCplt+0x18c>)
 8006256:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2210      	movs	r2, #16
 8006268:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800626e:	f043 0204 	orr.w	r2, r3, #4
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b60      	cmp	r3, #96	@ 0x60
 8006280:	d10a      	bne.n	8006298 <I2C_ITMasterCplt+0xa8>
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006292:	b2db      	uxtb	r3, r3
 8006294:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006296:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fb40 	bl	800691e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b60      	cmp	r3, #96	@ 0x60
 80062ae:	d002      	beq.n	80062b6 <I2C_ITMasterCplt+0xc6>
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d006      	beq.n	80062c4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fa17 	bl	80066f0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80062c2:	e054      	b.n	800636e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b21      	cmp	r3, #33	@ 0x21
 80062ce:	d124      	bne.n	800631a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b40      	cmp	r3, #64	@ 0x40
 80062e8:	d10b      	bne.n	8006302 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7ff f91d 	bl	800553a <HAL_I2C_MemTxCpltCallback>
}
 8006300:	e035      	b.n	800636e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff f8d1 	bl	80054ba <HAL_I2C_MasterTxCpltCallback>
}
 8006318:	e029      	b.n	800636e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b22      	cmp	r3, #34	@ 0x22
 8006324:	d123      	bne.n	800636e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b40      	cmp	r3, #64	@ 0x40
 800633e:	d10b      	bne.n	8006358 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff f8fc 	bl	800554e <HAL_I2C_MemRxCpltCallback>
}
 8006356:	e00a      	b.n	800636e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff f8b0 	bl	80054ce <HAL_I2C_MasterRxCpltCallback>
}
 800636e:	bf00      	nop
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	fe00e800 	.word	0xfe00e800
 800637c:	ffff0000 	.word	0xffff0000

08006380 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063a2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2220      	movs	r2, #32
 80063aa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80063ac:	7afb      	ldrb	r3, [r7, #11]
 80063ae:	2b21      	cmp	r3, #33	@ 0x21
 80063b0:	d002      	beq.n	80063b8 <I2C_ITSlaveCplt+0x38>
 80063b2:	7afb      	ldrb	r3, [r7, #11]
 80063b4:	2b29      	cmp	r3, #41	@ 0x29
 80063b6:	d108      	bne.n	80063ca <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80063b8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fc09 	bl	8006bd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2221      	movs	r2, #33	@ 0x21
 80063c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80063c8:	e019      	b.n	80063fe <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80063ca:	7afb      	ldrb	r3, [r7, #11]
 80063cc:	2b22      	cmp	r3, #34	@ 0x22
 80063ce:	d002      	beq.n	80063d6 <I2C_ITSlaveCplt+0x56>
 80063d0:	7afb      	ldrb	r3, [r7, #11]
 80063d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80063d4:	d108      	bne.n	80063e8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80063d6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fbfa 	bl	8006bd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2222      	movs	r2, #34	@ 0x22
 80063e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80063e6:	e00a      	b.n	80063fe <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80063e8:	7afb      	ldrb	r3, [r7, #11]
 80063ea:	2b28      	cmp	r3, #40	@ 0x28
 80063ec:	d107      	bne.n	80063fe <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80063ee:	f248 0103 	movw	r1, #32771	@ 0x8003
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fbee 	bl	8006bd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800640c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6859      	ldr	r1, [r3, #4]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	4b89      	ldr	r3, [pc, #548]	@ (8006640 <I2C_ITSlaveCplt+0x2c0>)
 800641a:	400b      	ands	r3, r1
 800641c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa7d 	bl	800691e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d013      	beq.n	8006456 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800643c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006442:	2b00      	cmp	r3, #0
 8006444:	d01f      	beq.n	8006486 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	b29a      	uxth	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006454:	e017      	b.n	8006486 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d012      	beq.n	8006486 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800646e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d006      	beq.n	8006486 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	b29a      	uxth	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d020      	beq.n	80064d2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f023 0304 	bic.w	r3, r3, #4
 8006496:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00c      	beq.n	80064d2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e0:	f043 0204 	orr.w	r2, r3, #4
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d049      	beq.n	8006586 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d044      	beq.n	8006586 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d128      	bne.n	8006558 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b28      	cmp	r3, #40	@ 0x28
 8006510:	d108      	bne.n	8006524 <I2C_ITSlaveCplt+0x1a4>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006518:	d104      	bne.n	8006524 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800651a:	6979      	ldr	r1, [r7, #20]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f893 	bl	8006648 <I2C_ITListenCplt>
 8006522:	e030      	b.n	8006586 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b29      	cmp	r3, #41	@ 0x29
 800652e:	d10e      	bne.n	800654e <I2C_ITSlaveCplt+0x1ce>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006536:	d00a      	beq.n	800654e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2210      	movs	r2, #16
 800653e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f9ec 	bl	800691e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7ff fdf6 	bl	8006138 <I2C_ITSlaveSeqCplt>
 800654c:	e01b      	b.n	8006586 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2210      	movs	r2, #16
 8006554:	61da      	str	r2, [r3, #28]
 8006556:	e016      	b.n	8006586 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2210      	movs	r2, #16
 800655e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006564:	f043 0204 	orr.w	r2, r3, #4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <I2C_ITSlaveCplt+0x1fa>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006578:	d105      	bne.n	8006586 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f8b5 	bl	80066f0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006598:	2b00      	cmp	r3, #0
 800659a:	d010      	beq.n	80065be <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f8a4 	bl	80066f0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b28      	cmp	r3, #40	@ 0x28
 80065b2:	d141      	bne.n	8006638 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80065b4:	6979      	ldr	r1, [r7, #20]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f846 	bl	8006648 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065bc:	e03c      	b.n	8006638 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065c6:	d014      	beq.n	80065f2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fdb5 	bl	8006138 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006644 <I2C_ITSlaveCplt+0x2c4>)
 80065d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fe ff9b 	bl	8005526 <HAL_I2C_ListenCpltCallback>
}
 80065f0:	e022      	b.n	8006638 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b22      	cmp	r3, #34	@ 0x22
 80065fc:	d10e      	bne.n	800661c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7fe ff6e 	bl	80054f6 <HAL_I2C_SlaveRxCpltCallback>
}
 800661a:	e00d      	b.n	8006638 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fe ff55 	bl	80054e2 <HAL_I2C_SlaveTxCpltCallback>
}
 8006638:	bf00      	nop
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	fe00e800 	.word	0xfe00e800
 8006644:	ffff0000 	.word	0xffff0000

08006648 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a25      	ldr	r2, [pc, #148]	@ (80066ec <I2C_ITListenCplt+0xa4>)
 8006656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	d022      	beq.n	80066c4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669a:	2b00      	cmp	r3, #0
 800669c:	d012      	beq.n	80066c4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066a2:	3b01      	subs	r3, #1
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066bc:	f043 0204 	orr.w	r2, r3, #4
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80066c4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fa83 	bl	8006bd4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2210      	movs	r2, #16
 80066d4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fe ff21 	bl	8005526 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80066e4:	bf00      	nop
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	ffff0000 	.word	0xffff0000

080066f0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006700:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a6d      	ldr	r2, [pc, #436]	@ (80068c4 <I2C_ITError+0x1d4>)
 800670e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	2b28      	cmp	r3, #40	@ 0x28
 8006726:	d005      	beq.n	8006734 <I2C_ITError+0x44>
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	2b29      	cmp	r3, #41	@ 0x29
 800672c:	d002      	beq.n	8006734 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b2a      	cmp	r3, #42	@ 0x2a
 8006732:	d10b      	bne.n	800674c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006734:	2103      	movs	r1, #3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa4c 	bl	8006bd4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2228      	movs	r2, #40	@ 0x28
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a60      	ldr	r2, [pc, #384]	@ (80068c8 <I2C_ITError+0x1d8>)
 8006748:	635a      	str	r2, [r3, #52]	@ 0x34
 800674a:	e030      	b.n	80067ae <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800674c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fa3f 	bl	8006bd4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f8e1 	bl	800691e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b60      	cmp	r3, #96	@ 0x60
 8006766:	d01f      	beq.n	80067a8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b20      	cmp	r3, #32
 800677c:	d114      	bne.n	80067a8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b10      	cmp	r3, #16
 800678a:	d109      	bne.n	80067a0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2210      	movs	r2, #16
 8006792:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006798:	f043 0204 	orr.w	r2, r3, #4
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2220      	movs	r2, #32
 80067a6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d039      	beq.n	8006830 <I2C_ITError+0x140>
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b11      	cmp	r3, #17
 80067c0:	d002      	beq.n	80067c8 <I2C_ITError+0xd8>
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b21      	cmp	r3, #33	@ 0x21
 80067c6:	d133      	bne.n	8006830 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067d6:	d107      	bne.n	80067e8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fe f9df 	bl	8004bb0 <HAL_DMA_GetState>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d017      	beq.n	8006828 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fc:	4a33      	ldr	r2, [pc, #204]	@ (80068cc <I2C_ITError+0x1dc>)
 80067fe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680c:	4618      	mov	r0, r3
 800680e:	f7fe f8b9 	bl	8004984 <HAL_DMA_Abort_IT>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d04d      	beq.n	80068b4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006822:	4610      	mov	r0, r2
 8006824:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006826:	e045      	b.n	80068b4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f851 	bl	80068d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800682e:	e041      	b.n	80068b4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d039      	beq.n	80068ac <I2C_ITError+0x1bc>
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b12      	cmp	r3, #18
 800683c:	d002      	beq.n	8006844 <I2C_ITError+0x154>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b22      	cmp	r3, #34	@ 0x22
 8006842:	d133      	bne.n	80068ac <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800684e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006852:	d107      	bne.n	8006864 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006862:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006868:	4618      	mov	r0, r3
 800686a:	f7fe f9a1 	bl	8004bb0 <HAL_DMA_GetState>
 800686e:	4603      	mov	r3, r0
 8006870:	2b01      	cmp	r3, #1
 8006872:	d017      	beq.n	80068a4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006878:	4a14      	ldr	r2, [pc, #80]	@ (80068cc <I2C_ITError+0x1dc>)
 800687a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe f87b 	bl	8004984 <HAL_DMA_Abort_IT>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d011      	beq.n	80068b8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800689e:	4610      	mov	r0, r2
 80068a0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068a2:	e009      	b.n	80068b8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f813 	bl	80068d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068aa:	e005      	b.n	80068b8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f80f 	bl	80068d0 <I2C_TreatErrorCallback>
  }
}
 80068b2:	e002      	b.n	80068ba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80068b4:	bf00      	nop
 80068b6:	e000      	b.n	80068ba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068b8:	bf00      	nop
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	ffff0000 	.word	0xffff0000
 80068c8:	080057f5 	.word	0x080057f5
 80068cc:	08006a2b 	.word	0x08006a2b

080068d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b60      	cmp	r3, #96	@ 0x60
 80068e2:	d10e      	bne.n	8006902 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fe fe3b 	bl	8005576 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006900:	e009      	b.n	8006916 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fe fe26 	bl	8005562 <HAL_I2C_ErrorCallback>
}
 8006916:	bf00      	nop
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b02      	cmp	r3, #2
 8006932:	d103      	bne.n	800693c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2200      	movs	r2, #0
 800693a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b01      	cmp	r3, #1
 8006948:	d007      	beq.n	800695a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	699a      	ldr	r2, [r3, #24]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f042 0201 	orr.w	r2, r2, #1
 8006958:	619a      	str	r2, [r3, #24]
  }
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006972:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006982:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d104      	bne.n	8006998 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800698e:	2120      	movs	r1, #32
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 f89b 	bl	8006acc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006996:	e02d      	b.n	80069f4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80069a0:	441a      	add	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2bff      	cmp	r3, #255	@ 0xff
 80069ae:	d903      	bls.n	80069b8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	22ff      	movs	r2, #255	@ 0xff
 80069b4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80069b6:	e004      	b.n	80069c2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	4619      	mov	r1, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3328      	adds	r3, #40	@ 0x28
 80069d2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80069d8:	f7fd ff00 	bl	80047dc <HAL_DMA_Start_IT>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80069e2:	2110      	movs	r1, #16
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f7ff fe83 	bl	80066f0 <I2C_ITError>
}
 80069ea:	e003      	b.n	80069f4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80069ec:	2140      	movs	r1, #64	@ 0x40
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 f86c 	bl	8006acc <I2C_Enable_IRQ>
}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a18:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006a1a:	2110      	movs	r1, #16
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f7ff fe67 	bl	80066f0 <I2C_ITError>
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a44:	2200      	movs	r2, #0
 8006a46:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a54:	2200      	movs	r2, #0
 8006a56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7ff ff39 	bl	80068d0 <I2C_TreatErrorCallback>
}
 8006a5e:	bf00      	nop
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	607b      	str	r3, [r7, #4]
 8006a72:	460b      	mov	r3, r1
 8006a74:	817b      	strh	r3, [r7, #10]
 8006a76:	4613      	mov	r3, r2
 8006a78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a7a:	897b      	ldrh	r3, [r7, #10]
 8006a7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a80:	7a7b      	ldrb	r3, [r7, #9]
 8006a82:	041b      	lsls	r3, r3, #16
 8006a84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	0d5b      	lsrs	r3, r3, #21
 8006aa2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006aa6:	4b08      	ldr	r3, [pc, #32]	@ (8006ac8 <I2C_TransferConfig+0x60>)
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	ea02 0103 	and.w	r1, r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	03ff63ff 	.word	0x03ff63ff

08006acc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae0:	4a39      	ldr	r2, [pc, #228]	@ (8006bc8 <I2C_Enable_IRQ+0xfc>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d032      	beq.n	8006b4c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006aea:	4a38      	ldr	r2, [pc, #224]	@ (8006bcc <I2C_Enable_IRQ+0x100>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d02d      	beq.n	8006b4c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006af4:	4a36      	ldr	r2, [pc, #216]	@ (8006bd0 <I2C_Enable_IRQ+0x104>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d028      	beq.n	8006b4c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006afa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	da03      	bge.n	8006b0a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006b08:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b0a:	887b      	ldrh	r3, [r7, #2]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006b1a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006b1c:	887b      	ldrh	r3, [r7, #2]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006b2c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006b2e:	887b      	ldrh	r3, [r7, #2]
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	d103      	bne.n	8006b3c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006b3a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b3c:	887b      	ldrh	r3, [r7, #2]
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	d133      	bne.n	8006baa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f043 0320 	orr.w	r3, r3, #32
 8006b48:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b4a:	e02e      	b.n	8006baa <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	da03      	bge.n	8006b5c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006b5a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b5c:	887b      	ldrh	r3, [r7, #2]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006b6c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006b6e:	887b      	ldrh	r3, [r7, #2]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006b7e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006b80:	887b      	ldrh	r3, [r7, #2]
 8006b82:	2b10      	cmp	r3, #16
 8006b84:	d103      	bne.n	8006b8e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006b8c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b8e:	887b      	ldrh	r3, [r7, #2]
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d103      	bne.n	8006b9c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006b9a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006b9c:	887b      	ldrh	r3, [r7, #2]
 8006b9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ba0:	d103      	bne.n	8006baa <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ba8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6819      	ldr	r1, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	601a      	str	r2, [r3, #0]
}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	080059e7 	.word	0x080059e7
 8006bcc:	08005e09 	.word	0x08005e09
 8006bd0:	08005bbd 	.word	0x08005bbd

08006bd4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006be4:	887b      	ldrh	r3, [r7, #2]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00f      	beq.n	8006c0e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006bf4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c02:	2b28      	cmp	r3, #40	@ 0x28
 8006c04:	d003      	beq.n	8006c0e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006c0c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c0e:	887b      	ldrh	r3, [r7, #2]
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00f      	beq.n	8006c38 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006c1e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c2c:	2b28      	cmp	r3, #40	@ 0x28
 8006c2e:	d003      	beq.n	8006c38 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006c36:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	da03      	bge.n	8006c48 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006c46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c48:	887b      	ldrh	r3, [r7, #2]
 8006c4a:	2b10      	cmp	r3, #16
 8006c4c:	d103      	bne.n	8006c56 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006c54:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c56:	887b      	ldrh	r3, [r7, #2]
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	d103      	bne.n	8006c64 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f043 0320 	orr.w	r3, r3, #32
 8006c62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c64:	887b      	ldrh	r3, [r7, #2]
 8006c66:	2b40      	cmp	r3, #64	@ 0x40
 8006c68:	d103      	bne.n	8006c72 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c70:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6819      	ldr	r1, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	43da      	mvns	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	400a      	ands	r2, r1
 8006c82:	601a      	str	r2, [r3, #0]
}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	d138      	bne.n	8006d18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e032      	b.n	8006d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2224      	movs	r2, #36	@ 0x24
 8006cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0201 	bic.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ce2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6819      	ldr	r1, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0201 	orr.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	e000      	b.n	8006d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d18:	2302      	movs	r3, #2
  }
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d139      	bne.n	8006db0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e033      	b.n	8006db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2224      	movs	r2, #36	@ 0x24
 8006d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0201 	bic.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	e000      	b.n	8006db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006db0:	2302      	movs	r3, #2
  }
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
	...

08006dc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d141      	bne.n	8006e52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006dce:	4b4b      	ldr	r3, [pc, #300]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dda:	d131      	bne.n	8006e40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ddc:	4b47      	ldr	r3, [pc, #284]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006de2:	4a46      	ldr	r2, [pc, #280]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006de4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006de8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006dec:	4b43      	ldr	r3, [pc, #268]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006df4:	4a41      	ldr	r2, [pc, #260]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006dfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006dfc:	4b40      	ldr	r3, [pc, #256]	@ (8006f00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2232      	movs	r2, #50	@ 0x32
 8006e02:	fb02 f303 	mul.w	r3, r2, r3
 8006e06:	4a3f      	ldr	r2, [pc, #252]	@ (8006f04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e08:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0c:	0c9b      	lsrs	r3, r3, #18
 8006e0e:	3301      	adds	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e12:	e002      	b.n	8006e1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e1a:	4b38      	ldr	r3, [pc, #224]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e26:	d102      	bne.n	8006e2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f2      	bne.n	8006e14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e2e:	4b33      	ldr	r3, [pc, #204]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e3a:	d158      	bne.n	8006eee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e057      	b.n	8006ef0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e40:	4b2e      	ldr	r3, [pc, #184]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e46:	4a2d      	ldr	r2, [pc, #180]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006e50:	e04d      	b.n	8006eee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e58:	d141      	bne.n	8006ede <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e5a:	4b28      	ldr	r3, [pc, #160]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e66:	d131      	bne.n	8006ecc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e68:	4b24      	ldr	r3, [pc, #144]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e6e:	4a23      	ldr	r2, [pc, #140]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e78:	4b20      	ldr	r3, [pc, #128]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e80:	4a1e      	ldr	r2, [pc, #120]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e88:	4b1d      	ldr	r3, [pc, #116]	@ (8006f00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2232      	movs	r2, #50	@ 0x32
 8006e8e:	fb02 f303 	mul.w	r3, r2, r3
 8006e92:	4a1c      	ldr	r2, [pc, #112]	@ (8006f04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e94:	fba2 2303 	umull	r2, r3, r2, r3
 8006e98:	0c9b      	lsrs	r3, r3, #18
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e9e:	e002      	b.n	8006ea6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ea6:	4b15      	ldr	r3, [pc, #84]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eb2:	d102      	bne.n	8006eba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f2      	bne.n	8006ea0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006eba:	4b10      	ldr	r3, [pc, #64]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ec6:	d112      	bne.n	8006eee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e011      	b.n	8006ef0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ed8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006edc:	e007      	b.n	8006eee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006ede:	4b07      	ldr	r3, [pc, #28]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ee6:	4a05      	ldr	r2, [pc, #20]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ee8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006eec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	40007000 	.word	0x40007000
 8006f00:	20000034 	.word	0x20000034
 8006f04:	431bde83 	.word	0x431bde83

08006f08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006f0c:	4b05      	ldr	r3, [pc, #20]	@ (8006f24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	4a04      	ldr	r2, [pc, #16]	@ (8006f24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f16:	6093      	str	r3, [r2, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	40007000 	.word	0x40007000

08006f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e2fe      	b.n	8007538 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d075      	beq.n	8007032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f46:	4b97      	ldr	r3, [pc, #604]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 030c 	and.w	r3, r3, #12
 8006f4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f50:	4b94      	ldr	r3, [pc, #592]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0303 	and.w	r3, r3, #3
 8006f58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	2b0c      	cmp	r3, #12
 8006f5e:	d102      	bne.n	8006f66 <HAL_RCC_OscConfig+0x3e>
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d002      	beq.n	8006f6c <HAL_RCC_OscConfig+0x44>
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d10b      	bne.n	8006f84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f6c:	4b8d      	ldr	r3, [pc, #564]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d05b      	beq.n	8007030 <HAL_RCC_OscConfig+0x108>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d157      	bne.n	8007030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e2d9      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f8c:	d106      	bne.n	8006f9c <HAL_RCC_OscConfig+0x74>
 8006f8e:	4b85      	ldr	r3, [pc, #532]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a84      	ldr	r2, [pc, #528]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	e01d      	b.n	8006fd8 <HAL_RCC_OscConfig+0xb0>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fa4:	d10c      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x98>
 8006fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a7e      	ldr	r2, [pc, #504]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	4b7c      	ldr	r3, [pc, #496]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a7b      	ldr	r2, [pc, #492]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	e00b      	b.n	8006fd8 <HAL_RCC_OscConfig+0xb0>
 8006fc0:	4b78      	ldr	r3, [pc, #480]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a77      	ldr	r2, [pc, #476]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	4b75      	ldr	r3, [pc, #468]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a74      	ldr	r2, [pc, #464]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d013      	beq.n	8007008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe0:	f7fd f9e4 	bl	80043ac <HAL_GetTick>
 8006fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fe6:	e008      	b.n	8006ffa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fe8:	f7fd f9e0 	bl	80043ac <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b64      	cmp	r3, #100	@ 0x64
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e29e      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0f0      	beq.n	8006fe8 <HAL_RCC_OscConfig+0xc0>
 8007006:	e014      	b.n	8007032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007008:	f7fd f9d0 	bl	80043ac <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800700e:	e008      	b.n	8007022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007010:	f7fd f9cc 	bl	80043ac <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b64      	cmp	r3, #100	@ 0x64
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e28a      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007022:	4b60      	ldr	r3, [pc, #384]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1f0      	bne.n	8007010 <HAL_RCC_OscConfig+0xe8>
 800702e:	e000      	b.n	8007032 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d075      	beq.n	800712a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800703e:	4b59      	ldr	r3, [pc, #356]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 030c 	and.w	r3, r3, #12
 8007046:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007048:	4b56      	ldr	r3, [pc, #344]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f003 0303 	and.w	r3, r3, #3
 8007050:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	2b0c      	cmp	r3, #12
 8007056:	d102      	bne.n	800705e <HAL_RCC_OscConfig+0x136>
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2b02      	cmp	r3, #2
 800705c:	d002      	beq.n	8007064 <HAL_RCC_OscConfig+0x13c>
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	2b04      	cmp	r3, #4
 8007062:	d11f      	bne.n	80070a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007064:	4b4f      	ldr	r3, [pc, #316]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800706c:	2b00      	cmp	r3, #0
 800706e:	d005      	beq.n	800707c <HAL_RCC_OscConfig+0x154>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e25d      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800707c:	4b49      	ldr	r3, [pc, #292]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	061b      	lsls	r3, r3, #24
 800708a:	4946      	ldr	r1, [pc, #280]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 800708c:	4313      	orrs	r3, r2
 800708e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007090:	4b45      	ldr	r3, [pc, #276]	@ (80071a8 <HAL_RCC_OscConfig+0x280>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4618      	mov	r0, r3
 8007096:	f7fd f93d 	bl	8004314 <HAL_InitTick>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d043      	beq.n	8007128 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e249      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d023      	beq.n	80070f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070ac:	4b3d      	ldr	r3, [pc, #244]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a3c      	ldr	r2, [pc, #240]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 80070b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b8:	f7fd f978 	bl	80043ac <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070c0:	f7fd f974 	bl	80043ac <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e232      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070d2:	4b34      	ldr	r3, [pc, #208]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0f0      	beq.n	80070c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070de:	4b31      	ldr	r3, [pc, #196]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	061b      	lsls	r3, r3, #24
 80070ec:	492d      	ldr	r1, [pc, #180]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	604b      	str	r3, [r1, #4]
 80070f2:	e01a      	b.n	800712a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070f4:	4b2b      	ldr	r3, [pc, #172]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a2a      	ldr	r2, [pc, #168]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 80070fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007100:	f7fd f954 	bl	80043ac <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007106:	e008      	b.n	800711a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007108:	f7fd f950 	bl	80043ac <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e20e      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800711a:	4b22      	ldr	r3, [pc, #136]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1f0      	bne.n	8007108 <HAL_RCC_OscConfig+0x1e0>
 8007126:	e000      	b.n	800712a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007128:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d041      	beq.n	80071ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d01c      	beq.n	8007178 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800713e:	4b19      	ldr	r3, [pc, #100]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8007140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007144:	4a17      	ldr	r2, [pc, #92]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800714e:	f7fd f92d 	bl	80043ac <HAL_GetTick>
 8007152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007154:	e008      	b.n	8007168 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007156:	f7fd f929 	bl	80043ac <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	2b02      	cmp	r3, #2
 8007162:	d901      	bls.n	8007168 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e1e7      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007168:	4b0e      	ldr	r3, [pc, #56]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 800716a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0ef      	beq.n	8007156 <HAL_RCC_OscConfig+0x22e>
 8007176:	e020      	b.n	80071ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007178:	4b0a      	ldr	r3, [pc, #40]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 800717a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800717e:	4a09      	ldr	r2, [pc, #36]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007188:	f7fd f910 	bl	80043ac <HAL_GetTick>
 800718c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800718e:	e00d      	b.n	80071ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007190:	f7fd f90c 	bl	80043ac <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	2b02      	cmp	r3, #2
 800719c:	d906      	bls.n	80071ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e1ca      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
 80071a2:	bf00      	nop
 80071a4:	40021000 	.word	0x40021000
 80071a8:	20000038 	.word	0x20000038
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071ac:	4b8c      	ldr	r3, [pc, #560]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 80071ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1ea      	bne.n	8007190 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 80a6 	beq.w	8007314 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071c8:	2300      	movs	r3, #0
 80071ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80071cc:	4b84      	ldr	r3, [pc, #528]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 80071ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <HAL_RCC_OscConfig+0x2b4>
 80071d8:	2301      	movs	r3, #1
 80071da:	e000      	b.n	80071de <HAL_RCC_OscConfig+0x2b6>
 80071dc:	2300      	movs	r3, #0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00d      	beq.n	80071fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071e2:	4b7f      	ldr	r3, [pc, #508]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 80071e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e6:	4a7e      	ldr	r2, [pc, #504]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 80071e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80071ee:	4b7c      	ldr	r3, [pc, #496]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 80071f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80071fa:	2301      	movs	r3, #1
 80071fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071fe:	4b79      	ldr	r3, [pc, #484]	@ (80073e4 <HAL_RCC_OscConfig+0x4bc>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007206:	2b00      	cmp	r3, #0
 8007208:	d118      	bne.n	800723c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800720a:	4b76      	ldr	r3, [pc, #472]	@ (80073e4 <HAL_RCC_OscConfig+0x4bc>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a75      	ldr	r2, [pc, #468]	@ (80073e4 <HAL_RCC_OscConfig+0x4bc>)
 8007210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007216:	f7fd f8c9 	bl	80043ac <HAL_GetTick>
 800721a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800721c:	e008      	b.n	8007230 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800721e:	f7fd f8c5 	bl	80043ac <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d901      	bls.n	8007230 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e183      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007230:	4b6c      	ldr	r3, [pc, #432]	@ (80073e4 <HAL_RCC_OscConfig+0x4bc>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007238:	2b00      	cmp	r3, #0
 800723a:	d0f0      	beq.n	800721e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d108      	bne.n	8007256 <HAL_RCC_OscConfig+0x32e>
 8007244:	4b66      	ldr	r3, [pc, #408]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800724a:	4a65      	ldr	r2, [pc, #404]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 800724c:	f043 0301 	orr.w	r3, r3, #1
 8007250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007254:	e024      	b.n	80072a0 <HAL_RCC_OscConfig+0x378>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	2b05      	cmp	r3, #5
 800725c:	d110      	bne.n	8007280 <HAL_RCC_OscConfig+0x358>
 800725e:	4b60      	ldr	r3, [pc, #384]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 8007260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007264:	4a5e      	ldr	r2, [pc, #376]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 8007266:	f043 0304 	orr.w	r3, r3, #4
 800726a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800726e:	4b5c      	ldr	r3, [pc, #368]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 8007270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007274:	4a5a      	ldr	r2, [pc, #360]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 8007276:	f043 0301 	orr.w	r3, r3, #1
 800727a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800727e:	e00f      	b.n	80072a0 <HAL_RCC_OscConfig+0x378>
 8007280:	4b57      	ldr	r3, [pc, #348]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007286:	4a56      	ldr	r2, [pc, #344]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 8007288:	f023 0301 	bic.w	r3, r3, #1
 800728c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007290:	4b53      	ldr	r3, [pc, #332]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 8007292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007296:	4a52      	ldr	r2, [pc, #328]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 8007298:	f023 0304 	bic.w	r3, r3, #4
 800729c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d016      	beq.n	80072d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a8:	f7fd f880 	bl	80043ac <HAL_GetTick>
 80072ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072ae:	e00a      	b.n	80072c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072b0:	f7fd f87c 	bl	80043ac <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072be:	4293      	cmp	r3, r2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e138      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072c6:	4b46      	ldr	r3, [pc, #280]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 80072c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0ed      	beq.n	80072b0 <HAL_RCC_OscConfig+0x388>
 80072d4:	e015      	b.n	8007302 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d6:	f7fd f869 	bl	80043ac <HAL_GetTick>
 80072da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072dc:	e00a      	b.n	80072f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072de:	f7fd f865 	bl	80043ac <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d901      	bls.n	80072f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e121      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072f4:	4b3a      	ldr	r3, [pc, #232]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 80072f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1ed      	bne.n	80072de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007302:	7ffb      	ldrb	r3, [r7, #31]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d105      	bne.n	8007314 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007308:	4b35      	ldr	r3, [pc, #212]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 800730a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800730c:	4a34      	ldr	r2, [pc, #208]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 800730e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007312:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0320 	and.w	r3, r3, #32
 800731c:	2b00      	cmp	r3, #0
 800731e:	d03c      	beq.n	800739a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d01c      	beq.n	8007362 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007328:	4b2d      	ldr	r3, [pc, #180]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 800732a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800732e:	4a2c      	ldr	r2, [pc, #176]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 8007330:	f043 0301 	orr.w	r3, r3, #1
 8007334:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007338:	f7fd f838 	bl	80043ac <HAL_GetTick>
 800733c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800733e:	e008      	b.n	8007352 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007340:	f7fd f834 	bl	80043ac <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e0f2      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007352:	4b23      	ldr	r3, [pc, #140]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 8007354:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0ef      	beq.n	8007340 <HAL_RCC_OscConfig+0x418>
 8007360:	e01b      	b.n	800739a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007362:	4b1f      	ldr	r3, [pc, #124]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 8007364:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007368:	4a1d      	ldr	r2, [pc, #116]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 800736a:	f023 0301 	bic.w	r3, r3, #1
 800736e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007372:	f7fd f81b 	bl	80043ac <HAL_GetTick>
 8007376:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007378:	e008      	b.n	800738c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800737a:	f7fd f817 	bl	80043ac <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d901      	bls.n	800738c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e0d5      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800738c:	4b14      	ldr	r3, [pc, #80]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 800738e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1ef      	bne.n	800737a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 80c9 	beq.w	8007536 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073a4:	4b0e      	ldr	r3, [pc, #56]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f003 030c 	and.w	r3, r3, #12
 80073ac:	2b0c      	cmp	r3, #12
 80073ae:	f000 8083 	beq.w	80074b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d15e      	bne.n	8007478 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073ba:	4b09      	ldr	r3, [pc, #36]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a08      	ldr	r2, [pc, #32]	@ (80073e0 <HAL_RCC_OscConfig+0x4b8>)
 80073c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c6:	f7fc fff1 	bl	80043ac <HAL_GetTick>
 80073ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073cc:	e00c      	b.n	80073e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ce:	f7fc ffed 	bl	80043ac <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d905      	bls.n	80073e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e0ab      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
 80073e0:	40021000 	.word	0x40021000
 80073e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073e8:	4b55      	ldr	r3, [pc, #340]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1ec      	bne.n	80073ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073f4:	4b52      	ldr	r3, [pc, #328]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	4b52      	ldr	r3, [pc, #328]	@ (8007544 <HAL_RCC_OscConfig+0x61c>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6a11      	ldr	r1, [r2, #32]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007404:	3a01      	subs	r2, #1
 8007406:	0112      	lsls	r2, r2, #4
 8007408:	4311      	orrs	r1, r2
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800740e:	0212      	lsls	r2, r2, #8
 8007410:	4311      	orrs	r1, r2
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007416:	0852      	lsrs	r2, r2, #1
 8007418:	3a01      	subs	r2, #1
 800741a:	0552      	lsls	r2, r2, #21
 800741c:	4311      	orrs	r1, r2
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007422:	0852      	lsrs	r2, r2, #1
 8007424:	3a01      	subs	r2, #1
 8007426:	0652      	lsls	r2, r2, #25
 8007428:	4311      	orrs	r1, r2
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800742e:	06d2      	lsls	r2, r2, #27
 8007430:	430a      	orrs	r2, r1
 8007432:	4943      	ldr	r1, [pc, #268]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 8007434:	4313      	orrs	r3, r2
 8007436:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007438:	4b41      	ldr	r3, [pc, #260]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a40      	ldr	r2, [pc, #256]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 800743e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007442:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007444:	4b3e      	ldr	r3, [pc, #248]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	4a3d      	ldr	r2, [pc, #244]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 800744a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800744e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007450:	f7fc ffac 	bl	80043ac <HAL_GetTick>
 8007454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007456:	e008      	b.n	800746a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007458:	f7fc ffa8 	bl	80043ac <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	2b02      	cmp	r3, #2
 8007464:	d901      	bls.n	800746a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e066      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800746a:	4b35      	ldr	r3, [pc, #212]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0f0      	beq.n	8007458 <HAL_RCC_OscConfig+0x530>
 8007476:	e05e      	b.n	8007536 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007478:	4b31      	ldr	r3, [pc, #196]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a30      	ldr	r2, [pc, #192]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 800747e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007484:	f7fc ff92 	bl	80043ac <HAL_GetTick>
 8007488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800748a:	e008      	b.n	800749e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800748c:	f7fc ff8e 	bl	80043ac <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e04c      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800749e:	4b28      	ldr	r3, [pc, #160]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1f0      	bne.n	800748c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80074aa:	4b25      	ldr	r3, [pc, #148]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	4924      	ldr	r1, [pc, #144]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 80074b0:	4b25      	ldr	r3, [pc, #148]	@ (8007548 <HAL_RCC_OscConfig+0x620>)
 80074b2:	4013      	ands	r3, r2
 80074b4:	60cb      	str	r3, [r1, #12]
 80074b6:	e03e      	b.n	8007536 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e039      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80074c4:	4b1e      	ldr	r3, [pc, #120]	@ (8007540 <HAL_RCC_OscConfig+0x618>)
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f003 0203 	and.w	r2, r3, #3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d12c      	bne.n	8007532 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e2:	3b01      	subs	r3, #1
 80074e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d123      	bne.n	8007532 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d11b      	bne.n	8007532 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007504:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007506:	429a      	cmp	r2, r3
 8007508:	d113      	bne.n	8007532 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007514:	085b      	lsrs	r3, r3, #1
 8007516:	3b01      	subs	r3, #1
 8007518:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800751a:	429a      	cmp	r2, r3
 800751c:	d109      	bne.n	8007532 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007528:	085b      	lsrs	r3, r3, #1
 800752a:	3b01      	subs	r3, #1
 800752c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800752e:	429a      	cmp	r2, r3
 8007530:	d001      	beq.n	8007536 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e000      	b.n	8007538 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3720      	adds	r7, #32
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	40021000 	.word	0x40021000
 8007544:	019f800c 	.word	0x019f800c
 8007548:	feeefffc 	.word	0xfeeefffc

0800754c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e11e      	b.n	80077a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007564:	4b91      	ldr	r3, [pc, #580]	@ (80077ac <HAL_RCC_ClockConfig+0x260>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 030f 	and.w	r3, r3, #15
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d910      	bls.n	8007594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007572:	4b8e      	ldr	r3, [pc, #568]	@ (80077ac <HAL_RCC_ClockConfig+0x260>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f023 020f 	bic.w	r2, r3, #15
 800757a:	498c      	ldr	r1, [pc, #560]	@ (80077ac <HAL_RCC_ClockConfig+0x260>)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	4313      	orrs	r3, r2
 8007580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007582:	4b8a      	ldr	r3, [pc, #552]	@ (80077ac <HAL_RCC_ClockConfig+0x260>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	429a      	cmp	r2, r3
 800758e:	d001      	beq.n	8007594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e106      	b.n	80077a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d073      	beq.n	8007688 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d129      	bne.n	80075fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075a8:	4b81      	ldr	r3, [pc, #516]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e0f4      	b.n	80077a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80075b8:	f000 f99e 	bl	80078f8 <RCC_GetSysClockFreqFromPLLSource>
 80075bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	4a7c      	ldr	r2, [pc, #496]	@ (80077b4 <HAL_RCC_ClockConfig+0x268>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d93f      	bls.n	8007646 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80075c6:	4b7a      	ldr	r3, [pc, #488]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d009      	beq.n	80075e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d033      	beq.n	8007646 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d12f      	bne.n	8007646 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80075e6:	4b72      	ldr	r3, [pc, #456]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075ee:	4a70      	ldr	r2, [pc, #448]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 80075f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80075f6:	2380      	movs	r3, #128	@ 0x80
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	e024      	b.n	8007646 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	2b02      	cmp	r3, #2
 8007602:	d107      	bne.n	8007614 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007604:	4b6a      	ldr	r3, [pc, #424]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d109      	bne.n	8007624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e0c6      	b.n	80077a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007614:	4b66      	ldr	r3, [pc, #408]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e0be      	b.n	80077a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007624:	f000 f8ce 	bl	80077c4 <HAL_RCC_GetSysClockFreq>
 8007628:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	4a61      	ldr	r2, [pc, #388]	@ (80077b4 <HAL_RCC_ClockConfig+0x268>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d909      	bls.n	8007646 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007632:	4b5f      	ldr	r3, [pc, #380]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800763a:	4a5d      	ldr	r2, [pc, #372]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 800763c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007640:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007642:	2380      	movs	r3, #128	@ 0x80
 8007644:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007646:	4b5a      	ldr	r3, [pc, #360]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f023 0203 	bic.w	r2, r3, #3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	4957      	ldr	r1, [pc, #348]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 8007654:	4313      	orrs	r3, r2
 8007656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007658:	f7fc fea8 	bl	80043ac <HAL_GetTick>
 800765c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800765e:	e00a      	b.n	8007676 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007660:	f7fc fea4 	bl	80043ac <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800766e:	4293      	cmp	r3, r2
 8007670:	d901      	bls.n	8007676 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e095      	b.n	80077a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007676:	4b4e      	ldr	r3, [pc, #312]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 020c 	and.w	r2, r3, #12
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	429a      	cmp	r2, r3
 8007686:	d1eb      	bne.n	8007660 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d023      	beq.n	80076dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d005      	beq.n	80076ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076a0:	4b43      	ldr	r3, [pc, #268]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	4a42      	ldr	r2, [pc, #264]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 80076a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80076aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d007      	beq.n	80076c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80076b8:	4b3d      	ldr	r3, [pc, #244]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076c0:	4a3b      	ldr	r2, [pc, #236]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 80076c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80076c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076c8:	4b39      	ldr	r3, [pc, #228]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	4936      	ldr	r1, [pc, #216]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	608b      	str	r3, [r1, #8]
 80076da:	e008      	b.n	80076ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b80      	cmp	r3, #128	@ 0x80
 80076e0:	d105      	bne.n	80076ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80076e2:	4b33      	ldr	r3, [pc, #204]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	4a32      	ldr	r2, [pc, #200]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 80076e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076ee:	4b2f      	ldr	r3, [pc, #188]	@ (80077ac <HAL_RCC_ClockConfig+0x260>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d21d      	bcs.n	8007738 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076fc:	4b2b      	ldr	r3, [pc, #172]	@ (80077ac <HAL_RCC_ClockConfig+0x260>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f023 020f 	bic.w	r2, r3, #15
 8007704:	4929      	ldr	r1, [pc, #164]	@ (80077ac <HAL_RCC_ClockConfig+0x260>)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	4313      	orrs	r3, r2
 800770a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800770c:	f7fc fe4e 	bl	80043ac <HAL_GetTick>
 8007710:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007712:	e00a      	b.n	800772a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007714:	f7fc fe4a 	bl	80043ac <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007722:	4293      	cmp	r3, r2
 8007724:	d901      	bls.n	800772a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e03b      	b.n	80077a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800772a:	4b20      	ldr	r3, [pc, #128]	@ (80077ac <HAL_RCC_ClockConfig+0x260>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d1ed      	bne.n	8007714 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0304 	and.w	r3, r3, #4
 8007740:	2b00      	cmp	r3, #0
 8007742:	d008      	beq.n	8007756 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007744:	4b1a      	ldr	r3, [pc, #104]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	4917      	ldr	r1, [pc, #92]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 8007752:	4313      	orrs	r3, r2
 8007754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b00      	cmp	r3, #0
 8007760:	d009      	beq.n	8007776 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007762:	4b13      	ldr	r3, [pc, #76]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	490f      	ldr	r1, [pc, #60]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 8007772:	4313      	orrs	r3, r2
 8007774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007776:	f000 f825 	bl	80077c4 <HAL_RCC_GetSysClockFreq>
 800777a:	4602      	mov	r2, r0
 800777c:	4b0c      	ldr	r3, [pc, #48]	@ (80077b0 <HAL_RCC_ClockConfig+0x264>)
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	091b      	lsrs	r3, r3, #4
 8007782:	f003 030f 	and.w	r3, r3, #15
 8007786:	490c      	ldr	r1, [pc, #48]	@ (80077b8 <HAL_RCC_ClockConfig+0x26c>)
 8007788:	5ccb      	ldrb	r3, [r1, r3]
 800778a:	f003 031f 	and.w	r3, r3, #31
 800778e:	fa22 f303 	lsr.w	r3, r2, r3
 8007792:	4a0a      	ldr	r2, [pc, #40]	@ (80077bc <HAL_RCC_ClockConfig+0x270>)
 8007794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007796:	4b0a      	ldr	r3, [pc, #40]	@ (80077c0 <HAL_RCC_ClockConfig+0x274>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4618      	mov	r0, r3
 800779c:	f7fc fdba 	bl	8004314 <HAL_InitTick>
 80077a0:	4603      	mov	r3, r0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	40022000 	.word	0x40022000
 80077b0:	40021000 	.word	0x40021000
 80077b4:	04c4b400 	.word	0x04c4b400
 80077b8:	0800f798 	.word	0x0800f798
 80077bc:	20000034 	.word	0x20000034
 80077c0:	20000038 	.word	0x20000038

080077c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80077ca:	4b2c      	ldr	r3, [pc, #176]	@ (800787c <HAL_RCC_GetSysClockFreq+0xb8>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f003 030c 	and.w	r3, r3, #12
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d102      	bne.n	80077dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80077d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007880 <HAL_RCC_GetSysClockFreq+0xbc>)
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	e047      	b.n	800786c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80077dc:	4b27      	ldr	r3, [pc, #156]	@ (800787c <HAL_RCC_GetSysClockFreq+0xb8>)
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f003 030c 	and.w	r3, r3, #12
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d102      	bne.n	80077ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80077e8:	4b26      	ldr	r3, [pc, #152]	@ (8007884 <HAL_RCC_GetSysClockFreq+0xc0>)
 80077ea:	613b      	str	r3, [r7, #16]
 80077ec:	e03e      	b.n	800786c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80077ee:	4b23      	ldr	r3, [pc, #140]	@ (800787c <HAL_RCC_GetSysClockFreq+0xb8>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 030c 	and.w	r3, r3, #12
 80077f6:	2b0c      	cmp	r3, #12
 80077f8:	d136      	bne.n	8007868 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077fa:	4b20      	ldr	r3, [pc, #128]	@ (800787c <HAL_RCC_GetSysClockFreq+0xb8>)
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007804:	4b1d      	ldr	r3, [pc, #116]	@ (800787c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	091b      	lsrs	r3, r3, #4
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	3301      	adds	r3, #1
 8007810:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b03      	cmp	r3, #3
 8007816:	d10c      	bne.n	8007832 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007818:	4a1a      	ldr	r2, [pc, #104]	@ (8007884 <HAL_RCC_GetSysClockFreq+0xc0>)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007820:	4a16      	ldr	r2, [pc, #88]	@ (800787c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007822:	68d2      	ldr	r2, [r2, #12]
 8007824:	0a12      	lsrs	r2, r2, #8
 8007826:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800782a:	fb02 f303 	mul.w	r3, r2, r3
 800782e:	617b      	str	r3, [r7, #20]
      break;
 8007830:	e00c      	b.n	800784c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007832:	4a13      	ldr	r2, [pc, #76]	@ (8007880 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	fbb2 f3f3 	udiv	r3, r2, r3
 800783a:	4a10      	ldr	r2, [pc, #64]	@ (800787c <HAL_RCC_GetSysClockFreq+0xb8>)
 800783c:	68d2      	ldr	r2, [r2, #12]
 800783e:	0a12      	lsrs	r2, r2, #8
 8007840:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007844:	fb02 f303 	mul.w	r3, r2, r3
 8007848:	617b      	str	r3, [r7, #20]
      break;
 800784a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800784c:	4b0b      	ldr	r3, [pc, #44]	@ (800787c <HAL_RCC_GetSysClockFreq+0xb8>)
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	0e5b      	lsrs	r3, r3, #25
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	3301      	adds	r3, #1
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	fbb2 f3f3 	udiv	r3, r2, r3
 8007864:	613b      	str	r3, [r7, #16]
 8007866:	e001      	b.n	800786c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800786c:	693b      	ldr	r3, [r7, #16]
}
 800786e:	4618      	mov	r0, r3
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40021000 	.word	0x40021000
 8007880:	00f42400 	.word	0x00f42400
 8007884:	016e3600 	.word	0x016e3600

08007888 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800788c:	4b03      	ldr	r3, [pc, #12]	@ (800789c <HAL_RCC_GetHCLKFreq+0x14>)
 800788e:	681b      	ldr	r3, [r3, #0]
}
 8007890:	4618      	mov	r0, r3
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	20000034 	.word	0x20000034

080078a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078a4:	f7ff fff0 	bl	8007888 <HAL_RCC_GetHCLKFreq>
 80078a8:	4602      	mov	r2, r0
 80078aa:	4b06      	ldr	r3, [pc, #24]	@ (80078c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	0a1b      	lsrs	r3, r3, #8
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	4904      	ldr	r1, [pc, #16]	@ (80078c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078b6:	5ccb      	ldrb	r3, [r1, r3]
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	40021000 	.word	0x40021000
 80078c8:	0800f7a8 	.word	0x0800f7a8

080078cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80078d0:	f7ff ffda 	bl	8007888 <HAL_RCC_GetHCLKFreq>
 80078d4:	4602      	mov	r2, r0
 80078d6:	4b06      	ldr	r3, [pc, #24]	@ (80078f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	0adb      	lsrs	r3, r3, #11
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	4904      	ldr	r1, [pc, #16]	@ (80078f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80078e2:	5ccb      	ldrb	r3, [r1, r3]
 80078e4:	f003 031f 	and.w	r3, r3, #31
 80078e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	40021000 	.word	0x40021000
 80078f4:	0800f7a8 	.word	0x0800f7a8

080078f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007908:	4b1b      	ldr	r3, [pc, #108]	@ (8007978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	091b      	lsrs	r3, r3, #4
 800790e:	f003 030f 	and.w	r3, r3, #15
 8007912:	3301      	adds	r3, #1
 8007914:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b03      	cmp	r3, #3
 800791a:	d10c      	bne.n	8007936 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800791c:	4a17      	ldr	r2, [pc, #92]	@ (800797c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	fbb2 f3f3 	udiv	r3, r2, r3
 8007924:	4a14      	ldr	r2, [pc, #80]	@ (8007978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007926:	68d2      	ldr	r2, [r2, #12]
 8007928:	0a12      	lsrs	r2, r2, #8
 800792a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800792e:	fb02 f303 	mul.w	r3, r2, r3
 8007932:	617b      	str	r3, [r7, #20]
    break;
 8007934:	e00c      	b.n	8007950 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007936:	4a12      	ldr	r2, [pc, #72]	@ (8007980 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	fbb2 f3f3 	udiv	r3, r2, r3
 800793e:	4a0e      	ldr	r2, [pc, #56]	@ (8007978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007940:	68d2      	ldr	r2, [r2, #12]
 8007942:	0a12      	lsrs	r2, r2, #8
 8007944:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007948:	fb02 f303 	mul.w	r3, r2, r3
 800794c:	617b      	str	r3, [r7, #20]
    break;
 800794e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007950:	4b09      	ldr	r3, [pc, #36]	@ (8007978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	0e5b      	lsrs	r3, r3, #25
 8007956:	f003 0303 	and.w	r3, r3, #3
 800795a:	3301      	adds	r3, #1
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	fbb2 f3f3 	udiv	r3, r2, r3
 8007968:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800796a:	687b      	ldr	r3, [r7, #4]
}
 800796c:	4618      	mov	r0, r3
 800796e:	371c      	adds	r7, #28
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	40021000 	.word	0x40021000
 800797c:	016e3600 	.word	0x016e3600
 8007980:	00f42400 	.word	0x00f42400

08007984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800798c:	2300      	movs	r3, #0
 800798e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007990:	2300      	movs	r3, #0
 8007992:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 8098 	beq.w	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079a2:	2300      	movs	r3, #0
 80079a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079a6:	4b43      	ldr	r3, [pc, #268]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10d      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079b2:	4b40      	ldr	r3, [pc, #256]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079b6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80079be:	4b3d      	ldr	r3, [pc, #244]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079c6:	60bb      	str	r3, [r7, #8]
 80079c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079ca:	2301      	movs	r3, #1
 80079cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079ce:	4b3a      	ldr	r3, [pc, #232]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a39      	ldr	r2, [pc, #228]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079da:	f7fc fce7 	bl	80043ac <HAL_GetTick>
 80079de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079e0:	e009      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079e2:	f7fc fce3 	bl	80043ac <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d902      	bls.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	74fb      	strb	r3, [r7, #19]
        break;
 80079f4:	e005      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079f6:	4b30      	ldr	r3, [pc, #192]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d0ef      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007a02:	7cfb      	ldrb	r3, [r7, #19]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d159      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a08:	4b2a      	ldr	r3, [pc, #168]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d01e      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d019      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a24:	4b23      	ldr	r3, [pc, #140]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a30:	4b20      	ldr	r3, [pc, #128]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a36:	4a1f      	ldr	r2, [pc, #124]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a40:	4b1c      	ldr	r3, [pc, #112]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a46:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a50:	4a18      	ldr	r2, [pc, #96]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d016      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a62:	f7fc fca3 	bl	80043ac <HAL_GetTick>
 8007a66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a68:	e00b      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a6a:	f7fc fc9f 	bl	80043ac <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d902      	bls.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	74fb      	strb	r3, [r7, #19]
            break;
 8007a80:	e006      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a82:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0ec      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007a90:	7cfb      	ldrb	r3, [r7, #19]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10b      	bne.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a96:	4b07      	ldr	r3, [pc, #28]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aa4:	4903      	ldr	r1, [pc, #12]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007aac:	e008      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007aae:	7cfb      	ldrb	r3, [r7, #19]
 8007ab0:	74bb      	strb	r3, [r7, #18]
 8007ab2:	e005      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007ab4:	40021000 	.word	0x40021000
 8007ab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	7cfb      	ldrb	r3, [r7, #19]
 8007abe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ac0:	7c7b      	ldrb	r3, [r7, #17]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d105      	bne.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ac6:	4ba7      	ldr	r3, [pc, #668]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aca:	4aa6      	ldr	r2, [pc, #664]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ad0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ade:	4ba1      	ldr	r3, [pc, #644]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae4:	f023 0203 	bic.w	r2, r3, #3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	499d      	ldr	r1, [pc, #628]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00a      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b00:	4b98      	ldr	r3, [pc, #608]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b06:	f023 020c 	bic.w	r2, r3, #12
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	4995      	ldr	r1, [pc, #596]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0304 	and.w	r3, r3, #4
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00a      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b22:	4b90      	ldr	r3, [pc, #576]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	498c      	ldr	r1, [pc, #560]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00a      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b44:	4b87      	ldr	r3, [pc, #540]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	4984      	ldr	r1, [pc, #528]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b66:	4b7f      	ldr	r3, [pc, #508]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	497b      	ldr	r1, [pc, #492]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b88:	4b76      	ldr	r3, [pc, #472]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	4973      	ldr	r1, [pc, #460]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007baa:	4b6e      	ldr	r3, [pc, #440]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	496a      	ldr	r1, [pc, #424]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bcc:	4b65      	ldr	r3, [pc, #404]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	4962      	ldr	r1, [pc, #392]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007bee:	4b5d      	ldr	r3, [pc, #372]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfc:	4959      	ldr	r1, [pc, #356]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c10:	4b54      	ldr	r3, [pc, #336]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c16:	f023 0203 	bic.w	r2, r3, #3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1e:	4951      	ldr	r1, [pc, #324]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c32:	4b4c      	ldr	r3, [pc, #304]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c38:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c40:	4948      	ldr	r1, [pc, #288]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d015      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c54:	4b43      	ldr	r3, [pc, #268]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c62:	4940      	ldr	r1, [pc, #256]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c72:	d105      	bne.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c74:	4b3b      	ldr	r3, [pc, #236]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	4a3a      	ldr	r2, [pc, #232]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c7e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d015      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c8c:	4b35      	ldr	r3, [pc, #212]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c9a:	4932      	ldr	r1, [pc, #200]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ca6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007caa:	d105      	bne.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cac:	4b2d      	ldr	r3, [pc, #180]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	4a2c      	ldr	r2, [pc, #176]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cb6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d015      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cc4:	4b27      	ldr	r3, [pc, #156]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd2:	4924      	ldr	r1, [pc, #144]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ce2:	d105      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d015      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cfc:	4b19      	ldr	r3, [pc, #100]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d0a:	4916      	ldr	r1, [pc, #88]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d1a:	d105      	bne.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d1c:	4b11      	ldr	r3, [pc, #68]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	4a10      	ldr	r2, [pc, #64]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d26:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d019      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d34:	4b0b      	ldr	r3, [pc, #44]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d42:	4908      	ldr	r1, [pc, #32]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d52:	d109      	bne.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d54:	4b03      	ldr	r3, [pc, #12]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	4a02      	ldr	r2, [pc, #8]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d5e:	60d3      	str	r3, [r2, #12]
 8007d60:	e002      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007d62:	bf00      	nop
 8007d64:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d015      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007d74:	4b29      	ldr	r3, [pc, #164]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d7a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d82:	4926      	ldr	r1, [pc, #152]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d92:	d105      	bne.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d94:	4b21      	ldr	r3, [pc, #132]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	4a20      	ldr	r2, [pc, #128]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d015      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007dac:	4b1b      	ldr	r3, [pc, #108]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007db2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dba:	4918      	ldr	r1, [pc, #96]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dca:	d105      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007dcc:	4b13      	ldr	r3, [pc, #76]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	4a12      	ldr	r2, [pc, #72]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dd6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d015      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007de4:	4b0d      	ldr	r3, [pc, #52]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007dea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007df2:	490a      	ldr	r1, [pc, #40]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e02:	d105      	bne.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e04:	4b05      	ldr	r3, [pc, #20]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	4a04      	ldr	r2, [pc, #16]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007e10:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40021000 	.word	0x40021000

08007e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e049      	b.n	8007ec6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d106      	bne.n	8007e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7fb fe0e 	bl	8003a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	f001 f842 	bl	8008ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d001      	beq.n	8007ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e054      	b.n	8007f92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0201 	orr.w	r2, r2, #1
 8007efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a26      	ldr	r2, [pc, #152]	@ (8007fa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d022      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f12:	d01d      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a22      	ldr	r2, [pc, #136]	@ (8007fa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d018      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a21      	ldr	r2, [pc, #132]	@ (8007fa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d013      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8007fac <HAL_TIM_Base_Start_IT+0xdc>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00e      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a1e      	ldr	r2, [pc, #120]	@ (8007fb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d009      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a1c      	ldr	r2, [pc, #112]	@ (8007fb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d004      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007fb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d115      	bne.n	8007f7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689a      	ldr	r2, [r3, #8]
 8007f56:	4b19      	ldr	r3, [pc, #100]	@ (8007fbc <HAL_TIM_Base_Start_IT+0xec>)
 8007f58:	4013      	ands	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b06      	cmp	r3, #6
 8007f60:	d015      	beq.n	8007f8e <HAL_TIM_Base_Start_IT+0xbe>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f68:	d011      	beq.n	8007f8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f042 0201 	orr.w	r2, r2, #1
 8007f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f7a:	e008      	b.n	8007f8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f042 0201 	orr.w	r2, r2, #1
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	e000      	b.n	8007f90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	40012c00 	.word	0x40012c00
 8007fa4:	40000400 	.word	0x40000400
 8007fa8:	40000800 	.word	0x40000800
 8007fac:	40000c00 	.word	0x40000c00
 8007fb0:	40013400 	.word	0x40013400
 8007fb4:	40014000 	.word	0x40014000
 8007fb8:	40015000 	.word	0x40015000
 8007fbc:	00010007 	.word	0x00010007

08007fc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e049      	b.n	8008066 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d106      	bne.n	8007fec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7fb fd10 	bl	8003a0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	4610      	mov	r0, r2
 8008000:	f000 ff72 	bl	8008ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d109      	bne.n	8008094 <HAL_TIM_PWM_Start+0x24>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b01      	cmp	r3, #1
 800808a:	bf14      	ite	ne
 800808c:	2301      	movne	r3, #1
 800808e:	2300      	moveq	r3, #0
 8008090:	b2db      	uxtb	r3, r3
 8008092:	e03c      	b.n	800810e <HAL_TIM_PWM_Start+0x9e>
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b04      	cmp	r3, #4
 8008098:	d109      	bne.n	80080ae <HAL_TIM_PWM_Start+0x3e>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	bf14      	ite	ne
 80080a6:	2301      	movne	r3, #1
 80080a8:	2300      	moveq	r3, #0
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	e02f      	b.n	800810e <HAL_TIM_PWM_Start+0x9e>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d109      	bne.n	80080c8 <HAL_TIM_PWM_Start+0x58>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	bf14      	ite	ne
 80080c0:	2301      	movne	r3, #1
 80080c2:	2300      	moveq	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	e022      	b.n	800810e <HAL_TIM_PWM_Start+0x9e>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2b0c      	cmp	r3, #12
 80080cc:	d109      	bne.n	80080e2 <HAL_TIM_PWM_Start+0x72>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	bf14      	ite	ne
 80080da:	2301      	movne	r3, #1
 80080dc:	2300      	moveq	r3, #0
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	e015      	b.n	800810e <HAL_TIM_PWM_Start+0x9e>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b10      	cmp	r3, #16
 80080e6:	d109      	bne.n	80080fc <HAL_TIM_PWM_Start+0x8c>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	bf14      	ite	ne
 80080f4:	2301      	movne	r3, #1
 80080f6:	2300      	moveq	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	e008      	b.n	800810e <HAL_TIM_PWM_Start+0x9e>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b01      	cmp	r3, #1
 8008106:	bf14      	ite	ne
 8008108:	2301      	movne	r3, #1
 800810a:	2300      	moveq	r3, #0
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e0a6      	b.n	8008264 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d104      	bne.n	8008126 <HAL_TIM_PWM_Start+0xb6>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008124:	e023      	b.n	800816e <HAL_TIM_PWM_Start+0xfe>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b04      	cmp	r3, #4
 800812a:	d104      	bne.n	8008136 <HAL_TIM_PWM_Start+0xc6>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008134:	e01b      	b.n	800816e <HAL_TIM_PWM_Start+0xfe>
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b08      	cmp	r3, #8
 800813a:	d104      	bne.n	8008146 <HAL_TIM_PWM_Start+0xd6>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008144:	e013      	b.n	800816e <HAL_TIM_PWM_Start+0xfe>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b0c      	cmp	r3, #12
 800814a:	d104      	bne.n	8008156 <HAL_TIM_PWM_Start+0xe6>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008154:	e00b      	b.n	800816e <HAL_TIM_PWM_Start+0xfe>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b10      	cmp	r3, #16
 800815a:	d104      	bne.n	8008166 <HAL_TIM_PWM_Start+0xf6>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008164:	e003      	b.n	800816e <HAL_TIM_PWM_Start+0xfe>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2202      	movs	r2, #2
 800816a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2201      	movs	r2, #1
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	4618      	mov	r0, r3
 8008178:	f001 fc5a 	bl	8009a30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a3a      	ldr	r2, [pc, #232]	@ (800826c <HAL_TIM_PWM_Start+0x1fc>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d018      	beq.n	80081b8 <HAL_TIM_PWM_Start+0x148>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a39      	ldr	r2, [pc, #228]	@ (8008270 <HAL_TIM_PWM_Start+0x200>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d013      	beq.n	80081b8 <HAL_TIM_PWM_Start+0x148>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a37      	ldr	r2, [pc, #220]	@ (8008274 <HAL_TIM_PWM_Start+0x204>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00e      	beq.n	80081b8 <HAL_TIM_PWM_Start+0x148>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a36      	ldr	r2, [pc, #216]	@ (8008278 <HAL_TIM_PWM_Start+0x208>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d009      	beq.n	80081b8 <HAL_TIM_PWM_Start+0x148>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a34      	ldr	r2, [pc, #208]	@ (800827c <HAL_TIM_PWM_Start+0x20c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d004      	beq.n	80081b8 <HAL_TIM_PWM_Start+0x148>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a33      	ldr	r2, [pc, #204]	@ (8008280 <HAL_TIM_PWM_Start+0x210>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d101      	bne.n	80081bc <HAL_TIM_PWM_Start+0x14c>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e000      	b.n	80081be <HAL_TIM_PWM_Start+0x14e>
 80081bc:	2300      	movs	r3, #0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d007      	beq.n	80081d2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a25      	ldr	r2, [pc, #148]	@ (800826c <HAL_TIM_PWM_Start+0x1fc>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d022      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e4:	d01d      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a26      	ldr	r2, [pc, #152]	@ (8008284 <HAL_TIM_PWM_Start+0x214>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d018      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a24      	ldr	r2, [pc, #144]	@ (8008288 <HAL_TIM_PWM_Start+0x218>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d013      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a23      	ldr	r2, [pc, #140]	@ (800828c <HAL_TIM_PWM_Start+0x21c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d00e      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a19      	ldr	r2, [pc, #100]	@ (8008270 <HAL_TIM_PWM_Start+0x200>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d009      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a18      	ldr	r2, [pc, #96]	@ (8008274 <HAL_TIM_PWM_Start+0x204>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d004      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a18      	ldr	r2, [pc, #96]	@ (8008280 <HAL_TIM_PWM_Start+0x210>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d115      	bne.n	800824e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	4b19      	ldr	r3, [pc, #100]	@ (8008290 <HAL_TIM_PWM_Start+0x220>)
 800822a:	4013      	ands	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b06      	cmp	r3, #6
 8008232:	d015      	beq.n	8008260 <HAL_TIM_PWM_Start+0x1f0>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800823a:	d011      	beq.n	8008260 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824c:	e008      	b.n	8008260 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f042 0201 	orr.w	r2, r2, #1
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	e000      	b.n	8008262 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008260:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	40012c00 	.word	0x40012c00
 8008270:	40013400 	.word	0x40013400
 8008274:	40014000 	.word	0x40014000
 8008278:	40014400 	.word	0x40014400
 800827c:	40014800 	.word	0x40014800
 8008280:	40015000 	.word	0x40015000
 8008284:	40000400 	.word	0x40000400
 8008288:	40000800 	.word	0x40000800
 800828c:	40000c00 	.word	0x40000c00
 8008290:	00010007 	.word	0x00010007

08008294 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e049      	b.n	800833a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d106      	bne.n	80082c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f841 	bl	8008342 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3304      	adds	r3, #4
 80082d0:	4619      	mov	r1, r3
 80082d2:	4610      	mov	r0, r2
 80082d4:	f000 fe08 	bl	8008ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
	...

08008358 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d104      	bne.n	8008376 <HAL_TIM_IC_Start_IT+0x1e>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008372:	b2db      	uxtb	r3, r3
 8008374:	e023      	b.n	80083be <HAL_TIM_IC_Start_IT+0x66>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b04      	cmp	r3, #4
 800837a:	d104      	bne.n	8008386 <HAL_TIM_IC_Start_IT+0x2e>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008382:	b2db      	uxtb	r3, r3
 8008384:	e01b      	b.n	80083be <HAL_TIM_IC_Start_IT+0x66>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b08      	cmp	r3, #8
 800838a:	d104      	bne.n	8008396 <HAL_TIM_IC_Start_IT+0x3e>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008392:	b2db      	uxtb	r3, r3
 8008394:	e013      	b.n	80083be <HAL_TIM_IC_Start_IT+0x66>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b0c      	cmp	r3, #12
 800839a:	d104      	bne.n	80083a6 <HAL_TIM_IC_Start_IT+0x4e>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	e00b      	b.n	80083be <HAL_TIM_IC_Start_IT+0x66>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b10      	cmp	r3, #16
 80083aa:	d104      	bne.n	80083b6 <HAL_TIM_IC_Start_IT+0x5e>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	e003      	b.n	80083be <HAL_TIM_IC_Start_IT+0x66>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d104      	bne.n	80083d0 <HAL_TIM_IC_Start_IT+0x78>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	e013      	b.n	80083f8 <HAL_TIM_IC_Start_IT+0xa0>
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d104      	bne.n	80083e0 <HAL_TIM_IC_Start_IT+0x88>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	e00b      	b.n	80083f8 <HAL_TIM_IC_Start_IT+0xa0>
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b08      	cmp	r3, #8
 80083e4:	d104      	bne.n	80083f0 <HAL_TIM_IC_Start_IT+0x98>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	e003      	b.n	80083f8 <HAL_TIM_IC_Start_IT+0xa0>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d102      	bne.n	8008406 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008400:	7b7b      	ldrb	r3, [r7, #13]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d001      	beq.n	800840a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e0e2      	b.n	80085d0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d104      	bne.n	800841a <HAL_TIM_IC_Start_IT+0xc2>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008418:	e023      	b.n	8008462 <HAL_TIM_IC_Start_IT+0x10a>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b04      	cmp	r3, #4
 800841e:	d104      	bne.n	800842a <HAL_TIM_IC_Start_IT+0xd2>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008428:	e01b      	b.n	8008462 <HAL_TIM_IC_Start_IT+0x10a>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b08      	cmp	r3, #8
 800842e:	d104      	bne.n	800843a <HAL_TIM_IC_Start_IT+0xe2>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008438:	e013      	b.n	8008462 <HAL_TIM_IC_Start_IT+0x10a>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b0c      	cmp	r3, #12
 800843e:	d104      	bne.n	800844a <HAL_TIM_IC_Start_IT+0xf2>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008448:	e00b      	b.n	8008462 <HAL_TIM_IC_Start_IT+0x10a>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b10      	cmp	r3, #16
 800844e:	d104      	bne.n	800845a <HAL_TIM_IC_Start_IT+0x102>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008458:	e003      	b.n	8008462 <HAL_TIM_IC_Start_IT+0x10a>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2202      	movs	r2, #2
 800845e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d104      	bne.n	8008472 <HAL_TIM_IC_Start_IT+0x11a>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008470:	e013      	b.n	800849a <HAL_TIM_IC_Start_IT+0x142>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b04      	cmp	r3, #4
 8008476:	d104      	bne.n	8008482 <HAL_TIM_IC_Start_IT+0x12a>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008480:	e00b      	b.n	800849a <HAL_TIM_IC_Start_IT+0x142>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b08      	cmp	r3, #8
 8008486:	d104      	bne.n	8008492 <HAL_TIM_IC_Start_IT+0x13a>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008490:	e003      	b.n	800849a <HAL_TIM_IC_Start_IT+0x142>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2202      	movs	r2, #2
 8008496:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b0c      	cmp	r3, #12
 800849e:	d841      	bhi.n	8008524 <HAL_TIM_IC_Start_IT+0x1cc>
 80084a0:	a201      	add	r2, pc, #4	@ (adr r2, 80084a8 <HAL_TIM_IC_Start_IT+0x150>)
 80084a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a6:	bf00      	nop
 80084a8:	080084dd 	.word	0x080084dd
 80084ac:	08008525 	.word	0x08008525
 80084b0:	08008525 	.word	0x08008525
 80084b4:	08008525 	.word	0x08008525
 80084b8:	080084ef 	.word	0x080084ef
 80084bc:	08008525 	.word	0x08008525
 80084c0:	08008525 	.word	0x08008525
 80084c4:	08008525 	.word	0x08008525
 80084c8:	08008501 	.word	0x08008501
 80084cc:	08008525 	.word	0x08008525
 80084d0:	08008525 	.word	0x08008525
 80084d4:	08008525 	.word	0x08008525
 80084d8:	08008513 	.word	0x08008513
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f042 0202 	orr.w	r2, r2, #2
 80084ea:	60da      	str	r2, [r3, #12]
      break;
 80084ec:	e01d      	b.n	800852a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68da      	ldr	r2, [r3, #12]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f042 0204 	orr.w	r2, r2, #4
 80084fc:	60da      	str	r2, [r3, #12]
      break;
 80084fe:	e014      	b.n	800852a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f042 0208 	orr.w	r2, r2, #8
 800850e:	60da      	str	r2, [r3, #12]
      break;
 8008510:	e00b      	b.n	800852a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 0210 	orr.w	r2, r2, #16
 8008520:	60da      	str	r2, [r3, #12]
      break;
 8008522:	e002      	b.n	800852a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	73fb      	strb	r3, [r7, #15]
      break;
 8008528:	bf00      	nop
  }

  if (status == HAL_OK)
 800852a:	7bfb      	ldrb	r3, [r7, #15]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d14e      	bne.n	80085ce <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2201      	movs	r2, #1
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	4618      	mov	r0, r3
 800853a:	f001 fa79 	bl	8009a30 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a25      	ldr	r2, [pc, #148]	@ (80085d8 <HAL_TIM_IC_Start_IT+0x280>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d022      	beq.n	800858e <HAL_TIM_IC_Start_IT+0x236>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008550:	d01d      	beq.n	800858e <HAL_TIM_IC_Start_IT+0x236>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a21      	ldr	r2, [pc, #132]	@ (80085dc <HAL_TIM_IC_Start_IT+0x284>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d018      	beq.n	800858e <HAL_TIM_IC_Start_IT+0x236>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a1f      	ldr	r2, [pc, #124]	@ (80085e0 <HAL_TIM_IC_Start_IT+0x288>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d013      	beq.n	800858e <HAL_TIM_IC_Start_IT+0x236>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a1e      	ldr	r2, [pc, #120]	@ (80085e4 <HAL_TIM_IC_Start_IT+0x28c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d00e      	beq.n	800858e <HAL_TIM_IC_Start_IT+0x236>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a1c      	ldr	r2, [pc, #112]	@ (80085e8 <HAL_TIM_IC_Start_IT+0x290>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d009      	beq.n	800858e <HAL_TIM_IC_Start_IT+0x236>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a1b      	ldr	r2, [pc, #108]	@ (80085ec <HAL_TIM_IC_Start_IT+0x294>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d004      	beq.n	800858e <HAL_TIM_IC_Start_IT+0x236>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a19      	ldr	r2, [pc, #100]	@ (80085f0 <HAL_TIM_IC_Start_IT+0x298>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d115      	bne.n	80085ba <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	4b17      	ldr	r3, [pc, #92]	@ (80085f4 <HAL_TIM_IC_Start_IT+0x29c>)
 8008596:	4013      	ands	r3, r2
 8008598:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b06      	cmp	r3, #6
 800859e:	d015      	beq.n	80085cc <HAL_TIM_IC_Start_IT+0x274>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085a6:	d011      	beq.n	80085cc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f042 0201 	orr.w	r2, r2, #1
 80085b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085b8:	e008      	b.n	80085cc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f042 0201 	orr.w	r2, r2, #1
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	e000      	b.n	80085ce <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085cc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	40012c00 	.word	0x40012c00
 80085dc:	40000400 	.word	0x40000400
 80085e0:	40000800 	.word	0x40000800
 80085e4:	40000c00 	.word	0x40000c00
 80085e8:	40013400 	.word	0x40013400
 80085ec:	40014000 	.word	0x40014000
 80085f0:	40015000 	.word	0x40015000
 80085f4:	00010007 	.word	0x00010007

080085f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d020      	beq.n	800865c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d01b      	beq.n	800865c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f06f 0202 	mvn.w	r2, #2
 800862c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	f003 0303 	and.w	r3, r3, #3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7fa f9a4 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 8008648:	e005      	b.n	8008656 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fc2e 	bl	8008eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fc35 	bl	8008ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 0304 	and.w	r3, r3, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	d020      	beq.n	80086a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01b      	beq.n	80086a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f06f 0204 	mvn.w	r2, #4
 8008678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7fa f97e 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 8008694:	e005      	b.n	80086a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fc08 	bl	8008eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fc0f 	bl	8008ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f003 0308 	and.w	r3, r3, #8
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d020      	beq.n	80086f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f003 0308 	and.w	r3, r3, #8
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01b      	beq.n	80086f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f06f 0208 	mvn.w	r2, #8
 80086c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2204      	movs	r2, #4
 80086ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7fa f958 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 80086e0:	e005      	b.n	80086ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fbe2 	bl	8008eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fbe9 	bl	8008ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f003 0310 	and.w	r3, r3, #16
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d020      	beq.n	8008740 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f003 0310 	and.w	r3, r3, #16
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01b      	beq.n	8008740 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f06f 0210 	mvn.w	r2, #16
 8008710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2208      	movs	r2, #8
 8008716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7fa f932 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 800872c:	e005      	b.n	800873a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fbbc 	bl	8008eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fbc3 	bl	8008ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00c      	beq.n	8008764 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	d007      	beq.n	8008764 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f06f 0201 	mvn.w	r2, #1
 800875c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7fa f898 	bl	8002894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800876a:	2b00      	cmp	r3, #0
 800876c:	d104      	bne.n	8008778 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00c      	beq.n	8008792 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800877e:	2b00      	cmp	r3, #0
 8008780:	d007      	beq.n	8008792 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800878a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 faa9 	bl	8009ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00c      	beq.n	80087b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d007      	beq.n	80087b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80087ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f001 faa1 	bl	8009cf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00c      	beq.n	80087da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d007      	beq.n	80087da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80087d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fb7d 	bl	8008ed4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f003 0320 	and.w	r3, r3, #32
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00c      	beq.n	80087fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d007      	beq.n	80087fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f06f 0220 	mvn.w	r2, #32
 80087f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 fa69 	bl	8009cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00c      	beq.n	8008822 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800881a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 fa75 	bl	8009d0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00c      	beq.n	8008846 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d007      	beq.n	8008846 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800883e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 fa6d 	bl	8009d20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00c      	beq.n	800886a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d007      	beq.n	800886a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f001 fa65 	bl	8009d34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00c      	beq.n	800888e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d007      	beq.n	800888e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 fa5d 	bl	8009d48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b086      	sub	sp, #24
 800889a:	af00      	add	r7, sp, #0
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d101      	bne.n	80088b4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80088b0:	2302      	movs	r3, #2
 80088b2:	e088      	b.n	80089c6 <HAL_TIM_IC_ConfigChannel+0x130>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d11b      	bne.n	80088fa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80088d2:	f000 fee7 	bl	80096a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699a      	ldr	r2, [r3, #24]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 020c 	bic.w	r2, r2, #12
 80088e4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6999      	ldr	r1, [r3, #24]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	619a      	str	r2, [r3, #24]
 80088f8:	e060      	b.n	80089bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b04      	cmp	r3, #4
 80088fe:	d11c      	bne.n	800893a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008910:	f000 ff6b 	bl	80097ea <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	699a      	ldr	r2, [r3, #24]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008922:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6999      	ldr	r1, [r3, #24]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	021a      	lsls	r2, r3, #8
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	619a      	str	r2, [r3, #24]
 8008938:	e040      	b.n	80089bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b08      	cmp	r3, #8
 800893e:	d11b      	bne.n	8008978 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008950:	f000 ffb8 	bl	80098c4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	69da      	ldr	r2, [r3, #28]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f022 020c 	bic.w	r2, r2, #12
 8008962:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	69d9      	ldr	r1, [r3, #28]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	689a      	ldr	r2, [r3, #8]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	61da      	str	r2, [r3, #28]
 8008976:	e021      	b.n	80089bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b0c      	cmp	r3, #12
 800897c:	d11c      	bne.n	80089b8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800898e:	f000 ffd5 	bl	800993c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	69da      	ldr	r2, [r3, #28]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80089a0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	69d9      	ldr	r1, [r3, #28]
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	021a      	lsls	r2, r3, #8
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	61da      	str	r2, [r3, #28]
 80089b6:	e001      	b.n	80089bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
	...

080089d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d101      	bne.n	80089ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80089ea:	2302      	movs	r3, #2
 80089ec:	e0ff      	b.n	8008bee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b14      	cmp	r3, #20
 80089fa:	f200 80f0 	bhi.w	8008bde <HAL_TIM_PWM_ConfigChannel+0x20e>
 80089fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008a04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a59 	.word	0x08008a59
 8008a08:	08008bdf 	.word	0x08008bdf
 8008a0c:	08008bdf 	.word	0x08008bdf
 8008a10:	08008bdf 	.word	0x08008bdf
 8008a14:	08008a99 	.word	0x08008a99
 8008a18:	08008bdf 	.word	0x08008bdf
 8008a1c:	08008bdf 	.word	0x08008bdf
 8008a20:	08008bdf 	.word	0x08008bdf
 8008a24:	08008adb 	.word	0x08008adb
 8008a28:	08008bdf 	.word	0x08008bdf
 8008a2c:	08008bdf 	.word	0x08008bdf
 8008a30:	08008bdf 	.word	0x08008bdf
 8008a34:	08008b1b 	.word	0x08008b1b
 8008a38:	08008bdf 	.word	0x08008bdf
 8008a3c:	08008bdf 	.word	0x08008bdf
 8008a40:	08008bdf 	.word	0x08008bdf
 8008a44:	08008b5d 	.word	0x08008b5d
 8008a48:	08008bdf 	.word	0x08008bdf
 8008a4c:	08008bdf 	.word	0x08008bdf
 8008a50:	08008bdf 	.word	0x08008bdf
 8008a54:	08008b9d 	.word	0x08008b9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68b9      	ldr	r1, [r7, #8]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 faf6 	bl	8009050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	699a      	ldr	r2, [r3, #24]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f042 0208 	orr.w	r2, r2, #8
 8008a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	699a      	ldr	r2, [r3, #24]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0204 	bic.w	r2, r2, #4
 8008a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6999      	ldr	r1, [r3, #24]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	691a      	ldr	r2, [r3, #16]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	619a      	str	r2, [r3, #24]
      break;
 8008a96:	e0a5      	b.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68b9      	ldr	r1, [r7, #8]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 fb70 	bl	8009184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	699a      	ldr	r2, [r3, #24]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	699a      	ldr	r2, [r3, #24]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6999      	ldr	r1, [r3, #24]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	021a      	lsls	r2, r3, #8
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	430a      	orrs	r2, r1
 8008ad6:	619a      	str	r2, [r3, #24]
      break;
 8008ad8:	e084      	b.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68b9      	ldr	r1, [r7, #8]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 fbe3 	bl	80092ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	69da      	ldr	r2, [r3, #28]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f042 0208 	orr.w	r2, r2, #8
 8008af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	69da      	ldr	r2, [r3, #28]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 0204 	bic.w	r2, r2, #4
 8008b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	69d9      	ldr	r1, [r3, #28]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	61da      	str	r2, [r3, #28]
      break;
 8008b18:	e064      	b.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68b9      	ldr	r1, [r7, #8]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 fc55 	bl	80093d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	69da      	ldr	r2, [r3, #28]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	69da      	ldr	r2, [r3, #28]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	69d9      	ldr	r1, [r3, #28]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	021a      	lsls	r2, r3, #8
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	61da      	str	r2, [r3, #28]
      break;
 8008b5a:	e043      	b.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68b9      	ldr	r1, [r7, #8]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 fcc8 	bl	80094f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0208 	orr.w	r2, r2, #8
 8008b76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f022 0204 	bic.w	r2, r2, #4
 8008b86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	691a      	ldr	r2, [r3, #16]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b9a:	e023      	b.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fd12 	bl	80095cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bb6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bc6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	021a      	lsls	r2, r3, #8
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008bdc:	e002      	b.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	75fb      	strb	r3, [r7, #23]
      break;
 8008be2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop

08008bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_TIM_ConfigClockSource+0x1c>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e0f6      	b.n	8008e02 <HAL_TIM_ConfigClockSource+0x20a>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008c32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a6f      	ldr	r2, [pc, #444]	@ (8008e0c <HAL_TIM_ConfigClockSource+0x214>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	f000 80c1 	beq.w	8008dd6 <HAL_TIM_ConfigClockSource+0x1de>
 8008c54:	4a6d      	ldr	r2, [pc, #436]	@ (8008e0c <HAL_TIM_ConfigClockSource+0x214>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	f200 80c6 	bhi.w	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c5c:	4a6c      	ldr	r2, [pc, #432]	@ (8008e10 <HAL_TIM_ConfigClockSource+0x218>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	f000 80b9 	beq.w	8008dd6 <HAL_TIM_ConfigClockSource+0x1de>
 8008c64:	4a6a      	ldr	r2, [pc, #424]	@ (8008e10 <HAL_TIM_ConfigClockSource+0x218>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	f200 80be 	bhi.w	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c6c:	4a69      	ldr	r2, [pc, #420]	@ (8008e14 <HAL_TIM_ConfigClockSource+0x21c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	f000 80b1 	beq.w	8008dd6 <HAL_TIM_ConfigClockSource+0x1de>
 8008c74:	4a67      	ldr	r2, [pc, #412]	@ (8008e14 <HAL_TIM_ConfigClockSource+0x21c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	f200 80b6 	bhi.w	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c7c:	4a66      	ldr	r2, [pc, #408]	@ (8008e18 <HAL_TIM_ConfigClockSource+0x220>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	f000 80a9 	beq.w	8008dd6 <HAL_TIM_ConfigClockSource+0x1de>
 8008c84:	4a64      	ldr	r2, [pc, #400]	@ (8008e18 <HAL_TIM_ConfigClockSource+0x220>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	f200 80ae 	bhi.w	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c8c:	4a63      	ldr	r2, [pc, #396]	@ (8008e1c <HAL_TIM_ConfigClockSource+0x224>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	f000 80a1 	beq.w	8008dd6 <HAL_TIM_ConfigClockSource+0x1de>
 8008c94:	4a61      	ldr	r2, [pc, #388]	@ (8008e1c <HAL_TIM_ConfigClockSource+0x224>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	f200 80a6 	bhi.w	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c9c:	4a60      	ldr	r2, [pc, #384]	@ (8008e20 <HAL_TIM_ConfigClockSource+0x228>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	f000 8099 	beq.w	8008dd6 <HAL_TIM_ConfigClockSource+0x1de>
 8008ca4:	4a5e      	ldr	r2, [pc, #376]	@ (8008e20 <HAL_TIM_ConfigClockSource+0x228>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	f200 809e 	bhi.w	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008cb0:	f000 8091 	beq.w	8008dd6 <HAL_TIM_ConfigClockSource+0x1de>
 8008cb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008cb8:	f200 8096 	bhi.w	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cc0:	f000 8089 	beq.w	8008dd6 <HAL_TIM_ConfigClockSource+0x1de>
 8008cc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cc8:	f200 808e 	bhi.w	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cd0:	d03e      	beq.n	8008d50 <HAL_TIM_ConfigClockSource+0x158>
 8008cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cd6:	f200 8087 	bhi.w	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cde:	f000 8086 	beq.w	8008dee <HAL_TIM_ConfigClockSource+0x1f6>
 8008ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ce6:	d87f      	bhi.n	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ce8:	2b70      	cmp	r3, #112	@ 0x70
 8008cea:	d01a      	beq.n	8008d22 <HAL_TIM_ConfigClockSource+0x12a>
 8008cec:	2b70      	cmp	r3, #112	@ 0x70
 8008cee:	d87b      	bhi.n	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cf0:	2b60      	cmp	r3, #96	@ 0x60
 8008cf2:	d050      	beq.n	8008d96 <HAL_TIM_ConfigClockSource+0x19e>
 8008cf4:	2b60      	cmp	r3, #96	@ 0x60
 8008cf6:	d877      	bhi.n	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cf8:	2b50      	cmp	r3, #80	@ 0x50
 8008cfa:	d03c      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x17e>
 8008cfc:	2b50      	cmp	r3, #80	@ 0x50
 8008cfe:	d873      	bhi.n	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d00:	2b40      	cmp	r3, #64	@ 0x40
 8008d02:	d058      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0x1be>
 8008d04:	2b40      	cmp	r3, #64	@ 0x40
 8008d06:	d86f      	bhi.n	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d08:	2b30      	cmp	r3, #48	@ 0x30
 8008d0a:	d064      	beq.n	8008dd6 <HAL_TIM_ConfigClockSource+0x1de>
 8008d0c:	2b30      	cmp	r3, #48	@ 0x30
 8008d0e:	d86b      	bhi.n	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d10:	2b20      	cmp	r3, #32
 8008d12:	d060      	beq.n	8008dd6 <HAL_TIM_ConfigClockSource+0x1de>
 8008d14:	2b20      	cmp	r3, #32
 8008d16:	d867      	bhi.n	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d05c      	beq.n	8008dd6 <HAL_TIM_ConfigClockSource+0x1de>
 8008d1c:	2b10      	cmp	r3, #16
 8008d1e:	d05a      	beq.n	8008dd6 <HAL_TIM_ConfigClockSource+0x1de>
 8008d20:	e062      	b.n	8008de8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d32:	f000 fe5d 	bl	80099f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008d44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	609a      	str	r2, [r3, #8]
      break;
 8008d4e:	e04f      	b.n	8008df0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d60:	f000 fe46 	bl	80099f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689a      	ldr	r2, [r3, #8]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d72:	609a      	str	r2, [r3, #8]
      break;
 8008d74:	e03c      	b.n	8008df0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d82:	461a      	mov	r2, r3
 8008d84:	f000 fd02 	bl	800978c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2150      	movs	r1, #80	@ 0x50
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fe11 	bl	80099b6 <TIM_ITRx_SetConfig>
      break;
 8008d94:	e02c      	b.n	8008df0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008da2:	461a      	mov	r2, r3
 8008da4:	f000 fd5e 	bl	8009864 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2160      	movs	r1, #96	@ 0x60
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fe01 	bl	80099b6 <TIM_ITRx_SetConfig>
      break;
 8008db4:	e01c      	b.n	8008df0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	f000 fce2 	bl	800978c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2140      	movs	r1, #64	@ 0x40
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 fdf1 	bl	80099b6 <TIM_ITRx_SetConfig>
      break;
 8008dd4:	e00c      	b.n	8008df0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4619      	mov	r1, r3
 8008de0:	4610      	mov	r0, r2
 8008de2:	f000 fde8 	bl	80099b6 <TIM_ITRx_SetConfig>
      break;
 8008de6:	e003      	b.n	8008df0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	73fb      	strb	r3, [r7, #15]
      break;
 8008dec:	e000      	b.n	8008df0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008dee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	00100070 	.word	0x00100070
 8008e10:	00100060 	.word	0x00100060
 8008e14:	00100050 	.word	0x00100050
 8008e18:	00100040 	.word	0x00100040
 8008e1c:	00100030 	.word	0x00100030
 8008e20:	00100020 	.word	0x00100020

08008e24 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b0c      	cmp	r3, #12
 8008e36:	d831      	bhi.n	8008e9c <HAL_TIM_ReadCapturedValue+0x78>
 8008e38:	a201      	add	r2, pc, #4	@ (adr r2, 8008e40 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3e:	bf00      	nop
 8008e40:	08008e75 	.word	0x08008e75
 8008e44:	08008e9d 	.word	0x08008e9d
 8008e48:	08008e9d 	.word	0x08008e9d
 8008e4c:	08008e9d 	.word	0x08008e9d
 8008e50:	08008e7f 	.word	0x08008e7f
 8008e54:	08008e9d 	.word	0x08008e9d
 8008e58:	08008e9d 	.word	0x08008e9d
 8008e5c:	08008e9d 	.word	0x08008e9d
 8008e60:	08008e89 	.word	0x08008e89
 8008e64:	08008e9d 	.word	0x08008e9d
 8008e68:	08008e9d 	.word	0x08008e9d
 8008e6c:	08008e9d 	.word	0x08008e9d
 8008e70:	08008e93 	.word	0x08008e93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e7a:	60fb      	str	r3, [r7, #12]

      break;
 8008e7c:	e00f      	b.n	8008e9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e84:	60fb      	str	r3, [r7, #12]

      break;
 8008e86:	e00a      	b.n	8008e9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e8e:	60fb      	str	r3, [r7, #12]

      break;
 8008e90:	e005      	b.n	8008e9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e98:	60fb      	str	r3, [r7, #12]

      break;
 8008e9a:	e000      	b.n	8008e9e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008e9c:	bf00      	nop
  }

  return tmpreg;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a4c      	ldr	r2, [pc, #304]	@ (800902c <TIM_Base_SetConfig+0x144>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d017      	beq.n	8008f30 <TIM_Base_SetConfig+0x48>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f06:	d013      	beq.n	8008f30 <TIM_Base_SetConfig+0x48>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a49      	ldr	r2, [pc, #292]	@ (8009030 <TIM_Base_SetConfig+0x148>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d00f      	beq.n	8008f30 <TIM_Base_SetConfig+0x48>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a48      	ldr	r2, [pc, #288]	@ (8009034 <TIM_Base_SetConfig+0x14c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d00b      	beq.n	8008f30 <TIM_Base_SetConfig+0x48>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a47      	ldr	r2, [pc, #284]	@ (8009038 <TIM_Base_SetConfig+0x150>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d007      	beq.n	8008f30 <TIM_Base_SetConfig+0x48>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a46      	ldr	r2, [pc, #280]	@ (800903c <TIM_Base_SetConfig+0x154>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d003      	beq.n	8008f30 <TIM_Base_SetConfig+0x48>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a45      	ldr	r2, [pc, #276]	@ (8009040 <TIM_Base_SetConfig+0x158>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d108      	bne.n	8008f42 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a39      	ldr	r2, [pc, #228]	@ (800902c <TIM_Base_SetConfig+0x144>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d023      	beq.n	8008f92 <TIM_Base_SetConfig+0xaa>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f50:	d01f      	beq.n	8008f92 <TIM_Base_SetConfig+0xaa>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a36      	ldr	r2, [pc, #216]	@ (8009030 <TIM_Base_SetConfig+0x148>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d01b      	beq.n	8008f92 <TIM_Base_SetConfig+0xaa>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a35      	ldr	r2, [pc, #212]	@ (8009034 <TIM_Base_SetConfig+0x14c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d017      	beq.n	8008f92 <TIM_Base_SetConfig+0xaa>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a34      	ldr	r2, [pc, #208]	@ (8009038 <TIM_Base_SetConfig+0x150>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d013      	beq.n	8008f92 <TIM_Base_SetConfig+0xaa>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a33      	ldr	r2, [pc, #204]	@ (800903c <TIM_Base_SetConfig+0x154>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d00f      	beq.n	8008f92 <TIM_Base_SetConfig+0xaa>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a33      	ldr	r2, [pc, #204]	@ (8009044 <TIM_Base_SetConfig+0x15c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d00b      	beq.n	8008f92 <TIM_Base_SetConfig+0xaa>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a32      	ldr	r2, [pc, #200]	@ (8009048 <TIM_Base_SetConfig+0x160>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d007      	beq.n	8008f92 <TIM_Base_SetConfig+0xaa>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a31      	ldr	r2, [pc, #196]	@ (800904c <TIM_Base_SetConfig+0x164>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d003      	beq.n	8008f92 <TIM_Base_SetConfig+0xaa>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8009040 <TIM_Base_SetConfig+0x158>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d108      	bne.n	8008fa4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	689a      	ldr	r2, [r3, #8]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a18      	ldr	r2, [pc, #96]	@ (800902c <TIM_Base_SetConfig+0x144>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d013      	beq.n	8008ff8 <TIM_Base_SetConfig+0x110>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800903c <TIM_Base_SetConfig+0x154>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d00f      	beq.n	8008ff8 <TIM_Base_SetConfig+0x110>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a1a      	ldr	r2, [pc, #104]	@ (8009044 <TIM_Base_SetConfig+0x15c>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d00b      	beq.n	8008ff8 <TIM_Base_SetConfig+0x110>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a19      	ldr	r2, [pc, #100]	@ (8009048 <TIM_Base_SetConfig+0x160>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d007      	beq.n	8008ff8 <TIM_Base_SetConfig+0x110>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a18      	ldr	r2, [pc, #96]	@ (800904c <TIM_Base_SetConfig+0x164>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d003      	beq.n	8008ff8 <TIM_Base_SetConfig+0x110>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a13      	ldr	r2, [pc, #76]	@ (8009040 <TIM_Base_SetConfig+0x158>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d103      	bne.n	8009000 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	691a      	ldr	r2, [r3, #16]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b01      	cmp	r3, #1
 8009010:	d105      	bne.n	800901e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	f023 0201 	bic.w	r2, r3, #1
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	611a      	str	r2, [r3, #16]
  }
}
 800901e:	bf00      	nop
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	40012c00 	.word	0x40012c00
 8009030:	40000400 	.word	0x40000400
 8009034:	40000800 	.word	0x40000800
 8009038:	40000c00 	.word	0x40000c00
 800903c:	40013400 	.word	0x40013400
 8009040:	40015000 	.word	0x40015000
 8009044:	40014000 	.word	0x40014000
 8009048:	40014400 	.word	0x40014400
 800904c:	40014800 	.word	0x40014800

08009050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009050:	b480      	push	{r7}
 8009052:	b087      	sub	sp, #28
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	f023 0201 	bic.w	r2, r3, #1
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800907e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 0303 	bic.w	r3, r3, #3
 800908a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	4313      	orrs	r3, r2
 8009094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f023 0302 	bic.w	r3, r3, #2
 800909c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a30      	ldr	r2, [pc, #192]	@ (800916c <TIM_OC1_SetConfig+0x11c>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d013      	beq.n	80090d8 <TIM_OC1_SetConfig+0x88>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a2f      	ldr	r2, [pc, #188]	@ (8009170 <TIM_OC1_SetConfig+0x120>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00f      	beq.n	80090d8 <TIM_OC1_SetConfig+0x88>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a2e      	ldr	r2, [pc, #184]	@ (8009174 <TIM_OC1_SetConfig+0x124>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d00b      	beq.n	80090d8 <TIM_OC1_SetConfig+0x88>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a2d      	ldr	r2, [pc, #180]	@ (8009178 <TIM_OC1_SetConfig+0x128>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d007      	beq.n	80090d8 <TIM_OC1_SetConfig+0x88>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a2c      	ldr	r2, [pc, #176]	@ (800917c <TIM_OC1_SetConfig+0x12c>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d003      	beq.n	80090d8 <TIM_OC1_SetConfig+0x88>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a2b      	ldr	r2, [pc, #172]	@ (8009180 <TIM_OC1_SetConfig+0x130>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d10c      	bne.n	80090f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	f023 0308 	bic.w	r3, r3, #8
 80090de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f023 0304 	bic.w	r3, r3, #4
 80090f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a1d      	ldr	r2, [pc, #116]	@ (800916c <TIM_OC1_SetConfig+0x11c>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d013      	beq.n	8009122 <TIM_OC1_SetConfig+0xd2>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a1c      	ldr	r2, [pc, #112]	@ (8009170 <TIM_OC1_SetConfig+0x120>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d00f      	beq.n	8009122 <TIM_OC1_SetConfig+0xd2>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a1b      	ldr	r2, [pc, #108]	@ (8009174 <TIM_OC1_SetConfig+0x124>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d00b      	beq.n	8009122 <TIM_OC1_SetConfig+0xd2>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a1a      	ldr	r2, [pc, #104]	@ (8009178 <TIM_OC1_SetConfig+0x128>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d007      	beq.n	8009122 <TIM_OC1_SetConfig+0xd2>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a19      	ldr	r2, [pc, #100]	@ (800917c <TIM_OC1_SetConfig+0x12c>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d003      	beq.n	8009122 <TIM_OC1_SetConfig+0xd2>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a18      	ldr	r2, [pc, #96]	@ (8009180 <TIM_OC1_SetConfig+0x130>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d111      	bne.n	8009146 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	4313      	orrs	r3, r2
 800913a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	4313      	orrs	r3, r2
 8009144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	693a      	ldr	r2, [r7, #16]
 800914a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	621a      	str	r2, [r3, #32]
}
 8009160:	bf00      	nop
 8009162:	371c      	adds	r7, #28
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	40012c00 	.word	0x40012c00
 8009170:	40013400 	.word	0x40013400
 8009174:	40014000 	.word	0x40014000
 8009178:	40014400 	.word	0x40014400
 800917c:	40014800 	.word	0x40014800
 8009180:	40015000 	.word	0x40015000

08009184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	f023 0210 	bic.w	r2, r3, #16
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80091b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	021b      	lsls	r3, r3, #8
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f023 0320 	bic.w	r3, r3, #32
 80091d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	011b      	lsls	r3, r3, #4
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	4313      	orrs	r3, r2
 80091de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a2c      	ldr	r2, [pc, #176]	@ (8009294 <TIM_OC2_SetConfig+0x110>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d007      	beq.n	80091f8 <TIM_OC2_SetConfig+0x74>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a2b      	ldr	r2, [pc, #172]	@ (8009298 <TIM_OC2_SetConfig+0x114>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d003      	beq.n	80091f8 <TIM_OC2_SetConfig+0x74>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a2a      	ldr	r2, [pc, #168]	@ (800929c <TIM_OC2_SetConfig+0x118>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d10d      	bne.n	8009214 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	4313      	orrs	r3, r2
 800920a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009212:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a1f      	ldr	r2, [pc, #124]	@ (8009294 <TIM_OC2_SetConfig+0x110>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d013      	beq.n	8009244 <TIM_OC2_SetConfig+0xc0>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a1e      	ldr	r2, [pc, #120]	@ (8009298 <TIM_OC2_SetConfig+0x114>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d00f      	beq.n	8009244 <TIM_OC2_SetConfig+0xc0>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a1e      	ldr	r2, [pc, #120]	@ (80092a0 <TIM_OC2_SetConfig+0x11c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d00b      	beq.n	8009244 <TIM_OC2_SetConfig+0xc0>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a1d      	ldr	r2, [pc, #116]	@ (80092a4 <TIM_OC2_SetConfig+0x120>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d007      	beq.n	8009244 <TIM_OC2_SetConfig+0xc0>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a1c      	ldr	r2, [pc, #112]	@ (80092a8 <TIM_OC2_SetConfig+0x124>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d003      	beq.n	8009244 <TIM_OC2_SetConfig+0xc0>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a17      	ldr	r2, [pc, #92]	@ (800929c <TIM_OC2_SetConfig+0x118>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d113      	bne.n	800926c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800924a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009252:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	4313      	orrs	r3, r2
 800925e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	4313      	orrs	r3, r2
 800926a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	621a      	str	r2, [r3, #32]
}
 8009286:	bf00      	nop
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	40012c00 	.word	0x40012c00
 8009298:	40013400 	.word	0x40013400
 800929c:	40015000 	.word	0x40015000
 80092a0:	40014000 	.word	0x40014000
 80092a4:	40014400 	.word	0x40014400
 80092a8:	40014800 	.word	0x40014800

080092ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f023 0303 	bic.w	r3, r3, #3
 80092e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80092f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	021b      	lsls	r3, r3, #8
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	4313      	orrs	r3, r2
 8009304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a2b      	ldr	r2, [pc, #172]	@ (80093b8 <TIM_OC3_SetConfig+0x10c>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d007      	beq.n	800931e <TIM_OC3_SetConfig+0x72>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a2a      	ldr	r2, [pc, #168]	@ (80093bc <TIM_OC3_SetConfig+0x110>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d003      	beq.n	800931e <TIM_OC3_SetConfig+0x72>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a29      	ldr	r2, [pc, #164]	@ (80093c0 <TIM_OC3_SetConfig+0x114>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d10d      	bne.n	800933a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	021b      	lsls	r3, r3, #8
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	4313      	orrs	r3, r2
 8009330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a1e      	ldr	r2, [pc, #120]	@ (80093b8 <TIM_OC3_SetConfig+0x10c>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d013      	beq.n	800936a <TIM_OC3_SetConfig+0xbe>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a1d      	ldr	r2, [pc, #116]	@ (80093bc <TIM_OC3_SetConfig+0x110>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d00f      	beq.n	800936a <TIM_OC3_SetConfig+0xbe>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a1d      	ldr	r2, [pc, #116]	@ (80093c4 <TIM_OC3_SetConfig+0x118>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d00b      	beq.n	800936a <TIM_OC3_SetConfig+0xbe>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a1c      	ldr	r2, [pc, #112]	@ (80093c8 <TIM_OC3_SetConfig+0x11c>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d007      	beq.n	800936a <TIM_OC3_SetConfig+0xbe>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a1b      	ldr	r2, [pc, #108]	@ (80093cc <TIM_OC3_SetConfig+0x120>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d003      	beq.n	800936a <TIM_OC3_SetConfig+0xbe>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a16      	ldr	r2, [pc, #88]	@ (80093c0 <TIM_OC3_SetConfig+0x114>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d113      	bne.n	8009392 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	011b      	lsls	r3, r3, #4
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	4313      	orrs	r3, r2
 8009384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	011b      	lsls	r3, r3, #4
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	4313      	orrs	r3, r2
 8009390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	621a      	str	r2, [r3, #32]
}
 80093ac:	bf00      	nop
 80093ae:	371c      	adds	r7, #28
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	40012c00 	.word	0x40012c00
 80093bc:	40013400 	.word	0x40013400
 80093c0:	40015000 	.word	0x40015000
 80093c4:	40014000 	.word	0x40014000
 80093c8:	40014400 	.word	0x40014400
 80093cc:	40014800 	.word	0x40014800

080093d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a1b      	ldr	r3, [r3, #32]
 80093e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800940a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	021b      	lsls	r3, r3, #8
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	4313      	orrs	r3, r2
 8009416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800941e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	031b      	lsls	r3, r3, #12
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	4313      	orrs	r3, r2
 800942a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a2c      	ldr	r2, [pc, #176]	@ (80094e0 <TIM_OC4_SetConfig+0x110>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d007      	beq.n	8009444 <TIM_OC4_SetConfig+0x74>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a2b      	ldr	r2, [pc, #172]	@ (80094e4 <TIM_OC4_SetConfig+0x114>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d003      	beq.n	8009444 <TIM_OC4_SetConfig+0x74>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a2a      	ldr	r2, [pc, #168]	@ (80094e8 <TIM_OC4_SetConfig+0x118>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d10d      	bne.n	8009460 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800944a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	031b      	lsls	r3, r3, #12
 8009452:	697a      	ldr	r2, [r7, #20]
 8009454:	4313      	orrs	r3, r2
 8009456:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800945e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a1f      	ldr	r2, [pc, #124]	@ (80094e0 <TIM_OC4_SetConfig+0x110>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d013      	beq.n	8009490 <TIM_OC4_SetConfig+0xc0>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a1e      	ldr	r2, [pc, #120]	@ (80094e4 <TIM_OC4_SetConfig+0x114>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d00f      	beq.n	8009490 <TIM_OC4_SetConfig+0xc0>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a1e      	ldr	r2, [pc, #120]	@ (80094ec <TIM_OC4_SetConfig+0x11c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d00b      	beq.n	8009490 <TIM_OC4_SetConfig+0xc0>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a1d      	ldr	r2, [pc, #116]	@ (80094f0 <TIM_OC4_SetConfig+0x120>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d007      	beq.n	8009490 <TIM_OC4_SetConfig+0xc0>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a1c      	ldr	r2, [pc, #112]	@ (80094f4 <TIM_OC4_SetConfig+0x124>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d003      	beq.n	8009490 <TIM_OC4_SetConfig+0xc0>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a17      	ldr	r2, [pc, #92]	@ (80094e8 <TIM_OC4_SetConfig+0x118>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d113      	bne.n	80094b8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009496:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800949e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	019b      	lsls	r3, r3, #6
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	019b      	lsls	r3, r3, #6
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	621a      	str	r2, [r3, #32]
}
 80094d2:	bf00      	nop
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	40012c00 	.word	0x40012c00
 80094e4:	40013400 	.word	0x40013400
 80094e8:	40015000 	.word	0x40015000
 80094ec:	40014000 	.word	0x40014000
 80094f0:	40014400 	.word	0x40014400
 80094f4:	40014800 	.word	0x40014800

080094f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b087      	sub	sp, #28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800951e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800952a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4313      	orrs	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800953c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	041b      	lsls	r3, r3, #16
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	4313      	orrs	r3, r2
 8009548:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a19      	ldr	r2, [pc, #100]	@ (80095b4 <TIM_OC5_SetConfig+0xbc>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d013      	beq.n	800957a <TIM_OC5_SetConfig+0x82>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a18      	ldr	r2, [pc, #96]	@ (80095b8 <TIM_OC5_SetConfig+0xc0>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d00f      	beq.n	800957a <TIM_OC5_SetConfig+0x82>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a17      	ldr	r2, [pc, #92]	@ (80095bc <TIM_OC5_SetConfig+0xc4>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d00b      	beq.n	800957a <TIM_OC5_SetConfig+0x82>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a16      	ldr	r2, [pc, #88]	@ (80095c0 <TIM_OC5_SetConfig+0xc8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d007      	beq.n	800957a <TIM_OC5_SetConfig+0x82>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a15      	ldr	r2, [pc, #84]	@ (80095c4 <TIM_OC5_SetConfig+0xcc>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d003      	beq.n	800957a <TIM_OC5_SetConfig+0x82>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a14      	ldr	r2, [pc, #80]	@ (80095c8 <TIM_OC5_SetConfig+0xd0>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d109      	bne.n	800958e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009580:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	021b      	lsls	r3, r3, #8
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	4313      	orrs	r3, r2
 800958c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	621a      	str	r2, [r3, #32]
}
 80095a8:	bf00      	nop
 80095aa:	371c      	adds	r7, #28
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	40012c00 	.word	0x40012c00
 80095b8:	40013400 	.word	0x40013400
 80095bc:	40014000 	.word	0x40014000
 80095c0:	40014400 	.word	0x40014400
 80095c4:	40014800 	.word	0x40014800
 80095c8:	40015000 	.word	0x40015000

080095cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	021b      	lsls	r3, r3, #8
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	4313      	orrs	r3, r2
 800960a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	051b      	lsls	r3, r3, #20
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	4313      	orrs	r3, r2
 800961e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a1a      	ldr	r2, [pc, #104]	@ (800968c <TIM_OC6_SetConfig+0xc0>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d013      	beq.n	8009650 <TIM_OC6_SetConfig+0x84>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a19      	ldr	r2, [pc, #100]	@ (8009690 <TIM_OC6_SetConfig+0xc4>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d00f      	beq.n	8009650 <TIM_OC6_SetConfig+0x84>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a18      	ldr	r2, [pc, #96]	@ (8009694 <TIM_OC6_SetConfig+0xc8>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d00b      	beq.n	8009650 <TIM_OC6_SetConfig+0x84>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a17      	ldr	r2, [pc, #92]	@ (8009698 <TIM_OC6_SetConfig+0xcc>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d007      	beq.n	8009650 <TIM_OC6_SetConfig+0x84>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a16      	ldr	r2, [pc, #88]	@ (800969c <TIM_OC6_SetConfig+0xd0>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d003      	beq.n	8009650 <TIM_OC6_SetConfig+0x84>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a15      	ldr	r2, [pc, #84]	@ (80096a0 <TIM_OC6_SetConfig+0xd4>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d109      	bne.n	8009664 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009656:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	029b      	lsls	r3, r3, #10
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	4313      	orrs	r3, r2
 8009662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	621a      	str	r2, [r3, #32]
}
 800967e:	bf00      	nop
 8009680:	371c      	adds	r7, #28
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	40012c00 	.word	0x40012c00
 8009690:	40013400 	.word	0x40013400
 8009694:	40014000 	.word	0x40014000
 8009698:	40014400 	.word	0x40014400
 800969c:	40014800 	.word	0x40014800
 80096a0:	40015000 	.word	0x40015000

080096a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b087      	sub	sp, #28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6a1b      	ldr	r3, [r3, #32]
 80096bc:	f023 0201 	bic.w	r2, r3, #1
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	4a28      	ldr	r2, [pc, #160]	@ (8009770 <TIM_TI1_SetConfig+0xcc>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d01b      	beq.n	800970a <TIM_TI1_SetConfig+0x66>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096d8:	d017      	beq.n	800970a <TIM_TI1_SetConfig+0x66>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4a25      	ldr	r2, [pc, #148]	@ (8009774 <TIM_TI1_SetConfig+0xd0>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d013      	beq.n	800970a <TIM_TI1_SetConfig+0x66>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4a24      	ldr	r2, [pc, #144]	@ (8009778 <TIM_TI1_SetConfig+0xd4>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d00f      	beq.n	800970a <TIM_TI1_SetConfig+0x66>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4a23      	ldr	r2, [pc, #140]	@ (800977c <TIM_TI1_SetConfig+0xd8>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00b      	beq.n	800970a <TIM_TI1_SetConfig+0x66>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	4a22      	ldr	r2, [pc, #136]	@ (8009780 <TIM_TI1_SetConfig+0xdc>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d007      	beq.n	800970a <TIM_TI1_SetConfig+0x66>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	4a21      	ldr	r2, [pc, #132]	@ (8009784 <TIM_TI1_SetConfig+0xe0>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d003      	beq.n	800970a <TIM_TI1_SetConfig+0x66>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	4a20      	ldr	r2, [pc, #128]	@ (8009788 <TIM_TI1_SetConfig+0xe4>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d101      	bne.n	800970e <TIM_TI1_SetConfig+0x6a>
 800970a:	2301      	movs	r3, #1
 800970c:	e000      	b.n	8009710 <TIM_TI1_SetConfig+0x6c>
 800970e:	2300      	movs	r3, #0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d008      	beq.n	8009726 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	f023 0303 	bic.w	r3, r3, #3
 800971a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4313      	orrs	r3, r2
 8009722:	617b      	str	r3, [r7, #20]
 8009724:	e003      	b.n	800972e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f043 0301 	orr.w	r3, r3, #1
 800972c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009734:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	011b      	lsls	r3, r3, #4
 800973a:	b2db      	uxtb	r3, r3
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	4313      	orrs	r3, r2
 8009740:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	f023 030a 	bic.w	r3, r3, #10
 8009748:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	f003 030a 	and.w	r3, r3, #10
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	4313      	orrs	r3, r2
 8009754:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	621a      	str	r2, [r3, #32]
}
 8009762:	bf00      	nop
 8009764:	371c      	adds	r7, #28
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	40012c00 	.word	0x40012c00
 8009774:	40000400 	.word	0x40000400
 8009778:	40000800 	.word	0x40000800
 800977c:	40000c00 	.word	0x40000c00
 8009780:	40013400 	.word	0x40013400
 8009784:	40014000 	.word	0x40014000
 8009788:	40015000 	.word	0x40015000

0800978c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800978c:	b480      	push	{r7}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6a1b      	ldr	r3, [r3, #32]
 800979c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	f023 0201 	bic.w	r2, r3, #1
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80097b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	011b      	lsls	r3, r3, #4
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	4313      	orrs	r3, r2
 80097c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f023 030a 	bic.w	r3, r3, #10
 80097c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	621a      	str	r2, [r3, #32]
}
 80097de:	bf00      	nop
 80097e0:	371c      	adds	r7, #28
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097ea:	b480      	push	{r7}
 80097ec:	b087      	sub	sp, #28
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	60f8      	str	r0, [r7, #12]
 80097f2:	60b9      	str	r1, [r7, #8]
 80097f4:	607a      	str	r2, [r7, #4]
 80097f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	f023 0210 	bic.w	r2, r3, #16
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	021b      	lsls	r3, r3, #8
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	4313      	orrs	r3, r2
 8009820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009828:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	031b      	lsls	r3, r3, #12
 800982e:	b29b      	uxth	r3, r3
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	4313      	orrs	r3, r2
 8009834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800983c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	011b      	lsls	r3, r3, #4
 8009842:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	4313      	orrs	r3, r2
 800984a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	621a      	str	r2, [r3, #32]
}
 8009858:	bf00      	nop
 800985a:	371c      	adds	r7, #28
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009864:	b480      	push	{r7}
 8009866:	b087      	sub	sp, #28
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	f023 0210 	bic.w	r2, r3, #16
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800988e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	031b      	lsls	r3, r3, #12
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	4313      	orrs	r3, r2
 8009898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80098a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	011b      	lsls	r3, r3, #4
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	621a      	str	r2, [r3, #32]
}
 80098b8:	bf00      	nop
 80098ba:	371c      	adds	r7, #28
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b087      	sub	sp, #28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	69db      	ldr	r3, [r3, #28]
 80098e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	f023 0303 	bic.w	r3, r3, #3
 80098f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009900:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	011b      	lsls	r3, r3, #4
 8009906:	b2db      	uxtb	r3, r3
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	4313      	orrs	r3, r2
 800990c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009914:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	021b      	lsls	r3, r3, #8
 800991a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	4313      	orrs	r3, r2
 8009922:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	621a      	str	r2, [r3, #32]
}
 8009930:	bf00      	nop
 8009932:	371c      	adds	r7, #28
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800993c:	b480      	push	{r7}
 800993e:	b087      	sub	sp, #28
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6a1b      	ldr	r3, [r3, #32]
 8009954:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	69db      	ldr	r3, [r3, #28]
 8009960:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009968:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	021b      	lsls	r3, r3, #8
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	4313      	orrs	r3, r2
 8009972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800997a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	031b      	lsls	r3, r3, #12
 8009980:	b29b      	uxth	r3, r3
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	4313      	orrs	r3, r2
 8009986:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800998e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	031b      	lsls	r3, r3, #12
 8009994:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	4313      	orrs	r3, r2
 800999c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	621a      	str	r2, [r3, #32]
}
 80099aa:	bf00      	nop
 80099ac:	371c      	adds	r7, #28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80099cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	f043 0307 	orr.w	r3, r3, #7
 80099dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	609a      	str	r2, [r3, #8]
}
 80099e4:	bf00      	nop
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b087      	sub	sp, #28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	021a      	lsls	r2, r3, #8
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	431a      	orrs	r2, r3
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	609a      	str	r2, [r3, #8]
}
 8009a24:	bf00      	nop
 8009a26:	371c      	adds	r7, #28
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b087      	sub	sp, #28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	f003 031f 	and.w	r3, r3, #31
 8009a42:	2201      	movs	r2, #1
 8009a44:	fa02 f303 	lsl.w	r3, r2, r3
 8009a48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6a1a      	ldr	r2, [r3, #32]
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	43db      	mvns	r3, r3
 8009a52:	401a      	ands	r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6a1a      	ldr	r2, [r3, #32]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	f003 031f 	and.w	r3, r3, #31
 8009a62:	6879      	ldr	r1, [r7, #4]
 8009a64:	fa01 f303 	lsl.w	r3, r1, r3
 8009a68:	431a      	orrs	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	621a      	str	r2, [r3, #32]
}
 8009a6e:	bf00      	nop
 8009a70:	371c      	adds	r7, #28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
	...

08009a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d101      	bne.n	8009a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a90:	2302      	movs	r3, #2
 8009a92:	e074      	b.n	8009b7e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a34      	ldr	r2, [pc, #208]	@ (8009b8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d009      	beq.n	8009ad2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a33      	ldr	r2, [pc, #204]	@ (8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d004      	beq.n	8009ad2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a31      	ldr	r2, [pc, #196]	@ (8009b94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d108      	bne.n	8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009ad8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a21      	ldr	r2, [pc, #132]	@ (8009b8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d022      	beq.n	8009b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b14:	d01d      	beq.n	8009b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8009b98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d018      	beq.n	8009b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a1d      	ldr	r2, [pc, #116]	@ (8009b9c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d013      	beq.n	8009b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d00e      	beq.n	8009b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a15      	ldr	r2, [pc, #84]	@ (8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d009      	beq.n	8009b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a18      	ldr	r2, [pc, #96]	@ (8009ba4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d004      	beq.n	8009b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a11      	ldr	r2, [pc, #68]	@ (8009b94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d10c      	bne.n	8009b6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	40012c00 	.word	0x40012c00
 8009b90:	40013400 	.word	0x40013400
 8009b94:	40015000 	.word	0x40015000
 8009b98:	40000400 	.word	0x40000400
 8009b9c:	40000800 	.word	0x40000800
 8009ba0:	40000c00 	.word	0x40000c00
 8009ba4:	40014000 	.word	0x40014000

08009ba8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d101      	bne.n	8009bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	e078      	b.n	8009cb6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	041b      	lsls	r3, r3, #16
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a1c      	ldr	r2, [pc, #112]	@ (8009cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d009      	beq.n	8009c6a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8009cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d004      	beq.n	8009c6a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a19      	ldr	r2, [pc, #100]	@ (8009ccc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d11c      	bne.n	8009ca4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c74:	051b      	lsls	r3, r3, #20
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	6a1b      	ldr	r3, [r3, #32]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	40012c00 	.word	0x40012c00
 8009cc8:	40013400 	.word	0x40013400
 8009ccc:	40015000 	.word	0x40015000

08009cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cd8:	bf00      	nop
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009cec:	bf00      	nop
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e042      	b.n	8009df4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d106      	bne.n	8009d86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7fa f967 	bl	8004054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2224      	movs	r2, #36	@ 0x24
 8009d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f022 0201 	bic.w	r2, r2, #1
 8009d9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d002      	beq.n	8009dac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fff4 	bl	800ad94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fcf5 	bl	800a79c <UART_SetConfig>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d101      	bne.n	8009dbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e01b      	b.n	8009df4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009dca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	689a      	ldr	r2, [r3, #8]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009dda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f042 0201 	orr.w	r2, r2, #1
 8009dea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 f873 	bl	800aed8 <UART_CheckIdleState>
 8009df2:	4603      	mov	r3, r0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08a      	sub	sp, #40	@ 0x28
 8009e00:	af02      	add	r7, sp, #8
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e12:	2b20      	cmp	r3, #32
 8009e14:	d17b      	bne.n	8009f0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <HAL_UART_Transmit+0x26>
 8009e1c:	88fb      	ldrh	r3, [r7, #6]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e074      	b.n	8009f10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2221      	movs	r2, #33	@ 0x21
 8009e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e36:	f7fa fab9 	bl	80043ac <HAL_GetTick>
 8009e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	88fa      	ldrh	r2, [r7, #6]
 8009e40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	88fa      	ldrh	r2, [r7, #6]
 8009e48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e54:	d108      	bne.n	8009e68 <HAL_UART_Transmit+0x6c>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d104      	bne.n	8009e68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	61bb      	str	r3, [r7, #24]
 8009e66:	e003      	b.n	8009e70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009e70:	e030      	b.n	8009ed4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2180      	movs	r1, #128	@ 0x80
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f001 f8d5 	bl	800b02c <UART_WaitOnFlagUntilTimeout>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d005      	beq.n	8009e94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e03d      	b.n	8009f10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10b      	bne.n	8009eb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	881b      	ldrh	r3, [r3, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ea8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	3302      	adds	r3, #2
 8009eae:	61bb      	str	r3, [r7, #24]
 8009eb0:	e007      	b.n	8009ec2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	781a      	ldrb	r2, [r3, #0]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1c8      	bne.n	8009e72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2140      	movs	r1, #64	@ 0x40
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f001 f89e 	bl	800b02c <UART_WaitOnFlagUntilTimeout>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d005      	beq.n	8009f02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2220      	movs	r2, #32
 8009efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009efe:	2303      	movs	r3, #3
 8009f00:	e006      	b.n	8009f10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2220      	movs	r2, #32
 8009f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e000      	b.n	8009f10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009f0e:	2302      	movs	r3, #2
  }
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3720      	adds	r7, #32
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b091      	sub	sp, #68	@ 0x44
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	4613      	mov	r3, r2
 8009f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	d178      	bne.n	800a022 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d002      	beq.n	8009f3c <HAL_UART_Transmit_IT+0x24>
 8009f36:	88fb      	ldrh	r3, [r7, #6]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e071      	b.n	800a024 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	88fa      	ldrh	r2, [r7, #6]
 8009f4a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	88fa      	ldrh	r2, [r7, #6]
 8009f52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2221      	movs	r2, #33	@ 0x21
 8009f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f74:	d12a      	bne.n	8009fcc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f7e:	d107      	bne.n	8009f90 <HAL_UART_Transmit_IT+0x78>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d103      	bne.n	8009f90 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	4a29      	ldr	r2, [pc, #164]	@ (800a030 <HAL_UART_Transmit_IT+0x118>)
 8009f8c:	679a      	str	r2, [r3, #120]	@ 0x78
 8009f8e:	e002      	b.n	8009f96 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	4a28      	ldr	r2, [pc, #160]	@ (800a034 <HAL_UART_Transmit_IT+0x11c>)
 8009f94:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa0:	e853 3f00 	ldrex	r3, [r3]
 8009fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009fac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3308      	adds	r3, #8
 8009fb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fb6:	637a      	str	r2, [r7, #52]	@ 0x34
 8009fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009fbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fbe:	e841 2300 	strex	r3, r2, [r1]
 8009fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1e5      	bne.n	8009f96 <HAL_UART_Transmit_IT+0x7e>
 8009fca:	e028      	b.n	800a01e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fd4:	d107      	bne.n	8009fe6 <HAL_UART_Transmit_IT+0xce>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d103      	bne.n	8009fe6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	4a15      	ldr	r2, [pc, #84]	@ (800a038 <HAL_UART_Transmit_IT+0x120>)
 8009fe2:	679a      	str	r2, [r3, #120]	@ 0x78
 8009fe4:	e002      	b.n	8009fec <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	4a14      	ldr	r2, [pc, #80]	@ (800a03c <HAL_UART_Transmit_IT+0x124>)
 8009fea:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	e853 3f00 	ldrex	r3, [r3]
 8009ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	461a      	mov	r2, r3
 800a008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a00a:	623b      	str	r3, [r7, #32]
 800a00c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00e:	69f9      	ldr	r1, [r7, #28]
 800a010:	6a3a      	ldr	r2, [r7, #32]
 800a012:	e841 2300 	strex	r3, r2, [r1]
 800a016:	61bb      	str	r3, [r7, #24]
   return(result);
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1e6      	bne.n	8009fec <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	e000      	b.n	800a024 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800a022:	2302      	movs	r3, #2
  }
}
 800a024:	4618      	mov	r0, r3
 800a026:	3744      	adds	r7, #68	@ 0x44
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	0800b69f 	.word	0x0800b69f
 800a034:	0800b5bf 	.word	0x0800b5bf
 800a038:	0800b4fd 	.word	0x0800b4fd
 800a03c:	0800b445 	.word	0x0800b445

0800a040 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08a      	sub	sp, #40	@ 0x28
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	4613      	mov	r3, r2
 800a04c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a054:	2b20      	cmp	r3, #32
 800a056:	d137      	bne.n	800a0c8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d002      	beq.n	800a064 <HAL_UART_Receive_IT+0x24>
 800a05e:	88fb      	ldrh	r3, [r7, #6]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d101      	bne.n	800a068 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e030      	b.n	800a0ca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a18      	ldr	r2, [pc, #96]	@ (800a0d4 <HAL_UART_Receive_IT+0x94>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d01f      	beq.n	800a0b8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d018      	beq.n	800a0b8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	613b      	str	r3, [r7, #16]
   return(result);
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a09a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a4:	623b      	str	r3, [r7, #32]
 800a0a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	69f9      	ldr	r1, [r7, #28]
 800a0aa:	6a3a      	ldr	r2, [r7, #32]
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e6      	bne.n	800a086 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a0b8:	88fb      	ldrh	r3, [r7, #6]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	68b9      	ldr	r1, [r7, #8]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f001 f822 	bl	800b108 <UART_Start_Receive_IT>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	e000      	b.n	800a0ca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a0c8:	2302      	movs	r3, #2
  }
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3728      	adds	r7, #40	@ 0x28
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	40008000 	.word	0x40008000

0800a0d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b0ba      	sub	sp, #232	@ 0xe8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	69db      	ldr	r3, [r3, #28]
 800a0e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a0fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a102:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a106:	4013      	ands	r3, r2
 800a108:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a10c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a110:	2b00      	cmp	r3, #0
 800a112:	d11b      	bne.n	800a14c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a118:	f003 0320 	and.w	r3, r3, #32
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d015      	beq.n	800a14c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a124:	f003 0320 	and.w	r3, r3, #32
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d105      	bne.n	800a138 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a12c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d009      	beq.n	800a14c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f000 8300 	beq.w	800a742 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	4798      	blx	r3
      }
      return;
 800a14a:	e2fa      	b.n	800a742 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a14c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a150:	2b00      	cmp	r3, #0
 800a152:	f000 8123 	beq.w	800a39c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a156:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a15a:	4b8d      	ldr	r3, [pc, #564]	@ (800a390 <HAL_UART_IRQHandler+0x2b8>)
 800a15c:	4013      	ands	r3, r2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d106      	bne.n	800a170 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a162:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a166:	4b8b      	ldr	r3, [pc, #556]	@ (800a394 <HAL_UART_IRQHandler+0x2bc>)
 800a168:	4013      	ands	r3, r2
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 8116 	beq.w	800a39c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d011      	beq.n	800a1a0 <HAL_UART_IRQHandler+0xc8>
 800a17c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00b      	beq.n	800a1a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2201      	movs	r2, #1
 800a18e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a196:	f043 0201 	orr.w	r2, r3, #1
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d011      	beq.n	800a1d0 <HAL_UART_IRQHandler+0xf8>
 800a1ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1b0:	f003 0301 	and.w	r3, r3, #1
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00b      	beq.n	800a1d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2202      	movs	r2, #2
 800a1be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1c6:	f043 0204 	orr.w	r2, r3, #4
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1d4:	f003 0304 	and.w	r3, r3, #4
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d011      	beq.n	800a200 <HAL_UART_IRQHandler+0x128>
 800a1dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00b      	beq.n	800a200 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2204      	movs	r2, #4
 800a1ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1f6:	f043 0202 	orr.w	r2, r3, #2
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a204:	f003 0308 	and.w	r3, r3, #8
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d017      	beq.n	800a23c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a210:	f003 0320 	and.w	r3, r3, #32
 800a214:	2b00      	cmp	r3, #0
 800a216:	d105      	bne.n	800a224 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a218:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a21c:	4b5c      	ldr	r3, [pc, #368]	@ (800a390 <HAL_UART_IRQHandler+0x2b8>)
 800a21e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00b      	beq.n	800a23c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2208      	movs	r2, #8
 800a22a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a232:	f043 0208 	orr.w	r2, r3, #8
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a244:	2b00      	cmp	r3, #0
 800a246:	d012      	beq.n	800a26e <HAL_UART_IRQHandler+0x196>
 800a248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a24c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00c      	beq.n	800a26e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a25c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a264:	f043 0220 	orr.w	r2, r3, #32
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 8266 	beq.w	800a746 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a27a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a27e:	f003 0320 	and.w	r3, r3, #32
 800a282:	2b00      	cmp	r3, #0
 800a284:	d013      	beq.n	800a2ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a28a:	f003 0320 	and.w	r3, r3, #32
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d105      	bne.n	800a29e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d007      	beq.n	800a2ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d003      	beq.n	800a2ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2c2:	2b40      	cmp	r3, #64	@ 0x40
 800a2c4:	d005      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a2c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a2ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d054      	beq.n	800a37c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f001 f83a 	bl	800b34c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2e2:	2b40      	cmp	r3, #64	@ 0x40
 800a2e4:	d146      	bne.n	800a374 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	3308      	adds	r3, #8
 800a2ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a2fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3308      	adds	r3, #8
 800a30e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a312:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a316:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a31e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a322:	e841 2300 	strex	r3, r2, [r1]
 800a326:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a32a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1d9      	bne.n	800a2e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d017      	beq.n	800a36c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a342:	4a15      	ldr	r2, [pc, #84]	@ (800a398 <HAL_UART_IRQHandler+0x2c0>)
 800a344:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7fa fb19 	bl	8004984 <HAL_DMA_Abort_IT>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d019      	beq.n	800a38c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a35e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a366:	4610      	mov	r0, r2
 800a368:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a36a:	e00f      	b.n	800a38c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f9ff 	bl	800a770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a372:	e00b      	b.n	800a38c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f9fb 	bl	800a770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a37a:	e007      	b.n	800a38c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f9f7 	bl	800a770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a38a:	e1dc      	b.n	800a746 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a38c:	bf00      	nop
    return;
 800a38e:	e1da      	b.n	800a746 <HAL_UART_IRQHandler+0x66e>
 800a390:	10000001 	.word	0x10000001
 800a394:	04000120 	.word	0x04000120
 800a398:	0800b419 	.word	0x0800b419

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	f040 8170 	bne.w	800a686 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a3a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3aa:	f003 0310 	and.w	r3, r3, #16
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f000 8169 	beq.w	800a686 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3b8:	f003 0310 	and.w	r3, r3, #16
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 8162 	beq.w	800a686 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2210      	movs	r2, #16
 800a3c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3d4:	2b40      	cmp	r3, #64	@ 0x40
 800a3d6:	f040 80d8 	bne.w	800a58a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a3e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 80af 	beq.w	800a550 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	f080 80a7 	bcs.w	800a550 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a408:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 0320 	and.w	r3, r3, #32
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f040 8087 	bne.w	800a52e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a428:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a42c:	e853 3f00 	ldrex	r3, [r3]
 800a430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a434:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a43c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	461a      	mov	r2, r3
 800a446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a44a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a44e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a452:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a456:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a45a:	e841 2300 	strex	r3, r2, [r1]
 800a45e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a462:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1da      	bne.n	800a420 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	3308      	adds	r3, #8
 800a470:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a472:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a474:	e853 3f00 	ldrex	r3, [r3]
 800a478:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a47a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a47c:	f023 0301 	bic.w	r3, r3, #1
 800a480:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3308      	adds	r3, #8
 800a48a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a48e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a492:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a494:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a496:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a49a:	e841 2300 	strex	r3, r2, [r1]
 800a49e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a4a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1e1      	bne.n	800a46a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4b0:	e853 3f00 	ldrex	r3, [r3]
 800a4b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a4b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a4ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a4cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a4d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a4d2:	e841 2300 	strex	r3, r2, [r1]
 800a4d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a4d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1e3      	bne.n	800a4a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2220      	movs	r2, #32
 800a4e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4f4:	e853 3f00 	ldrex	r3, [r3]
 800a4f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a4fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4fc:	f023 0310 	bic.w	r3, r3, #16
 800a500:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	461a      	mov	r2, r3
 800a50a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a50e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a510:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a512:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a514:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a516:	e841 2300 	strex	r3, r2, [r1]
 800a51a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a51c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1e4      	bne.n	800a4ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fa f9d2 	bl	80048d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2202      	movs	r2, #2
 800a532:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a540:	b29b      	uxth	r3, r3
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	b29b      	uxth	r3, r3
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f91b 	bl	800a784 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a54e:	e0fc      	b.n	800a74a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a55a:	429a      	cmp	r2, r3
 800a55c:	f040 80f5 	bne.w	800a74a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 0320 	and.w	r3, r3, #32
 800a56e:	2b20      	cmp	r3, #32
 800a570:	f040 80eb 	bne.w	800a74a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2202      	movs	r2, #2
 800a578:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f8fe 	bl	800a784 <HAL_UARTEx_RxEventCallback>
      return;
 800a588:	e0df      	b.n	800a74a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a596:	b29b      	uxth	r3, r3
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 80d1 	beq.w	800a74e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a5ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 80cc 	beq.w	800a74e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5be:	e853 3f00 	ldrex	r3, [r3]
 800a5c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a5d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5e0:	e841 2300 	strex	r3, r2, [r1]
 800a5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d1e4      	bne.n	800a5b6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f6:	e853 3f00 	ldrex	r3, [r3]
 800a5fa:	623b      	str	r3, [r7, #32]
   return(result);
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a602:	f023 0301 	bic.w	r3, r3, #1
 800a606:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	3308      	adds	r3, #8
 800a610:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a614:	633a      	str	r2, [r7, #48]	@ 0x30
 800a616:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a618:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a61a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a61c:	e841 2300 	strex	r3, r2, [r1]
 800a620:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e1      	bne.n	800a5ec <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2220      	movs	r2, #32
 800a62c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	e853 3f00 	ldrex	r3, [r3]
 800a648:	60fb      	str	r3, [r7, #12]
   return(result);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f023 0310 	bic.w	r3, r3, #16
 800a650:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	461a      	mov	r2, r3
 800a65a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a65e:	61fb      	str	r3, [r7, #28]
 800a660:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a662:	69b9      	ldr	r1, [r7, #24]
 800a664:	69fa      	ldr	r2, [r7, #28]
 800a666:	e841 2300 	strex	r3, r2, [r1]
 800a66a:	617b      	str	r3, [r7, #20]
   return(result);
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1e4      	bne.n	800a63c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2202      	movs	r2, #2
 800a676:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a67c:	4619      	mov	r1, r3
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f880 	bl	800a784 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a684:	e063      	b.n	800a74e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a68a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00e      	beq.n	800a6b0 <HAL_UART_IRQHandler+0x5d8>
 800a692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d008      	beq.n	800a6b0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a6a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f001 fdb9 	bl	800c220 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6ae:	e051      	b.n	800a754 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d014      	beq.n	800a6e6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a6bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d105      	bne.n	800a6d4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a6c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d008      	beq.n	800a6e6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d03a      	beq.n	800a752 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	4798      	blx	r3
    }
    return;
 800a6e4:	e035      	b.n	800a752 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a6e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d009      	beq.n	800a706 <HAL_UART_IRQHandler+0x62e>
 800a6f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d003      	beq.n	800a706 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f001 f842 	bl	800b788 <UART_EndTransmit_IT>
    return;
 800a704:	e026      	b.n	800a754 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a70a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d009      	beq.n	800a726 <HAL_UART_IRQHandler+0x64e>
 800a712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a716:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d003      	beq.n	800a726 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f001 fd92 	bl	800c248 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a724:	e016      	b.n	800a754 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a72a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d010      	beq.n	800a754 <HAL_UART_IRQHandler+0x67c>
 800a732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a736:	2b00      	cmp	r3, #0
 800a738:	da0c      	bge.n	800a754 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f001 fd7a 	bl	800c234 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a740:	e008      	b.n	800a754 <HAL_UART_IRQHandler+0x67c>
      return;
 800a742:	bf00      	nop
 800a744:	e006      	b.n	800a754 <HAL_UART_IRQHandler+0x67c>
    return;
 800a746:	bf00      	nop
 800a748:	e004      	b.n	800a754 <HAL_UART_IRQHandler+0x67c>
      return;
 800a74a:	bf00      	nop
 800a74c:	e002      	b.n	800a754 <HAL_UART_IRQHandler+0x67c>
      return;
 800a74e:	bf00      	nop
 800a750:	e000      	b.n	800a754 <HAL_UART_IRQHandler+0x67c>
    return;
 800a752:	bf00      	nop
  }
}
 800a754:	37e8      	adds	r7, #232	@ 0xe8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop

0800a75c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	460b      	mov	r3, r1
 800a78e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a79c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7a0:	b08c      	sub	sp, #48	@ 0x30
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	689a      	ldr	r2, [r3, #8]
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	431a      	orrs	r2, r3
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	4baa      	ldr	r3, [pc, #680]	@ (800aa74 <UART_SetConfig+0x2d8>)
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	6812      	ldr	r2, [r2, #0]
 800a7d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7d4:	430b      	orrs	r3, r1
 800a7d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	68da      	ldr	r2, [r3, #12]
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	430a      	orrs	r2, r1
 800a7ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	699b      	ldr	r3, [r3, #24]
 800a7f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a9f      	ldr	r2, [pc, #636]	@ (800aa78 <UART_SetConfig+0x2dc>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d004      	beq.n	800a808 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a804:	4313      	orrs	r3, r2
 800a806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a812:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	6812      	ldr	r2, [r2, #0]
 800a81a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a81c:	430b      	orrs	r3, r1
 800a81e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a826:	f023 010f 	bic.w	r1, r3, #15
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a90      	ldr	r2, [pc, #576]	@ (800aa7c <UART_SetConfig+0x2e0>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d125      	bne.n	800a88c <UART_SetConfig+0xf0>
 800a840:	4b8f      	ldr	r3, [pc, #572]	@ (800aa80 <UART_SetConfig+0x2e4>)
 800a842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a846:	f003 0303 	and.w	r3, r3, #3
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	d81a      	bhi.n	800a884 <UART_SetConfig+0xe8>
 800a84e:	a201      	add	r2, pc, #4	@ (adr r2, 800a854 <UART_SetConfig+0xb8>)
 800a850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a854:	0800a865 	.word	0x0800a865
 800a858:	0800a875 	.word	0x0800a875
 800a85c:	0800a86d 	.word	0x0800a86d
 800a860:	0800a87d 	.word	0x0800a87d
 800a864:	2301      	movs	r3, #1
 800a866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a86a:	e116      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a86c:	2302      	movs	r3, #2
 800a86e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a872:	e112      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a874:	2304      	movs	r3, #4
 800a876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a87a:	e10e      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a87c:	2308      	movs	r3, #8
 800a87e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a882:	e10a      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a884:	2310      	movs	r3, #16
 800a886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a88a:	e106      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a7c      	ldr	r2, [pc, #496]	@ (800aa84 <UART_SetConfig+0x2e8>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d138      	bne.n	800a908 <UART_SetConfig+0x16c>
 800a896:	4b7a      	ldr	r3, [pc, #488]	@ (800aa80 <UART_SetConfig+0x2e4>)
 800a898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a89c:	f003 030c 	and.w	r3, r3, #12
 800a8a0:	2b0c      	cmp	r3, #12
 800a8a2:	d82d      	bhi.n	800a900 <UART_SetConfig+0x164>
 800a8a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8ac <UART_SetConfig+0x110>)
 800a8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8aa:	bf00      	nop
 800a8ac:	0800a8e1 	.word	0x0800a8e1
 800a8b0:	0800a901 	.word	0x0800a901
 800a8b4:	0800a901 	.word	0x0800a901
 800a8b8:	0800a901 	.word	0x0800a901
 800a8bc:	0800a8f1 	.word	0x0800a8f1
 800a8c0:	0800a901 	.word	0x0800a901
 800a8c4:	0800a901 	.word	0x0800a901
 800a8c8:	0800a901 	.word	0x0800a901
 800a8cc:	0800a8e9 	.word	0x0800a8e9
 800a8d0:	0800a901 	.word	0x0800a901
 800a8d4:	0800a901 	.word	0x0800a901
 800a8d8:	0800a901 	.word	0x0800a901
 800a8dc:	0800a8f9 	.word	0x0800a8f9
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8e6:	e0d8      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8ee:	e0d4      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a8f0:	2304      	movs	r3, #4
 800a8f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8f6:	e0d0      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a8f8:	2308      	movs	r3, #8
 800a8fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8fe:	e0cc      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a900:	2310      	movs	r3, #16
 800a902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a906:	e0c8      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a5e      	ldr	r2, [pc, #376]	@ (800aa88 <UART_SetConfig+0x2ec>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d125      	bne.n	800a95e <UART_SetConfig+0x1c2>
 800a912:	4b5b      	ldr	r3, [pc, #364]	@ (800aa80 <UART_SetConfig+0x2e4>)
 800a914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a918:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a91c:	2b30      	cmp	r3, #48	@ 0x30
 800a91e:	d016      	beq.n	800a94e <UART_SetConfig+0x1b2>
 800a920:	2b30      	cmp	r3, #48	@ 0x30
 800a922:	d818      	bhi.n	800a956 <UART_SetConfig+0x1ba>
 800a924:	2b20      	cmp	r3, #32
 800a926:	d00a      	beq.n	800a93e <UART_SetConfig+0x1a2>
 800a928:	2b20      	cmp	r3, #32
 800a92a:	d814      	bhi.n	800a956 <UART_SetConfig+0x1ba>
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d002      	beq.n	800a936 <UART_SetConfig+0x19a>
 800a930:	2b10      	cmp	r3, #16
 800a932:	d008      	beq.n	800a946 <UART_SetConfig+0x1aa>
 800a934:	e00f      	b.n	800a956 <UART_SetConfig+0x1ba>
 800a936:	2300      	movs	r3, #0
 800a938:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a93c:	e0ad      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a93e:	2302      	movs	r3, #2
 800a940:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a944:	e0a9      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a946:	2304      	movs	r3, #4
 800a948:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a94c:	e0a5      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a94e:	2308      	movs	r3, #8
 800a950:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a954:	e0a1      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a956:	2310      	movs	r3, #16
 800a958:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a95c:	e09d      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a4a      	ldr	r2, [pc, #296]	@ (800aa8c <UART_SetConfig+0x2f0>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d125      	bne.n	800a9b4 <UART_SetConfig+0x218>
 800a968:	4b45      	ldr	r3, [pc, #276]	@ (800aa80 <UART_SetConfig+0x2e4>)
 800a96a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a96e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a972:	2bc0      	cmp	r3, #192	@ 0xc0
 800a974:	d016      	beq.n	800a9a4 <UART_SetConfig+0x208>
 800a976:	2bc0      	cmp	r3, #192	@ 0xc0
 800a978:	d818      	bhi.n	800a9ac <UART_SetConfig+0x210>
 800a97a:	2b80      	cmp	r3, #128	@ 0x80
 800a97c:	d00a      	beq.n	800a994 <UART_SetConfig+0x1f8>
 800a97e:	2b80      	cmp	r3, #128	@ 0x80
 800a980:	d814      	bhi.n	800a9ac <UART_SetConfig+0x210>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <UART_SetConfig+0x1f0>
 800a986:	2b40      	cmp	r3, #64	@ 0x40
 800a988:	d008      	beq.n	800a99c <UART_SetConfig+0x200>
 800a98a:	e00f      	b.n	800a9ac <UART_SetConfig+0x210>
 800a98c:	2300      	movs	r3, #0
 800a98e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a992:	e082      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a994:	2302      	movs	r3, #2
 800a996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a99a:	e07e      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a99c:	2304      	movs	r3, #4
 800a99e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9a2:	e07a      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a9a4:	2308      	movs	r3, #8
 800a9a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9aa:	e076      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a9ac:	2310      	movs	r3, #16
 800a9ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9b2:	e072      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a35      	ldr	r2, [pc, #212]	@ (800aa90 <UART_SetConfig+0x2f4>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d12a      	bne.n	800aa14 <UART_SetConfig+0x278>
 800a9be:	4b30      	ldr	r3, [pc, #192]	@ (800aa80 <UART_SetConfig+0x2e4>)
 800a9c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9cc:	d01a      	beq.n	800aa04 <UART_SetConfig+0x268>
 800a9ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9d2:	d81b      	bhi.n	800aa0c <UART_SetConfig+0x270>
 800a9d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9d8:	d00c      	beq.n	800a9f4 <UART_SetConfig+0x258>
 800a9da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9de:	d815      	bhi.n	800aa0c <UART_SetConfig+0x270>
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d003      	beq.n	800a9ec <UART_SetConfig+0x250>
 800a9e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9e8:	d008      	beq.n	800a9fc <UART_SetConfig+0x260>
 800a9ea:	e00f      	b.n	800aa0c <UART_SetConfig+0x270>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9f2:	e052      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9fa:	e04e      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800a9fc:	2304      	movs	r3, #4
 800a9fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa02:	e04a      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800aa04:	2308      	movs	r3, #8
 800aa06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa0a:	e046      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800aa0c:	2310      	movs	r3, #16
 800aa0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa12:	e042      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a17      	ldr	r2, [pc, #92]	@ (800aa78 <UART_SetConfig+0x2dc>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d13a      	bne.n	800aa94 <UART_SetConfig+0x2f8>
 800aa1e:	4b18      	ldr	r3, [pc, #96]	@ (800aa80 <UART_SetConfig+0x2e4>)
 800aa20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800aa28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa2c:	d01a      	beq.n	800aa64 <UART_SetConfig+0x2c8>
 800aa2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa32:	d81b      	bhi.n	800aa6c <UART_SetConfig+0x2d0>
 800aa34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa38:	d00c      	beq.n	800aa54 <UART_SetConfig+0x2b8>
 800aa3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa3e:	d815      	bhi.n	800aa6c <UART_SetConfig+0x2d0>
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d003      	beq.n	800aa4c <UART_SetConfig+0x2b0>
 800aa44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa48:	d008      	beq.n	800aa5c <UART_SetConfig+0x2c0>
 800aa4a:	e00f      	b.n	800aa6c <UART_SetConfig+0x2d0>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa52:	e022      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800aa54:	2302      	movs	r3, #2
 800aa56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa5a:	e01e      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800aa5c:	2304      	movs	r3, #4
 800aa5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa62:	e01a      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800aa64:	2308      	movs	r3, #8
 800aa66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa6a:	e016      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800aa6c:	2310      	movs	r3, #16
 800aa6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa72:	e012      	b.n	800aa9a <UART_SetConfig+0x2fe>
 800aa74:	cfff69f3 	.word	0xcfff69f3
 800aa78:	40008000 	.word	0x40008000
 800aa7c:	40013800 	.word	0x40013800
 800aa80:	40021000 	.word	0x40021000
 800aa84:	40004400 	.word	0x40004400
 800aa88:	40004800 	.word	0x40004800
 800aa8c:	40004c00 	.word	0x40004c00
 800aa90:	40005000 	.word	0x40005000
 800aa94:	2310      	movs	r3, #16
 800aa96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4aae      	ldr	r2, [pc, #696]	@ (800ad58 <UART_SetConfig+0x5bc>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	f040 8097 	bne.w	800abd4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aaa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aaaa:	2b08      	cmp	r3, #8
 800aaac:	d823      	bhi.n	800aaf6 <UART_SetConfig+0x35a>
 800aaae:	a201      	add	r2, pc, #4	@ (adr r2, 800aab4 <UART_SetConfig+0x318>)
 800aab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab4:	0800aad9 	.word	0x0800aad9
 800aab8:	0800aaf7 	.word	0x0800aaf7
 800aabc:	0800aae1 	.word	0x0800aae1
 800aac0:	0800aaf7 	.word	0x0800aaf7
 800aac4:	0800aae7 	.word	0x0800aae7
 800aac8:	0800aaf7 	.word	0x0800aaf7
 800aacc:	0800aaf7 	.word	0x0800aaf7
 800aad0:	0800aaf7 	.word	0x0800aaf7
 800aad4:	0800aaef 	.word	0x0800aaef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aad8:	f7fc fee2 	bl	80078a0 <HAL_RCC_GetPCLK1Freq>
 800aadc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aade:	e010      	b.n	800ab02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aae0:	4b9e      	ldr	r3, [pc, #632]	@ (800ad5c <UART_SetConfig+0x5c0>)
 800aae2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aae4:	e00d      	b.n	800ab02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aae6:	f7fc fe6d 	bl	80077c4 <HAL_RCC_GetSysClockFreq>
 800aaea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aaec:	e009      	b.n	800ab02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aaf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aaf4:	e005      	b.n	800ab02 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ab00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 8130 	beq.w	800ad6a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab0e:	4a94      	ldr	r2, [pc, #592]	@ (800ad60 <UART_SetConfig+0x5c4>)
 800ab10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab14:	461a      	mov	r2, r3
 800ab16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	4613      	mov	r3, r2
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	4413      	add	r3, r2
 800ab28:	69ba      	ldr	r2, [r7, #24]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d305      	bcc.n	800ab3a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab34:	69ba      	ldr	r2, [r7, #24]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d903      	bls.n	800ab42 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ab40:	e113      	b.n	800ad6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab44:	2200      	movs	r2, #0
 800ab46:	60bb      	str	r3, [r7, #8]
 800ab48:	60fa      	str	r2, [r7, #12]
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab4e:	4a84      	ldr	r2, [pc, #528]	@ (800ad60 <UART_SetConfig+0x5c4>)
 800ab50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	2200      	movs	r2, #0
 800ab58:	603b      	str	r3, [r7, #0]
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab64:	f7f6 f9c6 	bl	8000ef4 <__aeabi_uldivmod>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	4619      	mov	r1, r3
 800ab70:	f04f 0200 	mov.w	r2, #0
 800ab74:	f04f 0300 	mov.w	r3, #0
 800ab78:	020b      	lsls	r3, r1, #8
 800ab7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab7e:	0202      	lsls	r2, r0, #8
 800ab80:	6979      	ldr	r1, [r7, #20]
 800ab82:	6849      	ldr	r1, [r1, #4]
 800ab84:	0849      	lsrs	r1, r1, #1
 800ab86:	2000      	movs	r0, #0
 800ab88:	460c      	mov	r4, r1
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	eb12 0804 	adds.w	r8, r2, r4
 800ab90:	eb43 0905 	adc.w	r9, r3, r5
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	469a      	mov	sl, r3
 800ab9c:	4693      	mov	fp, r2
 800ab9e:	4652      	mov	r2, sl
 800aba0:	465b      	mov	r3, fp
 800aba2:	4640      	mov	r0, r8
 800aba4:	4649      	mov	r1, r9
 800aba6:	f7f6 f9a5 	bl	8000ef4 <__aeabi_uldivmod>
 800abaa:	4602      	mov	r2, r0
 800abac:	460b      	mov	r3, r1
 800abae:	4613      	mov	r3, r2
 800abb0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abb2:	6a3b      	ldr	r3, [r7, #32]
 800abb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abb8:	d308      	bcc.n	800abcc <UART_SetConfig+0x430>
 800abba:	6a3b      	ldr	r3, [r7, #32]
 800abbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abc0:	d204      	bcs.n	800abcc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6a3a      	ldr	r2, [r7, #32]
 800abc8:	60da      	str	r2, [r3, #12]
 800abca:	e0ce      	b.n	800ad6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800abd2:	e0ca      	b.n	800ad6a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abdc:	d166      	bne.n	800acac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800abde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	d827      	bhi.n	800ac36 <UART_SetConfig+0x49a>
 800abe6:	a201      	add	r2, pc, #4	@ (adr r2, 800abec <UART_SetConfig+0x450>)
 800abe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abec:	0800ac11 	.word	0x0800ac11
 800abf0:	0800ac19 	.word	0x0800ac19
 800abf4:	0800ac21 	.word	0x0800ac21
 800abf8:	0800ac37 	.word	0x0800ac37
 800abfc:	0800ac27 	.word	0x0800ac27
 800ac00:	0800ac37 	.word	0x0800ac37
 800ac04:	0800ac37 	.word	0x0800ac37
 800ac08:	0800ac37 	.word	0x0800ac37
 800ac0c:	0800ac2f 	.word	0x0800ac2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac10:	f7fc fe46 	bl	80078a0 <HAL_RCC_GetPCLK1Freq>
 800ac14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac16:	e014      	b.n	800ac42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac18:	f7fc fe58 	bl	80078cc <HAL_RCC_GetPCLK2Freq>
 800ac1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac1e:	e010      	b.n	800ac42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac20:	4b4e      	ldr	r3, [pc, #312]	@ (800ad5c <UART_SetConfig+0x5c0>)
 800ac22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac24:	e00d      	b.n	800ac42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac26:	f7fc fdcd 	bl	80077c4 <HAL_RCC_GetSysClockFreq>
 800ac2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac2c:	e009      	b.n	800ac42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac34:	e005      	b.n	800ac42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ac36:	2300      	movs	r3, #0
 800ac38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ac40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 8090 	beq.w	800ad6a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac4e:	4a44      	ldr	r2, [pc, #272]	@ (800ad60 <UART_SetConfig+0x5c4>)
 800ac50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac54:	461a      	mov	r2, r3
 800ac56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac5c:	005a      	lsls	r2, r3, #1
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	085b      	lsrs	r3, r3, #1
 800ac64:	441a      	add	r2, r3
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	2b0f      	cmp	r3, #15
 800ac74:	d916      	bls.n	800aca4 <UART_SetConfig+0x508>
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac7c:	d212      	bcs.n	800aca4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	f023 030f 	bic.w	r3, r3, #15
 800ac86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	085b      	lsrs	r3, r3, #1
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	f003 0307 	and.w	r3, r3, #7
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	8bfb      	ldrh	r3, [r7, #30]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	8bfa      	ldrh	r2, [r7, #30]
 800aca0:	60da      	str	r2, [r3, #12]
 800aca2:	e062      	b.n	800ad6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800acaa:	e05e      	b.n	800ad6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800acac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d828      	bhi.n	800ad06 <UART_SetConfig+0x56a>
 800acb4:	a201      	add	r2, pc, #4	@ (adr r2, 800acbc <UART_SetConfig+0x520>)
 800acb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acba:	bf00      	nop
 800acbc:	0800ace1 	.word	0x0800ace1
 800acc0:	0800ace9 	.word	0x0800ace9
 800acc4:	0800acf1 	.word	0x0800acf1
 800acc8:	0800ad07 	.word	0x0800ad07
 800accc:	0800acf7 	.word	0x0800acf7
 800acd0:	0800ad07 	.word	0x0800ad07
 800acd4:	0800ad07 	.word	0x0800ad07
 800acd8:	0800ad07 	.word	0x0800ad07
 800acdc:	0800acff 	.word	0x0800acff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ace0:	f7fc fdde 	bl	80078a0 <HAL_RCC_GetPCLK1Freq>
 800ace4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ace6:	e014      	b.n	800ad12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ace8:	f7fc fdf0 	bl	80078cc <HAL_RCC_GetPCLK2Freq>
 800acec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acee:	e010      	b.n	800ad12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acf0:	4b1a      	ldr	r3, [pc, #104]	@ (800ad5c <UART_SetConfig+0x5c0>)
 800acf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800acf4:	e00d      	b.n	800ad12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acf6:	f7fc fd65 	bl	80077c4 <HAL_RCC_GetSysClockFreq>
 800acfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acfc:	e009      	b.n	800ad12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad04:	e005      	b.n	800ad12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ad10:	bf00      	nop
    }

    if (pclk != 0U)
 800ad12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d028      	beq.n	800ad6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1c:	4a10      	ldr	r2, [pc, #64]	@ (800ad60 <UART_SetConfig+0x5c4>)
 800ad1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad22:	461a      	mov	r2, r3
 800ad24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad26:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	085b      	lsrs	r3, r3, #1
 800ad30:	441a      	add	r2, r3
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	2b0f      	cmp	r3, #15
 800ad40:	d910      	bls.n	800ad64 <UART_SetConfig+0x5c8>
 800ad42:	6a3b      	ldr	r3, [r7, #32]
 800ad44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad48:	d20c      	bcs.n	800ad64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	60da      	str	r2, [r3, #12]
 800ad54:	e009      	b.n	800ad6a <UART_SetConfig+0x5ce>
 800ad56:	bf00      	nop
 800ad58:	40008000 	.word	0x40008000
 800ad5c:	00f42400 	.word	0x00f42400
 800ad60:	0800f7b0 	.word	0x0800f7b0
      }
      else
      {
        ret = HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	2201      	movs	r2, #1
 800ad76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	2200      	movs	r2, #0
 800ad84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ad86:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3730      	adds	r7, #48	@ 0x30
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ad94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ada0:	f003 0308 	and.w	r3, r3, #8
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00a      	beq.n	800adbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	430a      	orrs	r2, r1
 800adbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00a      	beq.n	800ade0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	430a      	orrs	r2, r1
 800adde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ade4:	f003 0302 	and.w	r3, r3, #2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00a      	beq.n	800ae02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	430a      	orrs	r2, r1
 800ae00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae06:	f003 0304 	and.w	r3, r3, #4
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00a      	beq.n	800ae24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	430a      	orrs	r2, r1
 800ae22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae28:	f003 0310 	and.w	r3, r3, #16
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00a      	beq.n	800ae46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	430a      	orrs	r2, r1
 800ae44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4a:	f003 0320 	and.w	r3, r3, #32
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00a      	beq.n	800ae68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	430a      	orrs	r2, r1
 800ae66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d01a      	beq.n	800aeaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	430a      	orrs	r2, r1
 800ae88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae92:	d10a      	bne.n	800aeaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	430a      	orrs	r2, r1
 800aea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00a      	beq.n	800aecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	430a      	orrs	r2, r1
 800aeca:	605a      	str	r2, [r3, #4]
  }
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b098      	sub	sp, #96	@ 0x60
 800aedc:	af02      	add	r7, sp, #8
 800aede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aee8:	f7f9 fa60 	bl	80043ac <HAL_GetTick>
 800aeec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 0308 	and.w	r3, r3, #8
 800aef8:	2b08      	cmp	r3, #8
 800aefa:	d12f      	bne.n	800af5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aefc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af04:	2200      	movs	r2, #0
 800af06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f88e 	bl	800b02c <UART_WaitOnFlagUntilTimeout>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d022      	beq.n	800af5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1e:	e853 3f00 	ldrex	r3, [r3]
 800af22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	461a      	mov	r2, r3
 800af32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af34:	647b      	str	r3, [r7, #68]	@ 0x44
 800af36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af3c:	e841 2300 	strex	r3, r2, [r1]
 800af40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1e6      	bne.n	800af16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2220      	movs	r2, #32
 800af4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af58:	2303      	movs	r3, #3
 800af5a:	e063      	b.n	800b024 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 0304 	and.w	r3, r3, #4
 800af66:	2b04      	cmp	r3, #4
 800af68:	d149      	bne.n	800affe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af72:	2200      	movs	r2, #0
 800af74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f857 	bl	800b02c <UART_WaitOnFlagUntilTimeout>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d03c      	beq.n	800affe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8c:	e853 3f00 	ldrex	r3, [r3]
 800af90:	623b      	str	r3, [r7, #32]
   return(result);
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	461a      	mov	r2, r3
 800afa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afa2:	633b      	str	r3, [r7, #48]	@ 0x30
 800afa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afaa:	e841 2300 	strex	r3, r2, [r1]
 800afae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1e6      	bne.n	800af84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	3308      	adds	r3, #8
 800afbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	e853 3f00 	ldrex	r3, [r3]
 800afc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f023 0301 	bic.w	r3, r3, #1
 800afcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3308      	adds	r3, #8
 800afd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800afd6:	61fa      	str	r2, [r7, #28]
 800afd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afda:	69b9      	ldr	r1, [r7, #24]
 800afdc:	69fa      	ldr	r2, [r7, #28]
 800afde:	e841 2300 	strex	r3, r2, [r1]
 800afe2:	617b      	str	r3, [r7, #20]
   return(result);
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1e5      	bne.n	800afb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2220      	movs	r2, #32
 800afee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800affa:	2303      	movs	r3, #3
 800affc:	e012      	b.n	800b024 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2220      	movs	r2, #32
 800b002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2220      	movs	r2, #32
 800b00a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3758      	adds	r7, #88	@ 0x58
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	603b      	str	r3, [r7, #0]
 800b038:	4613      	mov	r3, r2
 800b03a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b03c:	e04f      	b.n	800b0de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b044:	d04b      	beq.n	800b0de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b046:	f7f9 f9b1 	bl	80043ac <HAL_GetTick>
 800b04a:	4602      	mov	r2, r0
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	69ba      	ldr	r2, [r7, #24]
 800b052:	429a      	cmp	r2, r3
 800b054:	d302      	bcc.n	800b05c <UART_WaitOnFlagUntilTimeout+0x30>
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d101      	bne.n	800b060 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e04e      	b.n	800b0fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0304 	and.w	r3, r3, #4
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d037      	beq.n	800b0de <UART_WaitOnFlagUntilTimeout+0xb2>
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	2b80      	cmp	r3, #128	@ 0x80
 800b072:	d034      	beq.n	800b0de <UART_WaitOnFlagUntilTimeout+0xb2>
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	2b40      	cmp	r3, #64	@ 0x40
 800b078:	d031      	beq.n	800b0de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	69db      	ldr	r3, [r3, #28]
 800b080:	f003 0308 	and.w	r3, r3, #8
 800b084:	2b08      	cmp	r3, #8
 800b086:	d110      	bne.n	800b0aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2208      	movs	r2, #8
 800b08e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f000 f95b 	bl	800b34c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2208      	movs	r2, #8
 800b09a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e029      	b.n	800b0fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	69db      	ldr	r3, [r3, #28]
 800b0b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0b8:	d111      	bne.n	800b0de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b0c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f000 f941 	bl	800b34c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2220      	movs	r2, #32
 800b0ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	e00f      	b.n	800b0fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	69da      	ldr	r2, [r3, #28]
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	68ba      	ldr	r2, [r7, #8]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	bf0c      	ite	eq
 800b0ee:	2301      	moveq	r3, #1
 800b0f0:	2300      	movne	r3, #0
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	79fb      	ldrb	r3, [r7, #7]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d0a0      	beq.n	800b03e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
	...

0800b108 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b108:	b480      	push	{r7}
 800b10a:	b0a3      	sub	sp, #140	@ 0x8c
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	4613      	mov	r3, r2
 800b114:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	88fa      	ldrh	r2, [r7, #6]
 800b120:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	88fa      	ldrh	r2, [r7, #6]
 800b128:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2200      	movs	r2, #0
 800b130:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b13a:	d10e      	bne.n	800b15a <UART_Start_Receive_IT+0x52>
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	691b      	ldr	r3, [r3, #16]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d105      	bne.n	800b150 <UART_Start_Receive_IT+0x48>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b14a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b14e:	e02d      	b.n	800b1ac <UART_Start_Receive_IT+0xa4>
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	22ff      	movs	r2, #255	@ 0xff
 800b154:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b158:	e028      	b.n	800b1ac <UART_Start_Receive_IT+0xa4>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10d      	bne.n	800b17e <UART_Start_Receive_IT+0x76>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d104      	bne.n	800b174 <UART_Start_Receive_IT+0x6c>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	22ff      	movs	r2, #255	@ 0xff
 800b16e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b172:	e01b      	b.n	800b1ac <UART_Start_Receive_IT+0xa4>
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	227f      	movs	r2, #127	@ 0x7f
 800b178:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b17c:	e016      	b.n	800b1ac <UART_Start_Receive_IT+0xa4>
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b186:	d10d      	bne.n	800b1a4 <UART_Start_Receive_IT+0x9c>
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d104      	bne.n	800b19a <UART_Start_Receive_IT+0x92>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	227f      	movs	r2, #127	@ 0x7f
 800b194:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b198:	e008      	b.n	800b1ac <UART_Start_Receive_IT+0xa4>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	223f      	movs	r2, #63	@ 0x3f
 800b19e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b1a2:	e003      	b.n	800b1ac <UART_Start_Receive_IT+0xa4>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2222      	movs	r2, #34	@ 0x22
 800b1b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3308      	adds	r3, #8
 800b1c2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1c6:	e853 3f00 	ldrex	r3, [r3]
 800b1ca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b1cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1ce:	f043 0301 	orr.w	r3, r3, #1
 800b1d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3308      	adds	r3, #8
 800b1dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b1e0:	673a      	str	r2, [r7, #112]	@ 0x70
 800b1e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b1e6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b1e8:	e841 2300 	strex	r3, r2, [r1]
 800b1ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b1ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1e3      	bne.n	800b1bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1fc:	d14f      	bne.n	800b29e <UART_Start_Receive_IT+0x196>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b204:	88fa      	ldrh	r2, [r7, #6]
 800b206:	429a      	cmp	r2, r3
 800b208:	d349      	bcc.n	800b29e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b212:	d107      	bne.n	800b224 <UART_Start_Receive_IT+0x11c>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d103      	bne.n	800b224 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	4a47      	ldr	r2, [pc, #284]	@ (800b33c <UART_Start_Receive_IT+0x234>)
 800b220:	675a      	str	r2, [r3, #116]	@ 0x74
 800b222:	e002      	b.n	800b22a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	4a46      	ldr	r2, [pc, #280]	@ (800b340 <UART_Start_Receive_IT+0x238>)
 800b228:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d01a      	beq.n	800b268 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b23a:	e853 3f00 	ldrex	r3, [r3]
 800b23e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b246:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	461a      	mov	r2, r3
 800b250:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b254:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b256:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b258:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b25a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b25c:	e841 2300 	strex	r3, r2, [r1]
 800b260:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1e4      	bne.n	800b232 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3308      	adds	r3, #8
 800b26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b272:	e853 3f00 	ldrex	r3, [r3]
 800b276:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b27e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3308      	adds	r3, #8
 800b286:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b288:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b28a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b28e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b290:	e841 2300 	strex	r3, r2, [r1]
 800b294:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1e5      	bne.n	800b268 <UART_Start_Receive_IT+0x160>
 800b29c:	e046      	b.n	800b32c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2a6:	d107      	bne.n	800b2b8 <UART_Start_Receive_IT+0x1b0>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d103      	bne.n	800b2b8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	4a24      	ldr	r2, [pc, #144]	@ (800b344 <UART_Start_Receive_IT+0x23c>)
 800b2b4:	675a      	str	r2, [r3, #116]	@ 0x74
 800b2b6:	e002      	b.n	800b2be <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	4a23      	ldr	r2, [pc, #140]	@ (800b348 <UART_Start_Receive_IT+0x240>)
 800b2bc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d019      	beq.n	800b2fa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ce:	e853 3f00 	ldrex	r3, [r3]
 800b2d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b2da:	677b      	str	r3, [r7, #116]	@ 0x74
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2e6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b2ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2ec:	e841 2300 	strex	r3, r2, [r1]
 800b2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1e6      	bne.n	800b2c6 <UART_Start_Receive_IT+0x1be>
 800b2f8:	e018      	b.n	800b32c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	e853 3f00 	ldrex	r3, [r3]
 800b306:	613b      	str	r3, [r7, #16]
   return(result);
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	f043 0320 	orr.w	r3, r3, #32
 800b30e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	461a      	mov	r2, r3
 800b316:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b318:	623b      	str	r3, [r7, #32]
 800b31a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31c:	69f9      	ldr	r1, [r7, #28]
 800b31e:	6a3a      	ldr	r2, [r7, #32]
 800b320:	e841 2300 	strex	r3, r2, [r1]
 800b324:	61bb      	str	r3, [r7, #24]
   return(result);
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1e6      	bne.n	800b2fa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	378c      	adds	r7, #140	@ 0x8c
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	0800beb5 	.word	0x0800beb5
 800b340:	0800bb51 	.word	0x0800bb51
 800b344:	0800b999 	.word	0x0800b999
 800b348:	0800b7e1 	.word	0x0800b7e1

0800b34c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b095      	sub	sp, #84	@ 0x54
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b35c:	e853 3f00 	ldrex	r3, [r3]
 800b360:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b364:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b368:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	461a      	mov	r2, r3
 800b370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b372:	643b      	str	r3, [r7, #64]	@ 0x40
 800b374:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b376:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b378:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e6      	bne.n	800b354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	3308      	adds	r3, #8
 800b38c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38e:	6a3b      	ldr	r3, [r7, #32]
 800b390:	e853 3f00 	ldrex	r3, [r3]
 800b394:	61fb      	str	r3, [r7, #28]
   return(result);
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b39c:	f023 0301 	bic.w	r3, r3, #1
 800b3a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3b2:	e841 2300 	strex	r3, r2, [r1]
 800b3b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1e3      	bne.n	800b386 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d118      	bne.n	800b3f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	e853 3f00 	ldrex	r3, [r3]
 800b3d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	f023 0310 	bic.w	r3, r3, #16
 800b3da:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3e4:	61bb      	str	r3, [r7, #24]
 800b3e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e8:	6979      	ldr	r1, [r7, #20]
 800b3ea:	69ba      	ldr	r2, [r7, #24]
 800b3ec:	e841 2300 	strex	r3, r2, [r1]
 800b3f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d1e6      	bne.n	800b3c6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2220      	movs	r2, #32
 800b3fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b40c:	bf00      	nop
 800b40e:	3754      	adds	r7, #84	@ 0x54
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b424:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2200      	movs	r2, #0
 800b42a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f7ff f99a 	bl	800a770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b43c:	bf00      	nop
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b444:	b480      	push	{r7}
 800b446:	b08f      	sub	sp, #60	@ 0x3c
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b452:	2b21      	cmp	r3, #33	@ 0x21
 800b454:	d14c      	bne.n	800b4f0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d132      	bne.n	800b4c8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b468:	6a3b      	ldr	r3, [r7, #32]
 800b46a:	e853 3f00 	ldrex	r3, [r3]
 800b46e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b476:	637b      	str	r3, [r7, #52]	@ 0x34
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	461a      	mov	r2, r3
 800b47e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b482:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b484:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b488:	e841 2300 	strex	r3, r2, [r1]
 800b48c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1e6      	bne.n	800b462 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b2:	61bb      	str	r3, [r7, #24]
 800b4b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b6:	6979      	ldr	r1, [r7, #20]
 800b4b8:	69ba      	ldr	r2, [r7, #24]
 800b4ba:	e841 2300 	strex	r3, r2, [r1]
 800b4be:	613b      	str	r3, [r7, #16]
   return(result);
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1e6      	bne.n	800b494 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b4c6:	e013      	b.n	800b4f0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4cc:	781a      	ldrb	r2, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4d8:	1c5a      	adds	r2, r3, #1
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	b29a      	uxth	r2, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800b4f0:	bf00      	nop
 800b4f2:	373c      	adds	r7, #60	@ 0x3c
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b091      	sub	sp, #68	@ 0x44
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b50a:	2b21      	cmp	r3, #33	@ 0x21
 800b50c:	d151      	bne.n	800b5b2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b514:	b29b      	uxth	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d132      	bne.n	800b580 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b522:	e853 3f00 	ldrex	r3, [r3]
 800b526:	623b      	str	r3, [r7, #32]
   return(result);
 800b528:	6a3b      	ldr	r3, [r7, #32]
 800b52a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b52e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	461a      	mov	r2, r3
 800b536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b538:	633b      	str	r3, [r7, #48]	@ 0x30
 800b53a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b53e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b540:	e841 2300 	strex	r3, r2, [r1]
 800b544:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1e6      	bne.n	800b51a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	e853 3f00 	ldrex	r3, [r3]
 800b558:	60fb      	str	r3, [r7, #12]
   return(result);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b560:	637b      	str	r3, [r7, #52]	@ 0x34
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	461a      	mov	r2, r3
 800b568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b56a:	61fb      	str	r3, [r7, #28]
 800b56c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56e:	69b9      	ldr	r1, [r7, #24]
 800b570:	69fa      	ldr	r2, [r7, #28]
 800b572:	e841 2300 	strex	r3, r2, [r1]
 800b576:	617b      	str	r3, [r7, #20]
   return(result);
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1e6      	bne.n	800b54c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b57e:	e018      	b.n	800b5b2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b584:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	461a      	mov	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b594:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b59a:	1c9a      	adds	r2, r3, #2
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800b5b2:	bf00      	nop
 800b5b4:	3744      	adds	r7, #68	@ 0x44
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b091      	sub	sp, #68	@ 0x44
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5cc:	2b21      	cmp	r3, #33	@ 0x21
 800b5ce:	d160      	bne.n	800b692 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b5d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b5d8:	e057      	b.n	800b68a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d133      	bne.n	800b64e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	3308      	adds	r3, #8
 800b5ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f0:	e853 3f00 	ldrex	r3, [r3]
 800b5f4:	623b      	str	r3, [r7, #32]
   return(result);
 800b5f6:	6a3b      	ldr	r3, [r7, #32]
 800b5f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b5fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3308      	adds	r3, #8
 800b604:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b606:	633a      	str	r2, [r7, #48]	@ 0x30
 800b608:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b60c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b60e:	e841 2300 	strex	r3, r2, [r1]
 800b612:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1e5      	bne.n	800b5e6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	e853 3f00 	ldrex	r3, [r3]
 800b626:	60fb      	str	r3, [r7, #12]
   return(result);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b62e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	461a      	mov	r2, r3
 800b636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b638:	61fb      	str	r3, [r7, #28]
 800b63a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63c:	69b9      	ldr	r1, [r7, #24]
 800b63e:	69fa      	ldr	r2, [r7, #28]
 800b640:	e841 2300 	strex	r3, r2, [r1]
 800b644:	617b      	str	r3, [r7, #20]
   return(result);
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1e6      	bne.n	800b61a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b64c:	e021      	b.n	800b692 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	69db      	ldr	r3, [r3, #28]
 800b654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d013      	beq.n	800b684 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b660:	781a      	ldrb	r2, [r3, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b66c:	1c5a      	adds	r2, r3, #1
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b678:	b29b      	uxth	r3, r3
 800b67a:	3b01      	subs	r3, #1
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b684:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b686:	3b01      	subs	r3, #1
 800b688:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b68a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1a4      	bne.n	800b5da <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b690:	e7ff      	b.n	800b692 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800b692:	bf00      	nop
 800b694:	3744      	adds	r7, #68	@ 0x44
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b091      	sub	sp, #68	@ 0x44
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6ac:	2b21      	cmp	r3, #33	@ 0x21
 800b6ae:	d165      	bne.n	800b77c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b6b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b6b8:	e05c      	b.n	800b774 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d133      	bne.n	800b72e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ce:	6a3b      	ldr	r3, [r7, #32]
 800b6d0:	e853 3f00 	ldrex	r3, [r3]
 800b6d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b6dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6ee:	e841 2300 	strex	r3, r2, [r1]
 800b6f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1e5      	bne.n	800b6c6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	e853 3f00 	ldrex	r3, [r3]
 800b706:	60bb      	str	r3, [r7, #8]
   return(result);
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b70e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	461a      	mov	r2, r3
 800b716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b718:	61bb      	str	r3, [r7, #24]
 800b71a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b71c:	6979      	ldr	r1, [r7, #20]
 800b71e:	69ba      	ldr	r2, [r7, #24]
 800b720:	e841 2300 	strex	r3, r2, [r1]
 800b724:	613b      	str	r3, [r7, #16]
   return(result);
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d1e6      	bne.n	800b6fa <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b72c:	e026      	b.n	800b77c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	69db      	ldr	r3, [r3, #28]
 800b734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d018      	beq.n	800b76e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b740:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b744:	881b      	ldrh	r3, [r3, #0]
 800b746:	461a      	mov	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b750:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b756:	1c9a      	adds	r2, r3, #2
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b762:	b29b      	uxth	r3, r3
 800b764:	3b01      	subs	r3, #1
 800b766:	b29a      	uxth	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b76e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b770:	3b01      	subs	r3, #1
 800b772:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b774:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b776:	2b00      	cmp	r3, #0
 800b778:	d19f      	bne.n	800b6ba <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b77a:	e7ff      	b.n	800b77c <UART_TxISR_16BIT_FIFOEN+0xde>
 800b77c:	bf00      	nop
 800b77e:	3744      	adds	r7, #68	@ 0x44
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b088      	sub	sp, #32
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	e853 3f00 	ldrex	r3, [r3]
 800b79c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7a4:	61fb      	str	r3, [r7, #28]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	61bb      	str	r3, [r7, #24]
 800b7b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b2:	6979      	ldr	r1, [r7, #20]
 800b7b4:	69ba      	ldr	r2, [r7, #24]
 800b7b6:	e841 2300 	strex	r3, r2, [r1]
 800b7ba:	613b      	str	r3, [r7, #16]
   return(result);
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d1e6      	bne.n	800b790 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2220      	movs	r2, #32
 800b7c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7fe ffc3 	bl	800a75c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7d6:	bf00      	nop
 800b7d8:	3720      	adds	r7, #32
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
	...

0800b7e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b09c      	sub	sp, #112	@ 0x70
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b7ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7f8:	2b22      	cmp	r3, #34	@ 0x22
 800b7fa:	f040 80be 	bne.w	800b97a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b804:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b808:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b80c:	b2d9      	uxtb	r1, r3
 800b80e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b812:	b2da      	uxtb	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b818:	400a      	ands	r2, r1
 800b81a:	b2d2      	uxtb	r2, r2
 800b81c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b822:	1c5a      	adds	r2, r3, #1
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b82e:	b29b      	uxth	r3, r3
 800b830:	3b01      	subs	r3, #1
 800b832:	b29a      	uxth	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b840:	b29b      	uxth	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	f040 80a1 	bne.w	800b98a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b850:	e853 3f00 	ldrex	r3, [r3]
 800b854:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b858:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b85c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	461a      	mov	r2, r3
 800b864:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b866:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b868:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b86c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b86e:	e841 2300 	strex	r3, r2, [r1]
 800b872:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1e6      	bne.n	800b848 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3308      	adds	r3, #8
 800b880:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b884:	e853 3f00 	ldrex	r3, [r3]
 800b888:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b88c:	f023 0301 	bic.w	r3, r3, #1
 800b890:	667b      	str	r3, [r7, #100]	@ 0x64
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3308      	adds	r3, #8
 800b898:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b89a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b89c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b8a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8a2:	e841 2300 	strex	r3, r2, [r1]
 800b8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b8a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e5      	bne.n	800b87a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2220      	movs	r2, #32
 800b8b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a33      	ldr	r2, [pc, #204]	@ (800b994 <UART_RxISR_8BIT+0x1b4>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d01f      	beq.n	800b90c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d018      	beq.n	800b90c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e2:	e853 3f00 	ldrex	r3, [r3]
 800b8e6:	623b      	str	r3, [r7, #32]
   return(result);
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b8ee:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b900:	e841 2300 	strex	r3, r2, [r1]
 800b904:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1e6      	bne.n	800b8da <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b910:	2b01      	cmp	r3, #1
 800b912:	d12e      	bne.n	800b972 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	e853 3f00 	ldrex	r3, [r3]
 800b926:	60fb      	str	r3, [r7, #12]
   return(result);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f023 0310 	bic.w	r3, r3, #16
 800b92e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	461a      	mov	r2, r3
 800b936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b938:	61fb      	str	r3, [r7, #28]
 800b93a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93c:	69b9      	ldr	r1, [r7, #24]
 800b93e:	69fa      	ldr	r2, [r7, #28]
 800b940:	e841 2300 	strex	r3, r2, [r1]
 800b944:	617b      	str	r3, [r7, #20]
   return(result);
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1e6      	bne.n	800b91a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	69db      	ldr	r3, [r3, #28]
 800b952:	f003 0310 	and.w	r3, r3, #16
 800b956:	2b10      	cmp	r3, #16
 800b958:	d103      	bne.n	800b962 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2210      	movs	r2, #16
 800b960:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b968:	4619      	mov	r1, r3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7fe ff0a 	bl	800a784 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b970:	e00b      	b.n	800b98a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7f5 fd0e 	bl	8001394 <HAL_UART_RxCpltCallback>
}
 800b978:	e007      	b.n	800b98a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	699a      	ldr	r2, [r3, #24]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f042 0208 	orr.w	r2, r2, #8
 800b988:	619a      	str	r2, [r3, #24]
}
 800b98a:	bf00      	nop
 800b98c:	3770      	adds	r7, #112	@ 0x70
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	40008000 	.word	0x40008000

0800b998 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b09c      	sub	sp, #112	@ 0x70
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b9a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b9b0:	2b22      	cmp	r3, #34	@ 0x22
 800b9b2:	f040 80be 	bne.w	800bb32 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b9c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b9ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9da:	1c9a      	adds	r2, r3, #2
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f040 80a1 	bne.w	800bb42 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba08:	e853 3f00 	ldrex	r3, [r3]
 800ba0c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ba0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba14:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba1e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba20:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba26:	e841 2300 	strex	r3, r2, [r1]
 800ba2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1e6      	bne.n	800ba00 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3308      	adds	r3, #8
 800ba38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba3c:	e853 3f00 	ldrex	r3, [r3]
 800ba40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba44:	f023 0301 	bic.w	r3, r3, #1
 800ba48:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3308      	adds	r3, #8
 800ba50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba52:	643a      	str	r2, [r7, #64]	@ 0x40
 800ba54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba5a:	e841 2300 	strex	r3, r2, [r1]
 800ba5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1e5      	bne.n	800ba32 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2220      	movs	r2, #32
 800ba6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a33      	ldr	r2, [pc, #204]	@ (800bb4c <UART_RxISR_16BIT+0x1b4>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d01f      	beq.n	800bac4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d018      	beq.n	800bac4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba98:	6a3b      	ldr	r3, [r7, #32]
 800ba9a:	e853 3f00 	ldrex	r3, [r3]
 800ba9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800baa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	461a      	mov	r2, r3
 800baae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bab2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bab8:	e841 2300 	strex	r3, r2, [r1]
 800babc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800babe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1e6      	bne.n	800ba92 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d12e      	bne.n	800bb2a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	e853 3f00 	ldrex	r3, [r3]
 800bade:	60bb      	str	r3, [r7, #8]
   return(result);
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	f023 0310 	bic.w	r3, r3, #16
 800bae6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	461a      	mov	r2, r3
 800baee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baf0:	61bb      	str	r3, [r7, #24]
 800baf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf4:	6979      	ldr	r1, [r7, #20]
 800baf6:	69ba      	ldr	r2, [r7, #24]
 800baf8:	e841 2300 	strex	r3, r2, [r1]
 800bafc:	613b      	str	r3, [r7, #16]
   return(result);
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1e6      	bne.n	800bad2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	69db      	ldr	r3, [r3, #28]
 800bb0a:	f003 0310 	and.w	r3, r3, #16
 800bb0e:	2b10      	cmp	r3, #16
 800bb10:	d103      	bne.n	800bb1a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2210      	movs	r2, #16
 800bb18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb20:	4619      	mov	r1, r3
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7fe fe2e 	bl	800a784 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb28:	e00b      	b.n	800bb42 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7f5 fc32 	bl	8001394 <HAL_UART_RxCpltCallback>
}
 800bb30:	e007      	b.n	800bb42 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	699a      	ldr	r2, [r3, #24]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f042 0208 	orr.w	r2, r2, #8
 800bb40:	619a      	str	r2, [r3, #24]
}
 800bb42:	bf00      	nop
 800bb44:	3770      	adds	r7, #112	@ 0x70
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	40008000 	.word	0x40008000

0800bb50 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b0ac      	sub	sp, #176	@ 0xb0
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bb5e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	69db      	ldr	r3, [r3, #28]
 800bb68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb86:	2b22      	cmp	r3, #34	@ 0x22
 800bb88:	f040 8183 	bne.w	800be92 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bb92:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bb96:	e126      	b.n	800bde6 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb9e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bba2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800bba6:	b2d9      	uxtb	r1, r3
 800bba8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbb2:	400a      	ands	r2, r1
 800bbb4:	b2d2      	uxtb	r2, r2
 800bbb6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbbc:	1c5a      	adds	r2, r3, #1
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	b29a      	uxth	r2, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	69db      	ldr	r3, [r3, #28]
 800bbda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bbde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbe2:	f003 0307 	and.w	r3, r3, #7
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d053      	beq.n	800bc92 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bbea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d011      	beq.n	800bc1a <UART_RxISR_8BIT_FIFOEN+0xca>
 800bbf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00b      	beq.n	800bc1a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2201      	movs	r2, #1
 800bc08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc10:	f043 0201 	orr.w	r2, r3, #1
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc1e:	f003 0302 	and.w	r3, r3, #2
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d011      	beq.n	800bc4a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800bc26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc2a:	f003 0301 	and.w	r3, r3, #1
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00b      	beq.n	800bc4a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2202      	movs	r2, #2
 800bc38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc40:	f043 0204 	orr.w	r2, r3, #4
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc4e:	f003 0304 	and.w	r3, r3, #4
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d011      	beq.n	800bc7a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bc56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc5a:	f003 0301 	and.w	r3, r3, #1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00b      	beq.n	800bc7a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2204      	movs	r2, #4
 800bc68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc70:	f043 0202 	orr.w	r2, r3, #2
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d006      	beq.n	800bc92 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f7fe fd73 	bl	800a770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f040 80a3 	bne.w	800bde6 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bca8:	e853 3f00 	ldrex	r3, [r3]
 800bcac:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800bcae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bcc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bcc4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800bcc8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800bcca:	e841 2300 	strex	r3, r2, [r1]
 800bcce:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800bcd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d1e4      	bne.n	800bca0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3308      	adds	r3, #8
 800bcdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bce0:	e853 3f00 	ldrex	r3, [r3]
 800bce4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800bce6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bce8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bcec:	f023 0301 	bic.w	r3, r3, #1
 800bcf0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bcfe:	66ba      	str	r2, [r7, #104]	@ 0x68
 800bd00:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd02:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800bd04:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bd06:	e841 2300 	strex	r3, r2, [r1]
 800bd0a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800bd0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1e1      	bne.n	800bcd6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2220      	movs	r2, #32
 800bd16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a60      	ldr	r2, [pc, #384]	@ (800beac <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d021      	beq.n	800bd74 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d01a      	beq.n	800bd74 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd46:	e853 3f00 	ldrex	r3, [r3]
 800bd4a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bd4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bd52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bd60:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd62:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd64:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bd66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bd68:	e841 2300 	strex	r3, r2, [r1]
 800bd6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bd6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1e4      	bne.n	800bd3e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d130      	bne.n	800bdde <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd8a:	e853 3f00 	ldrex	r3, [r3]
 800bd8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd92:	f023 0310 	bic.w	r3, r3, #16
 800bd96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bda4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bda6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bdaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bdac:	e841 2300 	strex	r3, r2, [r1]
 800bdb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bdb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1e4      	bne.n	800bd82 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	69db      	ldr	r3, [r3, #28]
 800bdbe:	f003 0310 	and.w	r3, r3, #16
 800bdc2:	2b10      	cmp	r3, #16
 800bdc4:	d103      	bne.n	800bdce <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	2210      	movs	r2, #16
 800bdcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f7fe fcd4 	bl	800a784 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800bddc:	e00e      	b.n	800bdfc <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7f5 fad8 	bl	8001394 <HAL_UART_RxCpltCallback>
        break;
 800bde4:	e00a      	b.n	800bdfc <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bde6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d006      	beq.n	800bdfc <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800bdee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bdf2:	f003 0320 	and.w	r3, r3, #32
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f47f aece 	bne.w	800bb98 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be02:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800be06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d049      	beq.n	800bea2 <UART_RxISR_8BIT_FIFOEN+0x352>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800be14:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800be18:	429a      	cmp	r2, r3
 800be1a:	d242      	bcs.n	800bea2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	3308      	adds	r3, #8
 800be22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be24:	6a3b      	ldr	r3, [r7, #32]
 800be26:	e853 3f00 	ldrex	r3, [r3]
 800be2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	3308      	adds	r3, #8
 800be3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800be40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be48:	e841 2300 	strex	r3, r2, [r1]
 800be4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1e3      	bne.n	800be1c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a16      	ldr	r2, [pc, #88]	@ (800beb0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800be58:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	e853 3f00 	ldrex	r3, [r3]
 800be66:	60bb      	str	r3, [r7, #8]
   return(result);
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	f043 0320 	orr.w	r3, r3, #32
 800be6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	461a      	mov	r2, r3
 800be78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800be7c:	61bb      	str	r3, [r7, #24]
 800be7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be80:	6979      	ldr	r1, [r7, #20]
 800be82:	69ba      	ldr	r2, [r7, #24]
 800be84:	e841 2300 	strex	r3, r2, [r1]
 800be88:	613b      	str	r3, [r7, #16]
   return(result);
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d1e4      	bne.n	800be5a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be90:	e007      	b.n	800bea2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	699a      	ldr	r2, [r3, #24]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f042 0208 	orr.w	r2, r2, #8
 800bea0:	619a      	str	r2, [r3, #24]
}
 800bea2:	bf00      	nop
 800bea4:	37b0      	adds	r7, #176	@ 0xb0
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	40008000 	.word	0x40008000
 800beb0:	0800b7e1 	.word	0x0800b7e1

0800beb4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b0ae      	sub	sp, #184	@ 0xb8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bec2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	69db      	ldr	r3, [r3, #28]
 800becc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800beea:	2b22      	cmp	r3, #34	@ 0x22
 800beec:	f040 8187 	bne.w	800c1fe <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bef6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800befa:	e12a      	b.n	800c152 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf02:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800bf0e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800bf12:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800bf16:	4013      	ands	r3, r2
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bf1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf24:	1c9a      	adds	r2, r3, #2
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	3b01      	subs	r3, #1
 800bf34:	b29a      	uxth	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	69db      	ldr	r3, [r3, #28]
 800bf42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bf46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bf4a:	f003 0307 	and.w	r3, r3, #7
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d053      	beq.n	800bffa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d011      	beq.n	800bf82 <UART_RxISR_16BIT_FIFOEN+0xce>
 800bf5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00b      	beq.n	800bf82 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf78:	f043 0201 	orr.w	r2, r3, #1
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bf86:	f003 0302 	and.w	r3, r3, #2
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d011      	beq.n	800bfb2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bf8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bf92:	f003 0301 	and.w	r3, r3, #1
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00b      	beq.n	800bfb2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2202      	movs	r2, #2
 800bfa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfa8:	f043 0204 	orr.w	r2, r3, #4
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bfb6:	f003 0304 	and.w	r3, r3, #4
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d011      	beq.n	800bfe2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bfbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00b      	beq.n	800bfe2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	2204      	movs	r2, #4
 800bfd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfd8:	f043 0202 	orr.w	r2, r3, #2
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d006      	beq.n	800bffa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f7fe fbbf 	bl	800a770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c000:	b29b      	uxth	r3, r3
 800c002:	2b00      	cmp	r3, #0
 800c004:	f040 80a5 	bne.w	800c152 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c010:	e853 3f00 	ldrex	r3, [r3]
 800c014:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c016:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c01c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	461a      	mov	r2, r3
 800c026:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c02a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c02e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c030:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c032:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c036:	e841 2300 	strex	r3, r2, [r1]
 800c03a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c03c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d1e2      	bne.n	800c008 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	3308      	adds	r3, #8
 800c048:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c04c:	e853 3f00 	ldrex	r3, [r3]
 800c050:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c052:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c054:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c058:	f023 0301 	bic.w	r3, r3, #1
 800c05c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3308      	adds	r3, #8
 800c066:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c06a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c06c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c070:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c072:	e841 2300 	strex	r3, r2, [r1]
 800c076:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1e1      	bne.n	800c042 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2220      	movs	r2, #32
 800c082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a60      	ldr	r2, [pc, #384]	@ (800c218 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d021      	beq.n	800c0e0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d01a      	beq.n	800c0e0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0b2:	e853 3f00 	ldrex	r3, [r3]
 800c0b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c0b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c0be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c0cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c0ce:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c0d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0d4:	e841 2300 	strex	r3, r2, [r1]
 800c0d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c0da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d1e4      	bne.n	800c0aa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d130      	bne.n	800c14a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f6:	e853 3f00 	ldrex	r3, [r3]
 800c0fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c0fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0fe:	f023 0310 	bic.w	r3, r3, #16
 800c102:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	461a      	mov	r2, r3
 800c10c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c110:	647b      	str	r3, [r7, #68]	@ 0x44
 800c112:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c118:	e841 2300 	strex	r3, r2, [r1]
 800c11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c11e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1e4      	bne.n	800c0ee <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	69db      	ldr	r3, [r3, #28]
 800c12a:	f003 0310 	and.w	r3, r3, #16
 800c12e:	2b10      	cmp	r3, #16
 800c130:	d103      	bne.n	800c13a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2210      	movs	r2, #16
 800c138:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c140:	4619      	mov	r1, r3
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7fe fb1e 	bl	800a784 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c148:	e00e      	b.n	800c168 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f7f5 f922 	bl	8001394 <HAL_UART_RxCpltCallback>
        break;
 800c150:	e00a      	b.n	800c168 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c152:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c156:	2b00      	cmp	r3, #0
 800c158:	d006      	beq.n	800c168 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800c15a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c15e:	f003 0320 	and.w	r3, r3, #32
 800c162:	2b00      	cmp	r3, #0
 800c164:	f47f aeca 	bne.w	800befc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c16e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c172:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c176:	2b00      	cmp	r3, #0
 800c178:	d049      	beq.n	800c20e <UART_RxISR_16BIT_FIFOEN+0x35a>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c180:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c184:	429a      	cmp	r2, r3
 800c186:	d242      	bcs.n	800c20e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	3308      	adds	r3, #8
 800c18e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c192:	e853 3f00 	ldrex	r3, [r3]
 800c196:	623b      	str	r3, [r7, #32]
   return(result);
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c19e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	3308      	adds	r3, #8
 800c1a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c1ac:	633a      	str	r2, [r7, #48]	@ 0x30
 800c1ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1b4:	e841 2300 	strex	r3, r2, [r1]
 800c1b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1e3      	bne.n	800c188 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a16      	ldr	r2, [pc, #88]	@ (800c21c <UART_RxISR_16BIT_FIFOEN+0x368>)
 800c1c4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	e853 3f00 	ldrex	r3, [r3]
 800c1d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f043 0320 	orr.w	r3, r3, #32
 800c1da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c1e8:	61fb      	str	r3, [r7, #28]
 800c1ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ec:	69b9      	ldr	r1, [r7, #24]
 800c1ee:	69fa      	ldr	r2, [r7, #28]
 800c1f0:	e841 2300 	strex	r3, r2, [r1]
 800c1f4:	617b      	str	r3, [r7, #20]
   return(result);
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1e4      	bne.n	800c1c6 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1fc:	e007      	b.n	800c20e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	699a      	ldr	r2, [r3, #24]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f042 0208 	orr.w	r2, r2, #8
 800c20c:	619a      	str	r2, [r3, #24]
}
 800c20e:	bf00      	nop
 800c210:	37b8      	adds	r7, #184	@ 0xb8
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	40008000 	.word	0x40008000
 800c21c:	0800b999 	.word	0x0800b999

0800c220 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d101      	bne.n	800c272 <HAL_UARTEx_DisableFifoMode+0x16>
 800c26e:	2302      	movs	r3, #2
 800c270:	e027      	b.n	800c2c2 <HAL_UARTEx_DisableFifoMode+0x66>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2201      	movs	r2, #1
 800c276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2224      	movs	r2, #36	@ 0x24
 800c27e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f022 0201 	bic.w	r2, r2, #1
 800c298:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c2a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2220      	movs	r2, #32
 800c2b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b084      	sub	sp, #16
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d101      	bne.n	800c2e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c2e2:	2302      	movs	r3, #2
 800c2e4:	e02d      	b.n	800c342 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2224      	movs	r2, #36	@ 0x24
 800c2f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f022 0201 	bic.w	r2, r2, #1
 800c30c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	430a      	orrs	r2, r1
 800c320:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f850 	bl	800c3c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2220      	movs	r2, #32
 800c334:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b084      	sub	sp, #16
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
 800c352:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d101      	bne.n	800c362 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c35e:	2302      	movs	r3, #2
 800c360:	e02d      	b.n	800c3be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2201      	movs	r2, #1
 800c366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2224      	movs	r2, #36	@ 0x24
 800c36e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f022 0201 	bic.w	r2, r2, #1
 800c388:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	430a      	orrs	r2, r1
 800c39c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f812 	bl	800c3c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2220      	movs	r2, #32
 800c3b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
	...

0800c3c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d108      	bne.n	800c3ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c3e8:	e031      	b.n	800c44e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c3ea:	2308      	movs	r3, #8
 800c3ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c3ee:	2308      	movs	r3, #8
 800c3f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	0e5b      	lsrs	r3, r3, #25
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	f003 0307 	and.w	r3, r3, #7
 800c400:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	0f5b      	lsrs	r3, r3, #29
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	f003 0307 	and.w	r3, r3, #7
 800c410:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c412:	7bbb      	ldrb	r3, [r7, #14]
 800c414:	7b3a      	ldrb	r2, [r7, #12]
 800c416:	4911      	ldr	r1, [pc, #68]	@ (800c45c <UARTEx_SetNbDataToProcess+0x94>)
 800c418:	5c8a      	ldrb	r2, [r1, r2]
 800c41a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c41e:	7b3a      	ldrb	r2, [r7, #12]
 800c420:	490f      	ldr	r1, [pc, #60]	@ (800c460 <UARTEx_SetNbDataToProcess+0x98>)
 800c422:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c424:	fb93 f3f2 	sdiv	r3, r3, r2
 800c428:	b29a      	uxth	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c430:	7bfb      	ldrb	r3, [r7, #15]
 800c432:	7b7a      	ldrb	r2, [r7, #13]
 800c434:	4909      	ldr	r1, [pc, #36]	@ (800c45c <UARTEx_SetNbDataToProcess+0x94>)
 800c436:	5c8a      	ldrb	r2, [r1, r2]
 800c438:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c43c:	7b7a      	ldrb	r2, [r7, #13]
 800c43e:	4908      	ldr	r1, [pc, #32]	@ (800c460 <UARTEx_SetNbDataToProcess+0x98>)
 800c440:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c442:	fb93 f3f2 	sdiv	r3, r3, r2
 800c446:	b29a      	uxth	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c44e:	bf00      	nop
 800c450:	3714      	adds	r7, #20
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	0800f7c8 	.word	0x0800f7c8
 800c460:	0800f7d0 	.word	0x0800f7d0

0800c464 <atof>:
 800c464:	2100      	movs	r1, #0
 800c466:	f000 be03 	b.w	800d070 <strtod>

0800c46a <sulp>:
 800c46a:	b570      	push	{r4, r5, r6, lr}
 800c46c:	4604      	mov	r4, r0
 800c46e:	460d      	mov	r5, r1
 800c470:	ec45 4b10 	vmov	d0, r4, r5
 800c474:	4616      	mov	r6, r2
 800c476:	f001 ff8b 	bl	800e390 <__ulp>
 800c47a:	ec51 0b10 	vmov	r0, r1, d0
 800c47e:	b17e      	cbz	r6, 800c4a0 <sulp+0x36>
 800c480:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c484:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c488:	2b00      	cmp	r3, #0
 800c48a:	dd09      	ble.n	800c4a0 <sulp+0x36>
 800c48c:	051b      	lsls	r3, r3, #20
 800c48e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c492:	2400      	movs	r4, #0
 800c494:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c498:	4622      	mov	r2, r4
 800c49a:	462b      	mov	r3, r5
 800c49c:	f7f4 f8d4 	bl	8000648 <__aeabi_dmul>
 800c4a0:	ec41 0b10 	vmov	d0, r0, r1
 800c4a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c4a8 <_strtod_l>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	b09f      	sub	sp, #124	@ 0x7c
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	921a      	str	r2, [sp, #104]	@ 0x68
 800c4b6:	9005      	str	r0, [sp, #20]
 800c4b8:	f04f 0a00 	mov.w	sl, #0
 800c4bc:	f04f 0b00 	mov.w	fp, #0
 800c4c0:	460a      	mov	r2, r1
 800c4c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4c4:	7811      	ldrb	r1, [r2, #0]
 800c4c6:	292b      	cmp	r1, #43	@ 0x2b
 800c4c8:	d04a      	beq.n	800c560 <_strtod_l+0xb8>
 800c4ca:	d838      	bhi.n	800c53e <_strtod_l+0x96>
 800c4cc:	290d      	cmp	r1, #13
 800c4ce:	d832      	bhi.n	800c536 <_strtod_l+0x8e>
 800c4d0:	2908      	cmp	r1, #8
 800c4d2:	d832      	bhi.n	800c53a <_strtod_l+0x92>
 800c4d4:	2900      	cmp	r1, #0
 800c4d6:	d03b      	beq.n	800c550 <_strtod_l+0xa8>
 800c4d8:	2200      	movs	r2, #0
 800c4da:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c4dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c4de:	782a      	ldrb	r2, [r5, #0]
 800c4e0:	2a30      	cmp	r2, #48	@ 0x30
 800c4e2:	f040 80b3 	bne.w	800c64c <_strtod_l+0x1a4>
 800c4e6:	786a      	ldrb	r2, [r5, #1]
 800c4e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c4ec:	2a58      	cmp	r2, #88	@ 0x58
 800c4ee:	d16e      	bne.n	800c5ce <_strtod_l+0x126>
 800c4f0:	9302      	str	r3, [sp, #8]
 800c4f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	ab1a      	add	r3, sp, #104	@ 0x68
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	4a8e      	ldr	r2, [pc, #568]	@ (800c734 <_strtod_l+0x28c>)
 800c4fc:	9805      	ldr	r0, [sp, #20]
 800c4fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c500:	a919      	add	r1, sp, #100	@ 0x64
 800c502:	f001 f83f 	bl	800d584 <__gethex>
 800c506:	f010 060f 	ands.w	r6, r0, #15
 800c50a:	4604      	mov	r4, r0
 800c50c:	d005      	beq.n	800c51a <_strtod_l+0x72>
 800c50e:	2e06      	cmp	r6, #6
 800c510:	d128      	bne.n	800c564 <_strtod_l+0xbc>
 800c512:	3501      	adds	r5, #1
 800c514:	2300      	movs	r3, #0
 800c516:	9519      	str	r5, [sp, #100]	@ 0x64
 800c518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c51a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f040 858e 	bne.w	800d03e <_strtod_l+0xb96>
 800c522:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c524:	b1cb      	cbz	r3, 800c55a <_strtod_l+0xb2>
 800c526:	4652      	mov	r2, sl
 800c528:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c52c:	ec43 2b10 	vmov	d0, r2, r3
 800c530:	b01f      	add	sp, #124	@ 0x7c
 800c532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c536:	2920      	cmp	r1, #32
 800c538:	d1ce      	bne.n	800c4d8 <_strtod_l+0x30>
 800c53a:	3201      	adds	r2, #1
 800c53c:	e7c1      	b.n	800c4c2 <_strtod_l+0x1a>
 800c53e:	292d      	cmp	r1, #45	@ 0x2d
 800c540:	d1ca      	bne.n	800c4d8 <_strtod_l+0x30>
 800c542:	2101      	movs	r1, #1
 800c544:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c546:	1c51      	adds	r1, r2, #1
 800c548:	9119      	str	r1, [sp, #100]	@ 0x64
 800c54a:	7852      	ldrb	r2, [r2, #1]
 800c54c:	2a00      	cmp	r2, #0
 800c54e:	d1c5      	bne.n	800c4dc <_strtod_l+0x34>
 800c550:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c552:	9419      	str	r4, [sp, #100]	@ 0x64
 800c554:	2b00      	cmp	r3, #0
 800c556:	f040 8570 	bne.w	800d03a <_strtod_l+0xb92>
 800c55a:	4652      	mov	r2, sl
 800c55c:	465b      	mov	r3, fp
 800c55e:	e7e5      	b.n	800c52c <_strtod_l+0x84>
 800c560:	2100      	movs	r1, #0
 800c562:	e7ef      	b.n	800c544 <_strtod_l+0x9c>
 800c564:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c566:	b13a      	cbz	r2, 800c578 <_strtod_l+0xd0>
 800c568:	2135      	movs	r1, #53	@ 0x35
 800c56a:	a81c      	add	r0, sp, #112	@ 0x70
 800c56c:	f002 f80a 	bl	800e584 <__copybits>
 800c570:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c572:	9805      	ldr	r0, [sp, #20]
 800c574:	f001 fbd8 	bl	800dd28 <_Bfree>
 800c578:	3e01      	subs	r6, #1
 800c57a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c57c:	2e04      	cmp	r6, #4
 800c57e:	d806      	bhi.n	800c58e <_strtod_l+0xe6>
 800c580:	e8df f006 	tbb	[pc, r6]
 800c584:	201d0314 	.word	0x201d0314
 800c588:	14          	.byte	0x14
 800c589:	00          	.byte	0x00
 800c58a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c58e:	05e1      	lsls	r1, r4, #23
 800c590:	bf48      	it	mi
 800c592:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c596:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c59a:	0d1b      	lsrs	r3, r3, #20
 800c59c:	051b      	lsls	r3, r3, #20
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1bb      	bne.n	800c51a <_strtod_l+0x72>
 800c5a2:	f000 fef7 	bl	800d394 <__errno>
 800c5a6:	2322      	movs	r3, #34	@ 0x22
 800c5a8:	6003      	str	r3, [r0, #0]
 800c5aa:	e7b6      	b.n	800c51a <_strtod_l+0x72>
 800c5ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c5b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c5b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c5b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c5bc:	e7e7      	b.n	800c58e <_strtod_l+0xe6>
 800c5be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c73c <_strtod_l+0x294>
 800c5c2:	e7e4      	b.n	800c58e <_strtod_l+0xe6>
 800c5c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c5c8:	f04f 3aff 	mov.w	sl, #4294967295
 800c5cc:	e7df      	b.n	800c58e <_strtod_l+0xe6>
 800c5ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5d4:	785b      	ldrb	r3, [r3, #1]
 800c5d6:	2b30      	cmp	r3, #48	@ 0x30
 800c5d8:	d0f9      	beq.n	800c5ce <_strtod_l+0x126>
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d09d      	beq.n	800c51a <_strtod_l+0x72>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	9308      	str	r3, [sp, #32]
 800c5ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5ec:	461f      	mov	r7, r3
 800c5ee:	220a      	movs	r2, #10
 800c5f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c5f2:	7805      	ldrb	r5, [r0, #0]
 800c5f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c5f8:	b2d9      	uxtb	r1, r3
 800c5fa:	2909      	cmp	r1, #9
 800c5fc:	d928      	bls.n	800c650 <_strtod_l+0x1a8>
 800c5fe:	494e      	ldr	r1, [pc, #312]	@ (800c738 <_strtod_l+0x290>)
 800c600:	2201      	movs	r2, #1
 800c602:	f000 fe6e 	bl	800d2e2 <strncmp>
 800c606:	2800      	cmp	r0, #0
 800c608:	d032      	beq.n	800c670 <_strtod_l+0x1c8>
 800c60a:	2000      	movs	r0, #0
 800c60c:	462a      	mov	r2, r5
 800c60e:	4681      	mov	r9, r0
 800c610:	463d      	mov	r5, r7
 800c612:	4603      	mov	r3, r0
 800c614:	2a65      	cmp	r2, #101	@ 0x65
 800c616:	d001      	beq.n	800c61c <_strtod_l+0x174>
 800c618:	2a45      	cmp	r2, #69	@ 0x45
 800c61a:	d114      	bne.n	800c646 <_strtod_l+0x19e>
 800c61c:	b91d      	cbnz	r5, 800c626 <_strtod_l+0x17e>
 800c61e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c620:	4302      	orrs	r2, r0
 800c622:	d095      	beq.n	800c550 <_strtod_l+0xa8>
 800c624:	2500      	movs	r5, #0
 800c626:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c628:	1c62      	adds	r2, r4, #1
 800c62a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c62c:	7862      	ldrb	r2, [r4, #1]
 800c62e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c630:	d077      	beq.n	800c722 <_strtod_l+0x27a>
 800c632:	2a2d      	cmp	r2, #45	@ 0x2d
 800c634:	d07b      	beq.n	800c72e <_strtod_l+0x286>
 800c636:	f04f 0c00 	mov.w	ip, #0
 800c63a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c63e:	2909      	cmp	r1, #9
 800c640:	f240 8082 	bls.w	800c748 <_strtod_l+0x2a0>
 800c644:	9419      	str	r4, [sp, #100]	@ 0x64
 800c646:	f04f 0800 	mov.w	r8, #0
 800c64a:	e0a2      	b.n	800c792 <_strtod_l+0x2ea>
 800c64c:	2300      	movs	r3, #0
 800c64e:	e7c7      	b.n	800c5e0 <_strtod_l+0x138>
 800c650:	2f08      	cmp	r7, #8
 800c652:	bfd5      	itete	le
 800c654:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c656:	9908      	ldrgt	r1, [sp, #32]
 800c658:	fb02 3301 	mlale	r3, r2, r1, r3
 800c65c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c660:	f100 0001 	add.w	r0, r0, #1
 800c664:	bfd4      	ite	le
 800c666:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c668:	9308      	strgt	r3, [sp, #32]
 800c66a:	3701      	adds	r7, #1
 800c66c:	9019      	str	r0, [sp, #100]	@ 0x64
 800c66e:	e7bf      	b.n	800c5f0 <_strtod_l+0x148>
 800c670:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c672:	1c5a      	adds	r2, r3, #1
 800c674:	9219      	str	r2, [sp, #100]	@ 0x64
 800c676:	785a      	ldrb	r2, [r3, #1]
 800c678:	b37f      	cbz	r7, 800c6da <_strtod_l+0x232>
 800c67a:	4681      	mov	r9, r0
 800c67c:	463d      	mov	r5, r7
 800c67e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c682:	2b09      	cmp	r3, #9
 800c684:	d912      	bls.n	800c6ac <_strtod_l+0x204>
 800c686:	2301      	movs	r3, #1
 800c688:	e7c4      	b.n	800c614 <_strtod_l+0x16c>
 800c68a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c68c:	1c5a      	adds	r2, r3, #1
 800c68e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c690:	785a      	ldrb	r2, [r3, #1]
 800c692:	3001      	adds	r0, #1
 800c694:	2a30      	cmp	r2, #48	@ 0x30
 800c696:	d0f8      	beq.n	800c68a <_strtod_l+0x1e2>
 800c698:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c69c:	2b08      	cmp	r3, #8
 800c69e:	f200 84d3 	bhi.w	800d048 <_strtod_l+0xba0>
 800c6a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6a6:	4681      	mov	r9, r0
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	4605      	mov	r5, r0
 800c6ac:	3a30      	subs	r2, #48	@ 0x30
 800c6ae:	f100 0301 	add.w	r3, r0, #1
 800c6b2:	d02a      	beq.n	800c70a <_strtod_l+0x262>
 800c6b4:	4499      	add	r9, r3
 800c6b6:	eb00 0c05 	add.w	ip, r0, r5
 800c6ba:	462b      	mov	r3, r5
 800c6bc:	210a      	movs	r1, #10
 800c6be:	4563      	cmp	r3, ip
 800c6c0:	d10d      	bne.n	800c6de <_strtod_l+0x236>
 800c6c2:	1c69      	adds	r1, r5, #1
 800c6c4:	4401      	add	r1, r0
 800c6c6:	4428      	add	r0, r5
 800c6c8:	2808      	cmp	r0, #8
 800c6ca:	dc16      	bgt.n	800c6fa <_strtod_l+0x252>
 800c6cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c6ce:	230a      	movs	r3, #10
 800c6d0:	fb03 2300 	mla	r3, r3, r0, r2
 800c6d4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e018      	b.n	800c70c <_strtod_l+0x264>
 800c6da:	4638      	mov	r0, r7
 800c6dc:	e7da      	b.n	800c694 <_strtod_l+0x1ec>
 800c6de:	2b08      	cmp	r3, #8
 800c6e0:	f103 0301 	add.w	r3, r3, #1
 800c6e4:	dc03      	bgt.n	800c6ee <_strtod_l+0x246>
 800c6e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c6e8:	434e      	muls	r6, r1
 800c6ea:	960a      	str	r6, [sp, #40]	@ 0x28
 800c6ec:	e7e7      	b.n	800c6be <_strtod_l+0x216>
 800c6ee:	2b10      	cmp	r3, #16
 800c6f0:	bfde      	ittt	le
 800c6f2:	9e08      	ldrle	r6, [sp, #32]
 800c6f4:	434e      	mulle	r6, r1
 800c6f6:	9608      	strle	r6, [sp, #32]
 800c6f8:	e7e1      	b.n	800c6be <_strtod_l+0x216>
 800c6fa:	280f      	cmp	r0, #15
 800c6fc:	dceb      	bgt.n	800c6d6 <_strtod_l+0x22e>
 800c6fe:	9808      	ldr	r0, [sp, #32]
 800c700:	230a      	movs	r3, #10
 800c702:	fb03 2300 	mla	r3, r3, r0, r2
 800c706:	9308      	str	r3, [sp, #32]
 800c708:	e7e5      	b.n	800c6d6 <_strtod_l+0x22e>
 800c70a:	4629      	mov	r1, r5
 800c70c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c70e:	1c50      	adds	r0, r2, #1
 800c710:	9019      	str	r0, [sp, #100]	@ 0x64
 800c712:	7852      	ldrb	r2, [r2, #1]
 800c714:	4618      	mov	r0, r3
 800c716:	460d      	mov	r5, r1
 800c718:	e7b1      	b.n	800c67e <_strtod_l+0x1d6>
 800c71a:	f04f 0900 	mov.w	r9, #0
 800c71e:	2301      	movs	r3, #1
 800c720:	e77d      	b.n	800c61e <_strtod_l+0x176>
 800c722:	f04f 0c00 	mov.w	ip, #0
 800c726:	1ca2      	adds	r2, r4, #2
 800c728:	9219      	str	r2, [sp, #100]	@ 0x64
 800c72a:	78a2      	ldrb	r2, [r4, #2]
 800c72c:	e785      	b.n	800c63a <_strtod_l+0x192>
 800c72e:	f04f 0c01 	mov.w	ip, #1
 800c732:	e7f8      	b.n	800c726 <_strtod_l+0x27e>
 800c734:	0800f7fc 	.word	0x0800f7fc
 800c738:	0800f7d8 	.word	0x0800f7d8
 800c73c:	7ff00000 	.word	0x7ff00000
 800c740:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c742:	1c51      	adds	r1, r2, #1
 800c744:	9119      	str	r1, [sp, #100]	@ 0x64
 800c746:	7852      	ldrb	r2, [r2, #1]
 800c748:	2a30      	cmp	r2, #48	@ 0x30
 800c74a:	d0f9      	beq.n	800c740 <_strtod_l+0x298>
 800c74c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c750:	2908      	cmp	r1, #8
 800c752:	f63f af78 	bhi.w	800c646 <_strtod_l+0x19e>
 800c756:	3a30      	subs	r2, #48	@ 0x30
 800c758:	920e      	str	r2, [sp, #56]	@ 0x38
 800c75a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c75c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c75e:	f04f 080a 	mov.w	r8, #10
 800c762:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c764:	1c56      	adds	r6, r2, #1
 800c766:	9619      	str	r6, [sp, #100]	@ 0x64
 800c768:	7852      	ldrb	r2, [r2, #1]
 800c76a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c76e:	f1be 0f09 	cmp.w	lr, #9
 800c772:	d939      	bls.n	800c7e8 <_strtod_l+0x340>
 800c774:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c776:	1a76      	subs	r6, r6, r1
 800c778:	2e08      	cmp	r6, #8
 800c77a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c77e:	dc03      	bgt.n	800c788 <_strtod_l+0x2e0>
 800c780:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c782:	4588      	cmp	r8, r1
 800c784:	bfa8      	it	ge
 800c786:	4688      	movge	r8, r1
 800c788:	f1bc 0f00 	cmp.w	ip, #0
 800c78c:	d001      	beq.n	800c792 <_strtod_l+0x2ea>
 800c78e:	f1c8 0800 	rsb	r8, r8, #0
 800c792:	2d00      	cmp	r5, #0
 800c794:	d14e      	bne.n	800c834 <_strtod_l+0x38c>
 800c796:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c798:	4308      	orrs	r0, r1
 800c79a:	f47f aebe 	bne.w	800c51a <_strtod_l+0x72>
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f47f aed6 	bne.w	800c550 <_strtod_l+0xa8>
 800c7a4:	2a69      	cmp	r2, #105	@ 0x69
 800c7a6:	d028      	beq.n	800c7fa <_strtod_l+0x352>
 800c7a8:	dc25      	bgt.n	800c7f6 <_strtod_l+0x34e>
 800c7aa:	2a49      	cmp	r2, #73	@ 0x49
 800c7ac:	d025      	beq.n	800c7fa <_strtod_l+0x352>
 800c7ae:	2a4e      	cmp	r2, #78	@ 0x4e
 800c7b0:	f47f aece 	bne.w	800c550 <_strtod_l+0xa8>
 800c7b4:	499b      	ldr	r1, [pc, #620]	@ (800ca24 <_strtod_l+0x57c>)
 800c7b6:	a819      	add	r0, sp, #100	@ 0x64
 800c7b8:	f001 f906 	bl	800d9c8 <__match>
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	f43f aec7 	beq.w	800c550 <_strtod_l+0xa8>
 800c7c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	2b28      	cmp	r3, #40	@ 0x28
 800c7c8:	d12e      	bne.n	800c828 <_strtod_l+0x380>
 800c7ca:	4997      	ldr	r1, [pc, #604]	@ (800ca28 <_strtod_l+0x580>)
 800c7cc:	aa1c      	add	r2, sp, #112	@ 0x70
 800c7ce:	a819      	add	r0, sp, #100	@ 0x64
 800c7d0:	f001 f90e 	bl	800d9f0 <__hexnan>
 800c7d4:	2805      	cmp	r0, #5
 800c7d6:	d127      	bne.n	800c828 <_strtod_l+0x380>
 800c7d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c7da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c7de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c7e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c7e6:	e698      	b.n	800c51a <_strtod_l+0x72>
 800c7e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c7ea:	fb08 2101 	mla	r1, r8, r1, r2
 800c7ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c7f2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c7f4:	e7b5      	b.n	800c762 <_strtod_l+0x2ba>
 800c7f6:	2a6e      	cmp	r2, #110	@ 0x6e
 800c7f8:	e7da      	b.n	800c7b0 <_strtod_l+0x308>
 800c7fa:	498c      	ldr	r1, [pc, #560]	@ (800ca2c <_strtod_l+0x584>)
 800c7fc:	a819      	add	r0, sp, #100	@ 0x64
 800c7fe:	f001 f8e3 	bl	800d9c8 <__match>
 800c802:	2800      	cmp	r0, #0
 800c804:	f43f aea4 	beq.w	800c550 <_strtod_l+0xa8>
 800c808:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c80a:	4989      	ldr	r1, [pc, #548]	@ (800ca30 <_strtod_l+0x588>)
 800c80c:	3b01      	subs	r3, #1
 800c80e:	a819      	add	r0, sp, #100	@ 0x64
 800c810:	9319      	str	r3, [sp, #100]	@ 0x64
 800c812:	f001 f8d9 	bl	800d9c8 <__match>
 800c816:	b910      	cbnz	r0, 800c81e <_strtod_l+0x376>
 800c818:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c81a:	3301      	adds	r3, #1
 800c81c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c81e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ca40 <_strtod_l+0x598>
 800c822:	f04f 0a00 	mov.w	sl, #0
 800c826:	e678      	b.n	800c51a <_strtod_l+0x72>
 800c828:	4882      	ldr	r0, [pc, #520]	@ (800ca34 <_strtod_l+0x58c>)
 800c82a:	f000 fdf1 	bl	800d410 <nan>
 800c82e:	ec5b ab10 	vmov	sl, fp, d0
 800c832:	e672      	b.n	800c51a <_strtod_l+0x72>
 800c834:	eba8 0309 	sub.w	r3, r8, r9
 800c838:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c83a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c83c:	2f00      	cmp	r7, #0
 800c83e:	bf08      	it	eq
 800c840:	462f      	moveq	r7, r5
 800c842:	2d10      	cmp	r5, #16
 800c844:	462c      	mov	r4, r5
 800c846:	bfa8      	it	ge
 800c848:	2410      	movge	r4, #16
 800c84a:	f7f3 fe83 	bl	8000554 <__aeabi_ui2d>
 800c84e:	2d09      	cmp	r5, #9
 800c850:	4682      	mov	sl, r0
 800c852:	468b      	mov	fp, r1
 800c854:	dc13      	bgt.n	800c87e <_strtod_l+0x3d6>
 800c856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f43f ae5e 	beq.w	800c51a <_strtod_l+0x72>
 800c85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c860:	dd78      	ble.n	800c954 <_strtod_l+0x4ac>
 800c862:	2b16      	cmp	r3, #22
 800c864:	dc5f      	bgt.n	800c926 <_strtod_l+0x47e>
 800c866:	4974      	ldr	r1, [pc, #464]	@ (800ca38 <_strtod_l+0x590>)
 800c868:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c86c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c870:	4652      	mov	r2, sl
 800c872:	465b      	mov	r3, fp
 800c874:	f7f3 fee8 	bl	8000648 <__aeabi_dmul>
 800c878:	4682      	mov	sl, r0
 800c87a:	468b      	mov	fp, r1
 800c87c:	e64d      	b.n	800c51a <_strtod_l+0x72>
 800c87e:	4b6e      	ldr	r3, [pc, #440]	@ (800ca38 <_strtod_l+0x590>)
 800c880:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c884:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c888:	f7f3 fede 	bl	8000648 <__aeabi_dmul>
 800c88c:	4682      	mov	sl, r0
 800c88e:	9808      	ldr	r0, [sp, #32]
 800c890:	468b      	mov	fp, r1
 800c892:	f7f3 fe5f 	bl	8000554 <__aeabi_ui2d>
 800c896:	4602      	mov	r2, r0
 800c898:	460b      	mov	r3, r1
 800c89a:	4650      	mov	r0, sl
 800c89c:	4659      	mov	r1, fp
 800c89e:	f7f3 fd1d 	bl	80002dc <__adddf3>
 800c8a2:	2d0f      	cmp	r5, #15
 800c8a4:	4682      	mov	sl, r0
 800c8a6:	468b      	mov	fp, r1
 800c8a8:	ddd5      	ble.n	800c856 <_strtod_l+0x3ae>
 800c8aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8ac:	1b2c      	subs	r4, r5, r4
 800c8ae:	441c      	add	r4, r3
 800c8b0:	2c00      	cmp	r4, #0
 800c8b2:	f340 8096 	ble.w	800c9e2 <_strtod_l+0x53a>
 800c8b6:	f014 030f 	ands.w	r3, r4, #15
 800c8ba:	d00a      	beq.n	800c8d2 <_strtod_l+0x42a>
 800c8bc:	495e      	ldr	r1, [pc, #376]	@ (800ca38 <_strtod_l+0x590>)
 800c8be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c8c2:	4652      	mov	r2, sl
 800c8c4:	465b      	mov	r3, fp
 800c8c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ca:	f7f3 febd 	bl	8000648 <__aeabi_dmul>
 800c8ce:	4682      	mov	sl, r0
 800c8d0:	468b      	mov	fp, r1
 800c8d2:	f034 040f 	bics.w	r4, r4, #15
 800c8d6:	d073      	beq.n	800c9c0 <_strtod_l+0x518>
 800c8d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c8dc:	dd48      	ble.n	800c970 <_strtod_l+0x4c8>
 800c8de:	2400      	movs	r4, #0
 800c8e0:	46a0      	mov	r8, r4
 800c8e2:	940a      	str	r4, [sp, #40]	@ 0x28
 800c8e4:	46a1      	mov	r9, r4
 800c8e6:	9a05      	ldr	r2, [sp, #20]
 800c8e8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ca40 <_strtod_l+0x598>
 800c8ec:	2322      	movs	r3, #34	@ 0x22
 800c8ee:	6013      	str	r3, [r2, #0]
 800c8f0:	f04f 0a00 	mov.w	sl, #0
 800c8f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f43f ae0f 	beq.w	800c51a <_strtod_l+0x72>
 800c8fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8fe:	9805      	ldr	r0, [sp, #20]
 800c900:	f001 fa12 	bl	800dd28 <_Bfree>
 800c904:	9805      	ldr	r0, [sp, #20]
 800c906:	4649      	mov	r1, r9
 800c908:	f001 fa0e 	bl	800dd28 <_Bfree>
 800c90c:	9805      	ldr	r0, [sp, #20]
 800c90e:	4641      	mov	r1, r8
 800c910:	f001 fa0a 	bl	800dd28 <_Bfree>
 800c914:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c916:	9805      	ldr	r0, [sp, #20]
 800c918:	f001 fa06 	bl	800dd28 <_Bfree>
 800c91c:	9805      	ldr	r0, [sp, #20]
 800c91e:	4621      	mov	r1, r4
 800c920:	f001 fa02 	bl	800dd28 <_Bfree>
 800c924:	e5f9      	b.n	800c51a <_strtod_l+0x72>
 800c926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c928:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c92c:	4293      	cmp	r3, r2
 800c92e:	dbbc      	blt.n	800c8aa <_strtod_l+0x402>
 800c930:	4c41      	ldr	r4, [pc, #260]	@ (800ca38 <_strtod_l+0x590>)
 800c932:	f1c5 050f 	rsb	r5, r5, #15
 800c936:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c93a:	4652      	mov	r2, sl
 800c93c:	465b      	mov	r3, fp
 800c93e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c942:	f7f3 fe81 	bl	8000648 <__aeabi_dmul>
 800c946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c948:	1b5d      	subs	r5, r3, r5
 800c94a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c94e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c952:	e78f      	b.n	800c874 <_strtod_l+0x3cc>
 800c954:	3316      	adds	r3, #22
 800c956:	dba8      	blt.n	800c8aa <_strtod_l+0x402>
 800c958:	4b37      	ldr	r3, [pc, #220]	@ (800ca38 <_strtod_l+0x590>)
 800c95a:	eba9 0808 	sub.w	r8, r9, r8
 800c95e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c962:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c966:	4650      	mov	r0, sl
 800c968:	4659      	mov	r1, fp
 800c96a:	f7f3 ff97 	bl	800089c <__aeabi_ddiv>
 800c96e:	e783      	b.n	800c878 <_strtod_l+0x3d0>
 800c970:	4b32      	ldr	r3, [pc, #200]	@ (800ca3c <_strtod_l+0x594>)
 800c972:	9308      	str	r3, [sp, #32]
 800c974:	2300      	movs	r3, #0
 800c976:	1124      	asrs	r4, r4, #4
 800c978:	4650      	mov	r0, sl
 800c97a:	4659      	mov	r1, fp
 800c97c:	461e      	mov	r6, r3
 800c97e:	2c01      	cmp	r4, #1
 800c980:	dc21      	bgt.n	800c9c6 <_strtod_l+0x51e>
 800c982:	b10b      	cbz	r3, 800c988 <_strtod_l+0x4e0>
 800c984:	4682      	mov	sl, r0
 800c986:	468b      	mov	fp, r1
 800c988:	492c      	ldr	r1, [pc, #176]	@ (800ca3c <_strtod_l+0x594>)
 800c98a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c98e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c992:	4652      	mov	r2, sl
 800c994:	465b      	mov	r3, fp
 800c996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c99a:	f7f3 fe55 	bl	8000648 <__aeabi_dmul>
 800c99e:	4b28      	ldr	r3, [pc, #160]	@ (800ca40 <_strtod_l+0x598>)
 800c9a0:	460a      	mov	r2, r1
 800c9a2:	400b      	ands	r3, r1
 800c9a4:	4927      	ldr	r1, [pc, #156]	@ (800ca44 <_strtod_l+0x59c>)
 800c9a6:	428b      	cmp	r3, r1
 800c9a8:	4682      	mov	sl, r0
 800c9aa:	d898      	bhi.n	800c8de <_strtod_l+0x436>
 800c9ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c9b0:	428b      	cmp	r3, r1
 800c9b2:	bf86      	itte	hi
 800c9b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ca48 <_strtod_l+0x5a0>
 800c9b8:	f04f 3aff 	movhi.w	sl, #4294967295
 800c9bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	9308      	str	r3, [sp, #32]
 800c9c4:	e07a      	b.n	800cabc <_strtod_l+0x614>
 800c9c6:	07e2      	lsls	r2, r4, #31
 800c9c8:	d505      	bpl.n	800c9d6 <_strtod_l+0x52e>
 800c9ca:	9b08      	ldr	r3, [sp, #32]
 800c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d0:	f7f3 fe3a 	bl	8000648 <__aeabi_dmul>
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	9a08      	ldr	r2, [sp, #32]
 800c9d8:	3208      	adds	r2, #8
 800c9da:	3601      	adds	r6, #1
 800c9dc:	1064      	asrs	r4, r4, #1
 800c9de:	9208      	str	r2, [sp, #32]
 800c9e0:	e7cd      	b.n	800c97e <_strtod_l+0x4d6>
 800c9e2:	d0ed      	beq.n	800c9c0 <_strtod_l+0x518>
 800c9e4:	4264      	negs	r4, r4
 800c9e6:	f014 020f 	ands.w	r2, r4, #15
 800c9ea:	d00a      	beq.n	800ca02 <_strtod_l+0x55a>
 800c9ec:	4b12      	ldr	r3, [pc, #72]	@ (800ca38 <_strtod_l+0x590>)
 800c9ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9f2:	4650      	mov	r0, sl
 800c9f4:	4659      	mov	r1, fp
 800c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fa:	f7f3 ff4f 	bl	800089c <__aeabi_ddiv>
 800c9fe:	4682      	mov	sl, r0
 800ca00:	468b      	mov	fp, r1
 800ca02:	1124      	asrs	r4, r4, #4
 800ca04:	d0dc      	beq.n	800c9c0 <_strtod_l+0x518>
 800ca06:	2c1f      	cmp	r4, #31
 800ca08:	dd20      	ble.n	800ca4c <_strtod_l+0x5a4>
 800ca0a:	2400      	movs	r4, #0
 800ca0c:	46a0      	mov	r8, r4
 800ca0e:	940a      	str	r4, [sp, #40]	@ 0x28
 800ca10:	46a1      	mov	r9, r4
 800ca12:	9a05      	ldr	r2, [sp, #20]
 800ca14:	2322      	movs	r3, #34	@ 0x22
 800ca16:	f04f 0a00 	mov.w	sl, #0
 800ca1a:	f04f 0b00 	mov.w	fp, #0
 800ca1e:	6013      	str	r3, [r2, #0]
 800ca20:	e768      	b.n	800c8f4 <_strtod_l+0x44c>
 800ca22:	bf00      	nop
 800ca24:	0800f7e3 	.word	0x0800f7e3
 800ca28:	0800f7e8 	.word	0x0800f7e8
 800ca2c:	0800f7da 	.word	0x0800f7da
 800ca30:	0800f7dd 	.word	0x0800f7dd
 800ca34:	0800fb8f 	.word	0x0800fb8f
 800ca38:	0800f958 	.word	0x0800f958
 800ca3c:	0800f930 	.word	0x0800f930
 800ca40:	7ff00000 	.word	0x7ff00000
 800ca44:	7ca00000 	.word	0x7ca00000
 800ca48:	7fefffff 	.word	0x7fefffff
 800ca4c:	f014 0310 	ands.w	r3, r4, #16
 800ca50:	bf18      	it	ne
 800ca52:	236a      	movne	r3, #106	@ 0x6a
 800ca54:	4ea9      	ldr	r6, [pc, #676]	@ (800ccfc <_strtod_l+0x854>)
 800ca56:	9308      	str	r3, [sp, #32]
 800ca58:	4650      	mov	r0, sl
 800ca5a:	4659      	mov	r1, fp
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	07e2      	lsls	r2, r4, #31
 800ca60:	d504      	bpl.n	800ca6c <_strtod_l+0x5c4>
 800ca62:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca66:	f7f3 fdef 	bl	8000648 <__aeabi_dmul>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	1064      	asrs	r4, r4, #1
 800ca6e:	f106 0608 	add.w	r6, r6, #8
 800ca72:	d1f4      	bne.n	800ca5e <_strtod_l+0x5b6>
 800ca74:	b10b      	cbz	r3, 800ca7a <_strtod_l+0x5d2>
 800ca76:	4682      	mov	sl, r0
 800ca78:	468b      	mov	fp, r1
 800ca7a:	9b08      	ldr	r3, [sp, #32]
 800ca7c:	b1b3      	cbz	r3, 800caac <_strtod_l+0x604>
 800ca7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ca82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	4659      	mov	r1, fp
 800ca8a:	dd0f      	ble.n	800caac <_strtod_l+0x604>
 800ca8c:	2b1f      	cmp	r3, #31
 800ca8e:	dd55      	ble.n	800cb3c <_strtod_l+0x694>
 800ca90:	2b34      	cmp	r3, #52	@ 0x34
 800ca92:	bfde      	ittt	le
 800ca94:	f04f 33ff 	movle.w	r3, #4294967295
 800ca98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ca9c:	4093      	lslle	r3, r2
 800ca9e:	f04f 0a00 	mov.w	sl, #0
 800caa2:	bfcc      	ite	gt
 800caa4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800caa8:	ea03 0b01 	andle.w	fp, r3, r1
 800caac:	2200      	movs	r2, #0
 800caae:	2300      	movs	r3, #0
 800cab0:	4650      	mov	r0, sl
 800cab2:	4659      	mov	r1, fp
 800cab4:	f7f4 f830 	bl	8000b18 <__aeabi_dcmpeq>
 800cab8:	2800      	cmp	r0, #0
 800caba:	d1a6      	bne.n	800ca0a <_strtod_l+0x562>
 800cabc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cac2:	9805      	ldr	r0, [sp, #20]
 800cac4:	462b      	mov	r3, r5
 800cac6:	463a      	mov	r2, r7
 800cac8:	f001 f996 	bl	800ddf8 <__s2b>
 800cacc:	900a      	str	r0, [sp, #40]	@ 0x28
 800cace:	2800      	cmp	r0, #0
 800cad0:	f43f af05 	beq.w	800c8de <_strtod_l+0x436>
 800cad4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cad6:	2a00      	cmp	r2, #0
 800cad8:	eba9 0308 	sub.w	r3, r9, r8
 800cadc:	bfa8      	it	ge
 800cade:	2300      	movge	r3, #0
 800cae0:	9312      	str	r3, [sp, #72]	@ 0x48
 800cae2:	2400      	movs	r4, #0
 800cae4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cae8:	9316      	str	r3, [sp, #88]	@ 0x58
 800caea:	46a0      	mov	r8, r4
 800caec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caee:	9805      	ldr	r0, [sp, #20]
 800caf0:	6859      	ldr	r1, [r3, #4]
 800caf2:	f001 f8d9 	bl	800dca8 <_Balloc>
 800caf6:	4681      	mov	r9, r0
 800caf8:	2800      	cmp	r0, #0
 800cafa:	f43f aef4 	beq.w	800c8e6 <_strtod_l+0x43e>
 800cafe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb00:	691a      	ldr	r2, [r3, #16]
 800cb02:	3202      	adds	r2, #2
 800cb04:	f103 010c 	add.w	r1, r3, #12
 800cb08:	0092      	lsls	r2, r2, #2
 800cb0a:	300c      	adds	r0, #12
 800cb0c:	f000 fc6f 	bl	800d3ee <memcpy>
 800cb10:	ec4b ab10 	vmov	d0, sl, fp
 800cb14:	9805      	ldr	r0, [sp, #20]
 800cb16:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb18:	a91b      	add	r1, sp, #108	@ 0x6c
 800cb1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cb1e:	f001 fca7 	bl	800e470 <__d2b>
 800cb22:	901a      	str	r0, [sp, #104]	@ 0x68
 800cb24:	2800      	cmp	r0, #0
 800cb26:	f43f aede 	beq.w	800c8e6 <_strtod_l+0x43e>
 800cb2a:	9805      	ldr	r0, [sp, #20]
 800cb2c:	2101      	movs	r1, #1
 800cb2e:	f001 f9f9 	bl	800df24 <__i2b>
 800cb32:	4680      	mov	r8, r0
 800cb34:	b948      	cbnz	r0, 800cb4a <_strtod_l+0x6a2>
 800cb36:	f04f 0800 	mov.w	r8, #0
 800cb3a:	e6d4      	b.n	800c8e6 <_strtod_l+0x43e>
 800cb3c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb40:	fa02 f303 	lsl.w	r3, r2, r3
 800cb44:	ea03 0a0a 	and.w	sl, r3, sl
 800cb48:	e7b0      	b.n	800caac <_strtod_l+0x604>
 800cb4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cb4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cb4e:	2d00      	cmp	r5, #0
 800cb50:	bfab      	itete	ge
 800cb52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cb54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cb56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cb58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cb5a:	bfac      	ite	ge
 800cb5c:	18ef      	addge	r7, r5, r3
 800cb5e:	1b5e      	sublt	r6, r3, r5
 800cb60:	9b08      	ldr	r3, [sp, #32]
 800cb62:	1aed      	subs	r5, r5, r3
 800cb64:	4415      	add	r5, r2
 800cb66:	4b66      	ldr	r3, [pc, #408]	@ (800cd00 <_strtod_l+0x858>)
 800cb68:	3d01      	subs	r5, #1
 800cb6a:	429d      	cmp	r5, r3
 800cb6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cb70:	da50      	bge.n	800cc14 <_strtod_l+0x76c>
 800cb72:	1b5b      	subs	r3, r3, r5
 800cb74:	2b1f      	cmp	r3, #31
 800cb76:	eba2 0203 	sub.w	r2, r2, r3
 800cb7a:	f04f 0101 	mov.w	r1, #1
 800cb7e:	dc3d      	bgt.n	800cbfc <_strtod_l+0x754>
 800cb80:	fa01 f303 	lsl.w	r3, r1, r3
 800cb84:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb86:	2300      	movs	r3, #0
 800cb88:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb8a:	18bd      	adds	r5, r7, r2
 800cb8c:	9b08      	ldr	r3, [sp, #32]
 800cb8e:	42af      	cmp	r7, r5
 800cb90:	4416      	add	r6, r2
 800cb92:	441e      	add	r6, r3
 800cb94:	463b      	mov	r3, r7
 800cb96:	bfa8      	it	ge
 800cb98:	462b      	movge	r3, r5
 800cb9a:	42b3      	cmp	r3, r6
 800cb9c:	bfa8      	it	ge
 800cb9e:	4633      	movge	r3, r6
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	bfc2      	ittt	gt
 800cba4:	1aed      	subgt	r5, r5, r3
 800cba6:	1af6      	subgt	r6, r6, r3
 800cba8:	1aff      	subgt	r7, r7, r3
 800cbaa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	dd16      	ble.n	800cbde <_strtod_l+0x736>
 800cbb0:	4641      	mov	r1, r8
 800cbb2:	9805      	ldr	r0, [sp, #20]
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	f001 fa75 	bl	800e0a4 <__pow5mult>
 800cbba:	4680      	mov	r8, r0
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d0ba      	beq.n	800cb36 <_strtod_l+0x68e>
 800cbc0:	4601      	mov	r1, r0
 800cbc2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cbc4:	9805      	ldr	r0, [sp, #20]
 800cbc6:	f001 f9c3 	bl	800df50 <__multiply>
 800cbca:	900e      	str	r0, [sp, #56]	@ 0x38
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	f43f ae8a 	beq.w	800c8e6 <_strtod_l+0x43e>
 800cbd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbd4:	9805      	ldr	r0, [sp, #20]
 800cbd6:	f001 f8a7 	bl	800dd28 <_Bfree>
 800cbda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbdc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbde:	2d00      	cmp	r5, #0
 800cbe0:	dc1d      	bgt.n	800cc1e <_strtod_l+0x776>
 800cbe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	dd23      	ble.n	800cc30 <_strtod_l+0x788>
 800cbe8:	4649      	mov	r1, r9
 800cbea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cbec:	9805      	ldr	r0, [sp, #20]
 800cbee:	f001 fa59 	bl	800e0a4 <__pow5mult>
 800cbf2:	4681      	mov	r9, r0
 800cbf4:	b9e0      	cbnz	r0, 800cc30 <_strtod_l+0x788>
 800cbf6:	f04f 0900 	mov.w	r9, #0
 800cbfa:	e674      	b.n	800c8e6 <_strtod_l+0x43e>
 800cbfc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cc00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cc04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cc08:	35e2      	adds	r5, #226	@ 0xe2
 800cc0a:	fa01 f305 	lsl.w	r3, r1, r5
 800cc0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc10:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cc12:	e7ba      	b.n	800cb8a <_strtod_l+0x6e2>
 800cc14:	2300      	movs	r3, #0
 800cc16:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc18:	2301      	movs	r3, #1
 800cc1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc1c:	e7b5      	b.n	800cb8a <_strtod_l+0x6e2>
 800cc1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc20:	9805      	ldr	r0, [sp, #20]
 800cc22:	462a      	mov	r2, r5
 800cc24:	f001 fa98 	bl	800e158 <__lshift>
 800cc28:	901a      	str	r0, [sp, #104]	@ 0x68
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d1d9      	bne.n	800cbe2 <_strtod_l+0x73a>
 800cc2e:	e65a      	b.n	800c8e6 <_strtod_l+0x43e>
 800cc30:	2e00      	cmp	r6, #0
 800cc32:	dd07      	ble.n	800cc44 <_strtod_l+0x79c>
 800cc34:	4649      	mov	r1, r9
 800cc36:	9805      	ldr	r0, [sp, #20]
 800cc38:	4632      	mov	r2, r6
 800cc3a:	f001 fa8d 	bl	800e158 <__lshift>
 800cc3e:	4681      	mov	r9, r0
 800cc40:	2800      	cmp	r0, #0
 800cc42:	d0d8      	beq.n	800cbf6 <_strtod_l+0x74e>
 800cc44:	2f00      	cmp	r7, #0
 800cc46:	dd08      	ble.n	800cc5a <_strtod_l+0x7b2>
 800cc48:	4641      	mov	r1, r8
 800cc4a:	9805      	ldr	r0, [sp, #20]
 800cc4c:	463a      	mov	r2, r7
 800cc4e:	f001 fa83 	bl	800e158 <__lshift>
 800cc52:	4680      	mov	r8, r0
 800cc54:	2800      	cmp	r0, #0
 800cc56:	f43f ae46 	beq.w	800c8e6 <_strtod_l+0x43e>
 800cc5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc5c:	9805      	ldr	r0, [sp, #20]
 800cc5e:	464a      	mov	r2, r9
 800cc60:	f001 fb02 	bl	800e268 <__mdiff>
 800cc64:	4604      	mov	r4, r0
 800cc66:	2800      	cmp	r0, #0
 800cc68:	f43f ae3d 	beq.w	800c8e6 <_strtod_l+0x43e>
 800cc6c:	68c3      	ldr	r3, [r0, #12]
 800cc6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc70:	2300      	movs	r3, #0
 800cc72:	60c3      	str	r3, [r0, #12]
 800cc74:	4641      	mov	r1, r8
 800cc76:	f001 fadb 	bl	800e230 <__mcmp>
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	da46      	bge.n	800cd0c <_strtod_l+0x864>
 800cc7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc80:	ea53 030a 	orrs.w	r3, r3, sl
 800cc84:	d16c      	bne.n	800cd60 <_strtod_l+0x8b8>
 800cc86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d168      	bne.n	800cd60 <_strtod_l+0x8b8>
 800cc8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc92:	0d1b      	lsrs	r3, r3, #20
 800cc94:	051b      	lsls	r3, r3, #20
 800cc96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cc9a:	d961      	bls.n	800cd60 <_strtod_l+0x8b8>
 800cc9c:	6963      	ldr	r3, [r4, #20]
 800cc9e:	b913      	cbnz	r3, 800cca6 <_strtod_l+0x7fe>
 800cca0:	6923      	ldr	r3, [r4, #16]
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	dd5c      	ble.n	800cd60 <_strtod_l+0x8b8>
 800cca6:	4621      	mov	r1, r4
 800cca8:	2201      	movs	r2, #1
 800ccaa:	9805      	ldr	r0, [sp, #20]
 800ccac:	f001 fa54 	bl	800e158 <__lshift>
 800ccb0:	4641      	mov	r1, r8
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	f001 fabc 	bl	800e230 <__mcmp>
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	dd51      	ble.n	800cd60 <_strtod_l+0x8b8>
 800ccbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ccc0:	9a08      	ldr	r2, [sp, #32]
 800ccc2:	0d1b      	lsrs	r3, r3, #20
 800ccc4:	051b      	lsls	r3, r3, #20
 800ccc6:	2a00      	cmp	r2, #0
 800ccc8:	d06b      	beq.n	800cda2 <_strtod_l+0x8fa>
 800ccca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ccce:	d868      	bhi.n	800cda2 <_strtod_l+0x8fa>
 800ccd0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ccd4:	f67f ae9d 	bls.w	800ca12 <_strtod_l+0x56a>
 800ccd8:	4b0a      	ldr	r3, [pc, #40]	@ (800cd04 <_strtod_l+0x85c>)
 800ccda:	4650      	mov	r0, sl
 800ccdc:	4659      	mov	r1, fp
 800ccde:	2200      	movs	r2, #0
 800cce0:	f7f3 fcb2 	bl	8000648 <__aeabi_dmul>
 800cce4:	4b08      	ldr	r3, [pc, #32]	@ (800cd08 <_strtod_l+0x860>)
 800cce6:	400b      	ands	r3, r1
 800cce8:	4682      	mov	sl, r0
 800ccea:	468b      	mov	fp, r1
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f47f ae05 	bne.w	800c8fc <_strtod_l+0x454>
 800ccf2:	9a05      	ldr	r2, [sp, #20]
 800ccf4:	2322      	movs	r3, #34	@ 0x22
 800ccf6:	6013      	str	r3, [r2, #0]
 800ccf8:	e600      	b.n	800c8fc <_strtod_l+0x454>
 800ccfa:	bf00      	nop
 800ccfc:	0800f810 	.word	0x0800f810
 800cd00:	fffffc02 	.word	0xfffffc02
 800cd04:	39500000 	.word	0x39500000
 800cd08:	7ff00000 	.word	0x7ff00000
 800cd0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cd10:	d165      	bne.n	800cdde <_strtod_l+0x936>
 800cd12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd18:	b35a      	cbz	r2, 800cd72 <_strtod_l+0x8ca>
 800cd1a:	4a9f      	ldr	r2, [pc, #636]	@ (800cf98 <_strtod_l+0xaf0>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d12b      	bne.n	800cd78 <_strtod_l+0x8d0>
 800cd20:	9b08      	ldr	r3, [sp, #32]
 800cd22:	4651      	mov	r1, sl
 800cd24:	b303      	cbz	r3, 800cd68 <_strtod_l+0x8c0>
 800cd26:	4b9d      	ldr	r3, [pc, #628]	@ (800cf9c <_strtod_l+0xaf4>)
 800cd28:	465a      	mov	r2, fp
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cd30:	f04f 32ff 	mov.w	r2, #4294967295
 800cd34:	d81b      	bhi.n	800cd6e <_strtod_l+0x8c6>
 800cd36:	0d1b      	lsrs	r3, r3, #20
 800cd38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cd3c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd40:	4299      	cmp	r1, r3
 800cd42:	d119      	bne.n	800cd78 <_strtod_l+0x8d0>
 800cd44:	4b96      	ldr	r3, [pc, #600]	@ (800cfa0 <_strtod_l+0xaf8>)
 800cd46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d102      	bne.n	800cd52 <_strtod_l+0x8aa>
 800cd4c:	3101      	adds	r1, #1
 800cd4e:	f43f adca 	beq.w	800c8e6 <_strtod_l+0x43e>
 800cd52:	4b92      	ldr	r3, [pc, #584]	@ (800cf9c <_strtod_l+0xaf4>)
 800cd54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd56:	401a      	ands	r2, r3
 800cd58:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cd5c:	f04f 0a00 	mov.w	sl, #0
 800cd60:	9b08      	ldr	r3, [sp, #32]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d1b8      	bne.n	800ccd8 <_strtod_l+0x830>
 800cd66:	e5c9      	b.n	800c8fc <_strtod_l+0x454>
 800cd68:	f04f 33ff 	mov.w	r3, #4294967295
 800cd6c:	e7e8      	b.n	800cd40 <_strtod_l+0x898>
 800cd6e:	4613      	mov	r3, r2
 800cd70:	e7e6      	b.n	800cd40 <_strtod_l+0x898>
 800cd72:	ea53 030a 	orrs.w	r3, r3, sl
 800cd76:	d0a1      	beq.n	800ccbc <_strtod_l+0x814>
 800cd78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd7a:	b1db      	cbz	r3, 800cdb4 <_strtod_l+0x90c>
 800cd7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd7e:	4213      	tst	r3, r2
 800cd80:	d0ee      	beq.n	800cd60 <_strtod_l+0x8b8>
 800cd82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd84:	9a08      	ldr	r2, [sp, #32]
 800cd86:	4650      	mov	r0, sl
 800cd88:	4659      	mov	r1, fp
 800cd8a:	b1bb      	cbz	r3, 800cdbc <_strtod_l+0x914>
 800cd8c:	f7ff fb6d 	bl	800c46a <sulp>
 800cd90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd94:	ec53 2b10 	vmov	r2, r3, d0
 800cd98:	f7f3 faa0 	bl	80002dc <__adddf3>
 800cd9c:	4682      	mov	sl, r0
 800cd9e:	468b      	mov	fp, r1
 800cda0:	e7de      	b.n	800cd60 <_strtod_l+0x8b8>
 800cda2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cda6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cdaa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cdae:	f04f 3aff 	mov.w	sl, #4294967295
 800cdb2:	e7d5      	b.n	800cd60 <_strtod_l+0x8b8>
 800cdb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cdb6:	ea13 0f0a 	tst.w	r3, sl
 800cdba:	e7e1      	b.n	800cd80 <_strtod_l+0x8d8>
 800cdbc:	f7ff fb55 	bl	800c46a <sulp>
 800cdc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdc4:	ec53 2b10 	vmov	r2, r3, d0
 800cdc8:	f7f3 fa86 	bl	80002d8 <__aeabi_dsub>
 800cdcc:	2200      	movs	r2, #0
 800cdce:	2300      	movs	r3, #0
 800cdd0:	4682      	mov	sl, r0
 800cdd2:	468b      	mov	fp, r1
 800cdd4:	f7f3 fea0 	bl	8000b18 <__aeabi_dcmpeq>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d0c1      	beq.n	800cd60 <_strtod_l+0x8b8>
 800cddc:	e619      	b.n	800ca12 <_strtod_l+0x56a>
 800cdde:	4641      	mov	r1, r8
 800cde0:	4620      	mov	r0, r4
 800cde2:	f001 fb9d 	bl	800e520 <__ratio>
 800cde6:	ec57 6b10 	vmov	r6, r7, d0
 800cdea:	2200      	movs	r2, #0
 800cdec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	4639      	mov	r1, r7
 800cdf4:	f7f3 fea4 	bl	8000b40 <__aeabi_dcmple>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d06f      	beq.n	800cedc <_strtod_l+0xa34>
 800cdfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d17a      	bne.n	800cef8 <_strtod_l+0xa50>
 800ce02:	f1ba 0f00 	cmp.w	sl, #0
 800ce06:	d158      	bne.n	800ceba <_strtod_l+0xa12>
 800ce08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d15a      	bne.n	800cec8 <_strtod_l+0xa20>
 800ce12:	4b64      	ldr	r3, [pc, #400]	@ (800cfa4 <_strtod_l+0xafc>)
 800ce14:	2200      	movs	r2, #0
 800ce16:	4630      	mov	r0, r6
 800ce18:	4639      	mov	r1, r7
 800ce1a:	f7f3 fe87 	bl	8000b2c <__aeabi_dcmplt>
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d159      	bne.n	800ced6 <_strtod_l+0xa2e>
 800ce22:	4630      	mov	r0, r6
 800ce24:	4639      	mov	r1, r7
 800ce26:	4b60      	ldr	r3, [pc, #384]	@ (800cfa8 <_strtod_l+0xb00>)
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f7f3 fc0d 	bl	8000648 <__aeabi_dmul>
 800ce2e:	4606      	mov	r6, r0
 800ce30:	460f      	mov	r7, r1
 800ce32:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ce36:	9606      	str	r6, [sp, #24]
 800ce38:	9307      	str	r3, [sp, #28]
 800ce3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce3e:	4d57      	ldr	r5, [pc, #348]	@ (800cf9c <_strtod_l+0xaf4>)
 800ce40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ce44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce46:	401d      	ands	r5, r3
 800ce48:	4b58      	ldr	r3, [pc, #352]	@ (800cfac <_strtod_l+0xb04>)
 800ce4a:	429d      	cmp	r5, r3
 800ce4c:	f040 80b2 	bne.w	800cfb4 <_strtod_l+0xb0c>
 800ce50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce52:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ce56:	ec4b ab10 	vmov	d0, sl, fp
 800ce5a:	f001 fa99 	bl	800e390 <__ulp>
 800ce5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce62:	ec51 0b10 	vmov	r0, r1, d0
 800ce66:	f7f3 fbef 	bl	8000648 <__aeabi_dmul>
 800ce6a:	4652      	mov	r2, sl
 800ce6c:	465b      	mov	r3, fp
 800ce6e:	f7f3 fa35 	bl	80002dc <__adddf3>
 800ce72:	460b      	mov	r3, r1
 800ce74:	4949      	ldr	r1, [pc, #292]	@ (800cf9c <_strtod_l+0xaf4>)
 800ce76:	4a4e      	ldr	r2, [pc, #312]	@ (800cfb0 <_strtod_l+0xb08>)
 800ce78:	4019      	ands	r1, r3
 800ce7a:	4291      	cmp	r1, r2
 800ce7c:	4682      	mov	sl, r0
 800ce7e:	d942      	bls.n	800cf06 <_strtod_l+0xa5e>
 800ce80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ce82:	4b47      	ldr	r3, [pc, #284]	@ (800cfa0 <_strtod_l+0xaf8>)
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d103      	bne.n	800ce90 <_strtod_l+0x9e8>
 800ce88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	f43f ad2b 	beq.w	800c8e6 <_strtod_l+0x43e>
 800ce90:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cfa0 <_strtod_l+0xaf8>
 800ce94:	f04f 3aff 	mov.w	sl, #4294967295
 800ce98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce9a:	9805      	ldr	r0, [sp, #20]
 800ce9c:	f000 ff44 	bl	800dd28 <_Bfree>
 800cea0:	9805      	ldr	r0, [sp, #20]
 800cea2:	4649      	mov	r1, r9
 800cea4:	f000 ff40 	bl	800dd28 <_Bfree>
 800cea8:	9805      	ldr	r0, [sp, #20]
 800ceaa:	4641      	mov	r1, r8
 800ceac:	f000 ff3c 	bl	800dd28 <_Bfree>
 800ceb0:	9805      	ldr	r0, [sp, #20]
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	f000 ff38 	bl	800dd28 <_Bfree>
 800ceb8:	e618      	b.n	800caec <_strtod_l+0x644>
 800ceba:	f1ba 0f01 	cmp.w	sl, #1
 800cebe:	d103      	bne.n	800cec8 <_strtod_l+0xa20>
 800cec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f43f ada5 	beq.w	800ca12 <_strtod_l+0x56a>
 800cec8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cf78 <_strtod_l+0xad0>
 800cecc:	4f35      	ldr	r7, [pc, #212]	@ (800cfa4 <_strtod_l+0xafc>)
 800cece:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ced2:	2600      	movs	r6, #0
 800ced4:	e7b1      	b.n	800ce3a <_strtod_l+0x992>
 800ced6:	4f34      	ldr	r7, [pc, #208]	@ (800cfa8 <_strtod_l+0xb00>)
 800ced8:	2600      	movs	r6, #0
 800ceda:	e7aa      	b.n	800ce32 <_strtod_l+0x98a>
 800cedc:	4b32      	ldr	r3, [pc, #200]	@ (800cfa8 <_strtod_l+0xb00>)
 800cede:	4630      	mov	r0, r6
 800cee0:	4639      	mov	r1, r7
 800cee2:	2200      	movs	r2, #0
 800cee4:	f7f3 fbb0 	bl	8000648 <__aeabi_dmul>
 800cee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ceea:	4606      	mov	r6, r0
 800ceec:	460f      	mov	r7, r1
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d09f      	beq.n	800ce32 <_strtod_l+0x98a>
 800cef2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cef6:	e7a0      	b.n	800ce3a <_strtod_l+0x992>
 800cef8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cf80 <_strtod_l+0xad8>
 800cefc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf00:	ec57 6b17 	vmov	r6, r7, d7
 800cf04:	e799      	b.n	800ce3a <_strtod_l+0x992>
 800cf06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cf0a:	9b08      	ldr	r3, [sp, #32]
 800cf0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1c1      	bne.n	800ce98 <_strtod_l+0x9f0>
 800cf14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf18:	0d1b      	lsrs	r3, r3, #20
 800cf1a:	051b      	lsls	r3, r3, #20
 800cf1c:	429d      	cmp	r5, r3
 800cf1e:	d1bb      	bne.n	800ce98 <_strtod_l+0x9f0>
 800cf20:	4630      	mov	r0, r6
 800cf22:	4639      	mov	r1, r7
 800cf24:	f7f3 fffe 	bl	8000f24 <__aeabi_d2lz>
 800cf28:	f7f3 fb60 	bl	80005ec <__aeabi_l2d>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	460b      	mov	r3, r1
 800cf30:	4630      	mov	r0, r6
 800cf32:	4639      	mov	r1, r7
 800cf34:	f7f3 f9d0 	bl	80002d8 <__aeabi_dsub>
 800cf38:	460b      	mov	r3, r1
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cf40:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cf44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf46:	ea46 060a 	orr.w	r6, r6, sl
 800cf4a:	431e      	orrs	r6, r3
 800cf4c:	d06f      	beq.n	800d02e <_strtod_l+0xb86>
 800cf4e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cf88 <_strtod_l+0xae0>)
 800cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf54:	f7f3 fdea 	bl	8000b2c <__aeabi_dcmplt>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	f47f accf 	bne.w	800c8fc <_strtod_l+0x454>
 800cf5e:	a30c      	add	r3, pc, #48	@ (adr r3, 800cf90 <_strtod_l+0xae8>)
 800cf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf68:	f7f3 fdfe 	bl	8000b68 <__aeabi_dcmpgt>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d093      	beq.n	800ce98 <_strtod_l+0x9f0>
 800cf70:	e4c4      	b.n	800c8fc <_strtod_l+0x454>
 800cf72:	bf00      	nop
 800cf74:	f3af 8000 	nop.w
 800cf78:	00000000 	.word	0x00000000
 800cf7c:	bff00000 	.word	0xbff00000
 800cf80:	00000000 	.word	0x00000000
 800cf84:	3ff00000 	.word	0x3ff00000
 800cf88:	94a03595 	.word	0x94a03595
 800cf8c:	3fdfffff 	.word	0x3fdfffff
 800cf90:	35afe535 	.word	0x35afe535
 800cf94:	3fe00000 	.word	0x3fe00000
 800cf98:	000fffff 	.word	0x000fffff
 800cf9c:	7ff00000 	.word	0x7ff00000
 800cfa0:	7fefffff 	.word	0x7fefffff
 800cfa4:	3ff00000 	.word	0x3ff00000
 800cfa8:	3fe00000 	.word	0x3fe00000
 800cfac:	7fe00000 	.word	0x7fe00000
 800cfb0:	7c9fffff 	.word	0x7c9fffff
 800cfb4:	9b08      	ldr	r3, [sp, #32]
 800cfb6:	b323      	cbz	r3, 800d002 <_strtod_l+0xb5a>
 800cfb8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cfbc:	d821      	bhi.n	800d002 <_strtod_l+0xb5a>
 800cfbe:	a328      	add	r3, pc, #160	@ (adr r3, 800d060 <_strtod_l+0xbb8>)
 800cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	4639      	mov	r1, r7
 800cfc8:	f7f3 fdba 	bl	8000b40 <__aeabi_dcmple>
 800cfcc:	b1a0      	cbz	r0, 800cff8 <_strtod_l+0xb50>
 800cfce:	4639      	mov	r1, r7
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f7f3 fe11 	bl	8000bf8 <__aeabi_d2uiz>
 800cfd6:	2801      	cmp	r0, #1
 800cfd8:	bf38      	it	cc
 800cfda:	2001      	movcc	r0, #1
 800cfdc:	f7f3 faba 	bl	8000554 <__aeabi_ui2d>
 800cfe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	460f      	mov	r7, r1
 800cfe6:	b9fb      	cbnz	r3, 800d028 <_strtod_l+0xb80>
 800cfe8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cfec:	9014      	str	r0, [sp, #80]	@ 0x50
 800cfee:	9315      	str	r3, [sp, #84]	@ 0x54
 800cff0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cff4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cff8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cffa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cffe:	1b5b      	subs	r3, r3, r5
 800d000:	9311      	str	r3, [sp, #68]	@ 0x44
 800d002:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d006:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d00a:	f001 f9c1 	bl	800e390 <__ulp>
 800d00e:	4650      	mov	r0, sl
 800d010:	ec53 2b10 	vmov	r2, r3, d0
 800d014:	4659      	mov	r1, fp
 800d016:	f7f3 fb17 	bl	8000648 <__aeabi_dmul>
 800d01a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d01e:	f7f3 f95d 	bl	80002dc <__adddf3>
 800d022:	4682      	mov	sl, r0
 800d024:	468b      	mov	fp, r1
 800d026:	e770      	b.n	800cf0a <_strtod_l+0xa62>
 800d028:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d02c:	e7e0      	b.n	800cff0 <_strtod_l+0xb48>
 800d02e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d068 <_strtod_l+0xbc0>)
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	f7f3 fd7a 	bl	8000b2c <__aeabi_dcmplt>
 800d038:	e798      	b.n	800cf6c <_strtod_l+0xac4>
 800d03a:	2300      	movs	r3, #0
 800d03c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d03e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d040:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d042:	6013      	str	r3, [r2, #0]
 800d044:	f7ff ba6d 	b.w	800c522 <_strtod_l+0x7a>
 800d048:	2a65      	cmp	r2, #101	@ 0x65
 800d04a:	f43f ab66 	beq.w	800c71a <_strtod_l+0x272>
 800d04e:	2a45      	cmp	r2, #69	@ 0x45
 800d050:	f43f ab63 	beq.w	800c71a <_strtod_l+0x272>
 800d054:	2301      	movs	r3, #1
 800d056:	f7ff bb9e 	b.w	800c796 <_strtod_l+0x2ee>
 800d05a:	bf00      	nop
 800d05c:	f3af 8000 	nop.w
 800d060:	ffc00000 	.word	0xffc00000
 800d064:	41dfffff 	.word	0x41dfffff
 800d068:	94a03595 	.word	0x94a03595
 800d06c:	3fcfffff 	.word	0x3fcfffff

0800d070 <strtod>:
 800d070:	460a      	mov	r2, r1
 800d072:	4601      	mov	r1, r0
 800d074:	4802      	ldr	r0, [pc, #8]	@ (800d080 <strtod+0x10>)
 800d076:	4b03      	ldr	r3, [pc, #12]	@ (800d084 <strtod+0x14>)
 800d078:	6800      	ldr	r0, [r0, #0]
 800d07a:	f7ff ba15 	b.w	800c4a8 <_strtod_l>
 800d07e:	bf00      	nop
 800d080:	200001b8 	.word	0x200001b8
 800d084:	2000004c 	.word	0x2000004c

0800d088 <std>:
 800d088:	2300      	movs	r3, #0
 800d08a:	b510      	push	{r4, lr}
 800d08c:	4604      	mov	r4, r0
 800d08e:	e9c0 3300 	strd	r3, r3, [r0]
 800d092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d096:	6083      	str	r3, [r0, #8]
 800d098:	8181      	strh	r1, [r0, #12]
 800d09a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d09c:	81c2      	strh	r2, [r0, #14]
 800d09e:	6183      	str	r3, [r0, #24]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	2208      	movs	r2, #8
 800d0a4:	305c      	adds	r0, #92	@ 0x5c
 800d0a6:	f000 f914 	bl	800d2d2 <memset>
 800d0aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d0e0 <std+0x58>)
 800d0ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800d0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d0e4 <std+0x5c>)
 800d0b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d0e8 <std+0x60>)
 800d0b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d0b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d0ec <std+0x64>)
 800d0b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d0ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d0f0 <std+0x68>)
 800d0bc:	6224      	str	r4, [r4, #32]
 800d0be:	429c      	cmp	r4, r3
 800d0c0:	d006      	beq.n	800d0d0 <std+0x48>
 800d0c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d0c6:	4294      	cmp	r4, r2
 800d0c8:	d002      	beq.n	800d0d0 <std+0x48>
 800d0ca:	33d0      	adds	r3, #208	@ 0xd0
 800d0cc:	429c      	cmp	r4, r3
 800d0ce:	d105      	bne.n	800d0dc <std+0x54>
 800d0d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0d8:	f000 b986 	b.w	800d3e8 <__retarget_lock_init_recursive>
 800d0dc:	bd10      	pop	{r4, pc}
 800d0de:	bf00      	nop
 800d0e0:	0800d24d 	.word	0x0800d24d
 800d0e4:	0800d26f 	.word	0x0800d26f
 800d0e8:	0800d2a7 	.word	0x0800d2a7
 800d0ec:	0800d2cb 	.word	0x0800d2cb
 800d0f0:	20000c70 	.word	0x20000c70

0800d0f4 <stdio_exit_handler>:
 800d0f4:	4a02      	ldr	r2, [pc, #8]	@ (800d100 <stdio_exit_handler+0xc>)
 800d0f6:	4903      	ldr	r1, [pc, #12]	@ (800d104 <stdio_exit_handler+0x10>)
 800d0f8:	4803      	ldr	r0, [pc, #12]	@ (800d108 <stdio_exit_handler+0x14>)
 800d0fa:	f000 b869 	b.w	800d1d0 <_fwalk_sglue>
 800d0fe:	bf00      	nop
 800d100:	20000040 	.word	0x20000040
 800d104:	0800ecf9 	.word	0x0800ecf9
 800d108:	200001bc 	.word	0x200001bc

0800d10c <cleanup_stdio>:
 800d10c:	6841      	ldr	r1, [r0, #4]
 800d10e:	4b0c      	ldr	r3, [pc, #48]	@ (800d140 <cleanup_stdio+0x34>)
 800d110:	4299      	cmp	r1, r3
 800d112:	b510      	push	{r4, lr}
 800d114:	4604      	mov	r4, r0
 800d116:	d001      	beq.n	800d11c <cleanup_stdio+0x10>
 800d118:	f001 fdee 	bl	800ecf8 <_fflush_r>
 800d11c:	68a1      	ldr	r1, [r4, #8]
 800d11e:	4b09      	ldr	r3, [pc, #36]	@ (800d144 <cleanup_stdio+0x38>)
 800d120:	4299      	cmp	r1, r3
 800d122:	d002      	beq.n	800d12a <cleanup_stdio+0x1e>
 800d124:	4620      	mov	r0, r4
 800d126:	f001 fde7 	bl	800ecf8 <_fflush_r>
 800d12a:	68e1      	ldr	r1, [r4, #12]
 800d12c:	4b06      	ldr	r3, [pc, #24]	@ (800d148 <cleanup_stdio+0x3c>)
 800d12e:	4299      	cmp	r1, r3
 800d130:	d004      	beq.n	800d13c <cleanup_stdio+0x30>
 800d132:	4620      	mov	r0, r4
 800d134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d138:	f001 bdde 	b.w	800ecf8 <_fflush_r>
 800d13c:	bd10      	pop	{r4, pc}
 800d13e:	bf00      	nop
 800d140:	20000c70 	.word	0x20000c70
 800d144:	20000cd8 	.word	0x20000cd8
 800d148:	20000d40 	.word	0x20000d40

0800d14c <global_stdio_init.part.0>:
 800d14c:	b510      	push	{r4, lr}
 800d14e:	4b0b      	ldr	r3, [pc, #44]	@ (800d17c <global_stdio_init.part.0+0x30>)
 800d150:	4c0b      	ldr	r4, [pc, #44]	@ (800d180 <global_stdio_init.part.0+0x34>)
 800d152:	4a0c      	ldr	r2, [pc, #48]	@ (800d184 <global_stdio_init.part.0+0x38>)
 800d154:	601a      	str	r2, [r3, #0]
 800d156:	4620      	mov	r0, r4
 800d158:	2200      	movs	r2, #0
 800d15a:	2104      	movs	r1, #4
 800d15c:	f7ff ff94 	bl	800d088 <std>
 800d160:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d164:	2201      	movs	r2, #1
 800d166:	2109      	movs	r1, #9
 800d168:	f7ff ff8e 	bl	800d088 <std>
 800d16c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d170:	2202      	movs	r2, #2
 800d172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d176:	2112      	movs	r1, #18
 800d178:	f7ff bf86 	b.w	800d088 <std>
 800d17c:	20000da8 	.word	0x20000da8
 800d180:	20000c70 	.word	0x20000c70
 800d184:	0800d0f5 	.word	0x0800d0f5

0800d188 <__sfp_lock_acquire>:
 800d188:	4801      	ldr	r0, [pc, #4]	@ (800d190 <__sfp_lock_acquire+0x8>)
 800d18a:	f000 b92e 	b.w	800d3ea <__retarget_lock_acquire_recursive>
 800d18e:	bf00      	nop
 800d190:	20000db1 	.word	0x20000db1

0800d194 <__sfp_lock_release>:
 800d194:	4801      	ldr	r0, [pc, #4]	@ (800d19c <__sfp_lock_release+0x8>)
 800d196:	f000 b929 	b.w	800d3ec <__retarget_lock_release_recursive>
 800d19a:	bf00      	nop
 800d19c:	20000db1 	.word	0x20000db1

0800d1a0 <__sinit>:
 800d1a0:	b510      	push	{r4, lr}
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	f7ff fff0 	bl	800d188 <__sfp_lock_acquire>
 800d1a8:	6a23      	ldr	r3, [r4, #32]
 800d1aa:	b11b      	cbz	r3, 800d1b4 <__sinit+0x14>
 800d1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1b0:	f7ff bff0 	b.w	800d194 <__sfp_lock_release>
 800d1b4:	4b04      	ldr	r3, [pc, #16]	@ (800d1c8 <__sinit+0x28>)
 800d1b6:	6223      	str	r3, [r4, #32]
 800d1b8:	4b04      	ldr	r3, [pc, #16]	@ (800d1cc <__sinit+0x2c>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1f5      	bne.n	800d1ac <__sinit+0xc>
 800d1c0:	f7ff ffc4 	bl	800d14c <global_stdio_init.part.0>
 800d1c4:	e7f2      	b.n	800d1ac <__sinit+0xc>
 800d1c6:	bf00      	nop
 800d1c8:	0800d10d 	.word	0x0800d10d
 800d1cc:	20000da8 	.word	0x20000da8

0800d1d0 <_fwalk_sglue>:
 800d1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1d4:	4607      	mov	r7, r0
 800d1d6:	4688      	mov	r8, r1
 800d1d8:	4614      	mov	r4, r2
 800d1da:	2600      	movs	r6, #0
 800d1dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1e0:	f1b9 0901 	subs.w	r9, r9, #1
 800d1e4:	d505      	bpl.n	800d1f2 <_fwalk_sglue+0x22>
 800d1e6:	6824      	ldr	r4, [r4, #0]
 800d1e8:	2c00      	cmp	r4, #0
 800d1ea:	d1f7      	bne.n	800d1dc <_fwalk_sglue+0xc>
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1f2:	89ab      	ldrh	r3, [r5, #12]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d907      	bls.n	800d208 <_fwalk_sglue+0x38>
 800d1f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	d003      	beq.n	800d208 <_fwalk_sglue+0x38>
 800d200:	4629      	mov	r1, r5
 800d202:	4638      	mov	r0, r7
 800d204:	47c0      	blx	r8
 800d206:	4306      	orrs	r6, r0
 800d208:	3568      	adds	r5, #104	@ 0x68
 800d20a:	e7e9      	b.n	800d1e0 <_fwalk_sglue+0x10>

0800d20c <siprintf>:
 800d20c:	b40e      	push	{r1, r2, r3}
 800d20e:	b500      	push	{lr}
 800d210:	b09c      	sub	sp, #112	@ 0x70
 800d212:	ab1d      	add	r3, sp, #116	@ 0x74
 800d214:	9002      	str	r0, [sp, #8]
 800d216:	9006      	str	r0, [sp, #24]
 800d218:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d21c:	4809      	ldr	r0, [pc, #36]	@ (800d244 <siprintf+0x38>)
 800d21e:	9107      	str	r1, [sp, #28]
 800d220:	9104      	str	r1, [sp, #16]
 800d222:	4909      	ldr	r1, [pc, #36]	@ (800d248 <siprintf+0x3c>)
 800d224:	f853 2b04 	ldr.w	r2, [r3], #4
 800d228:	9105      	str	r1, [sp, #20]
 800d22a:	6800      	ldr	r0, [r0, #0]
 800d22c:	9301      	str	r3, [sp, #4]
 800d22e:	a902      	add	r1, sp, #8
 800d230:	f001 fa54 	bl	800e6dc <_svfiprintf_r>
 800d234:	9b02      	ldr	r3, [sp, #8]
 800d236:	2200      	movs	r2, #0
 800d238:	701a      	strb	r2, [r3, #0]
 800d23a:	b01c      	add	sp, #112	@ 0x70
 800d23c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d240:	b003      	add	sp, #12
 800d242:	4770      	bx	lr
 800d244:	200001b8 	.word	0x200001b8
 800d248:	ffff0208 	.word	0xffff0208

0800d24c <__sread>:
 800d24c:	b510      	push	{r4, lr}
 800d24e:	460c      	mov	r4, r1
 800d250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d254:	f000 f87a 	bl	800d34c <_read_r>
 800d258:	2800      	cmp	r0, #0
 800d25a:	bfab      	itete	ge
 800d25c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d25e:	89a3      	ldrhlt	r3, [r4, #12]
 800d260:	181b      	addge	r3, r3, r0
 800d262:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d266:	bfac      	ite	ge
 800d268:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d26a:	81a3      	strhlt	r3, [r4, #12]
 800d26c:	bd10      	pop	{r4, pc}

0800d26e <__swrite>:
 800d26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d272:	461f      	mov	r7, r3
 800d274:	898b      	ldrh	r3, [r1, #12]
 800d276:	05db      	lsls	r3, r3, #23
 800d278:	4605      	mov	r5, r0
 800d27a:	460c      	mov	r4, r1
 800d27c:	4616      	mov	r6, r2
 800d27e:	d505      	bpl.n	800d28c <__swrite+0x1e>
 800d280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d284:	2302      	movs	r3, #2
 800d286:	2200      	movs	r2, #0
 800d288:	f000 f84e 	bl	800d328 <_lseek_r>
 800d28c:	89a3      	ldrh	r3, [r4, #12]
 800d28e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d296:	81a3      	strh	r3, [r4, #12]
 800d298:	4632      	mov	r2, r6
 800d29a:	463b      	mov	r3, r7
 800d29c:	4628      	mov	r0, r5
 800d29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a2:	f000 b865 	b.w	800d370 <_write_r>

0800d2a6 <__sseek>:
 800d2a6:	b510      	push	{r4, lr}
 800d2a8:	460c      	mov	r4, r1
 800d2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2ae:	f000 f83b 	bl	800d328 <_lseek_r>
 800d2b2:	1c43      	adds	r3, r0, #1
 800d2b4:	89a3      	ldrh	r3, [r4, #12]
 800d2b6:	bf15      	itete	ne
 800d2b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d2ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d2be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d2c2:	81a3      	strheq	r3, [r4, #12]
 800d2c4:	bf18      	it	ne
 800d2c6:	81a3      	strhne	r3, [r4, #12]
 800d2c8:	bd10      	pop	{r4, pc}

0800d2ca <__sclose>:
 800d2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2ce:	f000 b81b 	b.w	800d308 <_close_r>

0800d2d2 <memset>:
 800d2d2:	4402      	add	r2, r0
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d100      	bne.n	800d2dc <memset+0xa>
 800d2da:	4770      	bx	lr
 800d2dc:	f803 1b01 	strb.w	r1, [r3], #1
 800d2e0:	e7f9      	b.n	800d2d6 <memset+0x4>

0800d2e2 <strncmp>:
 800d2e2:	b510      	push	{r4, lr}
 800d2e4:	b16a      	cbz	r2, 800d302 <strncmp+0x20>
 800d2e6:	3901      	subs	r1, #1
 800d2e8:	1884      	adds	r4, r0, r2
 800d2ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d103      	bne.n	800d2fe <strncmp+0x1c>
 800d2f6:	42a0      	cmp	r0, r4
 800d2f8:	d001      	beq.n	800d2fe <strncmp+0x1c>
 800d2fa:	2a00      	cmp	r2, #0
 800d2fc:	d1f5      	bne.n	800d2ea <strncmp+0x8>
 800d2fe:	1ad0      	subs	r0, r2, r3
 800d300:	bd10      	pop	{r4, pc}
 800d302:	4610      	mov	r0, r2
 800d304:	e7fc      	b.n	800d300 <strncmp+0x1e>
	...

0800d308 <_close_r>:
 800d308:	b538      	push	{r3, r4, r5, lr}
 800d30a:	4d06      	ldr	r5, [pc, #24]	@ (800d324 <_close_r+0x1c>)
 800d30c:	2300      	movs	r3, #0
 800d30e:	4604      	mov	r4, r0
 800d310:	4608      	mov	r0, r1
 800d312:	602b      	str	r3, [r5, #0]
 800d314:	f7f5 ffd2 	bl	80032bc <_close>
 800d318:	1c43      	adds	r3, r0, #1
 800d31a:	d102      	bne.n	800d322 <_close_r+0x1a>
 800d31c:	682b      	ldr	r3, [r5, #0]
 800d31e:	b103      	cbz	r3, 800d322 <_close_r+0x1a>
 800d320:	6023      	str	r3, [r4, #0]
 800d322:	bd38      	pop	{r3, r4, r5, pc}
 800d324:	20000dac 	.word	0x20000dac

0800d328 <_lseek_r>:
 800d328:	b538      	push	{r3, r4, r5, lr}
 800d32a:	4d07      	ldr	r5, [pc, #28]	@ (800d348 <_lseek_r+0x20>)
 800d32c:	4604      	mov	r4, r0
 800d32e:	4608      	mov	r0, r1
 800d330:	4611      	mov	r1, r2
 800d332:	2200      	movs	r2, #0
 800d334:	602a      	str	r2, [r5, #0]
 800d336:	461a      	mov	r2, r3
 800d338:	f7f5 ffe7 	bl	800330a <_lseek>
 800d33c:	1c43      	adds	r3, r0, #1
 800d33e:	d102      	bne.n	800d346 <_lseek_r+0x1e>
 800d340:	682b      	ldr	r3, [r5, #0]
 800d342:	b103      	cbz	r3, 800d346 <_lseek_r+0x1e>
 800d344:	6023      	str	r3, [r4, #0]
 800d346:	bd38      	pop	{r3, r4, r5, pc}
 800d348:	20000dac 	.word	0x20000dac

0800d34c <_read_r>:
 800d34c:	b538      	push	{r3, r4, r5, lr}
 800d34e:	4d07      	ldr	r5, [pc, #28]	@ (800d36c <_read_r+0x20>)
 800d350:	4604      	mov	r4, r0
 800d352:	4608      	mov	r0, r1
 800d354:	4611      	mov	r1, r2
 800d356:	2200      	movs	r2, #0
 800d358:	602a      	str	r2, [r5, #0]
 800d35a:	461a      	mov	r2, r3
 800d35c:	f7f5 ff75 	bl	800324a <_read>
 800d360:	1c43      	adds	r3, r0, #1
 800d362:	d102      	bne.n	800d36a <_read_r+0x1e>
 800d364:	682b      	ldr	r3, [r5, #0]
 800d366:	b103      	cbz	r3, 800d36a <_read_r+0x1e>
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	bd38      	pop	{r3, r4, r5, pc}
 800d36c:	20000dac 	.word	0x20000dac

0800d370 <_write_r>:
 800d370:	b538      	push	{r3, r4, r5, lr}
 800d372:	4d07      	ldr	r5, [pc, #28]	@ (800d390 <_write_r+0x20>)
 800d374:	4604      	mov	r4, r0
 800d376:	4608      	mov	r0, r1
 800d378:	4611      	mov	r1, r2
 800d37a:	2200      	movs	r2, #0
 800d37c:	602a      	str	r2, [r5, #0]
 800d37e:	461a      	mov	r2, r3
 800d380:	f7f5 ff80 	bl	8003284 <_write>
 800d384:	1c43      	adds	r3, r0, #1
 800d386:	d102      	bne.n	800d38e <_write_r+0x1e>
 800d388:	682b      	ldr	r3, [r5, #0]
 800d38a:	b103      	cbz	r3, 800d38e <_write_r+0x1e>
 800d38c:	6023      	str	r3, [r4, #0]
 800d38e:	bd38      	pop	{r3, r4, r5, pc}
 800d390:	20000dac 	.word	0x20000dac

0800d394 <__errno>:
 800d394:	4b01      	ldr	r3, [pc, #4]	@ (800d39c <__errno+0x8>)
 800d396:	6818      	ldr	r0, [r3, #0]
 800d398:	4770      	bx	lr
 800d39a:	bf00      	nop
 800d39c:	200001b8 	.word	0x200001b8

0800d3a0 <__libc_init_array>:
 800d3a0:	b570      	push	{r4, r5, r6, lr}
 800d3a2:	4d0d      	ldr	r5, [pc, #52]	@ (800d3d8 <__libc_init_array+0x38>)
 800d3a4:	4c0d      	ldr	r4, [pc, #52]	@ (800d3dc <__libc_init_array+0x3c>)
 800d3a6:	1b64      	subs	r4, r4, r5
 800d3a8:	10a4      	asrs	r4, r4, #2
 800d3aa:	2600      	movs	r6, #0
 800d3ac:	42a6      	cmp	r6, r4
 800d3ae:	d109      	bne.n	800d3c4 <__libc_init_array+0x24>
 800d3b0:	4d0b      	ldr	r5, [pc, #44]	@ (800d3e0 <__libc_init_array+0x40>)
 800d3b2:	4c0c      	ldr	r4, [pc, #48]	@ (800d3e4 <__libc_init_array+0x44>)
 800d3b4:	f002 f9ce 	bl	800f754 <_init>
 800d3b8:	1b64      	subs	r4, r4, r5
 800d3ba:	10a4      	asrs	r4, r4, #2
 800d3bc:	2600      	movs	r6, #0
 800d3be:	42a6      	cmp	r6, r4
 800d3c0:	d105      	bne.n	800d3ce <__libc_init_array+0x2e>
 800d3c2:	bd70      	pop	{r4, r5, r6, pc}
 800d3c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3c8:	4798      	blx	r3
 800d3ca:	3601      	adds	r6, #1
 800d3cc:	e7ee      	b.n	800d3ac <__libc_init_array+0xc>
 800d3ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3d2:	4798      	blx	r3
 800d3d4:	3601      	adds	r6, #1
 800d3d6:	e7f2      	b.n	800d3be <__libc_init_array+0x1e>
 800d3d8:	0800fba8 	.word	0x0800fba8
 800d3dc:	0800fba8 	.word	0x0800fba8
 800d3e0:	0800fba8 	.word	0x0800fba8
 800d3e4:	0800fbac 	.word	0x0800fbac

0800d3e8 <__retarget_lock_init_recursive>:
 800d3e8:	4770      	bx	lr

0800d3ea <__retarget_lock_acquire_recursive>:
 800d3ea:	4770      	bx	lr

0800d3ec <__retarget_lock_release_recursive>:
 800d3ec:	4770      	bx	lr

0800d3ee <memcpy>:
 800d3ee:	440a      	add	r2, r1
 800d3f0:	4291      	cmp	r1, r2
 800d3f2:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3f6:	d100      	bne.n	800d3fa <memcpy+0xc>
 800d3f8:	4770      	bx	lr
 800d3fa:	b510      	push	{r4, lr}
 800d3fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d400:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d404:	4291      	cmp	r1, r2
 800d406:	d1f9      	bne.n	800d3fc <memcpy+0xe>
 800d408:	bd10      	pop	{r4, pc}
 800d40a:	0000      	movs	r0, r0
 800d40c:	0000      	movs	r0, r0
	...

0800d410 <nan>:
 800d410:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d418 <nan+0x8>
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	00000000 	.word	0x00000000
 800d41c:	7ff80000 	.word	0x7ff80000

0800d420 <_free_r>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	4605      	mov	r5, r0
 800d424:	2900      	cmp	r1, #0
 800d426:	d041      	beq.n	800d4ac <_free_r+0x8c>
 800d428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d42c:	1f0c      	subs	r4, r1, #4
 800d42e:	2b00      	cmp	r3, #0
 800d430:	bfb8      	it	lt
 800d432:	18e4      	addlt	r4, r4, r3
 800d434:	f000 fc2c 	bl	800dc90 <__malloc_lock>
 800d438:	4a1d      	ldr	r2, [pc, #116]	@ (800d4b0 <_free_r+0x90>)
 800d43a:	6813      	ldr	r3, [r2, #0]
 800d43c:	b933      	cbnz	r3, 800d44c <_free_r+0x2c>
 800d43e:	6063      	str	r3, [r4, #4]
 800d440:	6014      	str	r4, [r2, #0]
 800d442:	4628      	mov	r0, r5
 800d444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d448:	f000 bc28 	b.w	800dc9c <__malloc_unlock>
 800d44c:	42a3      	cmp	r3, r4
 800d44e:	d908      	bls.n	800d462 <_free_r+0x42>
 800d450:	6820      	ldr	r0, [r4, #0]
 800d452:	1821      	adds	r1, r4, r0
 800d454:	428b      	cmp	r3, r1
 800d456:	bf01      	itttt	eq
 800d458:	6819      	ldreq	r1, [r3, #0]
 800d45a:	685b      	ldreq	r3, [r3, #4]
 800d45c:	1809      	addeq	r1, r1, r0
 800d45e:	6021      	streq	r1, [r4, #0]
 800d460:	e7ed      	b.n	800d43e <_free_r+0x1e>
 800d462:	461a      	mov	r2, r3
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	b10b      	cbz	r3, 800d46c <_free_r+0x4c>
 800d468:	42a3      	cmp	r3, r4
 800d46a:	d9fa      	bls.n	800d462 <_free_r+0x42>
 800d46c:	6811      	ldr	r1, [r2, #0]
 800d46e:	1850      	adds	r0, r2, r1
 800d470:	42a0      	cmp	r0, r4
 800d472:	d10b      	bne.n	800d48c <_free_r+0x6c>
 800d474:	6820      	ldr	r0, [r4, #0]
 800d476:	4401      	add	r1, r0
 800d478:	1850      	adds	r0, r2, r1
 800d47a:	4283      	cmp	r3, r0
 800d47c:	6011      	str	r1, [r2, #0]
 800d47e:	d1e0      	bne.n	800d442 <_free_r+0x22>
 800d480:	6818      	ldr	r0, [r3, #0]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	6053      	str	r3, [r2, #4]
 800d486:	4408      	add	r0, r1
 800d488:	6010      	str	r0, [r2, #0]
 800d48a:	e7da      	b.n	800d442 <_free_r+0x22>
 800d48c:	d902      	bls.n	800d494 <_free_r+0x74>
 800d48e:	230c      	movs	r3, #12
 800d490:	602b      	str	r3, [r5, #0]
 800d492:	e7d6      	b.n	800d442 <_free_r+0x22>
 800d494:	6820      	ldr	r0, [r4, #0]
 800d496:	1821      	adds	r1, r4, r0
 800d498:	428b      	cmp	r3, r1
 800d49a:	bf04      	itt	eq
 800d49c:	6819      	ldreq	r1, [r3, #0]
 800d49e:	685b      	ldreq	r3, [r3, #4]
 800d4a0:	6063      	str	r3, [r4, #4]
 800d4a2:	bf04      	itt	eq
 800d4a4:	1809      	addeq	r1, r1, r0
 800d4a6:	6021      	streq	r1, [r4, #0]
 800d4a8:	6054      	str	r4, [r2, #4]
 800d4aa:	e7ca      	b.n	800d442 <_free_r+0x22>
 800d4ac:	bd38      	pop	{r3, r4, r5, pc}
 800d4ae:	bf00      	nop
 800d4b0:	20000db8 	.word	0x20000db8

0800d4b4 <rshift>:
 800d4b4:	6903      	ldr	r3, [r0, #16]
 800d4b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d4ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d4c2:	f100 0414 	add.w	r4, r0, #20
 800d4c6:	dd45      	ble.n	800d554 <rshift+0xa0>
 800d4c8:	f011 011f 	ands.w	r1, r1, #31
 800d4cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d4d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d4d4:	d10c      	bne.n	800d4f0 <rshift+0x3c>
 800d4d6:	f100 0710 	add.w	r7, r0, #16
 800d4da:	4629      	mov	r1, r5
 800d4dc:	42b1      	cmp	r1, r6
 800d4de:	d334      	bcc.n	800d54a <rshift+0x96>
 800d4e0:	1a9b      	subs	r3, r3, r2
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	1eea      	subs	r2, r5, #3
 800d4e6:	4296      	cmp	r6, r2
 800d4e8:	bf38      	it	cc
 800d4ea:	2300      	movcc	r3, #0
 800d4ec:	4423      	add	r3, r4
 800d4ee:	e015      	b.n	800d51c <rshift+0x68>
 800d4f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d4f4:	f1c1 0820 	rsb	r8, r1, #32
 800d4f8:	40cf      	lsrs	r7, r1
 800d4fa:	f105 0e04 	add.w	lr, r5, #4
 800d4fe:	46a1      	mov	r9, r4
 800d500:	4576      	cmp	r6, lr
 800d502:	46f4      	mov	ip, lr
 800d504:	d815      	bhi.n	800d532 <rshift+0x7e>
 800d506:	1a9a      	subs	r2, r3, r2
 800d508:	0092      	lsls	r2, r2, #2
 800d50a:	3a04      	subs	r2, #4
 800d50c:	3501      	adds	r5, #1
 800d50e:	42ae      	cmp	r6, r5
 800d510:	bf38      	it	cc
 800d512:	2200      	movcc	r2, #0
 800d514:	18a3      	adds	r3, r4, r2
 800d516:	50a7      	str	r7, [r4, r2]
 800d518:	b107      	cbz	r7, 800d51c <rshift+0x68>
 800d51a:	3304      	adds	r3, #4
 800d51c:	1b1a      	subs	r2, r3, r4
 800d51e:	42a3      	cmp	r3, r4
 800d520:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d524:	bf08      	it	eq
 800d526:	2300      	moveq	r3, #0
 800d528:	6102      	str	r2, [r0, #16]
 800d52a:	bf08      	it	eq
 800d52c:	6143      	streq	r3, [r0, #20]
 800d52e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d532:	f8dc c000 	ldr.w	ip, [ip]
 800d536:	fa0c fc08 	lsl.w	ip, ip, r8
 800d53a:	ea4c 0707 	orr.w	r7, ip, r7
 800d53e:	f849 7b04 	str.w	r7, [r9], #4
 800d542:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d546:	40cf      	lsrs	r7, r1
 800d548:	e7da      	b.n	800d500 <rshift+0x4c>
 800d54a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d54e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d552:	e7c3      	b.n	800d4dc <rshift+0x28>
 800d554:	4623      	mov	r3, r4
 800d556:	e7e1      	b.n	800d51c <rshift+0x68>

0800d558 <__hexdig_fun>:
 800d558:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d55c:	2b09      	cmp	r3, #9
 800d55e:	d802      	bhi.n	800d566 <__hexdig_fun+0xe>
 800d560:	3820      	subs	r0, #32
 800d562:	b2c0      	uxtb	r0, r0
 800d564:	4770      	bx	lr
 800d566:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d56a:	2b05      	cmp	r3, #5
 800d56c:	d801      	bhi.n	800d572 <__hexdig_fun+0x1a>
 800d56e:	3847      	subs	r0, #71	@ 0x47
 800d570:	e7f7      	b.n	800d562 <__hexdig_fun+0xa>
 800d572:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d576:	2b05      	cmp	r3, #5
 800d578:	d801      	bhi.n	800d57e <__hexdig_fun+0x26>
 800d57a:	3827      	subs	r0, #39	@ 0x27
 800d57c:	e7f1      	b.n	800d562 <__hexdig_fun+0xa>
 800d57e:	2000      	movs	r0, #0
 800d580:	4770      	bx	lr
	...

0800d584 <__gethex>:
 800d584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d588:	b085      	sub	sp, #20
 800d58a:	468a      	mov	sl, r1
 800d58c:	9302      	str	r3, [sp, #8]
 800d58e:	680b      	ldr	r3, [r1, #0]
 800d590:	9001      	str	r0, [sp, #4]
 800d592:	4690      	mov	r8, r2
 800d594:	1c9c      	adds	r4, r3, #2
 800d596:	46a1      	mov	r9, r4
 800d598:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d59c:	2830      	cmp	r0, #48	@ 0x30
 800d59e:	d0fa      	beq.n	800d596 <__gethex+0x12>
 800d5a0:	eba9 0303 	sub.w	r3, r9, r3
 800d5a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800d5a8:	f7ff ffd6 	bl	800d558 <__hexdig_fun>
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d168      	bne.n	800d684 <__gethex+0x100>
 800d5b2:	49a0      	ldr	r1, [pc, #640]	@ (800d834 <__gethex+0x2b0>)
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	4648      	mov	r0, r9
 800d5b8:	f7ff fe93 	bl	800d2e2 <strncmp>
 800d5bc:	4607      	mov	r7, r0
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d167      	bne.n	800d692 <__gethex+0x10e>
 800d5c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d5c6:	4626      	mov	r6, r4
 800d5c8:	f7ff ffc6 	bl	800d558 <__hexdig_fun>
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d062      	beq.n	800d696 <__gethex+0x112>
 800d5d0:	4623      	mov	r3, r4
 800d5d2:	7818      	ldrb	r0, [r3, #0]
 800d5d4:	2830      	cmp	r0, #48	@ 0x30
 800d5d6:	4699      	mov	r9, r3
 800d5d8:	f103 0301 	add.w	r3, r3, #1
 800d5dc:	d0f9      	beq.n	800d5d2 <__gethex+0x4e>
 800d5de:	f7ff ffbb 	bl	800d558 <__hexdig_fun>
 800d5e2:	fab0 f580 	clz	r5, r0
 800d5e6:	096d      	lsrs	r5, r5, #5
 800d5e8:	f04f 0b01 	mov.w	fp, #1
 800d5ec:	464a      	mov	r2, r9
 800d5ee:	4616      	mov	r6, r2
 800d5f0:	3201      	adds	r2, #1
 800d5f2:	7830      	ldrb	r0, [r6, #0]
 800d5f4:	f7ff ffb0 	bl	800d558 <__hexdig_fun>
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	d1f8      	bne.n	800d5ee <__gethex+0x6a>
 800d5fc:	498d      	ldr	r1, [pc, #564]	@ (800d834 <__gethex+0x2b0>)
 800d5fe:	2201      	movs	r2, #1
 800d600:	4630      	mov	r0, r6
 800d602:	f7ff fe6e 	bl	800d2e2 <strncmp>
 800d606:	2800      	cmp	r0, #0
 800d608:	d13f      	bne.n	800d68a <__gethex+0x106>
 800d60a:	b944      	cbnz	r4, 800d61e <__gethex+0x9a>
 800d60c:	1c74      	adds	r4, r6, #1
 800d60e:	4622      	mov	r2, r4
 800d610:	4616      	mov	r6, r2
 800d612:	3201      	adds	r2, #1
 800d614:	7830      	ldrb	r0, [r6, #0]
 800d616:	f7ff ff9f 	bl	800d558 <__hexdig_fun>
 800d61a:	2800      	cmp	r0, #0
 800d61c:	d1f8      	bne.n	800d610 <__gethex+0x8c>
 800d61e:	1ba4      	subs	r4, r4, r6
 800d620:	00a7      	lsls	r7, r4, #2
 800d622:	7833      	ldrb	r3, [r6, #0]
 800d624:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d628:	2b50      	cmp	r3, #80	@ 0x50
 800d62a:	d13e      	bne.n	800d6aa <__gethex+0x126>
 800d62c:	7873      	ldrb	r3, [r6, #1]
 800d62e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d630:	d033      	beq.n	800d69a <__gethex+0x116>
 800d632:	2b2d      	cmp	r3, #45	@ 0x2d
 800d634:	d034      	beq.n	800d6a0 <__gethex+0x11c>
 800d636:	1c71      	adds	r1, r6, #1
 800d638:	2400      	movs	r4, #0
 800d63a:	7808      	ldrb	r0, [r1, #0]
 800d63c:	f7ff ff8c 	bl	800d558 <__hexdig_fun>
 800d640:	1e43      	subs	r3, r0, #1
 800d642:	b2db      	uxtb	r3, r3
 800d644:	2b18      	cmp	r3, #24
 800d646:	d830      	bhi.n	800d6aa <__gethex+0x126>
 800d648:	f1a0 0210 	sub.w	r2, r0, #16
 800d64c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d650:	f7ff ff82 	bl	800d558 <__hexdig_fun>
 800d654:	f100 3cff 	add.w	ip, r0, #4294967295
 800d658:	fa5f fc8c 	uxtb.w	ip, ip
 800d65c:	f1bc 0f18 	cmp.w	ip, #24
 800d660:	f04f 030a 	mov.w	r3, #10
 800d664:	d91e      	bls.n	800d6a4 <__gethex+0x120>
 800d666:	b104      	cbz	r4, 800d66a <__gethex+0xe6>
 800d668:	4252      	negs	r2, r2
 800d66a:	4417      	add	r7, r2
 800d66c:	f8ca 1000 	str.w	r1, [sl]
 800d670:	b1ed      	cbz	r5, 800d6ae <__gethex+0x12a>
 800d672:	f1bb 0f00 	cmp.w	fp, #0
 800d676:	bf0c      	ite	eq
 800d678:	2506      	moveq	r5, #6
 800d67a:	2500      	movne	r5, #0
 800d67c:	4628      	mov	r0, r5
 800d67e:	b005      	add	sp, #20
 800d680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d684:	2500      	movs	r5, #0
 800d686:	462c      	mov	r4, r5
 800d688:	e7b0      	b.n	800d5ec <__gethex+0x68>
 800d68a:	2c00      	cmp	r4, #0
 800d68c:	d1c7      	bne.n	800d61e <__gethex+0x9a>
 800d68e:	4627      	mov	r7, r4
 800d690:	e7c7      	b.n	800d622 <__gethex+0x9e>
 800d692:	464e      	mov	r6, r9
 800d694:	462f      	mov	r7, r5
 800d696:	2501      	movs	r5, #1
 800d698:	e7c3      	b.n	800d622 <__gethex+0x9e>
 800d69a:	2400      	movs	r4, #0
 800d69c:	1cb1      	adds	r1, r6, #2
 800d69e:	e7cc      	b.n	800d63a <__gethex+0xb6>
 800d6a0:	2401      	movs	r4, #1
 800d6a2:	e7fb      	b.n	800d69c <__gethex+0x118>
 800d6a4:	fb03 0002 	mla	r0, r3, r2, r0
 800d6a8:	e7ce      	b.n	800d648 <__gethex+0xc4>
 800d6aa:	4631      	mov	r1, r6
 800d6ac:	e7de      	b.n	800d66c <__gethex+0xe8>
 800d6ae:	eba6 0309 	sub.w	r3, r6, r9
 800d6b2:	3b01      	subs	r3, #1
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	2b07      	cmp	r3, #7
 800d6b8:	dc0a      	bgt.n	800d6d0 <__gethex+0x14c>
 800d6ba:	9801      	ldr	r0, [sp, #4]
 800d6bc:	f000 faf4 	bl	800dca8 <_Balloc>
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	b940      	cbnz	r0, 800d6d6 <__gethex+0x152>
 800d6c4:	4b5c      	ldr	r3, [pc, #368]	@ (800d838 <__gethex+0x2b4>)
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	21e4      	movs	r1, #228	@ 0xe4
 800d6ca:	485c      	ldr	r0, [pc, #368]	@ (800d83c <__gethex+0x2b8>)
 800d6cc:	f001 fb66 	bl	800ed9c <__assert_func>
 800d6d0:	3101      	adds	r1, #1
 800d6d2:	105b      	asrs	r3, r3, #1
 800d6d4:	e7ef      	b.n	800d6b6 <__gethex+0x132>
 800d6d6:	f100 0a14 	add.w	sl, r0, #20
 800d6da:	2300      	movs	r3, #0
 800d6dc:	4655      	mov	r5, sl
 800d6de:	469b      	mov	fp, r3
 800d6e0:	45b1      	cmp	r9, r6
 800d6e2:	d337      	bcc.n	800d754 <__gethex+0x1d0>
 800d6e4:	f845 bb04 	str.w	fp, [r5], #4
 800d6e8:	eba5 050a 	sub.w	r5, r5, sl
 800d6ec:	10ad      	asrs	r5, r5, #2
 800d6ee:	6125      	str	r5, [r4, #16]
 800d6f0:	4658      	mov	r0, fp
 800d6f2:	f000 fbcb 	bl	800de8c <__hi0bits>
 800d6f6:	016d      	lsls	r5, r5, #5
 800d6f8:	f8d8 6000 	ldr.w	r6, [r8]
 800d6fc:	1a2d      	subs	r5, r5, r0
 800d6fe:	42b5      	cmp	r5, r6
 800d700:	dd54      	ble.n	800d7ac <__gethex+0x228>
 800d702:	1bad      	subs	r5, r5, r6
 800d704:	4629      	mov	r1, r5
 800d706:	4620      	mov	r0, r4
 800d708:	f000 ff5f 	bl	800e5ca <__any_on>
 800d70c:	4681      	mov	r9, r0
 800d70e:	b178      	cbz	r0, 800d730 <__gethex+0x1ac>
 800d710:	1e6b      	subs	r3, r5, #1
 800d712:	1159      	asrs	r1, r3, #5
 800d714:	f003 021f 	and.w	r2, r3, #31
 800d718:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d71c:	f04f 0901 	mov.w	r9, #1
 800d720:	fa09 f202 	lsl.w	r2, r9, r2
 800d724:	420a      	tst	r2, r1
 800d726:	d003      	beq.n	800d730 <__gethex+0x1ac>
 800d728:	454b      	cmp	r3, r9
 800d72a:	dc36      	bgt.n	800d79a <__gethex+0x216>
 800d72c:	f04f 0902 	mov.w	r9, #2
 800d730:	4629      	mov	r1, r5
 800d732:	4620      	mov	r0, r4
 800d734:	f7ff febe 	bl	800d4b4 <rshift>
 800d738:	442f      	add	r7, r5
 800d73a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d73e:	42bb      	cmp	r3, r7
 800d740:	da42      	bge.n	800d7c8 <__gethex+0x244>
 800d742:	9801      	ldr	r0, [sp, #4]
 800d744:	4621      	mov	r1, r4
 800d746:	f000 faef 	bl	800dd28 <_Bfree>
 800d74a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d74c:	2300      	movs	r3, #0
 800d74e:	6013      	str	r3, [r2, #0]
 800d750:	25a3      	movs	r5, #163	@ 0xa3
 800d752:	e793      	b.n	800d67c <__gethex+0xf8>
 800d754:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d758:	2a2e      	cmp	r2, #46	@ 0x2e
 800d75a:	d012      	beq.n	800d782 <__gethex+0x1fe>
 800d75c:	2b20      	cmp	r3, #32
 800d75e:	d104      	bne.n	800d76a <__gethex+0x1e6>
 800d760:	f845 bb04 	str.w	fp, [r5], #4
 800d764:	f04f 0b00 	mov.w	fp, #0
 800d768:	465b      	mov	r3, fp
 800d76a:	7830      	ldrb	r0, [r6, #0]
 800d76c:	9303      	str	r3, [sp, #12]
 800d76e:	f7ff fef3 	bl	800d558 <__hexdig_fun>
 800d772:	9b03      	ldr	r3, [sp, #12]
 800d774:	f000 000f 	and.w	r0, r0, #15
 800d778:	4098      	lsls	r0, r3
 800d77a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d77e:	3304      	adds	r3, #4
 800d780:	e7ae      	b.n	800d6e0 <__gethex+0x15c>
 800d782:	45b1      	cmp	r9, r6
 800d784:	d8ea      	bhi.n	800d75c <__gethex+0x1d8>
 800d786:	492b      	ldr	r1, [pc, #172]	@ (800d834 <__gethex+0x2b0>)
 800d788:	9303      	str	r3, [sp, #12]
 800d78a:	2201      	movs	r2, #1
 800d78c:	4630      	mov	r0, r6
 800d78e:	f7ff fda8 	bl	800d2e2 <strncmp>
 800d792:	9b03      	ldr	r3, [sp, #12]
 800d794:	2800      	cmp	r0, #0
 800d796:	d1e1      	bne.n	800d75c <__gethex+0x1d8>
 800d798:	e7a2      	b.n	800d6e0 <__gethex+0x15c>
 800d79a:	1ea9      	subs	r1, r5, #2
 800d79c:	4620      	mov	r0, r4
 800d79e:	f000 ff14 	bl	800e5ca <__any_on>
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	d0c2      	beq.n	800d72c <__gethex+0x1a8>
 800d7a6:	f04f 0903 	mov.w	r9, #3
 800d7aa:	e7c1      	b.n	800d730 <__gethex+0x1ac>
 800d7ac:	da09      	bge.n	800d7c2 <__gethex+0x23e>
 800d7ae:	1b75      	subs	r5, r6, r5
 800d7b0:	4621      	mov	r1, r4
 800d7b2:	9801      	ldr	r0, [sp, #4]
 800d7b4:	462a      	mov	r2, r5
 800d7b6:	f000 fccf 	bl	800e158 <__lshift>
 800d7ba:	1b7f      	subs	r7, r7, r5
 800d7bc:	4604      	mov	r4, r0
 800d7be:	f100 0a14 	add.w	sl, r0, #20
 800d7c2:	f04f 0900 	mov.w	r9, #0
 800d7c6:	e7b8      	b.n	800d73a <__gethex+0x1b6>
 800d7c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d7cc:	42bd      	cmp	r5, r7
 800d7ce:	dd6f      	ble.n	800d8b0 <__gethex+0x32c>
 800d7d0:	1bed      	subs	r5, r5, r7
 800d7d2:	42ae      	cmp	r6, r5
 800d7d4:	dc34      	bgt.n	800d840 <__gethex+0x2bc>
 800d7d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7da:	2b02      	cmp	r3, #2
 800d7dc:	d022      	beq.n	800d824 <__gethex+0x2a0>
 800d7de:	2b03      	cmp	r3, #3
 800d7e0:	d024      	beq.n	800d82c <__gethex+0x2a8>
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d115      	bne.n	800d812 <__gethex+0x28e>
 800d7e6:	42ae      	cmp	r6, r5
 800d7e8:	d113      	bne.n	800d812 <__gethex+0x28e>
 800d7ea:	2e01      	cmp	r6, #1
 800d7ec:	d10b      	bne.n	800d806 <__gethex+0x282>
 800d7ee:	9a02      	ldr	r2, [sp, #8]
 800d7f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d7f4:	6013      	str	r3, [r2, #0]
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	6123      	str	r3, [r4, #16]
 800d7fa:	f8ca 3000 	str.w	r3, [sl]
 800d7fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d800:	2562      	movs	r5, #98	@ 0x62
 800d802:	601c      	str	r4, [r3, #0]
 800d804:	e73a      	b.n	800d67c <__gethex+0xf8>
 800d806:	1e71      	subs	r1, r6, #1
 800d808:	4620      	mov	r0, r4
 800d80a:	f000 fede 	bl	800e5ca <__any_on>
 800d80e:	2800      	cmp	r0, #0
 800d810:	d1ed      	bne.n	800d7ee <__gethex+0x26a>
 800d812:	9801      	ldr	r0, [sp, #4]
 800d814:	4621      	mov	r1, r4
 800d816:	f000 fa87 	bl	800dd28 <_Bfree>
 800d81a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d81c:	2300      	movs	r3, #0
 800d81e:	6013      	str	r3, [r2, #0]
 800d820:	2550      	movs	r5, #80	@ 0x50
 800d822:	e72b      	b.n	800d67c <__gethex+0xf8>
 800d824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1f3      	bne.n	800d812 <__gethex+0x28e>
 800d82a:	e7e0      	b.n	800d7ee <__gethex+0x26a>
 800d82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1dd      	bne.n	800d7ee <__gethex+0x26a>
 800d832:	e7ee      	b.n	800d812 <__gethex+0x28e>
 800d834:	0800f7d8 	.word	0x0800f7d8
 800d838:	0800f840 	.word	0x0800f840
 800d83c:	0800f851 	.word	0x0800f851
 800d840:	1e6f      	subs	r7, r5, #1
 800d842:	f1b9 0f00 	cmp.w	r9, #0
 800d846:	d130      	bne.n	800d8aa <__gethex+0x326>
 800d848:	b127      	cbz	r7, 800d854 <__gethex+0x2d0>
 800d84a:	4639      	mov	r1, r7
 800d84c:	4620      	mov	r0, r4
 800d84e:	f000 febc 	bl	800e5ca <__any_on>
 800d852:	4681      	mov	r9, r0
 800d854:	117a      	asrs	r2, r7, #5
 800d856:	2301      	movs	r3, #1
 800d858:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d85c:	f007 071f 	and.w	r7, r7, #31
 800d860:	40bb      	lsls	r3, r7
 800d862:	4213      	tst	r3, r2
 800d864:	4629      	mov	r1, r5
 800d866:	4620      	mov	r0, r4
 800d868:	bf18      	it	ne
 800d86a:	f049 0902 	orrne.w	r9, r9, #2
 800d86e:	f7ff fe21 	bl	800d4b4 <rshift>
 800d872:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d876:	1b76      	subs	r6, r6, r5
 800d878:	2502      	movs	r5, #2
 800d87a:	f1b9 0f00 	cmp.w	r9, #0
 800d87e:	d047      	beq.n	800d910 <__gethex+0x38c>
 800d880:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d884:	2b02      	cmp	r3, #2
 800d886:	d015      	beq.n	800d8b4 <__gethex+0x330>
 800d888:	2b03      	cmp	r3, #3
 800d88a:	d017      	beq.n	800d8bc <__gethex+0x338>
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d109      	bne.n	800d8a4 <__gethex+0x320>
 800d890:	f019 0f02 	tst.w	r9, #2
 800d894:	d006      	beq.n	800d8a4 <__gethex+0x320>
 800d896:	f8da 3000 	ldr.w	r3, [sl]
 800d89a:	ea49 0903 	orr.w	r9, r9, r3
 800d89e:	f019 0f01 	tst.w	r9, #1
 800d8a2:	d10e      	bne.n	800d8c2 <__gethex+0x33e>
 800d8a4:	f045 0510 	orr.w	r5, r5, #16
 800d8a8:	e032      	b.n	800d910 <__gethex+0x38c>
 800d8aa:	f04f 0901 	mov.w	r9, #1
 800d8ae:	e7d1      	b.n	800d854 <__gethex+0x2d0>
 800d8b0:	2501      	movs	r5, #1
 800d8b2:	e7e2      	b.n	800d87a <__gethex+0x2f6>
 800d8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8b6:	f1c3 0301 	rsb	r3, r3, #1
 800d8ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d0f0      	beq.n	800d8a4 <__gethex+0x320>
 800d8c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d8c6:	f104 0314 	add.w	r3, r4, #20
 800d8ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d8ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d8d2:	f04f 0c00 	mov.w	ip, #0
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d8e0:	d01b      	beq.n	800d91a <__gethex+0x396>
 800d8e2:	3201      	adds	r2, #1
 800d8e4:	6002      	str	r2, [r0, #0]
 800d8e6:	2d02      	cmp	r5, #2
 800d8e8:	f104 0314 	add.w	r3, r4, #20
 800d8ec:	d13c      	bne.n	800d968 <__gethex+0x3e4>
 800d8ee:	f8d8 2000 	ldr.w	r2, [r8]
 800d8f2:	3a01      	subs	r2, #1
 800d8f4:	42b2      	cmp	r2, r6
 800d8f6:	d109      	bne.n	800d90c <__gethex+0x388>
 800d8f8:	1171      	asrs	r1, r6, #5
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d900:	f006 061f 	and.w	r6, r6, #31
 800d904:	fa02 f606 	lsl.w	r6, r2, r6
 800d908:	421e      	tst	r6, r3
 800d90a:	d13a      	bne.n	800d982 <__gethex+0x3fe>
 800d90c:	f045 0520 	orr.w	r5, r5, #32
 800d910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d912:	601c      	str	r4, [r3, #0]
 800d914:	9b02      	ldr	r3, [sp, #8]
 800d916:	601f      	str	r7, [r3, #0]
 800d918:	e6b0      	b.n	800d67c <__gethex+0xf8>
 800d91a:	4299      	cmp	r1, r3
 800d91c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d920:	d8d9      	bhi.n	800d8d6 <__gethex+0x352>
 800d922:	68a3      	ldr	r3, [r4, #8]
 800d924:	459b      	cmp	fp, r3
 800d926:	db17      	blt.n	800d958 <__gethex+0x3d4>
 800d928:	6861      	ldr	r1, [r4, #4]
 800d92a:	9801      	ldr	r0, [sp, #4]
 800d92c:	3101      	adds	r1, #1
 800d92e:	f000 f9bb 	bl	800dca8 <_Balloc>
 800d932:	4681      	mov	r9, r0
 800d934:	b918      	cbnz	r0, 800d93e <__gethex+0x3ba>
 800d936:	4b1a      	ldr	r3, [pc, #104]	@ (800d9a0 <__gethex+0x41c>)
 800d938:	4602      	mov	r2, r0
 800d93a:	2184      	movs	r1, #132	@ 0x84
 800d93c:	e6c5      	b.n	800d6ca <__gethex+0x146>
 800d93e:	6922      	ldr	r2, [r4, #16]
 800d940:	3202      	adds	r2, #2
 800d942:	f104 010c 	add.w	r1, r4, #12
 800d946:	0092      	lsls	r2, r2, #2
 800d948:	300c      	adds	r0, #12
 800d94a:	f7ff fd50 	bl	800d3ee <memcpy>
 800d94e:	4621      	mov	r1, r4
 800d950:	9801      	ldr	r0, [sp, #4]
 800d952:	f000 f9e9 	bl	800dd28 <_Bfree>
 800d956:	464c      	mov	r4, r9
 800d958:	6923      	ldr	r3, [r4, #16]
 800d95a:	1c5a      	adds	r2, r3, #1
 800d95c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d960:	6122      	str	r2, [r4, #16]
 800d962:	2201      	movs	r2, #1
 800d964:	615a      	str	r2, [r3, #20]
 800d966:	e7be      	b.n	800d8e6 <__gethex+0x362>
 800d968:	6922      	ldr	r2, [r4, #16]
 800d96a:	455a      	cmp	r2, fp
 800d96c:	dd0b      	ble.n	800d986 <__gethex+0x402>
 800d96e:	2101      	movs	r1, #1
 800d970:	4620      	mov	r0, r4
 800d972:	f7ff fd9f 	bl	800d4b4 <rshift>
 800d976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d97a:	3701      	adds	r7, #1
 800d97c:	42bb      	cmp	r3, r7
 800d97e:	f6ff aee0 	blt.w	800d742 <__gethex+0x1be>
 800d982:	2501      	movs	r5, #1
 800d984:	e7c2      	b.n	800d90c <__gethex+0x388>
 800d986:	f016 061f 	ands.w	r6, r6, #31
 800d98a:	d0fa      	beq.n	800d982 <__gethex+0x3fe>
 800d98c:	4453      	add	r3, sl
 800d98e:	f1c6 0620 	rsb	r6, r6, #32
 800d992:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d996:	f000 fa79 	bl	800de8c <__hi0bits>
 800d99a:	42b0      	cmp	r0, r6
 800d99c:	dbe7      	blt.n	800d96e <__gethex+0x3ea>
 800d99e:	e7f0      	b.n	800d982 <__gethex+0x3fe>
 800d9a0:	0800f840 	.word	0x0800f840

0800d9a4 <L_shift>:
 800d9a4:	f1c2 0208 	rsb	r2, r2, #8
 800d9a8:	0092      	lsls	r2, r2, #2
 800d9aa:	b570      	push	{r4, r5, r6, lr}
 800d9ac:	f1c2 0620 	rsb	r6, r2, #32
 800d9b0:	6843      	ldr	r3, [r0, #4]
 800d9b2:	6804      	ldr	r4, [r0, #0]
 800d9b4:	fa03 f506 	lsl.w	r5, r3, r6
 800d9b8:	432c      	orrs	r4, r5
 800d9ba:	40d3      	lsrs	r3, r2
 800d9bc:	6004      	str	r4, [r0, #0]
 800d9be:	f840 3f04 	str.w	r3, [r0, #4]!
 800d9c2:	4288      	cmp	r0, r1
 800d9c4:	d3f4      	bcc.n	800d9b0 <L_shift+0xc>
 800d9c6:	bd70      	pop	{r4, r5, r6, pc}

0800d9c8 <__match>:
 800d9c8:	b530      	push	{r4, r5, lr}
 800d9ca:	6803      	ldr	r3, [r0, #0]
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9d2:	b914      	cbnz	r4, 800d9da <__match+0x12>
 800d9d4:	6003      	str	r3, [r0, #0]
 800d9d6:	2001      	movs	r0, #1
 800d9d8:	bd30      	pop	{r4, r5, pc}
 800d9da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d9e2:	2d19      	cmp	r5, #25
 800d9e4:	bf98      	it	ls
 800d9e6:	3220      	addls	r2, #32
 800d9e8:	42a2      	cmp	r2, r4
 800d9ea:	d0f0      	beq.n	800d9ce <__match+0x6>
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	e7f3      	b.n	800d9d8 <__match+0x10>

0800d9f0 <__hexnan>:
 800d9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f4:	680b      	ldr	r3, [r1, #0]
 800d9f6:	6801      	ldr	r1, [r0, #0]
 800d9f8:	115e      	asrs	r6, r3, #5
 800d9fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d9fe:	f013 031f 	ands.w	r3, r3, #31
 800da02:	b087      	sub	sp, #28
 800da04:	bf18      	it	ne
 800da06:	3604      	addne	r6, #4
 800da08:	2500      	movs	r5, #0
 800da0a:	1f37      	subs	r7, r6, #4
 800da0c:	4682      	mov	sl, r0
 800da0e:	4690      	mov	r8, r2
 800da10:	9301      	str	r3, [sp, #4]
 800da12:	f846 5c04 	str.w	r5, [r6, #-4]
 800da16:	46b9      	mov	r9, r7
 800da18:	463c      	mov	r4, r7
 800da1a:	9502      	str	r5, [sp, #8]
 800da1c:	46ab      	mov	fp, r5
 800da1e:	784a      	ldrb	r2, [r1, #1]
 800da20:	1c4b      	adds	r3, r1, #1
 800da22:	9303      	str	r3, [sp, #12]
 800da24:	b342      	cbz	r2, 800da78 <__hexnan+0x88>
 800da26:	4610      	mov	r0, r2
 800da28:	9105      	str	r1, [sp, #20]
 800da2a:	9204      	str	r2, [sp, #16]
 800da2c:	f7ff fd94 	bl	800d558 <__hexdig_fun>
 800da30:	2800      	cmp	r0, #0
 800da32:	d151      	bne.n	800dad8 <__hexnan+0xe8>
 800da34:	9a04      	ldr	r2, [sp, #16]
 800da36:	9905      	ldr	r1, [sp, #20]
 800da38:	2a20      	cmp	r2, #32
 800da3a:	d818      	bhi.n	800da6e <__hexnan+0x7e>
 800da3c:	9b02      	ldr	r3, [sp, #8]
 800da3e:	459b      	cmp	fp, r3
 800da40:	dd13      	ble.n	800da6a <__hexnan+0x7a>
 800da42:	454c      	cmp	r4, r9
 800da44:	d206      	bcs.n	800da54 <__hexnan+0x64>
 800da46:	2d07      	cmp	r5, #7
 800da48:	dc04      	bgt.n	800da54 <__hexnan+0x64>
 800da4a:	462a      	mov	r2, r5
 800da4c:	4649      	mov	r1, r9
 800da4e:	4620      	mov	r0, r4
 800da50:	f7ff ffa8 	bl	800d9a4 <L_shift>
 800da54:	4544      	cmp	r4, r8
 800da56:	d952      	bls.n	800dafe <__hexnan+0x10e>
 800da58:	2300      	movs	r3, #0
 800da5a:	f1a4 0904 	sub.w	r9, r4, #4
 800da5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800da62:	f8cd b008 	str.w	fp, [sp, #8]
 800da66:	464c      	mov	r4, r9
 800da68:	461d      	mov	r5, r3
 800da6a:	9903      	ldr	r1, [sp, #12]
 800da6c:	e7d7      	b.n	800da1e <__hexnan+0x2e>
 800da6e:	2a29      	cmp	r2, #41	@ 0x29
 800da70:	d157      	bne.n	800db22 <__hexnan+0x132>
 800da72:	3102      	adds	r1, #2
 800da74:	f8ca 1000 	str.w	r1, [sl]
 800da78:	f1bb 0f00 	cmp.w	fp, #0
 800da7c:	d051      	beq.n	800db22 <__hexnan+0x132>
 800da7e:	454c      	cmp	r4, r9
 800da80:	d206      	bcs.n	800da90 <__hexnan+0xa0>
 800da82:	2d07      	cmp	r5, #7
 800da84:	dc04      	bgt.n	800da90 <__hexnan+0xa0>
 800da86:	462a      	mov	r2, r5
 800da88:	4649      	mov	r1, r9
 800da8a:	4620      	mov	r0, r4
 800da8c:	f7ff ff8a 	bl	800d9a4 <L_shift>
 800da90:	4544      	cmp	r4, r8
 800da92:	d936      	bls.n	800db02 <__hexnan+0x112>
 800da94:	f1a8 0204 	sub.w	r2, r8, #4
 800da98:	4623      	mov	r3, r4
 800da9a:	f853 1b04 	ldr.w	r1, [r3], #4
 800da9e:	f842 1f04 	str.w	r1, [r2, #4]!
 800daa2:	429f      	cmp	r7, r3
 800daa4:	d2f9      	bcs.n	800da9a <__hexnan+0xaa>
 800daa6:	1b3b      	subs	r3, r7, r4
 800daa8:	f023 0303 	bic.w	r3, r3, #3
 800daac:	3304      	adds	r3, #4
 800daae:	3401      	adds	r4, #1
 800dab0:	3e03      	subs	r6, #3
 800dab2:	42b4      	cmp	r4, r6
 800dab4:	bf88      	it	hi
 800dab6:	2304      	movhi	r3, #4
 800dab8:	4443      	add	r3, r8
 800daba:	2200      	movs	r2, #0
 800dabc:	f843 2b04 	str.w	r2, [r3], #4
 800dac0:	429f      	cmp	r7, r3
 800dac2:	d2fb      	bcs.n	800dabc <__hexnan+0xcc>
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	b91b      	cbnz	r3, 800dad0 <__hexnan+0xe0>
 800dac8:	4547      	cmp	r7, r8
 800daca:	d128      	bne.n	800db1e <__hexnan+0x12e>
 800dacc:	2301      	movs	r3, #1
 800dace:	603b      	str	r3, [r7, #0]
 800dad0:	2005      	movs	r0, #5
 800dad2:	b007      	add	sp, #28
 800dad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad8:	3501      	adds	r5, #1
 800dada:	2d08      	cmp	r5, #8
 800dadc:	f10b 0b01 	add.w	fp, fp, #1
 800dae0:	dd06      	ble.n	800daf0 <__hexnan+0x100>
 800dae2:	4544      	cmp	r4, r8
 800dae4:	d9c1      	bls.n	800da6a <__hexnan+0x7a>
 800dae6:	2300      	movs	r3, #0
 800dae8:	f844 3c04 	str.w	r3, [r4, #-4]
 800daec:	2501      	movs	r5, #1
 800daee:	3c04      	subs	r4, #4
 800daf0:	6822      	ldr	r2, [r4, #0]
 800daf2:	f000 000f 	and.w	r0, r0, #15
 800daf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dafa:	6020      	str	r0, [r4, #0]
 800dafc:	e7b5      	b.n	800da6a <__hexnan+0x7a>
 800dafe:	2508      	movs	r5, #8
 800db00:	e7b3      	b.n	800da6a <__hexnan+0x7a>
 800db02:	9b01      	ldr	r3, [sp, #4]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d0dd      	beq.n	800dac4 <__hexnan+0xd4>
 800db08:	f1c3 0320 	rsb	r3, r3, #32
 800db0c:	f04f 32ff 	mov.w	r2, #4294967295
 800db10:	40da      	lsrs	r2, r3
 800db12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800db16:	4013      	ands	r3, r2
 800db18:	f846 3c04 	str.w	r3, [r6, #-4]
 800db1c:	e7d2      	b.n	800dac4 <__hexnan+0xd4>
 800db1e:	3f04      	subs	r7, #4
 800db20:	e7d0      	b.n	800dac4 <__hexnan+0xd4>
 800db22:	2004      	movs	r0, #4
 800db24:	e7d5      	b.n	800dad2 <__hexnan+0xe2>
	...

0800db28 <sbrk_aligned>:
 800db28:	b570      	push	{r4, r5, r6, lr}
 800db2a:	4e0f      	ldr	r6, [pc, #60]	@ (800db68 <sbrk_aligned+0x40>)
 800db2c:	460c      	mov	r4, r1
 800db2e:	6831      	ldr	r1, [r6, #0]
 800db30:	4605      	mov	r5, r0
 800db32:	b911      	cbnz	r1, 800db3a <sbrk_aligned+0x12>
 800db34:	f001 f922 	bl	800ed7c <_sbrk_r>
 800db38:	6030      	str	r0, [r6, #0]
 800db3a:	4621      	mov	r1, r4
 800db3c:	4628      	mov	r0, r5
 800db3e:	f001 f91d 	bl	800ed7c <_sbrk_r>
 800db42:	1c43      	adds	r3, r0, #1
 800db44:	d103      	bne.n	800db4e <sbrk_aligned+0x26>
 800db46:	f04f 34ff 	mov.w	r4, #4294967295
 800db4a:	4620      	mov	r0, r4
 800db4c:	bd70      	pop	{r4, r5, r6, pc}
 800db4e:	1cc4      	adds	r4, r0, #3
 800db50:	f024 0403 	bic.w	r4, r4, #3
 800db54:	42a0      	cmp	r0, r4
 800db56:	d0f8      	beq.n	800db4a <sbrk_aligned+0x22>
 800db58:	1a21      	subs	r1, r4, r0
 800db5a:	4628      	mov	r0, r5
 800db5c:	f001 f90e 	bl	800ed7c <_sbrk_r>
 800db60:	3001      	adds	r0, #1
 800db62:	d1f2      	bne.n	800db4a <sbrk_aligned+0x22>
 800db64:	e7ef      	b.n	800db46 <sbrk_aligned+0x1e>
 800db66:	bf00      	nop
 800db68:	20000db4 	.word	0x20000db4

0800db6c <_malloc_r>:
 800db6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db70:	1ccd      	adds	r5, r1, #3
 800db72:	f025 0503 	bic.w	r5, r5, #3
 800db76:	3508      	adds	r5, #8
 800db78:	2d0c      	cmp	r5, #12
 800db7a:	bf38      	it	cc
 800db7c:	250c      	movcc	r5, #12
 800db7e:	2d00      	cmp	r5, #0
 800db80:	4606      	mov	r6, r0
 800db82:	db01      	blt.n	800db88 <_malloc_r+0x1c>
 800db84:	42a9      	cmp	r1, r5
 800db86:	d904      	bls.n	800db92 <_malloc_r+0x26>
 800db88:	230c      	movs	r3, #12
 800db8a:	6033      	str	r3, [r6, #0]
 800db8c:	2000      	movs	r0, #0
 800db8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc68 <_malloc_r+0xfc>
 800db96:	f000 f87b 	bl	800dc90 <__malloc_lock>
 800db9a:	f8d8 3000 	ldr.w	r3, [r8]
 800db9e:	461c      	mov	r4, r3
 800dba0:	bb44      	cbnz	r4, 800dbf4 <_malloc_r+0x88>
 800dba2:	4629      	mov	r1, r5
 800dba4:	4630      	mov	r0, r6
 800dba6:	f7ff ffbf 	bl	800db28 <sbrk_aligned>
 800dbaa:	1c43      	adds	r3, r0, #1
 800dbac:	4604      	mov	r4, r0
 800dbae:	d158      	bne.n	800dc62 <_malloc_r+0xf6>
 800dbb0:	f8d8 4000 	ldr.w	r4, [r8]
 800dbb4:	4627      	mov	r7, r4
 800dbb6:	2f00      	cmp	r7, #0
 800dbb8:	d143      	bne.n	800dc42 <_malloc_r+0xd6>
 800dbba:	2c00      	cmp	r4, #0
 800dbbc:	d04b      	beq.n	800dc56 <_malloc_r+0xea>
 800dbbe:	6823      	ldr	r3, [r4, #0]
 800dbc0:	4639      	mov	r1, r7
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	eb04 0903 	add.w	r9, r4, r3
 800dbc8:	f001 f8d8 	bl	800ed7c <_sbrk_r>
 800dbcc:	4581      	cmp	r9, r0
 800dbce:	d142      	bne.n	800dc56 <_malloc_r+0xea>
 800dbd0:	6821      	ldr	r1, [r4, #0]
 800dbd2:	1a6d      	subs	r5, r5, r1
 800dbd4:	4629      	mov	r1, r5
 800dbd6:	4630      	mov	r0, r6
 800dbd8:	f7ff ffa6 	bl	800db28 <sbrk_aligned>
 800dbdc:	3001      	adds	r0, #1
 800dbde:	d03a      	beq.n	800dc56 <_malloc_r+0xea>
 800dbe0:	6823      	ldr	r3, [r4, #0]
 800dbe2:	442b      	add	r3, r5
 800dbe4:	6023      	str	r3, [r4, #0]
 800dbe6:	f8d8 3000 	ldr.w	r3, [r8]
 800dbea:	685a      	ldr	r2, [r3, #4]
 800dbec:	bb62      	cbnz	r2, 800dc48 <_malloc_r+0xdc>
 800dbee:	f8c8 7000 	str.w	r7, [r8]
 800dbf2:	e00f      	b.n	800dc14 <_malloc_r+0xa8>
 800dbf4:	6822      	ldr	r2, [r4, #0]
 800dbf6:	1b52      	subs	r2, r2, r5
 800dbf8:	d420      	bmi.n	800dc3c <_malloc_r+0xd0>
 800dbfa:	2a0b      	cmp	r2, #11
 800dbfc:	d917      	bls.n	800dc2e <_malloc_r+0xc2>
 800dbfe:	1961      	adds	r1, r4, r5
 800dc00:	42a3      	cmp	r3, r4
 800dc02:	6025      	str	r5, [r4, #0]
 800dc04:	bf18      	it	ne
 800dc06:	6059      	strne	r1, [r3, #4]
 800dc08:	6863      	ldr	r3, [r4, #4]
 800dc0a:	bf08      	it	eq
 800dc0c:	f8c8 1000 	streq.w	r1, [r8]
 800dc10:	5162      	str	r2, [r4, r5]
 800dc12:	604b      	str	r3, [r1, #4]
 800dc14:	4630      	mov	r0, r6
 800dc16:	f000 f841 	bl	800dc9c <__malloc_unlock>
 800dc1a:	f104 000b 	add.w	r0, r4, #11
 800dc1e:	1d23      	adds	r3, r4, #4
 800dc20:	f020 0007 	bic.w	r0, r0, #7
 800dc24:	1ac2      	subs	r2, r0, r3
 800dc26:	bf1c      	itt	ne
 800dc28:	1a1b      	subne	r3, r3, r0
 800dc2a:	50a3      	strne	r3, [r4, r2]
 800dc2c:	e7af      	b.n	800db8e <_malloc_r+0x22>
 800dc2e:	6862      	ldr	r2, [r4, #4]
 800dc30:	42a3      	cmp	r3, r4
 800dc32:	bf0c      	ite	eq
 800dc34:	f8c8 2000 	streq.w	r2, [r8]
 800dc38:	605a      	strne	r2, [r3, #4]
 800dc3a:	e7eb      	b.n	800dc14 <_malloc_r+0xa8>
 800dc3c:	4623      	mov	r3, r4
 800dc3e:	6864      	ldr	r4, [r4, #4]
 800dc40:	e7ae      	b.n	800dba0 <_malloc_r+0x34>
 800dc42:	463c      	mov	r4, r7
 800dc44:	687f      	ldr	r7, [r7, #4]
 800dc46:	e7b6      	b.n	800dbb6 <_malloc_r+0x4a>
 800dc48:	461a      	mov	r2, r3
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	42a3      	cmp	r3, r4
 800dc4e:	d1fb      	bne.n	800dc48 <_malloc_r+0xdc>
 800dc50:	2300      	movs	r3, #0
 800dc52:	6053      	str	r3, [r2, #4]
 800dc54:	e7de      	b.n	800dc14 <_malloc_r+0xa8>
 800dc56:	230c      	movs	r3, #12
 800dc58:	6033      	str	r3, [r6, #0]
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	f000 f81e 	bl	800dc9c <__malloc_unlock>
 800dc60:	e794      	b.n	800db8c <_malloc_r+0x20>
 800dc62:	6005      	str	r5, [r0, #0]
 800dc64:	e7d6      	b.n	800dc14 <_malloc_r+0xa8>
 800dc66:	bf00      	nop
 800dc68:	20000db8 	.word	0x20000db8

0800dc6c <__ascii_mbtowc>:
 800dc6c:	b082      	sub	sp, #8
 800dc6e:	b901      	cbnz	r1, 800dc72 <__ascii_mbtowc+0x6>
 800dc70:	a901      	add	r1, sp, #4
 800dc72:	b142      	cbz	r2, 800dc86 <__ascii_mbtowc+0x1a>
 800dc74:	b14b      	cbz	r3, 800dc8a <__ascii_mbtowc+0x1e>
 800dc76:	7813      	ldrb	r3, [r2, #0]
 800dc78:	600b      	str	r3, [r1, #0]
 800dc7a:	7812      	ldrb	r2, [r2, #0]
 800dc7c:	1e10      	subs	r0, r2, #0
 800dc7e:	bf18      	it	ne
 800dc80:	2001      	movne	r0, #1
 800dc82:	b002      	add	sp, #8
 800dc84:	4770      	bx	lr
 800dc86:	4610      	mov	r0, r2
 800dc88:	e7fb      	b.n	800dc82 <__ascii_mbtowc+0x16>
 800dc8a:	f06f 0001 	mvn.w	r0, #1
 800dc8e:	e7f8      	b.n	800dc82 <__ascii_mbtowc+0x16>

0800dc90 <__malloc_lock>:
 800dc90:	4801      	ldr	r0, [pc, #4]	@ (800dc98 <__malloc_lock+0x8>)
 800dc92:	f7ff bbaa 	b.w	800d3ea <__retarget_lock_acquire_recursive>
 800dc96:	bf00      	nop
 800dc98:	20000db0 	.word	0x20000db0

0800dc9c <__malloc_unlock>:
 800dc9c:	4801      	ldr	r0, [pc, #4]	@ (800dca4 <__malloc_unlock+0x8>)
 800dc9e:	f7ff bba5 	b.w	800d3ec <__retarget_lock_release_recursive>
 800dca2:	bf00      	nop
 800dca4:	20000db0 	.word	0x20000db0

0800dca8 <_Balloc>:
 800dca8:	b570      	push	{r4, r5, r6, lr}
 800dcaa:	69c6      	ldr	r6, [r0, #28]
 800dcac:	4604      	mov	r4, r0
 800dcae:	460d      	mov	r5, r1
 800dcb0:	b976      	cbnz	r6, 800dcd0 <_Balloc+0x28>
 800dcb2:	2010      	movs	r0, #16
 800dcb4:	f001 f8a4 	bl	800ee00 <malloc>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	61e0      	str	r0, [r4, #28]
 800dcbc:	b920      	cbnz	r0, 800dcc8 <_Balloc+0x20>
 800dcbe:	4b18      	ldr	r3, [pc, #96]	@ (800dd20 <_Balloc+0x78>)
 800dcc0:	4818      	ldr	r0, [pc, #96]	@ (800dd24 <_Balloc+0x7c>)
 800dcc2:	216b      	movs	r1, #107	@ 0x6b
 800dcc4:	f001 f86a 	bl	800ed9c <__assert_func>
 800dcc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dccc:	6006      	str	r6, [r0, #0]
 800dcce:	60c6      	str	r6, [r0, #12]
 800dcd0:	69e6      	ldr	r6, [r4, #28]
 800dcd2:	68f3      	ldr	r3, [r6, #12]
 800dcd4:	b183      	cbz	r3, 800dcf8 <_Balloc+0x50>
 800dcd6:	69e3      	ldr	r3, [r4, #28]
 800dcd8:	68db      	ldr	r3, [r3, #12]
 800dcda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dcde:	b9b8      	cbnz	r0, 800dd10 <_Balloc+0x68>
 800dce0:	2101      	movs	r1, #1
 800dce2:	fa01 f605 	lsl.w	r6, r1, r5
 800dce6:	1d72      	adds	r2, r6, #5
 800dce8:	0092      	lsls	r2, r2, #2
 800dcea:	4620      	mov	r0, r4
 800dcec:	f001 f874 	bl	800edd8 <_calloc_r>
 800dcf0:	b160      	cbz	r0, 800dd0c <_Balloc+0x64>
 800dcf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dcf6:	e00e      	b.n	800dd16 <_Balloc+0x6e>
 800dcf8:	2221      	movs	r2, #33	@ 0x21
 800dcfa:	2104      	movs	r1, #4
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f001 f86b 	bl	800edd8 <_calloc_r>
 800dd02:	69e3      	ldr	r3, [r4, #28]
 800dd04:	60f0      	str	r0, [r6, #12]
 800dd06:	68db      	ldr	r3, [r3, #12]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d1e4      	bne.n	800dcd6 <_Balloc+0x2e>
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	bd70      	pop	{r4, r5, r6, pc}
 800dd10:	6802      	ldr	r2, [r0, #0]
 800dd12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd16:	2300      	movs	r3, #0
 800dd18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd1c:	e7f7      	b.n	800dd0e <_Balloc+0x66>
 800dd1e:	bf00      	nop
 800dd20:	0800f8b1 	.word	0x0800f8b1
 800dd24:	0800f8c8 	.word	0x0800f8c8

0800dd28 <_Bfree>:
 800dd28:	b570      	push	{r4, r5, r6, lr}
 800dd2a:	69c6      	ldr	r6, [r0, #28]
 800dd2c:	4605      	mov	r5, r0
 800dd2e:	460c      	mov	r4, r1
 800dd30:	b976      	cbnz	r6, 800dd50 <_Bfree+0x28>
 800dd32:	2010      	movs	r0, #16
 800dd34:	f001 f864 	bl	800ee00 <malloc>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	61e8      	str	r0, [r5, #28]
 800dd3c:	b920      	cbnz	r0, 800dd48 <_Bfree+0x20>
 800dd3e:	4b09      	ldr	r3, [pc, #36]	@ (800dd64 <_Bfree+0x3c>)
 800dd40:	4809      	ldr	r0, [pc, #36]	@ (800dd68 <_Bfree+0x40>)
 800dd42:	218f      	movs	r1, #143	@ 0x8f
 800dd44:	f001 f82a 	bl	800ed9c <__assert_func>
 800dd48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd4c:	6006      	str	r6, [r0, #0]
 800dd4e:	60c6      	str	r6, [r0, #12]
 800dd50:	b13c      	cbz	r4, 800dd62 <_Bfree+0x3a>
 800dd52:	69eb      	ldr	r3, [r5, #28]
 800dd54:	6862      	ldr	r2, [r4, #4]
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd5c:	6021      	str	r1, [r4, #0]
 800dd5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd62:	bd70      	pop	{r4, r5, r6, pc}
 800dd64:	0800f8b1 	.word	0x0800f8b1
 800dd68:	0800f8c8 	.word	0x0800f8c8

0800dd6c <__multadd>:
 800dd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd70:	690d      	ldr	r5, [r1, #16]
 800dd72:	4607      	mov	r7, r0
 800dd74:	460c      	mov	r4, r1
 800dd76:	461e      	mov	r6, r3
 800dd78:	f101 0c14 	add.w	ip, r1, #20
 800dd7c:	2000      	movs	r0, #0
 800dd7e:	f8dc 3000 	ldr.w	r3, [ip]
 800dd82:	b299      	uxth	r1, r3
 800dd84:	fb02 6101 	mla	r1, r2, r1, r6
 800dd88:	0c1e      	lsrs	r6, r3, #16
 800dd8a:	0c0b      	lsrs	r3, r1, #16
 800dd8c:	fb02 3306 	mla	r3, r2, r6, r3
 800dd90:	b289      	uxth	r1, r1
 800dd92:	3001      	adds	r0, #1
 800dd94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd98:	4285      	cmp	r5, r0
 800dd9a:	f84c 1b04 	str.w	r1, [ip], #4
 800dd9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dda2:	dcec      	bgt.n	800dd7e <__multadd+0x12>
 800dda4:	b30e      	cbz	r6, 800ddea <__multadd+0x7e>
 800dda6:	68a3      	ldr	r3, [r4, #8]
 800dda8:	42ab      	cmp	r3, r5
 800ddaa:	dc19      	bgt.n	800dde0 <__multadd+0x74>
 800ddac:	6861      	ldr	r1, [r4, #4]
 800ddae:	4638      	mov	r0, r7
 800ddb0:	3101      	adds	r1, #1
 800ddb2:	f7ff ff79 	bl	800dca8 <_Balloc>
 800ddb6:	4680      	mov	r8, r0
 800ddb8:	b928      	cbnz	r0, 800ddc6 <__multadd+0x5a>
 800ddba:	4602      	mov	r2, r0
 800ddbc:	4b0c      	ldr	r3, [pc, #48]	@ (800ddf0 <__multadd+0x84>)
 800ddbe:	480d      	ldr	r0, [pc, #52]	@ (800ddf4 <__multadd+0x88>)
 800ddc0:	21ba      	movs	r1, #186	@ 0xba
 800ddc2:	f000 ffeb 	bl	800ed9c <__assert_func>
 800ddc6:	6922      	ldr	r2, [r4, #16]
 800ddc8:	3202      	adds	r2, #2
 800ddca:	f104 010c 	add.w	r1, r4, #12
 800ddce:	0092      	lsls	r2, r2, #2
 800ddd0:	300c      	adds	r0, #12
 800ddd2:	f7ff fb0c 	bl	800d3ee <memcpy>
 800ddd6:	4621      	mov	r1, r4
 800ddd8:	4638      	mov	r0, r7
 800ddda:	f7ff ffa5 	bl	800dd28 <_Bfree>
 800ddde:	4644      	mov	r4, r8
 800dde0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dde4:	3501      	adds	r5, #1
 800dde6:	615e      	str	r6, [r3, #20]
 800dde8:	6125      	str	r5, [r4, #16]
 800ddea:	4620      	mov	r0, r4
 800ddec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddf0:	0800f840 	.word	0x0800f840
 800ddf4:	0800f8c8 	.word	0x0800f8c8

0800ddf8 <__s2b>:
 800ddf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddfc:	460c      	mov	r4, r1
 800ddfe:	4615      	mov	r5, r2
 800de00:	461f      	mov	r7, r3
 800de02:	2209      	movs	r2, #9
 800de04:	3308      	adds	r3, #8
 800de06:	4606      	mov	r6, r0
 800de08:	fb93 f3f2 	sdiv	r3, r3, r2
 800de0c:	2100      	movs	r1, #0
 800de0e:	2201      	movs	r2, #1
 800de10:	429a      	cmp	r2, r3
 800de12:	db09      	blt.n	800de28 <__s2b+0x30>
 800de14:	4630      	mov	r0, r6
 800de16:	f7ff ff47 	bl	800dca8 <_Balloc>
 800de1a:	b940      	cbnz	r0, 800de2e <__s2b+0x36>
 800de1c:	4602      	mov	r2, r0
 800de1e:	4b19      	ldr	r3, [pc, #100]	@ (800de84 <__s2b+0x8c>)
 800de20:	4819      	ldr	r0, [pc, #100]	@ (800de88 <__s2b+0x90>)
 800de22:	21d3      	movs	r1, #211	@ 0xd3
 800de24:	f000 ffba 	bl	800ed9c <__assert_func>
 800de28:	0052      	lsls	r2, r2, #1
 800de2a:	3101      	adds	r1, #1
 800de2c:	e7f0      	b.n	800de10 <__s2b+0x18>
 800de2e:	9b08      	ldr	r3, [sp, #32]
 800de30:	6143      	str	r3, [r0, #20]
 800de32:	2d09      	cmp	r5, #9
 800de34:	f04f 0301 	mov.w	r3, #1
 800de38:	6103      	str	r3, [r0, #16]
 800de3a:	dd16      	ble.n	800de6a <__s2b+0x72>
 800de3c:	f104 0909 	add.w	r9, r4, #9
 800de40:	46c8      	mov	r8, r9
 800de42:	442c      	add	r4, r5
 800de44:	f818 3b01 	ldrb.w	r3, [r8], #1
 800de48:	4601      	mov	r1, r0
 800de4a:	3b30      	subs	r3, #48	@ 0x30
 800de4c:	220a      	movs	r2, #10
 800de4e:	4630      	mov	r0, r6
 800de50:	f7ff ff8c 	bl	800dd6c <__multadd>
 800de54:	45a0      	cmp	r8, r4
 800de56:	d1f5      	bne.n	800de44 <__s2b+0x4c>
 800de58:	f1a5 0408 	sub.w	r4, r5, #8
 800de5c:	444c      	add	r4, r9
 800de5e:	1b2d      	subs	r5, r5, r4
 800de60:	1963      	adds	r3, r4, r5
 800de62:	42bb      	cmp	r3, r7
 800de64:	db04      	blt.n	800de70 <__s2b+0x78>
 800de66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de6a:	340a      	adds	r4, #10
 800de6c:	2509      	movs	r5, #9
 800de6e:	e7f6      	b.n	800de5e <__s2b+0x66>
 800de70:	f814 3b01 	ldrb.w	r3, [r4], #1
 800de74:	4601      	mov	r1, r0
 800de76:	3b30      	subs	r3, #48	@ 0x30
 800de78:	220a      	movs	r2, #10
 800de7a:	4630      	mov	r0, r6
 800de7c:	f7ff ff76 	bl	800dd6c <__multadd>
 800de80:	e7ee      	b.n	800de60 <__s2b+0x68>
 800de82:	bf00      	nop
 800de84:	0800f840 	.word	0x0800f840
 800de88:	0800f8c8 	.word	0x0800f8c8

0800de8c <__hi0bits>:
 800de8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800de90:	4603      	mov	r3, r0
 800de92:	bf36      	itet	cc
 800de94:	0403      	lslcc	r3, r0, #16
 800de96:	2000      	movcs	r0, #0
 800de98:	2010      	movcc	r0, #16
 800de9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800de9e:	bf3c      	itt	cc
 800dea0:	021b      	lslcc	r3, r3, #8
 800dea2:	3008      	addcc	r0, #8
 800dea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dea8:	bf3c      	itt	cc
 800deaa:	011b      	lslcc	r3, r3, #4
 800deac:	3004      	addcc	r0, #4
 800deae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800deb2:	bf3c      	itt	cc
 800deb4:	009b      	lslcc	r3, r3, #2
 800deb6:	3002      	addcc	r0, #2
 800deb8:	2b00      	cmp	r3, #0
 800deba:	db05      	blt.n	800dec8 <__hi0bits+0x3c>
 800debc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dec0:	f100 0001 	add.w	r0, r0, #1
 800dec4:	bf08      	it	eq
 800dec6:	2020      	moveq	r0, #32
 800dec8:	4770      	bx	lr

0800deca <__lo0bits>:
 800deca:	6803      	ldr	r3, [r0, #0]
 800decc:	4602      	mov	r2, r0
 800dece:	f013 0007 	ands.w	r0, r3, #7
 800ded2:	d00b      	beq.n	800deec <__lo0bits+0x22>
 800ded4:	07d9      	lsls	r1, r3, #31
 800ded6:	d421      	bmi.n	800df1c <__lo0bits+0x52>
 800ded8:	0798      	lsls	r0, r3, #30
 800deda:	bf49      	itett	mi
 800dedc:	085b      	lsrmi	r3, r3, #1
 800dede:	089b      	lsrpl	r3, r3, #2
 800dee0:	2001      	movmi	r0, #1
 800dee2:	6013      	strmi	r3, [r2, #0]
 800dee4:	bf5c      	itt	pl
 800dee6:	6013      	strpl	r3, [r2, #0]
 800dee8:	2002      	movpl	r0, #2
 800deea:	4770      	bx	lr
 800deec:	b299      	uxth	r1, r3
 800deee:	b909      	cbnz	r1, 800def4 <__lo0bits+0x2a>
 800def0:	0c1b      	lsrs	r3, r3, #16
 800def2:	2010      	movs	r0, #16
 800def4:	b2d9      	uxtb	r1, r3
 800def6:	b909      	cbnz	r1, 800defc <__lo0bits+0x32>
 800def8:	3008      	adds	r0, #8
 800defa:	0a1b      	lsrs	r3, r3, #8
 800defc:	0719      	lsls	r1, r3, #28
 800defe:	bf04      	itt	eq
 800df00:	091b      	lsreq	r3, r3, #4
 800df02:	3004      	addeq	r0, #4
 800df04:	0799      	lsls	r1, r3, #30
 800df06:	bf04      	itt	eq
 800df08:	089b      	lsreq	r3, r3, #2
 800df0a:	3002      	addeq	r0, #2
 800df0c:	07d9      	lsls	r1, r3, #31
 800df0e:	d403      	bmi.n	800df18 <__lo0bits+0x4e>
 800df10:	085b      	lsrs	r3, r3, #1
 800df12:	f100 0001 	add.w	r0, r0, #1
 800df16:	d003      	beq.n	800df20 <__lo0bits+0x56>
 800df18:	6013      	str	r3, [r2, #0]
 800df1a:	4770      	bx	lr
 800df1c:	2000      	movs	r0, #0
 800df1e:	4770      	bx	lr
 800df20:	2020      	movs	r0, #32
 800df22:	4770      	bx	lr

0800df24 <__i2b>:
 800df24:	b510      	push	{r4, lr}
 800df26:	460c      	mov	r4, r1
 800df28:	2101      	movs	r1, #1
 800df2a:	f7ff febd 	bl	800dca8 <_Balloc>
 800df2e:	4602      	mov	r2, r0
 800df30:	b928      	cbnz	r0, 800df3e <__i2b+0x1a>
 800df32:	4b05      	ldr	r3, [pc, #20]	@ (800df48 <__i2b+0x24>)
 800df34:	4805      	ldr	r0, [pc, #20]	@ (800df4c <__i2b+0x28>)
 800df36:	f240 1145 	movw	r1, #325	@ 0x145
 800df3a:	f000 ff2f 	bl	800ed9c <__assert_func>
 800df3e:	2301      	movs	r3, #1
 800df40:	6144      	str	r4, [r0, #20]
 800df42:	6103      	str	r3, [r0, #16]
 800df44:	bd10      	pop	{r4, pc}
 800df46:	bf00      	nop
 800df48:	0800f840 	.word	0x0800f840
 800df4c:	0800f8c8 	.word	0x0800f8c8

0800df50 <__multiply>:
 800df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	4614      	mov	r4, r2
 800df56:	690a      	ldr	r2, [r1, #16]
 800df58:	6923      	ldr	r3, [r4, #16]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	bfa8      	it	ge
 800df5e:	4623      	movge	r3, r4
 800df60:	460f      	mov	r7, r1
 800df62:	bfa4      	itt	ge
 800df64:	460c      	movge	r4, r1
 800df66:	461f      	movge	r7, r3
 800df68:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800df6c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800df70:	68a3      	ldr	r3, [r4, #8]
 800df72:	6861      	ldr	r1, [r4, #4]
 800df74:	eb0a 0609 	add.w	r6, sl, r9
 800df78:	42b3      	cmp	r3, r6
 800df7a:	b085      	sub	sp, #20
 800df7c:	bfb8      	it	lt
 800df7e:	3101      	addlt	r1, #1
 800df80:	f7ff fe92 	bl	800dca8 <_Balloc>
 800df84:	b930      	cbnz	r0, 800df94 <__multiply+0x44>
 800df86:	4602      	mov	r2, r0
 800df88:	4b44      	ldr	r3, [pc, #272]	@ (800e09c <__multiply+0x14c>)
 800df8a:	4845      	ldr	r0, [pc, #276]	@ (800e0a0 <__multiply+0x150>)
 800df8c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800df90:	f000 ff04 	bl	800ed9c <__assert_func>
 800df94:	f100 0514 	add.w	r5, r0, #20
 800df98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800df9c:	462b      	mov	r3, r5
 800df9e:	2200      	movs	r2, #0
 800dfa0:	4543      	cmp	r3, r8
 800dfa2:	d321      	bcc.n	800dfe8 <__multiply+0x98>
 800dfa4:	f107 0114 	add.w	r1, r7, #20
 800dfa8:	f104 0214 	add.w	r2, r4, #20
 800dfac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dfb0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dfb4:	9302      	str	r3, [sp, #8]
 800dfb6:	1b13      	subs	r3, r2, r4
 800dfb8:	3b15      	subs	r3, #21
 800dfba:	f023 0303 	bic.w	r3, r3, #3
 800dfbe:	3304      	adds	r3, #4
 800dfc0:	f104 0715 	add.w	r7, r4, #21
 800dfc4:	42ba      	cmp	r2, r7
 800dfc6:	bf38      	it	cc
 800dfc8:	2304      	movcc	r3, #4
 800dfca:	9301      	str	r3, [sp, #4]
 800dfcc:	9b02      	ldr	r3, [sp, #8]
 800dfce:	9103      	str	r1, [sp, #12]
 800dfd0:	428b      	cmp	r3, r1
 800dfd2:	d80c      	bhi.n	800dfee <__multiply+0x9e>
 800dfd4:	2e00      	cmp	r6, #0
 800dfd6:	dd03      	ble.n	800dfe0 <__multiply+0x90>
 800dfd8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d05b      	beq.n	800e098 <__multiply+0x148>
 800dfe0:	6106      	str	r6, [r0, #16]
 800dfe2:	b005      	add	sp, #20
 800dfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe8:	f843 2b04 	str.w	r2, [r3], #4
 800dfec:	e7d8      	b.n	800dfa0 <__multiply+0x50>
 800dfee:	f8b1 a000 	ldrh.w	sl, [r1]
 800dff2:	f1ba 0f00 	cmp.w	sl, #0
 800dff6:	d024      	beq.n	800e042 <__multiply+0xf2>
 800dff8:	f104 0e14 	add.w	lr, r4, #20
 800dffc:	46a9      	mov	r9, r5
 800dffe:	f04f 0c00 	mov.w	ip, #0
 800e002:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e006:	f8d9 3000 	ldr.w	r3, [r9]
 800e00a:	fa1f fb87 	uxth.w	fp, r7
 800e00e:	b29b      	uxth	r3, r3
 800e010:	fb0a 330b 	mla	r3, sl, fp, r3
 800e014:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e018:	f8d9 7000 	ldr.w	r7, [r9]
 800e01c:	4463      	add	r3, ip
 800e01e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e022:	fb0a c70b 	mla	r7, sl, fp, ip
 800e026:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e030:	4572      	cmp	r2, lr
 800e032:	f849 3b04 	str.w	r3, [r9], #4
 800e036:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e03a:	d8e2      	bhi.n	800e002 <__multiply+0xb2>
 800e03c:	9b01      	ldr	r3, [sp, #4]
 800e03e:	f845 c003 	str.w	ip, [r5, r3]
 800e042:	9b03      	ldr	r3, [sp, #12]
 800e044:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e048:	3104      	adds	r1, #4
 800e04a:	f1b9 0f00 	cmp.w	r9, #0
 800e04e:	d021      	beq.n	800e094 <__multiply+0x144>
 800e050:	682b      	ldr	r3, [r5, #0]
 800e052:	f104 0c14 	add.w	ip, r4, #20
 800e056:	46ae      	mov	lr, r5
 800e058:	f04f 0a00 	mov.w	sl, #0
 800e05c:	f8bc b000 	ldrh.w	fp, [ip]
 800e060:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e064:	fb09 770b 	mla	r7, r9, fp, r7
 800e068:	4457      	add	r7, sl
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e070:	f84e 3b04 	str.w	r3, [lr], #4
 800e074:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e078:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e07c:	f8be 3000 	ldrh.w	r3, [lr]
 800e080:	fb09 330a 	mla	r3, r9, sl, r3
 800e084:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e088:	4562      	cmp	r2, ip
 800e08a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e08e:	d8e5      	bhi.n	800e05c <__multiply+0x10c>
 800e090:	9f01      	ldr	r7, [sp, #4]
 800e092:	51eb      	str	r3, [r5, r7]
 800e094:	3504      	adds	r5, #4
 800e096:	e799      	b.n	800dfcc <__multiply+0x7c>
 800e098:	3e01      	subs	r6, #1
 800e09a:	e79b      	b.n	800dfd4 <__multiply+0x84>
 800e09c:	0800f840 	.word	0x0800f840
 800e0a0:	0800f8c8 	.word	0x0800f8c8

0800e0a4 <__pow5mult>:
 800e0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0a8:	4615      	mov	r5, r2
 800e0aa:	f012 0203 	ands.w	r2, r2, #3
 800e0ae:	4607      	mov	r7, r0
 800e0b0:	460e      	mov	r6, r1
 800e0b2:	d007      	beq.n	800e0c4 <__pow5mult+0x20>
 800e0b4:	4c25      	ldr	r4, [pc, #148]	@ (800e14c <__pow5mult+0xa8>)
 800e0b6:	3a01      	subs	r2, #1
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0be:	f7ff fe55 	bl	800dd6c <__multadd>
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	10ad      	asrs	r5, r5, #2
 800e0c6:	d03d      	beq.n	800e144 <__pow5mult+0xa0>
 800e0c8:	69fc      	ldr	r4, [r7, #28]
 800e0ca:	b97c      	cbnz	r4, 800e0ec <__pow5mult+0x48>
 800e0cc:	2010      	movs	r0, #16
 800e0ce:	f000 fe97 	bl	800ee00 <malloc>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	61f8      	str	r0, [r7, #28]
 800e0d6:	b928      	cbnz	r0, 800e0e4 <__pow5mult+0x40>
 800e0d8:	4b1d      	ldr	r3, [pc, #116]	@ (800e150 <__pow5mult+0xac>)
 800e0da:	481e      	ldr	r0, [pc, #120]	@ (800e154 <__pow5mult+0xb0>)
 800e0dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e0e0:	f000 fe5c 	bl	800ed9c <__assert_func>
 800e0e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e0e8:	6004      	str	r4, [r0, #0]
 800e0ea:	60c4      	str	r4, [r0, #12]
 800e0ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e0f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e0f4:	b94c      	cbnz	r4, 800e10a <__pow5mult+0x66>
 800e0f6:	f240 2171 	movw	r1, #625	@ 0x271
 800e0fa:	4638      	mov	r0, r7
 800e0fc:	f7ff ff12 	bl	800df24 <__i2b>
 800e100:	2300      	movs	r3, #0
 800e102:	f8c8 0008 	str.w	r0, [r8, #8]
 800e106:	4604      	mov	r4, r0
 800e108:	6003      	str	r3, [r0, #0]
 800e10a:	f04f 0900 	mov.w	r9, #0
 800e10e:	07eb      	lsls	r3, r5, #31
 800e110:	d50a      	bpl.n	800e128 <__pow5mult+0x84>
 800e112:	4631      	mov	r1, r6
 800e114:	4622      	mov	r2, r4
 800e116:	4638      	mov	r0, r7
 800e118:	f7ff ff1a 	bl	800df50 <__multiply>
 800e11c:	4631      	mov	r1, r6
 800e11e:	4680      	mov	r8, r0
 800e120:	4638      	mov	r0, r7
 800e122:	f7ff fe01 	bl	800dd28 <_Bfree>
 800e126:	4646      	mov	r6, r8
 800e128:	106d      	asrs	r5, r5, #1
 800e12a:	d00b      	beq.n	800e144 <__pow5mult+0xa0>
 800e12c:	6820      	ldr	r0, [r4, #0]
 800e12e:	b938      	cbnz	r0, 800e140 <__pow5mult+0x9c>
 800e130:	4622      	mov	r2, r4
 800e132:	4621      	mov	r1, r4
 800e134:	4638      	mov	r0, r7
 800e136:	f7ff ff0b 	bl	800df50 <__multiply>
 800e13a:	6020      	str	r0, [r4, #0]
 800e13c:	f8c0 9000 	str.w	r9, [r0]
 800e140:	4604      	mov	r4, r0
 800e142:	e7e4      	b.n	800e10e <__pow5mult+0x6a>
 800e144:	4630      	mov	r0, r6
 800e146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e14a:	bf00      	nop
 800e14c:	0800f924 	.word	0x0800f924
 800e150:	0800f8b1 	.word	0x0800f8b1
 800e154:	0800f8c8 	.word	0x0800f8c8

0800e158 <__lshift>:
 800e158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e15c:	460c      	mov	r4, r1
 800e15e:	6849      	ldr	r1, [r1, #4]
 800e160:	6923      	ldr	r3, [r4, #16]
 800e162:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e166:	68a3      	ldr	r3, [r4, #8]
 800e168:	4607      	mov	r7, r0
 800e16a:	4691      	mov	r9, r2
 800e16c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e170:	f108 0601 	add.w	r6, r8, #1
 800e174:	42b3      	cmp	r3, r6
 800e176:	db0b      	blt.n	800e190 <__lshift+0x38>
 800e178:	4638      	mov	r0, r7
 800e17a:	f7ff fd95 	bl	800dca8 <_Balloc>
 800e17e:	4605      	mov	r5, r0
 800e180:	b948      	cbnz	r0, 800e196 <__lshift+0x3e>
 800e182:	4602      	mov	r2, r0
 800e184:	4b28      	ldr	r3, [pc, #160]	@ (800e228 <__lshift+0xd0>)
 800e186:	4829      	ldr	r0, [pc, #164]	@ (800e22c <__lshift+0xd4>)
 800e188:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e18c:	f000 fe06 	bl	800ed9c <__assert_func>
 800e190:	3101      	adds	r1, #1
 800e192:	005b      	lsls	r3, r3, #1
 800e194:	e7ee      	b.n	800e174 <__lshift+0x1c>
 800e196:	2300      	movs	r3, #0
 800e198:	f100 0114 	add.w	r1, r0, #20
 800e19c:	f100 0210 	add.w	r2, r0, #16
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	4553      	cmp	r3, sl
 800e1a4:	db33      	blt.n	800e20e <__lshift+0xb6>
 800e1a6:	6920      	ldr	r0, [r4, #16]
 800e1a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1ac:	f104 0314 	add.w	r3, r4, #20
 800e1b0:	f019 091f 	ands.w	r9, r9, #31
 800e1b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e1bc:	d02b      	beq.n	800e216 <__lshift+0xbe>
 800e1be:	f1c9 0e20 	rsb	lr, r9, #32
 800e1c2:	468a      	mov	sl, r1
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	6818      	ldr	r0, [r3, #0]
 800e1c8:	fa00 f009 	lsl.w	r0, r0, r9
 800e1cc:	4310      	orrs	r0, r2
 800e1ce:	f84a 0b04 	str.w	r0, [sl], #4
 800e1d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1d6:	459c      	cmp	ip, r3
 800e1d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e1dc:	d8f3      	bhi.n	800e1c6 <__lshift+0x6e>
 800e1de:	ebac 0304 	sub.w	r3, ip, r4
 800e1e2:	3b15      	subs	r3, #21
 800e1e4:	f023 0303 	bic.w	r3, r3, #3
 800e1e8:	3304      	adds	r3, #4
 800e1ea:	f104 0015 	add.w	r0, r4, #21
 800e1ee:	4584      	cmp	ip, r0
 800e1f0:	bf38      	it	cc
 800e1f2:	2304      	movcc	r3, #4
 800e1f4:	50ca      	str	r2, [r1, r3]
 800e1f6:	b10a      	cbz	r2, 800e1fc <__lshift+0xa4>
 800e1f8:	f108 0602 	add.w	r6, r8, #2
 800e1fc:	3e01      	subs	r6, #1
 800e1fe:	4638      	mov	r0, r7
 800e200:	612e      	str	r6, [r5, #16]
 800e202:	4621      	mov	r1, r4
 800e204:	f7ff fd90 	bl	800dd28 <_Bfree>
 800e208:	4628      	mov	r0, r5
 800e20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e20e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e212:	3301      	adds	r3, #1
 800e214:	e7c5      	b.n	800e1a2 <__lshift+0x4a>
 800e216:	3904      	subs	r1, #4
 800e218:	f853 2b04 	ldr.w	r2, [r3], #4
 800e21c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e220:	459c      	cmp	ip, r3
 800e222:	d8f9      	bhi.n	800e218 <__lshift+0xc0>
 800e224:	e7ea      	b.n	800e1fc <__lshift+0xa4>
 800e226:	bf00      	nop
 800e228:	0800f840 	.word	0x0800f840
 800e22c:	0800f8c8 	.word	0x0800f8c8

0800e230 <__mcmp>:
 800e230:	690a      	ldr	r2, [r1, #16]
 800e232:	4603      	mov	r3, r0
 800e234:	6900      	ldr	r0, [r0, #16]
 800e236:	1a80      	subs	r0, r0, r2
 800e238:	b530      	push	{r4, r5, lr}
 800e23a:	d10e      	bne.n	800e25a <__mcmp+0x2a>
 800e23c:	3314      	adds	r3, #20
 800e23e:	3114      	adds	r1, #20
 800e240:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e244:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e248:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e24c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e250:	4295      	cmp	r5, r2
 800e252:	d003      	beq.n	800e25c <__mcmp+0x2c>
 800e254:	d205      	bcs.n	800e262 <__mcmp+0x32>
 800e256:	f04f 30ff 	mov.w	r0, #4294967295
 800e25a:	bd30      	pop	{r4, r5, pc}
 800e25c:	42a3      	cmp	r3, r4
 800e25e:	d3f3      	bcc.n	800e248 <__mcmp+0x18>
 800e260:	e7fb      	b.n	800e25a <__mcmp+0x2a>
 800e262:	2001      	movs	r0, #1
 800e264:	e7f9      	b.n	800e25a <__mcmp+0x2a>
	...

0800e268 <__mdiff>:
 800e268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e26c:	4689      	mov	r9, r1
 800e26e:	4606      	mov	r6, r0
 800e270:	4611      	mov	r1, r2
 800e272:	4648      	mov	r0, r9
 800e274:	4614      	mov	r4, r2
 800e276:	f7ff ffdb 	bl	800e230 <__mcmp>
 800e27a:	1e05      	subs	r5, r0, #0
 800e27c:	d112      	bne.n	800e2a4 <__mdiff+0x3c>
 800e27e:	4629      	mov	r1, r5
 800e280:	4630      	mov	r0, r6
 800e282:	f7ff fd11 	bl	800dca8 <_Balloc>
 800e286:	4602      	mov	r2, r0
 800e288:	b928      	cbnz	r0, 800e296 <__mdiff+0x2e>
 800e28a:	4b3f      	ldr	r3, [pc, #252]	@ (800e388 <__mdiff+0x120>)
 800e28c:	f240 2137 	movw	r1, #567	@ 0x237
 800e290:	483e      	ldr	r0, [pc, #248]	@ (800e38c <__mdiff+0x124>)
 800e292:	f000 fd83 	bl	800ed9c <__assert_func>
 800e296:	2301      	movs	r3, #1
 800e298:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e29c:	4610      	mov	r0, r2
 800e29e:	b003      	add	sp, #12
 800e2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a4:	bfbc      	itt	lt
 800e2a6:	464b      	movlt	r3, r9
 800e2a8:	46a1      	movlt	r9, r4
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e2b0:	bfba      	itte	lt
 800e2b2:	461c      	movlt	r4, r3
 800e2b4:	2501      	movlt	r5, #1
 800e2b6:	2500      	movge	r5, #0
 800e2b8:	f7ff fcf6 	bl	800dca8 <_Balloc>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	b918      	cbnz	r0, 800e2c8 <__mdiff+0x60>
 800e2c0:	4b31      	ldr	r3, [pc, #196]	@ (800e388 <__mdiff+0x120>)
 800e2c2:	f240 2145 	movw	r1, #581	@ 0x245
 800e2c6:	e7e3      	b.n	800e290 <__mdiff+0x28>
 800e2c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e2cc:	6926      	ldr	r6, [r4, #16]
 800e2ce:	60c5      	str	r5, [r0, #12]
 800e2d0:	f109 0310 	add.w	r3, r9, #16
 800e2d4:	f109 0514 	add.w	r5, r9, #20
 800e2d8:	f104 0e14 	add.w	lr, r4, #20
 800e2dc:	f100 0b14 	add.w	fp, r0, #20
 800e2e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e2e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e2e8:	9301      	str	r3, [sp, #4]
 800e2ea:	46d9      	mov	r9, fp
 800e2ec:	f04f 0c00 	mov.w	ip, #0
 800e2f0:	9b01      	ldr	r3, [sp, #4]
 800e2f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e2f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e2fa:	9301      	str	r3, [sp, #4]
 800e2fc:	fa1f f38a 	uxth.w	r3, sl
 800e300:	4619      	mov	r1, r3
 800e302:	b283      	uxth	r3, r0
 800e304:	1acb      	subs	r3, r1, r3
 800e306:	0c00      	lsrs	r0, r0, #16
 800e308:	4463      	add	r3, ip
 800e30a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e30e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e312:	b29b      	uxth	r3, r3
 800e314:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e318:	4576      	cmp	r6, lr
 800e31a:	f849 3b04 	str.w	r3, [r9], #4
 800e31e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e322:	d8e5      	bhi.n	800e2f0 <__mdiff+0x88>
 800e324:	1b33      	subs	r3, r6, r4
 800e326:	3b15      	subs	r3, #21
 800e328:	f023 0303 	bic.w	r3, r3, #3
 800e32c:	3415      	adds	r4, #21
 800e32e:	3304      	adds	r3, #4
 800e330:	42a6      	cmp	r6, r4
 800e332:	bf38      	it	cc
 800e334:	2304      	movcc	r3, #4
 800e336:	441d      	add	r5, r3
 800e338:	445b      	add	r3, fp
 800e33a:	461e      	mov	r6, r3
 800e33c:	462c      	mov	r4, r5
 800e33e:	4544      	cmp	r4, r8
 800e340:	d30e      	bcc.n	800e360 <__mdiff+0xf8>
 800e342:	f108 0103 	add.w	r1, r8, #3
 800e346:	1b49      	subs	r1, r1, r5
 800e348:	f021 0103 	bic.w	r1, r1, #3
 800e34c:	3d03      	subs	r5, #3
 800e34e:	45a8      	cmp	r8, r5
 800e350:	bf38      	it	cc
 800e352:	2100      	movcc	r1, #0
 800e354:	440b      	add	r3, r1
 800e356:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e35a:	b191      	cbz	r1, 800e382 <__mdiff+0x11a>
 800e35c:	6117      	str	r7, [r2, #16]
 800e35e:	e79d      	b.n	800e29c <__mdiff+0x34>
 800e360:	f854 1b04 	ldr.w	r1, [r4], #4
 800e364:	46e6      	mov	lr, ip
 800e366:	0c08      	lsrs	r0, r1, #16
 800e368:	fa1c fc81 	uxtah	ip, ip, r1
 800e36c:	4471      	add	r1, lr
 800e36e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e372:	b289      	uxth	r1, r1
 800e374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e378:	f846 1b04 	str.w	r1, [r6], #4
 800e37c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e380:	e7dd      	b.n	800e33e <__mdiff+0xd6>
 800e382:	3f01      	subs	r7, #1
 800e384:	e7e7      	b.n	800e356 <__mdiff+0xee>
 800e386:	bf00      	nop
 800e388:	0800f840 	.word	0x0800f840
 800e38c:	0800f8c8 	.word	0x0800f8c8

0800e390 <__ulp>:
 800e390:	b082      	sub	sp, #8
 800e392:	ed8d 0b00 	vstr	d0, [sp]
 800e396:	9a01      	ldr	r2, [sp, #4]
 800e398:	4b0f      	ldr	r3, [pc, #60]	@ (800e3d8 <__ulp+0x48>)
 800e39a:	4013      	ands	r3, r2
 800e39c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	dc08      	bgt.n	800e3b6 <__ulp+0x26>
 800e3a4:	425b      	negs	r3, r3
 800e3a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e3aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e3ae:	da04      	bge.n	800e3ba <__ulp+0x2a>
 800e3b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e3b4:	4113      	asrs	r3, r2
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	e008      	b.n	800e3cc <__ulp+0x3c>
 800e3ba:	f1a2 0314 	sub.w	r3, r2, #20
 800e3be:	2b1e      	cmp	r3, #30
 800e3c0:	bfda      	itte	le
 800e3c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e3c6:	40da      	lsrle	r2, r3
 800e3c8:	2201      	movgt	r2, #1
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	4610      	mov	r0, r2
 800e3d0:	ec41 0b10 	vmov	d0, r0, r1
 800e3d4:	b002      	add	sp, #8
 800e3d6:	4770      	bx	lr
 800e3d8:	7ff00000 	.word	0x7ff00000

0800e3dc <__b2d>:
 800e3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e0:	6906      	ldr	r6, [r0, #16]
 800e3e2:	f100 0814 	add.w	r8, r0, #20
 800e3e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e3ea:	1f37      	subs	r7, r6, #4
 800e3ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e3f0:	4610      	mov	r0, r2
 800e3f2:	f7ff fd4b 	bl	800de8c <__hi0bits>
 800e3f6:	f1c0 0320 	rsb	r3, r0, #32
 800e3fa:	280a      	cmp	r0, #10
 800e3fc:	600b      	str	r3, [r1, #0]
 800e3fe:	491b      	ldr	r1, [pc, #108]	@ (800e46c <__b2d+0x90>)
 800e400:	dc15      	bgt.n	800e42e <__b2d+0x52>
 800e402:	f1c0 0c0b 	rsb	ip, r0, #11
 800e406:	fa22 f30c 	lsr.w	r3, r2, ip
 800e40a:	45b8      	cmp	r8, r7
 800e40c:	ea43 0501 	orr.w	r5, r3, r1
 800e410:	bf34      	ite	cc
 800e412:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e416:	2300      	movcs	r3, #0
 800e418:	3015      	adds	r0, #21
 800e41a:	fa02 f000 	lsl.w	r0, r2, r0
 800e41e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e422:	4303      	orrs	r3, r0
 800e424:	461c      	mov	r4, r3
 800e426:	ec45 4b10 	vmov	d0, r4, r5
 800e42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e42e:	45b8      	cmp	r8, r7
 800e430:	bf3a      	itte	cc
 800e432:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e436:	f1a6 0708 	subcc.w	r7, r6, #8
 800e43a:	2300      	movcs	r3, #0
 800e43c:	380b      	subs	r0, #11
 800e43e:	d012      	beq.n	800e466 <__b2d+0x8a>
 800e440:	f1c0 0120 	rsb	r1, r0, #32
 800e444:	fa23 f401 	lsr.w	r4, r3, r1
 800e448:	4082      	lsls	r2, r0
 800e44a:	4322      	orrs	r2, r4
 800e44c:	4547      	cmp	r7, r8
 800e44e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e452:	bf8c      	ite	hi
 800e454:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e458:	2200      	movls	r2, #0
 800e45a:	4083      	lsls	r3, r0
 800e45c:	40ca      	lsrs	r2, r1
 800e45e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e462:	4313      	orrs	r3, r2
 800e464:	e7de      	b.n	800e424 <__b2d+0x48>
 800e466:	ea42 0501 	orr.w	r5, r2, r1
 800e46a:	e7db      	b.n	800e424 <__b2d+0x48>
 800e46c:	3ff00000 	.word	0x3ff00000

0800e470 <__d2b>:
 800e470:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e474:	460f      	mov	r7, r1
 800e476:	2101      	movs	r1, #1
 800e478:	ec59 8b10 	vmov	r8, r9, d0
 800e47c:	4616      	mov	r6, r2
 800e47e:	f7ff fc13 	bl	800dca8 <_Balloc>
 800e482:	4604      	mov	r4, r0
 800e484:	b930      	cbnz	r0, 800e494 <__d2b+0x24>
 800e486:	4602      	mov	r2, r0
 800e488:	4b23      	ldr	r3, [pc, #140]	@ (800e518 <__d2b+0xa8>)
 800e48a:	4824      	ldr	r0, [pc, #144]	@ (800e51c <__d2b+0xac>)
 800e48c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e490:	f000 fc84 	bl	800ed9c <__assert_func>
 800e494:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e498:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e49c:	b10d      	cbz	r5, 800e4a2 <__d2b+0x32>
 800e49e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4a2:	9301      	str	r3, [sp, #4]
 800e4a4:	f1b8 0300 	subs.w	r3, r8, #0
 800e4a8:	d023      	beq.n	800e4f2 <__d2b+0x82>
 800e4aa:	4668      	mov	r0, sp
 800e4ac:	9300      	str	r3, [sp, #0]
 800e4ae:	f7ff fd0c 	bl	800deca <__lo0bits>
 800e4b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e4b6:	b1d0      	cbz	r0, 800e4ee <__d2b+0x7e>
 800e4b8:	f1c0 0320 	rsb	r3, r0, #32
 800e4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e4c0:	430b      	orrs	r3, r1
 800e4c2:	40c2      	lsrs	r2, r0
 800e4c4:	6163      	str	r3, [r4, #20]
 800e4c6:	9201      	str	r2, [sp, #4]
 800e4c8:	9b01      	ldr	r3, [sp, #4]
 800e4ca:	61a3      	str	r3, [r4, #24]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	bf0c      	ite	eq
 800e4d0:	2201      	moveq	r2, #1
 800e4d2:	2202      	movne	r2, #2
 800e4d4:	6122      	str	r2, [r4, #16]
 800e4d6:	b1a5      	cbz	r5, 800e502 <__d2b+0x92>
 800e4d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e4dc:	4405      	add	r5, r0
 800e4de:	603d      	str	r5, [r7, #0]
 800e4e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e4e4:	6030      	str	r0, [r6, #0]
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	b003      	add	sp, #12
 800e4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4ee:	6161      	str	r1, [r4, #20]
 800e4f0:	e7ea      	b.n	800e4c8 <__d2b+0x58>
 800e4f2:	a801      	add	r0, sp, #4
 800e4f4:	f7ff fce9 	bl	800deca <__lo0bits>
 800e4f8:	9b01      	ldr	r3, [sp, #4]
 800e4fa:	6163      	str	r3, [r4, #20]
 800e4fc:	3020      	adds	r0, #32
 800e4fe:	2201      	movs	r2, #1
 800e500:	e7e8      	b.n	800e4d4 <__d2b+0x64>
 800e502:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e506:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e50a:	6038      	str	r0, [r7, #0]
 800e50c:	6918      	ldr	r0, [r3, #16]
 800e50e:	f7ff fcbd 	bl	800de8c <__hi0bits>
 800e512:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e516:	e7e5      	b.n	800e4e4 <__d2b+0x74>
 800e518:	0800f840 	.word	0x0800f840
 800e51c:	0800f8c8 	.word	0x0800f8c8

0800e520 <__ratio>:
 800e520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e524:	b085      	sub	sp, #20
 800e526:	e9cd 1000 	strd	r1, r0, [sp]
 800e52a:	a902      	add	r1, sp, #8
 800e52c:	f7ff ff56 	bl	800e3dc <__b2d>
 800e530:	9800      	ldr	r0, [sp, #0]
 800e532:	a903      	add	r1, sp, #12
 800e534:	ec55 4b10 	vmov	r4, r5, d0
 800e538:	f7ff ff50 	bl	800e3dc <__b2d>
 800e53c:	9b01      	ldr	r3, [sp, #4]
 800e53e:	6919      	ldr	r1, [r3, #16]
 800e540:	9b00      	ldr	r3, [sp, #0]
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	1ac9      	subs	r1, r1, r3
 800e546:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e54a:	1a9b      	subs	r3, r3, r2
 800e54c:	ec5b ab10 	vmov	sl, fp, d0
 800e550:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e554:	2b00      	cmp	r3, #0
 800e556:	bfce      	itee	gt
 800e558:	462a      	movgt	r2, r5
 800e55a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e55e:	465a      	movle	r2, fp
 800e560:	462f      	mov	r7, r5
 800e562:	46d9      	mov	r9, fp
 800e564:	bfcc      	ite	gt
 800e566:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e56a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e56e:	464b      	mov	r3, r9
 800e570:	4652      	mov	r2, sl
 800e572:	4620      	mov	r0, r4
 800e574:	4639      	mov	r1, r7
 800e576:	f7f2 f991 	bl	800089c <__aeabi_ddiv>
 800e57a:	ec41 0b10 	vmov	d0, r0, r1
 800e57e:	b005      	add	sp, #20
 800e580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e584 <__copybits>:
 800e584:	3901      	subs	r1, #1
 800e586:	b570      	push	{r4, r5, r6, lr}
 800e588:	1149      	asrs	r1, r1, #5
 800e58a:	6914      	ldr	r4, [r2, #16]
 800e58c:	3101      	adds	r1, #1
 800e58e:	f102 0314 	add.w	r3, r2, #20
 800e592:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e596:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e59a:	1f05      	subs	r5, r0, #4
 800e59c:	42a3      	cmp	r3, r4
 800e59e:	d30c      	bcc.n	800e5ba <__copybits+0x36>
 800e5a0:	1aa3      	subs	r3, r4, r2
 800e5a2:	3b11      	subs	r3, #17
 800e5a4:	f023 0303 	bic.w	r3, r3, #3
 800e5a8:	3211      	adds	r2, #17
 800e5aa:	42a2      	cmp	r2, r4
 800e5ac:	bf88      	it	hi
 800e5ae:	2300      	movhi	r3, #0
 800e5b0:	4418      	add	r0, r3
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	4288      	cmp	r0, r1
 800e5b6:	d305      	bcc.n	800e5c4 <__copybits+0x40>
 800e5b8:	bd70      	pop	{r4, r5, r6, pc}
 800e5ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800e5be:	f845 6f04 	str.w	r6, [r5, #4]!
 800e5c2:	e7eb      	b.n	800e59c <__copybits+0x18>
 800e5c4:	f840 3b04 	str.w	r3, [r0], #4
 800e5c8:	e7f4      	b.n	800e5b4 <__copybits+0x30>

0800e5ca <__any_on>:
 800e5ca:	f100 0214 	add.w	r2, r0, #20
 800e5ce:	6900      	ldr	r0, [r0, #16]
 800e5d0:	114b      	asrs	r3, r1, #5
 800e5d2:	4298      	cmp	r0, r3
 800e5d4:	b510      	push	{r4, lr}
 800e5d6:	db11      	blt.n	800e5fc <__any_on+0x32>
 800e5d8:	dd0a      	ble.n	800e5f0 <__any_on+0x26>
 800e5da:	f011 011f 	ands.w	r1, r1, #31
 800e5de:	d007      	beq.n	800e5f0 <__any_on+0x26>
 800e5e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e5e4:	fa24 f001 	lsr.w	r0, r4, r1
 800e5e8:	fa00 f101 	lsl.w	r1, r0, r1
 800e5ec:	428c      	cmp	r4, r1
 800e5ee:	d10b      	bne.n	800e608 <__any_on+0x3e>
 800e5f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d803      	bhi.n	800e600 <__any_on+0x36>
 800e5f8:	2000      	movs	r0, #0
 800e5fa:	bd10      	pop	{r4, pc}
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	e7f7      	b.n	800e5f0 <__any_on+0x26>
 800e600:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e604:	2900      	cmp	r1, #0
 800e606:	d0f5      	beq.n	800e5f4 <__any_on+0x2a>
 800e608:	2001      	movs	r0, #1
 800e60a:	e7f6      	b.n	800e5fa <__any_on+0x30>

0800e60c <__ascii_wctomb>:
 800e60c:	4603      	mov	r3, r0
 800e60e:	4608      	mov	r0, r1
 800e610:	b141      	cbz	r1, 800e624 <__ascii_wctomb+0x18>
 800e612:	2aff      	cmp	r2, #255	@ 0xff
 800e614:	d904      	bls.n	800e620 <__ascii_wctomb+0x14>
 800e616:	228a      	movs	r2, #138	@ 0x8a
 800e618:	601a      	str	r2, [r3, #0]
 800e61a:	f04f 30ff 	mov.w	r0, #4294967295
 800e61e:	4770      	bx	lr
 800e620:	700a      	strb	r2, [r1, #0]
 800e622:	2001      	movs	r0, #1
 800e624:	4770      	bx	lr

0800e626 <__ssputs_r>:
 800e626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e62a:	688e      	ldr	r6, [r1, #8]
 800e62c:	461f      	mov	r7, r3
 800e62e:	42be      	cmp	r6, r7
 800e630:	680b      	ldr	r3, [r1, #0]
 800e632:	4682      	mov	sl, r0
 800e634:	460c      	mov	r4, r1
 800e636:	4690      	mov	r8, r2
 800e638:	d82d      	bhi.n	800e696 <__ssputs_r+0x70>
 800e63a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e63e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e642:	d026      	beq.n	800e692 <__ssputs_r+0x6c>
 800e644:	6965      	ldr	r5, [r4, #20]
 800e646:	6909      	ldr	r1, [r1, #16]
 800e648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e64c:	eba3 0901 	sub.w	r9, r3, r1
 800e650:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e654:	1c7b      	adds	r3, r7, #1
 800e656:	444b      	add	r3, r9
 800e658:	106d      	asrs	r5, r5, #1
 800e65a:	429d      	cmp	r5, r3
 800e65c:	bf38      	it	cc
 800e65e:	461d      	movcc	r5, r3
 800e660:	0553      	lsls	r3, r2, #21
 800e662:	d527      	bpl.n	800e6b4 <__ssputs_r+0x8e>
 800e664:	4629      	mov	r1, r5
 800e666:	f7ff fa81 	bl	800db6c <_malloc_r>
 800e66a:	4606      	mov	r6, r0
 800e66c:	b360      	cbz	r0, 800e6c8 <__ssputs_r+0xa2>
 800e66e:	6921      	ldr	r1, [r4, #16]
 800e670:	464a      	mov	r2, r9
 800e672:	f7fe febc 	bl	800d3ee <memcpy>
 800e676:	89a3      	ldrh	r3, [r4, #12]
 800e678:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e67c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e680:	81a3      	strh	r3, [r4, #12]
 800e682:	6126      	str	r6, [r4, #16]
 800e684:	6165      	str	r5, [r4, #20]
 800e686:	444e      	add	r6, r9
 800e688:	eba5 0509 	sub.w	r5, r5, r9
 800e68c:	6026      	str	r6, [r4, #0]
 800e68e:	60a5      	str	r5, [r4, #8]
 800e690:	463e      	mov	r6, r7
 800e692:	42be      	cmp	r6, r7
 800e694:	d900      	bls.n	800e698 <__ssputs_r+0x72>
 800e696:	463e      	mov	r6, r7
 800e698:	6820      	ldr	r0, [r4, #0]
 800e69a:	4632      	mov	r2, r6
 800e69c:	4641      	mov	r1, r8
 800e69e:	f000 fb53 	bl	800ed48 <memmove>
 800e6a2:	68a3      	ldr	r3, [r4, #8]
 800e6a4:	1b9b      	subs	r3, r3, r6
 800e6a6:	60a3      	str	r3, [r4, #8]
 800e6a8:	6823      	ldr	r3, [r4, #0]
 800e6aa:	4433      	add	r3, r6
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6b4:	462a      	mov	r2, r5
 800e6b6:	f000 fbab 	bl	800ee10 <_realloc_r>
 800e6ba:	4606      	mov	r6, r0
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	d1e0      	bne.n	800e682 <__ssputs_r+0x5c>
 800e6c0:	6921      	ldr	r1, [r4, #16]
 800e6c2:	4650      	mov	r0, sl
 800e6c4:	f7fe feac 	bl	800d420 <_free_r>
 800e6c8:	230c      	movs	r3, #12
 800e6ca:	f8ca 3000 	str.w	r3, [sl]
 800e6ce:	89a3      	ldrh	r3, [r4, #12]
 800e6d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6d4:	81a3      	strh	r3, [r4, #12]
 800e6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6da:	e7e9      	b.n	800e6b0 <__ssputs_r+0x8a>

0800e6dc <_svfiprintf_r>:
 800e6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e0:	4698      	mov	r8, r3
 800e6e2:	898b      	ldrh	r3, [r1, #12]
 800e6e4:	061b      	lsls	r3, r3, #24
 800e6e6:	b09d      	sub	sp, #116	@ 0x74
 800e6e8:	4607      	mov	r7, r0
 800e6ea:	460d      	mov	r5, r1
 800e6ec:	4614      	mov	r4, r2
 800e6ee:	d510      	bpl.n	800e712 <_svfiprintf_r+0x36>
 800e6f0:	690b      	ldr	r3, [r1, #16]
 800e6f2:	b973      	cbnz	r3, 800e712 <_svfiprintf_r+0x36>
 800e6f4:	2140      	movs	r1, #64	@ 0x40
 800e6f6:	f7ff fa39 	bl	800db6c <_malloc_r>
 800e6fa:	6028      	str	r0, [r5, #0]
 800e6fc:	6128      	str	r0, [r5, #16]
 800e6fe:	b930      	cbnz	r0, 800e70e <_svfiprintf_r+0x32>
 800e700:	230c      	movs	r3, #12
 800e702:	603b      	str	r3, [r7, #0]
 800e704:	f04f 30ff 	mov.w	r0, #4294967295
 800e708:	b01d      	add	sp, #116	@ 0x74
 800e70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e70e:	2340      	movs	r3, #64	@ 0x40
 800e710:	616b      	str	r3, [r5, #20]
 800e712:	2300      	movs	r3, #0
 800e714:	9309      	str	r3, [sp, #36]	@ 0x24
 800e716:	2320      	movs	r3, #32
 800e718:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e71c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e720:	2330      	movs	r3, #48	@ 0x30
 800e722:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e8c0 <_svfiprintf_r+0x1e4>
 800e726:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e72a:	f04f 0901 	mov.w	r9, #1
 800e72e:	4623      	mov	r3, r4
 800e730:	469a      	mov	sl, r3
 800e732:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e736:	b10a      	cbz	r2, 800e73c <_svfiprintf_r+0x60>
 800e738:	2a25      	cmp	r2, #37	@ 0x25
 800e73a:	d1f9      	bne.n	800e730 <_svfiprintf_r+0x54>
 800e73c:	ebba 0b04 	subs.w	fp, sl, r4
 800e740:	d00b      	beq.n	800e75a <_svfiprintf_r+0x7e>
 800e742:	465b      	mov	r3, fp
 800e744:	4622      	mov	r2, r4
 800e746:	4629      	mov	r1, r5
 800e748:	4638      	mov	r0, r7
 800e74a:	f7ff ff6c 	bl	800e626 <__ssputs_r>
 800e74e:	3001      	adds	r0, #1
 800e750:	f000 80a7 	beq.w	800e8a2 <_svfiprintf_r+0x1c6>
 800e754:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e756:	445a      	add	r2, fp
 800e758:	9209      	str	r2, [sp, #36]	@ 0x24
 800e75a:	f89a 3000 	ldrb.w	r3, [sl]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	f000 809f 	beq.w	800e8a2 <_svfiprintf_r+0x1c6>
 800e764:	2300      	movs	r3, #0
 800e766:	f04f 32ff 	mov.w	r2, #4294967295
 800e76a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e76e:	f10a 0a01 	add.w	sl, sl, #1
 800e772:	9304      	str	r3, [sp, #16]
 800e774:	9307      	str	r3, [sp, #28]
 800e776:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e77a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e77c:	4654      	mov	r4, sl
 800e77e:	2205      	movs	r2, #5
 800e780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e784:	484e      	ldr	r0, [pc, #312]	@ (800e8c0 <_svfiprintf_r+0x1e4>)
 800e786:	f7f1 fd53 	bl	8000230 <memchr>
 800e78a:	9a04      	ldr	r2, [sp, #16]
 800e78c:	b9d8      	cbnz	r0, 800e7c6 <_svfiprintf_r+0xea>
 800e78e:	06d0      	lsls	r0, r2, #27
 800e790:	bf44      	itt	mi
 800e792:	2320      	movmi	r3, #32
 800e794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e798:	0711      	lsls	r1, r2, #28
 800e79a:	bf44      	itt	mi
 800e79c:	232b      	movmi	r3, #43	@ 0x2b
 800e79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800e7a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7a8:	d015      	beq.n	800e7d6 <_svfiprintf_r+0xfa>
 800e7aa:	9a07      	ldr	r2, [sp, #28]
 800e7ac:	4654      	mov	r4, sl
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	f04f 0c0a 	mov.w	ip, #10
 800e7b4:	4621      	mov	r1, r4
 800e7b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7ba:	3b30      	subs	r3, #48	@ 0x30
 800e7bc:	2b09      	cmp	r3, #9
 800e7be:	d94b      	bls.n	800e858 <_svfiprintf_r+0x17c>
 800e7c0:	b1b0      	cbz	r0, 800e7f0 <_svfiprintf_r+0x114>
 800e7c2:	9207      	str	r2, [sp, #28]
 800e7c4:	e014      	b.n	800e7f0 <_svfiprintf_r+0x114>
 800e7c6:	eba0 0308 	sub.w	r3, r0, r8
 800e7ca:	fa09 f303 	lsl.w	r3, r9, r3
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	9304      	str	r3, [sp, #16]
 800e7d2:	46a2      	mov	sl, r4
 800e7d4:	e7d2      	b.n	800e77c <_svfiprintf_r+0xa0>
 800e7d6:	9b03      	ldr	r3, [sp, #12]
 800e7d8:	1d19      	adds	r1, r3, #4
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	9103      	str	r1, [sp, #12]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	bfbb      	ittet	lt
 800e7e2:	425b      	neglt	r3, r3
 800e7e4:	f042 0202 	orrlt.w	r2, r2, #2
 800e7e8:	9307      	strge	r3, [sp, #28]
 800e7ea:	9307      	strlt	r3, [sp, #28]
 800e7ec:	bfb8      	it	lt
 800e7ee:	9204      	strlt	r2, [sp, #16]
 800e7f0:	7823      	ldrb	r3, [r4, #0]
 800e7f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7f4:	d10a      	bne.n	800e80c <_svfiprintf_r+0x130>
 800e7f6:	7863      	ldrb	r3, [r4, #1]
 800e7f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7fa:	d132      	bne.n	800e862 <_svfiprintf_r+0x186>
 800e7fc:	9b03      	ldr	r3, [sp, #12]
 800e7fe:	1d1a      	adds	r2, r3, #4
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	9203      	str	r2, [sp, #12]
 800e804:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e808:	3402      	adds	r4, #2
 800e80a:	9305      	str	r3, [sp, #20]
 800e80c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e8d0 <_svfiprintf_r+0x1f4>
 800e810:	7821      	ldrb	r1, [r4, #0]
 800e812:	2203      	movs	r2, #3
 800e814:	4650      	mov	r0, sl
 800e816:	f7f1 fd0b 	bl	8000230 <memchr>
 800e81a:	b138      	cbz	r0, 800e82c <_svfiprintf_r+0x150>
 800e81c:	9b04      	ldr	r3, [sp, #16]
 800e81e:	eba0 000a 	sub.w	r0, r0, sl
 800e822:	2240      	movs	r2, #64	@ 0x40
 800e824:	4082      	lsls	r2, r0
 800e826:	4313      	orrs	r3, r2
 800e828:	3401      	adds	r4, #1
 800e82a:	9304      	str	r3, [sp, #16]
 800e82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e830:	4824      	ldr	r0, [pc, #144]	@ (800e8c4 <_svfiprintf_r+0x1e8>)
 800e832:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e836:	2206      	movs	r2, #6
 800e838:	f7f1 fcfa 	bl	8000230 <memchr>
 800e83c:	2800      	cmp	r0, #0
 800e83e:	d036      	beq.n	800e8ae <_svfiprintf_r+0x1d2>
 800e840:	4b21      	ldr	r3, [pc, #132]	@ (800e8c8 <_svfiprintf_r+0x1ec>)
 800e842:	bb1b      	cbnz	r3, 800e88c <_svfiprintf_r+0x1b0>
 800e844:	9b03      	ldr	r3, [sp, #12]
 800e846:	3307      	adds	r3, #7
 800e848:	f023 0307 	bic.w	r3, r3, #7
 800e84c:	3308      	adds	r3, #8
 800e84e:	9303      	str	r3, [sp, #12]
 800e850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e852:	4433      	add	r3, r6
 800e854:	9309      	str	r3, [sp, #36]	@ 0x24
 800e856:	e76a      	b.n	800e72e <_svfiprintf_r+0x52>
 800e858:	fb0c 3202 	mla	r2, ip, r2, r3
 800e85c:	460c      	mov	r4, r1
 800e85e:	2001      	movs	r0, #1
 800e860:	e7a8      	b.n	800e7b4 <_svfiprintf_r+0xd8>
 800e862:	2300      	movs	r3, #0
 800e864:	3401      	adds	r4, #1
 800e866:	9305      	str	r3, [sp, #20]
 800e868:	4619      	mov	r1, r3
 800e86a:	f04f 0c0a 	mov.w	ip, #10
 800e86e:	4620      	mov	r0, r4
 800e870:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e874:	3a30      	subs	r2, #48	@ 0x30
 800e876:	2a09      	cmp	r2, #9
 800e878:	d903      	bls.n	800e882 <_svfiprintf_r+0x1a6>
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d0c6      	beq.n	800e80c <_svfiprintf_r+0x130>
 800e87e:	9105      	str	r1, [sp, #20]
 800e880:	e7c4      	b.n	800e80c <_svfiprintf_r+0x130>
 800e882:	fb0c 2101 	mla	r1, ip, r1, r2
 800e886:	4604      	mov	r4, r0
 800e888:	2301      	movs	r3, #1
 800e88a:	e7f0      	b.n	800e86e <_svfiprintf_r+0x192>
 800e88c:	ab03      	add	r3, sp, #12
 800e88e:	9300      	str	r3, [sp, #0]
 800e890:	462a      	mov	r2, r5
 800e892:	4b0e      	ldr	r3, [pc, #56]	@ (800e8cc <_svfiprintf_r+0x1f0>)
 800e894:	a904      	add	r1, sp, #16
 800e896:	4638      	mov	r0, r7
 800e898:	f3af 8000 	nop.w
 800e89c:	1c42      	adds	r2, r0, #1
 800e89e:	4606      	mov	r6, r0
 800e8a0:	d1d6      	bne.n	800e850 <_svfiprintf_r+0x174>
 800e8a2:	89ab      	ldrh	r3, [r5, #12]
 800e8a4:	065b      	lsls	r3, r3, #25
 800e8a6:	f53f af2d 	bmi.w	800e704 <_svfiprintf_r+0x28>
 800e8aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8ac:	e72c      	b.n	800e708 <_svfiprintf_r+0x2c>
 800e8ae:	ab03      	add	r3, sp, #12
 800e8b0:	9300      	str	r3, [sp, #0]
 800e8b2:	462a      	mov	r2, r5
 800e8b4:	4b05      	ldr	r3, [pc, #20]	@ (800e8cc <_svfiprintf_r+0x1f0>)
 800e8b6:	a904      	add	r1, sp, #16
 800e8b8:	4638      	mov	r0, r7
 800e8ba:	f000 f879 	bl	800e9b0 <_printf_i>
 800e8be:	e7ed      	b.n	800e89c <_svfiprintf_r+0x1c0>
 800e8c0:	0800fb21 	.word	0x0800fb21
 800e8c4:	0800fb2b 	.word	0x0800fb2b
 800e8c8:	00000000 	.word	0x00000000
 800e8cc:	0800e627 	.word	0x0800e627
 800e8d0:	0800fb27 	.word	0x0800fb27

0800e8d4 <_printf_common>:
 800e8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8d8:	4616      	mov	r6, r2
 800e8da:	4698      	mov	r8, r3
 800e8dc:	688a      	ldr	r2, [r1, #8]
 800e8de:	690b      	ldr	r3, [r1, #16]
 800e8e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	bfb8      	it	lt
 800e8e8:	4613      	movlt	r3, r2
 800e8ea:	6033      	str	r3, [r6, #0]
 800e8ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e8f0:	4607      	mov	r7, r0
 800e8f2:	460c      	mov	r4, r1
 800e8f4:	b10a      	cbz	r2, 800e8fa <_printf_common+0x26>
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	6033      	str	r3, [r6, #0]
 800e8fa:	6823      	ldr	r3, [r4, #0]
 800e8fc:	0699      	lsls	r1, r3, #26
 800e8fe:	bf42      	ittt	mi
 800e900:	6833      	ldrmi	r3, [r6, #0]
 800e902:	3302      	addmi	r3, #2
 800e904:	6033      	strmi	r3, [r6, #0]
 800e906:	6825      	ldr	r5, [r4, #0]
 800e908:	f015 0506 	ands.w	r5, r5, #6
 800e90c:	d106      	bne.n	800e91c <_printf_common+0x48>
 800e90e:	f104 0a19 	add.w	sl, r4, #25
 800e912:	68e3      	ldr	r3, [r4, #12]
 800e914:	6832      	ldr	r2, [r6, #0]
 800e916:	1a9b      	subs	r3, r3, r2
 800e918:	42ab      	cmp	r3, r5
 800e91a:	dc26      	bgt.n	800e96a <_printf_common+0x96>
 800e91c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e920:	6822      	ldr	r2, [r4, #0]
 800e922:	3b00      	subs	r3, #0
 800e924:	bf18      	it	ne
 800e926:	2301      	movne	r3, #1
 800e928:	0692      	lsls	r2, r2, #26
 800e92a:	d42b      	bmi.n	800e984 <_printf_common+0xb0>
 800e92c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e930:	4641      	mov	r1, r8
 800e932:	4638      	mov	r0, r7
 800e934:	47c8      	blx	r9
 800e936:	3001      	adds	r0, #1
 800e938:	d01e      	beq.n	800e978 <_printf_common+0xa4>
 800e93a:	6823      	ldr	r3, [r4, #0]
 800e93c:	6922      	ldr	r2, [r4, #16]
 800e93e:	f003 0306 	and.w	r3, r3, #6
 800e942:	2b04      	cmp	r3, #4
 800e944:	bf02      	ittt	eq
 800e946:	68e5      	ldreq	r5, [r4, #12]
 800e948:	6833      	ldreq	r3, [r6, #0]
 800e94a:	1aed      	subeq	r5, r5, r3
 800e94c:	68a3      	ldr	r3, [r4, #8]
 800e94e:	bf0c      	ite	eq
 800e950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e954:	2500      	movne	r5, #0
 800e956:	4293      	cmp	r3, r2
 800e958:	bfc4      	itt	gt
 800e95a:	1a9b      	subgt	r3, r3, r2
 800e95c:	18ed      	addgt	r5, r5, r3
 800e95e:	2600      	movs	r6, #0
 800e960:	341a      	adds	r4, #26
 800e962:	42b5      	cmp	r5, r6
 800e964:	d11a      	bne.n	800e99c <_printf_common+0xc8>
 800e966:	2000      	movs	r0, #0
 800e968:	e008      	b.n	800e97c <_printf_common+0xa8>
 800e96a:	2301      	movs	r3, #1
 800e96c:	4652      	mov	r2, sl
 800e96e:	4641      	mov	r1, r8
 800e970:	4638      	mov	r0, r7
 800e972:	47c8      	blx	r9
 800e974:	3001      	adds	r0, #1
 800e976:	d103      	bne.n	800e980 <_printf_common+0xac>
 800e978:	f04f 30ff 	mov.w	r0, #4294967295
 800e97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e980:	3501      	adds	r5, #1
 800e982:	e7c6      	b.n	800e912 <_printf_common+0x3e>
 800e984:	18e1      	adds	r1, r4, r3
 800e986:	1c5a      	adds	r2, r3, #1
 800e988:	2030      	movs	r0, #48	@ 0x30
 800e98a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e98e:	4422      	add	r2, r4
 800e990:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e994:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e998:	3302      	adds	r3, #2
 800e99a:	e7c7      	b.n	800e92c <_printf_common+0x58>
 800e99c:	2301      	movs	r3, #1
 800e99e:	4622      	mov	r2, r4
 800e9a0:	4641      	mov	r1, r8
 800e9a2:	4638      	mov	r0, r7
 800e9a4:	47c8      	blx	r9
 800e9a6:	3001      	adds	r0, #1
 800e9a8:	d0e6      	beq.n	800e978 <_printf_common+0xa4>
 800e9aa:	3601      	adds	r6, #1
 800e9ac:	e7d9      	b.n	800e962 <_printf_common+0x8e>
	...

0800e9b0 <_printf_i>:
 800e9b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9b4:	7e0f      	ldrb	r7, [r1, #24]
 800e9b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e9b8:	2f78      	cmp	r7, #120	@ 0x78
 800e9ba:	4691      	mov	r9, r2
 800e9bc:	4680      	mov	r8, r0
 800e9be:	460c      	mov	r4, r1
 800e9c0:	469a      	mov	sl, r3
 800e9c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e9c6:	d807      	bhi.n	800e9d8 <_printf_i+0x28>
 800e9c8:	2f62      	cmp	r7, #98	@ 0x62
 800e9ca:	d80a      	bhi.n	800e9e2 <_printf_i+0x32>
 800e9cc:	2f00      	cmp	r7, #0
 800e9ce:	f000 80d2 	beq.w	800eb76 <_printf_i+0x1c6>
 800e9d2:	2f58      	cmp	r7, #88	@ 0x58
 800e9d4:	f000 80b9 	beq.w	800eb4a <_printf_i+0x19a>
 800e9d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e9e0:	e03a      	b.n	800ea58 <_printf_i+0xa8>
 800e9e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e9e6:	2b15      	cmp	r3, #21
 800e9e8:	d8f6      	bhi.n	800e9d8 <_printf_i+0x28>
 800e9ea:	a101      	add	r1, pc, #4	@ (adr r1, 800e9f0 <_printf_i+0x40>)
 800e9ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9f0:	0800ea49 	.word	0x0800ea49
 800e9f4:	0800ea5d 	.word	0x0800ea5d
 800e9f8:	0800e9d9 	.word	0x0800e9d9
 800e9fc:	0800e9d9 	.word	0x0800e9d9
 800ea00:	0800e9d9 	.word	0x0800e9d9
 800ea04:	0800e9d9 	.word	0x0800e9d9
 800ea08:	0800ea5d 	.word	0x0800ea5d
 800ea0c:	0800e9d9 	.word	0x0800e9d9
 800ea10:	0800e9d9 	.word	0x0800e9d9
 800ea14:	0800e9d9 	.word	0x0800e9d9
 800ea18:	0800e9d9 	.word	0x0800e9d9
 800ea1c:	0800eb5d 	.word	0x0800eb5d
 800ea20:	0800ea87 	.word	0x0800ea87
 800ea24:	0800eb17 	.word	0x0800eb17
 800ea28:	0800e9d9 	.word	0x0800e9d9
 800ea2c:	0800e9d9 	.word	0x0800e9d9
 800ea30:	0800eb7f 	.word	0x0800eb7f
 800ea34:	0800e9d9 	.word	0x0800e9d9
 800ea38:	0800ea87 	.word	0x0800ea87
 800ea3c:	0800e9d9 	.word	0x0800e9d9
 800ea40:	0800e9d9 	.word	0x0800e9d9
 800ea44:	0800eb1f 	.word	0x0800eb1f
 800ea48:	6833      	ldr	r3, [r6, #0]
 800ea4a:	1d1a      	adds	r2, r3, #4
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	6032      	str	r2, [r6, #0]
 800ea50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea58:	2301      	movs	r3, #1
 800ea5a:	e09d      	b.n	800eb98 <_printf_i+0x1e8>
 800ea5c:	6833      	ldr	r3, [r6, #0]
 800ea5e:	6820      	ldr	r0, [r4, #0]
 800ea60:	1d19      	adds	r1, r3, #4
 800ea62:	6031      	str	r1, [r6, #0]
 800ea64:	0606      	lsls	r6, r0, #24
 800ea66:	d501      	bpl.n	800ea6c <_printf_i+0xbc>
 800ea68:	681d      	ldr	r5, [r3, #0]
 800ea6a:	e003      	b.n	800ea74 <_printf_i+0xc4>
 800ea6c:	0645      	lsls	r5, r0, #25
 800ea6e:	d5fb      	bpl.n	800ea68 <_printf_i+0xb8>
 800ea70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea74:	2d00      	cmp	r5, #0
 800ea76:	da03      	bge.n	800ea80 <_printf_i+0xd0>
 800ea78:	232d      	movs	r3, #45	@ 0x2d
 800ea7a:	426d      	negs	r5, r5
 800ea7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea80:	4859      	ldr	r0, [pc, #356]	@ (800ebe8 <_printf_i+0x238>)
 800ea82:	230a      	movs	r3, #10
 800ea84:	e011      	b.n	800eaaa <_printf_i+0xfa>
 800ea86:	6821      	ldr	r1, [r4, #0]
 800ea88:	6833      	ldr	r3, [r6, #0]
 800ea8a:	0608      	lsls	r0, r1, #24
 800ea8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea90:	d402      	bmi.n	800ea98 <_printf_i+0xe8>
 800ea92:	0649      	lsls	r1, r1, #25
 800ea94:	bf48      	it	mi
 800ea96:	b2ad      	uxthmi	r5, r5
 800ea98:	2f6f      	cmp	r7, #111	@ 0x6f
 800ea9a:	4853      	ldr	r0, [pc, #332]	@ (800ebe8 <_printf_i+0x238>)
 800ea9c:	6033      	str	r3, [r6, #0]
 800ea9e:	bf14      	ite	ne
 800eaa0:	230a      	movne	r3, #10
 800eaa2:	2308      	moveq	r3, #8
 800eaa4:	2100      	movs	r1, #0
 800eaa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eaaa:	6866      	ldr	r6, [r4, #4]
 800eaac:	60a6      	str	r6, [r4, #8]
 800eaae:	2e00      	cmp	r6, #0
 800eab0:	bfa2      	ittt	ge
 800eab2:	6821      	ldrge	r1, [r4, #0]
 800eab4:	f021 0104 	bicge.w	r1, r1, #4
 800eab8:	6021      	strge	r1, [r4, #0]
 800eaba:	b90d      	cbnz	r5, 800eac0 <_printf_i+0x110>
 800eabc:	2e00      	cmp	r6, #0
 800eabe:	d04b      	beq.n	800eb58 <_printf_i+0x1a8>
 800eac0:	4616      	mov	r6, r2
 800eac2:	fbb5 f1f3 	udiv	r1, r5, r3
 800eac6:	fb03 5711 	mls	r7, r3, r1, r5
 800eaca:	5dc7      	ldrb	r7, [r0, r7]
 800eacc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ead0:	462f      	mov	r7, r5
 800ead2:	42bb      	cmp	r3, r7
 800ead4:	460d      	mov	r5, r1
 800ead6:	d9f4      	bls.n	800eac2 <_printf_i+0x112>
 800ead8:	2b08      	cmp	r3, #8
 800eada:	d10b      	bne.n	800eaf4 <_printf_i+0x144>
 800eadc:	6823      	ldr	r3, [r4, #0]
 800eade:	07df      	lsls	r7, r3, #31
 800eae0:	d508      	bpl.n	800eaf4 <_printf_i+0x144>
 800eae2:	6923      	ldr	r3, [r4, #16]
 800eae4:	6861      	ldr	r1, [r4, #4]
 800eae6:	4299      	cmp	r1, r3
 800eae8:	bfde      	ittt	le
 800eaea:	2330      	movle	r3, #48	@ 0x30
 800eaec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eaf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eaf4:	1b92      	subs	r2, r2, r6
 800eaf6:	6122      	str	r2, [r4, #16]
 800eaf8:	f8cd a000 	str.w	sl, [sp]
 800eafc:	464b      	mov	r3, r9
 800eafe:	aa03      	add	r2, sp, #12
 800eb00:	4621      	mov	r1, r4
 800eb02:	4640      	mov	r0, r8
 800eb04:	f7ff fee6 	bl	800e8d4 <_printf_common>
 800eb08:	3001      	adds	r0, #1
 800eb0a:	d14a      	bne.n	800eba2 <_printf_i+0x1f2>
 800eb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb10:	b004      	add	sp, #16
 800eb12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb16:	6823      	ldr	r3, [r4, #0]
 800eb18:	f043 0320 	orr.w	r3, r3, #32
 800eb1c:	6023      	str	r3, [r4, #0]
 800eb1e:	4833      	ldr	r0, [pc, #204]	@ (800ebec <_printf_i+0x23c>)
 800eb20:	2778      	movs	r7, #120	@ 0x78
 800eb22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb26:	6823      	ldr	r3, [r4, #0]
 800eb28:	6831      	ldr	r1, [r6, #0]
 800eb2a:	061f      	lsls	r7, r3, #24
 800eb2c:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb30:	d402      	bmi.n	800eb38 <_printf_i+0x188>
 800eb32:	065f      	lsls	r7, r3, #25
 800eb34:	bf48      	it	mi
 800eb36:	b2ad      	uxthmi	r5, r5
 800eb38:	6031      	str	r1, [r6, #0]
 800eb3a:	07d9      	lsls	r1, r3, #31
 800eb3c:	bf44      	itt	mi
 800eb3e:	f043 0320 	orrmi.w	r3, r3, #32
 800eb42:	6023      	strmi	r3, [r4, #0]
 800eb44:	b11d      	cbz	r5, 800eb4e <_printf_i+0x19e>
 800eb46:	2310      	movs	r3, #16
 800eb48:	e7ac      	b.n	800eaa4 <_printf_i+0xf4>
 800eb4a:	4827      	ldr	r0, [pc, #156]	@ (800ebe8 <_printf_i+0x238>)
 800eb4c:	e7e9      	b.n	800eb22 <_printf_i+0x172>
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	f023 0320 	bic.w	r3, r3, #32
 800eb54:	6023      	str	r3, [r4, #0]
 800eb56:	e7f6      	b.n	800eb46 <_printf_i+0x196>
 800eb58:	4616      	mov	r6, r2
 800eb5a:	e7bd      	b.n	800ead8 <_printf_i+0x128>
 800eb5c:	6833      	ldr	r3, [r6, #0]
 800eb5e:	6825      	ldr	r5, [r4, #0]
 800eb60:	6961      	ldr	r1, [r4, #20]
 800eb62:	1d18      	adds	r0, r3, #4
 800eb64:	6030      	str	r0, [r6, #0]
 800eb66:	062e      	lsls	r6, r5, #24
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	d501      	bpl.n	800eb70 <_printf_i+0x1c0>
 800eb6c:	6019      	str	r1, [r3, #0]
 800eb6e:	e002      	b.n	800eb76 <_printf_i+0x1c6>
 800eb70:	0668      	lsls	r0, r5, #25
 800eb72:	d5fb      	bpl.n	800eb6c <_printf_i+0x1bc>
 800eb74:	8019      	strh	r1, [r3, #0]
 800eb76:	2300      	movs	r3, #0
 800eb78:	6123      	str	r3, [r4, #16]
 800eb7a:	4616      	mov	r6, r2
 800eb7c:	e7bc      	b.n	800eaf8 <_printf_i+0x148>
 800eb7e:	6833      	ldr	r3, [r6, #0]
 800eb80:	1d1a      	adds	r2, r3, #4
 800eb82:	6032      	str	r2, [r6, #0]
 800eb84:	681e      	ldr	r6, [r3, #0]
 800eb86:	6862      	ldr	r2, [r4, #4]
 800eb88:	2100      	movs	r1, #0
 800eb8a:	4630      	mov	r0, r6
 800eb8c:	f7f1 fb50 	bl	8000230 <memchr>
 800eb90:	b108      	cbz	r0, 800eb96 <_printf_i+0x1e6>
 800eb92:	1b80      	subs	r0, r0, r6
 800eb94:	6060      	str	r0, [r4, #4]
 800eb96:	6863      	ldr	r3, [r4, #4]
 800eb98:	6123      	str	r3, [r4, #16]
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eba0:	e7aa      	b.n	800eaf8 <_printf_i+0x148>
 800eba2:	6923      	ldr	r3, [r4, #16]
 800eba4:	4632      	mov	r2, r6
 800eba6:	4649      	mov	r1, r9
 800eba8:	4640      	mov	r0, r8
 800ebaa:	47d0      	blx	sl
 800ebac:	3001      	adds	r0, #1
 800ebae:	d0ad      	beq.n	800eb0c <_printf_i+0x15c>
 800ebb0:	6823      	ldr	r3, [r4, #0]
 800ebb2:	079b      	lsls	r3, r3, #30
 800ebb4:	d413      	bmi.n	800ebde <_printf_i+0x22e>
 800ebb6:	68e0      	ldr	r0, [r4, #12]
 800ebb8:	9b03      	ldr	r3, [sp, #12]
 800ebba:	4298      	cmp	r0, r3
 800ebbc:	bfb8      	it	lt
 800ebbe:	4618      	movlt	r0, r3
 800ebc0:	e7a6      	b.n	800eb10 <_printf_i+0x160>
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	4632      	mov	r2, r6
 800ebc6:	4649      	mov	r1, r9
 800ebc8:	4640      	mov	r0, r8
 800ebca:	47d0      	blx	sl
 800ebcc:	3001      	adds	r0, #1
 800ebce:	d09d      	beq.n	800eb0c <_printf_i+0x15c>
 800ebd0:	3501      	adds	r5, #1
 800ebd2:	68e3      	ldr	r3, [r4, #12]
 800ebd4:	9903      	ldr	r1, [sp, #12]
 800ebd6:	1a5b      	subs	r3, r3, r1
 800ebd8:	42ab      	cmp	r3, r5
 800ebda:	dcf2      	bgt.n	800ebc2 <_printf_i+0x212>
 800ebdc:	e7eb      	b.n	800ebb6 <_printf_i+0x206>
 800ebde:	2500      	movs	r5, #0
 800ebe0:	f104 0619 	add.w	r6, r4, #25
 800ebe4:	e7f5      	b.n	800ebd2 <_printf_i+0x222>
 800ebe6:	bf00      	nop
 800ebe8:	0800fb32 	.word	0x0800fb32
 800ebec:	0800fb43 	.word	0x0800fb43

0800ebf0 <__sflush_r>:
 800ebf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf8:	0716      	lsls	r6, r2, #28
 800ebfa:	4605      	mov	r5, r0
 800ebfc:	460c      	mov	r4, r1
 800ebfe:	d454      	bmi.n	800ecaa <__sflush_r+0xba>
 800ec00:	684b      	ldr	r3, [r1, #4]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	dc02      	bgt.n	800ec0c <__sflush_r+0x1c>
 800ec06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	dd48      	ble.n	800ec9e <__sflush_r+0xae>
 800ec0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec0e:	2e00      	cmp	r6, #0
 800ec10:	d045      	beq.n	800ec9e <__sflush_r+0xae>
 800ec12:	2300      	movs	r3, #0
 800ec14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ec18:	682f      	ldr	r7, [r5, #0]
 800ec1a:	6a21      	ldr	r1, [r4, #32]
 800ec1c:	602b      	str	r3, [r5, #0]
 800ec1e:	d030      	beq.n	800ec82 <__sflush_r+0x92>
 800ec20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec22:	89a3      	ldrh	r3, [r4, #12]
 800ec24:	0759      	lsls	r1, r3, #29
 800ec26:	d505      	bpl.n	800ec34 <__sflush_r+0x44>
 800ec28:	6863      	ldr	r3, [r4, #4]
 800ec2a:	1ad2      	subs	r2, r2, r3
 800ec2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ec2e:	b10b      	cbz	r3, 800ec34 <__sflush_r+0x44>
 800ec30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec32:	1ad2      	subs	r2, r2, r3
 800ec34:	2300      	movs	r3, #0
 800ec36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec38:	6a21      	ldr	r1, [r4, #32]
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	47b0      	blx	r6
 800ec3e:	1c43      	adds	r3, r0, #1
 800ec40:	89a3      	ldrh	r3, [r4, #12]
 800ec42:	d106      	bne.n	800ec52 <__sflush_r+0x62>
 800ec44:	6829      	ldr	r1, [r5, #0]
 800ec46:	291d      	cmp	r1, #29
 800ec48:	d82b      	bhi.n	800eca2 <__sflush_r+0xb2>
 800ec4a:	4a2a      	ldr	r2, [pc, #168]	@ (800ecf4 <__sflush_r+0x104>)
 800ec4c:	410a      	asrs	r2, r1
 800ec4e:	07d6      	lsls	r6, r2, #31
 800ec50:	d427      	bmi.n	800eca2 <__sflush_r+0xb2>
 800ec52:	2200      	movs	r2, #0
 800ec54:	6062      	str	r2, [r4, #4]
 800ec56:	04d9      	lsls	r1, r3, #19
 800ec58:	6922      	ldr	r2, [r4, #16]
 800ec5a:	6022      	str	r2, [r4, #0]
 800ec5c:	d504      	bpl.n	800ec68 <__sflush_r+0x78>
 800ec5e:	1c42      	adds	r2, r0, #1
 800ec60:	d101      	bne.n	800ec66 <__sflush_r+0x76>
 800ec62:	682b      	ldr	r3, [r5, #0]
 800ec64:	b903      	cbnz	r3, 800ec68 <__sflush_r+0x78>
 800ec66:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec6a:	602f      	str	r7, [r5, #0]
 800ec6c:	b1b9      	cbz	r1, 800ec9e <__sflush_r+0xae>
 800ec6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec72:	4299      	cmp	r1, r3
 800ec74:	d002      	beq.n	800ec7c <__sflush_r+0x8c>
 800ec76:	4628      	mov	r0, r5
 800ec78:	f7fe fbd2 	bl	800d420 <_free_r>
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec80:	e00d      	b.n	800ec9e <__sflush_r+0xae>
 800ec82:	2301      	movs	r3, #1
 800ec84:	4628      	mov	r0, r5
 800ec86:	47b0      	blx	r6
 800ec88:	4602      	mov	r2, r0
 800ec8a:	1c50      	adds	r0, r2, #1
 800ec8c:	d1c9      	bne.n	800ec22 <__sflush_r+0x32>
 800ec8e:	682b      	ldr	r3, [r5, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d0c6      	beq.n	800ec22 <__sflush_r+0x32>
 800ec94:	2b1d      	cmp	r3, #29
 800ec96:	d001      	beq.n	800ec9c <__sflush_r+0xac>
 800ec98:	2b16      	cmp	r3, #22
 800ec9a:	d11e      	bne.n	800ecda <__sflush_r+0xea>
 800ec9c:	602f      	str	r7, [r5, #0]
 800ec9e:	2000      	movs	r0, #0
 800eca0:	e022      	b.n	800ece8 <__sflush_r+0xf8>
 800eca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eca6:	b21b      	sxth	r3, r3
 800eca8:	e01b      	b.n	800ece2 <__sflush_r+0xf2>
 800ecaa:	690f      	ldr	r7, [r1, #16]
 800ecac:	2f00      	cmp	r7, #0
 800ecae:	d0f6      	beq.n	800ec9e <__sflush_r+0xae>
 800ecb0:	0793      	lsls	r3, r2, #30
 800ecb2:	680e      	ldr	r6, [r1, #0]
 800ecb4:	bf08      	it	eq
 800ecb6:	694b      	ldreq	r3, [r1, #20]
 800ecb8:	600f      	str	r7, [r1, #0]
 800ecba:	bf18      	it	ne
 800ecbc:	2300      	movne	r3, #0
 800ecbe:	eba6 0807 	sub.w	r8, r6, r7
 800ecc2:	608b      	str	r3, [r1, #8]
 800ecc4:	f1b8 0f00 	cmp.w	r8, #0
 800ecc8:	dde9      	ble.n	800ec9e <__sflush_r+0xae>
 800ecca:	6a21      	ldr	r1, [r4, #32]
 800eccc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ecce:	4643      	mov	r3, r8
 800ecd0:	463a      	mov	r2, r7
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	47b0      	blx	r6
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	dc08      	bgt.n	800ecec <__sflush_r+0xfc>
 800ecda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ece2:	81a3      	strh	r3, [r4, #12]
 800ece4:	f04f 30ff 	mov.w	r0, #4294967295
 800ece8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecec:	4407      	add	r7, r0
 800ecee:	eba8 0800 	sub.w	r8, r8, r0
 800ecf2:	e7e7      	b.n	800ecc4 <__sflush_r+0xd4>
 800ecf4:	dfbffffe 	.word	0xdfbffffe

0800ecf8 <_fflush_r>:
 800ecf8:	b538      	push	{r3, r4, r5, lr}
 800ecfa:	690b      	ldr	r3, [r1, #16]
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	460c      	mov	r4, r1
 800ed00:	b913      	cbnz	r3, 800ed08 <_fflush_r+0x10>
 800ed02:	2500      	movs	r5, #0
 800ed04:	4628      	mov	r0, r5
 800ed06:	bd38      	pop	{r3, r4, r5, pc}
 800ed08:	b118      	cbz	r0, 800ed12 <_fflush_r+0x1a>
 800ed0a:	6a03      	ldr	r3, [r0, #32]
 800ed0c:	b90b      	cbnz	r3, 800ed12 <_fflush_r+0x1a>
 800ed0e:	f7fe fa47 	bl	800d1a0 <__sinit>
 800ed12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d0f3      	beq.n	800ed02 <_fflush_r+0xa>
 800ed1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ed1c:	07d0      	lsls	r0, r2, #31
 800ed1e:	d404      	bmi.n	800ed2a <_fflush_r+0x32>
 800ed20:	0599      	lsls	r1, r3, #22
 800ed22:	d402      	bmi.n	800ed2a <_fflush_r+0x32>
 800ed24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed26:	f7fe fb60 	bl	800d3ea <__retarget_lock_acquire_recursive>
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	4621      	mov	r1, r4
 800ed2e:	f7ff ff5f 	bl	800ebf0 <__sflush_r>
 800ed32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed34:	07da      	lsls	r2, r3, #31
 800ed36:	4605      	mov	r5, r0
 800ed38:	d4e4      	bmi.n	800ed04 <_fflush_r+0xc>
 800ed3a:	89a3      	ldrh	r3, [r4, #12]
 800ed3c:	059b      	lsls	r3, r3, #22
 800ed3e:	d4e1      	bmi.n	800ed04 <_fflush_r+0xc>
 800ed40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed42:	f7fe fb53 	bl	800d3ec <__retarget_lock_release_recursive>
 800ed46:	e7dd      	b.n	800ed04 <_fflush_r+0xc>

0800ed48 <memmove>:
 800ed48:	4288      	cmp	r0, r1
 800ed4a:	b510      	push	{r4, lr}
 800ed4c:	eb01 0402 	add.w	r4, r1, r2
 800ed50:	d902      	bls.n	800ed58 <memmove+0x10>
 800ed52:	4284      	cmp	r4, r0
 800ed54:	4623      	mov	r3, r4
 800ed56:	d807      	bhi.n	800ed68 <memmove+0x20>
 800ed58:	1e43      	subs	r3, r0, #1
 800ed5a:	42a1      	cmp	r1, r4
 800ed5c:	d008      	beq.n	800ed70 <memmove+0x28>
 800ed5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed66:	e7f8      	b.n	800ed5a <memmove+0x12>
 800ed68:	4402      	add	r2, r0
 800ed6a:	4601      	mov	r1, r0
 800ed6c:	428a      	cmp	r2, r1
 800ed6e:	d100      	bne.n	800ed72 <memmove+0x2a>
 800ed70:	bd10      	pop	{r4, pc}
 800ed72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed7a:	e7f7      	b.n	800ed6c <memmove+0x24>

0800ed7c <_sbrk_r>:
 800ed7c:	b538      	push	{r3, r4, r5, lr}
 800ed7e:	4d06      	ldr	r5, [pc, #24]	@ (800ed98 <_sbrk_r+0x1c>)
 800ed80:	2300      	movs	r3, #0
 800ed82:	4604      	mov	r4, r0
 800ed84:	4608      	mov	r0, r1
 800ed86:	602b      	str	r3, [r5, #0]
 800ed88:	f7f4 facc 	bl	8003324 <_sbrk>
 800ed8c:	1c43      	adds	r3, r0, #1
 800ed8e:	d102      	bne.n	800ed96 <_sbrk_r+0x1a>
 800ed90:	682b      	ldr	r3, [r5, #0]
 800ed92:	b103      	cbz	r3, 800ed96 <_sbrk_r+0x1a>
 800ed94:	6023      	str	r3, [r4, #0]
 800ed96:	bd38      	pop	{r3, r4, r5, pc}
 800ed98:	20000dac 	.word	0x20000dac

0800ed9c <__assert_func>:
 800ed9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed9e:	4614      	mov	r4, r2
 800eda0:	461a      	mov	r2, r3
 800eda2:	4b09      	ldr	r3, [pc, #36]	@ (800edc8 <__assert_func+0x2c>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4605      	mov	r5, r0
 800eda8:	68d8      	ldr	r0, [r3, #12]
 800edaa:	b954      	cbnz	r4, 800edc2 <__assert_func+0x26>
 800edac:	4b07      	ldr	r3, [pc, #28]	@ (800edcc <__assert_func+0x30>)
 800edae:	461c      	mov	r4, r3
 800edb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800edb4:	9100      	str	r1, [sp, #0]
 800edb6:	462b      	mov	r3, r5
 800edb8:	4905      	ldr	r1, [pc, #20]	@ (800edd0 <__assert_func+0x34>)
 800edba:	f000 f857 	bl	800ee6c <fiprintf>
 800edbe:	f000 f867 	bl	800ee90 <abort>
 800edc2:	4b04      	ldr	r3, [pc, #16]	@ (800edd4 <__assert_func+0x38>)
 800edc4:	e7f4      	b.n	800edb0 <__assert_func+0x14>
 800edc6:	bf00      	nop
 800edc8:	200001b8 	.word	0x200001b8
 800edcc:	0800fb8f 	.word	0x0800fb8f
 800edd0:	0800fb61 	.word	0x0800fb61
 800edd4:	0800fb54 	.word	0x0800fb54

0800edd8 <_calloc_r>:
 800edd8:	b570      	push	{r4, r5, r6, lr}
 800edda:	fba1 5402 	umull	r5, r4, r1, r2
 800edde:	b93c      	cbnz	r4, 800edf0 <_calloc_r+0x18>
 800ede0:	4629      	mov	r1, r5
 800ede2:	f7fe fec3 	bl	800db6c <_malloc_r>
 800ede6:	4606      	mov	r6, r0
 800ede8:	b928      	cbnz	r0, 800edf6 <_calloc_r+0x1e>
 800edea:	2600      	movs	r6, #0
 800edec:	4630      	mov	r0, r6
 800edee:	bd70      	pop	{r4, r5, r6, pc}
 800edf0:	220c      	movs	r2, #12
 800edf2:	6002      	str	r2, [r0, #0]
 800edf4:	e7f9      	b.n	800edea <_calloc_r+0x12>
 800edf6:	462a      	mov	r2, r5
 800edf8:	4621      	mov	r1, r4
 800edfa:	f7fe fa6a 	bl	800d2d2 <memset>
 800edfe:	e7f5      	b.n	800edec <_calloc_r+0x14>

0800ee00 <malloc>:
 800ee00:	4b02      	ldr	r3, [pc, #8]	@ (800ee0c <malloc+0xc>)
 800ee02:	4601      	mov	r1, r0
 800ee04:	6818      	ldr	r0, [r3, #0]
 800ee06:	f7fe beb1 	b.w	800db6c <_malloc_r>
 800ee0a:	bf00      	nop
 800ee0c:	200001b8 	.word	0x200001b8

0800ee10 <_realloc_r>:
 800ee10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee14:	4680      	mov	r8, r0
 800ee16:	4615      	mov	r5, r2
 800ee18:	460c      	mov	r4, r1
 800ee1a:	b921      	cbnz	r1, 800ee26 <_realloc_r+0x16>
 800ee1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee20:	4611      	mov	r1, r2
 800ee22:	f7fe bea3 	b.w	800db6c <_malloc_r>
 800ee26:	b92a      	cbnz	r2, 800ee34 <_realloc_r+0x24>
 800ee28:	f7fe fafa 	bl	800d420 <_free_r>
 800ee2c:	2400      	movs	r4, #0
 800ee2e:	4620      	mov	r0, r4
 800ee30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee34:	f000 f833 	bl	800ee9e <_malloc_usable_size_r>
 800ee38:	4285      	cmp	r5, r0
 800ee3a:	4606      	mov	r6, r0
 800ee3c:	d802      	bhi.n	800ee44 <_realloc_r+0x34>
 800ee3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ee42:	d8f4      	bhi.n	800ee2e <_realloc_r+0x1e>
 800ee44:	4629      	mov	r1, r5
 800ee46:	4640      	mov	r0, r8
 800ee48:	f7fe fe90 	bl	800db6c <_malloc_r>
 800ee4c:	4607      	mov	r7, r0
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	d0ec      	beq.n	800ee2c <_realloc_r+0x1c>
 800ee52:	42b5      	cmp	r5, r6
 800ee54:	462a      	mov	r2, r5
 800ee56:	4621      	mov	r1, r4
 800ee58:	bf28      	it	cs
 800ee5a:	4632      	movcs	r2, r6
 800ee5c:	f7fe fac7 	bl	800d3ee <memcpy>
 800ee60:	4621      	mov	r1, r4
 800ee62:	4640      	mov	r0, r8
 800ee64:	f7fe fadc 	bl	800d420 <_free_r>
 800ee68:	463c      	mov	r4, r7
 800ee6a:	e7e0      	b.n	800ee2e <_realloc_r+0x1e>

0800ee6c <fiprintf>:
 800ee6c:	b40e      	push	{r1, r2, r3}
 800ee6e:	b503      	push	{r0, r1, lr}
 800ee70:	4601      	mov	r1, r0
 800ee72:	ab03      	add	r3, sp, #12
 800ee74:	4805      	ldr	r0, [pc, #20]	@ (800ee8c <fiprintf+0x20>)
 800ee76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee7a:	6800      	ldr	r0, [r0, #0]
 800ee7c:	9301      	str	r3, [sp, #4]
 800ee7e:	f000 f83f 	bl	800ef00 <_vfiprintf_r>
 800ee82:	b002      	add	sp, #8
 800ee84:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee88:	b003      	add	sp, #12
 800ee8a:	4770      	bx	lr
 800ee8c:	200001b8 	.word	0x200001b8

0800ee90 <abort>:
 800ee90:	b508      	push	{r3, lr}
 800ee92:	2006      	movs	r0, #6
 800ee94:	f000 fa08 	bl	800f2a8 <raise>
 800ee98:	2001      	movs	r0, #1
 800ee9a:	f7f4 f9cb 	bl	8003234 <_exit>

0800ee9e <_malloc_usable_size_r>:
 800ee9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eea2:	1f18      	subs	r0, r3, #4
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	bfbc      	itt	lt
 800eea8:	580b      	ldrlt	r3, [r1, r0]
 800eeaa:	18c0      	addlt	r0, r0, r3
 800eeac:	4770      	bx	lr

0800eeae <__sfputc_r>:
 800eeae:	6893      	ldr	r3, [r2, #8]
 800eeb0:	3b01      	subs	r3, #1
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	b410      	push	{r4}
 800eeb6:	6093      	str	r3, [r2, #8]
 800eeb8:	da08      	bge.n	800eecc <__sfputc_r+0x1e>
 800eeba:	6994      	ldr	r4, [r2, #24]
 800eebc:	42a3      	cmp	r3, r4
 800eebe:	db01      	blt.n	800eec4 <__sfputc_r+0x16>
 800eec0:	290a      	cmp	r1, #10
 800eec2:	d103      	bne.n	800eecc <__sfputc_r+0x1e>
 800eec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eec8:	f000 b932 	b.w	800f130 <__swbuf_r>
 800eecc:	6813      	ldr	r3, [r2, #0]
 800eece:	1c58      	adds	r0, r3, #1
 800eed0:	6010      	str	r0, [r2, #0]
 800eed2:	7019      	strb	r1, [r3, #0]
 800eed4:	4608      	mov	r0, r1
 800eed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <__sfputs_r>:
 800eedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eede:	4606      	mov	r6, r0
 800eee0:	460f      	mov	r7, r1
 800eee2:	4614      	mov	r4, r2
 800eee4:	18d5      	adds	r5, r2, r3
 800eee6:	42ac      	cmp	r4, r5
 800eee8:	d101      	bne.n	800eeee <__sfputs_r+0x12>
 800eeea:	2000      	movs	r0, #0
 800eeec:	e007      	b.n	800eefe <__sfputs_r+0x22>
 800eeee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eef2:	463a      	mov	r2, r7
 800eef4:	4630      	mov	r0, r6
 800eef6:	f7ff ffda 	bl	800eeae <__sfputc_r>
 800eefa:	1c43      	adds	r3, r0, #1
 800eefc:	d1f3      	bne.n	800eee6 <__sfputs_r+0xa>
 800eefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ef00 <_vfiprintf_r>:
 800ef00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef04:	460d      	mov	r5, r1
 800ef06:	b09d      	sub	sp, #116	@ 0x74
 800ef08:	4614      	mov	r4, r2
 800ef0a:	4698      	mov	r8, r3
 800ef0c:	4606      	mov	r6, r0
 800ef0e:	b118      	cbz	r0, 800ef18 <_vfiprintf_r+0x18>
 800ef10:	6a03      	ldr	r3, [r0, #32]
 800ef12:	b90b      	cbnz	r3, 800ef18 <_vfiprintf_r+0x18>
 800ef14:	f7fe f944 	bl	800d1a0 <__sinit>
 800ef18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef1a:	07d9      	lsls	r1, r3, #31
 800ef1c:	d405      	bmi.n	800ef2a <_vfiprintf_r+0x2a>
 800ef1e:	89ab      	ldrh	r3, [r5, #12]
 800ef20:	059a      	lsls	r2, r3, #22
 800ef22:	d402      	bmi.n	800ef2a <_vfiprintf_r+0x2a>
 800ef24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef26:	f7fe fa60 	bl	800d3ea <__retarget_lock_acquire_recursive>
 800ef2a:	89ab      	ldrh	r3, [r5, #12]
 800ef2c:	071b      	lsls	r3, r3, #28
 800ef2e:	d501      	bpl.n	800ef34 <_vfiprintf_r+0x34>
 800ef30:	692b      	ldr	r3, [r5, #16]
 800ef32:	b99b      	cbnz	r3, 800ef5c <_vfiprintf_r+0x5c>
 800ef34:	4629      	mov	r1, r5
 800ef36:	4630      	mov	r0, r6
 800ef38:	f000 f938 	bl	800f1ac <__swsetup_r>
 800ef3c:	b170      	cbz	r0, 800ef5c <_vfiprintf_r+0x5c>
 800ef3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef40:	07dc      	lsls	r4, r3, #31
 800ef42:	d504      	bpl.n	800ef4e <_vfiprintf_r+0x4e>
 800ef44:	f04f 30ff 	mov.w	r0, #4294967295
 800ef48:	b01d      	add	sp, #116	@ 0x74
 800ef4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef4e:	89ab      	ldrh	r3, [r5, #12]
 800ef50:	0598      	lsls	r0, r3, #22
 800ef52:	d4f7      	bmi.n	800ef44 <_vfiprintf_r+0x44>
 800ef54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef56:	f7fe fa49 	bl	800d3ec <__retarget_lock_release_recursive>
 800ef5a:	e7f3      	b.n	800ef44 <_vfiprintf_r+0x44>
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef60:	2320      	movs	r3, #32
 800ef62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef66:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef6a:	2330      	movs	r3, #48	@ 0x30
 800ef6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f11c <_vfiprintf_r+0x21c>
 800ef70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef74:	f04f 0901 	mov.w	r9, #1
 800ef78:	4623      	mov	r3, r4
 800ef7a:	469a      	mov	sl, r3
 800ef7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef80:	b10a      	cbz	r2, 800ef86 <_vfiprintf_r+0x86>
 800ef82:	2a25      	cmp	r2, #37	@ 0x25
 800ef84:	d1f9      	bne.n	800ef7a <_vfiprintf_r+0x7a>
 800ef86:	ebba 0b04 	subs.w	fp, sl, r4
 800ef8a:	d00b      	beq.n	800efa4 <_vfiprintf_r+0xa4>
 800ef8c:	465b      	mov	r3, fp
 800ef8e:	4622      	mov	r2, r4
 800ef90:	4629      	mov	r1, r5
 800ef92:	4630      	mov	r0, r6
 800ef94:	f7ff ffa2 	bl	800eedc <__sfputs_r>
 800ef98:	3001      	adds	r0, #1
 800ef9a:	f000 80a7 	beq.w	800f0ec <_vfiprintf_r+0x1ec>
 800ef9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efa0:	445a      	add	r2, fp
 800efa2:	9209      	str	r2, [sp, #36]	@ 0x24
 800efa4:	f89a 3000 	ldrb.w	r3, [sl]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f000 809f 	beq.w	800f0ec <_vfiprintf_r+0x1ec>
 800efae:	2300      	movs	r3, #0
 800efb0:	f04f 32ff 	mov.w	r2, #4294967295
 800efb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efb8:	f10a 0a01 	add.w	sl, sl, #1
 800efbc:	9304      	str	r3, [sp, #16]
 800efbe:	9307      	str	r3, [sp, #28]
 800efc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800efc4:	931a      	str	r3, [sp, #104]	@ 0x68
 800efc6:	4654      	mov	r4, sl
 800efc8:	2205      	movs	r2, #5
 800efca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efce:	4853      	ldr	r0, [pc, #332]	@ (800f11c <_vfiprintf_r+0x21c>)
 800efd0:	f7f1 f92e 	bl	8000230 <memchr>
 800efd4:	9a04      	ldr	r2, [sp, #16]
 800efd6:	b9d8      	cbnz	r0, 800f010 <_vfiprintf_r+0x110>
 800efd8:	06d1      	lsls	r1, r2, #27
 800efda:	bf44      	itt	mi
 800efdc:	2320      	movmi	r3, #32
 800efde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efe2:	0713      	lsls	r3, r2, #28
 800efe4:	bf44      	itt	mi
 800efe6:	232b      	movmi	r3, #43	@ 0x2b
 800efe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efec:	f89a 3000 	ldrb.w	r3, [sl]
 800eff0:	2b2a      	cmp	r3, #42	@ 0x2a
 800eff2:	d015      	beq.n	800f020 <_vfiprintf_r+0x120>
 800eff4:	9a07      	ldr	r2, [sp, #28]
 800eff6:	4654      	mov	r4, sl
 800eff8:	2000      	movs	r0, #0
 800effa:	f04f 0c0a 	mov.w	ip, #10
 800effe:	4621      	mov	r1, r4
 800f000:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f004:	3b30      	subs	r3, #48	@ 0x30
 800f006:	2b09      	cmp	r3, #9
 800f008:	d94b      	bls.n	800f0a2 <_vfiprintf_r+0x1a2>
 800f00a:	b1b0      	cbz	r0, 800f03a <_vfiprintf_r+0x13a>
 800f00c:	9207      	str	r2, [sp, #28]
 800f00e:	e014      	b.n	800f03a <_vfiprintf_r+0x13a>
 800f010:	eba0 0308 	sub.w	r3, r0, r8
 800f014:	fa09 f303 	lsl.w	r3, r9, r3
 800f018:	4313      	orrs	r3, r2
 800f01a:	9304      	str	r3, [sp, #16]
 800f01c:	46a2      	mov	sl, r4
 800f01e:	e7d2      	b.n	800efc6 <_vfiprintf_r+0xc6>
 800f020:	9b03      	ldr	r3, [sp, #12]
 800f022:	1d19      	adds	r1, r3, #4
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	9103      	str	r1, [sp, #12]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	bfbb      	ittet	lt
 800f02c:	425b      	neglt	r3, r3
 800f02e:	f042 0202 	orrlt.w	r2, r2, #2
 800f032:	9307      	strge	r3, [sp, #28]
 800f034:	9307      	strlt	r3, [sp, #28]
 800f036:	bfb8      	it	lt
 800f038:	9204      	strlt	r2, [sp, #16]
 800f03a:	7823      	ldrb	r3, [r4, #0]
 800f03c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f03e:	d10a      	bne.n	800f056 <_vfiprintf_r+0x156>
 800f040:	7863      	ldrb	r3, [r4, #1]
 800f042:	2b2a      	cmp	r3, #42	@ 0x2a
 800f044:	d132      	bne.n	800f0ac <_vfiprintf_r+0x1ac>
 800f046:	9b03      	ldr	r3, [sp, #12]
 800f048:	1d1a      	adds	r2, r3, #4
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	9203      	str	r2, [sp, #12]
 800f04e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f052:	3402      	adds	r4, #2
 800f054:	9305      	str	r3, [sp, #20]
 800f056:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f12c <_vfiprintf_r+0x22c>
 800f05a:	7821      	ldrb	r1, [r4, #0]
 800f05c:	2203      	movs	r2, #3
 800f05e:	4650      	mov	r0, sl
 800f060:	f7f1 f8e6 	bl	8000230 <memchr>
 800f064:	b138      	cbz	r0, 800f076 <_vfiprintf_r+0x176>
 800f066:	9b04      	ldr	r3, [sp, #16]
 800f068:	eba0 000a 	sub.w	r0, r0, sl
 800f06c:	2240      	movs	r2, #64	@ 0x40
 800f06e:	4082      	lsls	r2, r0
 800f070:	4313      	orrs	r3, r2
 800f072:	3401      	adds	r4, #1
 800f074:	9304      	str	r3, [sp, #16]
 800f076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f07a:	4829      	ldr	r0, [pc, #164]	@ (800f120 <_vfiprintf_r+0x220>)
 800f07c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f080:	2206      	movs	r2, #6
 800f082:	f7f1 f8d5 	bl	8000230 <memchr>
 800f086:	2800      	cmp	r0, #0
 800f088:	d03f      	beq.n	800f10a <_vfiprintf_r+0x20a>
 800f08a:	4b26      	ldr	r3, [pc, #152]	@ (800f124 <_vfiprintf_r+0x224>)
 800f08c:	bb1b      	cbnz	r3, 800f0d6 <_vfiprintf_r+0x1d6>
 800f08e:	9b03      	ldr	r3, [sp, #12]
 800f090:	3307      	adds	r3, #7
 800f092:	f023 0307 	bic.w	r3, r3, #7
 800f096:	3308      	adds	r3, #8
 800f098:	9303      	str	r3, [sp, #12]
 800f09a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f09c:	443b      	add	r3, r7
 800f09e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0a0:	e76a      	b.n	800ef78 <_vfiprintf_r+0x78>
 800f0a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0a6:	460c      	mov	r4, r1
 800f0a8:	2001      	movs	r0, #1
 800f0aa:	e7a8      	b.n	800effe <_vfiprintf_r+0xfe>
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	3401      	adds	r4, #1
 800f0b0:	9305      	str	r3, [sp, #20]
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	f04f 0c0a 	mov.w	ip, #10
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0be:	3a30      	subs	r2, #48	@ 0x30
 800f0c0:	2a09      	cmp	r2, #9
 800f0c2:	d903      	bls.n	800f0cc <_vfiprintf_r+0x1cc>
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d0c6      	beq.n	800f056 <_vfiprintf_r+0x156>
 800f0c8:	9105      	str	r1, [sp, #20]
 800f0ca:	e7c4      	b.n	800f056 <_vfiprintf_r+0x156>
 800f0cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0d0:	4604      	mov	r4, r0
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	e7f0      	b.n	800f0b8 <_vfiprintf_r+0x1b8>
 800f0d6:	ab03      	add	r3, sp, #12
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	462a      	mov	r2, r5
 800f0dc:	4b12      	ldr	r3, [pc, #72]	@ (800f128 <_vfiprintf_r+0x228>)
 800f0de:	a904      	add	r1, sp, #16
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f3af 8000 	nop.w
 800f0e6:	4607      	mov	r7, r0
 800f0e8:	1c78      	adds	r0, r7, #1
 800f0ea:	d1d6      	bne.n	800f09a <_vfiprintf_r+0x19a>
 800f0ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0ee:	07d9      	lsls	r1, r3, #31
 800f0f0:	d405      	bmi.n	800f0fe <_vfiprintf_r+0x1fe>
 800f0f2:	89ab      	ldrh	r3, [r5, #12]
 800f0f4:	059a      	lsls	r2, r3, #22
 800f0f6:	d402      	bmi.n	800f0fe <_vfiprintf_r+0x1fe>
 800f0f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0fa:	f7fe f977 	bl	800d3ec <__retarget_lock_release_recursive>
 800f0fe:	89ab      	ldrh	r3, [r5, #12]
 800f100:	065b      	lsls	r3, r3, #25
 800f102:	f53f af1f 	bmi.w	800ef44 <_vfiprintf_r+0x44>
 800f106:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f108:	e71e      	b.n	800ef48 <_vfiprintf_r+0x48>
 800f10a:	ab03      	add	r3, sp, #12
 800f10c:	9300      	str	r3, [sp, #0]
 800f10e:	462a      	mov	r2, r5
 800f110:	4b05      	ldr	r3, [pc, #20]	@ (800f128 <_vfiprintf_r+0x228>)
 800f112:	a904      	add	r1, sp, #16
 800f114:	4630      	mov	r0, r6
 800f116:	f7ff fc4b 	bl	800e9b0 <_printf_i>
 800f11a:	e7e4      	b.n	800f0e6 <_vfiprintf_r+0x1e6>
 800f11c:	0800fb21 	.word	0x0800fb21
 800f120:	0800fb2b 	.word	0x0800fb2b
 800f124:	00000000 	.word	0x00000000
 800f128:	0800eedd 	.word	0x0800eedd
 800f12c:	0800fb27 	.word	0x0800fb27

0800f130 <__swbuf_r>:
 800f130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f132:	460e      	mov	r6, r1
 800f134:	4614      	mov	r4, r2
 800f136:	4605      	mov	r5, r0
 800f138:	b118      	cbz	r0, 800f142 <__swbuf_r+0x12>
 800f13a:	6a03      	ldr	r3, [r0, #32]
 800f13c:	b90b      	cbnz	r3, 800f142 <__swbuf_r+0x12>
 800f13e:	f7fe f82f 	bl	800d1a0 <__sinit>
 800f142:	69a3      	ldr	r3, [r4, #24]
 800f144:	60a3      	str	r3, [r4, #8]
 800f146:	89a3      	ldrh	r3, [r4, #12]
 800f148:	071a      	lsls	r2, r3, #28
 800f14a:	d501      	bpl.n	800f150 <__swbuf_r+0x20>
 800f14c:	6923      	ldr	r3, [r4, #16]
 800f14e:	b943      	cbnz	r3, 800f162 <__swbuf_r+0x32>
 800f150:	4621      	mov	r1, r4
 800f152:	4628      	mov	r0, r5
 800f154:	f000 f82a 	bl	800f1ac <__swsetup_r>
 800f158:	b118      	cbz	r0, 800f162 <__swbuf_r+0x32>
 800f15a:	f04f 37ff 	mov.w	r7, #4294967295
 800f15e:	4638      	mov	r0, r7
 800f160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f162:	6823      	ldr	r3, [r4, #0]
 800f164:	6922      	ldr	r2, [r4, #16]
 800f166:	1a98      	subs	r0, r3, r2
 800f168:	6963      	ldr	r3, [r4, #20]
 800f16a:	b2f6      	uxtb	r6, r6
 800f16c:	4283      	cmp	r3, r0
 800f16e:	4637      	mov	r7, r6
 800f170:	dc05      	bgt.n	800f17e <__swbuf_r+0x4e>
 800f172:	4621      	mov	r1, r4
 800f174:	4628      	mov	r0, r5
 800f176:	f7ff fdbf 	bl	800ecf8 <_fflush_r>
 800f17a:	2800      	cmp	r0, #0
 800f17c:	d1ed      	bne.n	800f15a <__swbuf_r+0x2a>
 800f17e:	68a3      	ldr	r3, [r4, #8]
 800f180:	3b01      	subs	r3, #1
 800f182:	60a3      	str	r3, [r4, #8]
 800f184:	6823      	ldr	r3, [r4, #0]
 800f186:	1c5a      	adds	r2, r3, #1
 800f188:	6022      	str	r2, [r4, #0]
 800f18a:	701e      	strb	r6, [r3, #0]
 800f18c:	6962      	ldr	r2, [r4, #20]
 800f18e:	1c43      	adds	r3, r0, #1
 800f190:	429a      	cmp	r2, r3
 800f192:	d004      	beq.n	800f19e <__swbuf_r+0x6e>
 800f194:	89a3      	ldrh	r3, [r4, #12]
 800f196:	07db      	lsls	r3, r3, #31
 800f198:	d5e1      	bpl.n	800f15e <__swbuf_r+0x2e>
 800f19a:	2e0a      	cmp	r6, #10
 800f19c:	d1df      	bne.n	800f15e <__swbuf_r+0x2e>
 800f19e:	4621      	mov	r1, r4
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	f7ff fda9 	bl	800ecf8 <_fflush_r>
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	d0d9      	beq.n	800f15e <__swbuf_r+0x2e>
 800f1aa:	e7d6      	b.n	800f15a <__swbuf_r+0x2a>

0800f1ac <__swsetup_r>:
 800f1ac:	b538      	push	{r3, r4, r5, lr}
 800f1ae:	4b29      	ldr	r3, [pc, #164]	@ (800f254 <__swsetup_r+0xa8>)
 800f1b0:	4605      	mov	r5, r0
 800f1b2:	6818      	ldr	r0, [r3, #0]
 800f1b4:	460c      	mov	r4, r1
 800f1b6:	b118      	cbz	r0, 800f1c0 <__swsetup_r+0x14>
 800f1b8:	6a03      	ldr	r3, [r0, #32]
 800f1ba:	b90b      	cbnz	r3, 800f1c0 <__swsetup_r+0x14>
 800f1bc:	f7fd fff0 	bl	800d1a0 <__sinit>
 800f1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1c4:	0719      	lsls	r1, r3, #28
 800f1c6:	d422      	bmi.n	800f20e <__swsetup_r+0x62>
 800f1c8:	06da      	lsls	r2, r3, #27
 800f1ca:	d407      	bmi.n	800f1dc <__swsetup_r+0x30>
 800f1cc:	2209      	movs	r2, #9
 800f1ce:	602a      	str	r2, [r5, #0]
 800f1d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1d4:	81a3      	strh	r3, [r4, #12]
 800f1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800f1da:	e033      	b.n	800f244 <__swsetup_r+0x98>
 800f1dc:	0758      	lsls	r0, r3, #29
 800f1de:	d512      	bpl.n	800f206 <__swsetup_r+0x5a>
 800f1e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1e2:	b141      	cbz	r1, 800f1f6 <__swsetup_r+0x4a>
 800f1e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1e8:	4299      	cmp	r1, r3
 800f1ea:	d002      	beq.n	800f1f2 <__swsetup_r+0x46>
 800f1ec:	4628      	mov	r0, r5
 800f1ee:	f7fe f917 	bl	800d420 <_free_r>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1f6:	89a3      	ldrh	r3, [r4, #12]
 800f1f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f1fc:	81a3      	strh	r3, [r4, #12]
 800f1fe:	2300      	movs	r3, #0
 800f200:	6063      	str	r3, [r4, #4]
 800f202:	6923      	ldr	r3, [r4, #16]
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	89a3      	ldrh	r3, [r4, #12]
 800f208:	f043 0308 	orr.w	r3, r3, #8
 800f20c:	81a3      	strh	r3, [r4, #12]
 800f20e:	6923      	ldr	r3, [r4, #16]
 800f210:	b94b      	cbnz	r3, 800f226 <__swsetup_r+0x7a>
 800f212:	89a3      	ldrh	r3, [r4, #12]
 800f214:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f21c:	d003      	beq.n	800f226 <__swsetup_r+0x7a>
 800f21e:	4621      	mov	r1, r4
 800f220:	4628      	mov	r0, r5
 800f222:	f000 f883 	bl	800f32c <__smakebuf_r>
 800f226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f22a:	f013 0201 	ands.w	r2, r3, #1
 800f22e:	d00a      	beq.n	800f246 <__swsetup_r+0x9a>
 800f230:	2200      	movs	r2, #0
 800f232:	60a2      	str	r2, [r4, #8]
 800f234:	6962      	ldr	r2, [r4, #20]
 800f236:	4252      	negs	r2, r2
 800f238:	61a2      	str	r2, [r4, #24]
 800f23a:	6922      	ldr	r2, [r4, #16]
 800f23c:	b942      	cbnz	r2, 800f250 <__swsetup_r+0xa4>
 800f23e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f242:	d1c5      	bne.n	800f1d0 <__swsetup_r+0x24>
 800f244:	bd38      	pop	{r3, r4, r5, pc}
 800f246:	0799      	lsls	r1, r3, #30
 800f248:	bf58      	it	pl
 800f24a:	6962      	ldrpl	r2, [r4, #20]
 800f24c:	60a2      	str	r2, [r4, #8]
 800f24e:	e7f4      	b.n	800f23a <__swsetup_r+0x8e>
 800f250:	2000      	movs	r0, #0
 800f252:	e7f7      	b.n	800f244 <__swsetup_r+0x98>
 800f254:	200001b8 	.word	0x200001b8

0800f258 <_raise_r>:
 800f258:	291f      	cmp	r1, #31
 800f25a:	b538      	push	{r3, r4, r5, lr}
 800f25c:	4605      	mov	r5, r0
 800f25e:	460c      	mov	r4, r1
 800f260:	d904      	bls.n	800f26c <_raise_r+0x14>
 800f262:	2316      	movs	r3, #22
 800f264:	6003      	str	r3, [r0, #0]
 800f266:	f04f 30ff 	mov.w	r0, #4294967295
 800f26a:	bd38      	pop	{r3, r4, r5, pc}
 800f26c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f26e:	b112      	cbz	r2, 800f276 <_raise_r+0x1e>
 800f270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f274:	b94b      	cbnz	r3, 800f28a <_raise_r+0x32>
 800f276:	4628      	mov	r0, r5
 800f278:	f000 f830 	bl	800f2dc <_getpid_r>
 800f27c:	4622      	mov	r2, r4
 800f27e:	4601      	mov	r1, r0
 800f280:	4628      	mov	r0, r5
 800f282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f286:	f000 b817 	b.w	800f2b8 <_kill_r>
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	d00a      	beq.n	800f2a4 <_raise_r+0x4c>
 800f28e:	1c59      	adds	r1, r3, #1
 800f290:	d103      	bne.n	800f29a <_raise_r+0x42>
 800f292:	2316      	movs	r3, #22
 800f294:	6003      	str	r3, [r0, #0]
 800f296:	2001      	movs	r0, #1
 800f298:	e7e7      	b.n	800f26a <_raise_r+0x12>
 800f29a:	2100      	movs	r1, #0
 800f29c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	4798      	blx	r3
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	e7e0      	b.n	800f26a <_raise_r+0x12>

0800f2a8 <raise>:
 800f2a8:	4b02      	ldr	r3, [pc, #8]	@ (800f2b4 <raise+0xc>)
 800f2aa:	4601      	mov	r1, r0
 800f2ac:	6818      	ldr	r0, [r3, #0]
 800f2ae:	f7ff bfd3 	b.w	800f258 <_raise_r>
 800f2b2:	bf00      	nop
 800f2b4:	200001b8 	.word	0x200001b8

0800f2b8 <_kill_r>:
 800f2b8:	b538      	push	{r3, r4, r5, lr}
 800f2ba:	4d07      	ldr	r5, [pc, #28]	@ (800f2d8 <_kill_r+0x20>)
 800f2bc:	2300      	movs	r3, #0
 800f2be:	4604      	mov	r4, r0
 800f2c0:	4608      	mov	r0, r1
 800f2c2:	4611      	mov	r1, r2
 800f2c4:	602b      	str	r3, [r5, #0]
 800f2c6:	f7f3 ffa5 	bl	8003214 <_kill>
 800f2ca:	1c43      	adds	r3, r0, #1
 800f2cc:	d102      	bne.n	800f2d4 <_kill_r+0x1c>
 800f2ce:	682b      	ldr	r3, [r5, #0]
 800f2d0:	b103      	cbz	r3, 800f2d4 <_kill_r+0x1c>
 800f2d2:	6023      	str	r3, [r4, #0]
 800f2d4:	bd38      	pop	{r3, r4, r5, pc}
 800f2d6:	bf00      	nop
 800f2d8:	20000dac 	.word	0x20000dac

0800f2dc <_getpid_r>:
 800f2dc:	f7f3 bf92 	b.w	8003204 <_getpid>

0800f2e0 <__swhatbuf_r>:
 800f2e0:	b570      	push	{r4, r5, r6, lr}
 800f2e2:	460c      	mov	r4, r1
 800f2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2e8:	2900      	cmp	r1, #0
 800f2ea:	b096      	sub	sp, #88	@ 0x58
 800f2ec:	4615      	mov	r5, r2
 800f2ee:	461e      	mov	r6, r3
 800f2f0:	da0d      	bge.n	800f30e <__swhatbuf_r+0x2e>
 800f2f2:	89a3      	ldrh	r3, [r4, #12]
 800f2f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f2f8:	f04f 0100 	mov.w	r1, #0
 800f2fc:	bf14      	ite	ne
 800f2fe:	2340      	movne	r3, #64	@ 0x40
 800f300:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f304:	2000      	movs	r0, #0
 800f306:	6031      	str	r1, [r6, #0]
 800f308:	602b      	str	r3, [r5, #0]
 800f30a:	b016      	add	sp, #88	@ 0x58
 800f30c:	bd70      	pop	{r4, r5, r6, pc}
 800f30e:	466a      	mov	r2, sp
 800f310:	f000 f848 	bl	800f3a4 <_fstat_r>
 800f314:	2800      	cmp	r0, #0
 800f316:	dbec      	blt.n	800f2f2 <__swhatbuf_r+0x12>
 800f318:	9901      	ldr	r1, [sp, #4]
 800f31a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f31e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f322:	4259      	negs	r1, r3
 800f324:	4159      	adcs	r1, r3
 800f326:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f32a:	e7eb      	b.n	800f304 <__swhatbuf_r+0x24>

0800f32c <__smakebuf_r>:
 800f32c:	898b      	ldrh	r3, [r1, #12]
 800f32e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f330:	079d      	lsls	r5, r3, #30
 800f332:	4606      	mov	r6, r0
 800f334:	460c      	mov	r4, r1
 800f336:	d507      	bpl.n	800f348 <__smakebuf_r+0x1c>
 800f338:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f33c:	6023      	str	r3, [r4, #0]
 800f33e:	6123      	str	r3, [r4, #16]
 800f340:	2301      	movs	r3, #1
 800f342:	6163      	str	r3, [r4, #20]
 800f344:	b003      	add	sp, #12
 800f346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f348:	ab01      	add	r3, sp, #4
 800f34a:	466a      	mov	r2, sp
 800f34c:	f7ff ffc8 	bl	800f2e0 <__swhatbuf_r>
 800f350:	9f00      	ldr	r7, [sp, #0]
 800f352:	4605      	mov	r5, r0
 800f354:	4639      	mov	r1, r7
 800f356:	4630      	mov	r0, r6
 800f358:	f7fe fc08 	bl	800db6c <_malloc_r>
 800f35c:	b948      	cbnz	r0, 800f372 <__smakebuf_r+0x46>
 800f35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f362:	059a      	lsls	r2, r3, #22
 800f364:	d4ee      	bmi.n	800f344 <__smakebuf_r+0x18>
 800f366:	f023 0303 	bic.w	r3, r3, #3
 800f36a:	f043 0302 	orr.w	r3, r3, #2
 800f36e:	81a3      	strh	r3, [r4, #12]
 800f370:	e7e2      	b.n	800f338 <__smakebuf_r+0xc>
 800f372:	89a3      	ldrh	r3, [r4, #12]
 800f374:	6020      	str	r0, [r4, #0]
 800f376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f37a:	81a3      	strh	r3, [r4, #12]
 800f37c:	9b01      	ldr	r3, [sp, #4]
 800f37e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f382:	b15b      	cbz	r3, 800f39c <__smakebuf_r+0x70>
 800f384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f388:	4630      	mov	r0, r6
 800f38a:	f000 f81d 	bl	800f3c8 <_isatty_r>
 800f38e:	b128      	cbz	r0, 800f39c <__smakebuf_r+0x70>
 800f390:	89a3      	ldrh	r3, [r4, #12]
 800f392:	f023 0303 	bic.w	r3, r3, #3
 800f396:	f043 0301 	orr.w	r3, r3, #1
 800f39a:	81a3      	strh	r3, [r4, #12]
 800f39c:	89a3      	ldrh	r3, [r4, #12]
 800f39e:	431d      	orrs	r5, r3
 800f3a0:	81a5      	strh	r5, [r4, #12]
 800f3a2:	e7cf      	b.n	800f344 <__smakebuf_r+0x18>

0800f3a4 <_fstat_r>:
 800f3a4:	b538      	push	{r3, r4, r5, lr}
 800f3a6:	4d07      	ldr	r5, [pc, #28]	@ (800f3c4 <_fstat_r+0x20>)
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	4608      	mov	r0, r1
 800f3ae:	4611      	mov	r1, r2
 800f3b0:	602b      	str	r3, [r5, #0]
 800f3b2:	f7f3 ff8f 	bl	80032d4 <_fstat>
 800f3b6:	1c43      	adds	r3, r0, #1
 800f3b8:	d102      	bne.n	800f3c0 <_fstat_r+0x1c>
 800f3ba:	682b      	ldr	r3, [r5, #0]
 800f3bc:	b103      	cbz	r3, 800f3c0 <_fstat_r+0x1c>
 800f3be:	6023      	str	r3, [r4, #0]
 800f3c0:	bd38      	pop	{r3, r4, r5, pc}
 800f3c2:	bf00      	nop
 800f3c4:	20000dac 	.word	0x20000dac

0800f3c8 <_isatty_r>:
 800f3c8:	b538      	push	{r3, r4, r5, lr}
 800f3ca:	4d06      	ldr	r5, [pc, #24]	@ (800f3e4 <_isatty_r+0x1c>)
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	4608      	mov	r0, r1
 800f3d2:	602b      	str	r3, [r5, #0]
 800f3d4:	f7f3 ff8e 	bl	80032f4 <_isatty>
 800f3d8:	1c43      	adds	r3, r0, #1
 800f3da:	d102      	bne.n	800f3e2 <_isatty_r+0x1a>
 800f3dc:	682b      	ldr	r3, [r5, #0]
 800f3de:	b103      	cbz	r3, 800f3e2 <_isatty_r+0x1a>
 800f3e0:	6023      	str	r3, [r4, #0]
 800f3e2:	bd38      	pop	{r3, r4, r5, pc}
 800f3e4:	20000dac 	.word	0x20000dac

0800f3e8 <fmod>:
 800f3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ea:	ed2d 8b02 	vpush	{d8}
 800f3ee:	ec57 6b10 	vmov	r6, r7, d0
 800f3f2:	ec55 4b11 	vmov	r4, r5, d1
 800f3f6:	f000 f8a3 	bl	800f540 <__ieee754_fmod>
 800f3fa:	4622      	mov	r2, r4
 800f3fc:	462b      	mov	r3, r5
 800f3fe:	4630      	mov	r0, r6
 800f400:	4639      	mov	r1, r7
 800f402:	eeb0 8a40 	vmov.f32	s16, s0
 800f406:	eef0 8a60 	vmov.f32	s17, s1
 800f40a:	f7f1 fbb7 	bl	8000b7c <__aeabi_dcmpun>
 800f40e:	b990      	cbnz	r0, 800f436 <fmod+0x4e>
 800f410:	2200      	movs	r2, #0
 800f412:	2300      	movs	r3, #0
 800f414:	4620      	mov	r0, r4
 800f416:	4629      	mov	r1, r5
 800f418:	f7f1 fb7e 	bl	8000b18 <__aeabi_dcmpeq>
 800f41c:	b158      	cbz	r0, 800f436 <fmod+0x4e>
 800f41e:	f7fd ffb9 	bl	800d394 <__errno>
 800f422:	2321      	movs	r3, #33	@ 0x21
 800f424:	6003      	str	r3, [r0, #0]
 800f426:	2200      	movs	r2, #0
 800f428:	2300      	movs	r3, #0
 800f42a:	4610      	mov	r0, r2
 800f42c:	4619      	mov	r1, r3
 800f42e:	f7f1 fa35 	bl	800089c <__aeabi_ddiv>
 800f432:	ec41 0b18 	vmov	d8, r0, r1
 800f436:	eeb0 0a48 	vmov.f32	s0, s16
 800f43a:	eef0 0a68 	vmov.f32	s1, s17
 800f43e:	ecbd 8b02 	vpop	{d8}
 800f442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f444:	0000      	movs	r0, r0
	...

0800f448 <floor>:
 800f448:	ec51 0b10 	vmov	r0, r1, d0
 800f44c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f454:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f458:	2e13      	cmp	r6, #19
 800f45a:	460c      	mov	r4, r1
 800f45c:	4605      	mov	r5, r0
 800f45e:	4680      	mov	r8, r0
 800f460:	dc34      	bgt.n	800f4cc <floor+0x84>
 800f462:	2e00      	cmp	r6, #0
 800f464:	da17      	bge.n	800f496 <floor+0x4e>
 800f466:	a332      	add	r3, pc, #200	@ (adr r3, 800f530 <floor+0xe8>)
 800f468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46c:	f7f0 ff36 	bl	80002dc <__adddf3>
 800f470:	2200      	movs	r2, #0
 800f472:	2300      	movs	r3, #0
 800f474:	f7f1 fb78 	bl	8000b68 <__aeabi_dcmpgt>
 800f478:	b150      	cbz	r0, 800f490 <floor+0x48>
 800f47a:	2c00      	cmp	r4, #0
 800f47c:	da55      	bge.n	800f52a <floor+0xe2>
 800f47e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f482:	432c      	orrs	r4, r5
 800f484:	2500      	movs	r5, #0
 800f486:	42ac      	cmp	r4, r5
 800f488:	4c2b      	ldr	r4, [pc, #172]	@ (800f538 <floor+0xf0>)
 800f48a:	bf08      	it	eq
 800f48c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f490:	4621      	mov	r1, r4
 800f492:	4628      	mov	r0, r5
 800f494:	e023      	b.n	800f4de <floor+0x96>
 800f496:	4f29      	ldr	r7, [pc, #164]	@ (800f53c <floor+0xf4>)
 800f498:	4137      	asrs	r7, r6
 800f49a:	ea01 0307 	and.w	r3, r1, r7
 800f49e:	4303      	orrs	r3, r0
 800f4a0:	d01d      	beq.n	800f4de <floor+0x96>
 800f4a2:	a323      	add	r3, pc, #140	@ (adr r3, 800f530 <floor+0xe8>)
 800f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a8:	f7f0 ff18 	bl	80002dc <__adddf3>
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	f7f1 fb5a 	bl	8000b68 <__aeabi_dcmpgt>
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	d0eb      	beq.n	800f490 <floor+0x48>
 800f4b8:	2c00      	cmp	r4, #0
 800f4ba:	bfbe      	ittt	lt
 800f4bc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f4c0:	4133      	asrlt	r3, r6
 800f4c2:	18e4      	addlt	r4, r4, r3
 800f4c4:	ea24 0407 	bic.w	r4, r4, r7
 800f4c8:	2500      	movs	r5, #0
 800f4ca:	e7e1      	b.n	800f490 <floor+0x48>
 800f4cc:	2e33      	cmp	r6, #51	@ 0x33
 800f4ce:	dd0a      	ble.n	800f4e6 <floor+0x9e>
 800f4d0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f4d4:	d103      	bne.n	800f4de <floor+0x96>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	460b      	mov	r3, r1
 800f4da:	f7f0 feff 	bl	80002dc <__adddf3>
 800f4de:	ec41 0b10 	vmov	d0, r0, r1
 800f4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f4ea:	f04f 37ff 	mov.w	r7, #4294967295
 800f4ee:	40df      	lsrs	r7, r3
 800f4f0:	4207      	tst	r7, r0
 800f4f2:	d0f4      	beq.n	800f4de <floor+0x96>
 800f4f4:	a30e      	add	r3, pc, #56	@ (adr r3, 800f530 <floor+0xe8>)
 800f4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4fa:	f7f0 feef 	bl	80002dc <__adddf3>
 800f4fe:	2200      	movs	r2, #0
 800f500:	2300      	movs	r3, #0
 800f502:	f7f1 fb31 	bl	8000b68 <__aeabi_dcmpgt>
 800f506:	2800      	cmp	r0, #0
 800f508:	d0c2      	beq.n	800f490 <floor+0x48>
 800f50a:	2c00      	cmp	r4, #0
 800f50c:	da0a      	bge.n	800f524 <floor+0xdc>
 800f50e:	2e14      	cmp	r6, #20
 800f510:	d101      	bne.n	800f516 <floor+0xce>
 800f512:	3401      	adds	r4, #1
 800f514:	e006      	b.n	800f524 <floor+0xdc>
 800f516:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f51a:	2301      	movs	r3, #1
 800f51c:	40b3      	lsls	r3, r6
 800f51e:	441d      	add	r5, r3
 800f520:	4545      	cmp	r5, r8
 800f522:	d3f6      	bcc.n	800f512 <floor+0xca>
 800f524:	ea25 0507 	bic.w	r5, r5, r7
 800f528:	e7b2      	b.n	800f490 <floor+0x48>
 800f52a:	2500      	movs	r5, #0
 800f52c:	462c      	mov	r4, r5
 800f52e:	e7af      	b.n	800f490 <floor+0x48>
 800f530:	8800759c 	.word	0x8800759c
 800f534:	7e37e43c 	.word	0x7e37e43c
 800f538:	bff00000 	.word	0xbff00000
 800f53c:	000fffff 	.word	0x000fffff

0800f540 <__ieee754_fmod>:
 800f540:	ec53 2b11 	vmov	r2, r3, d1
 800f544:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800f548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f54c:	ea52 040c 	orrs.w	r4, r2, ip
 800f550:	ec51 0b10 	vmov	r0, r1, d0
 800f554:	461e      	mov	r6, r3
 800f556:	4617      	mov	r7, r2
 800f558:	4696      	mov	lr, r2
 800f55a:	d00c      	beq.n	800f576 <__ieee754_fmod+0x36>
 800f55c:	4c77      	ldr	r4, [pc, #476]	@ (800f73c <__ieee754_fmod+0x1fc>)
 800f55e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800f562:	45a0      	cmp	r8, r4
 800f564:	4689      	mov	r9, r1
 800f566:	d806      	bhi.n	800f576 <__ieee754_fmod+0x36>
 800f568:	4254      	negs	r4, r2
 800f56a:	4d75      	ldr	r5, [pc, #468]	@ (800f740 <__ieee754_fmod+0x200>)
 800f56c:	4314      	orrs	r4, r2
 800f56e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800f572:	42ac      	cmp	r4, r5
 800f574:	d909      	bls.n	800f58a <__ieee754_fmod+0x4a>
 800f576:	f7f1 f867 	bl	8000648 <__aeabi_dmul>
 800f57a:	4602      	mov	r2, r0
 800f57c:	460b      	mov	r3, r1
 800f57e:	f7f1 f98d 	bl	800089c <__aeabi_ddiv>
 800f582:	ec41 0b10 	vmov	d0, r0, r1
 800f586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f58a:	45e0      	cmp	r8, ip
 800f58c:	4682      	mov	sl, r0
 800f58e:	4604      	mov	r4, r0
 800f590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800f594:	dc09      	bgt.n	800f5aa <__ieee754_fmod+0x6a>
 800f596:	dbf4      	blt.n	800f582 <__ieee754_fmod+0x42>
 800f598:	4282      	cmp	r2, r0
 800f59a:	d8f2      	bhi.n	800f582 <__ieee754_fmod+0x42>
 800f59c:	d105      	bne.n	800f5aa <__ieee754_fmod+0x6a>
 800f59e:	4b69      	ldr	r3, [pc, #420]	@ (800f744 <__ieee754_fmod+0x204>)
 800f5a0:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800f5a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5a8:	e7eb      	b.n	800f582 <__ieee754_fmod+0x42>
 800f5aa:	4a65      	ldr	r2, [pc, #404]	@ (800f740 <__ieee754_fmod+0x200>)
 800f5ac:	ea19 0f02 	tst.w	r9, r2
 800f5b0:	d148      	bne.n	800f644 <__ieee754_fmod+0x104>
 800f5b2:	f1b8 0f00 	cmp.w	r8, #0
 800f5b6:	d13d      	bne.n	800f634 <__ieee754_fmod+0xf4>
 800f5b8:	4963      	ldr	r1, [pc, #396]	@ (800f748 <__ieee754_fmod+0x208>)
 800f5ba:	4653      	mov	r3, sl
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	dc36      	bgt.n	800f62e <__ieee754_fmod+0xee>
 800f5c0:	4216      	tst	r6, r2
 800f5c2:	d14f      	bne.n	800f664 <__ieee754_fmod+0x124>
 800f5c4:	f1bc 0f00 	cmp.w	ip, #0
 800f5c8:	d144      	bne.n	800f654 <__ieee754_fmod+0x114>
 800f5ca:	4a5f      	ldr	r2, [pc, #380]	@ (800f748 <__ieee754_fmod+0x208>)
 800f5cc:	463b      	mov	r3, r7
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	dc3d      	bgt.n	800f64e <__ieee754_fmod+0x10e>
 800f5d2:	485e      	ldr	r0, [pc, #376]	@ (800f74c <__ieee754_fmod+0x20c>)
 800f5d4:	4281      	cmp	r1, r0
 800f5d6:	db4a      	blt.n	800f66e <__ieee754_fmod+0x12e>
 800f5d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f5dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f5e0:	485a      	ldr	r0, [pc, #360]	@ (800f74c <__ieee754_fmod+0x20c>)
 800f5e2:	4282      	cmp	r2, r0
 800f5e4:	db57      	blt.n	800f696 <__ieee754_fmod+0x156>
 800f5e6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800f5ea:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800f5ee:	1a89      	subs	r1, r1, r2
 800f5f0:	1b98      	subs	r0, r3, r6
 800f5f2:	eba4 070e 	sub.w	r7, r4, lr
 800f5f6:	2900      	cmp	r1, #0
 800f5f8:	d162      	bne.n	800f6c0 <__ieee754_fmod+0x180>
 800f5fa:	4574      	cmp	r4, lr
 800f5fc:	bf38      	it	cc
 800f5fe:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800f602:	2800      	cmp	r0, #0
 800f604:	bfa4      	itt	ge
 800f606:	463c      	movge	r4, r7
 800f608:	4603      	movge	r3, r0
 800f60a:	ea53 0104 	orrs.w	r1, r3, r4
 800f60e:	d0c6      	beq.n	800f59e <__ieee754_fmod+0x5e>
 800f610:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f614:	db69      	blt.n	800f6ea <__ieee754_fmod+0x1aa>
 800f616:	494d      	ldr	r1, [pc, #308]	@ (800f74c <__ieee754_fmod+0x20c>)
 800f618:	428a      	cmp	r2, r1
 800f61a:	db6c      	blt.n	800f6f6 <__ieee754_fmod+0x1b6>
 800f61c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f620:	432b      	orrs	r3, r5
 800f622:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800f626:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f62a:	4620      	mov	r0, r4
 800f62c:	e7a9      	b.n	800f582 <__ieee754_fmod+0x42>
 800f62e:	3901      	subs	r1, #1
 800f630:	005b      	lsls	r3, r3, #1
 800f632:	e7c3      	b.n	800f5bc <__ieee754_fmod+0x7c>
 800f634:	4945      	ldr	r1, [pc, #276]	@ (800f74c <__ieee754_fmod+0x20c>)
 800f636:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	ddc0      	ble.n	800f5c0 <__ieee754_fmod+0x80>
 800f63e:	3901      	subs	r1, #1
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	e7fa      	b.n	800f63a <__ieee754_fmod+0xfa>
 800f644:	ea4f 5128 	mov.w	r1, r8, asr #20
 800f648:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f64c:	e7b8      	b.n	800f5c0 <__ieee754_fmod+0x80>
 800f64e:	3a01      	subs	r2, #1
 800f650:	005b      	lsls	r3, r3, #1
 800f652:	e7bc      	b.n	800f5ce <__ieee754_fmod+0x8e>
 800f654:	4a3d      	ldr	r2, [pc, #244]	@ (800f74c <__ieee754_fmod+0x20c>)
 800f656:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	ddb9      	ble.n	800f5d2 <__ieee754_fmod+0x92>
 800f65e:	3a01      	subs	r2, #1
 800f660:	005b      	lsls	r3, r3, #1
 800f662:	e7fa      	b.n	800f65a <__ieee754_fmod+0x11a>
 800f664:	ea4f 522c 	mov.w	r2, ip, asr #20
 800f668:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f66c:	e7b1      	b.n	800f5d2 <__ieee754_fmod+0x92>
 800f66e:	1a40      	subs	r0, r0, r1
 800f670:	281f      	cmp	r0, #31
 800f672:	dc0a      	bgt.n	800f68a <__ieee754_fmod+0x14a>
 800f674:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800f678:	fa08 f800 	lsl.w	r8, r8, r0
 800f67c:	fa2a f303 	lsr.w	r3, sl, r3
 800f680:	ea43 0308 	orr.w	r3, r3, r8
 800f684:	fa0a f400 	lsl.w	r4, sl, r0
 800f688:	e7aa      	b.n	800f5e0 <__ieee754_fmod+0xa0>
 800f68a:	4b31      	ldr	r3, [pc, #196]	@ (800f750 <__ieee754_fmod+0x210>)
 800f68c:	1a5b      	subs	r3, r3, r1
 800f68e:	fa0a f303 	lsl.w	r3, sl, r3
 800f692:	2400      	movs	r4, #0
 800f694:	e7a4      	b.n	800f5e0 <__ieee754_fmod+0xa0>
 800f696:	1a80      	subs	r0, r0, r2
 800f698:	281f      	cmp	r0, #31
 800f69a:	dc0a      	bgt.n	800f6b2 <__ieee754_fmod+0x172>
 800f69c:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800f6a0:	fa0c fc00 	lsl.w	ip, ip, r0
 800f6a4:	fa27 f606 	lsr.w	r6, r7, r6
 800f6a8:	ea46 060c 	orr.w	r6, r6, ip
 800f6ac:	fa07 fe00 	lsl.w	lr, r7, r0
 800f6b0:	e79d      	b.n	800f5ee <__ieee754_fmod+0xae>
 800f6b2:	4e27      	ldr	r6, [pc, #156]	@ (800f750 <__ieee754_fmod+0x210>)
 800f6b4:	1ab6      	subs	r6, r6, r2
 800f6b6:	fa07 f606 	lsl.w	r6, r7, r6
 800f6ba:	f04f 0e00 	mov.w	lr, #0
 800f6be:	e796      	b.n	800f5ee <__ieee754_fmod+0xae>
 800f6c0:	4574      	cmp	r4, lr
 800f6c2:	bf38      	it	cc
 800f6c4:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	da05      	bge.n	800f6d8 <__ieee754_fmod+0x198>
 800f6cc:	0fe0      	lsrs	r0, r4, #31
 800f6ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f6d2:	0064      	lsls	r4, r4, #1
 800f6d4:	3901      	subs	r1, #1
 800f6d6:	e78b      	b.n	800f5f0 <__ieee754_fmod+0xb0>
 800f6d8:	ea50 0307 	orrs.w	r3, r0, r7
 800f6dc:	f43f af5f 	beq.w	800f59e <__ieee754_fmod+0x5e>
 800f6e0:	0ffb      	lsrs	r3, r7, #31
 800f6e2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800f6e6:	007c      	lsls	r4, r7, #1
 800f6e8:	e7f4      	b.n	800f6d4 <__ieee754_fmod+0x194>
 800f6ea:	0fe1      	lsrs	r1, r4, #31
 800f6ec:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800f6f0:	0064      	lsls	r4, r4, #1
 800f6f2:	3a01      	subs	r2, #1
 800f6f4:	e78c      	b.n	800f610 <__ieee754_fmod+0xd0>
 800f6f6:	1a89      	subs	r1, r1, r2
 800f6f8:	2914      	cmp	r1, #20
 800f6fa:	dc0a      	bgt.n	800f712 <__ieee754_fmod+0x1d2>
 800f6fc:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800f700:	fa03 f202 	lsl.w	r2, r3, r2
 800f704:	40cc      	lsrs	r4, r1
 800f706:	4322      	orrs	r2, r4
 800f708:	410b      	asrs	r3, r1
 800f70a:	ea43 0105 	orr.w	r1, r3, r5
 800f70e:	4610      	mov	r0, r2
 800f710:	e737      	b.n	800f582 <__ieee754_fmod+0x42>
 800f712:	291f      	cmp	r1, #31
 800f714:	dc07      	bgt.n	800f726 <__ieee754_fmod+0x1e6>
 800f716:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800f71a:	40cc      	lsrs	r4, r1
 800f71c:	fa03 f202 	lsl.w	r2, r3, r2
 800f720:	4322      	orrs	r2, r4
 800f722:	462b      	mov	r3, r5
 800f724:	e7f1      	b.n	800f70a <__ieee754_fmod+0x1ca>
 800f726:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800f72a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800f72e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800f732:	32e2      	adds	r2, #226	@ 0xe2
 800f734:	fa43 f202 	asr.w	r2, r3, r2
 800f738:	e7f3      	b.n	800f722 <__ieee754_fmod+0x1e2>
 800f73a:	bf00      	nop
 800f73c:	7fefffff 	.word	0x7fefffff
 800f740:	7ff00000 	.word	0x7ff00000
 800f744:	0800fb90 	.word	0x0800fb90
 800f748:	fffffbed 	.word	0xfffffbed
 800f74c:	fffffc02 	.word	0xfffffc02
 800f750:	fffffbe2 	.word	0xfffffbe2

0800f754 <_init>:
 800f754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f756:	bf00      	nop
 800f758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f75a:	bc08      	pop	{r3}
 800f75c:	469e      	mov	lr, r3
 800f75e:	4770      	bx	lr

0800f760 <_fini>:
 800f760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f762:	bf00      	nop
 800f764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f766:	bc08      	pop	{r3}
 800f768:	469e      	mov	lr, r3
 800f76a:	4770      	bx	lr
